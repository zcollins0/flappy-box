
# 1 "mcc_generated_files/drivers/i2c_simple_master.c"

# 12 "C:\Program Files (x86)\Microchip\xc8\v1.45\include\stdbool.h"
typedef unsigned char bool;

# 13 "C:\Program Files (x86)\Microchip\xc8\v1.45\include\stdint.h"
typedef signed char int8_t;

# 20
typedef signed int int16_t;

# 28
typedef signed short long int int24_t;

# 36
typedef signed long int int32_t;

# 43
typedef unsigned char uint8_t;

# 49
typedef unsigned int uint16_t;

# 56
typedef unsigned short long int uint24_t;

# 63
typedef unsigned long int uint32_t;

# 71
typedef signed char int_least8_t;

# 78
typedef signed int int_least16_t;

# 90
typedef signed short long int int_least24_t;

# 98
typedef signed long int int_least32_t;

# 105
typedef unsigned char uint_least8_t;

# 111
typedef unsigned int uint_least16_t;

# 121
typedef unsigned short long int uint_least24_t;

# 128
typedef unsigned long int uint_least32_t;

# 137
typedef signed char int_fast8_t;

# 144
typedef signed int int_fast16_t;

# 156
typedef signed short long int int_fast24_t;

# 164
typedef signed long int int_fast32_t;

# 171
typedef unsigned char uint_fast8_t;

# 177
typedef unsigned int uint_fast16_t;

# 187
typedef unsigned short long int uint_fast24_t;

# 194
typedef unsigned long int uint_fast32_t;

# 200
typedef int32_t intmax_t;




typedef uint32_t uintmax_t;




typedef int16_t intptr_t;




typedef uint16_t uintptr_t;

# 4 "C:\Program Files (x86)\Microchip\xc8\v1.45\include\__size_t.h"
typedef unsigned size_t;

# 7 "C:\Program Files (x86)\Microchip\xc8\v1.45\include\stdarg.h"
typedef void * va_list[1];

#pragma intrinsic(__va_start)
extern void * __va_start(void);

#pragma intrinsic(__va_arg)
extern void * __va_arg(void *, ...);

# 43 "C:\Program Files (x86)\Microchip\xc8\v1.45\include\stdio.h"
struct __prbuf
{
char * ptr;
void (* func)(char);
};

# 29 "C:\Program Files (x86)\Microchip\xc8\v1.45\include\errno.h"
extern int errno;

# 12 "C:\Program Files (x86)\Microchip\xc8\v1.45\include\conio.h"
extern void init_uart(void);

extern char getch(void);
extern char getche(void);
extern void putch(char);
extern void ungetch(char);

extern __bit kbhit(void);

# 23
extern char * cgets(char *);
extern void cputs(const char *);

# 88 "C:\Program Files (x86)\Microchip\xc8\v1.45\include\stdio.h"
extern int cprintf(char *, ...);
#pragma printf_check(cprintf)



extern int _doprnt(struct __prbuf *, const register char *, register va_list);


# 180
#pragma printf_check(vprintf) const
#pragma printf_check(vsprintf) const

extern char * gets(char *);
extern int puts(const char *);
extern int scanf(const char *, ...) __attribute__((unsupported("scanf() is not supported by this compiler")));
extern int sscanf(const char *, const char *, ...) __attribute__((unsupported("sscanf() is not supported by this compiler")));
extern int vprintf(const char *, va_list) __attribute__((unsupported("vprintf() is not supported by this compiler")));
extern int vsprintf(char *, const char *, va_list) __attribute__((unsupported("vsprintf() is not supported by this compiler")));
extern int vscanf(const char *, va_list ap) __attribute__((unsupported("vscanf() is not supported by this compiler")));
extern int vsscanf(const char *, const char *, va_list) __attribute__((unsupported("vsscanf() is not supported by this compiler")));

#pragma printf_check(printf) const
#pragma printf_check(sprintf) const
extern int sprintf(char *, const char *, ...);
extern int printf(const char *, ...);

# 29 "mcc_generated_files/drivers/i2c_types.h"
typedef enum {
I2C_NOERR,
I2C_BUSY,
I2C_FAIL


} i2c_error_t;

typedef enum
{
i2c_stop=1,
i2c_restart_read,
i2c_restart_write,
i2c_continue,
i2c_reset_link
} i2c_operations_t;

typedef i2c_operations_t (*i2c_callback)(void *p);

typedef uint8_t i2c_address_t;


i2c_operations_t i2c_returnStop(void *p);
i2c_operations_t i2c_returnReset(void *p);
i2c_operations_t i2c_restartWrite(void *p);
i2c_operations_t i2c_restartRead(void *p);

# 31 "mcc_generated_files/drivers/i2c_master.h"
typedef i2c_operations_t (*i2c_callback)(void *p);



i2c_error_t i2c_open(i2c_address_t address);
void i2c_setAddress(i2c_address_t address);
i2c_error_t i2c_close(void);
i2c_error_t i2c_masterOperation(bool read);
i2c_error_t i2c_masterWrite(void);
i2c_error_t i2c_masterRead(void);

void i2c_setTimeOut(uint8_t to);
void i2c_setBuffer(void *buffer, size_t bufferSize);


void i2c_setDataCompleteCallback(i2c_callback cb, void *p);
void i2c_setWriteCollisionCallback(i2c_callback cb, void *p);
void i2c_setAddressNACKCallback(i2c_callback cb, void *p);
void i2c_setDataNACKCallback(i2c_callback cb, void *p);
void i2c_setTimeOutCallback(i2c_callback cb, void *p);


void i2c_ISR(void);
void i2c_busCollisionISR(void);

# 29 "mcc_generated_files/drivers/i2c_simple_master.h"
uint8_t i2c_read1ByteRegister(i2c_address_t address, uint8_t reg);
uint16_t i2c_read2ByteRegister(i2c_address_t address, uint8_t reg);
void i2c_write1ByteRegister(i2c_address_t address, uint8_t reg, uint8_t data);
void i2c_write2ByteRegister(i2c_address_t address, uint8_t reg, uint16_t data);

void i2c_writeNBytes(i2c_address_t address, void* data, size_t len);
void i2c_readDataBlock(i2c_address_t address, uint8_t reg, void *data, size_t len);
void i2c_readNBytes(i2c_address_t address, void *data, size_t len);

# 31 "mcc_generated_files/drivers/i2c_simple_master.c"
static i2c_operations_t wr1RegCompleteHandler(void *p)
{
i2c_setBuffer(p,1);
i2c_setDataCompleteCallback((0),(0));
return i2c_continue;
}

void i2c_write1ByteRegister(i2c_address_t address, uint8_t reg, uint8_t data)
{
while(!i2c_open(address));
i2c_setDataCompleteCallback(wr1RegCompleteHandler,&data);
i2c_setBuffer(&reg,1);
i2c_setAddressNACKCallback(i2c_restartWrite,(0));
i2c_masterWrite();
while(I2C_BUSY == i2c_close());
}

void i2c_writeNBytes(i2c_address_t address, void* data, size_t len)
{
while(!i2c_open(address));
i2c_setBuffer(data,len);
i2c_setAddressNACKCallback(i2c_restartWrite,(0));
i2c_masterWrite();
while(I2C_BUSY == i2c_close());
}


static i2c_operations_t rd1RegCompleteHandler(void *p)
{
i2c_setBuffer(p,1);
i2c_setDataCompleteCallback((0),(0));
return i2c_restart_read;
}

uint8_t i2c_read1ByteRegister(i2c_address_t address, uint8_t reg)
{
uint8_t d2=42;
i2c_error_t e;
int x;

for(x = 2; x != 0; x--)
{
while(!i2c_open(address));
i2c_setDataCompleteCallback(rd1RegCompleteHandler,&d2);
i2c_setBuffer(&reg,1);
i2c_setAddressNACKCallback(i2c_restartWrite,(0));
i2c_masterWrite();
while(I2C_BUSY == (e = i2c_close()));
if(e==I2C_NOERR) break;
}


return d2;
}


static i2c_operations_t rd2RegCompleteHandler(void *p)
{
i2c_setBuffer(p,2);
i2c_setDataCompleteCallback((0),(0));
return i2c_restart_read;
}

uint16_t i2c_read2ByteRegister(i2c_address_t address, uint8_t reg)
{

uint16_t result;

while(!i2c_open(address));
i2c_setDataCompleteCallback(rd2RegCompleteHandler,&result);
i2c_setBuffer(&reg,1);
i2c_setAddressNACKCallback(i2c_restartWrite,(0));
i2c_masterWrite();
while(I2C_BUSY == i2c_close());

return (result << 8 | result >> 8);
}


static i2c_operations_t wr2RegCompleteHandler(void *p)
{
i2c_setBuffer(p,2);
i2c_setDataCompleteCallback((0),(0));
return i2c_continue;
}

void i2c_write2ByteRegister(i2c_address_t address, uint8_t reg, uint16_t data)
{
while(!i2c_open(address));
i2c_setDataCompleteCallback(wr2RegCompleteHandler,&data);
i2c_setBuffer(&reg,1);
i2c_setAddressNACKCallback(i2c_restartWrite,(0));
i2c_masterWrite();
while(I2C_BUSY == i2c_close());
}


typedef struct
{
size_t len;
char *data;
}buf_t;

static i2c_operations_t rdBlkRegCompleteHandler(void *p)
{
i2c_setBuffer(((buf_t *)p)->data,((buf_t*)p)->len);
i2c_setDataCompleteCallback((0),(0));
return i2c_restart_read;
}

void i2c_readDataBlock(i2c_address_t address, uint8_t reg, void *data, size_t len)
{

buf_t d;
d.data = data;
d.len = len;

while(!i2c_open(address));
i2c_setDataCompleteCallback(rdBlkRegCompleteHandler,&d);
i2c_setBuffer(&reg,1);
i2c_setAddressNACKCallback(i2c_restartWrite,(0));
i2c_masterWrite();
while(I2C_BUSY == i2c_close());
}

void i2c_readNBytes(i2c_address_t address, void *data, size_t len)
{
while(!i2c_open(address));
i2c_setBuffer(data,len);
i2c_masterRead();
while(I2C_BUSY == i2c_close());
}
