

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Wed Apr 11 10:33:06 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F1619
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	inittext,global,class=CODE,delta=2
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    17                           	psect	text1,local,class=CODE,merge=1,delta=2
    18                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    19                           	psect	text3,local,class=CODE,merge=1,delta=2
    20                           	psect	text4,local,class=CODE,merge=1,delta=2
    21                           	psect	text5,local,class=CODE,merge=1,delta=2
    22                           	psect	text6,local,class=CODE,merge=1,delta=2
    23                           	psect	text7,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text9,local,class=CODE,merge=1,delta=2
    26                           	psect	text10,local,class=CODE,merge=1,delta=2
    27                           	psect	text11,local,class=CODE,merge=1,delta=2
    28                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text13,local,class=CODE,merge=1,inline,delta=2
    30                           	psect	text14,local,class=CODE,merge=1,inline,delta=2
    31                           	psect	text15,local,class=CODE,merge=1,delta=2
    32                           	psect	text16,local,class=CODE,merge=1,delta=2
    33                           	psect	text17,local,class=CODE,merge=1,delta=2
    34                           	psect	text18,local,class=CODE,merge=1,delta=2
    35                           	psect	text19,local,class=CODE,merge=1,delta=2
    36                           	psect	text20,local,class=CODE,merge=1,delta=2
    37                           	psect	text21,local,class=CODE,merge=1,delta=2
    38                           	psect	text22,local,class=CODE,merge=1,delta=2
    39                           	psect	text23,local,class=CODE,merge=1,delta=2
    40                           	psect	text24,local,class=CODE,merge=1,delta=2
    41                           	psect	text25,local,class=CODE,merge=1,delta=2
    42                           	psect	text26,local,class=CODE,merge=1,delta=2
    43                           	psect	text27,local,class=CODE,merge=1,delta=2
    44                           	psect	text28,local,class=CODE,merge=1,delta=2
    45                           	psect	text29,local,class=CODE,merge=1,delta=2
    46                           	psect	text30,local,class=CODE,merge=1,delta=2
    47                           	psect	text31,local,class=CODE,merge=1,delta=2
    48                           	psect	text32,local,class=CODE,merge=1,inline,delta=2
    49                           	psect	text33,local,class=CODE,merge=1,inline,delta=2
    50                           	psect	text34,local,class=CODE,merge=1,inline,delta=2
    51                           	psect	text35,local,class=CODE,merge=1,inline,delta=2
    52                           	psect	text36,local,class=CODE,merge=1,inline,delta=2
    53                           	psect	text37,local,class=CODE,merge=1,inline,delta=2
    54                           	psect	text38,local,class=CODE,merge=1,inline,delta=2
    55                           	psect	text39,local,class=CODE,merge=1,delta=2
    56                           	psect	text40,local,class=CODE,merge=1,delta=2
    57                           	psect	text41,local,class=CODE,merge=1,delta=2
    58                           	psect	text42,local,class=CODE,merge=1,delta=2
    59                           	psect	text43,local,class=CODE,merge=1,delta=2
    60                           	psect	text44,local,class=CODE,merge=1,delta=2
    61                           	psect	text45,local,class=CODE,merge=1,delta=2
    62                           	psect	text46,local,class=CODE,merge=1,delta=2
    63                           	psect	text47,local,class=CODE,merge=1,delta=2
    64                           	psect	text48,local,class=CODE,merge=1,delta=2
    65                           	psect	text49,local,class=CODE,merge=1,delta=2
    66                           	psect	text50,local,class=CODE,merge=1,inline,delta=2
    67                           	psect	text51,local,class=CODE,merge=1,inline,delta=2
    68                           	psect	text52,local,class=CODE,merge=1,inline,delta=2
    69                           	psect	text53,local,class=CODE,merge=1,inline,delta=2
    70                           	psect	text54,local,class=CODE,merge=1,delta=2
    71                           	psect	text55,local,class=CODE,merge=1,inline,delta=2
    72                           	psect	text56,local,class=CODE,merge=1,inline,delta=2
    73                           	psect	text57,local,class=CODE,merge=1,delta=2
    74                           	psect	text58,local,class=CODE,merge=1,delta=2
    75                           	psect	text59,local,class=CODE,merge=1,delta=2
    76                           	psect	text60,local,class=CODE,merge=1,delta=2
    77                           	psect	text61,local,class=CODE,merge=1,delta=2
    78                           	psect	intentry,global,class=CODE,delta=2
    79                           	psect	text63,local,class=CODE,merge=1,delta=2
    80                           	psect	text64,local,class=CODE,merge=1,inline,delta=2
    81                           	psect	text65,local,class=CODE,merge=1,delta=2
    82                           	psect	text66,local,class=CODE,merge=1,delta=2
    83                           	psect	text67,local,class=CODE,merge=1,delta=2
    84                           	psect	text68,local,class=CODE,merge=1,delta=2
    85                           	psect	text69,local,class=CODE,merge=1,delta=2
    86                           	psect	text70,local,class=CODE,merge=1,delta=2
    87                           	psect	text71,local,class=CODE,merge=1,delta=2
    88                           	psect	text72,local,class=CODE,merge=1,delta=2
    89                           	psect	text73,local,class=CODE,merge=1,delta=2
    90                           	psect	text74,local,class=CODE,merge=1,delta=2
    91                           	psect	text75,local,class=CODE,merge=1,delta=2
    92                           	psect	text76,local,class=CODE,merge=1,delta=2
    93                           	psect	text77,local,class=CODE,merge=1,delta=2
    94                           	psect	text78,local,class=CODE,merge=1,delta=2
    95                           	psect	text79,local,class=CODE,merge=1,delta=2
    96                           	psect	text80,local,class=CODE,merge=1,delta=2
    97                           	psect	text81,local,class=CODE,merge=1,inline,delta=2
    98                           	psect	text82,local,class=CODE,merge=1,inline,delta=2
    99                           	psect	text83,local,class=CODE,merge=1,inline,delta=2
   100                           	psect	text84,local,class=CODE,merge=1,inline,delta=2
   101                           	psect	text85,local,class=CODE,merge=1,inline,delta=2
   102                           	psect	text86,local,class=CODE,merge=1,inline,delta=2
   103                           	psect	text87,local,class=CODE,merge=1,inline,delta=2
   104                           	psect	text88,local,class=CODE,merge=1,delta=2
   105                           	psect	text89,local,class=CODE,merge=1,delta=2
   106                           	psect	text90,local,class=CODE,merge=1,delta=2
   107                           	psect	text91,local,class=CODE,merge=1,delta=2
   108                           	psect	text92,local,class=CODE,merge=1,delta=2
   109                           	psect	text93,local,class=CODE,merge=1,delta=2
   110                           	psect	text94,local,class=CODE,merge=1,delta=2
   111                           	psect	text95,local,class=CODE,merge=1,delta=2
   112                           	psect	text96,local,class=CODE,merge=1,delta=2
   113                           	psect	text97,local,class=CODE,merge=1,delta=2
   114                           	psect	text98,local,class=CODE,merge=1,delta=2
   115                           	psect	text99,local,class=CODE,merge=1,inline,delta=2
   116                           	psect	text100,local,class=CODE,merge=1,inline,delta=2
   117                           	psect	text101,local,class=CODE,merge=1,inline,delta=2
   118                           	psect	text102,local,class=CODE,merge=1,delta=2
   119                           	psect	text103,local,class=CODE,merge=1,inline,delta=2
   120                           	dabs	1,0x7E,2
   121  0000                     
   122                           ; Version 1.45
   123                           ; Generated 16/11/2017 GMT
   124                           ; 
   125                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   126                           ; All rights reserved.
   127                           ; 
   128                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   129                           ; 
   130                           ; Redistribution and use in source and binary forms, with or without modification, are
   131                           ; permitted provided that the following conditions are met:
   132                           ; 
   133                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   134                           ;        conditions and the following disclaimer.
   135                           ; 
   136                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   137                           ;        of conditions and the following disclaimer in the documentation and/or other
   138                           ;        materials provided with the distribution.
   139                           ; 
   140                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   141                           ;        software without specific prior written permission.
   142                           ; 
   143                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   144                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   145                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   146                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   147                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   148                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   149                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   150                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   151                           ; 
   152                           ; 
   153                           ; Code-generator required, PIC16F1619 Definitions
   154                           ; 
   155                           ; SFR Addresses
   156  0000                     	;# 
   157  0001                     	;# 
   158  0002                     	;# 
   159  0003                     	;# 
   160  0004                     	;# 
   161  0005                     	;# 
   162  0006                     	;# 
   163  0007                     	;# 
   164  0008                     	;# 
   165  0009                     	;# 
   166  000A                     	;# 
   167  000B                     	;# 
   168  000C                     	;# 
   169  000D                     	;# 
   170  000E                     	;# 
   171  0010                     	;# 
   172  0011                     	;# 
   173  0012                     	;# 
   174  0013                     	;# 
   175  0014                     	;# 
   176  0015                     	;# 
   177  0016                     	;# 
   178  0016                     	;# 
   179  0017                     	;# 
   180  0018                     	;# 
   181  0019                     	;# 
   182  001A                     	;# 
   183  001A                     	;# 
   184  001B                     	;# 
   185  001B                     	;# 
   186  001C                     	;# 
   187  001D                     	;# 
   188  001E                     	;# 
   189  001F                     	;# 
   190  008C                     	;# 
   191  008D                     	;# 
   192  008E                     	;# 
   193  0090                     	;# 
   194  0091                     	;# 
   195  0092                     	;# 
   196  0093                     	;# 
   197  0094                     	;# 
   198  0095                     	;# 
   199  0096                     	;# 
   200  0098                     	;# 
   201  0099                     	;# 
   202  009A                     	;# 
   203  009B                     	;# 
   204  009B                     	;# 
   205  009C                     	;# 
   206  009D                     	;# 
   207  009E                     	;# 
   208  009F                     	;# 
   209  010C                     	;# 
   210  010D                     	;# 
   211  010E                     	;# 
   212  0111                     	;# 
   213  0112                     	;# 
   214  0113                     	;# 
   215  0114                     	;# 
   216  0115                     	;# 
   217  0116                     	;# 
   218  0117                     	;# 
   219  0118                     	;# 
   220  0119                     	;# 
   221  011C                     	;# 
   222  018C                     	;# 
   223  018D                     	;# 
   224  018E                     	;# 
   225  0191                     	;# 
   226  0191                     	;# 
   227  0192                     	;# 
   228  0193                     	;# 
   229  0193                     	;# 
   230  0194                     	;# 
   231  0195                     	;# 
   232  0196                     	;# 
   233  0197                     	;# 
   234  0199                     	;# 
   235  0199                     	;# 
   236  0199                     	;# 
   237  019A                     	;# 
   238  019A                     	;# 
   239  019A                     	;# 
   240  019B                     	;# 
   241  019B                     	;# 
   242  019B                     	;# 
   243  019B                     	;# 
   244  019B                     	;# 
   245  019C                     	;# 
   246  019C                     	;# 
   247  019C                     	;# 
   248  019D                     	;# 
   249  019D                     	;# 
   250  019D                     	;# 
   251  019E                     	;# 
   252  019E                     	;# 
   253  019E                     	;# 
   254  019F                     	;# 
   255  019F                     	;# 
   256  019F                     	;# 
   257  019F                     	;# 
   258  019F                     	;# 
   259  020C                     	;# 
   260  020D                     	;# 
   261  020E                     	;# 
   262  0211                     	;# 
   263  0211                     	;# 
   264  0212                     	;# 
   265  0212                     	;# 
   266  0213                     	;# 
   267  0213                     	;# 
   268  0214                     	;# 
   269  0214                     	;# 
   270  0215                     	;# 
   271  0215                     	;# 
   272  0215                     	;# 
   273  0215                     	;# 
   274  0216                     	;# 
   275  0216                     	;# 
   276  0217                     	;# 
   277  0217                     	;# 
   278  028C                     	;# 
   279  028D                     	;# 
   280  028E                     	;# 
   281  0291                     	;# 
   282  0291                     	;# 
   283  0292                     	;# 
   284  0293                     	;# 
   285  0294                     	;# 
   286  0298                     	;# 
   287  0298                     	;# 
   288  0299                     	;# 
   289  029A                     	;# 
   290  029B                     	;# 
   291  029E                     	;# 
   292  030C                     	;# 
   293  030D                     	;# 
   294  030E                     	;# 
   295  038C                     	;# 
   296  038D                     	;# 
   297  038E                     	;# 
   298  0391                     	;# 
   299  0392                     	;# 
   300  0393                     	;# 
   301  0394                     	;# 
   302  0395                     	;# 
   303  0396                     	;# 
   304  0397                     	;# 
   305  0398                     	;# 
   306  0399                     	;# 
   307  040E                     	;# 
   308  0413                     	;# 
   309  0413                     	;# 
   310  0414                     	;# 
   311  0414                     	;# 
   312  0415                     	;# 
   313  0416                     	;# 
   314  0417                     	;# 
   315  0418                     	;# 
   316  041A                     	;# 
   317  041A                     	;# 
   318  041B                     	;# 
   319  041B                     	;# 
   320  041C                     	;# 
   321  041D                     	;# 
   322  041E                     	;# 
   323  041F                     	;# 
   324  0493                     	;# 
   325  0494                     	;# 
   326  0495                     	;# 
   327  0496                     	;# 
   328  049A                     	;# 
   329  049B                     	;# 
   330  049C                     	;# 
   331  049D                     	;# 
   332  058C                     	;# 
   333  058C                     	;# 
   334  058D                     	;# 
   335  058E                     	;# 
   336  058E                     	;# 
   337  058F                     	;# 
   338  0590                     	;# 
   339  0590                     	;# 
   340  0591                     	;# 
   341  0592                     	;# 
   342  0592                     	;# 
   343  0593                     	;# 
   344  0594                     	;# 
   345  0594                     	;# 
   346  0595                     	;# 
   347  0596                     	;# 
   348  0596                     	;# 
   349  0597                     	;# 
   350  0598                     	;# 
   351  0599                     	;# 
   352  059A                     	;# 
   353  059B                     	;# 
   354  059B                     	;# 
   355  059C                     	;# 
   356  059D                     	;# 
   357  060C                     	;# 
   358  060C                     	;# 
   359  060D                     	;# 
   360  060E                     	;# 
   361  060F                     	;# 
   362  060F                     	;# 
   363  0610                     	;# 
   364  0611                     	;# 
   365  0612                     	;# 
   366  0613                     	;# 
   367  0614                     	;# 
   368  0617                     	;# 
   369  0618                     	;# 
   370  0619                     	;# 
   371  061A                     	;# 
   372  061B                     	;# 
   373  061C                     	;# 
   374  0691                     	;# 
   375  0692                     	;# 
   376  0693                     	;# 
   377  0694                     	;# 
   378  0695                     	;# 
   379  0696                     	;# 
   380  0697                     	;# 
   381  0699                     	;# 
   382  069A                     	;# 
   383  0711                     	;# 
   384  0712                     	;# 
   385  0713                     	;# 
   386  0714                     	;# 
   387  0715                     	;# 
   388  0718                     	;# 
   389  0718                     	;# 
   390  0719                     	;# 
   391  071A                     	;# 
   392  071A                     	;# 
   393  071B                     	;# 
   394  071C                     	;# 
   395  071D                     	;# 
   396  0791                     	;# 
   397  0791                     	;# 
   398  0792                     	;# 
   399  0793                     	;# 
   400  0793                     	;# 
   401  0794                     	;# 
   402  0795                     	;# 
   403  0795                     	;# 
   404  0796                     	;# 
   405  0797                     	;# 
   406  0797                     	;# 
   407  0798                     	;# 
   408  0799                     	;# 
   409  079A                     	;# 
   410  080C                     	;# 
   411  080C                     	;# 
   412  080D                     	;# 
   413  080E                     	;# 
   414  080E                     	;# 
   415  080F                     	;# 
   416  0810                     	;# 
   417  0810                     	;# 
   418  0811                     	;# 
   419  0812                     	;# 
   420  0812                     	;# 
   421  0813                     	;# 
   422  0814                     	;# 
   423  0815                     	;# 
   424  0816                     	;# 
   425  0817                     	;# 
   426  0818                     	;# 
   427  0819                     	;# 
   428  081A                     	;# 
   429  081A                     	;# 
   430  081B                     	;# 
   431  081C                     	;# 
   432  081C                     	;# 
   433  081D                     	;# 
   434  088C                     	;# 
   435  088D                     	;# 
   436  088E                     	;# 
   437  088F                     	;# 
   438  088F                     	;# 
   439  0890                     	;# 
   440  0891                     	;# 
   441  0892                     	;# 
   442  0893                     	;# 
   443  0893                     	;# 
   444  0894                     	;# 
   445  0895                     	;# 
   446  0896                     	;# 
   447  0897                     	;# 
   448  0897                     	;# 
   449  0898                     	;# 
   450  0899                     	;# 
   451  0D8C                     	;# 
   452  0D8C                     	;# 
   453  0D8D                     	;# 
   454  0D8E                     	;# 
   455  0D8F                     	;# 
   456  0D8F                     	;# 
   457  0D90                     	;# 
   458  0D91                     	;# 
   459  0D92                     	;# 
   460  0D92                     	;# 
   461  0D93                     	;# 
   462  0D94                     	;# 
   463  0D95                     	;# 
   464  0D95                     	;# 
   465  0D96                     	;# 
   466  0D97                     	;# 
   467  0D98                     	;# 
   468  0D99                     	;# 
   469  0D9A                     	;# 
   470  0D9B                     	;# 
   471  0D9C                     	;# 
   472  0D9D                     	;# 
   473  0D9E                     	;# 
   474  0D9E                     	;# 
   475  0D9F                     	;# 
   476  0DA0                     	;# 
   477  0DA1                     	;# 
   478  0DA1                     	;# 
   479  0DA2                     	;# 
   480  0DA3                     	;# 
   481  0DA4                     	;# 
   482  0DA4                     	;# 
   483  0DA5                     	;# 
   484  0DA6                     	;# 
   485  0DA7                     	;# 
   486  0DA7                     	;# 
   487  0DA8                     	;# 
   488  0DA9                     	;# 
   489  0DAA                     	;# 
   490  0DAB                     	;# 
   491  0DAC                     	;# 
   492  0DAD                     	;# 
   493  0DAE                     	;# 
   494  0DAF                     	;# 
   495  0E0F                     	;# 
   496  0E10                     	;# 
   497  0E11                     	;# 
   498  0E12                     	;# 
   499  0E13                     	;# 
   500  0E14                     	;# 
   501  0E15                     	;# 
   502  0E16                     	;# 
   503  0E17                     	;# 
   504  0E18                     	;# 
   505  0E19                     	;# 
   506  0E1A                     	;# 
   507  0E1B                     	;# 
   508  0E1C                     	;# 
   509  0E1D                     	;# 
   510  0E1E                     	;# 
   511  0E1F                     	;# 
   512  0E20                     	;# 
   513  0E21                     	;# 
   514  0E22                     	;# 
   515  0E23                     	;# 
   516  0E24                     	;# 
   517  0E25                     	;# 
   518  0E26                     	;# 
   519  0E27                     	;# 
   520  0E28                     	;# 
   521  0E29                     	;# 
   522  0E2A                     	;# 
   523  0E2B                     	;# 
   524  0E2C                     	;# 
   525  0E2D                     	;# 
   526  0E2E                     	;# 
   527  0E90                     	;# 
   528  0E91                     	;# 
   529  0E92                     	;# 
   530  0E94                     	;# 
   531  0E95                     	;# 
   532  0E9C                     	;# 
   533  0E9D                     	;# 
   534  0E9E                     	;# 
   535  0E9F                     	;# 
   536  0EA0                     	;# 
   537  0EA1                     	;# 
   538  0EA2                     	;# 
   539  0EA3                     	;# 
   540  0EA4                     	;# 
   541  0EA5                     	;# 
   542  0EA6                     	;# 
   543  0EA7                     	;# 
   544  0F0F                     	;# 
   545  0F10                     	;# 
   546  0F11                     	;# 
   547  0F12                     	;# 
   548  0F13                     	;# 
   549  0F14                     	;# 
   550  0F15                     	;# 
   551  0F16                     	;# 
   552  0F17                     	;# 
   553  0F18                     	;# 
   554  0F19                     	;# 
   555  0F1A                     	;# 
   556  0F1B                     	;# 
   557  0F1C                     	;# 
   558  0F1D                     	;# 
   559  0F1E                     	;# 
   560  0F1F                     	;# 
   561  0F20                     	;# 
   562  0F21                     	;# 
   563  0F22                     	;# 
   564  0F23                     	;# 
   565  0F24                     	;# 
   566  0F25                     	;# 
   567  0F26                     	;# 
   568  0F27                     	;# 
   569  0F28                     	;# 
   570  0F29                     	;# 
   571  0F2A                     	;# 
   572  0F2B                     	;# 
   573  0F2C                     	;# 
   574  0F2D                     	;# 
   575  0F2E                     	;# 
   576  0F2F                     	;# 
   577  0F30                     	;# 
   578  0F31                     	;# 
   579  0F32                     	;# 
   580  0F33                     	;# 
   581  0F34                     	;# 
   582  0F35                     	;# 
   583  0F36                     	;# 
   584  0F37                     	;# 
   585  0FE4                     	;# 
   586  0FE5                     	;# 
   587  0FE6                     	;# 
   588  0FE7                     	;# 
   589  0FE8                     	;# 
   590  0FE9                     	;# 
   591  0FEA                     	;# 
   592  0FEB                     	;# 
   593  0FED                     	;# 
   594  0FEE                     	;# 
   595  0FEF                     	;# 
   596  0000                     	;# 
   597  0001                     	;# 
   598  0002                     	;# 
   599  0003                     	;# 
   600  0004                     	;# 
   601  0005                     	;# 
   602  0006                     	;# 
   603  0007                     	;# 
   604  0008                     	;# 
   605  0009                     	;# 
   606  000A                     	;# 
   607  000B                     	;# 
   608  000C                     	;# 
   609  000D                     	;# 
   610  000E                     	;# 
   611  0010                     	;# 
   612  0011                     	;# 
   613  0012                     	;# 
   614  0013                     	;# 
   615  0014                     	;# 
   616  0015                     	;# 
   617  0016                     	;# 
   618  0016                     	;# 
   619  0017                     	;# 
   620  0018                     	;# 
   621  0019                     	;# 
   622  001A                     	;# 
   623  001A                     	;# 
   624  001B                     	;# 
   625  001B                     	;# 
   626  001C                     	;# 
   627  001D                     	;# 
   628  001E                     	;# 
   629  001F                     	;# 
   630  008C                     	;# 
   631  008D                     	;# 
   632  008E                     	;# 
   633  0090                     	;# 
   634  0091                     	;# 
   635  0092                     	;# 
   636  0093                     	;# 
   637  0094                     	;# 
   638  0095                     	;# 
   639  0096                     	;# 
   640  0098                     	;# 
   641  0099                     	;# 
   642  009A                     	;# 
   643  009B                     	;# 
   644  009B                     	;# 
   645  009C                     	;# 
   646  009D                     	;# 
   647  009E                     	;# 
   648  009F                     	;# 
   649  010C                     	;# 
   650  010D                     	;# 
   651  010E                     	;# 
   652  0111                     	;# 
   653  0112                     	;# 
   654  0113                     	;# 
   655  0114                     	;# 
   656  0115                     	;# 
   657  0116                     	;# 
   658  0117                     	;# 
   659  0118                     	;# 
   660  0119                     	;# 
   661  011C                     	;# 
   662  018C                     	;# 
   663  018D                     	;# 
   664  018E                     	;# 
   665  0191                     	;# 
   666  0191                     	;# 
   667  0192                     	;# 
   668  0193                     	;# 
   669  0193                     	;# 
   670  0194                     	;# 
   671  0195                     	;# 
   672  0196                     	;# 
   673  0197                     	;# 
   674  0199                     	;# 
   675  0199                     	;# 
   676  0199                     	;# 
   677  019A                     	;# 
   678  019A                     	;# 
   679  019A                     	;# 
   680  019B                     	;# 
   681  019B                     	;# 
   682  019B                     	;# 
   683  019B                     	;# 
   684  019B                     	;# 
   685  019C                     	;# 
   686  019C                     	;# 
   687  019C                     	;# 
   688  019D                     	;# 
   689  019D                     	;# 
   690  019D                     	;# 
   691  019E                     	;# 
   692  019E                     	;# 
   693  019E                     	;# 
   694  019F                     	;# 
   695  019F                     	;# 
   696  019F                     	;# 
   697  019F                     	;# 
   698  019F                     	;# 
   699  020C                     	;# 
   700  020D                     	;# 
   701  020E                     	;# 
   702  0211                     	;# 
   703  0211                     	;# 
   704  0212                     	;# 
   705  0212                     	;# 
   706  0213                     	;# 
   707  0213                     	;# 
   708  0214                     	;# 
   709  0214                     	;# 
   710  0215                     	;# 
   711  0215                     	;# 
   712  0215                     	;# 
   713  0215                     	;# 
   714  0216                     	;# 
   715  0216                     	;# 
   716  0217                     	;# 
   717  0217                     	;# 
   718  028C                     	;# 
   719  028D                     	;# 
   720  028E                     	;# 
   721  0291                     	;# 
   722  0291                     	;# 
   723  0292                     	;# 
   724  0293                     	;# 
   725  0294                     	;# 
   726  0298                     	;# 
   727  0298                     	;# 
   728  0299                     	;# 
   729  029A                     	;# 
   730  029B                     	;# 
   731  029E                     	;# 
   732  030C                     	;# 
   733  030D                     	;# 
   734  030E                     	;# 
   735  038C                     	;# 
   736  038D                     	;# 
   737  038E                     	;# 
   738  0391                     	;# 
   739  0392                     	;# 
   740  0393                     	;# 
   741  0394                     	;# 
   742  0395                     	;# 
   743  0396                     	;# 
   744  0397                     	;# 
   745  0398                     	;# 
   746  0399                     	;# 
   747  040E                     	;# 
   748  0413                     	;# 
   749  0413                     	;# 
   750  0414                     	;# 
   751  0414                     	;# 
   752  0415                     	;# 
   753  0416                     	;# 
   754  0417                     	;# 
   755  0418                     	;# 
   756  041A                     	;# 
   757  041A                     	;# 
   758  041B                     	;# 
   759  041B                     	;# 
   760  041C                     	;# 
   761  041D                     	;# 
   762  041E                     	;# 
   763  041F                     	;# 
   764  0493                     	;# 
   765  0494                     	;# 
   766  0495                     	;# 
   767  0496                     	;# 
   768  049A                     	;# 
   769  049B                     	;# 
   770  049C                     	;# 
   771  049D                     	;# 
   772  058C                     	;# 
   773  058C                     	;# 
   774  058D                     	;# 
   775  058E                     	;# 
   776  058E                     	;# 
   777  058F                     	;# 
   778  0590                     	;# 
   779  0590                     	;# 
   780  0591                     	;# 
   781  0592                     	;# 
   782  0592                     	;# 
   783  0593                     	;# 
   784  0594                     	;# 
   785  0594                     	;# 
   786  0595                     	;# 
   787  0596                     	;# 
   788  0596                     	;# 
   789  0597                     	;# 
   790  0598                     	;# 
   791  0599                     	;# 
   792  059A                     	;# 
   793  059B                     	;# 
   794  059B                     	;# 
   795  059C                     	;# 
   796  059D                     	;# 
   797  060C                     	;# 
   798  060C                     	;# 
   799  060D                     	;# 
   800  060E                     	;# 
   801  060F                     	;# 
   802  060F                     	;# 
   803  0610                     	;# 
   804  0611                     	;# 
   805  0612                     	;# 
   806  0613                     	;# 
   807  0614                     	;# 
   808  0617                     	;# 
   809  0618                     	;# 
   810  0619                     	;# 
   811  061A                     	;# 
   812  061B                     	;# 
   813  061C                     	;# 
   814  0691                     	;# 
   815  0692                     	;# 
   816  0693                     	;# 
   817  0694                     	;# 
   818  0695                     	;# 
   819  0696                     	;# 
   820  0697                     	;# 
   821  0699                     	;# 
   822  069A                     	;# 
   823  0711                     	;# 
   824  0712                     	;# 
   825  0713                     	;# 
   826  0714                     	;# 
   827  0715                     	;# 
   828  0718                     	;# 
   829  0718                     	;# 
   830  0719                     	;# 
   831  071A                     	;# 
   832  071A                     	;# 
   833  071B                     	;# 
   834  071C                     	;# 
   835  071D                     	;# 
   836  0791                     	;# 
   837  0791                     	;# 
   838  0792                     	;# 
   839  0793                     	;# 
   840  0793                     	;# 
   841  0794                     	;# 
   842  0795                     	;# 
   843  0795                     	;# 
   844  0796                     	;# 
   845  0797                     	;# 
   846  0797                     	;# 
   847  0798                     	;# 
   848  0799                     	;# 
   849  079A                     	;# 
   850  080C                     	;# 
   851  080C                     	;# 
   852  080D                     	;# 
   853  080E                     	;# 
   854  080E                     	;# 
   855  080F                     	;# 
   856  0810                     	;# 
   857  0810                     	;# 
   858  0811                     	;# 
   859  0812                     	;# 
   860  0812                     	;# 
   861  0813                     	;# 
   862  0814                     	;# 
   863  0815                     	;# 
   864  0816                     	;# 
   865  0817                     	;# 
   866  0818                     	;# 
   867  0819                     	;# 
   868  081A                     	;# 
   869  081A                     	;# 
   870  081B                     	;# 
   871  081C                     	;# 
   872  081C                     	;# 
   873  081D                     	;# 
   874  088C                     	;# 
   875  088D                     	;# 
   876  088E                     	;# 
   877  088F                     	;# 
   878  088F                     	;# 
   879  0890                     	;# 
   880  0891                     	;# 
   881  0892                     	;# 
   882  0893                     	;# 
   883  0893                     	;# 
   884  0894                     	;# 
   885  0895                     	;# 
   886  0896                     	;# 
   887  0897                     	;# 
   888  0897                     	;# 
   889  0898                     	;# 
   890  0899                     	;# 
   891  0D8C                     	;# 
   892  0D8C                     	;# 
   893  0D8D                     	;# 
   894  0D8E                     	;# 
   895  0D8F                     	;# 
   896  0D8F                     	;# 
   897  0D90                     	;# 
   898  0D91                     	;# 
   899  0D92                     	;# 
   900  0D92                     	;# 
   901  0D93                     	;# 
   902  0D94                     	;# 
   903  0D95                     	;# 
   904  0D95                     	;# 
   905  0D96                     	;# 
   906  0D97                     	;# 
   907  0D98                     	;# 
   908  0D99                     	;# 
   909  0D9A                     	;# 
   910  0D9B                     	;# 
   911  0D9C                     	;# 
   912  0D9D                     	;# 
   913  0D9E                     	;# 
   914  0D9E                     	;# 
   915  0D9F                     	;# 
   916  0DA0                     	;# 
   917  0DA1                     	;# 
   918  0DA1                     	;# 
   919  0DA2                     	;# 
   920  0DA3                     	;# 
   921  0DA4                     	;# 
   922  0DA4                     	;# 
   923  0DA5                     	;# 
   924  0DA6                     	;# 
   925  0DA7                     	;# 
   926  0DA7                     	;# 
   927  0DA8                     	;# 
   928  0DA9                     	;# 
   929  0DAA                     	;# 
   930  0DAB                     	;# 
   931  0DAC                     	;# 
   932  0DAD                     	;# 
   933  0DAE                     	;# 
   934  0DAF                     	;# 
   935  0E0F                     	;# 
   936  0E10                     	;# 
   937  0E11                     	;# 
   938  0E12                     	;# 
   939  0E13                     	;# 
   940  0E14                     	;# 
   941  0E15                     	;# 
   942  0E16                     	;# 
   943  0E17                     	;# 
   944  0E18                     	;# 
   945  0E19                     	;# 
   946  0E1A                     	;# 
   947  0E1B                     	;# 
   948  0E1C                     	;# 
   949  0E1D                     	;# 
   950  0E1E                     	;# 
   951  0E1F                     	;# 
   952  0E20                     	;# 
   953  0E21                     	;# 
   954  0E22                     	;# 
   955  0E23                     	;# 
   956  0E24                     	;# 
   957  0E25                     	;# 
   958  0E26                     	;# 
   959  0E27                     	;# 
   960  0E28                     	;# 
   961  0E29                     	;# 
   962  0E2A                     	;# 
   963  0E2B                     	;# 
   964  0E2C                     	;# 
   965  0E2D                     	;# 
   966  0E2E                     	;# 
   967  0E90                     	;# 
   968  0E91                     	;# 
   969  0E92                     	;# 
   970  0E94                     	;# 
   971  0E95                     	;# 
   972  0E9C                     	;# 
   973  0E9D                     	;# 
   974  0E9E                     	;# 
   975  0E9F                     	;# 
   976  0EA0                     	;# 
   977  0EA1                     	;# 
   978  0EA2                     	;# 
   979  0EA3                     	;# 
   980  0EA4                     	;# 
   981  0EA5                     	;# 
   982  0EA6                     	;# 
   983  0EA7                     	;# 
   984  0F0F                     	;# 
   985  0F10                     	;# 
   986  0F11                     	;# 
   987  0F12                     	;# 
   988  0F13                     	;# 
   989  0F14                     	;# 
   990  0F15                     	;# 
   991  0F16                     	;# 
   992  0F17                     	;# 
   993  0F18                     	;# 
   994  0F19                     	;# 
   995  0F1A                     	;# 
   996  0F1B                     	;# 
   997  0F1C                     	;# 
   998  0F1D                     	;# 
   999  0F1E                     	;# 
  1000  0F1F                     	;# 
  1001  0F20                     	;# 
  1002  0F21                     	;# 
  1003  0F22                     	;# 
  1004  0F23                     	;# 
  1005  0F24                     	;# 
  1006  0F25                     	;# 
  1007  0F26                     	;# 
  1008  0F27                     	;# 
  1009  0F28                     	;# 
  1010  0F29                     	;# 
  1011  0F2A                     	;# 
  1012  0F2B                     	;# 
  1013  0F2C                     	;# 
  1014  0F2D                     	;# 
  1015  0F2E                     	;# 
  1016  0F2F                     	;# 
  1017  0F30                     	;# 
  1018  0F31                     	;# 
  1019  0F32                     	;# 
  1020  0F33                     	;# 
  1021  0F34                     	;# 
  1022  0F35                     	;# 
  1023  0F36                     	;# 
  1024  0F37                     	;# 
  1025  0FE4                     	;# 
  1026  0FE5                     	;# 
  1027  0FE6                     	;# 
  1028  0FE7                     	;# 
  1029  0FE8                     	;# 
  1030  0FE9                     	;# 
  1031  0FEA                     	;# 
  1032  0FEB                     	;# 
  1033  0FED                     	;# 
  1034  0FEE                     	;# 
  1035  0FEF                     	;# 
  1036  0000                     	;# 
  1037  0001                     	;# 
  1038  0002                     	;# 
  1039  0003                     	;# 
  1040  0004                     	;# 
  1041  0005                     	;# 
  1042  0006                     	;# 
  1043  0007                     	;# 
  1044  0008                     	;# 
  1045  0009                     	;# 
  1046  000A                     	;# 
  1047  000B                     	;# 
  1048  000C                     	;# 
  1049  000D                     	;# 
  1050  000E                     	;# 
  1051  0010                     	;# 
  1052  0011                     	;# 
  1053  0012                     	;# 
  1054  0013                     	;# 
  1055  0014                     	;# 
  1056  0015                     	;# 
  1057  0016                     	;# 
  1058  0016                     	;# 
  1059  0017                     	;# 
  1060  0018                     	;# 
  1061  0019                     	;# 
  1062  001A                     	;# 
  1063  001A                     	;# 
  1064  001B                     	;# 
  1065  001B                     	;# 
  1066  001C                     	;# 
  1067  001D                     	;# 
  1068  001E                     	;# 
  1069  001F                     	;# 
  1070  008C                     	;# 
  1071  008D                     	;# 
  1072  008E                     	;# 
  1073  0090                     	;# 
  1074  0091                     	;# 
  1075  0092                     	;# 
  1076  0093                     	;# 
  1077  0094                     	;# 
  1078  0095                     	;# 
  1079  0096                     	;# 
  1080  0098                     	;# 
  1081  0099                     	;# 
  1082  009A                     	;# 
  1083  009B                     	;# 
  1084  009B                     	;# 
  1085  009C                     	;# 
  1086  009D                     	;# 
  1087  009E                     	;# 
  1088  009F                     	;# 
  1089  010C                     	;# 
  1090  010D                     	;# 
  1091  010E                     	;# 
  1092  0111                     	;# 
  1093  0112                     	;# 
  1094  0113                     	;# 
  1095  0114                     	;# 
  1096  0115                     	;# 
  1097  0116                     	;# 
  1098  0117                     	;# 
  1099  0118                     	;# 
  1100  0119                     	;# 
  1101  011C                     	;# 
  1102  018C                     	;# 
  1103  018D                     	;# 
  1104  018E                     	;# 
  1105  0191                     	;# 
  1106  0191                     	;# 
  1107  0192                     	;# 
  1108  0193                     	;# 
  1109  0193                     	;# 
  1110  0194                     	;# 
  1111  0195                     	;# 
  1112  0196                     	;# 
  1113  0197                     	;# 
  1114  0199                     	;# 
  1115  0199                     	;# 
  1116  0199                     	;# 
  1117  019A                     	;# 
  1118  019A                     	;# 
  1119  019A                     	;# 
  1120  019B                     	;# 
  1121  019B                     	;# 
  1122  019B                     	;# 
  1123  019B                     	;# 
  1124  019B                     	;# 
  1125  019C                     	;# 
  1126  019C                     	;# 
  1127  019C                     	;# 
  1128  019D                     	;# 
  1129  019D                     	;# 
  1130  019D                     	;# 
  1131  019E                     	;# 
  1132  019E                     	;# 
  1133  019E                     	;# 
  1134  019F                     	;# 
  1135  019F                     	;# 
  1136  019F                     	;# 
  1137  019F                     	;# 
  1138  019F                     	;# 
  1139  020C                     	;# 
  1140  020D                     	;# 
  1141  020E                     	;# 
  1142  0211                     	;# 
  1143  0211                     	;# 
  1144  0212                     	;# 
  1145  0212                     	;# 
  1146  0213                     	;# 
  1147  0213                     	;# 
  1148  0214                     	;# 
  1149  0214                     	;# 
  1150  0215                     	;# 
  1151  0215                     	;# 
  1152  0215                     	;# 
  1153  0215                     	;# 
  1154  0216                     	;# 
  1155  0216                     	;# 
  1156  0217                     	;# 
  1157  0217                     	;# 
  1158  028C                     	;# 
  1159  028D                     	;# 
  1160  028E                     	;# 
  1161  0291                     	;# 
  1162  0291                     	;# 
  1163  0292                     	;# 
  1164  0293                     	;# 
  1165  0294                     	;# 
  1166  0298                     	;# 
  1167  0298                     	;# 
  1168  0299                     	;# 
  1169  029A                     	;# 
  1170  029B                     	;# 
  1171  029E                     	;# 
  1172  030C                     	;# 
  1173  030D                     	;# 
  1174  030E                     	;# 
  1175  038C                     	;# 
  1176  038D                     	;# 
  1177  038E                     	;# 
  1178  0391                     	;# 
  1179  0392                     	;# 
  1180  0393                     	;# 
  1181  0394                     	;# 
  1182  0395                     	;# 
  1183  0396                     	;# 
  1184  0397                     	;# 
  1185  0398                     	;# 
  1186  0399                     	;# 
  1187  040E                     	;# 
  1188  0413                     	;# 
  1189  0413                     	;# 
  1190  0414                     	;# 
  1191  0414                     	;# 
  1192  0415                     	;# 
  1193  0416                     	;# 
  1194  0417                     	;# 
  1195  0418                     	;# 
  1196  041A                     	;# 
  1197  041A                     	;# 
  1198  041B                     	;# 
  1199  041B                     	;# 
  1200  041C                     	;# 
  1201  041D                     	;# 
  1202  041E                     	;# 
  1203  041F                     	;# 
  1204  0493                     	;# 
  1205  0494                     	;# 
  1206  0495                     	;# 
  1207  0496                     	;# 
  1208  049A                     	;# 
  1209  049B                     	;# 
  1210  049C                     	;# 
  1211  049D                     	;# 
  1212  058C                     	;# 
  1213  058C                     	;# 
  1214  058D                     	;# 
  1215  058E                     	;# 
  1216  058E                     	;# 
  1217  058F                     	;# 
  1218  0590                     	;# 
  1219  0590                     	;# 
  1220  0591                     	;# 
  1221  0592                     	;# 
  1222  0592                     	;# 
  1223  0593                     	;# 
  1224  0594                     	;# 
  1225  0594                     	;# 
  1226  0595                     	;# 
  1227  0596                     	;# 
  1228  0596                     	;# 
  1229  0597                     	;# 
  1230  0598                     	;# 
  1231  0599                     	;# 
  1232  059A                     	;# 
  1233  059B                     	;# 
  1234  059B                     	;# 
  1235  059C                     	;# 
  1236  059D                     	;# 
  1237  060C                     	;# 
  1238  060C                     	;# 
  1239  060D                     	;# 
  1240  060E                     	;# 
  1241  060F                     	;# 
  1242  060F                     	;# 
  1243  0610                     	;# 
  1244  0611                     	;# 
  1245  0612                     	;# 
  1246  0613                     	;# 
  1247  0614                     	;# 
  1248  0617                     	;# 
  1249  0618                     	;# 
  1250  0619                     	;# 
  1251  061A                     	;# 
  1252  061B                     	;# 
  1253  061C                     	;# 
  1254  0691                     	;# 
  1255  0692                     	;# 
  1256  0693                     	;# 
  1257  0694                     	;# 
  1258  0695                     	;# 
  1259  0696                     	;# 
  1260  0697                     	;# 
  1261  0699                     	;# 
  1262  069A                     	;# 
  1263  0711                     	;# 
  1264  0712                     	;# 
  1265  0713                     	;# 
  1266  0714                     	;# 
  1267  0715                     	;# 
  1268  0718                     	;# 
  1269  0718                     	;# 
  1270  0719                     	;# 
  1271  071A                     	;# 
  1272  071A                     	;# 
  1273  071B                     	;# 
  1274  071C                     	;# 
  1275  071D                     	;# 
  1276  0791                     	;# 
  1277  0791                     	;# 
  1278  0792                     	;# 
  1279  0793                     	;# 
  1280  0793                     	;# 
  1281  0794                     	;# 
  1282  0795                     	;# 
  1283  0795                     	;# 
  1284  0796                     	;# 
  1285  0797                     	;# 
  1286  0797                     	;# 
  1287  0798                     	;# 
  1288  0799                     	;# 
  1289  079A                     	;# 
  1290  080C                     	;# 
  1291  080C                     	;# 
  1292  080D                     	;# 
  1293  080E                     	;# 
  1294  080E                     	;# 
  1295  080F                     	;# 
  1296  0810                     	;# 
  1297  0810                     	;# 
  1298  0811                     	;# 
  1299  0812                     	;# 
  1300  0812                     	;# 
  1301  0813                     	;# 
  1302  0814                     	;# 
  1303  0815                     	;# 
  1304  0816                     	;# 
  1305  0817                     	;# 
  1306  0818                     	;# 
  1307  0819                     	;# 
  1308  081A                     	;# 
  1309  081A                     	;# 
  1310  081B                     	;# 
  1311  081C                     	;# 
  1312  081C                     	;# 
  1313  081D                     	;# 
  1314  088C                     	;# 
  1315  088D                     	;# 
  1316  088E                     	;# 
  1317  088F                     	;# 
  1318  088F                     	;# 
  1319  0890                     	;# 
  1320  0891                     	;# 
  1321  0892                     	;# 
  1322  0893                     	;# 
  1323  0893                     	;# 
  1324  0894                     	;# 
  1325  0895                     	;# 
  1326  0896                     	;# 
  1327  0897                     	;# 
  1328  0897                     	;# 
  1329  0898                     	;# 
  1330  0899                     	;# 
  1331  0D8C                     	;# 
  1332  0D8C                     	;# 
  1333  0D8D                     	;# 
  1334  0D8E                     	;# 
  1335  0D8F                     	;# 
  1336  0D8F                     	;# 
  1337  0D90                     	;# 
  1338  0D91                     	;# 
  1339  0D92                     	;# 
  1340  0D92                     	;# 
  1341  0D93                     	;# 
  1342  0D94                     	;# 
  1343  0D95                     	;# 
  1344  0D95                     	;# 
  1345  0D96                     	;# 
  1346  0D97                     	;# 
  1347  0D98                     	;# 
  1348  0D99                     	;# 
  1349  0D9A                     	;# 
  1350  0D9B                     	;# 
  1351  0D9C                     	;# 
  1352  0D9D                     	;# 
  1353  0D9E                     	;# 
  1354  0D9E                     	;# 
  1355  0D9F                     	;# 
  1356  0DA0                     	;# 
  1357  0DA1                     	;# 
  1358  0DA1                     	;# 
  1359  0DA2                     	;# 
  1360  0DA3                     	;# 
  1361  0DA4                     	;# 
  1362  0DA4                     	;# 
  1363  0DA5                     	;# 
  1364  0DA6                     	;# 
  1365  0DA7                     	;# 
  1366  0DA7                     	;# 
  1367  0DA8                     	;# 
  1368  0DA9                     	;# 
  1369  0DAA                     	;# 
  1370  0DAB                     	;# 
  1371  0DAC                     	;# 
  1372  0DAD                     	;# 
  1373  0DAE                     	;# 
  1374  0DAF                     	;# 
  1375  0E0F                     	;# 
  1376  0E10                     	;# 
  1377  0E11                     	;# 
  1378  0E12                     	;# 
  1379  0E13                     	;# 
  1380  0E14                     	;# 
  1381  0E15                     	;# 
  1382  0E16                     	;# 
  1383  0E17                     	;# 
  1384  0E18                     	;# 
  1385  0E19                     	;# 
  1386  0E1A                     	;# 
  1387  0E1B                     	;# 
  1388  0E1C                     	;# 
  1389  0E1D                     	;# 
  1390  0E1E                     	;# 
  1391  0E1F                     	;# 
  1392  0E20                     	;# 
  1393  0E21                     	;# 
  1394  0E22                     	;# 
  1395  0E23                     	;# 
  1396  0E24                     	;# 
  1397  0E25                     	;# 
  1398  0E26                     	;# 
  1399  0E27                     	;# 
  1400  0E28                     	;# 
  1401  0E29                     	;# 
  1402  0E2A                     	;# 
  1403  0E2B                     	;# 
  1404  0E2C                     	;# 
  1405  0E2D                     	;# 
  1406  0E2E                     	;# 
  1407  0E90                     	;# 
  1408  0E91                     	;# 
  1409  0E92                     	;# 
  1410  0E94                     	;# 
  1411  0E95                     	;# 
  1412  0E9C                     	;# 
  1413  0E9D                     	;# 
  1414  0E9E                     	;# 
  1415  0E9F                     	;# 
  1416  0EA0                     	;# 
  1417  0EA1                     	;# 
  1418  0EA2                     	;# 
  1419  0EA3                     	;# 
  1420  0EA4                     	;# 
  1421  0EA5                     	;# 
  1422  0EA6                     	;# 
  1423  0EA7                     	;# 
  1424  0F0F                     	;# 
  1425  0F10                     	;# 
  1426  0F11                     	;# 
  1427  0F12                     	;# 
  1428  0F13                     	;# 
  1429  0F14                     	;# 
  1430  0F15                     	;# 
  1431  0F16                     	;# 
  1432  0F17                     	;# 
  1433  0F18                     	;# 
  1434  0F19                     	;# 
  1435  0F1A                     	;# 
  1436  0F1B                     	;# 
  1437  0F1C                     	;# 
  1438  0F1D                     	;# 
  1439  0F1E                     	;# 
  1440  0F1F                     	;# 
  1441  0F20                     	;# 
  1442  0F21                     	;# 
  1443  0F22                     	;# 
  1444  0F23                     	;# 
  1445  0F24                     	;# 
  1446  0F25                     	;# 
  1447  0F26                     	;# 
  1448  0F27                     	;# 
  1449  0F28                     	;# 
  1450  0F29                     	;# 
  1451  0F2A                     	;# 
  1452  0F2B                     	;# 
  1453  0F2C                     	;# 
  1454  0F2D                     	;# 
  1455  0F2E                     	;# 
  1456  0F2F                     	;# 
  1457  0F30                     	;# 
  1458  0F31                     	;# 
  1459  0F32                     	;# 
  1460  0F33                     	;# 
  1461  0F34                     	;# 
  1462  0F35                     	;# 
  1463  0F36                     	;# 
  1464  0F37                     	;# 
  1465  0FE4                     	;# 
  1466  0FE5                     	;# 
  1467  0FE6                     	;# 
  1468  0FE7                     	;# 
  1469  0FE8                     	;# 
  1470  0FE9                     	;# 
  1471  0FEA                     	;# 
  1472  0FEB                     	;# 
  1473  0FED                     	;# 
  1474  0FEE                     	;# 
  1475  0FEF                     	;# 
  1476  0000                     	;# 
  1477  0001                     	;# 
  1478  0002                     	;# 
  1479  0003                     	;# 
  1480  0004                     	;# 
  1481  0005                     	;# 
  1482  0006                     	;# 
  1483  0007                     	;# 
  1484  0008                     	;# 
  1485  0009                     	;# 
  1486  000A                     	;# 
  1487  000B                     	;# 
  1488  000C                     	;# 
  1489  000D                     	;# 
  1490  000E                     	;# 
  1491  0010                     	;# 
  1492  0011                     	;# 
  1493  0012                     	;# 
  1494  0013                     	;# 
  1495  0014                     	;# 
  1496  0015                     	;# 
  1497  0016                     	;# 
  1498  0016                     	;# 
  1499  0017                     	;# 
  1500  0018                     	;# 
  1501  0019                     	;# 
  1502  001A                     	;# 
  1503  001A                     	;# 
  1504  001B                     	;# 
  1505  001B                     	;# 
  1506  001C                     	;# 
  1507  001D                     	;# 
  1508  001E                     	;# 
  1509  001F                     	;# 
  1510  008C                     	;# 
  1511  008D                     	;# 
  1512  008E                     	;# 
  1513  0090                     	;# 
  1514  0091                     	;# 
  1515  0092                     	;# 
  1516  0093                     	;# 
  1517  0094                     	;# 
  1518  0095                     	;# 
  1519  0096                     	;# 
  1520  0098                     	;# 
  1521  0099                     	;# 
  1522  009A                     	;# 
  1523  009B                     	;# 
  1524  009B                     	;# 
  1525  009C                     	;# 
  1526  009D                     	;# 
  1527  009E                     	;# 
  1528  009F                     	;# 
  1529  010C                     	;# 
  1530  010D                     	;# 
  1531  010E                     	;# 
  1532  0111                     	;# 
  1533  0112                     	;# 
  1534  0113                     	;# 
  1535  0114                     	;# 
  1536  0115                     	;# 
  1537  0116                     	;# 
  1538  0117                     	;# 
  1539  0118                     	;# 
  1540  0119                     	;# 
  1541  011C                     	;# 
  1542  018C                     	;# 
  1543  018D                     	;# 
  1544  018E                     	;# 
  1545  0191                     	;# 
  1546  0191                     	;# 
  1547  0192                     	;# 
  1548  0193                     	;# 
  1549  0193                     	;# 
  1550  0194                     	;# 
  1551  0195                     	;# 
  1552  0196                     	;# 
  1553  0197                     	;# 
  1554  0199                     	;# 
  1555  0199                     	;# 
  1556  0199                     	;# 
  1557  019A                     	;# 
  1558  019A                     	;# 
  1559  019A                     	;# 
  1560  019B                     	;# 
  1561  019B                     	;# 
  1562  019B                     	;# 
  1563  019B                     	;# 
  1564  019B                     	;# 
  1565  019C                     	;# 
  1566  019C                     	;# 
  1567  019C                     	;# 
  1568  019D                     	;# 
  1569  019D                     	;# 
  1570  019D                     	;# 
  1571  019E                     	;# 
  1572  019E                     	;# 
  1573  019E                     	;# 
  1574  019F                     	;# 
  1575  019F                     	;# 
  1576  019F                     	;# 
  1577  019F                     	;# 
  1578  019F                     	;# 
  1579  020C                     	;# 
  1580  020D                     	;# 
  1581  020E                     	;# 
  1582  0211                     	;# 
  1583  0211                     	;# 
  1584  0212                     	;# 
  1585  0212                     	;# 
  1586  0213                     	;# 
  1587  0213                     	;# 
  1588  0214                     	;# 
  1589  0214                     	;# 
  1590  0215                     	;# 
  1591  0215                     	;# 
  1592  0215                     	;# 
  1593  0215                     	;# 
  1594  0216                     	;# 
  1595  0216                     	;# 
  1596  0217                     	;# 
  1597  0217                     	;# 
  1598  028C                     	;# 
  1599  028D                     	;# 
  1600  028E                     	;# 
  1601  0291                     	;# 
  1602  0291                     	;# 
  1603  0292                     	;# 
  1604  0293                     	;# 
  1605  0294                     	;# 
  1606  0298                     	;# 
  1607  0298                     	;# 
  1608  0299                     	;# 
  1609  029A                     	;# 
  1610  029B                     	;# 
  1611  029E                     	;# 
  1612  030C                     	;# 
  1613  030D                     	;# 
  1614  030E                     	;# 
  1615  038C                     	;# 
  1616  038D                     	;# 
  1617  038E                     	;# 
  1618  0391                     	;# 
  1619  0392                     	;# 
  1620  0393                     	;# 
  1621  0394                     	;# 
  1622  0395                     	;# 
  1623  0396                     	;# 
  1624  0397                     	;# 
  1625  0398                     	;# 
  1626  0399                     	;# 
  1627  040E                     	;# 
  1628  0413                     	;# 
  1629  0413                     	;# 
  1630  0414                     	;# 
  1631  0414                     	;# 
  1632  0415                     	;# 
  1633  0416                     	;# 
  1634  0417                     	;# 
  1635  0418                     	;# 
  1636  041A                     	;# 
  1637  041A                     	;# 
  1638  041B                     	;# 
  1639  041B                     	;# 
  1640  041C                     	;# 
  1641  041D                     	;# 
  1642  041E                     	;# 
  1643  041F                     	;# 
  1644  0493                     	;# 
  1645  0494                     	;# 
  1646  0495                     	;# 
  1647  0496                     	;# 
  1648  049A                     	;# 
  1649  049B                     	;# 
  1650  049C                     	;# 
  1651  049D                     	;# 
  1652  058C                     	;# 
  1653  058C                     	;# 
  1654  058D                     	;# 
  1655  058E                     	;# 
  1656  058E                     	;# 
  1657  058F                     	;# 
  1658  0590                     	;# 
  1659  0590                     	;# 
  1660  0591                     	;# 
  1661  0592                     	;# 
  1662  0592                     	;# 
  1663  0593                     	;# 
  1664  0594                     	;# 
  1665  0594                     	;# 
  1666  0595                     	;# 
  1667  0596                     	;# 
  1668  0596                     	;# 
  1669  0597                     	;# 
  1670  0598                     	;# 
  1671  0599                     	;# 
  1672  059A                     	;# 
  1673  059B                     	;# 
  1674  059B                     	;# 
  1675  059C                     	;# 
  1676  059D                     	;# 
  1677  060C                     	;# 
  1678  060C                     	;# 
  1679  060D                     	;# 
  1680  060E                     	;# 
  1681  060F                     	;# 
  1682  060F                     	;# 
  1683  0610                     	;# 
  1684  0611                     	;# 
  1685  0612                     	;# 
  1686  0613                     	;# 
  1687  0614                     	;# 
  1688  0617                     	;# 
  1689  0618                     	;# 
  1690  0619                     	;# 
  1691  061A                     	;# 
  1692  061B                     	;# 
  1693  061C                     	;# 
  1694  0691                     	;# 
  1695  0692                     	;# 
  1696  0693                     	;# 
  1697  0694                     	;# 
  1698  0695                     	;# 
  1699  0696                     	;# 
  1700  0697                     	;# 
  1701  0699                     	;# 
  1702  069A                     	;# 
  1703  0711                     	;# 
  1704  0712                     	;# 
  1705  0713                     	;# 
  1706  0714                     	;# 
  1707  0715                     	;# 
  1708  0718                     	;# 
  1709  0718                     	;# 
  1710  0719                     	;# 
  1711  071A                     	;# 
  1712  071A                     	;# 
  1713  071B                     	;# 
  1714  071C                     	;# 
  1715  071D                     	;# 
  1716  0791                     	;# 
  1717  0791                     	;# 
  1718  0792                     	;# 
  1719  0793                     	;# 
  1720  0793                     	;# 
  1721  0794                     	;# 
  1722  0795                     	;# 
  1723  0795                     	;# 
  1724  0796                     	;# 
  1725  0797                     	;# 
  1726  0797                     	;# 
  1727  0798                     	;# 
  1728  0799                     	;# 
  1729  079A                     	;# 
  1730  080C                     	;# 
  1731  080C                     	;# 
  1732  080D                     	;# 
  1733  080E                     	;# 
  1734  080E                     	;# 
  1735  080F                     	;# 
  1736  0810                     	;# 
  1737  0810                     	;# 
  1738  0811                     	;# 
  1739  0812                     	;# 
  1740  0812                     	;# 
  1741  0813                     	;# 
  1742  0814                     	;# 
  1743  0815                     	;# 
  1744  0816                     	;# 
  1745  0817                     	;# 
  1746  0818                     	;# 
  1747  0819                     	;# 
  1748  081A                     	;# 
  1749  081A                     	;# 
  1750  081B                     	;# 
  1751  081C                     	;# 
  1752  081C                     	;# 
  1753  081D                     	;# 
  1754  088C                     	;# 
  1755  088D                     	;# 
  1756  088E                     	;# 
  1757  088F                     	;# 
  1758  088F                     	;# 
  1759  0890                     	;# 
  1760  0891                     	;# 
  1761  0892                     	;# 
  1762  0893                     	;# 
  1763  0893                     	;# 
  1764  0894                     	;# 
  1765  0895                     	;# 
  1766  0896                     	;# 
  1767  0897                     	;# 
  1768  0897                     	;# 
  1769  0898                     	;# 
  1770  0899                     	;# 
  1771  0D8C                     	;# 
  1772  0D8C                     	;# 
  1773  0D8D                     	;# 
  1774  0D8E                     	;# 
  1775  0D8F                     	;# 
  1776  0D8F                     	;# 
  1777  0D90                     	;# 
  1778  0D91                     	;# 
  1779  0D92                     	;# 
  1780  0D92                     	;# 
  1781  0D93                     	;# 
  1782  0D94                     	;# 
  1783  0D95                     	;# 
  1784  0D95                     	;# 
  1785  0D96                     	;# 
  1786  0D97                     	;# 
  1787  0D98                     	;# 
  1788  0D99                     	;# 
  1789  0D9A                     	;# 
  1790  0D9B                     	;# 
  1791  0D9C                     	;# 
  1792  0D9D                     	;# 
  1793  0D9E                     	;# 
  1794  0D9E                     	;# 
  1795  0D9F                     	;# 
  1796  0DA0                     	;# 
  1797  0DA1                     	;# 
  1798  0DA1                     	;# 
  1799  0DA2                     	;# 
  1800  0DA3                     	;# 
  1801  0DA4                     	;# 
  1802  0DA4                     	;# 
  1803  0DA5                     	;# 
  1804  0DA6                     	;# 
  1805  0DA7                     	;# 
  1806  0DA7                     	;# 
  1807  0DA8                     	;# 
  1808  0DA9                     	;# 
  1809  0DAA                     	;# 
  1810  0DAB                     	;# 
  1811  0DAC                     	;# 
  1812  0DAD                     	;# 
  1813  0DAE                     	;# 
  1814  0DAF                     	;# 
  1815  0E0F                     	;# 
  1816  0E10                     	;# 
  1817  0E11                     	;# 
  1818  0E12                     	;# 
  1819  0E13                     	;# 
  1820  0E14                     	;# 
  1821  0E15                     	;# 
  1822  0E16                     	;# 
  1823  0E17                     	;# 
  1824  0E18                     	;# 
  1825  0E19                     	;# 
  1826  0E1A                     	;# 
  1827  0E1B                     	;# 
  1828  0E1C                     	;# 
  1829  0E1D                     	;# 
  1830  0E1E                     	;# 
  1831  0E1F                     	;# 
  1832  0E20                     	;# 
  1833  0E21                     	;# 
  1834  0E22                     	;# 
  1835  0E23                     	;# 
  1836  0E24                     	;# 
  1837  0E25                     	;# 
  1838  0E26                     	;# 
  1839  0E27                     	;# 
  1840  0E28                     	;# 
  1841  0E29                     	;# 
  1842  0E2A                     	;# 
  1843  0E2B                     	;# 
  1844  0E2C                     	;# 
  1845  0E2D                     	;# 
  1846  0E2E                     	;# 
  1847  0E90                     	;# 
  1848  0E91                     	;# 
  1849  0E92                     	;# 
  1850  0E94                     	;# 
  1851  0E95                     	;# 
  1852  0E9C                     	;# 
  1853  0E9D                     	;# 
  1854  0E9E                     	;# 
  1855  0E9F                     	;# 
  1856  0EA0                     	;# 
  1857  0EA1                     	;# 
  1858  0EA2                     	;# 
  1859  0EA3                     	;# 
  1860  0EA4                     	;# 
  1861  0EA5                     	;# 
  1862  0EA6                     	;# 
  1863  0EA7                     	;# 
  1864  0F0F                     	;# 
  1865  0F10                     	;# 
  1866  0F11                     	;# 
  1867  0F12                     	;# 
  1868  0F13                     	;# 
  1869  0F14                     	;# 
  1870  0F15                     	;# 
  1871  0F16                     	;# 
  1872  0F17                     	;# 
  1873  0F18                     	;# 
  1874  0F19                     	;# 
  1875  0F1A                     	;# 
  1876  0F1B                     	;# 
  1877  0F1C                     	;# 
  1878  0F1D                     	;# 
  1879  0F1E                     	;# 
  1880  0F1F                     	;# 
  1881  0F20                     	;# 
  1882  0F21                     	;# 
  1883  0F22                     	;# 
  1884  0F23                     	;# 
  1885  0F24                     	;# 
  1886  0F25                     	;# 
  1887  0F26                     	;# 
  1888  0F27                     	;# 
  1889  0F28                     	;# 
  1890  0F29                     	;# 
  1891  0F2A                     	;# 
  1892  0F2B                     	;# 
  1893  0F2C                     	;# 
  1894  0F2D                     	;# 
  1895  0F2E                     	;# 
  1896  0F2F                     	;# 
  1897  0F30                     	;# 
  1898  0F31                     	;# 
  1899  0F32                     	;# 
  1900  0F33                     	;# 
  1901  0F34                     	;# 
  1902  0F35                     	;# 
  1903  0F36                     	;# 
  1904  0F37                     	;# 
  1905  0FE4                     	;# 
  1906  0FE5                     	;# 
  1907  0FE6                     	;# 
  1908  0FE7                     	;# 
  1909  0FE8                     	;# 
  1910  0FE9                     	;# 
  1911  0FEA                     	;# 
  1912  0FEB                     	;# 
  1913  0FED                     	;# 
  1914  0FEE                     	;# 
  1915  0FEF                     	;# 
  1916  0000                     	;# 
  1917  0001                     	;# 
  1918  0002                     	;# 
  1919  0003                     	;# 
  1920  0004                     	;# 
  1921  0005                     	;# 
  1922  0006                     	;# 
  1923  0007                     	;# 
  1924  0008                     	;# 
  1925  0009                     	;# 
  1926  000A                     	;# 
  1927  000B                     	;# 
  1928  000C                     	;# 
  1929  000D                     	;# 
  1930  000E                     	;# 
  1931  0010                     	;# 
  1932  0011                     	;# 
  1933  0012                     	;# 
  1934  0013                     	;# 
  1935  0014                     	;# 
  1936  0015                     	;# 
  1937  0016                     	;# 
  1938  0016                     	;# 
  1939  0017                     	;# 
  1940  0018                     	;# 
  1941  0019                     	;# 
  1942  001A                     	;# 
  1943  001A                     	;# 
  1944  001B                     	;# 
  1945  001B                     	;# 
  1946  001C                     	;# 
  1947  001D                     	;# 
  1948  001E                     	;# 
  1949  001F                     	;# 
  1950  008C                     	;# 
  1951  008D                     	;# 
  1952  008E                     	;# 
  1953  0090                     	;# 
  1954  0091                     	;# 
  1955  0092                     	;# 
  1956  0093                     	;# 
  1957  0094                     	;# 
  1958  0095                     	;# 
  1959  0096                     	;# 
  1960  0098                     	;# 
  1961  0099                     	;# 
  1962  009A                     	;# 
  1963  009B                     	;# 
  1964  009B                     	;# 
  1965  009C                     	;# 
  1966  009D                     	;# 
  1967  009E                     	;# 
  1968  009F                     	;# 
  1969  010C                     	;# 
  1970  010D                     	;# 
  1971  010E                     	;# 
  1972  0111                     	;# 
  1973  0112                     	;# 
  1974  0113                     	;# 
  1975  0114                     	;# 
  1976  0115                     	;# 
  1977  0116                     	;# 
  1978  0117                     	;# 
  1979  0118                     	;# 
  1980  0119                     	;# 
  1981  011C                     	;# 
  1982  018C                     	;# 
  1983  018D                     	;# 
  1984  018E                     	;# 
  1985  0191                     	;# 
  1986  0191                     	;# 
  1987  0192                     	;# 
  1988  0193                     	;# 
  1989  0193                     	;# 
  1990  0194                     	;# 
  1991  0195                     	;# 
  1992  0196                     	;# 
  1993  0197                     	;# 
  1994  0199                     	;# 
  1995  0199                     	;# 
  1996  0199                     	;# 
  1997  019A                     	;# 
  1998  019A                     	;# 
  1999  019A                     	;# 
  2000  019B                     	;# 
  2001  019B                     	;# 
  2002  019B                     	;# 
  2003  019B                     	;# 
  2004  019B                     	;# 
  2005  019C                     	;# 
  2006  019C                     	;# 
  2007  019C                     	;# 
  2008  019D                     	;# 
  2009  019D                     	;# 
  2010  019D                     	;# 
  2011  019E                     	;# 
  2012  019E                     	;# 
  2013  019E                     	;# 
  2014  019F                     	;# 
  2015  019F                     	;# 
  2016  019F                     	;# 
  2017  019F                     	;# 
  2018  019F                     	;# 
  2019  020C                     	;# 
  2020  020D                     	;# 
  2021  020E                     	;# 
  2022  0211                     	;# 
  2023  0211                     	;# 
  2024  0212                     	;# 
  2025  0212                     	;# 
  2026  0213                     	;# 
  2027  0213                     	;# 
  2028  0214                     	;# 
  2029  0214                     	;# 
  2030  0215                     	;# 
  2031  0215                     	;# 
  2032  0215                     	;# 
  2033  0215                     	;# 
  2034  0216                     	;# 
  2035  0216                     	;# 
  2036  0217                     	;# 
  2037  0217                     	;# 
  2038  028C                     	;# 
  2039  028D                     	;# 
  2040  028E                     	;# 
  2041  0291                     	;# 
  2042  0291                     	;# 
  2043  0292                     	;# 
  2044  0293                     	;# 
  2045  0294                     	;# 
  2046  0298                     	;# 
  2047  0298                     	;# 
  2048  0299                     	;# 
  2049  029A                     	;# 
  2050  029B                     	;# 
  2051  029E                     	;# 
  2052  030C                     	;# 
  2053  030D                     	;# 
  2054  030E                     	;# 
  2055  038C                     	;# 
  2056  038D                     	;# 
  2057  038E                     	;# 
  2058  0391                     	;# 
  2059  0392                     	;# 
  2060  0393                     	;# 
  2061  0394                     	;# 
  2062  0395                     	;# 
  2063  0396                     	;# 
  2064  0397                     	;# 
  2065  0398                     	;# 
  2066  0399                     	;# 
  2067  040E                     	;# 
  2068  0413                     	;# 
  2069  0413                     	;# 
  2070  0414                     	;# 
  2071  0414                     	;# 
  2072  0415                     	;# 
  2073  0416                     	;# 
  2074  0417                     	;# 
  2075  0418                     	;# 
  2076  041A                     	;# 
  2077  041A                     	;# 
  2078  041B                     	;# 
  2079  041B                     	;# 
  2080  041C                     	;# 
  2081  041D                     	;# 
  2082  041E                     	;# 
  2083  041F                     	;# 
  2084  0493                     	;# 
  2085  0494                     	;# 
  2086  0495                     	;# 
  2087  0496                     	;# 
  2088  049A                     	;# 
  2089  049B                     	;# 
  2090  049C                     	;# 
  2091  049D                     	;# 
  2092  058C                     	;# 
  2093  058C                     	;# 
  2094  058D                     	;# 
  2095  058E                     	;# 
  2096  058E                     	;# 
  2097  058F                     	;# 
  2098  0590                     	;# 
  2099  0590                     	;# 
  2100  0591                     	;# 
  2101  0592                     	;# 
  2102  0592                     	;# 
  2103  0593                     	;# 
  2104  0594                     	;# 
  2105  0594                     	;# 
  2106  0595                     	;# 
  2107  0596                     	;# 
  2108  0596                     	;# 
  2109  0597                     	;# 
  2110  0598                     	;# 
  2111  0599                     	;# 
  2112  059A                     	;# 
  2113  059B                     	;# 
  2114  059B                     	;# 
  2115  059C                     	;# 
  2116  059D                     	;# 
  2117  060C                     	;# 
  2118  060C                     	;# 
  2119  060D                     	;# 
  2120  060E                     	;# 
  2121  060F                     	;# 
  2122  060F                     	;# 
  2123  0610                     	;# 
  2124  0611                     	;# 
  2125  0612                     	;# 
  2126  0613                     	;# 
  2127  0614                     	;# 
  2128  0617                     	;# 
  2129  0618                     	;# 
  2130  0619                     	;# 
  2131  061A                     	;# 
  2132  061B                     	;# 
  2133  061C                     	;# 
  2134  0691                     	;# 
  2135  0692                     	;# 
  2136  0693                     	;# 
  2137  0694                     	;# 
  2138  0695                     	;# 
  2139  0696                     	;# 
  2140  0697                     	;# 
  2141  0699                     	;# 
  2142  069A                     	;# 
  2143  0711                     	;# 
  2144  0712                     	;# 
  2145  0713                     	;# 
  2146  0714                     	;# 
  2147  0715                     	;# 
  2148  0718                     	;# 
  2149  0718                     	;# 
  2150  0719                     	;# 
  2151  071A                     	;# 
  2152  071A                     	;# 
  2153  071B                     	;# 
  2154  071C                     	;# 
  2155  071D                     	;# 
  2156  0791                     	;# 
  2157  0791                     	;# 
  2158  0792                     	;# 
  2159  0793                     	;# 
  2160  0793                     	;# 
  2161  0794                     	;# 
  2162  0795                     	;# 
  2163  0795                     	;# 
  2164  0796                     	;# 
  2165  0797                     	;# 
  2166  0797                     	;# 
  2167  0798                     	;# 
  2168  0799                     	;# 
  2169  079A                     	;# 
  2170  080C                     	;# 
  2171  080C                     	;# 
  2172  080D                     	;# 
  2173  080E                     	;# 
  2174  080E                     	;# 
  2175  080F                     	;# 
  2176  0810                     	;# 
  2177  0810                     	;# 
  2178  0811                     	;# 
  2179  0812                     	;# 
  2180  0812                     	;# 
  2181  0813                     	;# 
  2182  0814                     	;# 
  2183  0815                     	;# 
  2184  0816                     	;# 
  2185  0817                     	;# 
  2186  0818                     	;# 
  2187  0819                     	;# 
  2188  081A                     	;# 
  2189  081A                     	;# 
  2190  081B                     	;# 
  2191  081C                     	;# 
  2192  081C                     	;# 
  2193  081D                     	;# 
  2194  088C                     	;# 
  2195  088D                     	;# 
  2196  088E                     	;# 
  2197  088F                     	;# 
  2198  088F                     	;# 
  2199  0890                     	;# 
  2200  0891                     	;# 
  2201  0892                     	;# 
  2202  0893                     	;# 
  2203  0893                     	;# 
  2204  0894                     	;# 
  2205  0895                     	;# 
  2206  0896                     	;# 
  2207  0897                     	;# 
  2208  0897                     	;# 
  2209  0898                     	;# 
  2210  0899                     	;# 
  2211  0D8C                     	;# 
  2212  0D8C                     	;# 
  2213  0D8D                     	;# 
  2214  0D8E                     	;# 
  2215  0D8F                     	;# 
  2216  0D8F                     	;# 
  2217  0D90                     	;# 
  2218  0D91                     	;# 
  2219  0D92                     	;# 
  2220  0D92                     	;# 
  2221  0D93                     	;# 
  2222  0D94                     	;# 
  2223  0D95                     	;# 
  2224  0D95                     	;# 
  2225  0D96                     	;# 
  2226  0D97                     	;# 
  2227  0D98                     	;# 
  2228  0D99                     	;# 
  2229  0D9A                     	;# 
  2230  0D9B                     	;# 
  2231  0D9C                     	;# 
  2232  0D9D                     	;# 
  2233  0D9E                     	;# 
  2234  0D9E                     	;# 
  2235  0D9F                     	;# 
  2236  0DA0                     	;# 
  2237  0DA1                     	;# 
  2238  0DA1                     	;# 
  2239  0DA2                     	;# 
  2240  0DA3                     	;# 
  2241  0DA4                     	;# 
  2242  0DA4                     	;# 
  2243  0DA5                     	;# 
  2244  0DA6                     	;# 
  2245  0DA7                     	;# 
  2246  0DA7                     	;# 
  2247  0DA8                     	;# 
  2248  0DA9                     	;# 
  2249  0DAA                     	;# 
  2250  0DAB                     	;# 
  2251  0DAC                     	;# 
  2252  0DAD                     	;# 
  2253  0DAE                     	;# 
  2254  0DAF                     	;# 
  2255  0E0F                     	;# 
  2256  0E10                     	;# 
  2257  0E11                     	;# 
  2258  0E12                     	;# 
  2259  0E13                     	;# 
  2260  0E14                     	;# 
  2261  0E15                     	;# 
  2262  0E16                     	;# 
  2263  0E17                     	;# 
  2264  0E18                     	;# 
  2265  0E19                     	;# 
  2266  0E1A                     	;# 
  2267  0E1B                     	;# 
  2268  0E1C                     	;# 
  2269  0E1D                     	;# 
  2270  0E1E                     	;# 
  2271  0E1F                     	;# 
  2272  0E20                     	;# 
  2273  0E21                     	;# 
  2274  0E22                     	;# 
  2275  0E23                     	;# 
  2276  0E24                     	;# 
  2277  0E25                     	;# 
  2278  0E26                     	;# 
  2279  0E27                     	;# 
  2280  0E28                     	;# 
  2281  0E29                     	;# 
  2282  0E2A                     	;# 
  2283  0E2B                     	;# 
  2284  0E2C                     	;# 
  2285  0E2D                     	;# 
  2286  0E2E                     	;# 
  2287  0E90                     	;# 
  2288  0E91                     	;# 
  2289  0E92                     	;# 
  2290  0E94                     	;# 
  2291  0E95                     	;# 
  2292  0E9C                     	;# 
  2293  0E9D                     	;# 
  2294  0E9E                     	;# 
  2295  0E9F                     	;# 
  2296  0EA0                     	;# 
  2297  0EA1                     	;# 
  2298  0EA2                     	;# 
  2299  0EA3                     	;# 
  2300  0EA4                     	;# 
  2301  0EA5                     	;# 
  2302  0EA6                     	;# 
  2303  0EA7                     	;# 
  2304  0F0F                     	;# 
  2305  0F10                     	;# 
  2306  0F11                     	;# 
  2307  0F12                     	;# 
  2308  0F13                     	;# 
  2309  0F14                     	;# 
  2310  0F15                     	;# 
  2311  0F16                     	;# 
  2312  0F17                     	;# 
  2313  0F18                     	;# 
  2314  0F19                     	;# 
  2315  0F1A                     	;# 
  2316  0F1B                     	;# 
  2317  0F1C                     	;# 
  2318  0F1D                     	;# 
  2319  0F1E                     	;# 
  2320  0F1F                     	;# 
  2321  0F20                     	;# 
  2322  0F21                     	;# 
  2323  0F22                     	;# 
  2324  0F23                     	;# 
  2325  0F24                     	;# 
  2326  0F25                     	;# 
  2327  0F26                     	;# 
  2328  0F27                     	;# 
  2329  0F28                     	;# 
  2330  0F29                     	;# 
  2331  0F2A                     	;# 
  2332  0F2B                     	;# 
  2333  0F2C                     	;# 
  2334  0F2D                     	;# 
  2335  0F2E                     	;# 
  2336  0F2F                     	;# 
  2337  0F30                     	;# 
  2338  0F31                     	;# 
  2339  0F32                     	;# 
  2340  0F33                     	;# 
  2341  0F34                     	;# 
  2342  0F35                     	;# 
  2343  0F36                     	;# 
  2344  0F37                     	;# 
  2345  0FE4                     	;# 
  2346  0FE5                     	;# 
  2347  0FE6                     	;# 
  2348  0FE7                     	;# 
  2349  0FE8                     	;# 
  2350  0FE9                     	;# 
  2351  0FEA                     	;# 
  2352  0FEB                     	;# 
  2353  0FED                     	;# 
  2354  0FEE                     	;# 
  2355  0FEF                     	;# 
  2356  0000                     	;# 
  2357  0001                     	;# 
  2358  0002                     	;# 
  2359  0003                     	;# 
  2360  0004                     	;# 
  2361  0005                     	;# 
  2362  0006                     	;# 
  2363  0007                     	;# 
  2364  0008                     	;# 
  2365  0009                     	;# 
  2366  000A                     	;# 
  2367  000B                     	;# 
  2368  000C                     	;# 
  2369  000D                     	;# 
  2370  000E                     	;# 
  2371  0010                     	;# 
  2372  0011                     	;# 
  2373  0012                     	;# 
  2374  0013                     	;# 
  2375  0014                     	;# 
  2376  0015                     	;# 
  2377  0016                     	;# 
  2378  0016                     	;# 
  2379  0017                     	;# 
  2380  0018                     	;# 
  2381  0019                     	;# 
  2382  001A                     	;# 
  2383  001A                     	;# 
  2384  001B                     	;# 
  2385  001B                     	;# 
  2386  001C                     	;# 
  2387  001D                     	;# 
  2388  001E                     	;# 
  2389  001F                     	;# 
  2390  008C                     	;# 
  2391  008D                     	;# 
  2392  008E                     	;# 
  2393  0090                     	;# 
  2394  0091                     	;# 
  2395  0092                     	;# 
  2396  0093                     	;# 
  2397  0094                     	;# 
  2398  0095                     	;# 
  2399  0096                     	;# 
  2400  0098                     	;# 
  2401  0099                     	;# 
  2402  009A                     	;# 
  2403  009B                     	;# 
  2404  009B                     	;# 
  2405  009C                     	;# 
  2406  009D                     	;# 
  2407  009E                     	;# 
  2408  009F                     	;# 
  2409  010C                     	;# 
  2410  010D                     	;# 
  2411  010E                     	;# 
  2412  0111                     	;# 
  2413  0112                     	;# 
  2414  0113                     	;# 
  2415  0114                     	;# 
  2416  0115                     	;# 
  2417  0116                     	;# 
  2418  0117                     	;# 
  2419  0118                     	;# 
  2420  0119                     	;# 
  2421  011C                     	;# 
  2422  018C                     	;# 
  2423  018D                     	;# 
  2424  018E                     	;# 
  2425  0191                     	;# 
  2426  0191                     	;# 
  2427  0192                     	;# 
  2428  0193                     	;# 
  2429  0193                     	;# 
  2430  0194                     	;# 
  2431  0195                     	;# 
  2432  0196                     	;# 
  2433  0197                     	;# 
  2434  0199                     	;# 
  2435  0199                     	;# 
  2436  0199                     	;# 
  2437  019A                     	;# 
  2438  019A                     	;# 
  2439  019A                     	;# 
  2440  019B                     	;# 
  2441  019B                     	;# 
  2442  019B                     	;# 
  2443  019B                     	;# 
  2444  019B                     	;# 
  2445  019C                     	;# 
  2446  019C                     	;# 
  2447  019C                     	;# 
  2448  019D                     	;# 
  2449  019D                     	;# 
  2450  019D                     	;# 
  2451  019E                     	;# 
  2452  019E                     	;# 
  2453  019E                     	;# 
  2454  019F                     	;# 
  2455  019F                     	;# 
  2456  019F                     	;# 
  2457  019F                     	;# 
  2458  019F                     	;# 
  2459  020C                     	;# 
  2460  020D                     	;# 
  2461  020E                     	;# 
  2462  0211                     	;# 
  2463  0211                     	;# 
  2464  0212                     	;# 
  2465  0212                     	;# 
  2466  0213                     	;# 
  2467  0213                     	;# 
  2468  0214                     	;# 
  2469  0214                     	;# 
  2470  0215                     	;# 
  2471  0215                     	;# 
  2472  0215                     	;# 
  2473  0215                     	;# 
  2474  0216                     	;# 
  2475  0216                     	;# 
  2476  0217                     	;# 
  2477  0217                     	;# 
  2478  028C                     	;# 
  2479  028D                     	;# 
  2480  028E                     	;# 
  2481  0291                     	;# 
  2482  0291                     	;# 
  2483  0292                     	;# 
  2484  0293                     	;# 
  2485  0294                     	;# 
  2486  0298                     	;# 
  2487  0298                     	;# 
  2488  0299                     	;# 
  2489  029A                     	;# 
  2490  029B                     	;# 
  2491  029E                     	;# 
  2492  030C                     	;# 
  2493  030D                     	;# 
  2494  030E                     	;# 
  2495  038C                     	;# 
  2496  038D                     	;# 
  2497  038E                     	;# 
  2498  0391                     	;# 
  2499  0392                     	;# 
  2500  0393                     	;# 
  2501  0394                     	;# 
  2502  0395                     	;# 
  2503  0396                     	;# 
  2504  0397                     	;# 
  2505  0398                     	;# 
  2506  0399                     	;# 
  2507  040E                     	;# 
  2508  0413                     	;# 
  2509  0413                     	;# 
  2510  0414                     	;# 
  2511  0414                     	;# 
  2512  0415                     	;# 
  2513  0416                     	;# 
  2514  0417                     	;# 
  2515  0418                     	;# 
  2516  041A                     	;# 
  2517  041A                     	;# 
  2518  041B                     	;# 
  2519  041B                     	;# 
  2520  041C                     	;# 
  2521  041D                     	;# 
  2522  041E                     	;# 
  2523  041F                     	;# 
  2524  0493                     	;# 
  2525  0494                     	;# 
  2526  0495                     	;# 
  2527  0496                     	;# 
  2528  049A                     	;# 
  2529  049B                     	;# 
  2530  049C                     	;# 
  2531  049D                     	;# 
  2532  058C                     	;# 
  2533  058C                     	;# 
  2534  058D                     	;# 
  2535  058E                     	;# 
  2536  058E                     	;# 
  2537  058F                     	;# 
  2538  0590                     	;# 
  2539  0590                     	;# 
  2540  0591                     	;# 
  2541  0592                     	;# 
  2542  0592                     	;# 
  2543  0593                     	;# 
  2544  0594                     	;# 
  2545  0594                     	;# 
  2546  0595                     	;# 
  2547  0596                     	;# 
  2548  0596                     	;# 
  2549  0597                     	;# 
  2550  0598                     	;# 
  2551  0599                     	;# 
  2552  059A                     	;# 
  2553  059B                     	;# 
  2554  059B                     	;# 
  2555  059C                     	;# 
  2556  059D                     	;# 
  2557  060C                     	;# 
  2558  060C                     	;# 
  2559  060D                     	;# 
  2560  060E                     	;# 
  2561  060F                     	;# 
  2562  060F                     	;# 
  2563  0610                     	;# 
  2564  0611                     	;# 
  2565  0612                     	;# 
  2566  0613                     	;# 
  2567  0614                     	;# 
  2568  0617                     	;# 
  2569  0618                     	;# 
  2570  0619                     	;# 
  2571  061A                     	;# 
  2572  061B                     	;# 
  2573  061C                     	;# 
  2574  0691                     	;# 
  2575  0692                     	;# 
  2576  0693                     	;# 
  2577  0694                     	;# 
  2578  0695                     	;# 
  2579  0696                     	;# 
  2580  0697                     	;# 
  2581  0699                     	;# 
  2582  069A                     	;# 
  2583  0711                     	;# 
  2584  0712                     	;# 
  2585  0713                     	;# 
  2586  0714                     	;# 
  2587  0715                     	;# 
  2588  0718                     	;# 
  2589  0718                     	;# 
  2590  0719                     	;# 
  2591  071A                     	;# 
  2592  071A                     	;# 
  2593  071B                     	;# 
  2594  071C                     	;# 
  2595  071D                     	;# 
  2596  0791                     	;# 
  2597  0791                     	;# 
  2598  0792                     	;# 
  2599  0793                     	;# 
  2600  0793                     	;# 
  2601  0794                     	;# 
  2602  0795                     	;# 
  2603  0795                     	;# 
  2604  0796                     	;# 
  2605  0797                     	;# 
  2606  0797                     	;# 
  2607  0798                     	;# 
  2608  0799                     	;# 
  2609  079A                     	;# 
  2610  080C                     	;# 
  2611  080C                     	;# 
  2612  080D                     	;# 
  2613  080E                     	;# 
  2614  080E                     	;# 
  2615  080F                     	;# 
  2616  0810                     	;# 
  2617  0810                     	;# 
  2618  0811                     	;# 
  2619  0812                     	;# 
  2620  0812                     	;# 
  2621  0813                     	;# 
  2622  0814                     	;# 
  2623  0815                     	;# 
  2624  0816                     	;# 
  2625  0817                     	;# 
  2626  0818                     	;# 
  2627  0819                     	;# 
  2628  081A                     	;# 
  2629  081A                     	;# 
  2630  081B                     	;# 
  2631  081C                     	;# 
  2632  081C                     	;# 
  2633  081D                     	;# 
  2634  088C                     	;# 
  2635  088D                     	;# 
  2636  088E                     	;# 
  2637  088F                     	;# 
  2638  088F                     	;# 
  2639  0890                     	;# 
  2640  0891                     	;# 
  2641  0892                     	;# 
  2642  0893                     	;# 
  2643  0893                     	;# 
  2644  0894                     	;# 
  2645  0895                     	;# 
  2646  0896                     	;# 
  2647  0897                     	;# 
  2648  0897                     	;# 
  2649  0898                     	;# 
  2650  0899                     	;# 
  2651  0D8C                     	;# 
  2652  0D8C                     	;# 
  2653  0D8D                     	;# 
  2654  0D8E                     	;# 
  2655  0D8F                     	;# 
  2656  0D8F                     	;# 
  2657  0D90                     	;# 
  2658  0D91                     	;# 
  2659  0D92                     	;# 
  2660  0D92                     	;# 
  2661  0D93                     	;# 
  2662  0D94                     	;# 
  2663  0D95                     	;# 
  2664  0D95                     	;# 
  2665  0D96                     	;# 
  2666  0D97                     	;# 
  2667  0D98                     	;# 
  2668  0D99                     	;# 
  2669  0D9A                     	;# 
  2670  0D9B                     	;# 
  2671  0D9C                     	;# 
  2672  0D9D                     	;# 
  2673  0D9E                     	;# 
  2674  0D9E                     	;# 
  2675  0D9F                     	;# 
  2676  0DA0                     	;# 
  2677  0DA1                     	;# 
  2678  0DA1                     	;# 
  2679  0DA2                     	;# 
  2680  0DA3                     	;# 
  2681  0DA4                     	;# 
  2682  0DA4                     	;# 
  2683  0DA5                     	;# 
  2684  0DA6                     	;# 
  2685  0DA7                     	;# 
  2686  0DA7                     	;# 
  2687  0DA8                     	;# 
  2688  0DA9                     	;# 
  2689  0DAA                     	;# 
  2690  0DAB                     	;# 
  2691  0DAC                     	;# 
  2692  0DAD                     	;# 
  2693  0DAE                     	;# 
  2694  0DAF                     	;# 
  2695  0E0F                     	;# 
  2696  0E10                     	;# 
  2697  0E11                     	;# 
  2698  0E12                     	;# 
  2699  0E13                     	;# 
  2700  0E14                     	;# 
  2701  0E15                     	;# 
  2702  0E16                     	;# 
  2703  0E17                     	;# 
  2704  0E18                     	;# 
  2705  0E19                     	;# 
  2706  0E1A                     	;# 
  2707  0E1B                     	;# 
  2708  0E1C                     	;# 
  2709  0E1D                     	;# 
  2710  0E1E                     	;# 
  2711  0E1F                     	;# 
  2712  0E20                     	;# 
  2713  0E21                     	;# 
  2714  0E22                     	;# 
  2715  0E23                     	;# 
  2716  0E24                     	;# 
  2717  0E25                     	;# 
  2718  0E26                     	;# 
  2719  0E27                     	;# 
  2720  0E28                     	;# 
  2721  0E29                     	;# 
  2722  0E2A                     	;# 
  2723  0E2B                     	;# 
  2724  0E2C                     	;# 
  2725  0E2D                     	;# 
  2726  0E2E                     	;# 
  2727  0E90                     	;# 
  2728  0E91                     	;# 
  2729  0E92                     	;# 
  2730  0E94                     	;# 
  2731  0E95                     	;# 
  2732  0E9C                     	;# 
  2733  0E9D                     	;# 
  2734  0E9E                     	;# 
  2735  0E9F                     	;# 
  2736  0EA0                     	;# 
  2737  0EA1                     	;# 
  2738  0EA2                     	;# 
  2739  0EA3                     	;# 
  2740  0EA4                     	;# 
  2741  0EA5                     	;# 
  2742  0EA6                     	;# 
  2743  0EA7                     	;# 
  2744  0F0F                     	;# 
  2745  0F10                     	;# 
  2746  0F11                     	;# 
  2747  0F12                     	;# 
  2748  0F13                     	;# 
  2749  0F14                     	;# 
  2750  0F15                     	;# 
  2751  0F16                     	;# 
  2752  0F17                     	;# 
  2753  0F18                     	;# 
  2754  0F19                     	;# 
  2755  0F1A                     	;# 
  2756  0F1B                     	;# 
  2757  0F1C                     	;# 
  2758  0F1D                     	;# 
  2759  0F1E                     	;# 
  2760  0F1F                     	;# 
  2761  0F20                     	;# 
  2762  0F21                     	;# 
  2763  0F22                     	;# 
  2764  0F23                     	;# 
  2765  0F24                     	;# 
  2766  0F25                     	;# 
  2767  0F26                     	;# 
  2768  0F27                     	;# 
  2769  0F28                     	;# 
  2770  0F29                     	;# 
  2771  0F2A                     	;# 
  2772  0F2B                     	;# 
  2773  0F2C                     	;# 
  2774  0F2D                     	;# 
  2775  0F2E                     	;# 
  2776  0F2F                     	;# 
  2777  0F30                     	;# 
  2778  0F31                     	;# 
  2779  0F32                     	;# 
  2780  0F33                     	;# 
  2781  0F34                     	;# 
  2782  0F35                     	;# 
  2783  0F36                     	;# 
  2784  0F37                     	;# 
  2785  0FE4                     	;# 
  2786  0FE5                     	;# 
  2787  0FE6                     	;# 
  2788  0FE7                     	;# 
  2789  0FE8                     	;# 
  2790  0FE9                     	;# 
  2791  0FEA                     	;# 
  2792  0FEB                     	;# 
  2793  0FED                     	;# 
  2794  0FEE                     	;# 
  2795  0FEF                     	;# 
  2796                           
  2797                           	psect	idataBANK0
  2798  0FFB                     __pidataBANK0:	
  2799                           
  2800                           ;initializer for _fall
  2801  0FFB  3401               	retlw	1
  2802                           
  2803                           	psect	idataBANK1
  2804  04EE                     __pidataBANK1:	
  2805                           
  2806                           ;initializer for _fsmStateTable
  2807  04EE  3403               	retlw	low _do_I2C_IDLE
  2808  04EF  3407               	retlw	high _do_I2C_IDLE
  2809  04F0  348B               	retlw	low _do_I2C_SEND_ADR_READ
  2810  04F1  3406               	retlw	high _do_I2C_SEND_ADR_READ
  2811  04F2  34C5               	retlw	low _do_I2C_SEND_ADR_WRITE
  2812  04F3  3406               	retlw	high _do_I2C_SEND_ADR_WRITE
  2813  04F4  34B2               	retlw	low _do_I2C_TX
  2814  04F5  3401               	retlw	high _do_I2C_TX
  2815  04F6  34DE               	retlw	low _do_I2C_RX
  2816  04F7  3402               	retlw	high _do_I2C_RX
  2817  04F8  34EF               	retlw	low _do_I2C_RCEN
  2818  04F9  3406               	retlw	high _do_I2C_RCEN
  2819  04FA  3495               	retlw	low _do_I2C_TX_EMPTY
  2820  04FB  3403               	retlw	high _do_I2C_TX_EMPTY
  2821  04FC  343C               	retlw	low _do_I2C_SEND_RESTART_READ
  2822  04FD  3407               	retlw	high _do_I2C_SEND_RESTART_READ
  2823  04FE  3434               	retlw	low _do_I2C_SEND_RESTART_WRITE
  2824  04FF  3407               	retlw	high _do_I2C_SEND_RESTART_WRITE
  2825  0500  342C               	retlw	low _do_I2C_SEND_RESTART
  2826  0501  3407               	retlw	high _do_I2C_SEND_RESTART
  2827  0502  3424               	retlw	low _do_I2C_SEND_STOP
  2828  0503  3407               	retlw	high _do_I2C_SEND_STOP
  2829  0504  341C               	retlw	low _do_I2C_DO_ACK
  2830  0505  3407               	retlw	high _do_I2C_DO_ACK
  2831  0506  3414               	retlw	low _do_I2C_DO_NACK_STOP
  2832  0507  3407               	retlw	high _do_I2C_DO_NACK_STOP
  2833  0508  340C               	retlw	low _do_I2C_DO_NACK_RESTART
  2834  0509  3407               	retlw	high _do_I2C_DO_NACK_RESTART
  2835  050A  34D0               	retlw	low _do_I2C_RESET
  2836  050B  3406               	retlw	high _do_I2C_RESET
  2837  050C  34EB               	retlw	low _do_I2C_DO_ADDRESS_NACK
  2838  050D  3403               	retlw	high _do_I2C_DO_ADDRESS_NACK
  2839  000B                     _INTCONbits	set	11
  2840  0011                     _PIR2bits	set	17
  2841  0010                     _PIR1bits	set	16
  2842  0095                     _OPTION_REGbits	set	149
  2843  008E                     _TRISC	set	142
  2844  008D                     _TRISB	set	141
  2845  008C                     _TRISA	set	140
  2846  0098                     _OSCTUNE	set	152
  2847  0099                     _OSCCON	set	153
  2848  0091                     _PIE2bits	set	145
  2849  0090                     _PIE1bits	set	144
  2850  04D6                     _PLLR	set	1238
  2851  010E                     _LATC	set	270
  2852  010D                     _LATB	set	269
  2853  010C                     _LATA	set	268
  2854  0116                     _BORCON	set	278
  2855  018C                     _ANSELA	set	396
  2856  018D                     _ANSELB	set	397
  2857  018E                     _ANSELC	set	398
  2858  020E                     _WPUC	set	526
  2859  020C                     _WPUA	set	524
  2860  020D                     _WPUB	set	525
  2861  0214                     _SSP1STATbits	set	532
  2862  0213                     _SSP1MSK	set	531
  2863  0211                     _SSP1BUF	set	529
  2864  0216                     _SSP1CON2bits	set	534
  2865  0212                     _SSP1ADD	set	530
  2866  0216                     _SSP1CON2	set	534
  2867  0215                     _SSP1CON1	set	533
  2868  0214                     _SSP1STAT	set	532
  2869  0215                     _SSP1CON1bits	set	533
  2870  028E                     _ODCONC	set	654
  2871  028D                     _ODCONB	set	653
  2872  028C                     _ODCONA	set	652
  2873  0E21                     _SSPDATPPS	set	3617
  2874  0E20                     _SSPCLKPPS	set	3616
  2875  0E9C                     _RB4PPS	set	3740
  2876  0E9E                     _RB6PPS	set	3742
  2877                           
  2878                           ; #config settings
  2879  0000                     
  2880                           	psect	cinit
  2881  0029                     start_initialization:	
  2882  0029                     __initialization:	
  2883                           
  2884                           ; Initialize objects allocated to BANK0
  2885  0029  318F  27FB  3180   	fcall	__pidataBANK0	;fetch initializer
  2886  002C  00EC               	movwf	__pdataBANK0& (0+127)
  2887                           
  2888                           ; Initialize objects allocated to BANK1
  2889  002D  30EE               	movlw	low __pidataBANK1
  2890  002E  0084               	movwf	4
  2891  002F  3084               	movlw	(high __pidataBANK1)| (0+128)
  2892  0030  0085               	movwf	5
  2893  0031  30A0               	movlw	low __pdataBANK1
  2894  0032  0086               	movwf	6
  2895  0033  3000               	movlw	high __pdataBANK1
  2896  0034  0087               	movwf	7
  2897  0035  3020               	movlw	32
  2898  0036  3187  275A  3180   	fcall	init_ram
  2899                           
  2900                           ; Clear objects allocated to COMMON
  2901  0039  01FA               	clrf	__pbssCOMMON& (0+127)
  2902  003A  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
  2903  003B  01FC               	clrf	(__pbssCOMMON+2)& (0+127)
  2904  003C  01FD               	clrf	(__pbssCOMMON+3)& (0+127)
  2905                           
  2906                           ; Clear objects allocated to BANK0
  2907  003D  3020               	movlw	low __pbssBANK0
  2908  003E  0084               	movwf	4
  2909  003F  3000               	movlw	high __pbssBANK0
  2910  0040  0085               	movwf	5
  2911  0041  3037               	movlw	55
  2912  0042  3187  2760  3180   	fcall	clear_ram0
  2913                           
  2914                           ; Clear objects allocated to BANK1
  2915  0045  30C0               	movlw	low __pbssBANK1
  2916  0046  0084               	movwf	4
  2917  0047  3000               	movlw	high __pbssBANK1
  2918  0048  0085               	movwf	5
  2919  0049  3019               	movlw	25
  2920  004A  3187  2760         	fcall	clear_ram0
  2921  004C                     end_of_initialization:	
  2922                           ;End of C runtime variable initialization code
  2923                           
  2924  004C                     __end_of__initialization:	
  2925  004C  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2926  004D  0020               	movlb	0
  2927  004E  3183  2B5E         	ljmp	_main	;jump to C main() function
  2928                           
  2929                           	psect	bssCOMMON
  2930  007A                     __pbssCOMMON:	
  2931  007A                     _i2c_driver_busCollisionISR:	
  2932  007A                     	ds	2
  2933  007C                     _start:	
  2934  007C                     	ds	1
  2935  007D                     _createWall:	
  2936  007D                     	ds	1
  2937                           
  2938                           	psect	bssBANK0
  2939  0020                     __pbssBANK0:	
  2940  0020                     _i2c_status:	
  2941  0020                     	ds	29
  2942  003D                     _pixelbuffer:	
  2943  003D                     	ds	16
  2944  004D                     _shiftCounter:	
  2945  004D                     	ds	2
  2946  004F                     _hiscore:	
  2947  004F                     	ds	2
  2948  0051                     _score:	
  2949  0051                     	ds	2
  2950  0053                     _i2c_driver_i2cISR:	
  2951  0053                     	ds	2
  2952  0055                     _gravityCounter:	
  2953  0055                     	ds	1
  2954  0056                     _elevation:	
  2955  0056                     	ds	1
  2956                           
  2957                           	psect	dataBANK0
  2958  006C                     __pdataBANK0:	
  2959  006C                     _fall:	
  2960  006C                     	ds	1
  2961                           
  2962                           	psect	bssBANK1
  2963  00C0                     __pbssBANK1:	
  2964  00C0                     _walls:	
  2965  00C0                     	ds	8
  2966  00C8                     _writebuffer:	
  2967  00C8                     	ds	17
  2968                           
  2969                           	psect	dataBANK1
  2970  00A0                     __pdataBANK1:	
  2971  00A0                     _fsmStateTable:	
  2972  00A0                     	ds	32
  2973                           
  2974                           	psect	inittext
  2975  075A                     init_ram:	
  2976  075A  00FE               	movwf	126
  2977  075B                     initloop:	
  2978  075B  0012               	moviw fsr0++
  2979  075C  001E               	movwi fsr1++
  2980  075D  0BFE               	decfsz	126,f
  2981  075E  2F5B               	goto	initloop
  2982  075F  3400               	retlw	0
  2983                           
  2984                           	psect	clrtext
  2985  0760                     clear_ram0:	
  2986                           ;	Called with FSR0 containing the base address, and
  2987                           ;	WREG with the size to clear
  2988                           
  2989  0760  0064               	clrwdt	;clear the watchdog before getting into this loop
  2990  0761                     clrloop0:	
  2991  0761  0180               	clrf	0	;clear RAM location pointed to by FSR
  2992  0762  3101               	addfsr 0,1
  2993  0763  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2994  0764  2F61               	goto	clrloop0	;have we reached the end yet?
  2995  0765  3400               	retlw	0	;all done for this memory range, return
  2996                           
  2997                           	psect	cstackCOMMON
  2998  0070                     __pcstackCOMMON:	
  2999  0070                     ?_mssp_IRQisEnabled:	
  3000  0070                     ?_i2c_driver_open:	
  3001                           ; 1 bit 
  3002                           
  3003  0070                     ?_i2c_driver_isNACK:	
  3004                           ; 1 bit 
  3005                           
  3006  0070                     ?i1_i2c_driver_isNACK:	
  3007                           ; 1 bit 
  3008                           
  3009  0070                     ?_PIN_MANAGER_Initialize:	
  3010                           ; 1 bit 
  3011                           
  3012  0070                     ?_OSCILLATOR_Initialize:	
  3013                           ; 1 bytes @ 0x0
  3014                           
  3015  0070                     ?_i2c_busCollisionISR:	
  3016                           ; 1 bytes @ 0x0
  3017                           
  3018  0070                     ??_i2c_busCollisionISR:	
  3019                           ; 1 bytes @ 0x0
  3020                           
  3021  0070                     ?_i2c_ISR:	
  3022                           ; 1 bytes @ 0x0
  3023                           
  3024  0070                     ?_i2c_poller:	
  3025                           ; 1 bytes @ 0x0
  3026                           
  3027  0070                     ?_mssp_disableIRQ:	
  3028                           ; 1 bytes @ 0x0
  3029                           
  3030  0070                     ?_mssp_clearIRQ:	
  3031                           ; 1 bytes @ 0x0
  3032                           
  3033  0070                     ?_mssp_setIRQ:	
  3034                           ; 1 bytes @ 0x0
  3035                           
  3036  0070                     ?_mssp_waitForEvent:	
  3037                           ; 1 bytes @ 0x0
  3038                           
  3039  0070                     ?_i2c_driver_resetBus:	
  3040                           ; 1 bytes @ 0x0
  3041                           
  3042  0070                     ?_i2c_driver_start:	
  3043                           ; 1 bytes @ 0x0
  3044                           
  3045  0070                     ?_i2c_driver_restart:	
  3046                           ; 1 bytes @ 0x0
  3047                           
  3048  0070                     ?_i2c_driver_stop:	
  3049                           ; 1 bytes @ 0x0
  3050                           
  3051  0070                     ?_i2c_driver_startRX:	
  3052                           ; 1 bytes @ 0x0
  3053                           
  3054  0070                     ?_i2c_driver_getRXData:	
  3055                           ; 1 bytes @ 0x0
  3056                           
  3057  0070                     ?_i2c_driver_TXData:	
  3058                           ; 1 bytes @ 0x0
  3059                           
  3060  0070                     ?_i2c_driver_sendACK:	
  3061                           ; 1 bytes @ 0x0
  3062                           
  3063  0070                     ?_i2c_driver_sendNACK:	
  3064                           ; 1 bytes @ 0x0
  3065                           
  3066  0070                     ?_i2c_driver_clearBusCollision:	
  3067                           ; 1 bytes @ 0x0
  3068                           
  3069  0070                     ??_i2c_driver_clearBusCollision:	
  3070                           ; 1 bytes @ 0x0
  3071                           
  3072  0070                     ?_INTERRUPT_InterruptManager:	
  3073                           ; 1 bytes @ 0x0
  3074                           
  3075  0070                     ?_SYSTEM_Initialize:	
  3076                           ; 1 bytes @ 0x0
  3077                           
  3078  0070                     ?_writeDisplay:	
  3079                           ; 1 bytes @ 0x0
  3080                           
  3081  0070                     ?_clearPixels:	
  3082                           ; 1 bytes @ 0x0
  3083                           
  3084  0070                     ?_initializeDisplay:	
  3085                           ; 1 bytes @ 0x0
  3086                           
  3087  0070                     ?_main:	
  3088                           ; 1 bytes @ 0x0
  3089                           
  3090  0070                     ?_i2c_open:	
  3091                           ; 1 bytes @ 0x0
  3092                           
  3093  0070                     ?_i2c_close:	
  3094                           ; 1 bytes @ 0x0
  3095                           
  3096  0070                     ?_i2c_masterOperation:	
  3097                           ; 1 bytes @ 0x0
  3098                           
  3099  0070                     ?_i2c_masterWrite:	
  3100                           ; 1 bytes @ 0x0
  3101                           
  3102  0070                     ?_do_I2C_RESET:	
  3103                           ; 1 bytes @ 0x0
  3104                           
  3105  0070                     ?_do_I2C_IDLE:	
  3106                           ; 1 bytes @ 0x0
  3107                           
  3108  0070                     ?_do_I2C_SEND_RESTART_READ:	
  3109                           ; 1 bytes @ 0x0
  3110                           
  3111  0070                     ?_do_I2C_SEND_RESTART_WRITE:	
  3112                           ; 1 bytes @ 0x0
  3113                           
  3114  0070                     ?_do_I2C_SEND_RESTART:	
  3115                           ; 1 bytes @ 0x0
  3116                           
  3117  0070                     ?_do_I2C_SEND_STOP:	
  3118                           ; 1 bytes @ 0x0
  3119                           
  3120  0070                     ?_do_I2C_SEND_ADR_READ:	
  3121                           ; 1 bytes @ 0x0
  3122                           
  3123  0070                     ?_do_I2C_SEND_ADR_WRITE:	
  3124                           ; 1 bytes @ 0x0
  3125                           
  3126  0070                     ?_do_I2C_RCEN:	
  3127                           ; 1 bytes @ 0x0
  3128                           
  3129  0070                     ?_do_I2C_DO_ACK:	
  3130                           ; 1 bytes @ 0x0
  3131                           
  3132  0070                     ?_do_I2C_DO_NACK_STOP:	
  3133                           ; 1 bytes @ 0x0
  3134                           
  3135  0070                     ?_do_I2C_DO_NACK_RESTART:	
  3136                           ; 1 bytes @ 0x0
  3137                           
  3138  0070                     ?_do_I2C_DO_ADDRESS_NACK:	
  3139                           ; 1 bytes @ 0x0
  3140                           
  3141  0070                     ?_do_I2C_TX:	
  3142                           ; 1 bytes @ 0x0
  3143                           
  3144  0070                     ?_do_I2C_RX:	
  3145                           ; 1 bytes @ 0x0
  3146                           
  3147  0070                     ?_do_I2C_TX_EMPTY:	
  3148                           ; 1 bytes @ 0x0
  3149                           
  3150  0070                     ?i1_mssp_clearIRQ:	
  3151                           ; 1 bytes @ 0x0
  3152                           
  3153  0070                     ??i1_mssp_clearIRQ:	
  3154                           ; 1 bytes @ 0x0
  3155                           
  3156  0070                     ?i1_mssp_setIRQ:	
  3157                           ; 1 bytes @ 0x0
  3158                           
  3159  0070                     ??i1_mssp_setIRQ:	
  3160                           ; 1 bytes @ 0x0
  3161                           
  3162  0070                     ?i1_i2c_driver_resetBus:	
  3163                           ; 1 bytes @ 0x0
  3164                           
  3165  0070                     ??i1_i2c_driver_resetBus:	
  3166                           ; 1 bytes @ 0x0
  3167                           
  3168  0070                     ?i1_i2c_driver_restart:	
  3169                           ; 1 bytes @ 0x0
  3170                           
  3171  0070                     ??i1_i2c_driver_restart:	
  3172                           ; 1 bytes @ 0x0
  3173                           
  3174  0070                     ?i1_i2c_driver_stop:	
  3175                           ; 1 bytes @ 0x0
  3176                           
  3177  0070                     ??i1_i2c_driver_stop:	
  3178                           ; 1 bytes @ 0x0
  3179                           
  3180  0070                     ??i1_i2c_driver_isNACK:	
  3181                           ; 1 bytes @ 0x0
  3182                           
  3183  0070                     ?i1_i2c_driver_startRX:	
  3184                           ; 1 bytes @ 0x0
  3185                           
  3186  0070                     ??i1_i2c_driver_startRX:	
  3187                           ; 1 bytes @ 0x0
  3188                           
  3189  0070                     ?i1_i2c_driver_getRXData:	
  3190                           ; 1 bytes @ 0x0
  3191                           
  3192  0070                     ??i1_i2c_driver_getRXData:	
  3193                           ; 1 bytes @ 0x0
  3194                           
  3195  0070                     ?i1_i2c_driver_TXData:	
  3196                           ; 1 bytes @ 0x0
  3197                           
  3198  0070                     ??i1_i2c_driver_TXData:	
  3199                           ; 1 bytes @ 0x0
  3200                           
  3201  0070                     ?i1_i2c_driver_sendACK:	
  3202                           ; 1 bytes @ 0x0
  3203                           
  3204  0070                     ??i1_i2c_driver_sendACK:	
  3205                           ; 1 bytes @ 0x0
  3206                           
  3207  0070                     ?i1_i2c_driver_sendNACK:	
  3208                           ; 1 bytes @ 0x0
  3209                           
  3210  0070                     ??i1_i2c_driver_sendNACK:	
  3211                           ; 1 bytes @ 0x0
  3212                           
  3213  0070                     ?i1_i2c_setBuffer:	
  3214                           ; 1 bytes @ 0x0
  3215                           
  3216  0070                     ?i1_do_I2C_RESET:	
  3217                           ; 1 bytes @ 0x0
  3218                           
  3219  0070                     ??i1_do_I2C_RESET:	
  3220                           ; 1 bytes @ 0x0
  3221                           
  3222  0070                     ?i1_do_I2C_IDLE:	
  3223                           ; 1 bytes @ 0x0
  3224                           
  3225  0070                     ??i1_do_I2C_IDLE:	
  3226                           ; 1 bytes @ 0x0
  3227                           
  3228  0070                     ?i1_do_I2C_SEND_RESTART_READ:	
  3229                           ; 1 bytes @ 0x0
  3230                           
  3231  0070                     ??i1_do_I2C_SEND_RESTART_READ:	
  3232                           ; 1 bytes @ 0x0
  3233                           
  3234  0070                     ?i1_do_I2C_SEND_RESTART_WRITE:	
  3235                           ; 1 bytes @ 0x0
  3236                           
  3237  0070                     ??i1_do_I2C_SEND_RESTART_WRITE:	
  3238                           ; 1 bytes @ 0x0
  3239                           
  3240  0070                     ?i1_do_I2C_SEND_RESTART:	
  3241                           ; 1 bytes @ 0x0
  3242                           
  3243  0070                     ??i1_do_I2C_SEND_RESTART:	
  3244                           ; 1 bytes @ 0x0
  3245                           
  3246  0070                     ?i1_do_I2C_SEND_STOP:	
  3247                           ; 1 bytes @ 0x0
  3248                           
  3249  0070                     ??i1_do_I2C_SEND_STOP:	
  3250                           ; 1 bytes @ 0x0
  3251                           
  3252  0070                     ?i1_do_I2C_SEND_ADR_READ:	
  3253                           ; 1 bytes @ 0x0
  3254                           
  3255  0070                     ?i1_do_I2C_SEND_ADR_WRITE:	
  3256                           ; 1 bytes @ 0x0
  3257                           
  3258  0070                     ?i1_do_I2C_RCEN:	
  3259                           ; 1 bytes @ 0x0
  3260                           
  3261  0070                     ??i1_do_I2C_RCEN:	
  3262                           ; 1 bytes @ 0x0
  3263                           
  3264  0070                     ?i1_do_I2C_DO_ACK:	
  3265                           ; 1 bytes @ 0x0
  3266                           
  3267  0070                     ??i1_do_I2C_DO_ACK:	
  3268                           ; 1 bytes @ 0x0
  3269                           
  3270  0070                     ?i1_do_I2C_DO_NACK_STOP:	
  3271                           ; 1 bytes @ 0x0
  3272                           
  3273  0070                     ??i1_do_I2C_DO_NACK_STOP:	
  3274                           ; 1 bytes @ 0x0
  3275                           
  3276  0070                     ?i1_do_I2C_DO_NACK_RESTART:	
  3277                           ; 1 bytes @ 0x0
  3278                           
  3279  0070                     ??i1_do_I2C_DO_NACK_RESTART:	
  3280                           ; 1 bytes @ 0x0
  3281                           
  3282  0070                     ?i1_do_I2C_DO_ADDRESS_NACK:	
  3283                           ; 1 bytes @ 0x0
  3284                           
  3285  0070                     ??i1_do_I2C_DO_ADDRESS_NACK:	
  3286                           ; 1 bytes @ 0x0
  3287                           
  3288  0070                     ?i1_do_I2C_TX:	
  3289                           ; 1 bytes @ 0x0
  3290                           
  3291  0070                     ?i1_do_I2C_RX:	
  3292                           ; 1 bytes @ 0x0
  3293                           
  3294  0070                     ??i1_do_I2C_RX:	
  3295                           ; 1 bytes @ 0x0
  3296                           
  3297  0070                     ?i1_do_I2C_TX_EMPTY:	
  3298                           ; 1 bytes @ 0x0
  3299                           
  3300  0070                     ??i1_do_I2C_TX_EMPTY:	
  3301                           ; 1 bytes @ 0x0
  3302                           
  3303  0070                     ?i1_i2c_ISR:	
  3304                           ; 1 bytes @ 0x0
  3305                           
  3306  0070                     ?i1_setCallBack:	
  3307                           ; 1 bytes @ 0x0
  3308                           
  3309  0070                     i1i2c_driver_TXData@d:	
  3310                           ; 1 bytes @ 0x0
  3311                           
  3312  0070                     i1i2c_setBuffer@bufferSize:	
  3313                           ; 1 bytes @ 0x0
  3314                           
  3315  0070                     i1setCallBack@cb:	
  3316                           ; 2 bytes @ 0x0
  3317                           
  3318                           
  3319                           ; 2 bytes @ 0x0
  3320  0070                     	ds	1
  3321  0071                     ??i1_do_I2C_SEND_ADR_READ:	
  3322  0071                     ??i1_do_I2C_SEND_ADR_WRITE:	
  3323                           ; 1 bytes @ 0x1
  3324                           
  3325  0071                     ??i1_do_I2C_TX:	
  3326                           ; 1 bytes @ 0x1
  3327                           
  3328                           
  3329                           ; 1 bytes @ 0x1
  3330  0071                     	ds	1
  3331  0072                     ??i1_i2c_setBuffer:	
  3332  0072                     i1setCallBack@p:	
  3333                           ; 1 bytes @ 0x2
  3334                           
  3335  0072                     i1_do_I2C_TX$774:	
  3336                           ; 1 bytes @ 0x2
  3337                           
  3338                           
  3339                           ; 2 bytes @ 0x2
  3340  0072                     	ds	1
  3341  0073                     ??i1_setCallBack:	
  3342  0073                     i1i2c_setBuffer@buffer:	
  3343                           ; 1 bytes @ 0x3
  3344                           
  3345                           
  3346                           ; 1 bytes @ 0x3
  3347  0073                     	ds	1
  3348  0074                     ??i1_i2c_ISR:	
  3349  0074                     i1setCallBack@idx:	
  3350                           ; 1 bytes @ 0x4
  3351                           
  3352                           
  3353                           ; 1 bytes @ 0x4
  3354  0074                     	ds	1
  3355  0075                     ??_INTERRUPT_InterruptManager:	
  3356  0075                     ?i1_i2c_setDataCompleteCallback:	
  3357                           ; 1 bytes @ 0x5
  3358                           
  3359  0075                     i1i2c_setDataCompleteCallback@cb:	
  3360                           ; 1 bytes @ 0x5
  3361                           
  3362                           
  3363                           ; 2 bytes @ 0x5
  3364  0075                     	ds	2
  3365  0077                     i1i2c_setDataCompleteCallback@p:	
  3366                           
  3367                           ; 1 bytes @ 0x7
  3368  0077                     	ds	1
  3369  0078                     ??i1_i2c_setDataCompleteCallback:	
  3370                           
  3371                           ; 1 bytes @ 0x8
  3372  0078                     	ds	1
  3373  0079                     ?i1_returnStop:	
  3374  0079                     ?i1_returnReset:	
  3375                           ; 1 bytes @ 0x9
  3376                           
  3377  0079                     ?i1_i2c_restartWrite:	
  3378                           ; 1 bytes @ 0x9
  3379                           
  3380  0079                     ?i1_wr1RegCompleteHandler:	
  3381                           ; 1 bytes @ 0x9
  3382                           
  3383  0079                     ?i1_rd1RegCompleteHandler:	
  3384                           ; 1 bytes @ 0x9
  3385                           
  3386  0079                     ?i1_rd2RegCompleteHandler:	
  3387                           ; 1 bytes @ 0x9
  3388                           
  3389  0079                     ?i1_wr2RegCompleteHandler:	
  3390                           ; 1 bytes @ 0x9
  3391                           
  3392  0079                     ?i1_rdBlkRegCompleteHandler:	
  3393                           ; 1 bytes @ 0x9
  3394                           
  3395  0079                     i1returnStop@p:	
  3396                           ; 1 bytes @ 0x9
  3397                           
  3398  0079                     i1returnReset@p:	
  3399                           ; 1 bytes @ 0x9
  3400                           
  3401  0079                     i1i2c_restartWrite@p:	
  3402                           ; 1 bytes @ 0x9
  3403                           
  3404  0079                     i1wr1RegCompleteHandler@p:	
  3405                           ; 1 bytes @ 0x9
  3406                           
  3407  0079                     i1rd1RegCompleteHandler@p:	
  3408                           ; 1 bytes @ 0x9
  3409                           
  3410  0079                     i1rd2RegCompleteHandler@p:	
  3411                           ; 1 bytes @ 0x9
  3412                           
  3413  0079                     i1wr2RegCompleteHandler@p:	
  3414                           ; 1 bytes @ 0x9
  3415                           
  3416  0079                     i1rdBlkRegCompleteHandler@p:	
  3417                           ; 1 bytes @ 0x9
  3418                           
  3419                           
  3420                           ; 1 bytes @ 0x9
  3421  0079                     	ds	1
  3422  007A                     ??i1_returnStop:	
  3423  007A                     ??i1_returnReset:	
  3424                           ; 1 bytes @ 0xA
  3425                           
  3426  007A                     ??i1_i2c_restartWrite:	
  3427                           ; 1 bytes @ 0xA
  3428                           
  3429  007A                     ??i1_wr1RegCompleteHandler:	
  3430                           ; 1 bytes @ 0xA
  3431                           
  3432  007A                     ??i1_rd1RegCompleteHandler:	
  3433                           ; 1 bytes @ 0xA
  3434                           
  3435  007A                     ??i1_rd2RegCompleteHandler:	
  3436                           ; 1 bytes @ 0xA
  3437                           
  3438  007A                     ??i1_wr2RegCompleteHandler:	
  3439                           ; 1 bytes @ 0xA
  3440                           
  3441  007A                     ??i1_rdBlkRegCompleteHandler:	
  3442                           ; 1 bytes @ 0xA
  3443                           
  3444                           
  3445                           	psect	cstackBANK0
  3446  0057                     __pcstackBANK0:	
  3447                           ; 1 bytes @ 0xA
  3448                           
  3449  0057                     ??_PIN_MANAGER_Initialize:	
  3450  0057                     ??_OSCILLATOR_Initialize:	
  3451                           ; 1 bytes @ 0x0
  3452                           
  3453  0057                     ?_setCallBack:	
  3454                           ; 1 bytes @ 0x0
  3455                           
  3456  0057                     ??_mssp_IRQisEnabled:	
  3457                           ; 1 bytes @ 0x0
  3458                           
  3459  0057                     ??_mssp_disableIRQ:	
  3460                           ; 1 bytes @ 0x0
  3461                           
  3462  0057                     ??_mssp_clearIRQ:	
  3463                           ; 1 bytes @ 0x0
  3464                           
  3465  0057                     ??_mssp_setIRQ:	
  3466                           ; 1 bytes @ 0x0
  3467                           
  3468  0057                     ??_mssp_waitForEvent:	
  3469                           ; 1 bytes @ 0x0
  3470                           
  3471  0057                     ??_i2c_driver_open:	
  3472                           ; 1 bytes @ 0x0
  3473                           
  3474  0057                     ??_i2c_driver_resetBus:	
  3475                           ; 1 bytes @ 0x0
  3476                           
  3477  0057                     ??_i2c_driver_start:	
  3478                           ; 1 bytes @ 0x0
  3479                           
  3480  0057                     ??_i2c_driver_restart:	
  3481                           ; 1 bytes @ 0x0
  3482                           
  3483  0057                     ??_i2c_driver_stop:	
  3484                           ; 1 bytes @ 0x0
  3485                           
  3486  0057                     ??_i2c_driver_isNACK:	
  3487                           ; 1 bytes @ 0x0
  3488                           
  3489  0057                     ??_i2c_driver_startRX:	
  3490                           ; 1 bytes @ 0x0
  3491                           
  3492  0057                     ??_i2c_driver_getRXData:	
  3493                           ; 1 bytes @ 0x0
  3494                           
  3495  0057                     ??_i2c_driver_TXData:	
  3496                           ; 1 bytes @ 0x0
  3497                           
  3498  0057                     ??_i2c_driver_sendACK:	
  3499                           ; 1 bytes @ 0x0
  3500                           
  3501  0057                     ??_i2c_driver_sendNACK:	
  3502                           ; 1 bytes @ 0x0
  3503                           
  3504  0057                     ?_i2c_driver_setBusCollisionISR:	
  3505                           ; 1 bytes @ 0x0
  3506                           
  3507  0057                     ?_i2c_driver_setI2cISR:	
  3508                           ; 1 bytes @ 0x0
  3509                           
  3510  0057                     ??_SYSTEM_Initialize:	
  3511                           ; 1 bytes @ 0x0
  3512                           
  3513  0057                     ?_drawPixel:	
  3514                           ; 1 bytes @ 0x0
  3515                           
  3516  0057                     ??_clearPixels:	
  3517                           ; 1 bytes @ 0x0
  3518                           
  3519  0057                     ??_i2c_close:	
  3520                           ; 1 bytes @ 0x0
  3521                           
  3522  0057                     ?_i2c_setBuffer:	
  3523                           ; 1 bytes @ 0x0
  3524                           
  3525  0057                     ??_do_I2C_RESET:	
  3526                           ; 1 bytes @ 0x0
  3527                           
  3528  0057                     ??_do_I2C_IDLE:	
  3529                           ; 1 bytes @ 0x0
  3530                           
  3531  0057                     ??_do_I2C_SEND_RESTART_READ:	
  3532                           ; 1 bytes @ 0x0
  3533                           
  3534  0057                     ??_do_I2C_SEND_RESTART_WRITE:	
  3535                           ; 1 bytes @ 0x0
  3536                           
  3537  0057                     ??_do_I2C_SEND_RESTART:	
  3538                           ; 1 bytes @ 0x0
  3539                           
  3540  0057                     ??_do_I2C_SEND_STOP:	
  3541                           ; 1 bytes @ 0x0
  3542                           
  3543  0057                     ??_do_I2C_RCEN:	
  3544                           ; 1 bytes @ 0x0
  3545                           
  3546  0057                     ??_do_I2C_DO_ACK:	
  3547                           ; 1 bytes @ 0x0
  3548                           
  3549  0057                     ??_do_I2C_DO_NACK_STOP:	
  3550                           ; 1 bytes @ 0x0
  3551                           
  3552  0057                     ??_do_I2C_DO_NACK_RESTART:	
  3553                           ; 1 bytes @ 0x0
  3554                           
  3555  0057                     ??_do_I2C_DO_ADDRESS_NACK:	
  3556                           ; 1 bytes @ 0x0
  3557                           
  3558  0057                     ??_do_I2C_RX:	
  3559                           ; 1 bytes @ 0x0
  3560                           
  3561  0057                     ??_do_I2C_TX_EMPTY:	
  3562                           ; 1 bytes @ 0x0
  3563                           
  3564  0057                     ?___awdiv:	
  3565                           ; 1 bytes @ 0x0
  3566                           
  3567  0057                     mssp_waitForEvent@timeout:	
  3568                           ; 2 bytes @ 0x0
  3569                           
  3570  0057                     i2c_driver_TXData@d:	
  3571                           ; 1 bytes @ 0x0
  3572                           
  3573  0057                     drawPixel@y:	
  3574                           ; 1 bytes @ 0x0
  3575                           
  3576  0057                     i2c_driver_setBusCollisionISR@f:	
  3577                           ; 1 bytes @ 0x0
  3578                           
  3579  0057                     i2c_driver_setI2cISR@f:	
  3580                           ; 2 bytes @ 0x0
  3581                           
  3582  0057                     i2c_setBuffer@bufferSize:	
  3583                           ; 2 bytes @ 0x0
  3584                           
  3585  0057                     setCallBack@cb:	
  3586                           ; 2 bytes @ 0x0
  3587                           
  3588  0057                     ___awdiv@divisor:	
  3589                           ; 2 bytes @ 0x0
  3590                           
  3591                           
  3592                           ; 2 bytes @ 0x0
  3593  0057                     	ds	1
  3594  0058                     ??_do_I2C_SEND_ADR_READ:	
  3595  0058                     ??_do_I2C_SEND_ADR_WRITE:	
  3596                           ; 1 bytes @ 0x1
  3597                           
  3598  0058                     ??_do_I2C_TX:	
  3599                           ; 1 bytes @ 0x1
  3600                           
  3601  0058                     drawPixel@color:	
  3602                           ; 1 bytes @ 0x1
  3603                           
  3604  0058                     i2c_close@ret:	
  3605                           ; 1 bytes @ 0x1
  3606                           
  3607  0058                     clearPixels@i:	
  3608                           ; 1 bytes @ 0x1
  3609                           
  3610                           
  3611                           ; 2 bytes @ 0x1
  3612  0058                     	ds	1
  3613  0059                     ??_i2c_driver_setBusCollisionISR:	
  3614  0059                     ??_i2c_driver_setI2cISR:	
  3615                           ; 1 bytes @ 0x2
  3616                           
  3617  0059                     ??_drawPixel:	
  3618                           ; 1 bytes @ 0x2
  3619                           
  3620  0059                     ??_i2c_open:	
  3621                           ; 1 bytes @ 0x2
  3622                           
  3623  0059                     ??_i2c_setBuffer:	
  3624                           ; 1 bytes @ 0x2
  3625                           
  3626  0059                     setCallBack@p:	
  3627                           ; 1 bytes @ 0x2
  3628                           
  3629  0059                     _do_I2C_TX$774:	
  3630                           ; 1 bytes @ 0x2
  3631                           
  3632  0059                     ___awdiv@dividend:	
  3633                           ; 2 bytes @ 0x2
  3634                           
  3635                           
  3636                           ; 2 bytes @ 0x2
  3637  0059                     	ds	1
  3638  005A                     ??_setCallBack:	
  3639  005A                     i2c_open@address:	
  3640                           ; 1 bytes @ 0x3
  3641                           
  3642  005A                     i2c_setBuffer@buffer:	
  3643                           ; 1 bytes @ 0x3
  3644                           
  3645                           
  3646                           ; 1 bytes @ 0x3
  3647  005A                     	ds	1
  3648  005B                     ??_i2c_ISR:	
  3649  005B                     ??___awdiv:	
  3650                           ; 1 bytes @ 0x4
  3651                           
  3652  005B                     i2c_open@ret:	
  3653                           ; 1 bytes @ 0x4
  3654                           
  3655  005B                     setCallBack@idx:	
  3656                           ; 1 bytes @ 0x4
  3657                           
  3658                           
  3659                           ; 1 bytes @ 0x4
  3660  005B                     	ds	1
  3661  005C                     ??_i2c_poller:	
  3662  005C                     ?_i2c_setDataCompleteCallback:	
  3663                           ; 1 bytes @ 0x5
  3664                           
  3665  005C                     ?_i2c_setAddressNACKCallback:	
  3666                           ; 1 bytes @ 0x5
  3667                           
  3668  005C                     ??_i2c_masterOperation:	
  3669                           ; 1 bytes @ 0x5
  3670                           
  3671  005C                     ___awdiv@counter:	
  3672                           ; 1 bytes @ 0x5
  3673                           
  3674  005C                     i2c_setDataCompleteCallback@cb:	
  3675                           ; 1 bytes @ 0x5
  3676                           
  3677  005C                     i2c_setAddressNACKCallback@cb:	
  3678                           ; 2 bytes @ 0x5
  3679                           
  3680                           
  3681                           ; 2 bytes @ 0x5
  3682  005C                     	ds	1
  3683  005D                     i2c_masterOperation@read:	
  3684  005D                     ___awdiv@sign:	
  3685                           ; 1 bytes @ 0x6
  3686                           
  3687                           
  3688                           ; 1 bytes @ 0x6
  3689  005D                     	ds	1
  3690  005E                     i2c_setDataCompleteCallback@p:	
  3691  005E                     i2c_setAddressNACKCallback@p:	
  3692                           ; 1 bytes @ 0x7
  3693                           
  3694  005E                     i2c_masterOperation@ret:	
  3695                           ; 1 bytes @ 0x7
  3696                           
  3697  005E                     ___awdiv@quotient:	
  3698                           ; 1 bytes @ 0x7
  3699                           
  3700                           
  3701                           ; 2 bytes @ 0x7
  3702  005E                     	ds	1
  3703  005F                     ??_i2c_setDataCompleteCallback:	
  3704  005F                     ??_i2c_setAddressNACKCallback:	
  3705                           ; 1 bytes @ 0x8
  3706                           
  3707  005F                     ??_i2c_masterWrite:	
  3708                           ; 1 bytes @ 0x8
  3709                           
  3710  005F                     drawPixel@x:	
  3711                           ; 1 bytes @ 0x8
  3712                           
  3713                           
  3714                           ; 1 bytes @ 0x8
  3715  005F                     	ds	1
  3716  0060                     ?_i2c_writeNBytes:	
  3717  0060                     ?_returnStop:	
  3718                           ; 1 bytes @ 0x9
  3719                           
  3720  0060                     ?_returnReset:	
  3721                           ; 1 bytes @ 0x9
  3722                           
  3723  0060                     ?_i2c_restartWrite:	
  3724                           ; 1 bytes @ 0x9
  3725                           
  3726  0060                     ?_wr1RegCompleteHandler:	
  3727                           ; 1 bytes @ 0x9
  3728                           
  3729  0060                     ?_rd1RegCompleteHandler:	
  3730                           ; 1 bytes @ 0x9
  3731                           
  3732  0060                     ?_rd2RegCompleteHandler:	
  3733                           ; 1 bytes @ 0x9
  3734                           
  3735  0060                     ?_wr2RegCompleteHandler:	
  3736                           ; 1 bytes @ 0x9
  3737                           
  3738  0060                     ?_rdBlkRegCompleteHandler:	
  3739                           ; 1 bytes @ 0x9
  3740                           
  3741  0060                     returnStop@p:	
  3742                           ; 1 bytes @ 0x9
  3743                           
  3744  0060                     returnReset@p:	
  3745                           ; 1 bytes @ 0x9
  3746                           
  3747  0060                     i2c_restartWrite@p:	
  3748                           ; 1 bytes @ 0x9
  3749                           
  3750  0060                     wr1RegCompleteHandler@p:	
  3751                           ; 1 bytes @ 0x9
  3752                           
  3753  0060                     i2c_writeNBytes@data:	
  3754                           ; 1 bytes @ 0x9
  3755                           
  3756  0060                     rd1RegCompleteHandler@p:	
  3757                           ; 1 bytes @ 0x9
  3758                           
  3759  0060                     rd2RegCompleteHandler@p:	
  3760                           ; 1 bytes @ 0x9
  3761                           
  3762  0060                     wr2RegCompleteHandler@p:	
  3763                           ; 1 bytes @ 0x9
  3764                           
  3765  0060                     rdBlkRegCompleteHandler@p:	
  3766                           ; 1 bytes @ 0x9
  3767                           
  3768                           
  3769                           ; 1 bytes @ 0x9
  3770  0060                     	ds	1
  3771  0061                     ??_returnStop:	
  3772  0061                     ??_returnReset:	
  3773                           ; 1 bytes @ 0xA
  3774                           
  3775  0061                     ??_i2c_restartWrite:	
  3776                           ; 1 bytes @ 0xA
  3777                           
  3778  0061                     ??_wr1RegCompleteHandler:	
  3779                           ; 1 bytes @ 0xA
  3780                           
  3781  0061                     ??_rd1RegCompleteHandler:	
  3782                           ; 1 bytes @ 0xA
  3783                           
  3784  0061                     ??_rd2RegCompleteHandler:	
  3785                           ; 1 bytes @ 0xA
  3786                           
  3787  0061                     ??_wr2RegCompleteHandler:	
  3788                           ; 1 bytes @ 0xA
  3789                           
  3790  0061                     ??_rdBlkRegCompleteHandler:	
  3791                           ; 1 bytes @ 0xA
  3792                           
  3793  0061                     i2c_writeNBytes@len:	
  3794                           ; 1 bytes @ 0xA
  3795                           
  3796                           
  3797                           ; 2 bytes @ 0xA
  3798  0061                     	ds	2
  3799  0063                     ??_i2c_writeNBytes:	
  3800  0063                     i2c_writeNBytes@address:	
  3801                           ; 1 bytes @ 0xC
  3802                           
  3803                           
  3804                           ; 1 bytes @ 0xC
  3805  0063                     	ds	1
  3806  0064                     ??_writeDisplay:	
  3807  0064                     ??_initializeDisplay:	
  3808                           ; 1 bytes @ 0xD
  3809                           
  3810                           
  3811                           ; 1 bytes @ 0xD
  3812  0064                     	ds	1
  3813  0065                     initializeDisplay@i:	
  3814                           
  3815                           ; 1 bytes @ 0xE
  3816  0065                     	ds	1
  3817  0066                     initializeDisplay@i_471:	
  3818                           
  3819                           ; 1 bytes @ 0xF
  3820  0066                     	ds	3
  3821  0069                     writeDisplay@i:	
  3822                           
  3823                           ; 1 bytes @ 0x12
  3824  0069                     	ds	1
  3825  006A                     ??_main:	
  3826                           
  3827                           ; 1 bytes @ 0x13
  3828  006A                     	ds	2
  3829                           
  3830                           	psect	maintext
  3831  035E                     __pmaintext:	
  3832 ;;
  3833 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  3834 ;;
  3835 ;; *************** function _main *****************
  3836 ;; Defined at:
  3837 ;;		line 113 in file "main.c"
  3838 ;; Parameters:    Size  Location     Type
  3839 ;;		None
  3840 ;; Auto vars:     Size  Location     Type
  3841 ;;		None
  3842 ;; Return value:  Size  Location     Type
  3843 ;;                  1    wreg      void 
  3844 ;; Registers used:
  3845 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3846 ;; Tracked objects:
  3847 ;;		On entry : B1F/0
  3848 ;;		On exit  : 0/0
  3849 ;;		Unchanged: 0/0
  3850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3851 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3852 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3853 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3854 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3855 ;;Total ram usage:        2 bytes
  3856 ;; Hardware stack levels required when called:   16
  3857 ;; This function calls:
  3858 ;;		_SYSTEM_Initialize
  3859 ;;		_clearPixels
  3860 ;;		_drawPixel
  3861 ;;		_initializeDisplay
  3862 ;;		_writeDisplay
  3863 ;; This function is called by:
  3864 ;;		Startup code after reset
  3865 ;; This function uses a non-reentrant model
  3866 ;;
  3867                           
  3868                           
  3869                           ;psect for function _main
  3870  035E                     _main:	
  3871                           
  3872                           ;main.c: 115: SYSTEM_Initialize();
  3873                           
  3874                           ;incstack = 0
  3875                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3876  035E  3187  278A  3183   	fcall	_SYSTEM_Initialize
  3877                           
  3878                           ;main.c: 116: (INTCONbits.GIE = 1);
  3879  0361  178B               	bsf	11,7	;volatile
  3880                           
  3881                           ;main.c: 117: (INTCONbits.PEIE = 1);
  3882  0362  170B               	bsf	11,6	;volatile
  3883                           
  3884                           ;main.c: 119: initializeDisplay();
  3885  0363  3182  2200  3183   	fcall	_initializeDisplay
  3886                           
  3887                           ;main.c: 121: elevation = 3;
  3888  0366  3003               	movlw	3
  3889  0367  0020               	movlb	0	; select bank0
  3890  0368  00EA               	movwf	??_main
  3891  0369  086A               	movf	??_main,w
  3892  036A  00D6               	movwf	_elevation
  3893  036B  2B79               	goto	l4829
  3894  036C                     l4837:	
  3895                           
  3896                           ;main.c: 131: if (fall) {
  3897  036C  086C               	movf	_fall,w
  3898  036D  1903               	btfsc	3,2
  3899  036E  2B74               	goto	l4841
  3900                           
  3901                           ;main.c: 132: elevation += 1;
  3902  036F  3001               	movlw	1
  3903  0370  00EA               	movwf	??_main
  3904  0371  086A               	movf	??_main,w
  3905  0372  07D6               	addwf	_elevation,f
  3906                           
  3907                           ;main.c: 133: } else {
  3908  0373  2B78               	goto	l4845
  3909  0374                     l4841:	
  3910                           
  3911                           ;main.c: 134: elevation -= 1;
  3912  0374  3001               	movlw	1
  3913  0375  02D6               	subwf	_elevation,f
  3914                           
  3915                           ;main.c: 135: fall = 1;
  3916  0376  01EC               	clrf	_fall
  3917  0377  0AEC               	incf	_fall,f
  3918  0378                     l4845:	
  3919                           
  3920                           ;main.c: 136: }
  3921                           ;main.c: 137: gravityCounter = 0;
  3922  0378  01D5               	clrf	_gravityCounter
  3923  0379                     l4829:	
  3924                           ;main.c: 125: while (1)
  3925                           
  3926                           ;main.c: 138: } else {
  3927                           
  3928                           
  3929                           ;main.c: 126: {
  3930                           ;main.c: 127: drawPixel(1, elevation, 3);
  3931  0379  0856               	movf	_elevation,w
  3932  037A  00EA               	movwf	??_main
  3933  037B  086A               	movf	??_main,w
  3934  037C  00D7               	movwf	drawPixel@y
  3935  037D  3003               	movlw	3
  3936  037E  00EB               	movwf	??_main+1
  3937  037F  086B               	movf	??_main+1,w
  3938  0380  00D8               	movwf	drawPixel@color
  3939  0381  3001               	movlw	1
  3940  0382  3180  2050  3183   	fcall	_drawPixel
  3941                           
  3942                           ;main.c: 128: writeDisplay();
  3943  0385  3181  2106  3183   	fcall	_writeDisplay
  3944                           
  3945                           ;main.c: 129: clearPixels();
  3946  0388  3185  2569  3183   	fcall	_clearPixels
  3947                           
  3948                           ;main.c: 130: if (gravityCounter >= 20) {
  3949  038B  3014               	movlw	20
  3950  038C  0020               	movlb	0	; select bank0
  3951  038D  0255               	subwf	_gravityCounter,w
  3952  038E  1803               	btfsc	3,0
  3953  038F  2B6C               	goto	l4837
  3954                           
  3955                           ;main.c: 139: gravityCounter++;
  3956  0390  3001               	movlw	1
  3957  0391  00EA               	movwf	??_main
  3958  0392  086A               	movf	??_main,w
  3959  0393  07D5               	addwf	_gravityCounter,f
  3960  0394  2B79               	goto	l4829
  3961  0395                     __end_of_main:	
  3962                           
  3963                           	psect	text1
  3964  0106                     __ptext1:	
  3965 ;; *************** function _writeDisplay *****************
  3966 ;; Defined at:
  3967 ;;		line 68 in file "main.c"
  3968 ;; Parameters:    Size  Location     Type
  3969 ;;		None
  3970 ;; Auto vars:     Size  Location     Type
  3971 ;;  i               1   18[BANK0 ] unsigned char 
  3972 ;; Return value:  Size  Location     Type
  3973 ;;                  1    wreg      void 
  3974 ;; Registers used:
  3975 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3976 ;; Tracked objects:
  3977 ;;		On entry : 0/0
  3978 ;;		On exit  : 0/0
  3979 ;;		Unchanged: 0/0
  3980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3981 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3982 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3983 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3984 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3985 ;;Total ram usage:        6 bytes
  3986 ;; Hardware stack levels used:    1
  3987 ;; Hardware stack levels required when called:   15
  3988 ;; This function calls:
  3989 ;;		___awdiv
  3990 ;;		_i2c_writeNBytes
  3991 ;; This function is called by:
  3992 ;;		_main
  3993 ;; This function uses a non-reentrant model
  3994 ;;
  3995                           
  3996                           
  3997                           ;psect for function _writeDisplay
  3998  0106                     _writeDisplay:	
  3999                           
  4000                           ;main.c: 69: writebuffer[0] = 0;
  4001                           
  4002                           ;incstack = 0
  4003                           ; Regs used in _writeDisplay: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4004  0106  0021               	movlb	1	; select bank1
  4005  0107  01C8               	clrf	_writebuffer^(0+128)
  4006                           
  4007                           ;main.c: 70: for (uint8_t i = 1; i < 17; i += 2) {
  4008  0108  0020               	movlb	0	; select bank0
  4009  0109  01E9               	clrf	writeDisplay@i
  4010  010A  0AE9               	incf	writeDisplay@i,f
  4011  010B  3011               	movlw	17
  4012  010C  0269               	subwf	writeDisplay@i,w
  4013  010D  1803               	btfsc	3,0
  4014  010E  2954               	goto	l4761
  4015  010F                     l4755:	
  4016                           
  4017                           ;main.c: 71: writebuffer[i] = pixelbuffer[i/2] & 0xFF;
  4018  010F  3002               	movlw	2
  4019  0110  00D7               	movwf	___awdiv@divisor
  4020  0111  3000               	movlw	0
  4021  0112  00D8               	movwf	___awdiv@divisor+1
  4022  0113  0869               	movf	writeDisplay@i,w
  4023  0114  00E4               	movwf	??_writeDisplay
  4024  0115  01E5               	clrf	??_writeDisplay+1
  4025  0116  0864               	movf	??_writeDisplay,w
  4026  0117  00D9               	movwf	___awdiv@dividend
  4027  0118  0865               	movf	??_writeDisplay+1,w
  4028  0119  00DA               	movwf	___awdiv@dividend+1
  4029  011A  3181  2160  3181   	fcall	___awdiv
  4030  011D  0020               	movlb	0	; select bank0
  4031  011E  0857               	movf	?___awdiv,w
  4032  011F  0709               	addwf	9,w
  4033  0120  3E3D               	addlw	(low (_pixelbuffer| 0))& (0+255)
  4034  0121  0086               	movwf	6
  4035  0122  0187               	clrf	7
  4036  0123  0801               	movf	1,w
  4037  0124  00E6               	movwf	??_writeDisplay+2
  4038  0125  0869               	movf	writeDisplay@i,w
  4039  0126  3EC8               	addlw	(low (_writebuffer| 0))& (0+255)
  4040  0127  0086               	movwf	6
  4041  0128  0187               	clrf	7
  4042  0129  0866               	movf	??_writeDisplay+2,w
  4043  012A  0081               	movwf	1
  4044                           
  4045                           ;main.c: 72: writebuffer[i + 1] = pixelbuffer[i/2] >> 8;
  4046  012B  3002               	movlw	2
  4047  012C  00D7               	movwf	___awdiv@divisor
  4048  012D  3000               	movlw	0
  4049  012E  00D8               	movwf	___awdiv@divisor+1
  4050  012F  0869               	movf	writeDisplay@i,w
  4051  0130  00E4               	movwf	??_writeDisplay
  4052  0131  01E5               	clrf	??_writeDisplay+1
  4053  0132  0864               	movf	??_writeDisplay,w
  4054  0133  00D9               	movwf	___awdiv@dividend
  4055  0134  0865               	movf	??_writeDisplay+1,w
  4056  0135  00DA               	movwf	___awdiv@dividend+1
  4057  0136  3181  2160  3181   	fcall	___awdiv
  4058  0139  0020               	movlb	0	; select bank0
  4059  013A  0857               	movf	?___awdiv,w
  4060  013B  0709               	addwf	9,w
  4061  013C  3E3D               	addlw	(low (_pixelbuffer| 0))& (0+255)
  4062  013D  0086               	movwf	6
  4063  013E  0187               	clrf	7
  4064  013F  3F40               	moviw [0]fsr1
  4065  0140  00E6               	movwf	??_writeDisplay+2
  4066  0141  3F41               	moviw [1]fsr1
  4067  0142  00E7               	movwf	??_writeDisplay+3
  4068  0143  0867               	movf	??_writeDisplay+3,w
  4069  0144  00E8               	movwf	??_writeDisplay+4
  4070  0145  0869               	movf	writeDisplay@i,w
  4071  0146  3E01               	addlw	1
  4072  0147  3EC8               	addlw	(low (_writebuffer| 0))& (0+255)
  4073  0148  0086               	movwf	6
  4074  0149  0187               	clrf	7
  4075  014A  0868               	movf	??_writeDisplay+4,w
  4076  014B  0081               	movwf	1
  4077  014C  3002               	movlw	2
  4078  014D  00E4               	movwf	??_writeDisplay
  4079  014E  0864               	movf	??_writeDisplay,w
  4080  014F  07E9               	addwf	writeDisplay@i,f
  4081  0150  3011               	movlw	17
  4082  0151  0269               	subwf	writeDisplay@i,w
  4083  0152  1C03               	skipc
  4084  0153  290F               	goto	l4755
  4085  0154                     l4761:	
  4086                           
  4087                           ;main.c: 73: }
  4088                           ;main.c: 74: i2c_writeNBytes(0x70, writebuffer, 17);
  4089  0154  30C8               	movlw	(low (_writebuffer| 0))& (0+255)
  4090  0155  00E4               	movwf	??_writeDisplay
  4091  0156  0864               	movf	??_writeDisplay,w
  4092  0157  00E0               	movwf	i2c_writeNBytes@data
  4093  0158  3011               	movlw	17
  4094  0159  00E1               	movwf	i2c_writeNBytes@len
  4095  015A  3000               	movlw	0
  4096  015B  00E2               	movwf	i2c_writeNBytes@len+1
  4097  015C  3070               	movlw	112
  4098  015D  3184  2439         	fcall	_i2c_writeNBytes
  4099  015F  0008               	return
  4100  0160                     __end_of_writeDisplay:	
  4101                           
  4102                           	psect	text2
  4103  0160                     __ptext2:	
  4104 ;; *************** function ___awdiv *****************
  4105 ;; Defined at:
  4106 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  4107 ;; Parameters:    Size  Location     Type
  4108 ;;  divisor         2    0[BANK0 ] int 
  4109 ;;  dividend        2    2[BANK0 ] int 
  4110 ;; Auto vars:     Size  Location     Type
  4111 ;;  quotient        2    7[BANK0 ] int 
  4112 ;;  sign            1    6[BANK0 ] unsigned char 
  4113 ;;  counter         1    5[BANK0 ] unsigned char 
  4114 ;; Return value:  Size  Location     Type
  4115 ;;                  2    0[BANK0 ] int 
  4116 ;; Registers used:
  4117 ;;		wreg, status,2, status,0
  4118 ;; Tracked objects:
  4119 ;;		On entry : 0/0
  4120 ;;		On exit  : 0/0
  4121 ;;		Unchanged: 0/0
  4122 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4123 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4124 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4125 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4126 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4127 ;;Total ram usage:        9 bytes
  4128 ;; Hardware stack levels used:    1
  4129 ;; Hardware stack levels required when called:    6
  4130 ;; This function calls:
  4131 ;;		Nothing
  4132 ;; This function is called by:
  4133 ;;		_writeDisplay
  4134 ;; This function uses a non-reentrant model
  4135 ;;
  4136                           
  4137                           
  4138                           ;psect for function ___awdiv
  4139  0160                     ___awdiv:	
  4140                           
  4141                           ;incstack = 0
  4142                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  4143  0160  0020               	movlb	0	; select bank0
  4144  0161  01DD               	clrf	___awdiv@sign
  4145  0162  1FD8               	btfss	___awdiv@divisor+1,7
  4146  0163  296B               	goto	l2653
  4147  0164  09D7               	comf	___awdiv@divisor,f
  4148  0165  09D8               	comf	___awdiv@divisor+1,f
  4149  0166  0AD7               	incf	___awdiv@divisor,f
  4150  0167  1903               	skipnz
  4151  0168  0AD8               	incf	___awdiv@divisor+1,f
  4152  0169  01DD               	clrf	___awdiv@sign
  4153  016A  0ADD               	incf	___awdiv@sign,f
  4154  016B                     l2653:	
  4155  016B  1FDA               	btfss	___awdiv@dividend+1,7
  4156  016C  2976               	goto	l2659
  4157  016D  09D9               	comf	___awdiv@dividend,f
  4158  016E  09DA               	comf	___awdiv@dividend+1,f
  4159  016F  0AD9               	incf	___awdiv@dividend,f
  4160  0170  1903               	skipnz
  4161  0171  0ADA               	incf	___awdiv@dividend+1,f
  4162  0172  3001               	movlw	1
  4163  0173  00DB               	movwf	??___awdiv
  4164  0174  085B               	movf	??___awdiv,w
  4165  0175  06DD               	xorwf	___awdiv@sign,f
  4166  0176                     l2659:	
  4167  0176  01DE               	clrf	___awdiv@quotient
  4168  0177  01DF               	clrf	___awdiv@quotient+1
  4169  0178  0857               	movf	___awdiv@divisor,w
  4170  0179  0458               	iorwf	___awdiv@divisor+1,w
  4171  017A  1903               	btfsc	3,2
  4172  017B  29A5               	goto	l2681
  4173  017C  01DC               	clrf	___awdiv@counter
  4174  017D  0ADC               	incf	___awdiv@counter,f
  4175  017E                     l2669:	
  4176  017E  1BD8               	btfsc	___awdiv@divisor+1,7
  4177  017F  298A               	goto	l2671
  4178  0180  3001               	movlw	1
  4179  0181                     u1045:	
  4180  0181  35D7               	lslf	___awdiv@divisor,f
  4181  0182  0DD8               	rlf	___awdiv@divisor+1,f
  4182  0183  0B89               	decfsz	9,f
  4183  0184  2981               	goto	u1045
  4184  0185  3001               	movlw	1
  4185  0186  00DB               	movwf	??___awdiv
  4186  0187  085B               	movf	??___awdiv,w
  4187  0188  07DC               	addwf	___awdiv@counter,f
  4188  0189  297E               	goto	l2669
  4189  018A                     l2671:	
  4190  018A  3001               	movlw	1
  4191  018B                     u1065:	
  4192  018B  35DE               	lslf	___awdiv@quotient,f
  4193  018C  0DDF               	rlf	___awdiv@quotient+1,f
  4194  018D  0B89               	decfsz	9,f
  4195  018E  298B               	goto	u1065
  4196  018F  0858               	movf	___awdiv@divisor+1,w
  4197  0190  025A               	subwf	___awdiv@dividend+1,w
  4198  0191  1D03               	skipz
  4199  0192  2995               	goto	u1075
  4200  0193  0857               	movf	___awdiv@divisor,w
  4201  0194  0259               	subwf	___awdiv@dividend,w
  4202  0195                     u1075:	
  4203  0195  1C03               	skipc
  4204  0196  299C               	goto	l2677
  4205  0197  0857               	movf	___awdiv@divisor,w
  4206  0198  02D9               	subwf	___awdiv@dividend,f
  4207  0199  0858               	movf	___awdiv@divisor+1,w
  4208  019A  3BDA               	subwfb	___awdiv@dividend+1,f
  4209  019B  145E               	bsf	___awdiv@quotient,0
  4210  019C                     l2677:	
  4211  019C  3001               	movlw	1
  4212  019D                     u1085:	
  4213  019D  36D8               	lsrf	___awdiv@divisor+1,f
  4214  019E  0CD7               	rrf	___awdiv@divisor,f
  4215  019F  0B89               	decfsz	9,f
  4216  01A0  299D               	goto	u1085
  4217  01A1  3001               	movlw	1
  4218  01A2  02DC               	subwf	___awdiv@counter,f
  4219  01A3  1D03               	btfss	3,2
  4220  01A4  298A               	goto	l2671
  4221  01A5                     l2681:	
  4222  01A5  085D               	movf	___awdiv@sign,w
  4223  01A6  1903               	btfsc	3,2
  4224  01A7  29AD               	goto	l2685
  4225  01A8  09DE               	comf	___awdiv@quotient,f
  4226  01A9  09DF               	comf	___awdiv@quotient+1,f
  4227  01AA  0ADE               	incf	___awdiv@quotient,f
  4228  01AB  1903               	skipnz
  4229  01AC  0ADF               	incf	___awdiv@quotient+1,f
  4230  01AD                     l2685:	
  4231  01AD  085F               	movf	___awdiv@quotient+1,w
  4232  01AE  00D8               	movwf	?___awdiv+1
  4233  01AF  085E               	movf	___awdiv@quotient,w
  4234  01B0  00D7               	movwf	?___awdiv
  4235  01B1  0008               	return
  4236  01B2                     __end_of___awdiv:	
  4237                           
  4238                           	psect	text3
  4239  0200                     __ptext3:	
  4240 ;; *************** function _initializeDisplay *****************
  4241 ;; Defined at:
  4242 ;;		line 97 in file "main.c"
  4243 ;; Parameters:    Size  Location     Type
  4244 ;;		None
  4245 ;; Auto vars:     Size  Location     Type
  4246 ;;  i               1   15[BANK0 ] unsigned char 
  4247 ;;  i               1   14[BANK0 ] unsigned char 
  4248 ;; Return value:  Size  Location     Type
  4249 ;;                  1    wreg      void 
  4250 ;; Registers used:
  4251 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4252 ;; Tracked objects:
  4253 ;;		On entry : 0/0
  4254 ;;		On exit  : 0/0
  4255 ;;		Unchanged: 0/0
  4256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4257 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4258 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4259 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4260 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4261 ;;Total ram usage:        3 bytes
  4262 ;; Hardware stack levels used:    1
  4263 ;; Hardware stack levels required when called:   15
  4264 ;; This function calls:
  4265 ;;		_i2c_writeNBytes
  4266 ;; This function is called by:
  4267 ;;		_main
  4268 ;; This function uses a non-reentrant model
  4269 ;;
  4270                           
  4271                           
  4272                           ;psect for function _initializeDisplay
  4273  0200                     _initializeDisplay:	
  4274                           
  4275                           ;main.c: 98: for (uint8_t i = 0; i < 8; i++) {
  4276                           
  4277                           ;incstack = 0
  4278                           ; Regs used in _initializeDisplay: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4279  0200  0020               	movlb	0	; select bank0
  4280  0201  01E5               	clrf	initializeDisplay@i
  4281  0202  3008               	movlw	8
  4282  0203  0265               	subwf	initializeDisplay@i,w
  4283  0204  1803               	btfsc	3,0
  4284  0205  2A15               	goto	l4775
  4285  0206                     l4769:	
  4286                           
  4287                           ;main.c: 99: pixelbuffer[i] = 0;
  4288  0206  3565               	lslf	initializeDisplay@i,w
  4289  0207  3E3D               	addlw	(low (_pixelbuffer| 0))& (0+255)
  4290  0208  0086               	movwf	6
  4291  0209  0187               	clrf	7
  4292  020A  3000               	movlw	0
  4293  020B  3FC0               	movwi [0]fsr1
  4294  020C  3FC1               	movwi [1]fsr1
  4295  020D  3001               	movlw	1
  4296  020E  00E4               	movwf	??_initializeDisplay
  4297  020F  0864               	movf	??_initializeDisplay,w
  4298  0210  07E5               	addwf	initializeDisplay@i,f
  4299  0211  3008               	movlw	8
  4300  0212  0265               	subwf	initializeDisplay@i,w
  4301  0213  1C03               	skipc
  4302  0214  2A06               	goto	l4769
  4303  0215                     l4775:	
  4304                           
  4305                           ;main.c: 100: }
  4306                           ;main.c: 101: for (uint8_t i = 0; i < 8; i++) {
  4307  0215  01E6               	clrf	initializeDisplay@i_471
  4308  0216  3008               	movlw	8
  4309  0217  0266               	subwf	initializeDisplay@i_471,w
  4310  0218  1803               	btfsc	3,0
  4311  0219  2A27               	goto	l4787
  4312  021A                     l4781:	
  4313                           
  4314                           ;main.c: 102: writebuffer[i] = 0;
  4315  021A  0866               	movf	initializeDisplay@i_471,w
  4316  021B  3EC8               	addlw	(low (_writebuffer| 0))& (0+255)
  4317  021C  0086               	movwf	6
  4318  021D  0187               	clrf	7
  4319  021E  0181               	clrf	1
  4320  021F  3001               	movlw	1
  4321  0220  00E4               	movwf	??_initializeDisplay
  4322  0221  0864               	movf	??_initializeDisplay,w
  4323  0222  07E6               	addwf	initializeDisplay@i_471,f
  4324  0223  3008               	movlw	8
  4325  0224  0266               	subwf	initializeDisplay@i_471,w
  4326  0225  1C03               	skipc
  4327  0226  2A1A               	goto	l4781
  4328  0227                     l4787:	
  4329                           
  4330                           ;main.c: 103: }
  4331                           ;main.c: 105: writebuffer[0] = 0x21;
  4332  0227  3021               	movlw	33
  4333  0228  00E4               	movwf	??_initializeDisplay
  4334  0229  0864               	movf	??_initializeDisplay,w
  4335  022A  0021               	movlb	1	; select bank1
  4336  022B  00C8               	movwf	_writebuffer^(0+128)
  4337                           
  4338                           ;main.c: 106: i2c_writeNBytes(0x70, writebuffer, 1);
  4339  022C  30C8               	movlw	(low (_writebuffer| 0))& (0+255)
  4340  022D  0020               	movlb	0	; select bank0
  4341  022E  00E4               	movwf	??_initializeDisplay
  4342  022F  0864               	movf	??_initializeDisplay,w
  4343  0230  00E0               	movwf	i2c_writeNBytes@data
  4344  0231  3001               	movlw	1
  4345  0232  00E1               	movwf	i2c_writeNBytes@len
  4346  0233  3000               	movlw	0
  4347  0234  00E2               	movwf	i2c_writeNBytes@len+1
  4348  0235  3070               	movlw	112
  4349  0236  3184  2439  3182   	fcall	_i2c_writeNBytes
  4350                           
  4351                           ;main.c: 109: writebuffer[0] = 0x80 | 0x01;
  4352  0239  3081               	movlw	129
  4353  023A  0020               	movlb	0	; select bank0
  4354  023B  00E4               	movwf	??_initializeDisplay
  4355  023C  0864               	movf	??_initializeDisplay,w
  4356  023D  0021               	movlb	1	; select bank1
  4357  023E  00C8               	movwf	_writebuffer^(0+128)
  4358                           
  4359                           ;main.c: 110: i2c_writeNBytes(0x70, writebuffer, 1);
  4360  023F  30C8               	movlw	(low (_writebuffer| 0))& (0+255)
  4361  0240  0020               	movlb	0	; select bank0
  4362  0241  00E4               	movwf	??_initializeDisplay
  4363  0242  0864               	movf	??_initializeDisplay,w
  4364  0243  00E0               	movwf	i2c_writeNBytes@data
  4365  0244  3001               	movlw	1
  4366  0245  00E1               	movwf	i2c_writeNBytes@len
  4367  0246  3000               	movlw	0
  4368  0247  00E2               	movwf	i2c_writeNBytes@len+1
  4369  0248  3070               	movlw	112
  4370  0249  3184  2439         	fcall	_i2c_writeNBytes
  4371  024B  0008               	return
  4372  024C                     __end_of_initializeDisplay:	
  4373                           
  4374                           	psect	text4
  4375  0439                     __ptext4:	
  4376 ;; *************** function _i2c_writeNBytes *****************
  4377 ;; Defined at:
  4378 ;;		line 48 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  4379 ;; Parameters:    Size  Location     Type
  4380 ;;  address         1    wreg     unsigned char 
  4381 ;;  data            1    9[BANK0 ] PTR void 
  4382 ;;		 -> writebuffer(17), 
  4383 ;;  len             2   10[BANK0 ] unsigned int 
  4384 ;; Auto vars:     Size  Location     Type
  4385 ;;  address         1   12[BANK0 ] unsigned char 
  4386 ;; Return value:  Size  Location     Type
  4387 ;;                  1    wreg      void 
  4388 ;; Registers used:
  4389 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4390 ;; Tracked objects:
  4391 ;;		On entry : 0/0
  4392 ;;		On exit  : 0/0
  4393 ;;		Unchanged: 0/0
  4394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4395 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4396 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4397 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4398 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4399 ;;Total ram usage:        4 bytes
  4400 ;; Hardware stack levels used:    1
  4401 ;; Hardware stack levels required when called:   14
  4402 ;; This function calls:
  4403 ;;		_i2c_close
  4404 ;;		_i2c_masterWrite
  4405 ;;		_i2c_open
  4406 ;;		_i2c_setAddressNACKCallback
  4407 ;;		_i2c_setBuffer
  4408 ;; This function is called by:
  4409 ;;		_writeDisplay
  4410 ;;		_initializeDisplay
  4411 ;; This function uses a non-reentrant model
  4412 ;;
  4413                           
  4414                           
  4415                           ;psect for function _i2c_writeNBytes
  4416  0439                     _i2c_writeNBytes:	
  4417                           
  4418                           ;incstack = 0
  4419                           ; Regs used in _i2c_writeNBytes: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4420                           ;i2c_writeNBytes@address stored from wreg
  4421  0439  0020               	movlb	0	; select bank0
  4422  043A  00E3               	movwf	i2c_writeNBytes@address
  4423  043B                     l4645:	
  4424                           ;i2c_simple_master.c: 50: while(!i2c_open(address));
  4425                           
  4426  043B  0020               	movlb	0	; select bank0
  4427  043C  0863               	movf	i2c_writeNBytes@address,w
  4428  043D  3182  2296  3184   	fcall	_i2c_open
  4429  0440  3A00               	xorlw	0
  4430  0441  1903               	skipnz
  4431  0442  2C3B               	goto	l4645
  4432                           
  4433                           ;i2c_simple_master.c: 51: i2c_setBuffer(data,len);
  4434  0443  0020               	movlb	0	; select bank0
  4435  0444  0862               	movf	i2c_writeNBytes@len+1,w
  4436  0445  00D8               	movwf	i2c_setBuffer@bufferSize+1
  4437  0446  0861               	movf	i2c_writeNBytes@len,w
  4438  0447  00D7               	movwf	i2c_setBuffer@bufferSize
  4439  0448  0860               	movf	i2c_writeNBytes@data,w
  4440  0449  3186  2648  3184   	fcall	_i2c_setBuffer
  4441                           
  4442                           ;i2c_simple_master.c: 52: i2c_setAddressNACKCallback(i2c_restartWrite,(0));
  4443  044C  3078               	movlw	low _i2c_restartWrite
  4444  044D  0020               	movlb	0	; select bank0
  4445  044E  00DC               	movwf	i2c_setAddressNACKCallback@cb
  4446  044F  3007               	movlw	high _i2c_restartWrite
  4447  0450  00DD               	movwf	i2c_setAddressNACKCallback@cb+1
  4448  0451  01DE               	clrf	i2c_setAddressNACKCallback@p
  4449  0452  3186  2664  3184   	fcall	_i2c_setAddressNACKCallback
  4450                           
  4451                           ;i2c_simple_master.c: 53: i2c_masterWrite();
  4452  0455  3187  27A0  3184   	fcall	_i2c_masterWrite
  4453  0458                     l4653:	
  4454                           ;i2c_simple_master.c: 54: while(I2C_BUSY == i2c_close());
  4455                           
  4456  0458  3185  25F2  3184   	fcall	_i2c_close
  4457  045B  3A01               	xorlw	1
  4458  045C  1D03               	btfss	3,2
  4459  045D  0008               	return
  4460  045E  2C58               	goto	l4653
  4461  045F                     __end_of_i2c_writeNBytes:	
  4462                           
  4463                           	psect	text5
  4464  0664                     __ptext5:	
  4465 ;; *************** function _i2c_setAddressNACKCallback *****************
  4466 ;; Defined at:
  4467 ;;		line 99 in file "mcc_generated_files/drivers/i2c_master.c"
  4468 ;; Parameters:    Size  Location     Type
  4469 ;;  cb              2    5[BANK0 ] PTR FTN(PTR void ,)enum 
  4470 ;;		 -> i2c_restartWrite(1), 
  4471 ;;  p               1    7[BANK0 ] PTR void 
  4472 ;;		 -> NULL(0), 
  4473 ;; Auto vars:     Size  Location     Type
  4474 ;;		None
  4475 ;; Return value:  Size  Location     Type
  4476 ;;                  1    wreg      void 
  4477 ;; Registers used:
  4478 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4479 ;; Tracked objects:
  4480 ;;		On entry : 0/0
  4481 ;;		On exit  : 0/0
  4482 ;;		Unchanged: 0/0
  4483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4484 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4485 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4486 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4487 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4488 ;;Total ram usage:        4 bytes
  4489 ;; Hardware stack levels used:    1
  4490 ;; Hardware stack levels required when called:    7
  4491 ;; This function calls:
  4492 ;;		_setCallBack
  4493 ;; This function is called by:
  4494 ;;		_i2c_writeNBytes
  4495 ;;		_i2c_write1ByteRegister
  4496 ;;		_i2c_read1ByteRegister
  4497 ;;		_i2c_read2ByteRegister
  4498 ;;		_i2c_write2ByteRegister
  4499 ;;		_i2c_readDataBlock
  4500 ;; This function uses a non-reentrant model
  4501 ;;
  4502                           
  4503                           
  4504                           ;psect for function _i2c_setAddressNACKCallback
  4505  0664                     _i2c_setAddressNACKCallback:	
  4506                           
  4507                           ;i2c_master.c: 101: setCallBack(i2c_addressNACK,cb,p);
  4508                           
  4509                           ;incstack = 0
  4510                           ; Regs used in _i2c_setAddressNACKCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  4511  0664  0020               	movlb	0	; select bank0
  4512  0665  085D               	movf	i2c_setAddressNACKCallback@cb+1,w
  4513  0666  00D8               	movwf	setCallBack@cb+1
  4514  0667  085C               	movf	i2c_setAddressNACKCallback@cb,w
  4515  0668  00D7               	movwf	setCallBack@cb
  4516  0669  085E               	movf	i2c_setAddressNACKCallback@p,w
  4517  066A  00DF               	movwf	??_i2c_setAddressNACKCallback
  4518  066B  085F               	movf	??_i2c_setAddressNACKCallback,w
  4519  066C  00D9               	movwf	setCallBack@p
  4520  066D  3002               	movlw	2
  4521  066E  3184  245F         	fcall	_setCallBack
  4522  0670  0008               	return
  4523  0671                     __end_of_i2c_setAddressNACKCallback:	
  4524                           
  4525                           	psect	text6
  4526  0296                     __ptext6:	
  4527 ;; *************** function _i2c_open *****************
  4528 ;; Defined at:
  4529 ;;		line 116 in file "mcc_generated_files/drivers/i2c_master.c"
  4530 ;; Parameters:    Size  Location     Type
  4531 ;;  address         1    wreg     unsigned char 
  4532 ;; Auto vars:     Size  Location     Type
  4533 ;;  address         1    3[BANK0 ] unsigned char 
  4534 ;;  ret             1    4[BANK0 ] enum E12166
  4535 ;; Return value:  Size  Location     Type
  4536 ;;                  1    wreg      enum E12166
  4537 ;; Registers used:
  4538 ;;		wreg, status,2, status,0, pclath, cstack
  4539 ;; Tracked objects:
  4540 ;;		On entry : 0/0
  4541 ;;		On exit  : 0/0
  4542 ;;		Unchanged: 0/0
  4543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4544 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4545 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4546 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4547 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4548 ;;Total ram usage:        3 bytes
  4549 ;; Hardware stack levels used:    1
  4550 ;; Hardware stack levels required when called:    7
  4551 ;; This function calls:
  4552 ;;		_i2c_driver_open
  4553 ;;		_i2c_driver_setBusCollisionISR
  4554 ;;		_i2c_driver_setI2cISR
  4555 ;;		_mssp_clearIRQ
  4556 ;; This function is called by:
  4557 ;;		_i2c_writeNBytes
  4558 ;;		_i2c_write1ByteRegister
  4559 ;;		_i2c_read1ByteRegister
  4560 ;;		_i2c_read2ByteRegister
  4561 ;;		_i2c_write2ByteRegister
  4562 ;;		_i2c_readDataBlock
  4563 ;;		_i2c_readNBytes
  4564 ;; This function uses a non-reentrant model
  4565 ;;
  4566                           
  4567                           
  4568                           ;psect for function _i2c_open
  4569  0296                     _i2c_open:	
  4570                           
  4571                           ;incstack = 0
  4572                           ; Regs used in _i2c_open: [wreg+status,2+status,0+pclath+cstack]
  4573                           ;i2c_open@address stored from wreg
  4574  0296  0020               	movlb	0	; select bank0
  4575  0297  00DA               	movwf	i2c_open@address
  4576                           
  4577                           ;i2c_master.c: 118: i2c_error_t ret = I2C_BUSY;
  4578  0298  01DB               	clrf	i2c_open@ret
  4579  0299  0ADB               	incf	i2c_open@ret,f
  4580                           
  4581                           ;i2c_master.c: 120: if(!i2c_status.inUse)
  4582  029A  18A0               	btfsc	_i2c_status,1
  4583  029B  2ADC               	goto	l386
  4584                           
  4585                           ;i2c_master.c: 121: {
  4586                           ;i2c_master.c: 122: i2c_status.address = address;
  4587  029C  085A               	movf	i2c_open@address,w
  4588  029D  00D9               	movwf	??_i2c_open
  4589  029E  0859               	movf	??_i2c_open,w
  4590  029F  00A1               	movwf	_i2c_status+1
  4591                           
  4592                           ;i2c_master.c: 123: i2c_status.busy = 0;
  4593  02A0  1020               	bcf	_i2c_status,0
  4594                           
  4595                           ;i2c_master.c: 124: i2c_status.inUse = 1;
  4596  02A1  14A0               	bsf	_i2c_status,1
  4597                           
  4598                           ;i2c_master.c: 125: i2c_status.addressNACKCheck = 0;
  4599  02A2  11A0               	bcf	_i2c_status,3
  4600                           
  4601                           ;i2c_master.c: 126: i2c_status.state = I2C_RESET;
  4602  02A3  300E               	movlw	14
  4603  02A4  00D9               	movwf	??_i2c_open
  4604  02A5  0859               	movf	??_i2c_open,w
  4605  02A6  00A9               	movwf	_i2c_status+9
  4606                           
  4607                           ;i2c_master.c: 127: i2c_status.time_out_value = 500;
  4608  02A7  30F4               	movlw	244
  4609  02A8  00A7               	movwf	_i2c_status+7
  4610  02A9  3001               	movlw	1
  4611  02AA  00A8               	movwf	_i2c_status+8
  4612                           
  4613                           ;i2c_master.c: 128: i2c_status.bufferFree = 1;
  4614  02AB  1520               	bsf	_i2c_status,2
  4615                           
  4616                           ;i2c_master.c: 131: i2c_status.callbackTable[i2c_dataComplete]=returnStop;
  4617  02AC  3084               	movlw	low _returnStop
  4618  02AD  00AB               	movwf	low ((_i2c_status| 0+11))
  4619  02AE  3007               	movlw	high _returnStop
  4620  02AF  00AC               	movwf	(low ((_i2c_status| 0+11))+1)
  4621                           
  4622                           ;i2c_master.c: 132: i2c_status.callbackPayload[i2c_dataComplete] = (0);
  4623  02B0  01B7               	clrf	low ((_i2c_status| 0+23))
  4624                           
  4625                           ;i2c_master.c: 133: i2c_status.callbackTable[i2c_writeCollision]=returnStop;
  4626  02B1  3084               	movlw	low _returnStop
  4627  02B2  00AD               	movwf	low ((_i2c_status| 0+13))
  4628  02B3  3007               	movlw	high _returnStop
  4629  02B4  00AE               	movwf	(low ((_i2c_status| 0+13))+1)
  4630                           
  4631                           ;i2c_master.c: 134: i2c_status.callbackPayload[i2c_writeCollision] = (0);
  4632  02B5  01B8               	clrf	low ((_i2c_status| 0+24))
  4633                           
  4634                           ;i2c_master.c: 135: i2c_status.callbackTable[i2c_addressNACK]=returnStop;
  4635  02B6  3084               	movlw	low _returnStop
  4636  02B7  00AF               	movwf	low ((_i2c_status| 0+15))
  4637  02B8  3007               	movlw	high _returnStop
  4638  02B9  00B0               	movwf	(low ((_i2c_status| 0+15))+1)
  4639                           
  4640                           ;i2c_master.c: 136: i2c_status.callbackPayload[i2c_addressNACK] = (0);
  4641  02BA  01B9               	clrf	low ((_i2c_status| 0+25))
  4642                           
  4643                           ;i2c_master.c: 137: i2c_status.callbackTable[i2c_dataNACK]=returnStop;
  4644  02BB  3084               	movlw	low _returnStop
  4645  02BC  00B1               	movwf	low ((_i2c_status| 0+17))
  4646  02BD  3007               	movlw	high _returnStop
  4647  02BE  00B2               	movwf	(low ((_i2c_status| 0+17))+1)
  4648                           
  4649                           ;i2c_master.c: 138: i2c_status.callbackPayload[i2c_dataNACK] = (0);
  4650  02BF  01BA               	clrf	low ((_i2c_status| 0+26))
  4651                           
  4652                           ;i2c_master.c: 139: i2c_status.callbackTable[i2c_timeOut]=returnReset;
  4653  02C0  307E               	movlw	low _returnReset
  4654  02C1  00B3               	movwf	low ((_i2c_status| 0+19))
  4655  02C2  3007               	movlw	high _returnReset
  4656  02C3  00B4               	movwf	(low ((_i2c_status| 0+19))+1)
  4657                           
  4658                           ;i2c_master.c: 140: i2c_status.callbackPayload[i2c_timeOut] = (0);
  4659  02C4  01BB               	clrf	low ((_i2c_status| 0+27))
  4660                           
  4661                           ;i2c_master.c: 142: i2c_driver_open();
  4662  02C5  3186  26DB  3182   	fcall	_i2c_driver_open
  4663                           
  4664                           ;i2c_master.c: 143: mssp_clearIRQ();
  4665  02C8  3187  27E5  3182   	fcall	_mssp_clearIRQ
  4666                           
  4667                           ;i2c_master.c: 145: i2c_driver_setBusCollisionISR(i2c_busCollisionISR);
  4668  02CB  30FA               	movlw	low _i2c_busCollisionISR
  4669  02CC  0020               	movlb	0	; select bank0
  4670  02CD  00D7               	movwf	i2c_driver_setBusCollisionISR@f
  4671  02CE  3007               	movlw	high _i2c_busCollisionISR
  4672  02CF  00D8               	movwf	i2c_driver_setBusCollisionISR@f+1
  4673  02D0  3187  276C  3182   	fcall	_i2c_driver_setBusCollisionISR
  4674                           
  4675                           ;i2c_master.c: 146: i2c_driver_setI2cISR(i2c_ISR);
  4676  02D3  30A8               	movlw	low _i2c_ISR
  4677  02D4  0020               	movlb	0	; select bank0
  4678  02D5  00D7               	movwf	i2c_driver_setI2cISR@f
  4679  02D6  3004               	movlw	high _i2c_ISR
  4680  02D7  00D8               	movwf	i2c_driver_setI2cISR@f+1
  4681  02D8  3187  2766         	fcall	_i2c_driver_setI2cISR
  4682                           
  4683                           ;i2c_master.c: 151: ret = I2C_NOERR;
  4684  02DA  0020               	movlb	0	; select bank0
  4685  02DB  01DB               	clrf	i2c_open@ret
  4686  02DC                     l386:	
  4687                           
  4688                           ;i2c_master.c: 152: }
  4689                           ;i2c_master.c: 153: return ret;
  4690  02DC  085B               	movf	i2c_open@ret,w
  4691  02DD  0008               	return
  4692  02DE                     __end_of_i2c_open:	
  4693                           
  4694                           	psect	text7
  4695  0766                     __ptext7:	
  4696 ;; *************** function _i2c_driver_setI2cISR *****************
  4697 ;; Defined at:
  4698 ;;		line 262 in file "mcc_generated_files/i2c_driver.c"
  4699 ;; Parameters:    Size  Location     Type
  4700 ;;  f               2    0[BANK0 ] PTR void 
  4701 ;;		 -> i2c_ISR(1), 
  4702 ;; Auto vars:     Size  Location     Type
  4703 ;;		None
  4704 ;; Return value:  Size  Location     Type
  4705 ;;                  1    wreg      void 
  4706 ;; Registers used:
  4707 ;;		wreg
  4708 ;; Tracked objects:
  4709 ;;		On entry : 0/0
  4710 ;;		On exit  : 0/0
  4711 ;;		Unchanged: 0/0
  4712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4713 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4714 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4715 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4716 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4717 ;;Total ram usage:        2 bytes
  4718 ;; Hardware stack levels used:    1
  4719 ;; Hardware stack levels required when called:    6
  4720 ;; This function calls:
  4721 ;;		Nothing
  4722 ;; This function is called by:
  4723 ;;		_i2c_open
  4724 ;; This function uses a non-reentrant model
  4725 ;;
  4726                           
  4727                           
  4728                           ;psect for function _i2c_driver_setI2cISR
  4729  0766                     _i2c_driver_setI2cISR:	
  4730                           
  4731                           ;i2c_driver.c: 263: i2c_driver_i2cISR = f;
  4732                           
  4733                           ;incstack = 0
  4734                           ; Regs used in _i2c_driver_setI2cISR: [wreg]
  4735  0766  0020               	movlb	0	; select bank0
  4736  0767  0858               	movf	i2c_driver_setI2cISR@f+1,w
  4737  0768  00D4               	movwf	_i2c_driver_i2cISR+1
  4738  0769  0857               	movf	i2c_driver_setI2cISR@f,w
  4739  076A  00D3               	movwf	_i2c_driver_i2cISR
  4740  076B  0008               	return
  4741  076C                     __end_of_i2c_driver_setI2cISR:	
  4742                           
  4743                           	psect	text8
  4744  076C                     __ptext8:	
  4745 ;; *************** function _i2c_driver_setBusCollisionISR *****************
  4746 ;; Defined at:
  4747 ;;		line 258 in file "mcc_generated_files/i2c_driver.c"
  4748 ;; Parameters:    Size  Location     Type
  4749 ;;  f               2    0[BANK0 ] PTR void 
  4750 ;;		 -> i2c_busCollisionISR(1), 
  4751 ;; Auto vars:     Size  Location     Type
  4752 ;;		None
  4753 ;; Return value:  Size  Location     Type
  4754 ;;                  1    wreg      void 
  4755 ;; Registers used:
  4756 ;;		wreg
  4757 ;; Tracked objects:
  4758 ;;		On entry : 0/0
  4759 ;;		On exit  : 0/0
  4760 ;;		Unchanged: 0/0
  4761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4762 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4763 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4764 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4765 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4766 ;;Total ram usage:        2 bytes
  4767 ;; Hardware stack levels used:    1
  4768 ;; Hardware stack levels required when called:    6
  4769 ;; This function calls:
  4770 ;;		Nothing
  4771 ;; This function is called by:
  4772 ;;		_i2c_open
  4773 ;; This function uses a non-reentrant model
  4774 ;;
  4775                           
  4776                           
  4777                           ;psect for function _i2c_driver_setBusCollisionISR
  4778  076C                     _i2c_driver_setBusCollisionISR:	
  4779                           
  4780                           ;i2c_driver.c: 259: i2c_driver_busCollisionISR = f;
  4781                           
  4782                           ;incstack = 0
  4783                           ; Regs used in _i2c_driver_setBusCollisionISR: [wreg]
  4784  076C  0020               	movlb	0	; select bank0
  4785  076D  0858               	movf	i2c_driver_setBusCollisionISR@f+1,w
  4786  076E  00FB               	movwf	_i2c_driver_busCollisionISR+1
  4787  076F  0857               	movf	i2c_driver_setBusCollisionISR@f,w
  4788  0770  00FA               	movwf	_i2c_driver_busCollisionISR
  4789  0771  0008               	return
  4790  0772                     __end_of_i2c_driver_setBusCollisionISR:	
  4791                           
  4792                           	psect	text9
  4793  06DB                     __ptext9:	
  4794 ;; *************** function _i2c_driver_open *****************
  4795 ;; Defined at:
  4796 ;;		line 83 in file "mcc_generated_files/i2c_driver.c"
  4797 ;; Parameters:    Size  Location     Type
  4798 ;;		None
  4799 ;; Auto vars:     Size  Location     Type
  4800 ;;		None
  4801 ;; Return value:  Size  Location     Type
  4802 ;;		None               void
  4803 ;; Registers used:
  4804 ;;		wreg, status,2
  4805 ;; Tracked objects:
  4806 ;;		On entry : 0/0
  4807 ;;		On exit  : 0/0
  4808 ;;		Unchanged: 0/0
  4809 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4810 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4811 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4812 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4813 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4814 ;;Total ram usage:        0 bytes
  4815 ;; Hardware stack levels used:    1
  4816 ;; Hardware stack levels required when called:    6
  4817 ;; This function calls:
  4818 ;;		Nothing
  4819 ;; This function is called by:
  4820 ;;		_i2c_open
  4821 ;; This function uses a non-reentrant model
  4822 ;;
  4823                           
  4824                           
  4825                           ;psect for function _i2c_driver_open
  4826  06DB                     _i2c_driver_open:	
  4827                           
  4828                           ;i2c_driver.c: 85: if(!SSP1CON1bits.SSPEN)
  4829                           
  4830                           ;incstack = 0
  4831                           ; Regs used in _i2c_driver_open: [wreg+status,2]
  4832  06DB  0024               	movlb	4	; select bank4
  4833  06DC  1A95               	btfsc	21,5	;volatile
  4834  06DD  0008               	return
  4835                           
  4836                           ;i2c_driver.c: 86: {
  4837                           ;i2c_driver.c: 87: SSP1STAT = 0x00;
  4838  06DE  0194               	clrf	20	;volatile
  4839                           
  4840                           ;i2c_driver.c: 88: SSP1CON1 = 0x28;
  4841  06DF  3028               	movlw	40
  4842  06E0  0095               	movwf	21	;volatile
  4843                           
  4844                           ;i2c_driver.c: 89: SSP1CON2 = 0x00;
  4845  06E1  0196               	clrf	22	;volatile
  4846                           
  4847                           ;i2c_driver.c: 90: SSP1ADD = 0x3;
  4848  06E2  3003               	movlw	3
  4849  06E3  0092               	movwf	18	;volatile
  4850                           
  4851                           ;i2c_driver.c: 93: else
  4852                           ;i2c_driver.c: 94: return 0;
  4853                           ;	Return value of _i2c_driver_open is never used
  4854                           
  4855                           ;i2c_driver.c: 92: }
  4856                           
  4857                           ;i2c_driver.c: 91: return 1;
  4858                           ;	Return value of _i2c_driver_open is never used
  4859  06E4  0008               	return
  4860  06E5                     __end_of_i2c_driver_open:	
  4861                           
  4862                           	psect	text10
  4863  07A0                     __ptext10:	
  4864 ;; *************** function _i2c_masterWrite *****************
  4865 ;; Defined at:
  4866 ;;		line 222 in file "mcc_generated_files/drivers/i2c_master.c"
  4867 ;; Parameters:    Size  Location     Type
  4868 ;;		None
  4869 ;; Auto vars:     Size  Location     Type
  4870 ;;		None
  4871 ;; Return value:  Size  Location     Type
  4872 ;;                  1    wreg      enum E12166
  4873 ;; Registers used:
  4874 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4875 ;; Tracked objects:
  4876 ;;		On entry : 0/0
  4877 ;;		On exit  : 0/0
  4878 ;;		Unchanged: 0/0
  4879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4880 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4881 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4882 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4883 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4884 ;;Total ram usage:        0 bytes
  4885 ;; Hardware stack levels used:    1
  4886 ;; Hardware stack levels required when called:   13
  4887 ;; This function calls:
  4888 ;;		_i2c_masterOperation
  4889 ;; This function is called by:
  4890 ;;		_i2c_writeNBytes
  4891 ;;		_i2c_write1ByteRegister
  4892 ;;		_i2c_read1ByteRegister
  4893 ;;		_i2c_read2ByteRegister
  4894 ;;		_i2c_write2ByteRegister
  4895 ;;		_i2c_readDataBlock
  4896 ;; This function uses a non-reentrant model
  4897 ;;
  4898                           
  4899                           
  4900                           ;psect for function _i2c_masterWrite
  4901  07A0                     _i2c_masterWrite:	
  4902                           
  4903                           ;i2c_master.c: 224: return i2c_masterOperation(0);
  4904                           ;	Return value of _i2c_masterWrite is never used
  4905                           
  4906                           ;incstack = 0
  4907                           ; Regs used in _i2c_masterWrite: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4908  07A0  3000               	movlw	0
  4909  07A1  3185  250E         	fcall	_i2c_masterOperation
  4910  07A3  0008               	return
  4911  07A4                     __end_of_i2c_masterWrite:	
  4912                           
  4913                           	psect	text11
  4914  050E                     __ptext11:	
  4915 ;; *************** function _i2c_masterOperation *****************
  4916 ;; Defined at:
  4917 ;;		line 193 in file "mcc_generated_files/drivers/i2c_master.c"
  4918 ;; Parameters:    Size  Location     Type
  4919 ;;  read            1    wreg     unsigned char 
  4920 ;; Auto vars:     Size  Location     Type
  4921 ;;  read            1    6[BANK0 ] unsigned char 
  4922 ;;  ret             1    7[BANK0 ] enum E12166
  4923 ;; Return value:  Size  Location     Type
  4924 ;;                  1    wreg      enum E12166
  4925 ;; Registers used:
  4926 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4927 ;; Tracked objects:
  4928 ;;		On entry : 0/0
  4929 ;;		On exit  : 0/0
  4930 ;;		Unchanged: 0/0
  4931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4932 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4933 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4934 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4935 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4936 ;;Total ram usage:        3 bytes
  4937 ;; Hardware stack levels used:    1
  4938 ;; Hardware stack levels required when called:   12
  4939 ;; This function calls:
  4940 ;;		_i2c_driver_start
  4941 ;;		_i2c_poller
  4942 ;;		_mssp_IRQisEnabled
  4943 ;; This function is called by:
  4944 ;;		_i2c_masterWrite
  4945 ;;		_i2c_masterRead
  4946 ;; This function uses a non-reentrant model
  4947 ;;
  4948                           
  4949                           
  4950                           ;psect for function _i2c_masterOperation
  4951  050E                     _i2c_masterOperation:	
  4952                           
  4953                           ;incstack = 0
  4954                           ; Regs used in _i2c_masterOperation: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4955                           ;i2c_masterOperation@read stored from wreg
  4956  050E  0020               	movlb	0	; select bank0
  4957  050F  00DD               	movwf	i2c_masterOperation@read
  4958                           
  4959                           ;i2c_master.c: 195: i2c_error_t ret = I2C_BUSY;
  4960  0510  01DE               	clrf	i2c_masterOperation@ret
  4961  0511  0ADE               	incf	i2c_masterOperation@ret,f
  4962                           
  4963                           ;i2c_master.c: 196: if(!i2c_status.busy)
  4964  0512  1820               	btfsc	_i2c_status,0
  4965  0513  2D2A               	goto	l4599
  4966                           
  4967                           ;i2c_master.c: 197: {
  4968                           ;i2c_master.c: 198: i2c_status.busy = 1;
  4969  0514  1420               	bsf	_i2c_status,0
  4970                           
  4971                           ;i2c_master.c: 199: ret = I2C_NOERR;
  4972  0515  01DE               	clrf	i2c_masterOperation@ret
  4973                           
  4974                           ;i2c_master.c: 201: if(read)
  4975  0516  085D               	movf	i2c_masterOperation@read,w
  4976  0517  1903               	btfsc	3,2
  4977  0518  2D1C               	goto	l4593
  4978                           
  4979                           ;i2c_master.c: 202: {
  4980                           ;i2c_master.c: 203: i2c_status.state = I2C_SEND_ADR_READ;
  4981  0519  01A9               	clrf	_i2c_status+9
  4982  051A  0AA9               	incf	_i2c_status+9,f
  4983                           
  4984                           ;i2c_master.c: 204: }
  4985  051B  2D20               	goto	l4595
  4986  051C                     l4593:	
  4987                           
  4988                           ;i2c_master.c: 205: else
  4989                           ;i2c_master.c: 206: {
  4990                           ;i2c_master.c: 207: i2c_status.state = I2C_SEND_ADR_WRITE;
  4991  051C  3002               	movlw	2
  4992  051D  00DC               	movwf	??_i2c_masterOperation
  4993  051E  085C               	movf	??_i2c_masterOperation,w
  4994  051F  00A9               	movwf	_i2c_status+9
  4995  0520                     l4595:	
  4996                           
  4997                           ;i2c_master.c: 208: }
  4998                           ;i2c_master.c: 209: i2c_driver_start();
  4999  0520  3187  27DF  3185   	fcall	_i2c_driver_start
  5000                           
  5001                           ;i2c_master.c: 211: if(! mssp_IRQisEnabled())
  5002  0523  3186  26E5  3185   	fcall	_mssp_IRQisEnabled
  5003  0526  1803               	btfsc	3,0
  5004  0527  2D2A               	goto	l4599
  5005                           
  5006                           ;i2c_master.c: 212: i2c_poller();
  5007  0528  3186  26AF         	fcall	_i2c_poller
  5008  052A                     l4599:	
  5009                           
  5010                           ;i2c_master.c: 213: }
  5011                           ;i2c_master.c: 214: return ret;
  5012  052A  0020               	movlb	0	; select bank0
  5013  052B  085E               	movf	i2c_masterOperation@ret,w
  5014  052C  0008               	return
  5015  052D                     __end_of_i2c_masterOperation:	
  5016                           
  5017                           	psect	text12
  5018  06E5                     __ptext12:	
  5019 ;; *************** function _mssp_IRQisEnabled *****************
  5020 ;; Defined at:
  5021 ;;		line 43 in file "mcc_generated_files/i2c_driver.c"
  5022 ;; Parameters:    Size  Location     Type
  5023 ;;		None
  5024 ;; Auto vars:     Size  Location     Type
  5025 ;;		None
  5026 ;; Return value:  Size  Location     Type
  5027 ;;		None               void
  5028 ;; Registers used:
  5029 ;;		wreg, status,2, status,0
  5030 ;; Tracked objects:
  5031 ;;		On entry : 0/0
  5032 ;;		On exit  : 0/0
  5033 ;;		Unchanged: 0/0
  5034 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5035 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5036 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5037 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5038 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5039 ;;Total ram usage:        2 bytes
  5040 ;; Hardware stack levels used:    1
  5041 ;; Hardware stack levels required when called:    6
  5042 ;; This function calls:
  5043 ;;		Nothing
  5044 ;; This function is called by:
  5045 ;;		_i2c_masterOperation
  5046 ;; This function uses a non-reentrant model
  5047 ;;
  5048                           
  5049                           
  5050                           ;psect for function _mssp_IRQisEnabled
  5051  06E5                     _mssp_IRQisEnabled:	
  5052                           
  5053                           ;i2c_driver.c: 45: return PIE1bits.SSP1IE;
  5054                           
  5055                           ;incstack = 0
  5056                           ; Regs used in _mssp_IRQisEnabled: [wreg+status,2+status,0]
  5057  06E5  0021               	movlb	1	; select bank1
  5058  06E6  0C10               	rrf	16,w	;volatile
  5059  06E7  0020               	movlb	0	; select bank0
  5060  06E8  00D7               	movwf	??_mssp_IRQisEnabled
  5061  06E9  0CD7               	rrf	??_mssp_IRQisEnabled,f
  5062  06EA  0C57               	rrf	??_mssp_IRQisEnabled,w
  5063  06EB  3901               	andlw	1
  5064  06EC  00D8               	movwf	??_mssp_IRQisEnabled+1
  5065  06ED  0C58               	rrf	??_mssp_IRQisEnabled+1,w
  5066  06EE  0008               	return
  5067  06EF                     __end_of_mssp_IRQisEnabled:	
  5068                           
  5069                           	psect	text13
  5070  06AF                     __ptext13:	
  5071 ;; *************** function _i2c_poller *****************
  5072 ;; Defined at:
  5073 ;;		line 230 in file "mcc_generated_files/drivers/i2c_master.c"
  5074 ;; Parameters:    Size  Location     Type
  5075 ;;		None
  5076 ;; Auto vars:     Size  Location     Type
  5077 ;;		None
  5078 ;; Return value:  Size  Location     Type
  5079 ;;                  1    wreg      void 
  5080 ;; Registers used:
  5081 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5082 ;; Tracked objects:
  5083 ;;		On entry : 0/0
  5084 ;;		On exit  : 0/0
  5085 ;;		Unchanged: 0/0
  5086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5087 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5088 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5089 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5090 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5091 ;;Total ram usage:        0 bytes
  5092 ;; Hardware stack levels used:    1
  5093 ;; Hardware stack levels required when called:   11
  5094 ;; This function calls:
  5095 ;;		_i2c_ISR
  5096 ;;		_mssp_waitForEvent
  5097 ;; This function is called by:
  5098 ;;		_i2c_masterOperation
  5099 ;; This function uses a non-reentrant model
  5100 ;;
  5101                           
  5102                           
  5103                           ;psect for function _i2c_poller
  5104  06AF                     _i2c_poller:	
  5105  06AF                     l4581:	
  5106                           ;i2c_master.c: 232: while(i2c_status.busy)
  5107                           
  5108                           ;incstack = 0
  5109                           ; Regs used in _i2c_poller: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5110                           
  5111  06AF  0020               	movlb	0	; select bank0
  5112  06B0  1C20               	btfss	_i2c_status,0
  5113  06B1  0008               	return
  5114                           
  5115                           ;i2c_master.c: 233: {
  5116                           ;i2c_master.c: 234: mssp_waitForEvent((0));
  5117  06B2  3000               	movlw	0
  5118  06B3  3186  26BA  3186   	fcall	_mssp_waitForEvent
  5119                           
  5120                           ;i2c_master.c: 235: i2c_ISR();
  5121  06B6  3184  24A8  3186   	fcall	_i2c_ISR
  5122  06B9  2EAF               	goto	l4581
  5123  06BA                     __end_of_i2c_poller:	
  5124                           
  5125                           	psect	text14
  5126  06BA                     __ptext14:	
  5127 ;; *************** function _mssp_waitForEvent *****************
  5128 ;; Defined at:
  5129 ;;		line 68 in file "mcc_generated_files/i2c_driver.c"
  5130 ;; Parameters:    Size  Location     Type
  5131 ;;  timeout         1    wreg     PTR unsigned int 
  5132 ;;		 -> NULL(0), 
  5133 ;; Auto vars:     Size  Location     Type
  5134 ;;  timeout         1    0[BANK0 ] PTR unsigned int 
  5135 ;;		 -> NULL(0), 
  5136 ;; Return value:  Size  Location     Type
  5137 ;;                  1    wreg      void 
  5138 ;; Registers used:
  5139 ;;		wreg
  5140 ;; Tracked objects:
  5141 ;;		On entry : 0/0
  5142 ;;		On exit  : 0/0
  5143 ;;		Unchanged: 0/0
  5144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5145 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5146 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5147 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5148 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5149 ;;Total ram usage:        1 bytes
  5150 ;; Hardware stack levels used:    1
  5151 ;; Hardware stack levels required when called:    6
  5152 ;; This function calls:
  5153 ;;		Nothing
  5154 ;; This function is called by:
  5155 ;;		_i2c_poller
  5156 ;; This function uses a non-reentrant model
  5157 ;;
  5158                           
  5159                           
  5160                           ;psect for function _mssp_waitForEvent
  5161  06BA                     _mssp_waitForEvent:	
  5162                           
  5163                           ;i2c_driver.c: 73: if(PIR1bits.SSP1IF == 0)
  5164                           
  5165                           ;incstack = 0
  5166                           ; Regs used in _mssp_waitForEvent: [wreg]
  5167  06BA  0020               	movlb	0	; select bank0
  5168  06BB  1990               	btfsc	16,3	;volatile
  5169  06BC  0008               	return
  5170  06BD                     l55:	
  5171                           ;i2c_driver.c: 74: {
  5172                           ;i2c_driver.c: 75: while(1)
  5173                           
  5174                           
  5175                           ;i2c_driver.c: 76: {
  5176                           ;i2c_driver.c: 77: if(PIR1bits.SSP1IF) break;
  5177  06BD  0020               	movlb	0	; select bank0
  5178  06BE  1990               	btfsc	16,3	;volatile
  5179  06BF  0008               	return
  5180                           
  5181                           ;i2c_driver.c: 78: _delay((unsigned long)((100)*(32000000/4000000.0)));
  5182  06C0  30A0               	movlw	160
  5183  06C1                     u3387:	
  5184  06C1  3200               	nop2
  5185  06C2  0B89               	decfsz	9,f
  5186  06C3  2EC1               	goto	u3387
  5187  06C4  2EBD               	goto	l55
  5188  06C5                     __end_of_mssp_waitForEvent:	
  5189                           
  5190                           	psect	text15
  5191  04A8                     __ptext15:	
  5192 ;; *************** function _i2c_ISR *****************
  5193 ;; Defined at:
  5194 ;;		line 419 in file "mcc_generated_files/drivers/i2c_master.c"
  5195 ;; Parameters:    Size  Location     Type
  5196 ;;		None
  5197 ;; Auto vars:     Size  Location     Type
  5198 ;;		None
  5199 ;; Return value:  Size  Location     Type
  5200 ;;                  1    wreg      void 
  5201 ;; Registers used:
  5202 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5203 ;; Tracked objects:
  5204 ;;		On entry : 0/0
  5205 ;;		On exit  : 0/0
  5206 ;;		Unchanged: 0/0
  5207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5208 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5209 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5210 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5211 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5212 ;;Total ram usage:        1 bytes
  5213 ;; Hardware stack levels used:    1
  5214 ;; Hardware stack levels required when called:   10
  5215 ;; This function calls:
  5216 ;;		_do_I2C_DO_ACK
  5217 ;;		_do_I2C_DO_ADDRESS_NACK
  5218 ;;		_do_I2C_DO_NACK_RESTART
  5219 ;;		_do_I2C_DO_NACK_STOP
  5220 ;;		_do_I2C_IDLE
  5221 ;;		_do_I2C_RCEN
  5222 ;;		_do_I2C_RESET
  5223 ;;		_do_I2C_RX
  5224 ;;		_do_I2C_SEND_ADR_READ
  5225 ;;		_do_I2C_SEND_ADR_WRITE
  5226 ;;		_do_I2C_SEND_RESTART
  5227 ;;		_do_I2C_SEND_RESTART_READ
  5228 ;;		_do_I2C_SEND_RESTART_WRITE
  5229 ;;		_do_I2C_SEND_STOP
  5230 ;;		_do_I2C_TX
  5231 ;;		_do_I2C_TX_EMPTY
  5232 ;;		_i2c_driver_isNACK
  5233 ;;		_mssp_clearIRQ
  5234 ;; This function is called by:
  5235 ;;		_i2c_open
  5236 ;;		_i2c_poller
  5237 ;;		_INTERRUPT_InterruptManager
  5238 ;; This function uses a non-reentrant model
  5239 ;;
  5240                           
  5241                           
  5242                           ;psect for function _i2c_ISR
  5243  04A8                     _i2c_ISR:	
  5244                           
  5245                           ;Skip over the trampoline to the duplicate function for level 1
  5246  04A8  1C7E               	btfss	126,0
  5247  04A9  2CAC               	goto	l4565
  5248  04AA  3185  2D2D         	ljmp	i1l4797
  5249  04AC                     _i2c_ISR$intlevel0:	
  5250  04AC                     l4565:	
  5251                           ;incstack = 0
  5252                           ; Regs used in _i2c_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5253                           
  5254                           
  5255                           ;i2c_master.c: 421: mssp_clearIRQ();
  5256  04AC  3187  27E5  3184   	fcall	_mssp_clearIRQ
  5257                           
  5258                           ;i2c_master.c: 427: if(i2c_status.addressNACKCheck && i2c_driver_isNACK())
  5259  04AF  0020               	movlb	0	; select bank0
  5260  04B0  1DA0               	btfss	_i2c_status,3
  5261  04B1  2CBC               	goto	l4573
  5262  04B2  3186  2671  3184   	fcall	_i2c_driver_isNACK
  5263  04B5  1C03               	btfss	3,0
  5264  04B6  2CBC               	goto	l4573
  5265                           
  5266                           ;i2c_master.c: 428: {
  5267                           ;i2c_master.c: 429: i2c_status.state = I2C_ADDRESS_NACK;
  5268  04B7  300F               	movlw	15
  5269  04B8  0020               	movlb	0	; select bank0
  5270  04B9  00DB               	movwf	??_i2c_ISR
  5271  04BA  085B               	movf	??_i2c_ISR,w
  5272  04BB  00A9               	movwf	_i2c_status+9
  5273  04BC                     l4573:	
  5274                           
  5275                           ;i2c_master.c: 430: }
  5276                           ;i2c_master.c: 432: i2c_status.state = fsmStateTable[i2c_status.state]();
  5277  04BC  0020               	movlb	0	; select bank0
  5278  04BD  3529               	lslf	_i2c_status+9,w
  5279  04BE  3EA0               	addlw	(low (_fsmStateTable| 0))& (0+255)
  5280  04BF  0086               	movwf	6
  5281  04C0  0187               	clrf	7
  5282  04C1  3F41               	moviw [1]fsr1
  5283  04C2  008A               	movwf	10
  5284  04C3  3F40               	moviw [0]fsr1
  5285  04C4  000A               	callw
  5286  04C5  3184               	pagesel	$
  5287  04C6  0020               	movlb	0	; select bank0
  5288  04C7  00DB               	movwf	??_i2c_ISR
  5289  04C8  085B               	movf	??_i2c_ISR,w
  5290  04C9  00A9               	movwf	_i2c_status+9
  5291  04CA  0008               	return
  5292  04CB                     __end_of_i2c_ISR:	
  5293                           
  5294                           	psect	text16
  5295  02DE                     __ptext16:	
  5296 ;; *************** function _do_I2C_RX *****************
  5297 ;; Defined at:
  5298 ;;		line 357 in file "mcc_generated_files/drivers/i2c_master.c"
  5299 ;; Parameters:    Size  Location     Type
  5300 ;;		None
  5301 ;; Auto vars:     Size  Location     Type
  5302 ;;		None
  5303 ;; Return value:  Size  Location     Type
  5304 ;;                  1    wreg      enum E12337
  5305 ;; Registers used:
  5306 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5307 ;; Tracked objects:
  5308 ;;		On entry : 0/0
  5309 ;;		On exit  : 0/0
  5310 ;;		Unchanged: 0/0
  5311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5312 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5313 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5314 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5315 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5316 ;;Total ram usage:        1 bytes
  5317 ;; Hardware stack levels used:    1
  5318 ;; Hardware stack levels required when called:    9
  5319 ;; This function calls:
  5320 ;;		Absolute function
  5321 ;;		_do_I2C_DO_NACK_RESTART
  5322 ;;		_do_I2C_DO_NACK_STOP
  5323 ;;		_i2c_driver_getRXData
  5324 ;;		_i2c_driver_sendACK
  5325 ;;		_i2c_restartWrite
  5326 ;;		_rd1RegCompleteHandler
  5327 ;;		_rd2RegCompleteHandler
  5328 ;;		_rdBlkRegCompleteHandler
  5329 ;;		_returnReset
  5330 ;;		_returnStop
  5331 ;;		_wr1RegCompleteHandler
  5332 ;;		_wr2RegCompleteHandler
  5333 ;; This function is called by:
  5334 ;;		_i2c_ISR
  5335 ;;		i1_i2c_ISR
  5336 ;; This function uses a non-reentrant model
  5337 ;;
  5338                           
  5339                           
  5340                           ;psect for function _do_I2C_RX
  5341  02DE                     _do_I2C_RX:	
  5342                           
  5343                           ;Skip over the trampoline to the duplicate function for level 1
  5344  02DE  1C7E               	btfss	126,0
  5345  02DF  2AE2               	goto	l4519
  5346  02E0  3183  2B20         	ljmp	i1l4701
  5347  02E2                     _do_I2C_RX$intlevel0:	
  5348  02E2                     l4519:	
  5349                           ;incstack = 0
  5350                           ; Regs used in _do_I2C_RX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5351                           
  5352                           
  5353                           ;i2c_master.c: 359: *i2c_status.data_ptr++ = i2c_driver_getRXData();
  5354  02E2  3187  27D3  3182   	fcall	_i2c_driver_getRXData
  5355  02E5  0020               	movlb	0	; select bank0
  5356  02E6  00D7               	movwf	??_do_I2C_RX
  5357  02E7  0822               	movf	low ((_i2c_status| 0+2)),w
  5358  02E8  0086               	movwf	6
  5359  02E9  0187               	clrf	7
  5360  02EA  0857               	movf	??_do_I2C_RX,w
  5361  02EB  0081               	movwf	1
  5362  02EC  3001               	movlw	1
  5363  02ED  00D7               	movwf	??_do_I2C_RX
  5364  02EE  0857               	movf	??_do_I2C_RX,w
  5365  02EF  07A2               	addwf	low ((_i2c_status| 0+2)),f
  5366                           
  5367                           ;i2c_master.c: 360: if(--i2c_status.data_length)
  5368  02F0  3001               	movlw	1
  5369  02F1  02A3               	subwf	_i2c_status+3,f
  5370  02F2  3000               	movlw	0
  5371  02F3  3BA4               	subwfb	_i2c_status+4,f
  5372  02F4  0823               	movf	_i2c_status+3,w
  5373  02F5  0424               	iorwf	_i2c_status+4,w
  5374  02F6  1903               	btfsc	3,2
  5375  02F7  2AFC               	goto	l483
  5376                           
  5377                           ;i2c_master.c: 361: {
  5378                           ;i2c_master.c: 362: i2c_driver_sendACK();
  5379  02F8  3187  27A8         	fcall	_i2c_driver_sendACK
  5380                           
  5381                           ;i2c_master.c: 363: return I2C_RCEN;
  5382  02FA  3005               	movlw	5
  5383                           
  5384                           ;i2c_master.c: 364: }
  5385  02FB  0008               	return
  5386  02FC                     l483:	
  5387                           
  5388                           ;i2c_master.c: 365: else
  5389                           ;i2c_master.c: 366: {
  5390                           ;i2c_master.c: 367: i2c_status.bufferFree = 1;
  5391  02FC  1520               	bsf	_i2c_status,2
  5392                           
  5393                           ;i2c_master.c: 368: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
  5394  02FD  2B04               	goto	l4543
  5395  02FE                     l4533:	
  5396                           ;i2c_master.c: 369: {
  5397                           ;i2c_master.c: 370: case i2c_restart_write:
  5398                           
  5399                           
  5400                           ;i2c_master.c: 371: case i2c_restart_read:
  5401                           ;i2c_master.c: 372: return do_I2C_DO_NACK_RESTART();
  5402  02FE  3187  270C         	fcall	_do_I2C_DO_NACK_RESTART
  5403  0300  0008               	return
  5404  0301                     l4537:	
  5405                           ;i2c_master.c: 374: case i2c_continue:
  5406                           
  5407                           ;i2c_master.c: 373: default:
  5408                           
  5409                           
  5410                           ;i2c_master.c: 375: case i2c_stop:
  5411                           ;i2c_master.c: 376: return do_I2C_DO_NACK_STOP();
  5412  0301  3187  2714         	fcall	_do_I2C_DO_NACK_STOP
  5413                           
  5414                           ;i2c_master.c: 377: }
  5415  0303  0008               	return
  5416  0304                     l4543:	
  5417  0304  0020               	movlb	0	; select bank0
  5418  0305  0837               	movf	low ((_i2c_status| 0+23)),w
  5419  0306  00D7               	movwf	??_do_I2C_RX
  5420  0307  0857               	movf	??_do_I2C_RX,w
  5421  0308  00E0               	movwf	returnStop@p
  5422  0309  300B               	movlw	11
  5423  030A  3E20               	addlw	(low (_i2c_status| 0))& (0+255)
  5424  030B  0086               	movwf	6
  5425  030C  0187               	clrf	7
  5426  030D  3F41               	moviw [1]fsr1
  5427  030E  008A               	movwf	10
  5428  030F  3F40               	moviw [0]fsr1
  5429  0310  000A               	callw
  5430  0311  3182               	pagesel	$
  5431                           
  5432                           ; Switch size 1, requested type "space"
  5433                           ; Number of cases is 4, Range of values is 1 to 4
  5434                           ; switch strategies available:
  5435                           ; Name         Instructions Cycles
  5436                           ; simple_byte           13     7 (average)
  5437                           ; direct_byte           17     9 (fixed)
  5438                           ; jumptable            263     9 (fixed)
  5439                           ;	Chosen strategy is simple_byte
  5440  0312  3A01               	xorlw	1	; case 1
  5441  0313  1903               	skipnz
  5442  0314  2B01               	goto	l4537
  5443  0315  3A03               	xorlw	3	; case 2
  5444  0316  1903               	skipnz
  5445  0317  2AFE               	goto	l4533
  5446  0318  3A01               	xorlw	1	; case 3
  5447  0319  1903               	skipnz
  5448  031A  2AFE               	goto	l4533
  5449  031B  3A07               	xorlw	7	; case 4
  5450  031C  1903               	skipnz
  5451  031D  2B01               	goto	l4537
  5452  031E  2B01               	goto	l4537
  5453  031F  0008               	return
  5454  0320                     __end_of_do_I2C_RX:	
  5455                           
  5456                           	psect	text17
  5457  01B2                     __ptext17:	
  5458 ;; *************** function _do_I2C_TX *****************
  5459 ;; Defined at:
  5460 ;;		line 333 in file "mcc_generated_files/drivers/i2c_master.c"
  5461 ;; Parameters:    Size  Location     Type
  5462 ;;		None
  5463 ;; Auto vars:     Size  Location     Type
  5464 ;;		None
  5465 ;; Return value:  Size  Location     Type
  5466 ;;                  1    wreg      enum E12337
  5467 ;; Registers used:
  5468 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5469 ;; Tracked objects:
  5470 ;;		On entry : 0/0
  5471 ;;		On exit  : 0/0
  5472 ;;		Unchanged: 0/0
  5473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5474 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5475 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5476 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5477 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5478 ;;Total ram usage:        3 bytes
  5479 ;; Hardware stack levels used:    1
  5480 ;; Hardware stack levels required when called:    9
  5481 ;; This function calls:
  5482 ;;		Absolute function
  5483 ;;		_do_I2C_SEND_RESTART_READ
  5484 ;;		_do_I2C_SEND_RESTART_WRITE
  5485 ;;		_do_I2C_SEND_STOP
  5486 ;;		_i2c_driver_TXData
  5487 ;;		_i2c_driver_isNACK
  5488 ;;		_i2c_restartWrite
  5489 ;;		_rd1RegCompleteHandler
  5490 ;;		_rd2RegCompleteHandler
  5491 ;;		_rdBlkRegCompleteHandler
  5492 ;;		_returnReset
  5493 ;;		_returnStop
  5494 ;;		_wr1RegCompleteHandler
  5495 ;;		_wr2RegCompleteHandler
  5496 ;; This function is called by:
  5497 ;;		_i2c_ISR
  5498 ;;		i1_i2c_ISR
  5499 ;; This function uses a non-reentrant model
  5500 ;;
  5501                           
  5502                           
  5503                           ;psect for function _do_I2C_TX
  5504  01B2                     _do_I2C_TX:	
  5505                           
  5506                           ;Skip over the trampoline to the duplicate function for level 1
  5507  01B2  1C7E               	btfss	126,0
  5508  01B3  29B6               	goto	l4489
  5509  01B4  3182  2A4C         	ljmp	i1l4671
  5510  01B6                     _do_I2C_TX$intlevel0:	
  5511  01B6                     l4489:	
  5512                           ;incstack = 0
  5513                           ; Regs used in _do_I2C_TX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5514                           
  5515                           
  5516                           ;i2c_master.c: 335: if(i2c_driver_isNACK())
  5517  01B6  3186  2671  3181   	fcall	_i2c_driver_isNACK
  5518  01B9  1803               	btfsc	3,0
  5519  01BA  29C5               	goto	l4507
  5520  01BB  29E1               	goto	l467
  5521  01BC                     l4493:	
  5522                           ;i2c_master.c: 338: {
  5523                           ;i2c_master.c: 339: case i2c_restart_read:
  5524                           
  5525                           ;i2c_master.c: 336: {
  5526                           ;i2c_master.c: 337: switch(i2c_status.callbackTable[i2c_dataNACK](i2c_status.callbackPay
      +                          load[i2c_dataNACK]))
  5527                           
  5528                           
  5529                           ;i2c_master.c: 340: return do_I2C_SEND_RESTART_READ();
  5530  01BC  3187  273C         	fcall	_do_I2C_SEND_RESTART_READ
  5531  01BE  0008               	return
  5532  01BF                     l4497:	
  5533                           ;i2c_master.c: 341: case i2c_restart_write:
  5534                           
  5535                           
  5536                           ;i2c_master.c: 342: return do_I2C_SEND_RESTART_WRITE();
  5537  01BF  3187  2734         	fcall	_do_I2C_SEND_RESTART_WRITE
  5538  01C1  0008               	return
  5539  01C2                     l4501:	
  5540                           ;i2c_master.c: 344: case i2c_continue:
  5541                           
  5542                           ;i2c_master.c: 343: default:
  5543                           
  5544                           
  5545                           ;i2c_master.c: 345: case i2c_stop:
  5546                           ;i2c_master.c: 346: return do_I2C_SEND_STOP();
  5547  01C2  3187  2724         	fcall	_do_I2C_SEND_STOP
  5548                           
  5549                           ;i2c_master.c: 347: }
  5550  01C4  0008               	return
  5551  01C5                     l4507:	
  5552  01C5  0020               	movlb	0	; select bank0
  5553  01C6  083A               	movf	low ((_i2c_status| 0+26)),w
  5554  01C7  00D8               	movwf	??_do_I2C_TX
  5555  01C8  0858               	movf	??_do_I2C_TX,w
  5556  01C9  00E0               	movwf	returnStop@p
  5557  01CA  3011               	movlw	17
  5558  01CB  3E20               	addlw	(low (_i2c_status| 0))& (0+255)
  5559  01CC  0086               	movwf	6
  5560  01CD  0187               	clrf	7
  5561  01CE  3F41               	moviw [1]fsr1
  5562  01CF  008A               	movwf	10
  5563  01D0  3F40               	moviw [0]fsr1
  5564  01D1  000A               	callw
  5565  01D2  3181               	pagesel	$
  5566                           
  5567                           ; Switch size 1, requested type "space"
  5568                           ; Number of cases is 4, Range of values is 1 to 4
  5569                           ; switch strategies available:
  5570                           ; Name         Instructions Cycles
  5571                           ; simple_byte           13     7 (average)
  5572                           ; direct_byte           17     9 (fixed)
  5573                           ; jumptable            263     9 (fixed)
  5574                           ;	Chosen strategy is simple_byte
  5575  01D3  3A01               	xorlw	1	; case 1
  5576  01D4  1903               	skipnz
  5577  01D5  29C2               	goto	l4501
  5578  01D6  3A03               	xorlw	3	; case 2
  5579  01D7  1903               	skipnz
  5580  01D8  29BC               	goto	l4493
  5581  01D9  3A01               	xorlw	1	; case 3
  5582  01DA  1903               	skipnz
  5583  01DB  29BF               	goto	l4497
  5584  01DC  3A07               	xorlw	7	; case 4
  5585  01DD  1903               	skipnz
  5586  01DE  29C2               	goto	l4501
  5587  01DF  29C2               	goto	l4501
  5588                           
  5589                           ;i2c_master.c: 348: }
  5590  01E0  0008               	return
  5591  01E1                     l467:	
  5592                           
  5593                           ;i2c_master.c: 349: else
  5594                           ;i2c_master.c: 350: {
  5595                           ;i2c_master.c: 351: i2c_status.addressNACKCheck = 0;
  5596  01E1  0020               	movlb	0	; select bank0
  5597  01E2  11A0               	bcf	_i2c_status,3
  5598                           
  5599                           ;i2c_master.c: 352: i2c_driver_TXData(*i2c_status.data_ptr++);
  5600  01E3  3002               	movlw	2
  5601  01E4  3E20               	addlw	(low (_i2c_status| 0))& (0+255)
  5602  01E5  0086               	movwf	6
  5603  01E6  0187               	clrf	7
  5604  01E7  3F40               	moviw [0]fsr1
  5605  01E8  0084               	movwf	4
  5606  01E9  0185               	clrf	5
  5607  01EA  0A81               	incf	1,f
  5608  01EB  0800               	movf	0,w
  5609  01EC  3187  2772  3181   	fcall	_i2c_driver_TXData
  5610                           
  5611                           ;i2c_master.c: 353: return (--i2c_status.data_length)?I2C_TX:I2C_TX_EMPTY;
  5612  01EF  3001               	movlw	1
  5613  01F0  0020               	movlb	0	; select bank0
  5614  01F1  02A3               	subwf	_i2c_status+3,f
  5615  01F2  3000               	movlw	0
  5616  01F3  3BA4               	subwfb	_i2c_status+4,f
  5617  01F4  0823               	movf	_i2c_status+3,w
  5618  01F5  0424               	iorwf	_i2c_status+4,w
  5619  01F6  1D03               	btfss	3,2
  5620  01F7  29FA               	goto	l4515
  5621  01F8  3006               	movlw	6
  5622  01F9  29FB               	goto	L1
  5623  01FA                     l4515:	
  5624  01FA  3003               	movlw	3
  5625  01FB                     L1:	
  5626  01FB  00D9               	movwf	_do_I2C_TX$774
  5627  01FC  3000               	movlw	0
  5628  01FD  00DA               	movwf	_do_I2C_TX$774+1
  5629  01FE  0859               	movf	_do_I2C_TX$774,w
  5630  01FF  0008               	return
  5631  0200                     __end_of_do_I2C_TX:	
  5632                           
  5633                           	psect	text18
  5634  03EB                     __ptext18:	
  5635 ;; *************** function _do_I2C_DO_ADDRESS_NACK *****************
  5636 ;; Defined at:
  5637 ;;		line 319 in file "mcc_generated_files/drivers/i2c_master.c"
  5638 ;; Parameters:    Size  Location     Type
  5639 ;;		None
  5640 ;; Auto vars:     Size  Location     Type
  5641 ;;		None
  5642 ;; Return value:  Size  Location     Type
  5643 ;;                  1    wreg      enum E12337
  5644 ;; Registers used:
  5645 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5646 ;; Tracked objects:
  5647 ;;		On entry : 0/0
  5648 ;;		On exit  : 0/0
  5649 ;;		Unchanged: 0/0
  5650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5652 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5653 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5654 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5655 ;;Total ram usage:        1 bytes
  5656 ;; Hardware stack levels used:    1
  5657 ;; Hardware stack levels required when called:    9
  5658 ;; This function calls:
  5659 ;;		Absolute function
  5660 ;;		_do_I2C_SEND_RESTART
  5661 ;;		_do_I2C_SEND_STOP
  5662 ;;		_i2c_restartWrite
  5663 ;;		_rd1RegCompleteHandler
  5664 ;;		_rd2RegCompleteHandler
  5665 ;;		_rdBlkRegCompleteHandler
  5666 ;;		_returnReset
  5667 ;;		_returnStop
  5668 ;;		_wr1RegCompleteHandler
  5669 ;;		_wr2RegCompleteHandler
  5670 ;; This function is called by:
  5671 ;;		_i2c_ISR
  5672 ;;		i1_i2c_ISR
  5673 ;; This function uses a non-reentrant model
  5674 ;;
  5675                           
  5676                           
  5677                           ;psect for function _do_I2C_DO_ADDRESS_NACK
  5678  03EB                     _do_I2C_DO_ADDRESS_NACK:	
  5679                           
  5680                           ;Skip over the trampoline to the duplicate function for level 1
  5681  03EB  1C7E               	btfss	126,0
  5682  03EC  2BEF               	goto	l4473
  5683  03ED  3184  2CCB         	ljmp	i1l4655
  5684  03EF                     _do_I2C_DO_ADDRESS_NACK$intlevel0:	
  5685  03EF                     l4473:	
  5686                           ;incstack = 0
  5687                           ; Regs used in _do_I2C_DO_ADDRESS_NACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5688                           
  5689                           
  5690                           ;i2c_master.c: 321: i2c_status.addressNACKCheck = 0;
  5691  03EF  0020               	movlb	0	; select bank0
  5692  03F0  11A0               	bcf	_i2c_status,3
  5693                           
  5694                           ;i2c_master.c: 322: i2c_status.error = I2C_FAIL;
  5695  03F1  3002               	movlw	2
  5696  03F2  00D7               	movwf	??_do_I2C_DO_ADDRESS_NACK
  5697  03F3  0857               	movf	??_do_I2C_DO_ADDRESS_NACK,w
  5698  03F4  00AA               	movwf	_i2c_status+10
  5699                           
  5700                           ;i2c_master.c: 323: switch(i2c_status.callbackTable[i2c_addressNACK](i2c_status.callback
      +                          Payload[i2c_addressNACK]))
  5701  03F5  2BFC               	goto	l4487
  5702  03F6                     l4477:	
  5703                           ;i2c_master.c: 324: {
  5704                           ;i2c_master.c: 325: case i2c_restart_read:
  5705                           
  5706                           
  5707                           ;i2c_master.c: 326: case i2c_restart_write:
  5708                           ;i2c_master.c: 327: return do_I2C_SEND_RESTART();
  5709  03F6  3187  272C         	fcall	_do_I2C_SEND_RESTART
  5710  03F8  0008               	return
  5711  03F9                     l4481:	
  5712                           ;i2c_master.c: 328: default:
  5713                           
  5714                           
  5715                           ;i2c_master.c: 329: return do_I2C_SEND_STOP();
  5716  03F9  3187  2724         	fcall	_do_I2C_SEND_STOP
  5717                           
  5718                           ;i2c_master.c: 330: }
  5719  03FB  0008               	return
  5720  03FC                     l4487:	
  5721  03FC  0020               	movlb	0	; select bank0
  5722  03FD  0839               	movf	low ((_i2c_status| 0+25)),w
  5723  03FE  00D7               	movwf	??_do_I2C_DO_ADDRESS_NACK
  5724  03FF  0857               	movf	??_do_I2C_DO_ADDRESS_NACK,w
  5725  0400  00E0               	movwf	returnStop@p
  5726  0401  300F               	movlw	15
  5727  0402  3E20               	addlw	(low (_i2c_status| 0))& (0+255)
  5728  0403  0086               	movwf	6
  5729  0404  0187               	clrf	7
  5730  0405  3F41               	moviw [1]fsr1
  5731  0406  008A               	movwf	10
  5732  0407  3F40               	moviw [0]fsr1
  5733  0408  000A               	callw
  5734  0409  3183               	pagesel	$
  5735                           
  5736                           ; Switch size 1, requested type "space"
  5737                           ; Number of cases is 2, Range of values is 2 to 3
  5738                           ; switch strategies available:
  5739                           ; Name         Instructions Cycles
  5740                           ; simple_byte            7     4 (average)
  5741                           ; direct_byte           13     9 (fixed)
  5742                           ; jumptable            263     9 (fixed)
  5743                           ;	Chosen strategy is simple_byte
  5744  040A  3A02               	xorlw	2	; case 2
  5745  040B  1903               	skipnz
  5746  040C  2BF6               	goto	l4477
  5747  040D  3A01               	xorlw	1	; case 3
  5748  040E  1903               	skipnz
  5749  040F  2BF6               	goto	l4477
  5750  0410  2BF9               	goto	l4481
  5751  0411  0008               	return
  5752  0412                     __end_of_do_I2C_DO_ADDRESS_NACK:	
  5753                           
  5754                           	psect	text19
  5755  070C                     __ptext19:	
  5756 ;; *************** function _do_I2C_DO_NACK_RESTART *****************
  5757 ;; Defined at:
  5758 ;;		line 311 in file "mcc_generated_files/drivers/i2c_master.c"
  5759 ;; Parameters:    Size  Location     Type
  5760 ;;		None
  5761 ;; Auto vars:     Size  Location     Type
  5762 ;;		None
  5763 ;; Return value:  Size  Location     Type
  5764 ;;                  1    wreg      enum E12337
  5765 ;; Registers used:
  5766 ;;		wreg, status,2, status,0, pclath, cstack
  5767 ;; Tracked objects:
  5768 ;;		On entry : 0/0
  5769 ;;		On exit  : 0/0
  5770 ;;		Unchanged: 0/0
  5771 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5772 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5773 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5774 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5775 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5776 ;;Total ram usage:        0 bytes
  5777 ;; Hardware stack levels used:    1
  5778 ;; Hardware stack levels required when called:    7
  5779 ;; This function calls:
  5780 ;;		_i2c_driver_sendNACK
  5781 ;; This function is called by:
  5782 ;;		_do_I2C_RX
  5783 ;;		_i2c_ISR
  5784 ;;		i1_i2c_ISR
  5785 ;; This function uses a non-reentrant model
  5786 ;;
  5787                           
  5788                           
  5789                           ;psect for function _do_I2C_DO_NACK_RESTART
  5790  070C                     _do_I2C_DO_NACK_RESTART:	
  5791                           
  5792                           ;Skip over the trampoline to the duplicate function for level 1
  5793  070C  1C7E               	btfss	126,0
  5794  070D  2F10               	goto	l2159
  5795  070E  3187  2FAC         	ljmp	i1l2545
  5796  0710                     _do_I2C_DO_NACK_RESTART$intlevel0:	
  5797  0710                     l2159:	
  5798                           ;incstack = 0
  5799                           ; Regs used in _do_I2C_DO_NACK_RESTART: [wreg+status,2+status,0+pclath+cstack]
  5800                           
  5801                           
  5802                           ;i2c_master.c: 313: i2c_driver_sendNACK();
  5803  0710  3187  27A4         	fcall	_i2c_driver_sendNACK
  5804                           
  5805                           ;i2c_master.c: 314: return I2C_SEND_RESTART;
  5806  0712  3009               	movlw	9
  5807  0713  0008               	return
  5808  0714                     __end_of_do_I2C_DO_NACK_RESTART:	
  5809                           
  5810                           	psect	text20
  5811  0714                     __ptext20:	
  5812 ;; *************** function _do_I2C_DO_NACK_STOP *****************
  5813 ;; Defined at:
  5814 ;;		line 305 in file "mcc_generated_files/drivers/i2c_master.c"
  5815 ;; Parameters:    Size  Location     Type
  5816 ;;		None
  5817 ;; Auto vars:     Size  Location     Type
  5818 ;;		None
  5819 ;; Return value:  Size  Location     Type
  5820 ;;                  1    wreg      enum E12337
  5821 ;; Registers used:
  5822 ;;		wreg, status,2, status,0, pclath, cstack
  5823 ;; Tracked objects:
  5824 ;;		On entry : 0/0
  5825 ;;		On exit  : 0/0
  5826 ;;		Unchanged: 0/0
  5827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5828 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5829 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5830 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5831 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5832 ;;Total ram usage:        0 bytes
  5833 ;; Hardware stack levels used:    1
  5834 ;; Hardware stack levels required when called:    7
  5835 ;; This function calls:
  5836 ;;		_i2c_driver_sendNACK
  5837 ;; This function is called by:
  5838 ;;		_do_I2C_RX
  5839 ;;		_i2c_ISR
  5840 ;;		i1_i2c_ISR
  5841 ;; This function uses a non-reentrant model
  5842 ;;
  5843                           
  5844                           
  5845                           ;psect for function _do_I2C_DO_NACK_STOP
  5846  0714                     _do_I2C_DO_NACK_STOP:	
  5847                           
  5848                           ;Skip over the trampoline to the duplicate function for level 1
  5849  0714  1C7E               	btfss	126,0
  5850  0715  2F18               	goto	l2153
  5851  0716  3187  2FB0         	ljmp	i1l2539
  5852  0718                     _do_I2C_DO_NACK_STOP$intlevel0:	
  5853  0718                     l2153:	
  5854                           ;incstack = 0
  5855                           ; Regs used in _do_I2C_DO_NACK_STOP: [wreg+status,2+status,0+pclath+cstack]
  5856                           
  5857                           
  5858                           ;i2c_master.c: 307: i2c_driver_sendNACK();
  5859  0718  3187  27A4         	fcall	_i2c_driver_sendNACK
  5860                           
  5861                           ;i2c_master.c: 308: return I2C_SEND_STOP;
  5862  071A  300A               	movlw	10
  5863  071B  0008               	return
  5864  071C                     __end_of_do_I2C_DO_NACK_STOP:	
  5865                           
  5866                           	psect	text21
  5867  071C                     __ptext21:	
  5868 ;; *************** function _do_I2C_DO_ACK *****************
  5869 ;; Defined at:
  5870 ;;		line 299 in file "mcc_generated_files/drivers/i2c_master.c"
  5871 ;; Parameters:    Size  Location     Type
  5872 ;;		None
  5873 ;; Auto vars:     Size  Location     Type
  5874 ;;		None
  5875 ;; Return value:  Size  Location     Type
  5876 ;;                  1    wreg      enum E12337
  5877 ;; Registers used:
  5878 ;;		wreg, status,2, status,0, pclath, cstack
  5879 ;; Tracked objects:
  5880 ;;		On entry : 0/0
  5881 ;;		On exit  : 0/0
  5882 ;;		Unchanged: 0/0
  5883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5884 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5885 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5886 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5887 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5888 ;;Total ram usage:        0 bytes
  5889 ;; Hardware stack levels used:    1
  5890 ;; Hardware stack levels required when called:    7
  5891 ;; This function calls:
  5892 ;;		_i2c_driver_sendACK
  5893 ;; This function is called by:
  5894 ;;		_i2c_ISR
  5895 ;;		i1_i2c_ISR
  5896 ;; This function uses a non-reentrant model
  5897 ;;
  5898                           
  5899                           
  5900                           ;psect for function _do_I2C_DO_ACK
  5901  071C                     _do_I2C_DO_ACK:	
  5902                           
  5903                           ;Skip over the trampoline to the duplicate function for level 1
  5904  071C  1C7E               	btfss	126,0
  5905  071D  2F20               	goto	l2259
  5906  071E  3187  2FB4         	ljmp	i1l2733
  5907  0720                     _do_I2C_DO_ACK$intlevel0:	
  5908  0720                     l2259:	
  5909                           ;incstack = 0
  5910                           ; Regs used in _do_I2C_DO_ACK: [wreg+status,2+status,0+pclath+cstack]
  5911                           
  5912                           
  5913                           ;i2c_master.c: 301: i2c_driver_sendACK();
  5914  0720  3187  27A8         	fcall	_i2c_driver_sendACK
  5915                           
  5916                           ;i2c_master.c: 302: return I2C_RCEN;
  5917  0722  3005               	movlw	5
  5918  0723  0008               	return
  5919  0724                     __end_of_do_I2C_DO_ACK:	
  5920                           
  5921                           	psect	text22
  5922  06EF                     __ptext22:	
  5923 ;; *************** function _do_I2C_RCEN *****************
  5924 ;; Defined at:
  5925 ;;		line 292 in file "mcc_generated_files/drivers/i2c_master.c"
  5926 ;; Parameters:    Size  Location     Type
  5927 ;;		None
  5928 ;; Auto vars:     Size  Location     Type
  5929 ;;		None
  5930 ;; Return value:  Size  Location     Type
  5931 ;;                  1    wreg      enum E12337
  5932 ;; Registers used:
  5933 ;;		wreg, status,2, status,0, pclath, cstack
  5934 ;; Tracked objects:
  5935 ;;		On entry : 0/0
  5936 ;;		On exit  : 0/0
  5937 ;;		Unchanged: 0/0
  5938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5939 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5940 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5941 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5942 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5943 ;;Total ram usage:        0 bytes
  5944 ;; Hardware stack levels used:    1
  5945 ;; Hardware stack levels required when called:    7
  5946 ;; This function calls:
  5947 ;;		_i2c_driver_startRX
  5948 ;; This function is called by:
  5949 ;;		_i2c_ISR
  5950 ;;		i1_i2c_ISR
  5951 ;; This function uses a non-reentrant model
  5952 ;;
  5953                           
  5954                           
  5955                           ;psect for function _do_I2C_RCEN
  5956  06EF                     _do_I2C_RCEN:	
  5957                           
  5958                           ;Skip over the trampoline to the duplicate function for level 1
  5959  06EF  1C7E               	btfss	126,0
  5960  06F0  2EF3               	goto	l2251
  5961  06F1  3187  2F90         	ljmp	i1l2725
  5962  06F3                     _do_I2C_RCEN$intlevel0:	
  5963  06F3                     l2251:	
  5964                           ;incstack = 0
  5965                           ; Regs used in _do_I2C_RCEN: [wreg+status,2+status,0+pclath+cstack]
  5966                           
  5967                           
  5968                           ;i2c_master.c: 294: i2c_status.addressNACKCheck = 0;
  5969  06F3  0020               	movlb	0	; select bank0
  5970  06F4  11A0               	bcf	_i2c_status,3
  5971                           
  5972                           ;i2c_master.c: 295: i2c_driver_startRX();
  5973  06F5  3187  27D6         	fcall	_i2c_driver_startRX
  5974                           
  5975                           ;i2c_master.c: 296: return I2C_RX;
  5976  06F7  3004               	movlw	4
  5977  06F8  0008               	return
  5978  06F9                     __end_of_do_I2C_RCEN:	
  5979                           
  5980                           	psect	text23
  5981  06C5                     __ptext23:	
  5982 ;; *************** function _do_I2C_SEND_ADR_WRITE *****************
  5983 ;; Defined at:
  5984 ;;		line 285 in file "mcc_generated_files/drivers/i2c_master.c"
  5985 ;; Parameters:    Size  Location     Type
  5986 ;;		None
  5987 ;; Auto vars:     Size  Location     Type
  5988 ;;		None
  5989 ;; Return value:  Size  Location     Type
  5990 ;;                  1    wreg      enum E12337
  5991 ;; Registers used:
  5992 ;;		wreg, status,2, status,0, pclath, cstack
  5993 ;; Tracked objects:
  5994 ;;		On entry : 0/0
  5995 ;;		On exit  : 0/0
  5996 ;;		Unchanged: 0/0
  5997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5998 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5999 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6000 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6001 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6002 ;;Total ram usage:        0 bytes
  6003 ;; Hardware stack levels used:    1
  6004 ;; Hardware stack levels required when called:    7
  6005 ;; This function calls:
  6006 ;;		_i2c_driver_TXData
  6007 ;; This function is called by:
  6008 ;;		_i2c_ISR
  6009 ;;		i1_i2c_ISR
  6010 ;; This function uses a non-reentrant model
  6011 ;;
  6012                           
  6013                           
  6014                           ;psect for function _do_I2C_SEND_ADR_WRITE
  6015  06C5                     _do_I2C_SEND_ADR_WRITE:	
  6016                           
  6017                           ;Skip over the trampoline to the duplicate function for level 1
  6018  06C5  1C7E               	btfss	126,0
  6019  06C6  2EC9               	goto	l2243
  6020  06C7  3187  2F4C         	ljmp	i1l2717
  6021  06C9                     _do_I2C_SEND_ADR_WRITE$intlevel0:	
  6022  06C9                     l2243:	
  6023                           ;incstack = 0
  6024                           ; Regs used in _do_I2C_SEND_ADR_WRITE: [wreg+status,2+status,0+pclath+cstack]
  6025                           
  6026                           
  6027                           ;i2c_master.c: 287: i2c_status.addressNACKCheck = 1;
  6028  06C9  0020               	movlb	0	; select bank0
  6029  06CA  15A0               	bsf	_i2c_status,3
  6030                           
  6031                           ;i2c_master.c: 288: i2c_driver_TXData(i2c_status.address << 1);
  6032  06CB  3521               	lslf	_i2c_status+1,w
  6033  06CC  3187  2772         	fcall	_i2c_driver_TXData
  6034                           
  6035                           ;i2c_master.c: 289: return I2C_TX;
  6036  06CE  3003               	movlw	3
  6037  06CF  0008               	return
  6038  06D0                     __end_of_do_I2C_SEND_ADR_WRITE:	
  6039                           
  6040                           	psect	text24
  6041  068B                     __ptext24:	
  6042 ;; *************** function _do_I2C_SEND_ADR_READ *****************
  6043 ;; Defined at:
  6044 ;;		line 278 in file "mcc_generated_files/drivers/i2c_master.c"
  6045 ;; Parameters:    Size  Location     Type
  6046 ;;		None
  6047 ;; Auto vars:     Size  Location     Type
  6048 ;;		None
  6049 ;; Return value:  Size  Location     Type
  6050 ;;                  1    wreg      enum E12337
  6051 ;; Registers used:
  6052 ;;		wreg, status,2, status,0, pclath, cstack
  6053 ;; Tracked objects:
  6054 ;;		On entry : 0/0
  6055 ;;		On exit  : 0/0
  6056 ;;		Unchanged: 0/0
  6057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6058 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6059 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6060 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6061 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6062 ;;Total ram usage:        0 bytes
  6063 ;; Hardware stack levels used:    1
  6064 ;; Hardware stack levels required when called:    7
  6065 ;; This function calls:
  6066 ;;		_i2c_driver_TXData
  6067 ;; This function is called by:
  6068 ;;		_i2c_ISR
  6069 ;;		i1_i2c_ISR
  6070 ;; This function uses a non-reentrant model
  6071 ;;
  6072                           
  6073                           
  6074                           ;psect for function _do_I2C_SEND_ADR_READ
  6075  068B                     _do_I2C_SEND_ADR_READ:	
  6076                           
  6077                           ;Skip over the trampoline to the duplicate function for level 1
  6078  068B  1C7E               	btfss	126,0
  6079  068C  2E8F               	goto	l2235
  6080  068D  3187  2F44         	ljmp	i1l2709
  6081  068F                     _do_I2C_SEND_ADR_READ$intlevel0:	
  6082  068F                     l2235:	
  6083                           ;incstack = 0
  6084                           ; Regs used in _do_I2C_SEND_ADR_READ: [wreg+status,2+status,0+pclath+cstack]
  6085                           
  6086                           
  6087                           ;i2c_master.c: 280: i2c_status.addressNACKCheck = 1;
  6088  068F  0020               	movlb	0	; select bank0
  6089  0690  15A0               	bsf	_i2c_status,3
  6090                           
  6091                           ;i2c_master.c: 281: i2c_driver_TXData(i2c_status.address << 1 | 1);
  6092  0691  1403               	setc
  6093  0692  0D21               	rlf	_i2c_status+1,w
  6094  0693  3187  2772         	fcall	_i2c_driver_TXData
  6095                           
  6096                           ;i2c_master.c: 282: return I2C_RCEN;
  6097  0695  3005               	movlw	5
  6098  0696  0008               	return
  6099  0697                     __end_of_do_I2C_SEND_ADR_READ:	
  6100                           
  6101                           	psect	text25
  6102  0724                     __ptext25:	
  6103 ;; *************** function _do_I2C_SEND_STOP *****************
  6104 ;; Defined at:
  6105 ;;		line 272 in file "mcc_generated_files/drivers/i2c_master.c"
  6106 ;; Parameters:    Size  Location     Type
  6107 ;;		None
  6108 ;; Auto vars:     Size  Location     Type
  6109 ;;		None
  6110 ;; Return value:  Size  Location     Type
  6111 ;;                  1    wreg      enum E12337
  6112 ;; Registers used:
  6113 ;;		wreg, status,2, status,0, pclath, cstack
  6114 ;; Tracked objects:
  6115 ;;		On entry : 0/0
  6116 ;;		On exit  : 0/0
  6117 ;;		Unchanged: 0/0
  6118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6119 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6120 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6121 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6122 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6123 ;;Total ram usage:        0 bytes
  6124 ;; Hardware stack levels used:    1
  6125 ;; Hardware stack levels required when called:    7
  6126 ;; This function calls:
  6127 ;;		_i2c_driver_stop
  6128 ;; This function is called by:
  6129 ;;		_do_I2C_DO_ADDRESS_NACK
  6130 ;;		_do_I2C_TX
  6131 ;;		_do_I2C_TX_EMPTY
  6132 ;;		_i2c_ISR
  6133 ;;		i1_i2c_ISR
  6134 ;; This function uses a non-reentrant model
  6135 ;;
  6136                           
  6137                           
  6138                           ;psect for function _do_I2C_SEND_STOP
  6139  0724                     _do_I2C_SEND_STOP:	
  6140                           
  6141                           ;Skip over the trampoline to the duplicate function for level 1
  6142  0724  1C7E               	btfss	126,0
  6143  0725  2F28               	goto	l2147
  6144  0726  3187  2FB8         	ljmp	i1l2533
  6145  0728                     _do_I2C_SEND_STOP$intlevel0:	
  6146  0728                     l2147:	
  6147                           ;incstack = 0
  6148                           ; Regs used in _do_I2C_SEND_STOP: [wreg+status,2+status,0+pclath+cstack]
  6149                           
  6150                           
  6151                           ;i2c_master.c: 274: i2c_driver_stop();
  6152  0728  3187  27D9         	fcall	_i2c_driver_stop
  6153                           
  6154                           ;i2c_master.c: 275: return I2C_IDLE;
  6155  072A  3000               	movlw	0
  6156  072B  0008               	return
  6157  072C                     __end_of_do_I2C_SEND_STOP:	
  6158                           
  6159                           	psect	text26
  6160  072C                     __ptext26:	
  6161 ;; *************** function _do_I2C_SEND_RESTART *****************
  6162 ;; Defined at:
  6163 ;;		line 266 in file "mcc_generated_files/drivers/i2c_master.c"
  6164 ;; Parameters:    Size  Location     Type
  6165 ;;		None
  6166 ;; Auto vars:     Size  Location     Type
  6167 ;;		None
  6168 ;; Return value:  Size  Location     Type
  6169 ;;                  1    wreg      enum E12337
  6170 ;; Registers used:
  6171 ;;		wreg, status,2, status,0, pclath, cstack
  6172 ;; Tracked objects:
  6173 ;;		On entry : 0/0
  6174 ;;		On exit  : 0/0
  6175 ;;		Unchanged: 0/0
  6176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6178 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6179 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6180 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6181 ;;Total ram usage:        0 bytes
  6182 ;; Hardware stack levels used:    1
  6183 ;; Hardware stack levels required when called:    7
  6184 ;; This function calls:
  6185 ;;		_i2c_driver_restart
  6186 ;; This function is called by:
  6187 ;;		_do_I2C_DO_ADDRESS_NACK
  6188 ;;		_do_I2C_TX_EMPTY
  6189 ;;		_i2c_ISR
  6190 ;;		i1_i2c_ISR
  6191 ;; This function uses a non-reentrant model
  6192 ;;
  6193                           
  6194                           
  6195                           ;psect for function _do_I2C_SEND_RESTART
  6196  072C                     _do_I2C_SEND_RESTART:	
  6197                           
  6198                           ;Skip over the trampoline to the duplicate function for level 1
  6199  072C  1C7E               	btfss	126,0
  6200  072D  2F30               	goto	l2141
  6201  072E  3187  2FBC         	ljmp	i1l2527
  6202  0730                     _do_I2C_SEND_RESTART$intlevel0:	
  6203  0730                     l2141:	
  6204                           ;incstack = 0
  6205                           ; Regs used in _do_I2C_SEND_RESTART: [wreg+status,2+status,0+pclath+cstack]
  6206                           
  6207                           
  6208                           ;i2c_master.c: 268: i2c_driver_restart();
  6209  0730  3187  27DC         	fcall	_i2c_driver_restart
  6210                           
  6211                           ;i2c_master.c: 269: return I2C_SEND_ADR_READ;
  6212  0732  3001               	movlw	1
  6213  0733  0008               	return
  6214  0734                     __end_of_do_I2C_SEND_RESTART:	
  6215                           
  6216                           	psect	text27
  6217  0734                     __ptext27:	
  6218 ;; *************** function _do_I2C_SEND_RESTART_WRITE *****************
  6219 ;; Defined at:
  6220 ;;		line 260 in file "mcc_generated_files/drivers/i2c_master.c"
  6221 ;; Parameters:    Size  Location     Type
  6222 ;;		None
  6223 ;; Auto vars:     Size  Location     Type
  6224 ;;		None
  6225 ;; Return value:  Size  Location     Type
  6226 ;;                  1    wreg      enum E12337
  6227 ;; Registers used:
  6228 ;;		wreg, status,2, status,0, pclath, cstack
  6229 ;; Tracked objects:
  6230 ;;		On entry : 0/0
  6231 ;;		On exit  : 0/0
  6232 ;;		Unchanged: 0/0
  6233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6234 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6235 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6236 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6237 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6238 ;;Total ram usage:        0 bytes
  6239 ;; Hardware stack levels used:    1
  6240 ;; Hardware stack levels required when called:    7
  6241 ;; This function calls:
  6242 ;;		_i2c_driver_restart
  6243 ;; This function is called by:
  6244 ;;		_do_I2C_TX
  6245 ;;		_i2c_ISR
  6246 ;;		i1_i2c_ISR
  6247 ;; This function uses a non-reentrant model
  6248 ;;
  6249                           
  6250                           
  6251                           ;psect for function _do_I2C_SEND_RESTART_WRITE
  6252  0734                     _do_I2C_SEND_RESTART_WRITE:	
  6253                           
  6254                           ;Skip over the trampoline to the duplicate function for level 1
  6255  0734  1C7E               	btfss	126,0
  6256  0735  2F38               	goto	l2135
  6257  0736  3187  2FC0         	ljmp	i1l2521
  6258  0738                     _do_I2C_SEND_RESTART_WRITE$intlevel0:	
  6259  0738                     l2135:	
  6260                           ;incstack = 0
  6261                           ; Regs used in _do_I2C_SEND_RESTART_WRITE: [wreg+status,2+status,0+pclath+cstack]
  6262                           
  6263                           
  6264                           ;i2c_master.c: 262: i2c_driver_restart();
  6265  0738  3187  27DC         	fcall	_i2c_driver_restart
  6266                           
  6267                           ;i2c_master.c: 263: return I2C_SEND_ADR_WRITE;
  6268  073A  3002               	movlw	2
  6269  073B  0008               	return
  6270  073C                     __end_of_do_I2C_SEND_RESTART_WRITE:	
  6271                           
  6272                           	psect	text28
  6273  073C                     __ptext28:	
  6274 ;; *************** function _do_I2C_SEND_RESTART_READ *****************
  6275 ;; Defined at:
  6276 ;;		line 254 in file "mcc_generated_files/drivers/i2c_master.c"
  6277 ;; Parameters:    Size  Location     Type
  6278 ;;		None
  6279 ;; Auto vars:     Size  Location     Type
  6280 ;;		None
  6281 ;; Return value:  Size  Location     Type
  6282 ;;                  1    wreg      enum E12337
  6283 ;; Registers used:
  6284 ;;		wreg, status,2, status,0, pclath, cstack
  6285 ;; Tracked objects:
  6286 ;;		On entry : 0/0
  6287 ;;		On exit  : 0/0
  6288 ;;		Unchanged: 0/0
  6289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6290 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6291 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6292 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6293 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6294 ;;Total ram usage:        0 bytes
  6295 ;; Hardware stack levels used:    1
  6296 ;; Hardware stack levels required when called:    7
  6297 ;; This function calls:
  6298 ;;		_i2c_driver_restart
  6299 ;; This function is called by:
  6300 ;;		_do_I2C_TX
  6301 ;;		_i2c_ISR
  6302 ;;		i1_i2c_ISR
  6303 ;; This function uses a non-reentrant model
  6304 ;;
  6305                           
  6306                           
  6307                           ;psect for function _do_I2C_SEND_RESTART_READ
  6308  073C                     _do_I2C_SEND_RESTART_READ:	
  6309                           
  6310                           ;Skip over the trampoline to the duplicate function for level 1
  6311  073C  1C7E               	btfss	126,0
  6312  073D  2F40               	goto	l2129
  6313  073E  3187  2FC4         	ljmp	i1l2515
  6314  0740                     _do_I2C_SEND_RESTART_READ$intlevel0:	
  6315  0740                     l2129:	
  6316                           ;incstack = 0
  6317                           ; Regs used in _do_I2C_SEND_RESTART_READ: [wreg+status,2+status,0+pclath+cstack]
  6318                           
  6319                           
  6320                           ;i2c_master.c: 256: i2c_driver_restart();
  6321  0740  3187  27DC         	fcall	_i2c_driver_restart
  6322                           
  6323                           ;i2c_master.c: 257: return I2C_SEND_ADR_READ;
  6324  0742  3001               	movlw	1
  6325  0743  0008               	return
  6326  0744                     __end_of_do_I2C_SEND_RESTART_READ:	
  6327                           
  6328                           	psect	text29
  6329  0703                     __ptext29:	
  6330 ;; *************** function _do_I2C_IDLE *****************
  6331 ;; Defined at:
  6332 ;;		line 247 in file "mcc_generated_files/drivers/i2c_master.c"
  6333 ;; Parameters:    Size  Location     Type
  6334 ;;		None
  6335 ;; Auto vars:     Size  Location     Type
  6336 ;;		None
  6337 ;; Return value:  Size  Location     Type
  6338 ;;                  1    wreg      enum E12337
  6339 ;; Registers used:
  6340 ;;		wreg, status,2
  6341 ;; Tracked objects:
  6342 ;;		On entry : 0/0
  6343 ;;		On exit  : 0/0
  6344 ;;		Unchanged: 0/0
  6345 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6346 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6347 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6348 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6349 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6350 ;;Total ram usage:        0 bytes
  6351 ;; Hardware stack levels used:    1
  6352 ;; Hardware stack levels required when called:    6
  6353 ;; This function calls:
  6354 ;;		Nothing
  6355 ;; This function is called by:
  6356 ;;		_i2c_ISR
  6357 ;;		i1_i2c_ISR
  6358 ;; This function uses a non-reentrant model
  6359 ;;
  6360                           
  6361                           
  6362                           ;psect for function _do_I2C_IDLE
  6363  0703                     _do_I2C_IDLE:	
  6364                           
  6365                           ;Skip over the trampoline to the duplicate function for level 1
  6366  0703  1C7E               	btfss	126,0
  6367  0704  2F07               	goto	l2227
  6368  0705  3187  2F96         	ljmp	i1l2701
  6369  0707                     _do_I2C_IDLE$intlevel0:	
  6370  0707                     l2227:	
  6371                           ;incstack = 0
  6372                           ; Regs used in _do_I2C_IDLE: [wreg+status,2]
  6373                           
  6374                           
  6375                           ;i2c_master.c: 249: i2c_status.busy = 0;
  6376  0707  0020               	movlb	0	; select bank0
  6377  0708  1020               	bcf	_i2c_status,0
  6378                           
  6379                           ;i2c_master.c: 250: i2c_status.error = I2C_NOERR;
  6380  0709  01AA               	clrf	_i2c_status+10
  6381                           
  6382                           ;i2c_master.c: 251: return I2C_RESET;
  6383  070A  300E               	movlw	14
  6384  070B  0008               	return
  6385  070C                     __end_of_do_I2C_IDLE:	
  6386                           
  6387                           	psect	text30
  6388  06D0                     __ptext30:	
  6389 ;; *************** function _do_I2C_RESET *****************
  6390 ;; Defined at:
  6391 ;;		line 239 in file "mcc_generated_files/drivers/i2c_master.c"
  6392 ;; Parameters:    Size  Location     Type
  6393 ;;		None
  6394 ;; Auto vars:     Size  Location     Type
  6395 ;;		None
  6396 ;; Return value:  Size  Location     Type
  6397 ;;                  1    wreg      enum E12337
  6398 ;; Registers used:
  6399 ;;		wreg, status,2, status,0, pclath, cstack
  6400 ;; Tracked objects:
  6401 ;;		On entry : 0/0
  6402 ;;		On exit  : 0/0
  6403 ;;		Unchanged: 0/0
  6404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6405 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6406 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6407 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6408 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6409 ;;Total ram usage:        0 bytes
  6410 ;; Hardware stack levels used:    1
  6411 ;; Hardware stack levels required when called:    7
  6412 ;; This function calls:
  6413 ;;		_i2c_driver_resetBus
  6414 ;; This function is called by:
  6415 ;;		_i2c_ISR
  6416 ;;		i1_i2c_ISR
  6417 ;; This function uses a non-reentrant model
  6418 ;;
  6419                           
  6420                           
  6421                           ;psect for function _do_I2C_RESET
  6422  06D0                     _do_I2C_RESET:	
  6423                           
  6424                           ;Skip over the trampoline to the duplicate function for level 1
  6425  06D0  1C7E               	btfss	126,0
  6426  06D1  2ED4               	goto	l2217
  6427  06D2  3187  2F53         	ljmp	i1l2691
  6428  06D4                     _do_I2C_RESET$intlevel0:	
  6429  06D4                     l2217:	
  6430                           ;incstack = 0
  6431                           ; Regs used in _do_I2C_RESET: [wreg+status,2+status,0+pclath+cstack]
  6432                           
  6433                           
  6434                           ;i2c_master.c: 241: i2c_driver_resetBus();
  6435  06D4  318F  27FA         	fcall	_i2c_driver_resetBus
  6436                           
  6437                           ;i2c_master.c: 242: i2c_status.busy = 0;
  6438  06D6  0020               	movlb	0	; select bank0
  6439  06D7  1020               	bcf	_i2c_status,0
  6440                           
  6441                           ;i2c_master.c: 243: i2c_status.error = I2C_NOERR;
  6442  06D8  01AA               	clrf	_i2c_status+10
  6443                           
  6444                           ;i2c_master.c: 244: return I2C_RESET;
  6445  06D9  300E               	movlw	14
  6446  06DA  0008               	return
  6447  06DB                     __end_of_do_I2C_RESET:	
  6448                           
  6449                           	psect	text31
  6450  0395                     __ptext31:	
  6451 ;; *************** function _do_I2C_TX_EMPTY *****************
  6452 ;; Defined at:
  6453 ;;		line 382 in file "mcc_generated_files/drivers/i2c_master.c"
  6454 ;; Parameters:    Size  Location     Type
  6455 ;;		None
  6456 ;; Auto vars:     Size  Location     Type
  6457 ;;		None
  6458 ;; Return value:  Size  Location     Type
  6459 ;;                  1    wreg      enum E12337
  6460 ;; Registers used:
  6461 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6462 ;; Tracked objects:
  6463 ;;		On entry : 0/0
  6464 ;;		On exit  : 0/0
  6465 ;;		Unchanged: 0/0
  6466 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6467 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6468 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6469 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6470 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6471 ;;Total ram usage:        1 bytes
  6472 ;; Hardware stack levels used:    1
  6473 ;; Hardware stack levels required when called:    9
  6474 ;; This function calls:
  6475 ;;		Absolute function
  6476 ;;		_do_I2C_SEND_RESTART
  6477 ;;		_do_I2C_SEND_STOP
  6478 ;;		_i2c_restartWrite
  6479 ;;		_mssp_setIRQ
  6480 ;;		_rd1RegCompleteHandler
  6481 ;;		_rd2RegCompleteHandler
  6482 ;;		_rdBlkRegCompleteHandler
  6483 ;;		_returnReset
  6484 ;;		_returnStop
  6485 ;;		_wr1RegCompleteHandler
  6486 ;;		_wr2RegCompleteHandler
  6487 ;; This function is called by:
  6488 ;;		_i2c_ISR
  6489 ;;		i1_i2c_ISR
  6490 ;; This function uses a non-reentrant model
  6491 ;;
  6492                           
  6493                           
  6494                           ;psect for function _do_I2C_TX_EMPTY
  6495  0395                     _do_I2C_TX_EMPTY:	
  6496                           
  6497                           ;Skip over the trampoline to the duplicate function for level 1
  6498  0395  1C7E               	btfss	126,0
  6499  0396  2B99               	goto	l4545
  6500  0397  3183  2BC2         	ljmp	i1l4727
  6501  0399                     _do_I2C_TX_EMPTY$intlevel0:	
  6502  0399                     l4545:	
  6503                           ;incstack = 0
  6504                           ; Regs used in _do_I2C_TX_EMPTY: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6505                           
  6506                           
  6507                           ;i2c_master.c: 384: i2c_status.bufferFree = 1;
  6508  0399  0020               	movlb	0	; select bank0
  6509  039A  1520               	bsf	_i2c_status,2
  6510                           
  6511                           ;i2c_master.c: 385: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
  6512  039B  2BA6               	goto	l4563
  6513  039C                     l4547:	
  6514                           ;i2c_master.c: 386: {
  6515                           ;i2c_master.c: 387: case i2c_restart_read:
  6516                           
  6517                           
  6518                           ;i2c_master.c: 388: case i2c_restart_write:
  6519                           ;i2c_master.c: 389: return do_I2C_SEND_RESTART();
  6520  039C  3187  272C         	fcall	_do_I2C_SEND_RESTART
  6521  039E  0008               	return
  6522  039F                     l4551:	
  6523                           ;i2c_master.c: 390: case i2c_continue:
  6524                           
  6525                           
  6526                           ;i2c_master.c: 391: mssp_setIRQ();
  6527  039F  3187  27D0         	fcall	_mssp_setIRQ
  6528                           
  6529                           ;i2c_master.c: 392: return I2C_TX;
  6530  03A1  3003               	movlw	3
  6531  03A2  0008               	return
  6532  03A3                     l4557:	
  6533                           ;i2c_master.c: 394: case i2c_stop:
  6534                           
  6535                           ;i2c_master.c: 393: default:
  6536                           
  6537                           
  6538                           ;i2c_master.c: 395: return do_I2C_SEND_STOP();
  6539  03A3  3187  2724         	fcall	_do_I2C_SEND_STOP
  6540                           
  6541                           ;i2c_master.c: 396: }
  6542  03A5  0008               	return
  6543  03A6                     l4563:	
  6544  03A6  0020               	movlb	0	; select bank0
  6545  03A7  0837               	movf	low ((_i2c_status| 0+23)),w
  6546  03A8  00D7               	movwf	??_do_I2C_TX_EMPTY
  6547  03A9  0857               	movf	??_do_I2C_TX_EMPTY,w
  6548  03AA  00E0               	movwf	returnStop@p
  6549  03AB  300B               	movlw	11
  6550  03AC  3E20               	addlw	(low (_i2c_status| 0))& (0+255)
  6551  03AD  0086               	movwf	6
  6552  03AE  0187               	clrf	7
  6553  03AF  3F41               	moviw [1]fsr1
  6554  03B0  008A               	movwf	10
  6555  03B1  3F40               	moviw [0]fsr1
  6556  03B2  000A               	callw
  6557  03B3  3183               	pagesel	$
  6558                           
  6559                           ; Switch size 1, requested type "space"
  6560                           ; Number of cases is 4, Range of values is 1 to 4
  6561                           ; switch strategies available:
  6562                           ; Name         Instructions Cycles
  6563                           ; simple_byte           13     7 (average)
  6564                           ; direct_byte           17     9 (fixed)
  6565                           ; jumptable            263     9 (fixed)
  6566                           ;	Chosen strategy is simple_byte
  6567  03B4  3A01               	xorlw	1	; case 1
  6568  03B5  1903               	skipnz
  6569  03B6  2BA3               	goto	l4557
  6570  03B7  3A03               	xorlw	3	; case 2
  6571  03B8  1903               	skipnz
  6572  03B9  2B9C               	goto	l4547
  6573  03BA  3A01               	xorlw	1	; case 3
  6574  03BB  1903               	skipnz
  6575  03BC  2B9C               	goto	l4547
  6576  03BD  3A07               	xorlw	7	; case 4
  6577  03BE  1903               	skipnz
  6578  03BF  2B9F               	goto	l4551
  6579  03C0  2BA3               	goto	l4557
  6580  03C1  0008               	return
  6581  03C2                     __end_of_do_I2C_TX_EMPTY:	
  6582                           
  6583                           	psect	text32
  6584  07D0                     __ptext32:	
  6585 ;; *************** function _mssp_setIRQ *****************
  6586 ;; Defined at:
  6587 ;;		line 58 in file "mcc_generated_files/i2c_driver.c"
  6588 ;; Parameters:    Size  Location     Type
  6589 ;;		None
  6590 ;; Auto vars:     Size  Location     Type
  6591 ;;		None
  6592 ;; Return value:  Size  Location     Type
  6593 ;;                  1    wreg      void 
  6594 ;; Registers used:
  6595 ;;		None
  6596 ;; Tracked objects:
  6597 ;;		On entry : 0/0
  6598 ;;		On exit  : 0/0
  6599 ;;		Unchanged: 0/0
  6600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6601 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6602 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6603 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6604 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6605 ;;Total ram usage:        0 bytes
  6606 ;; Hardware stack levels used:    1
  6607 ;; Hardware stack levels required when called:    6
  6608 ;; This function calls:
  6609 ;;		Nothing
  6610 ;; This function is called by:
  6611 ;;		_do_I2C_TX_EMPTY
  6612 ;; This function uses a non-reentrant model
  6613 ;;
  6614                           
  6615                           
  6616                           ;psect for function _mssp_setIRQ
  6617  07D0                     _mssp_setIRQ:	
  6618                           
  6619                           ;i2c_driver.c: 60: PIR1bits.SSP1IF = 1;
  6620                           
  6621                           ;incstack = 0
  6622                           ; Regs used in _mssp_setIRQ: []
  6623  07D0  0020               	movlb	0	; select bank0
  6624  07D1  1590               	bsf	16,3	;volatile
  6625  07D2  0008               	return
  6626  07D3                     __end_of_mssp_setIRQ:	
  6627                           
  6628                           	psect	text33
  6629  0671                     __ptext33:	
  6630 ;; *************** function _i2c_driver_isNACK *****************
  6631 ;; Defined at:
  6632 ;;		line 161 in file "mcc_generated_files/i2c_driver.c"
  6633 ;; Parameters:    Size  Location     Type
  6634 ;;		None
  6635 ;; Auto vars:     Size  Location     Type
  6636 ;;		None
  6637 ;; Return value:  Size  Location     Type
  6638 ;;		None               void
  6639 ;; Registers used:
  6640 ;;		wreg, status,2, status,0
  6641 ;; Tracked objects:
  6642 ;;		On entry : 0/0
  6643 ;;		On exit  : 0/0
  6644 ;;		Unchanged: 0/0
  6645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6646 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6647 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6648 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6649 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6650 ;;Total ram usage:        1 bytes
  6651 ;; Hardware stack levels used:    1
  6652 ;; Hardware stack levels required when called:    6
  6653 ;; This function calls:
  6654 ;;		Nothing
  6655 ;; This function is called by:
  6656 ;;		_do_I2C_TX
  6657 ;;		_i2c_ISR
  6658 ;; This function uses a non-reentrant model
  6659 ;;
  6660                           
  6661                           
  6662                           ;psect for function _i2c_driver_isNACK
  6663  0671                     _i2c_driver_isNACK:	
  6664                           
  6665                           ;i2c_driver.c: 163: return SSP1CON2bits.ACKSTAT = 1;
  6666                           
  6667                           ;incstack = 0
  6668                           ; Regs used in _i2c_driver_isNACK: [wreg+status,2+status,0]
  6669  0671  0024               	movlb	4	; select bank4
  6670  0672  0816               	movf	22,w	;volatile
  6671  0673  39BF               	andlw	-65
  6672  0674  3840               	iorlw	64
  6673  0675  0096               	movwf	22	;volatile
  6674  0676  0E16               	swapf	22,w	;volatile
  6675  0677  0C89               	rrf	9,f
  6676  0678  0C89               	rrf	9,f
  6677  0679  3901               	andlw	1
  6678  067A  0020               	movlb	0	; select bank0
  6679  067B  00D7               	movwf	??_i2c_driver_isNACK
  6680  067C  0C57               	rrf	??_i2c_driver_isNACK,w
  6681  067D  0008               	return
  6682  067E                     __end_of_i2c_driver_isNACK:	
  6683                           
  6684                           	psect	text34
  6685  0772                     __ptext34:	
  6686 ;; *************** function _i2c_driver_TXData *****************
  6687 ;; Defined at:
  6688 ;;		line 186 in file "mcc_generated_files/i2c_driver.c"
  6689 ;; Parameters:    Size  Location     Type
  6690 ;;  d               1    wreg     unsigned char 
  6691 ;; Auto vars:     Size  Location     Type
  6692 ;;  d               1    0[BANK0 ] unsigned char 
  6693 ;; Return value:  Size  Location     Type
  6694 ;;                  1    wreg      void 
  6695 ;; Registers used:
  6696 ;;		wreg
  6697 ;; Tracked objects:
  6698 ;;		On entry : 0/0
  6699 ;;		On exit  : 0/0
  6700 ;;		Unchanged: 0/0
  6701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6702 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6703 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6705 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6706 ;;Total ram usage:        1 bytes
  6707 ;; Hardware stack levels used:    1
  6708 ;; Hardware stack levels required when called:    6
  6709 ;; This function calls:
  6710 ;;		Nothing
  6711 ;; This function is called by:
  6712 ;;		_do_I2C_SEND_ADR_READ
  6713 ;;		_do_I2C_SEND_ADR_WRITE
  6714 ;;		_do_I2C_TX
  6715 ;; This function uses a non-reentrant model
  6716 ;;
  6717                           
  6718                           
  6719                           ;psect for function _i2c_driver_TXData
  6720  0772                     _i2c_driver_TXData:	
  6721                           
  6722                           ;incstack = 0
  6723                           ; Regs used in _i2c_driver_TXData: [wreg]
  6724                           ;i2c_driver_TXData@d stored from wreg
  6725  0772  0020               	movlb	0	; select bank0
  6726  0773  00D7               	movwf	i2c_driver_TXData@d
  6727                           
  6728                           ;i2c_driver.c: 188: SSP1BUF = d;
  6729  0774  0857               	movf	i2c_driver_TXData@d,w
  6730  0775  0024               	movlb	4	; select bank4
  6731  0776  0091               	movwf	17	;volatile
  6732  0777  0008               	return
  6733  0778                     __end_of_i2c_driver_TXData:	
  6734                           
  6735                           	psect	text35
  6736  07D3                     __ptext35:	
  6737 ;; *************** function _i2c_driver_getRXData *****************
  6738 ;; Defined at:
  6739 ;;		line 171 in file "mcc_generated_files/i2c_driver.c"
  6740 ;; Parameters:    Size  Location     Type
  6741 ;;		None
  6742 ;; Auto vars:     Size  Location     Type
  6743 ;;		None
  6744 ;; Return value:  Size  Location     Type
  6745 ;;                  1    wreg      unsigned char 
  6746 ;; Registers used:
  6747 ;;		wreg
  6748 ;; Tracked objects:
  6749 ;;		On entry : 0/0
  6750 ;;		On exit  : 0/0
  6751 ;;		Unchanged: 0/0
  6752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6753 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6754 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6755 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6756 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6757 ;;Total ram usage:        0 bytes
  6758 ;; Hardware stack levels used:    1
  6759 ;; Hardware stack levels required when called:    6
  6760 ;; This function calls:
  6761 ;;		Nothing
  6762 ;; This function is called by:
  6763 ;;		_do_I2C_RX
  6764 ;; This function uses a non-reentrant model
  6765 ;;
  6766                           
  6767                           
  6768                           ;psect for function _i2c_driver_getRXData
  6769  07D3                     _i2c_driver_getRXData:	
  6770                           
  6771                           ;i2c_driver.c: 173: return SSP1BUF;
  6772                           
  6773                           ;incstack = 0
  6774                           ; Regs used in _i2c_driver_getRXData: [wreg]
  6775  07D3  0024               	movlb	4	; select bank4
  6776  07D4  0811               	movf	17,w	;volatile
  6777  07D5  0008               	return
  6778  07D6                     __end_of_i2c_driver_getRXData:	
  6779                           
  6780                           	psect	text36
  6781  07A4                     __ptext36:	
  6782 ;; *************** function _i2c_driver_sendNACK *****************
  6783 ;; Defined at:
  6784 ;;		line 202 in file "mcc_generated_files/i2c_driver.c"
  6785 ;; Parameters:    Size  Location     Type
  6786 ;;		None
  6787 ;; Auto vars:     Size  Location     Type
  6788 ;;		None
  6789 ;; Return value:  Size  Location     Type
  6790 ;;                  1    wreg      void 
  6791 ;; Registers used:
  6792 ;;		None
  6793 ;; Tracked objects:
  6794 ;;		On entry : 0/0
  6795 ;;		On exit  : 0/0
  6796 ;;		Unchanged: 0/0
  6797 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6798 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6799 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6800 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6801 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6802 ;;Total ram usage:        0 bytes
  6803 ;; Hardware stack levels used:    1
  6804 ;; Hardware stack levels required when called:    6
  6805 ;; This function calls:
  6806 ;;		Nothing
  6807 ;; This function is called by:
  6808 ;;		_do_I2C_DO_NACK_STOP
  6809 ;;		_do_I2C_DO_NACK_RESTART
  6810 ;; This function uses a non-reentrant model
  6811 ;;
  6812                           
  6813                           
  6814                           ;psect for function _i2c_driver_sendNACK
  6815  07A4                     _i2c_driver_sendNACK:	
  6816                           
  6817                           ;i2c_driver.c: 204: SSP1CON2bits.ACKDT = 1;
  6818                           
  6819                           ;incstack = 0
  6820                           ; Regs used in _i2c_driver_sendNACK: []
  6821  07A4  0024               	movlb	4	; select bank4
  6822  07A5  1696               	bsf	22,5	;volatile
  6823                           
  6824                           ;i2c_driver.c: 205: SSP1CON2bits.ACKEN = 1;
  6825  07A6  1616               	bsf	22,4	;volatile
  6826  07A7  0008               	return
  6827  07A8                     __end_of_i2c_driver_sendNACK:	
  6828                           
  6829                           	psect	text37
  6830  0FFA                     __ptext37:	
  6831 ;; *************** function _i2c_driver_resetBus *****************
  6832 ;; Defined at:
  6833 ;;		line 141 in file "mcc_generated_files/i2c_driver.c"
  6834 ;; Parameters:    Size  Location     Type
  6835 ;;		None
  6836 ;; Auto vars:     Size  Location     Type
  6837 ;;		None
  6838 ;; Return value:  Size  Location     Type
  6839 ;;                  1    wreg      void 
  6840 ;; Registers used:
  6841 ;;		None
  6842 ;; Tracked objects:
  6843 ;;		On entry : 0/0
  6844 ;;		On exit  : 0/0
  6845 ;;		Unchanged: 0/0
  6846 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6847 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6848 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6849 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6850 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6851 ;;Total ram usage:        0 bytes
  6852 ;; Hardware stack levels used:    1
  6853 ;; Hardware stack levels required when called:    6
  6854 ;; This function calls:
  6855 ;;		Nothing
  6856 ;; This function is called by:
  6857 ;;		_do_I2C_RESET
  6858 ;; This function uses a non-reentrant model
  6859 ;;
  6860                           
  6861                           
  6862                           ;psect for function _i2c_driver_resetBus
  6863  0FFA                     _i2c_driver_resetBus:	
  6864                           
  6865                           ;incstack = 0
  6866                           ; Regs used in _i2c_driver_resetBus: []
  6867  0FFA  0008               	return
  6868  0FFB                     __end_of_i2c_driver_resetBus:	
  6869                           
  6870                           	psect	text38
  6871  07D6                     __ptext38:	
  6872 ;; *************** function _i2c_driver_startRX *****************
  6873 ;; Defined at:
  6874 ;;		line 166 in file "mcc_generated_files/i2c_driver.c"
  6875 ;; Parameters:    Size  Location     Type
  6876 ;;		None
  6877 ;; Auto vars:     Size  Location     Type
  6878 ;;		None
  6879 ;; Return value:  Size  Location     Type
  6880 ;;                  1    wreg      void 
  6881 ;; Registers used:
  6882 ;;		None
  6883 ;; Tracked objects:
  6884 ;;		On entry : 0/0
  6885 ;;		On exit  : 0/0
  6886 ;;		Unchanged: 0/0
  6887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6888 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6889 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6890 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6891 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6892 ;;Total ram usage:        0 bytes
  6893 ;; Hardware stack levels used:    1
  6894 ;; Hardware stack levels required when called:    6
  6895 ;; This function calls:
  6896 ;;		Nothing
  6897 ;; This function is called by:
  6898 ;;		_do_I2C_RCEN
  6899 ;; This function uses a non-reentrant model
  6900 ;;
  6901                           
  6902                           
  6903                           ;psect for function _i2c_driver_startRX
  6904  07D6                     _i2c_driver_startRX:	
  6905                           
  6906                           ;i2c_driver.c: 168: SSP1CON2bits.RCEN = 1;
  6907                           
  6908                           ;incstack = 0
  6909                           ; Regs used in _i2c_driver_startRX: []
  6910  07D6  0024               	movlb	4	; select bank4
  6911  07D7  1596               	bsf	22,3	;volatile
  6912  07D8  0008               	return
  6913  07D9                     __end_of_i2c_driver_startRX:	
  6914                           
  6915                           	psect	text39
  6916  054C                     __ptext39:	
  6917 ;; *************** function _rdBlkRegCompleteHandler *****************
  6918 ;; Defined at:
  6919 ;;		line 134 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  6920 ;; Parameters:    Size  Location     Type
  6921 ;;  p               1    9[BANK0 ] PTR void 
  6922 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  6923 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  6924 ;; Auto vars:     Size  Location     Type
  6925 ;;		None
  6926 ;; Return value:  Size  Location     Type
  6927 ;;                  1    wreg      enum E97
  6928 ;; Registers used:
  6929 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6930 ;; Tracked objects:
  6931 ;;		On entry : 0/0
  6932 ;;		On exit  : 0/0
  6933 ;;		Unchanged: 0/0
  6934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6935 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6936 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6937 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6938 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6939 ;;Total ram usage:        1 bytes
  6940 ;; Hardware stack levels used:    1
  6941 ;; Hardware stack levels required when called:    8
  6942 ;; This function calls:
  6943 ;;		_i2c_setBuffer
  6944 ;;		_i2c_setDataCompleteCallback
  6945 ;; This function is called by:
  6946 ;;		_i2c_readDataBlock
  6947 ;;		_do_I2C_DO_ADDRESS_NACK
  6948 ;;		_do_I2C_TX
  6949 ;;		_do_I2C_RX
  6950 ;;		_do_I2C_TX_EMPTY
  6951 ;;		i1_do_I2C_DO_ADDRESS_NACK
  6952 ;;		i1_do_I2C_TX
  6953 ;;		i1_do_I2C_RX
  6954 ;;		i1_do_I2C_TX_EMPTY
  6955 ;; This function uses a non-reentrant model
  6956 ;;
  6957                           
  6958                           
  6959                           ;psect for function _rdBlkRegCompleteHandler
  6960  054C                     _rdBlkRegCompleteHandler:	
  6961                           
  6962                           ;Skip over the trampoline to the duplicate function for level 1
  6963  054C  1C7E               	btfss	126,0
  6964  054D  2D50               	goto	l2209
  6965  054E  3185  2D83         	ljmp	i1l2595
  6966  0550                     _rdBlkRegCompleteHandler$intlevel0:	
  6967  0550                     l2209:	
  6968                           ;incstack = 0
  6969                           ; Regs used in _rdBlkRegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  6970                           
  6971                           
  6972                           ;i2c_simple_master.c: 136: i2c_setBuffer(((buf_t *)p)->data,((buf_t*)p)->len);
  6973  0550  0020               	movlb	0	; select bank0
  6974  0551  0860               	movf	rdBlkRegCompleteHandler@p,w
  6975  0552  0086               	movwf	6
  6976  0553  0187               	clrf	7
  6977  0554  3F40               	moviw [0]fsr1
  6978  0555  00D7               	movwf	i2c_setBuffer@bufferSize
  6979  0556  3F41               	moviw [1]fsr1
  6980  0557  00D8               	movwf	i2c_setBuffer@bufferSize+1
  6981  0558  0860               	movf	rdBlkRegCompleteHandler@p,w
  6982  0559  3E02               	addlw	2
  6983  055A  0086               	movwf	6
  6984  055B  0187               	clrf	7
  6985  055C  0801               	movf	1,w
  6986  055D  3186  2648  3185   	fcall	_i2c_setBuffer
  6987                           
  6988                           ;i2c_simple_master.c: 137: i2c_setDataCompleteCallback((0),(0));
  6989  0560  3000               	movlw	0
  6990  0561  0020               	movlb	0	; select bank0
  6991  0562  00DC               	movwf	i2c_setDataCompleteCallback@cb
  6992  0563  00DD               	movwf	i2c_setDataCompleteCallback@cb+1
  6993  0564  01DE               	clrf	i2c_setDataCompleteCallback@p
  6994  0565  3186  267E         	fcall	_i2c_setDataCompleteCallback
  6995                           
  6996                           ;i2c_simple_master.c: 138: return i2c_restart_read;
  6997  0567  3002               	movlw	2
  6998  0568  0008               	return
  6999  0569                     __end_of_rdBlkRegCompleteHandler:	
  7000                           
  7001                           	psect	text40
  7002  059A                     __ptext40:	
  7003 ;; *************** function _rd2RegCompleteHandler *****************
  7004 ;; Defined at:
  7005 ;;		line 87 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  7006 ;; Parameters:    Size  Location     Type
  7007 ;;  p               1    9[BANK0 ] PTR void 
  7008 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  7009 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  7010 ;; Auto vars:     Size  Location     Type
  7011 ;;		None
  7012 ;; Return value:  Size  Location     Type
  7013 ;;                  1    wreg      enum E97
  7014 ;; Registers used:
  7015 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7016 ;; Tracked objects:
  7017 ;;		On entry : 0/0
  7018 ;;		On exit  : 0/0
  7019 ;;		Unchanged: 0/0
  7020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7021 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7022 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7023 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7024 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7025 ;;Total ram usage:        1 bytes
  7026 ;; Hardware stack levels used:    1
  7027 ;; Hardware stack levels required when called:    8
  7028 ;; This function calls:
  7029 ;;		_i2c_setBuffer
  7030 ;;		_i2c_setDataCompleteCallback
  7031 ;; This function is called by:
  7032 ;;		_i2c_read2ByteRegister
  7033 ;;		_do_I2C_DO_ADDRESS_NACK
  7034 ;;		_do_I2C_TX
  7035 ;;		_do_I2C_RX
  7036 ;;		_do_I2C_TX_EMPTY
  7037 ;;		i1_do_I2C_DO_ADDRESS_NACK
  7038 ;;		i1_do_I2C_TX
  7039 ;;		i1_do_I2C_RX
  7040 ;;		i1_do_I2C_TX_EMPTY
  7041 ;; This function uses a non-reentrant model
  7042 ;;
  7043                           
  7044                           
  7045                           ;psect for function _rd2RegCompleteHandler
  7046  059A                     _rd2RegCompleteHandler:	
  7047                           
  7048                           ;Skip over the trampoline to the duplicate function for level 1
  7049  059A  1C7E               	btfss	126,0
  7050  059B  2D9E               	goto	l2193
  7051  059C  3186  2E08         	ljmp	i1l2579
  7052  059E                     _rd2RegCompleteHandler$intlevel0:	
  7053  059E                     l2193:	
  7054                           ;incstack = 0
  7055                           ; Regs used in _rd2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  7056                           
  7057                           
  7058                           ;i2c_simple_master.c: 89: i2c_setBuffer(p,2);
  7059  059E  3002               	movlw	2
  7060  059F  0020               	movlb	0	; select bank0
  7061  05A0  00D7               	movwf	i2c_setBuffer@bufferSize
  7062  05A1  3000               	movlw	0
  7063  05A2  00D8               	movwf	i2c_setBuffer@bufferSize+1
  7064  05A3  0860               	movf	rd2RegCompleteHandler@p,w
  7065  05A4  3186  2648  3185   	fcall	_i2c_setBuffer
  7066                           
  7067                           ;i2c_simple_master.c: 90: i2c_setDataCompleteCallback((0),(0));
  7068  05A7  3000               	movlw	0
  7069  05A8  0020               	movlb	0	; select bank0
  7070  05A9  00DC               	movwf	i2c_setDataCompleteCallback@cb
  7071  05AA  00DD               	movwf	i2c_setDataCompleteCallback@cb+1
  7072  05AB  01DE               	clrf	i2c_setDataCompleteCallback@p
  7073  05AC  3186  267E         	fcall	_i2c_setDataCompleteCallback
  7074                           
  7075                           ;i2c_simple_master.c: 91: return i2c_restart_read;
  7076  05AE  3002               	movlw	2
  7077  05AF  0008               	return
  7078  05B0                     __end_of_rd2RegCompleteHandler:	
  7079                           
  7080                           	psect	text41
  7081  05B0                     __ptext41:	
  7082 ;; *************** function _rd1RegCompleteHandler *****************
  7083 ;; Defined at:
  7084 ;;		line 58 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  7085 ;; Parameters:    Size  Location     Type
  7086 ;;  p               1    9[BANK0 ] PTR void 
  7087 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  7088 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  7089 ;; Auto vars:     Size  Location     Type
  7090 ;;		None
  7091 ;; Return value:  Size  Location     Type
  7092 ;;                  1    wreg      enum E97
  7093 ;; Registers used:
  7094 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7095 ;; Tracked objects:
  7096 ;;		On entry : 0/0
  7097 ;;		On exit  : 0/0
  7098 ;;		Unchanged: 0/0
  7099 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7100 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7101 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7102 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7103 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7104 ;;Total ram usage:        1 bytes
  7105 ;; Hardware stack levels used:    1
  7106 ;; Hardware stack levels required when called:    8
  7107 ;; This function calls:
  7108 ;;		_i2c_setBuffer
  7109 ;;		_i2c_setDataCompleteCallback
  7110 ;; This function is called by:
  7111 ;;		_i2c_read1ByteRegister
  7112 ;;		_do_I2C_DO_ADDRESS_NACK
  7113 ;;		_do_I2C_TX
  7114 ;;		_do_I2C_RX
  7115 ;;		_do_I2C_TX_EMPTY
  7116 ;;		i1_do_I2C_DO_ADDRESS_NACK
  7117 ;;		i1_do_I2C_TX
  7118 ;;		i1_do_I2C_RX
  7119 ;;		i1_do_I2C_TX_EMPTY
  7120 ;; This function uses a non-reentrant model
  7121 ;;
  7122                           
  7123                           
  7124                           ;psect for function _rd1RegCompleteHandler
  7125  05B0                     _rd1RegCompleteHandler:	
  7126                           
  7127                           ;Skip over the trampoline to the duplicate function for level 1
  7128  05B0  1C7E               	btfss	126,0
  7129  05B1  2DB4               	goto	l2185
  7130  05B2  3186  2E18         	ljmp	i1l2571
  7131  05B4                     _rd1RegCompleteHandler$intlevel0:	
  7132  05B4                     l2185:	
  7133                           ;incstack = 0
  7134                           ; Regs used in _rd1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  7135                           
  7136                           
  7137                           ;i2c_simple_master.c: 60: i2c_setBuffer(p,1);
  7138  05B4  3001               	movlw	1
  7139  05B5  0020               	movlb	0	; select bank0
  7140  05B6  00D7               	movwf	i2c_setBuffer@bufferSize
  7141  05B7  3000               	movlw	0
  7142  05B8  00D8               	movwf	i2c_setBuffer@bufferSize+1
  7143  05B9  0860               	movf	rd1RegCompleteHandler@p,w
  7144  05BA  3186  2648  3185   	fcall	_i2c_setBuffer
  7145                           
  7146                           ;i2c_simple_master.c: 61: i2c_setDataCompleteCallback((0),(0));
  7147  05BD  3000               	movlw	0
  7148  05BE  0020               	movlb	0	; select bank0
  7149  05BF  00DC               	movwf	i2c_setDataCompleteCallback@cb
  7150  05C0  00DD               	movwf	i2c_setDataCompleteCallback@cb+1
  7151  05C1  01DE               	clrf	i2c_setDataCompleteCallback@p
  7152  05C2  3186  267E         	fcall	_i2c_setDataCompleteCallback
  7153                           
  7154                           ;i2c_simple_master.c: 62: return i2c_restart_read;
  7155  05C4  3002               	movlw	2
  7156  05C5  0008               	return
  7157  05C6                     __end_of_rd1RegCompleteHandler:	
  7158                           
  7159                           	psect	text42
  7160  05C6                     __ptext42:	
  7161 ;; *************** function _wr1RegCompleteHandler *****************
  7162 ;; Defined at:
  7163 ;;		line 31 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  7164 ;; Parameters:    Size  Location     Type
  7165 ;;  p               1    9[BANK0 ] PTR void 
  7166 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  7167 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  7168 ;; Auto vars:     Size  Location     Type
  7169 ;;		None
  7170 ;; Return value:  Size  Location     Type
  7171 ;;                  1    wreg      enum E97
  7172 ;; Registers used:
  7173 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7174 ;; Tracked objects:
  7175 ;;		On entry : 0/0
  7176 ;;		On exit  : 0/0
  7177 ;;		Unchanged: 0/0
  7178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7179 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7180 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7181 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7182 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7183 ;;Total ram usage:        1 bytes
  7184 ;; Hardware stack levels used:    1
  7185 ;; Hardware stack levels required when called:    8
  7186 ;; This function calls:
  7187 ;;		_i2c_setBuffer
  7188 ;;		_i2c_setDataCompleteCallback
  7189 ;; This function is called by:
  7190 ;;		_i2c_write1ByteRegister
  7191 ;;		_do_I2C_DO_ADDRESS_NACK
  7192 ;;		_do_I2C_TX
  7193 ;;		_do_I2C_RX
  7194 ;;		_do_I2C_TX_EMPTY
  7195 ;;		i1_do_I2C_DO_ADDRESS_NACK
  7196 ;;		i1_do_I2C_TX
  7197 ;;		i1_do_I2C_RX
  7198 ;;		i1_do_I2C_TX_EMPTY
  7199 ;; This function uses a non-reentrant model
  7200 ;;
  7201                           
  7202                           
  7203                           ;psect for function _wr1RegCompleteHandler
  7204  05C6                     _wr1RegCompleteHandler:	
  7205                           
  7206                           ;Skip over the trampoline to the duplicate function for level 1
  7207  05C6  1C7E               	btfss	126,0
  7208  05C7  2DCA               	goto	l2177
  7209  05C8  3186  2E28         	ljmp	i1l2563
  7210  05CA                     _wr1RegCompleteHandler$intlevel0:	
  7211  05CA                     l2177:	
  7212                           ;incstack = 0
  7213                           ; Regs used in _wr1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  7214                           
  7215                           
  7216                           ;i2c_simple_master.c: 33: i2c_setBuffer(p,1);
  7217  05CA  3001               	movlw	1
  7218  05CB  0020               	movlb	0	; select bank0
  7219  05CC  00D7               	movwf	i2c_setBuffer@bufferSize
  7220  05CD  3000               	movlw	0
  7221  05CE  00D8               	movwf	i2c_setBuffer@bufferSize+1
  7222  05CF  0860               	movf	wr1RegCompleteHandler@p,w
  7223  05D0  3186  2648  3185   	fcall	_i2c_setBuffer
  7224                           
  7225                           ;i2c_simple_master.c: 34: i2c_setDataCompleteCallback((0),(0));
  7226  05D3  3000               	movlw	0
  7227  05D4  0020               	movlb	0	; select bank0
  7228  05D5  00DC               	movwf	i2c_setDataCompleteCallback@cb
  7229  05D6  00DD               	movwf	i2c_setDataCompleteCallback@cb+1
  7230  05D7  01DE               	clrf	i2c_setDataCompleteCallback@p
  7231  05D8  3186  267E         	fcall	_i2c_setDataCompleteCallback
  7232                           
  7233                           ;i2c_simple_master.c: 35: return i2c_continue;
  7234  05DA  3004               	movlw	4
  7235  05DB  0008               	return
  7236  05DC                     __end_of_wr1RegCompleteHandler:	
  7237                           
  7238                           	psect	text43
  7239  0778                     __ptext43:	
  7240 ;; *************** function _i2c_restartWrite *****************
  7241 ;; Defined at:
  7242 ;;		line 35 in file "mcc_generated_files/drivers/i2c_types.c"
  7243 ;; Parameters:    Size  Location     Type
  7244 ;;  p               1    9[BANK0 ] PTR void 
  7245 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  7246 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  7247 ;; Auto vars:     Size  Location     Type
  7248 ;;		None
  7249 ;; Return value:  Size  Location     Type
  7250 ;;                  1    wreg      enum E96
  7251 ;; Registers used:
  7252 ;;		wreg
  7253 ;; Tracked objects:
  7254 ;;		On entry : 0/0
  7255 ;;		On exit  : 0/0
  7256 ;;		Unchanged: 0/0
  7257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7258 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7259 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7260 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7261 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7262 ;;Total ram usage:        1 bytes
  7263 ;; Hardware stack levels used:    1
  7264 ;; Hardware stack levels required when called:    6
  7265 ;; This function calls:
  7266 ;;		Nothing
  7267 ;; This function is called by:
  7268 ;;		_i2c_writeNBytes
  7269 ;;		_i2c_write1ByteRegister
  7270 ;;		_i2c_read1ByteRegister
  7271 ;;		_i2c_read2ByteRegister
  7272 ;;		_i2c_write2ByteRegister
  7273 ;;		_i2c_readDataBlock
  7274 ;;		_do_I2C_DO_ADDRESS_NACK
  7275 ;;		_do_I2C_TX
  7276 ;;		_do_I2C_RX
  7277 ;;		_do_I2C_TX_EMPTY
  7278 ;;		i1_do_I2C_DO_ADDRESS_NACK
  7279 ;;		i1_do_I2C_TX
  7280 ;;		i1_do_I2C_RX
  7281 ;;		i1_do_I2C_TX_EMPTY
  7282 ;; This function uses a non-reentrant model
  7283 ;;
  7284                           
  7285                           
  7286                           ;psect for function _i2c_restartWrite
  7287  0778                     _i2c_restartWrite:	
  7288                           
  7289                           ;Skip over the trampoline to the duplicate function for level 1
  7290  0778  1C7E               	btfss	126,0
  7291  0779  2F7C               	goto	l2173
  7292  077A  3180  2802         	ljmp	i1l2559
  7293  077C                     _i2c_restartWrite$intlevel0:	
  7294  077C                     l2173:	
  7295                           ;incstack = 0
  7296                           ; Regs used in _i2c_restartWrite: [wreg]
  7297                           
  7298                           
  7299                           ;i2c_types.c: 37: return i2c_restart_write;
  7300  077C  3003               	movlw	3
  7301  077D  0008               	return
  7302  077E                     __end_of_i2c_restartWrite:	
  7303                           
  7304                           	psect	text44
  7305  077E                     __ptext44:	
  7306 ;; *************** function _returnReset *****************
  7307 ;; Defined at:
  7308 ;;		line 448 in file "mcc_generated_files/drivers/i2c_master.c"
  7309 ;; Parameters:    Size  Location     Type
  7310 ;;  p               1    9[BANK0 ] PTR void 
  7311 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  7312 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  7313 ;; Auto vars:     Size  Location     Type
  7314 ;;		None
  7315 ;; Return value:  Size  Location     Type
  7316 ;;                  1    wreg      enum E12171
  7317 ;; Registers used:
  7318 ;;		wreg
  7319 ;; Tracked objects:
  7320 ;;		On entry : 0/0
  7321 ;;		On exit  : 0/0
  7322 ;;		Unchanged: 0/0
  7323 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7324 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7325 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7326 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7327 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7328 ;;Total ram usage:        1 bytes
  7329 ;; Hardware stack levels used:    1
  7330 ;; Hardware stack levels required when called:    6
  7331 ;; This function calls:
  7332 ;;		Nothing
  7333 ;; This function is called by:
  7334 ;;		_i2c_open
  7335 ;;		_do_I2C_DO_ADDRESS_NACK
  7336 ;;		_do_I2C_TX
  7337 ;;		_do_I2C_RX
  7338 ;;		_do_I2C_TX_EMPTY
  7339 ;;		i1_do_I2C_DO_ADDRESS_NACK
  7340 ;;		i1_do_I2C_TX
  7341 ;;		i1_do_I2C_RX
  7342 ;;		i1_do_I2C_TX_EMPTY
  7343 ;; This function uses a non-reentrant model
  7344 ;;
  7345                           
  7346                           
  7347                           ;psect for function _returnReset
  7348  077E                     _returnReset:	
  7349                           
  7350                           ;Skip over the trampoline to the duplicate function for level 1
  7351  077E  1C7E               	btfss	126,0
  7352  077F  2F82               	goto	l2169
  7353  0780  318F  2FFE         	ljmp	i1l2555
  7354  0782                     _returnReset$intlevel0:	
  7355  0782                     l2169:	
  7356                           ;incstack = 0
  7357                           ; Regs used in _returnReset: [wreg]
  7358                           
  7359                           
  7360                           ;i2c_master.c: 450: return i2c_reset_link;
  7361  0782  3005               	movlw	5
  7362  0783  0008               	return
  7363  0784                     __end_of_returnReset:	
  7364                           
  7365                           	psect	text45
  7366  0784                     __ptext45:	
  7367 ;; *************** function _returnStop *****************
  7368 ;; Defined at:
  7369 ;;		line 443 in file "mcc_generated_files/drivers/i2c_master.c"
  7370 ;; Parameters:    Size  Location     Type
  7371 ;;  p               1    9[BANK0 ] PTR void 
  7372 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  7373 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  7374 ;; Auto vars:     Size  Location     Type
  7375 ;;		None
  7376 ;; Return value:  Size  Location     Type
  7377 ;;                  1    wreg      enum E12171
  7378 ;; Registers used:
  7379 ;;		wreg
  7380 ;; Tracked objects:
  7381 ;;		On entry : 0/0
  7382 ;;		On exit  : 0/0
  7383 ;;		Unchanged: 0/0
  7384 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7385 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7386 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7387 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7388 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7389 ;;Total ram usage:        1 bytes
  7390 ;; Hardware stack levels used:    1
  7391 ;; Hardware stack levels required when called:    6
  7392 ;; This function calls:
  7393 ;;		Nothing
  7394 ;; This function is called by:
  7395 ;;		_i2c_open
  7396 ;;		_setCallBack
  7397 ;;		_do_I2C_DO_ADDRESS_NACK
  7398 ;;		_do_I2C_TX
  7399 ;;		_do_I2C_RX
  7400 ;;		_do_I2C_TX_EMPTY
  7401 ;;		i1_do_I2C_DO_ADDRESS_NACK
  7402 ;;		i1_do_I2C_TX
  7403 ;;		i1_do_I2C_RX
  7404 ;;		i1_do_I2C_TX_EMPTY
  7405 ;; This function uses a non-reentrant model
  7406 ;;
  7407                           
  7408                           
  7409                           ;psect for function _returnStop
  7410  0784                     _returnStop:	
  7411                           
  7412                           ;Skip over the trampoline to the duplicate function for level 1
  7413  0784  1C7E               	btfss	126,0
  7414  0785  2F88               	goto	l2165
  7415  0786  318F  2FFC         	ljmp	i1l2551
  7416  0788                     _returnStop$intlevel0:	
  7417  0788                     l2165:	
  7418                           ;incstack = 0
  7419                           ; Regs used in _returnStop: [wreg]
  7420                           
  7421                           
  7422                           ;i2c_master.c: 445: return i2c_stop;
  7423  0788  3001               	movlw	1
  7424  0789  0008               	return
  7425  078A                     __end_of_returnStop:	
  7426                           
  7427                           	psect	text46
  7428  05DC                     __ptext46:	
  7429 ;; *************** function _wr2RegCompleteHandler *****************
  7430 ;; Defined at:
  7431 ;;		line 110 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  7432 ;; Parameters:    Size  Location     Type
  7433 ;;  p               1    9[BANK0 ] PTR void 
  7434 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  7435 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  7436 ;; Auto vars:     Size  Location     Type
  7437 ;;		None
  7438 ;; Return value:  Size  Location     Type
  7439 ;;                  1    wreg      enum E97
  7440 ;; Registers used:
  7441 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7442 ;; Tracked objects:
  7443 ;;		On entry : 0/0
  7444 ;;		On exit  : 0/0
  7445 ;;		Unchanged: 0/0
  7446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7447 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7448 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7449 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7450 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7451 ;;Total ram usage:        1 bytes
  7452 ;; Hardware stack levels used:    1
  7453 ;; Hardware stack levels required when called:    8
  7454 ;; This function calls:
  7455 ;;		_i2c_setBuffer
  7456 ;;		_i2c_setDataCompleteCallback
  7457 ;; This function is called by:
  7458 ;;		_i2c_write2ByteRegister
  7459 ;;		_do_I2C_DO_ADDRESS_NACK
  7460 ;;		_do_I2C_TX
  7461 ;;		_do_I2C_RX
  7462 ;;		_do_I2C_TX_EMPTY
  7463 ;;		i1_do_I2C_DO_ADDRESS_NACK
  7464 ;;		i1_do_I2C_TX
  7465 ;;		i1_do_I2C_RX
  7466 ;;		i1_do_I2C_TX_EMPTY
  7467 ;; This function uses a non-reentrant model
  7468 ;;
  7469                           
  7470                           
  7471                           ;psect for function _wr2RegCompleteHandler
  7472  05DC                     _wr2RegCompleteHandler:	
  7473                           
  7474                           ;Skip over the trampoline to the duplicate function for level 1
  7475  05DC  1C7E               	btfss	126,0
  7476  05DD  2DE0               	goto	l2201
  7477  05DE  3186  2E38         	ljmp	i1l2587
  7478  05E0                     _wr2RegCompleteHandler$intlevel0:	
  7479  05E0                     l2201:	
  7480                           ;incstack = 0
  7481                           ; Regs used in _wr2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  7482                           
  7483                           
  7484                           ;i2c_simple_master.c: 112: i2c_setBuffer(p,2);
  7485  05E0  3002               	movlw	2
  7486  05E1  0020               	movlb	0	; select bank0
  7487  05E2  00D7               	movwf	i2c_setBuffer@bufferSize
  7488  05E3  3000               	movlw	0
  7489  05E4  00D8               	movwf	i2c_setBuffer@bufferSize+1
  7490  05E5  0860               	movf	wr2RegCompleteHandler@p,w
  7491  05E6  3186  2648  3185   	fcall	_i2c_setBuffer
  7492                           
  7493                           ;i2c_simple_master.c: 113: i2c_setDataCompleteCallback((0),(0));
  7494  05E9  3000               	movlw	0
  7495  05EA  0020               	movlb	0	; select bank0
  7496  05EB  00DC               	movwf	i2c_setDataCompleteCallback@cb
  7497  05EC  00DD               	movwf	i2c_setDataCompleteCallback@cb+1
  7498  05ED  01DE               	clrf	i2c_setDataCompleteCallback@p
  7499  05EE  3186  267E         	fcall	_i2c_setDataCompleteCallback
  7500                           
  7501                           ;i2c_simple_master.c: 114: return i2c_continue;
  7502  05F0  3004               	movlw	4
  7503  05F1  0008               	return
  7504  05F2                     __end_of_wr2RegCompleteHandler:	
  7505                           
  7506                           	psect	text47
  7507  067E                     __ptext47:	
  7508 ;; *************** function _i2c_setDataCompleteCallback *****************
  7509 ;; Defined at:
  7510 ;;		line 89 in file "mcc_generated_files/drivers/i2c_master.c"
  7511 ;; Parameters:    Size  Location     Type
  7512 ;;  cb              2    5[BANK0 ] PTR FTN(PTR void ,)enum 
  7513 ;;		 -> rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), rd2RegCompleteHandler(1), rd1RegCompleteHandler(1), 
  7514 ;;		 -> wr1RegCompleteHandler(1), Absolute function(1), 
  7515 ;;  p               1    7[BANK0 ] PTR void 
  7516 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  7517 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  7518 ;; Auto vars:     Size  Location     Type
  7519 ;;		None
  7520 ;; Return value:  Size  Location     Type
  7521 ;;                  1    wreg      void 
  7522 ;; Registers used:
  7523 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7524 ;; Tracked objects:
  7525 ;;		On entry : 0/0
  7526 ;;		On exit  : 0/0
  7527 ;;		Unchanged: 0/0
  7528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7529 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7530 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7531 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7532 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7533 ;;Total ram usage:        4 bytes
  7534 ;; Hardware stack levels used:    1
  7535 ;; Hardware stack levels required when called:    7
  7536 ;; This function calls:
  7537 ;;		_setCallBack
  7538 ;; This function is called by:
  7539 ;;		_wr1RegCompleteHandler
  7540 ;;		_rd1RegCompleteHandler
  7541 ;;		_rd2RegCompleteHandler
  7542 ;;		_wr2RegCompleteHandler
  7543 ;;		_rdBlkRegCompleteHandler
  7544 ;;		_i2c_write1ByteRegister
  7545 ;;		_i2c_read1ByteRegister
  7546 ;;		_i2c_read2ByteRegister
  7547 ;;		_i2c_write2ByteRegister
  7548 ;;		_i2c_readDataBlock
  7549 ;; This function uses a non-reentrant model
  7550 ;;
  7551                           
  7552                           
  7553                           ;psect for function _i2c_setDataCompleteCallback
  7554  067E                     _i2c_setDataCompleteCallback:	
  7555                           
  7556                           ;i2c_master.c: 91: setCallBack(i2c_dataComplete,cb,p);
  7557                           
  7558                           ;incstack = 0
  7559                           ; Regs used in _i2c_setDataCompleteCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  7560  067E  0020               	movlb	0	; select bank0
  7561  067F  085D               	movf	i2c_setDataCompleteCallback@cb+1,w
  7562  0680  00D8               	movwf	setCallBack@cb+1
  7563  0681  085C               	movf	i2c_setDataCompleteCallback@cb,w
  7564  0682  00D7               	movwf	setCallBack@cb
  7565  0683  085E               	movf	i2c_setDataCompleteCallback@p,w
  7566  0684  00DF               	movwf	??_i2c_setDataCompleteCallback
  7567  0685  085F               	movf	??_i2c_setDataCompleteCallback,w
  7568  0686  00D9               	movwf	setCallBack@p
  7569  0687  3000               	movlw	0
  7570  0688  3184  245F         	fcall	_setCallBack
  7571  068A  0008               	return
  7572  068B                     __end_of_i2c_setDataCompleteCallback:	
  7573                           
  7574                           	psect	text48
  7575  045F                     __ptext48:	
  7576 ;; *************** function _setCallBack *****************
  7577 ;; Defined at:
  7578 ;;		line 453 in file "mcc_generated_files/drivers/i2c_master.c"
  7579 ;; Parameters:    Size  Location     Type
  7580 ;;  idx             1    wreg     enum E12355
  7581 ;;  cb              2    0[BANK0 ] PTR FTN(PTR void ,)enum 
  7582 ;;		 -> rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), rd2RegCompleteHandler(1), rd1RegCompleteHandler(1), 
  7583 ;;		 -> wr1RegCompleteHandler(1), i2c_restartWrite(1), Absolute function(1), 
  7584 ;;  p               1    2[BANK0 ] PTR void 
  7585 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  7586 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  7587 ;; Auto vars:     Size  Location     Type
  7588 ;;  idx             1    4[BANK0 ] enum E12355
  7589 ;; Return value:  Size  Location     Type
  7590 ;;                  1    wreg      void 
  7591 ;; Registers used:
  7592 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7593 ;; Tracked objects:
  7594 ;;		On entry : 0/0
  7595 ;;		On exit  : 0/0
  7596 ;;		Unchanged: 0/0
  7597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7598 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7599 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7600 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7601 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7602 ;;Total ram usage:        5 bytes
  7603 ;; Hardware stack levels used:    1
  7604 ;; Hardware stack levels required when called:    6
  7605 ;; This function calls:
  7606 ;;		Nothing
  7607 ;; This function is called by:
  7608 ;;		_i2c_setDataCompleteCallback
  7609 ;;		_i2c_setAddressNACKCallback
  7610 ;;		_i2c_setWriteCollisionCallback
  7611 ;;		_i2c_setDataNACKCallback
  7612 ;;		_i2c_setTimeOutCallback
  7613 ;; This function uses a non-reentrant model
  7614 ;;
  7615                           
  7616                           
  7617                           ;psect for function _setCallBack
  7618  045F                     _setCallBack:	
  7619                           
  7620                           ;incstack = 0
  7621                           ; Regs used in _setCallBack: [wreg+fsr1l+fsr1h+status,2+status,0]
  7622                           ;setCallBack@idx stored from wreg
  7623  045F  0020               	movlb	0	; select bank0
  7624  0460  00DB               	movwf	setCallBack@idx
  7625                           
  7626                           ;i2c_master.c: 455: if(cb)
  7627  0461  0857               	movf	setCallBack@cb,w
  7628  0462  0458               	iorwf	setCallBack@cb+1,w
  7629  0463  1903               	btfsc	3,2
  7630  0464  2C76               	goto	l2097
  7631                           
  7632                           ;i2c_master.c: 456: {
  7633                           ;i2c_master.c: 457: i2c_status.callbackTable[idx] = cb;
  7634  0465  355B               	lslf	setCallBack@idx,w
  7635  0466  3E2B               	addlw	(low ((_i2c_status| 0+11)))& (0+255)
  7636  0467  0086               	movwf	6
  7637  0468  0187               	clrf	7
  7638  0469  0857               	movf	setCallBack@cb,w
  7639  046A  3FC0               	movwi [0]fsr1
  7640  046B  0858               	movf	setCallBack@cb+1,w
  7641  046C  3FC1               	movwi [1]fsr1
  7642                           
  7643                           ;i2c_master.c: 458: i2c_status.callbackPayload[idx] = p;
  7644  046D  0859               	movf	setCallBack@p,w
  7645  046E  00DA               	movwf	??_setCallBack
  7646  046F  085B               	movf	setCallBack@idx,w
  7647  0470  3E37               	addlw	(low ((_i2c_status| 0+23)))& (0+255)
  7648  0471  0086               	movwf	6
  7649  0472  0187               	clrf	7
  7650  0473  085A               	movf	??_setCallBack,w
  7651  0474  0081               	movwf	1
  7652                           
  7653                           ;i2c_master.c: 459: }
  7654  0475  0008               	return
  7655  0476                     l2097:	
  7656                           
  7657                           ;i2c_master.c: 460: else
  7658                           ;i2c_master.c: 461: {
  7659                           ;i2c_master.c: 462: i2c_status.callbackTable[idx] = returnStop;
  7660  0476  355B               	lslf	setCallBack@idx,w
  7661  0477  3E2B               	addlw	(low ((_i2c_status| 0+11)))& (0+255)
  7662  0478  0086               	movwf	6
  7663  0479  0187               	clrf	7
  7664  047A  3084               	movlw	low _returnStop
  7665  047B  3FC0               	movwi [0]fsr1
  7666  047C  3007               	movlw	high _returnStop
  7667  047D  3FC1               	movwi [1]fsr1
  7668                           
  7669                           ;i2c_master.c: 463: i2c_status.callbackPayload[idx] = (0);
  7670  047E  085B               	movf	setCallBack@idx,w
  7671  047F  3E37               	addlw	(low ((_i2c_status| 0+23)))& (0+255)
  7672  0480  0086               	movwf	6
  7673  0481  0187               	clrf	7
  7674  0482  0181               	clrf	1
  7675  0483  0008               	return
  7676  0484                     __end_of_setCallBack:	
  7677                           
  7678                           	psect	text49
  7679  0648                     __ptext49:	
  7680 ;; *************** function _i2c_setBuffer *****************
  7681 ;; Defined at:
  7682 ;;		line 184 in file "mcc_generated_files/drivers/i2c_master.c"
  7683 ;; Parameters:    Size  Location     Type
  7684 ;;  buffer          1    wreg     PTR void 
  7685 ;;		 -> i2c_readDataBlock@reg(1), i2c_readDataBlock@d(3), i2c_write2ByteRegister@reg(1), i2c_write2ByteRegister@data(2),
      + 
  7686 ;;		 -> i2c_read2ByteRegister@reg(1), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@reg(1), i2c_read1ByteRegist
      +er@d2(1), 
  7687 ;;		 -> i2c_write1ByteRegister@reg(1), i2c_write1ByteRegister@data(1), NULL(0), writebuffer(17), 
  7688 ;;  bufferSize      2    0[BANK0 ] unsigned int 
  7689 ;; Auto vars:     Size  Location     Type
  7690 ;;  buffer          1    3[BANK0 ] PTR void 
  7691 ;;		 -> i2c_readDataBlock@reg(1), i2c_readDataBlock@d(3), i2c_write2ByteRegister@reg(1), i2c_write2ByteRegister@data(2),
      + 
  7692 ;;		 -> i2c_read2ByteRegister@reg(1), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@reg(1), i2c_read1ByteRegist
      +er@d2(1), 
  7693 ;;		 -> i2c_write1ByteRegister@reg(1), i2c_write1ByteRegister@data(1), NULL(0), writebuffer(17), 
  7694 ;; Return value:  Size  Location     Type
  7695 ;;                  1    wreg      void 
  7696 ;; Registers used:
  7697 ;;		wreg
  7698 ;; Tracked objects:
  7699 ;;		On entry : 0/0
  7700 ;;		On exit  : 0/0
  7701 ;;		Unchanged: 0/0
  7702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7703 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7704 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7705 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7706 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7707 ;;Total ram usage:        4 bytes
  7708 ;; Hardware stack levels used:    1
  7709 ;; Hardware stack levels required when called:    6
  7710 ;; This function calls:
  7711 ;;		Nothing
  7712 ;; This function is called by:
  7713 ;;		_wr1RegCompleteHandler
  7714 ;;		_i2c_writeNBytes
  7715 ;;		_rd1RegCompleteHandler
  7716 ;;		_rd2RegCompleteHandler
  7717 ;;		_wr2RegCompleteHandler
  7718 ;;		_rdBlkRegCompleteHandler
  7719 ;;		_i2c_write1ByteRegister
  7720 ;;		_i2c_read1ByteRegister
  7721 ;;		_i2c_read2ByteRegister
  7722 ;;		_i2c_write2ByteRegister
  7723 ;;		_i2c_readDataBlock
  7724 ;;		_i2c_readNBytes
  7725 ;; This function uses a non-reentrant model
  7726 ;;
  7727                           
  7728                           
  7729                           ;psect for function _i2c_setBuffer
  7730  0648                     _i2c_setBuffer:	
  7731                           
  7732                           ;incstack = 0
  7733                           ; Regs used in _i2c_setBuffer: [wreg]
  7734                           ;i2c_setBuffer@buffer stored from wreg
  7735  0648  0020               	movlb	0	; select bank0
  7736  0649  00DA               	movwf	i2c_setBuffer@buffer
  7737                           
  7738                           ;i2c_master.c: 186: if(i2c_status.bufferFree)
  7739  064A  1D20               	btfss	_i2c_status,2
  7740  064B  0008               	return
  7741                           
  7742                           ;i2c_master.c: 187: {
  7743                           ;i2c_master.c: 188: i2c_status.data_ptr = buffer;
  7744  064C  085A               	movf	i2c_setBuffer@buffer,w
  7745  064D  00D9               	movwf	??_i2c_setBuffer
  7746  064E  0859               	movf	??_i2c_setBuffer,w
  7747  064F  00A2               	movwf	low ((_i2c_status| 0+2))
  7748                           
  7749                           ;i2c_master.c: 189: i2c_status.data_length = bufferSize;
  7750  0650  0858               	movf	i2c_setBuffer@bufferSize+1,w
  7751  0651  00A4               	movwf	_i2c_status+4
  7752  0652  0857               	movf	i2c_setBuffer@bufferSize,w
  7753  0653  00A3               	movwf	_i2c_status+3
  7754                           
  7755                           ;i2c_master.c: 190: i2c_status.bufferFree = 0;
  7756  0654  1120               	bcf	_i2c_status,2
  7757  0655  0008               	return
  7758  0656                     __end_of_i2c_setBuffer:	
  7759                           
  7760                           	psect	text50
  7761  07D9                     __ptext50:	
  7762 ;; *************** function _i2c_driver_stop *****************
  7763 ;; Defined at:
  7764 ;;		line 156 in file "mcc_generated_files/i2c_driver.c"
  7765 ;; Parameters:    Size  Location     Type
  7766 ;;		None
  7767 ;; Auto vars:     Size  Location     Type
  7768 ;;		None
  7769 ;; Return value:  Size  Location     Type
  7770 ;;                  1    wreg      void 
  7771 ;; Registers used:
  7772 ;;		None
  7773 ;; Tracked objects:
  7774 ;;		On entry : 0/0
  7775 ;;		On exit  : 0/0
  7776 ;;		Unchanged: 0/0
  7777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7778 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7779 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7780 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7781 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7782 ;;Total ram usage:        0 bytes
  7783 ;; Hardware stack levels used:    1
  7784 ;; Hardware stack levels required when called:    6
  7785 ;; This function calls:
  7786 ;;		Nothing
  7787 ;; This function is called by:
  7788 ;;		_do_I2C_SEND_STOP
  7789 ;; This function uses a non-reentrant model
  7790 ;;
  7791                           
  7792                           
  7793                           ;psect for function _i2c_driver_stop
  7794  07D9                     _i2c_driver_stop:	
  7795                           
  7796                           ;i2c_driver.c: 158: SSP1CON2bits.PEN = 1;
  7797                           
  7798                           ;incstack = 0
  7799                           ; Regs used in _i2c_driver_stop: []
  7800  07D9  0024               	movlb	4	; select bank4
  7801  07DA  1516               	bsf	22,2	;volatile
  7802  07DB  0008               	return
  7803  07DC                     __end_of_i2c_driver_stop:	
  7804                           
  7805                           	psect	text51
  7806  07DC                     __ptext51:	
  7807 ;; *************** function _i2c_driver_restart *****************
  7808 ;; Defined at:
  7809 ;;		line 151 in file "mcc_generated_files/i2c_driver.c"
  7810 ;; Parameters:    Size  Location     Type
  7811 ;;		None
  7812 ;; Auto vars:     Size  Location     Type
  7813 ;;		None
  7814 ;; Return value:  Size  Location     Type
  7815 ;;                  1    wreg      void 
  7816 ;; Registers used:
  7817 ;;		None
  7818 ;; Tracked objects:
  7819 ;;		On entry : 0/0
  7820 ;;		On exit  : 0/0
  7821 ;;		Unchanged: 0/0
  7822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7823 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7824 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7825 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7826 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7827 ;;Total ram usage:        0 bytes
  7828 ;; Hardware stack levels used:    1
  7829 ;; Hardware stack levels required when called:    6
  7830 ;; This function calls:
  7831 ;;		Nothing
  7832 ;; This function is called by:
  7833 ;;		_do_I2C_SEND_RESTART_READ
  7834 ;;		_do_I2C_SEND_RESTART_WRITE
  7835 ;;		_do_I2C_SEND_RESTART
  7836 ;; This function uses a non-reentrant model
  7837 ;;
  7838                           
  7839                           
  7840                           ;psect for function _i2c_driver_restart
  7841  07DC                     _i2c_driver_restart:	
  7842                           
  7843                           ;i2c_driver.c: 153: SSP1CON2bits.RSEN = 1;
  7844                           
  7845                           ;incstack = 0
  7846                           ; Regs used in _i2c_driver_restart: []
  7847  07DC  0024               	movlb	4	; select bank4
  7848  07DD  1496               	bsf	22,1	;volatile
  7849  07DE  0008               	return
  7850  07DF                     __end_of_i2c_driver_restart:	
  7851                           
  7852                           	psect	text52
  7853  07A8                     __ptext52:	
  7854 ;; *************** function _i2c_driver_sendACK *****************
  7855 ;; Defined at:
  7856 ;;		line 196 in file "mcc_generated_files/i2c_driver.c"
  7857 ;; Parameters:    Size  Location     Type
  7858 ;;		None
  7859 ;; Auto vars:     Size  Location     Type
  7860 ;;		None
  7861 ;; Return value:  Size  Location     Type
  7862 ;;                  1    wreg      void 
  7863 ;; Registers used:
  7864 ;;		None
  7865 ;; Tracked objects:
  7866 ;;		On entry : 0/0
  7867 ;;		On exit  : 0/0
  7868 ;;		Unchanged: 0/0
  7869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7870 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7871 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7872 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7873 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7874 ;;Total ram usage:        0 bytes
  7875 ;; Hardware stack levels used:    1
  7876 ;; Hardware stack levels required when called:    6
  7877 ;; This function calls:
  7878 ;;		Nothing
  7879 ;; This function is called by:
  7880 ;;		_do_I2C_DO_ACK
  7881 ;;		_do_I2C_RX
  7882 ;; This function uses a non-reentrant model
  7883 ;;
  7884                           
  7885                           
  7886                           ;psect for function _i2c_driver_sendACK
  7887  07A8                     _i2c_driver_sendACK:	
  7888                           
  7889                           ;i2c_driver.c: 198: SSP1CON2bits.ACKDT = 0;
  7890                           
  7891                           ;incstack = 0
  7892                           ; Regs used in _i2c_driver_sendACK: []
  7893  07A8  0024               	movlb	4	; select bank4
  7894  07A9  1296               	bcf	22,5	;volatile
  7895                           
  7896                           ;i2c_driver.c: 199: SSP1CON2bits.ACKEN = 1;
  7897  07AA  1616               	bsf	22,4	;volatile
  7898  07AB  0008               	return
  7899  07AC                     __end_of_i2c_driver_sendACK:	
  7900                           
  7901                           	psect	text53
  7902  07DF                     __ptext53:	
  7903 ;; *************** function _i2c_driver_start *****************
  7904 ;; Defined at:
  7905 ;;		line 146 in file "mcc_generated_files/i2c_driver.c"
  7906 ;; Parameters:    Size  Location     Type
  7907 ;;		None
  7908 ;; Auto vars:     Size  Location     Type
  7909 ;;		None
  7910 ;; Return value:  Size  Location     Type
  7911 ;;                  1    wreg      void 
  7912 ;; Registers used:
  7913 ;;		None
  7914 ;; Tracked objects:
  7915 ;;		On entry : 0/0
  7916 ;;		On exit  : 0/0
  7917 ;;		Unchanged: 0/0
  7918 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7919 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7920 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7921 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7922 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7923 ;;Total ram usage:        0 bytes
  7924 ;; Hardware stack levels used:    1
  7925 ;; Hardware stack levels required when called:    6
  7926 ;; This function calls:
  7927 ;;		Nothing
  7928 ;; This function is called by:
  7929 ;;		_i2c_masterOperation
  7930 ;; This function uses a non-reentrant model
  7931 ;;
  7932                           
  7933                           
  7934                           ;psect for function _i2c_driver_start
  7935  07DF                     _i2c_driver_start:	
  7936                           
  7937                           ;i2c_driver.c: 148: SSP1CON2bits.SEN = 1;
  7938                           
  7939                           ;incstack = 0
  7940                           ; Regs used in _i2c_driver_start: []
  7941  07DF  0024               	movlb	4	; select bank4
  7942  07E0  1416               	bsf	22,0	;volatile
  7943  07E1  0008               	return
  7944  07E2                     __end_of_i2c_driver_start:	
  7945                           
  7946                           	psect	text54
  7947  05F2                     __ptext54:	
  7948 ;; *************** function _i2c_close *****************
  7949 ;; Defined at:
  7950 ;;		line 162 in file "mcc_generated_files/drivers/i2c_master.c"
  7951 ;; Parameters:    Size  Location     Type
  7952 ;;		None
  7953 ;; Auto vars:     Size  Location     Type
  7954 ;;  ret             1    1[BANK0 ] enum E12166
  7955 ;; Return value:  Size  Location     Type
  7956 ;;                  1    wreg      enum E12166
  7957 ;; Registers used:
  7958 ;;		wreg, status,2, status,0, pclath, cstack
  7959 ;; Tracked objects:
  7960 ;;		On entry : 0/0
  7961 ;;		On exit  : 0/0
  7962 ;;		Unchanged: 0/0
  7963 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7964 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7965 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7966 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7967 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7968 ;;Total ram usage:        2 bytes
  7969 ;; Hardware stack levels used:    1
  7970 ;; Hardware stack levels required when called:    7
  7971 ;; This function calls:
  7972 ;;		_mssp_clearIRQ
  7973 ;;		_mssp_disableIRQ
  7974 ;; This function is called by:
  7975 ;;		_i2c_writeNBytes
  7976 ;;		_i2c_write1ByteRegister
  7977 ;;		_i2c_read1ByteRegister
  7978 ;;		_i2c_read2ByteRegister
  7979 ;;		_i2c_write2ByteRegister
  7980 ;;		_i2c_readDataBlock
  7981 ;;		_i2c_readNBytes
  7982 ;; This function uses a non-reentrant model
  7983 ;;
  7984                           
  7985                           
  7986                           ;psect for function _i2c_close
  7987  05F2                     _i2c_close:	
  7988                           
  7989                           ;i2c_master.c: 164: i2c_error_t ret = I2C_BUSY;
  7990                           
  7991                           ;incstack = 0
  7992                           ; Regs used in _i2c_close: [wreg+status,2+status,0+pclath+cstack]
  7993  05F2  0020               	movlb	0	; select bank0
  7994  05F3  01D8               	clrf	i2c_close@ret
  7995  05F4  0AD8               	incf	i2c_close@ret,f
  7996                           
  7997                           ;i2c_master.c: 165: if(!i2c_status.busy)
  7998  05F5  1820               	btfsc	_i2c_status,0
  7999  05F6  2E06               	goto	l393
  8000                           
  8001                           ;i2c_master.c: 166: {
  8002                           ;i2c_master.c: 167: i2c_status.inUse = 0;
  8003  05F7  10A0               	bcf	_i2c_status,1
  8004                           
  8005                           ;i2c_master.c: 169: i2c_status.address = 0xff;
  8006  05F8  30FF               	movlw	255
  8007  05F9  00D7               	movwf	??_i2c_close
  8008  05FA  0857               	movf	??_i2c_close,w
  8009  05FB  00A1               	movwf	_i2c_status+1
  8010                           
  8011                           ;i2c_master.c: 170: mssp_clearIRQ();
  8012  05FC  3187  27E5  3185   	fcall	_mssp_clearIRQ
  8013                           
  8014                           ;i2c_master.c: 171: mssp_disableIRQ();
  8015  05FF  3187  27E2         	fcall	_mssp_disableIRQ
  8016                           
  8017                           ;i2c_master.c: 172: ret = i2c_status.error;
  8018  0601  0020               	movlb	0	; select bank0
  8019  0602  082A               	movf	_i2c_status+10,w
  8020  0603  00D7               	movwf	??_i2c_close
  8021  0604  0857               	movf	??_i2c_close,w
  8022  0605  00D8               	movwf	i2c_close@ret
  8023  0606                     l393:	
  8024                           
  8025                           ;i2c_master.c: 173: }
  8026                           ;i2c_master.c: 174: return ret;
  8027  0606  0858               	movf	i2c_close@ret,w
  8028  0607  0008               	return
  8029  0608                     __end_of_i2c_close:	
  8030                           
  8031                           	psect	text55
  8032  07E2                     __ptext55:	
  8033 ;; *************** function _mssp_disableIRQ *****************
  8034 ;; Defined at:
  8035 ;;		line 48 in file "mcc_generated_files/i2c_driver.c"
  8036 ;; Parameters:    Size  Location     Type
  8037 ;;		None
  8038 ;; Auto vars:     Size  Location     Type
  8039 ;;		None
  8040 ;; Return value:  Size  Location     Type
  8041 ;;                  1    wreg      void 
  8042 ;; Registers used:
  8043 ;;		None
  8044 ;; Tracked objects:
  8045 ;;		On entry : 0/0
  8046 ;;		On exit  : 0/0
  8047 ;;		Unchanged: 0/0
  8048 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8049 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8050 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8051 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8052 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8053 ;;Total ram usage:        0 bytes
  8054 ;; Hardware stack levels used:    1
  8055 ;; Hardware stack levels required when called:    6
  8056 ;; This function calls:
  8057 ;;		Nothing
  8058 ;; This function is called by:
  8059 ;;		_i2c_close
  8060 ;;		_i2c_setTimeOut
  8061 ;; This function uses a non-reentrant model
  8062 ;;
  8063                           
  8064                           
  8065                           ;psect for function _mssp_disableIRQ
  8066  07E2                     _mssp_disableIRQ:	
  8067                           
  8068                           ;i2c_driver.c: 50: PIE1bits.SSP1IE = 0;
  8069                           
  8070                           ;incstack = 0
  8071                           ; Regs used in _mssp_disableIRQ: []
  8072  07E2  0021               	movlb	1	; select bank1
  8073  07E3  1190               	bcf	16,3	;volatile
  8074  07E4  0008               	return
  8075  07E5                     __end_of_mssp_disableIRQ:	
  8076                           
  8077                           	psect	text56
  8078  07E5                     __ptext56:	
  8079 ;; *************** function _mssp_clearIRQ *****************
  8080 ;; Defined at:
  8081 ;;		line 53 in file "mcc_generated_files/i2c_driver.c"
  8082 ;; Parameters:    Size  Location     Type
  8083 ;;		None
  8084 ;; Auto vars:     Size  Location     Type
  8085 ;;		None
  8086 ;; Return value:  Size  Location     Type
  8087 ;;                  1    wreg      void 
  8088 ;; Registers used:
  8089 ;;		None
  8090 ;; Tracked objects:
  8091 ;;		On entry : 0/0
  8092 ;;		On exit  : 0/0
  8093 ;;		Unchanged: 0/0
  8094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8095 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8096 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8097 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8098 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8099 ;;Total ram usage:        0 bytes
  8100 ;; Hardware stack levels used:    1
  8101 ;; Hardware stack levels required when called:    6
  8102 ;; This function calls:
  8103 ;;		Nothing
  8104 ;; This function is called by:
  8105 ;;		_i2c_open
  8106 ;;		_i2c_close
  8107 ;;		_i2c_ISR
  8108 ;; This function uses a non-reentrant model
  8109 ;;
  8110                           
  8111                           
  8112                           ;psect for function _mssp_clearIRQ
  8113  07E5                     _mssp_clearIRQ:	
  8114                           
  8115                           ;i2c_driver.c: 55: PIR1bits.SSP1IF = 0;
  8116                           
  8117                           ;incstack = 0
  8118                           ; Regs used in _mssp_clearIRQ: []
  8119  07E5  0020               	movlb	0	; select bank0
  8120  07E6  1190               	bcf	16,3	;volatile
  8121  07E7  0008               	return
  8122  07E8                     __end_of_mssp_clearIRQ:	
  8123                           
  8124                           	psect	text57
  8125  0050                     __ptext57:	
  8126 ;; *************** function _drawPixel *****************
  8127 ;; Defined at:
  8128 ;;		line 77 in file "main.c"
  8129 ;; Parameters:    Size  Location     Type
  8130 ;;  x               1    wreg     unsigned char 
  8131 ;;  y               1    0[BANK0 ] unsigned char 
  8132 ;;  color           1    1[BANK0 ] unsigned char 
  8133 ;; Auto vars:     Size  Location     Type
  8134 ;;  x               1    8[BANK0 ] unsigned char 
  8135 ;; Return value:  Size  Location     Type
  8136 ;;                  1    wreg      void 
  8137 ;; Registers used:
  8138 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8139 ;; Tracked objects:
  8140 ;;		On entry : 0/0
  8141 ;;		On exit  : 0/0
  8142 ;;		Unchanged: 0/0
  8143 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8144 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8145 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8146 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8147 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8148 ;;Total ram usage:        9 bytes
  8149 ;; Hardware stack levels used:    1
  8150 ;; Hardware stack levels required when called:    6
  8151 ;; This function calls:
  8152 ;;		Nothing
  8153 ;; This function is called by:
  8154 ;;		_main
  8155 ;; This function uses a non-reentrant model
  8156 ;;
  8157                           
  8158                           
  8159                           ;psect for function _drawPixel
  8160  0050                     _drawPixel:	
  8161                           
  8162                           ;incstack = 0
  8163                           ; Regs used in _drawPixel: [wreg+fsr1l+fsr1h+status,2+status,0]
  8164                           ;drawPixel@x stored from wreg
  8165  0050  0020               	movlb	0	; select bank0
  8166  0051  00DF               	movwf	drawPixel@x
  8167                           
  8168                           ;main.c: 78: if (color == 1) {
  8169  0052  0358               	decf	drawPixel@color,w
  8170  0053  1D03               	btfss	3,2
  8171  0054  2880               	goto	l2853
  8172                           
  8173                           ;main.c: 79: pixelbuffer[y] |= 1 << x;
  8174  0055  3001               	movlw	1
  8175  0056  00D9               	movwf	??_drawPixel
  8176  0057  3000               	movlw	0
  8177  0058  00DA               	movwf	??_drawPixel+1
  8178  0059  0A5F               	incf	drawPixel@x,w
  8179  005A  285D               	goto	u1174
  8180  005B                     u1175:	
  8181  005B  35D9               	lslf	??_drawPixel,f
  8182  005C  0DDA               	rlf	??_drawPixel+1,f
  8183  005D                     u1174:	
  8184  005D  0B89               	decfsz	9,f
  8185  005E  285B               	goto	u1175
  8186  005F  3557               	lslf	drawPixel@y,w
  8187  0060  3E3D               	addlw	(low (_pixelbuffer| 0))& (0+255)
  8188  0061  0086               	movwf	6
  8189  0062  0187               	clrf	7
  8190  0063  0859               	movf	??_drawPixel,w
  8191  0064  0481               	iorwf	1,f
  8192  0065  3141               	addfsr 1,1
  8193  0066  085A               	movf	??_drawPixel+1,w
  8194  0067  0481               	iorwf	1,f
  8195                           
  8196                           ;main.c: 80: pixelbuffer[y] &= ~(1 << (x + 8));
  8197  0068  3001               	movlw	1
  8198  0069  00D9               	movwf	??_drawPixel
  8199  006A  3000               	movlw	0
  8200  006B  00DA               	movwf	??_drawPixel+1
  8201  006C  085F               	movf	drawPixel@x,w
  8202  006D  3E08               	addlw	8
  8203  006E  0A89               	incf	9,f
  8204  006F  2872               	goto	u1184
  8205  0070                     u1185:	
  8206  0070  35D9               	lslf	??_drawPixel,f
  8207  0071  0DDA               	rlf	??_drawPixel+1,f
  8208  0072                     u1184:	
  8209  0072  0B89               	decfsz	9,f
  8210  0073  2870               	goto	u1185
  8211  0074  09D9               	comf	??_drawPixel,f
  8212  0075  09DA               	comf	??_drawPixel+1,f
  8213  0076  3557               	lslf	drawPixel@y,w
  8214  0077  3E3D               	addlw	(low (_pixelbuffer| 0))& (0+255)
  8215  0078  0086               	movwf	6
  8216  0079  0187               	clrf	7
  8217  007A  0859               	movf	??_drawPixel,w
  8218  007B  0581               	andwf	1,f
  8219  007C  3141               	addfsr 1,1
  8220  007D  085A               	movf	??_drawPixel+1,w
  8221  007E  0581               	andwf	1,f
  8222                           
  8223                           ;main.c: 81: } else if (color == 2) {
  8224  007F  0008               	return
  8225  0080                     l2853:	
  8226  0080  3002               	movlw	2
  8227  0081  0658               	xorwf	drawPixel@color,w
  8228  0082  1D03               	btfss	3,2
  8229  0083  28AF               	goto	l2857
  8230                           
  8231                           ;main.c: 82: pixelbuffer[y] |= 1 << (x + 8);
  8232  0084  3001               	movlw	1
  8233  0085  00D9               	movwf	??_drawPixel
  8234  0086  3000               	movlw	0
  8235  0087  00DA               	movwf	??_drawPixel+1
  8236  0088  085F               	movf	drawPixel@x,w
  8237  0089  3E08               	addlw	8
  8238  008A  0A89               	incf	9,f
  8239  008B  288E               	goto	u1204
  8240  008C                     u1205:	
  8241  008C  35D9               	lslf	??_drawPixel,f
  8242  008D  0DDA               	rlf	??_drawPixel+1,f
  8243  008E                     u1204:	
  8244  008E  0B89               	decfsz	9,f
  8245  008F  288C               	goto	u1205
  8246  0090  3557               	lslf	drawPixel@y,w
  8247  0091  3E3D               	addlw	(low (_pixelbuffer| 0))& (0+255)
  8248  0092  0086               	movwf	6
  8249  0093  0187               	clrf	7
  8250  0094  0859               	movf	??_drawPixel,w
  8251  0095  0481               	iorwf	1,f
  8252  0096  3141               	addfsr 1,1
  8253  0097  085A               	movf	??_drawPixel+1,w
  8254  0098  0481               	iorwf	1,f
  8255                           
  8256                           ;main.c: 83: pixelbuffer[y] &= ~(1 << x);
  8257  0099  3001               	movlw	1
  8258  009A  00D9               	movwf	??_drawPixel
  8259  009B  3000               	movlw	0
  8260  009C  00DA               	movwf	??_drawPixel+1
  8261  009D  0A5F               	incf	drawPixel@x,w
  8262  009E  28A1               	goto	u1214
  8263  009F                     u1215:	
  8264  009F  35D9               	lslf	??_drawPixel,f
  8265  00A0  0DDA               	rlf	??_drawPixel+1,f
  8266  00A1                     u1214:	
  8267  00A1  0B89               	decfsz	9,f
  8268  00A2  289F               	goto	u1215
  8269  00A3  09D9               	comf	??_drawPixel,f
  8270  00A4  09DA               	comf	??_drawPixel+1,f
  8271  00A5  3557               	lslf	drawPixel@y,w
  8272  00A6  3E3D               	addlw	(low (_pixelbuffer| 0))& (0+255)
  8273  00A7  0086               	movwf	6
  8274  00A8  0187               	clrf	7
  8275  00A9  0859               	movf	??_drawPixel,w
  8276  00AA  0581               	andwf	1,f
  8277  00AB  3141               	addfsr 1,1
  8278  00AC  085A               	movf	??_drawPixel+1,w
  8279  00AD  0581               	andwf	1,f
  8280                           
  8281                           ;main.c: 84: } else if (color == 3) {
  8282  00AE  0008               	return
  8283  00AF                     l2857:	
  8284  00AF  3003               	movlw	3
  8285  00B0  0658               	xorwf	drawPixel@color,w
  8286  00B1  1D03               	btfss	3,2
  8287  00B2  28D9               	goto	l2861
  8288                           
  8289                           ;main.c: 85: pixelbuffer[y] |= (1 << (x + 8)) | (1 << x);
  8290  00B3  3001               	movlw	1
  8291  00B4  00D9               	movwf	??_drawPixel
  8292  00B5  3000               	movlw	0
  8293  00B6  00DA               	movwf	??_drawPixel+1
  8294  00B7  0A5F               	incf	drawPixel@x,w
  8295  00B8  28BB               	goto	u1234
  8296  00B9                     u1235:	
  8297  00B9  35D9               	lslf	??_drawPixel,f
  8298  00BA  0DDA               	rlf	??_drawPixel+1,f
  8299  00BB                     u1234:	
  8300  00BB  0B89               	decfsz	9,f
  8301  00BC  28B9               	goto	u1235
  8302  00BD  3001               	movlw	1
  8303  00BE  00DB               	movwf	??_drawPixel+2
  8304  00BF  3000               	movlw	0
  8305  00C0  00DC               	movwf	??_drawPixel+3
  8306  00C1  085F               	movf	drawPixel@x,w
  8307  00C2  3E08               	addlw	8
  8308  00C3  0A89               	incf	9,f
  8309  00C4  28C7               	goto	u1244
  8310  00C5                     u1245:	
  8311  00C5  35DB               	lslf	??_drawPixel+2,f
  8312  00C6  0DDC               	rlf	??_drawPixel+3,f
  8313  00C7                     u1244:	
  8314  00C7  0B89               	decfsz	9,f
  8315  00C8  28C5               	goto	u1245
  8316  00C9  0859               	movf	??_drawPixel,w
  8317  00CA  045B               	iorwf	??_drawPixel+2,w
  8318  00CB  00DD               	movwf	??_drawPixel+4
  8319  00CC  085A               	movf	??_drawPixel+1,w
  8320  00CD  045C               	iorwf	??_drawPixel+3,w
  8321  00CE  00DE               	movwf	??_drawPixel+5
  8322  00CF  3557               	lslf	drawPixel@y,w
  8323  00D0  3E3D               	addlw	(low (_pixelbuffer| 0))& (0+255)
  8324  00D1  0086               	movwf	6
  8325  00D2  0187               	clrf	7
  8326  00D3  085D               	movf	??_drawPixel+4,w
  8327  00D4  0481               	iorwf	1,f
  8328  00D5  3141               	addfsr 1,1
  8329  00D6  085E               	movf	??_drawPixel+5,w
  8330  00D7  0481               	iorwf	1,f
  8331                           
  8332                           ;main.c: 86: } else if (color == 0) {
  8333  00D8  0008               	return
  8334  00D9                     l2861:	
  8335  00D9  0858               	movf	drawPixel@color,w
  8336  00DA  1D03               	btfss	3,2
  8337  00DB  0008               	return
  8338                           
  8339                           ;main.c: 87: pixelbuffer[y] &= ~(1 << x) & ~(1 << (x + 8));
  8340  00DC  3001               	movlw	1
  8341  00DD  00D9               	movwf	??_drawPixel
  8342  00DE  3000               	movlw	0
  8343  00DF  00DA               	movwf	??_drawPixel+1
  8344  00E0  085F               	movf	drawPixel@x,w
  8345  00E1  3E08               	addlw	8
  8346  00E2  0A89               	incf	9,f
  8347  00E3  28E6               	goto	u1264
  8348  00E4                     u1265:	
  8349  00E4  35D9               	lslf	??_drawPixel,f
  8350  00E5  0DDA               	rlf	??_drawPixel+1,f
  8351  00E6                     u1264:	
  8352  00E6  0B89               	decfsz	9,f
  8353  00E7  28E4               	goto	u1265
  8354  00E8  09D9               	comf	??_drawPixel,f
  8355  00E9  09DA               	comf	??_drawPixel+1,f
  8356  00EA  3001               	movlw	1
  8357  00EB  00DB               	movwf	??_drawPixel+2
  8358  00EC  3000               	movlw	0
  8359  00ED  00DC               	movwf	??_drawPixel+3
  8360  00EE  0A5F               	incf	drawPixel@x,w
  8361  00EF  28F2               	goto	u1274
  8362  00F0                     u1275:	
  8363  00F0  35DB               	lslf	??_drawPixel+2,f
  8364  00F1  0DDC               	rlf	??_drawPixel+3,f
  8365  00F2                     u1274:	
  8366  00F2  0B89               	decfsz	9,f
  8367  00F3  28F0               	goto	u1275
  8368  00F4  09DB               	comf	??_drawPixel+2,f
  8369  00F5  09DC               	comf	??_drawPixel+3,f
  8370  00F6  0859               	movf	??_drawPixel,w
  8371  00F7  055B               	andwf	??_drawPixel+2,w
  8372  00F8  00DD               	movwf	??_drawPixel+4
  8373  00F9  085A               	movf	??_drawPixel+1,w
  8374  00FA  055C               	andwf	??_drawPixel+3,w
  8375  00FB  00DE               	movwf	??_drawPixel+5
  8376  00FC  3557               	lslf	drawPixel@y,w
  8377  00FD  3E3D               	addlw	(low (_pixelbuffer| 0))& (0+255)
  8378  00FE  0086               	movwf	6
  8379  00FF  0187               	clrf	7
  8380  0100  085D               	movf	??_drawPixel+4,w
  8381  0101  0581               	andwf	1,f
  8382  0102  3141               	addfsr 1,1
  8383  0103  085E               	movf	??_drawPixel+5,w
  8384  0104  0581               	andwf	1,f
  8385  0105  0008               	return
  8386  0106                     __end_of_drawPixel:	
  8387                           
  8388                           	psect	text58
  8389  0569                     __ptext58:	
  8390 ;; *************** function _clearPixels *****************
  8391 ;; Defined at:
  8392 ;;		line 91 in file "main.c"
  8393 ;; Parameters:    Size  Location     Type
  8394 ;;		None
  8395 ;; Auto vars:     Size  Location     Type
  8396 ;;  i               2    1[BANK0 ] int 
  8397 ;; Return value:  Size  Location     Type
  8398 ;;                  1    wreg      void 
  8399 ;; Registers used:
  8400 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8401 ;; Tracked objects:
  8402 ;;		On entry : 0/0
  8403 ;;		On exit  : 0/0
  8404 ;;		Unchanged: 0/0
  8405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8406 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8407 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8408 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8409 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8410 ;;Total ram usage:        3 bytes
  8411 ;; Hardware stack levels used:    1
  8412 ;; Hardware stack levels required when called:    6
  8413 ;; This function calls:
  8414 ;;		Nothing
  8415 ;; This function is called by:
  8416 ;;		_main
  8417 ;; This function uses a non-reentrant model
  8418 ;;
  8419                           
  8420                           
  8421                           ;psect for function _clearPixels
  8422  0569                     _clearPixels:	
  8423                           
  8424                           ;main.c: 92: for (int i = 0; i < 8; i++) {
  8425                           
  8426                           ;incstack = 0
  8427                           ; Regs used in _clearPixels: [wreg+fsr1l+fsr1h+status,2+status,0]
  8428  0569  0020               	movlb	0	; select bank0
  8429  056A  01D8               	clrf	clearPixels@i
  8430  056B  01D9               	clrf	clearPixels@i+1
  8431  056C                     L2:	
  8432  056C  0859               	movf	clearPixels@i+1,w
  8433  056D  3A80               	xorlw	128
  8434  056E  00D7               	movwf	??_clearPixels
  8435  056F  3080               	movlw	128
  8436  0570  0257               	subwf	??_clearPixels,w
  8437  0571  3008               	movlw	8
  8438  0572  1903               	btfsc	3,2
  8439  0573  0258               	subwf	clearPixels@i,w
  8440  0574  1803               	btfsc	3,0
  8441  0575  0008               	return
  8442                           
  8443                           ;main.c: 93: pixelbuffer[i] = 0;
  8444  0576  0020               	movlb	0	; select bank0
  8445  0577  3558               	lslf	clearPixels@i,w
  8446  0578  3E3D               	addlw	(low (_pixelbuffer| 0))& (0+255)
  8447  0579  0086               	movwf	6
  8448  057A  0187               	clrf	7
  8449  057B  3000               	movlw	0
  8450  057C  3FC0               	movwi [0]fsr1
  8451  057D  3FC1               	movwi [1]fsr1
  8452  057E  3001               	movlw	1
  8453  057F  07D8               	addwf	clearPixels@i,f
  8454  0580  3000               	movlw	0
  8455  0581  3DD9               	addwfc	clearPixels@i+1,f
  8456  0582  2D6C               	goto	L2
  8457  0583                     __end_of_clearPixels:	
  8458                           
  8459                           	psect	text59
  8460  078A                     __ptext59:	
  8461 ;; *************** function _SYSTEM_Initialize *****************
  8462 ;; Defined at:
  8463 ;;		line 77 in file "mcc_generated_files/mcc.c"
  8464 ;; Parameters:    Size  Location     Type
  8465 ;;		None
  8466 ;; Auto vars:     Size  Location     Type
  8467 ;;		None
  8468 ;; Return value:  Size  Location     Type
  8469 ;;                  1    wreg      void 
  8470 ;; Registers used:
  8471 ;;		wreg, status,2, status,0, pclath, cstack
  8472 ;; Tracked objects:
  8473 ;;		On entry : 0/0
  8474 ;;		On exit  : 0/0
  8475 ;;		Unchanged: 0/0
  8476 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8477 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8478 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8479 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8480 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8481 ;;Total ram usage:        0 bytes
  8482 ;; Hardware stack levels used:    1
  8483 ;; Hardware stack levels required when called:    7
  8484 ;; This function calls:
  8485 ;;		_OSCILLATOR_Initialize
  8486 ;;		_PIN_MANAGER_Initialize
  8487 ;; This function is called by:
  8488 ;;		_main
  8489 ;; This function uses a non-reentrant model
  8490 ;;
  8491                           
  8492                           
  8493                           ;psect for function _SYSTEM_Initialize
  8494  078A                     _SYSTEM_Initialize:	
  8495                           
  8496                           ;mcc.c: 79: PIN_MANAGER_Initialize();
  8497                           
  8498                           ;incstack = 0
  8499                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  8500  078A  3184  2412  3187   	fcall	_PIN_MANAGER_Initialize
  8501                           
  8502                           ;mcc.c: 80: OSCILLATOR_Initialize();
  8503  078D  3186  26F9         	fcall	_OSCILLATOR_Initialize
  8504  078F  0008               	return
  8505  0790                     __end_of_SYSTEM_Initialize:	
  8506                           
  8507                           	psect	text60
  8508  0412                     __ptext60:	
  8509 ;; *************** function _PIN_MANAGER_Initialize *****************
  8510 ;; Defined at:
  8511 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  8512 ;; Parameters:    Size  Location     Type
  8513 ;;		None
  8514 ;; Auto vars:     Size  Location     Type
  8515 ;;		None
  8516 ;; Return value:  Size  Location     Type
  8517 ;;                  1    wreg      void 
  8518 ;; Registers used:
  8519 ;;		wreg, status,2
  8520 ;; Tracked objects:
  8521 ;;		On entry : 0/0
  8522 ;;		On exit  : 0/0
  8523 ;;		Unchanged: 0/0
  8524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8525 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8526 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8527 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8528 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8529 ;;Total ram usage:        0 bytes
  8530 ;; Hardware stack levels used:    1
  8531 ;; Hardware stack levels required when called:    6
  8532 ;; This function calls:
  8533 ;;		Nothing
  8534 ;; This function is called by:
  8535 ;;		_SYSTEM_Initialize
  8536 ;; This function uses a non-reentrant model
  8537 ;;
  8538                           
  8539                           
  8540                           ;psect for function _PIN_MANAGER_Initialize
  8541  0412                     _PIN_MANAGER_Initialize:	
  8542                           
  8543                           ;pin_manager.c: 57: LATA = 0x00;
  8544                           
  8545                           ;incstack = 0
  8546                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  8547  0412  0022               	movlb	2	; select bank2
  8548  0413  018C               	clrf	12	;volatile
  8549                           
  8550                           ;pin_manager.c: 58: LATB = 0x00;
  8551  0414  018D               	clrf	13	;volatile
  8552                           
  8553                           ;pin_manager.c: 59: LATC = 0x00;
  8554  0415  018E               	clrf	14	;volatile
  8555                           
  8556                           ;pin_manager.c: 64: TRISA = 0x37;
  8557  0416  3037               	movlw	55
  8558  0417  0021               	movlb	1	; select bank1
  8559  0418  008C               	movwf	12	;volatile
  8560                           
  8561                           ;pin_manager.c: 65: TRISB = 0xF0;
  8562  0419  30F0               	movlw	240
  8563  041A  008D               	movwf	13	;volatile
  8564                           
  8565                           ;pin_manager.c: 66: TRISC = 0xFF;
  8566  041B  30FF               	movlw	255
  8567  041C  008E               	movwf	14	;volatile
  8568                           
  8569                           ;pin_manager.c: 71: ANSELC = 0xCF;
  8570  041D  30CF               	movlw	207
  8571  041E  0023               	movlb	3	; select bank3
  8572  041F  008E               	movwf	14	;volatile
  8573                           
  8574                           ;pin_manager.c: 72: ANSELB = 0xA0;
  8575  0420  30A0               	movlw	160
  8576  0421  008D               	movwf	13	;volatile
  8577                           
  8578                           ;pin_manager.c: 73: ANSELA = 0x17;
  8579  0422  3017               	movlw	23
  8580  0423  008C               	movwf	12	;volatile
  8581                           
  8582                           ;pin_manager.c: 78: WPUB = 0x00;
  8583  0424  0024               	movlb	4	; select bank4
  8584  0425  018D               	clrf	13	;volatile
  8585                           
  8586                           ;pin_manager.c: 79: WPUA = 0x00;
  8587  0426  018C               	clrf	12	;volatile
  8588                           
  8589                           ;pin_manager.c: 80: WPUC = 0x00;
  8590  0427  018E               	clrf	14	;volatile
  8591                           
  8592                           ;pin_manager.c: 81: OPTION_REGbits.nWPUEN = 1;
  8593  0428  0021               	movlb	1	; select bank1
  8594  0429  1795               	bsf	21,7	;volatile
  8595                           
  8596                           ;pin_manager.c: 86: ODCONA = 0x00;
  8597  042A  0025               	movlb	5	; select bank5
  8598  042B  018C               	clrf	12	;volatile
  8599                           
  8600                           ;pin_manager.c: 87: ODCONB = 0x00;
  8601  042C  018D               	clrf	13	;volatile
  8602                           
  8603                           ;pin_manager.c: 88: ODCONC = 0x00;
  8604  042D  018E               	clrf	14	;volatile
  8605                           
  8606                           ;pin_manager.c: 95: SSPCLKPPS = 0x0E;
  8607  042E  300E               	movlw	14
  8608  042F  003C               	movlb	28	; select bank28
  8609  0430  00A0               	movwf	32	;volatile
  8610                           
  8611                           ;pin_manager.c: 96: SSPDATPPS = 0x0C;
  8612  0431  300C               	movlw	12
  8613  0432  00A1               	movwf	33	;volatile
  8614                           
  8615                           ;pin_manager.c: 97: RB6PPS = 0x10;
  8616  0433  3010               	movlw	16
  8617  0434  003D               	movlb	29	; select bank29
  8618  0435  009E               	movwf	30	;volatile
  8619                           
  8620                           ;pin_manager.c: 98: RB4PPS = 0x11;
  8621  0436  3011               	movlw	17
  8622  0437  009C               	movwf	28	;volatile
  8623  0438  0008               	return
  8624  0439                     __end_of_PIN_MANAGER_Initialize:	
  8625                           
  8626                           	psect	text61
  8627  06F9                     __ptext61:	
  8628 ;; *************** function _OSCILLATOR_Initialize *****************
  8629 ;; Defined at:
  8630 ;;		line 83 in file "mcc_generated_files/mcc.c"
  8631 ;; Parameters:    Size  Location     Type
  8632 ;;		None
  8633 ;; Auto vars:     Size  Location     Type
  8634 ;;		None
  8635 ;; Return value:  Size  Location     Type
  8636 ;;                  1    wreg      void 
  8637 ;; Registers used:
  8638 ;;		wreg, status,2
  8639 ;; Tracked objects:
  8640 ;;		On entry : 0/0
  8641 ;;		On exit  : 0/0
  8642 ;;		Unchanged: 0/0
  8643 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8644 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8645 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8646 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8647 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8648 ;;Total ram usage:        0 bytes
  8649 ;; Hardware stack levels used:    1
  8650 ;; Hardware stack levels required when called:    6
  8651 ;; This function calls:
  8652 ;;		Nothing
  8653 ;; This function is called by:
  8654 ;;		_SYSTEM_Initialize
  8655 ;; This function uses a non-reentrant model
  8656 ;;
  8657                           
  8658                           
  8659                           ;psect for function _OSCILLATOR_Initialize
  8660  06F9                     _OSCILLATOR_Initialize:	
  8661                           
  8662                           ;mcc.c: 86: OSCCON = 0x78;
  8663                           
  8664                           ;incstack = 0
  8665                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  8666  06F9  3078               	movlw	120
  8667  06FA  0021               	movlb	1	; select bank1
  8668  06FB  0099               	movwf	25	;volatile
  8669                           
  8670                           ;mcc.c: 88: OSCTUNE = 0x00;
  8671  06FC  0198               	clrf	24	;volatile
  8672                           
  8673                           ;mcc.c: 90: BORCON = 0x00;
  8674  06FD  0022               	movlb	2	; select bank2
  8675  06FE  0196               	clrf	22	;volatile
  8676  06FF                     l190:	
  8677                           ;mcc.c: 93: {
  8678                           
  8679                           ;mcc.c: 92: while(PLLR == 0)
  8680                           
  8681  06FF  0021               	movlb	1	; select bank1
  8682  0700  1B1A               	btfsc	26,6	;volatile
  8683  0701  0008               	return
  8684  0702  2EFF               	goto	l190
  8685  0703                     __end_of_OSCILLATOR_Initialize:	
  8686                           
  8687                           	psect	intentry
  8688  0004                     __pintentry:	
  8689 ;; *************** function _INTERRUPT_InterruptManager *****************
  8690 ;; Defined at:
  8691 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  8692 ;; Parameters:    Size  Location     Type
  8693 ;;		None
  8694 ;; Auto vars:     Size  Location     Type
  8695 ;;		None
  8696 ;; Return value:  Size  Location     Type
  8697 ;;                  1    wreg      void 
  8698 ;; Registers used:
  8699 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8700 ;; Tracked objects:
  8701 ;;		On entry : 0/0
  8702 ;;		On exit  : 0/0
  8703 ;;		Unchanged: 0/0
  8704 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8705 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8706 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8707 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8708 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8709 ;;Total ram usage:        1 bytes
  8710 ;; Hardware stack levels used:    1
  8711 ;; Hardware stack levels required when called:    5
  8712 ;; This function calls:
  8713 ;;		Absolute function
  8714 ;;		_i2c_busCollisionISR
  8715 ;;		i1_i2c_ISR
  8716 ;; This function is called by:
  8717 ;;		Interrupt level 1
  8718 ;; This function uses a non-reentrant model
  8719 ;;
  8720                           
  8721  0004                     _INTERRUPT_InterruptManager:	
  8722                           
  8723                           ;incstack = 0
  8724  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  8725                           
  8726                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8727  0005  3180               	pagesel	$
  8728  0006  0020               	movlb	0	; select bank0
  8729  0007  087F               	movf	127,w
  8730  0008  00F5               	movwf	??_INTERRUPT_InterruptManager
  8731                           
  8732                           ;interrupt_manager.c: 54: if(INTCONbits.PEIE == 1)
  8733  0009  1F0B               	btfss	11,6	;volatile
  8734  000A  2822               	goto	i1l168
  8735                           
  8736                           ;interrupt_manager.c: 55: {
  8737                           ;interrupt_manager.c: 56: if(PIE2bits.BCL1IE == 1 && PIR2bits.BCL1IF == 1)
  8738  000B  0021               	movlb	1	; select bank1
  8739  000C  1D91               	btfss	17,3	;volatile
  8740  000D  2817               	goto	i1l163
  8741  000E  0020               	movlb	0	; select bank0
  8742  000F  1D91               	btfss	17,3	;volatile
  8743  0010  2817               	goto	i1l163
  8744                           
  8745                           ;interrupt_manager.c: 57: {
  8746                           ;interrupt_manager.c: 58: i2c_driver_busCollisionISR();
  8747  0011  087B               	movf	_i2c_driver_busCollisionISR+1,w
  8748  0012  008A               	movwf	10
  8749  0013  087A               	movf	_i2c_driver_busCollisionISR,w
  8750  0014  000A               	callw
  8751  0015  3180               	pagesel	$
  8752                           
  8753                           ;interrupt_manager.c: 59: }
  8754  0016  2822               	goto	i1l168
  8755  0017                     i1l163:	
  8756                           
  8757                           ;interrupt_manager.c: 60: else if(PIE1bits.SSP1IE == 1 && PIR1bits.SSP1IF == 1)
  8758  0017  0021               	movlb	1	; select bank1
  8759  0018  1D90               	btfss	16,3	;volatile
  8760  0019  2822               	goto	i1l168
  8761  001A  0020               	movlb	0	; select bank0
  8762  001B  1D90               	btfss	16,3	;volatile
  8763  001C  2822               	goto	i1l168
  8764                           
  8765                           ;interrupt_manager.c: 61: {
  8766                           ;interrupt_manager.c: 62: i2c_driver_i2cISR();
  8767  001D  0854               	movf	_i2c_driver_i2cISR+1,w
  8768  001E  008A               	movwf	10
  8769  001F  0853               	movf	_i2c_driver_i2cISR,w
  8770  0020  000A               	callw
  8771  0021  3180               	pagesel	$
  8772  0022                     i1l168:	
  8773                           ;interrupt_manager.c: 69: else
  8774                           ;interrupt_manager.c: 70: {
  8775                           
  8776                           ;interrupt_manager.c: 67: }
  8777                           ;interrupt_manager.c: 68: }
  8778                           
  8779                           ;interrupt_manager.c: 64: else
  8780                           ;interrupt_manager.c: 65: {
  8781                           
  8782                           ;interrupt_manager.c: 63: }
  8783                           
  8784  0022  0875               	movf	??_INTERRUPT_InterruptManager,w
  8785  0023  0020               	movlb	0	; select bank0
  8786  0024  00FF               	movwf	127
  8787  0025  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  8788  0026  0009               	retfie
  8789  0027                     __end_of_INTERRUPT_InterruptManager:	
  8790                           
  8791                           	psect	text63
  8792  052D                     __ptext63:	
  8793 ;; *************** function i1_i2c_ISR *****************
  8794 ;; Defined at:
  8795 ;;		line 419 in file "mcc_generated_files/drivers/i2c_master.c"
  8796 ;; Parameters:    Size  Location     Type
  8797 ;;		None
  8798 ;; Auto vars:     Size  Location     Type
  8799 ;;		None
  8800 ;; Return value:  Size  Location     Type
  8801 ;;                  1    wreg      void 
  8802 ;; Registers used:
  8803 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8804 ;; Tracked objects:
  8805 ;;		On entry : 0/0
  8806 ;;		On exit  : 0/0
  8807 ;;		Unchanged: 0/0
  8808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8809 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8810 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8811 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8812 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8813 ;;Total ram usage:        1 bytes
  8814 ;; Hardware stack levels used:    1
  8815 ;; Hardware stack levels required when called:    4
  8816 ;; This function calls:
  8817 ;;		i1_do_I2C_DO_ACK
  8818 ;;		i1_do_I2C_DO_ADDRESS_NACK
  8819 ;;		i1_do_I2C_DO_NACK_RESTART
  8820 ;;		i1_do_I2C_DO_NACK_STOP
  8821 ;;		i1_do_I2C_IDLE
  8822 ;;		i1_do_I2C_RCEN
  8823 ;;		i1_do_I2C_RESET
  8824 ;;		i1_do_I2C_RX
  8825 ;;		i1_do_I2C_SEND_ADR_READ
  8826 ;;		i1_do_I2C_SEND_ADR_WRITE
  8827 ;;		i1_do_I2C_SEND_RESTART
  8828 ;;		i1_do_I2C_SEND_RESTART_READ
  8829 ;;		i1_do_I2C_SEND_RESTART_WRITE
  8830 ;;		i1_do_I2C_SEND_STOP
  8831 ;;		i1_do_I2C_TX
  8832 ;;		i1_do_I2C_TX_EMPTY
  8833 ;;		i1_i2c_driver_isNACK
  8834 ;;		i1_mssp_clearIRQ
  8835 ;; This function is called by:
  8836 ;; This function uses a non-reentrant model
  8837 ;;
  8838                           
  8839                           
  8840                           ;psect for function i1_i2c_ISR
  8841  052D                     i1_i2c_ISR:	
  8842  052D                     i1l4797:	
  8843                           ;incstack = 0
  8844                           ; Regs used in i1_i2c_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8845                           
  8846                           
  8847                           ;i2c_master.c: 421: mssp_clearIRQ();
  8848  052D  3187  27E8  3185   	fcall	i1_mssp_clearIRQ
  8849                           
  8850                           ;i2c_master.c: 427: if(i2c_status.addressNACKCheck && i2c_driver_isNACK())
  8851  0530  0020               	movlb	0	; select bank0
  8852  0531  1DA0               	btfss	_i2c_status,3
  8853  0532  2D3D               	goto	i1l4805
  8854  0533  3186  2697  3185   	fcall	i1_i2c_driver_isNACK
  8855  0536  1C03               	btfss	3,0
  8856  0537  2D3D               	goto	i1l4805
  8857                           
  8858                           ;i2c_master.c: 428: {
  8859                           ;i2c_master.c: 429: i2c_status.state = I2C_ADDRESS_NACK;
  8860  0538  300F               	movlw	15
  8861  0539  00F4               	movwf	??i1_i2c_ISR
  8862  053A  0874               	movf	??i1_i2c_ISR,w
  8863  053B  0020               	movlb	0	; select bank0
  8864  053C  00A9               	movwf	_i2c_status+9
  8865  053D                     i1l4805:	
  8866                           
  8867                           ;i2c_master.c: 430: }
  8868                           ;i2c_master.c: 432: i2c_status.state = fsmStateTable[i2c_status.state]();
  8869  053D  0020               	movlb	0	; select bank0
  8870  053E  3529               	lslf	_i2c_status+9,w
  8871  053F  3EA0               	addlw	(low (_fsmStateTable| 0))& (0+255)
  8872  0540  0086               	movwf	6
  8873  0541  0187               	clrf	7
  8874  0542  3F41               	moviw [1]fsr1
  8875  0543  008A               	movwf	10
  8876  0544  3F40               	moviw [0]fsr1
  8877  0545  000A               	callw
  8878  0546  3185               	pagesel	$
  8879  0547  00F4               	movwf	??i1_i2c_ISR
  8880  0548  0874               	movf	??i1_i2c_ISR,w
  8881  0549  0020               	movlb	0	; select bank0
  8882  054A  00A9               	movwf	_i2c_status+9
  8883  054B  0008               	return
  8884  054C                     __end_ofi1_i2c_ISR:	
  8885                           
  8886                           	psect	text64
  8887  07E8                     __ptext64:	
  8888 ;; *************** function i1_mssp_clearIRQ *****************
  8889 ;; Defined at:
  8890 ;;		line 53 in file "mcc_generated_files/i2c_driver.c"
  8891 ;; Parameters:    Size  Location     Type
  8892 ;;		None
  8893 ;; Auto vars:     Size  Location     Type
  8894 ;;		None
  8895 ;; Return value:  Size  Location     Type
  8896 ;;                  1    wreg      void 
  8897 ;; Registers used:
  8898 ;;		None
  8899 ;; Tracked objects:
  8900 ;;		On entry : 0/0
  8901 ;;		On exit  : 0/0
  8902 ;;		Unchanged: 0/0
  8903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8904 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8905 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8906 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8907 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8908 ;;Total ram usage:        0 bytes
  8909 ;; Hardware stack levels used:    1
  8910 ;; This function calls:
  8911 ;;		Nothing
  8912 ;; This function is called by:
  8913 ;;		i1_i2c_ISR
  8914 ;; This function uses a non-reentrant model
  8915 ;;
  8916                           
  8917                           
  8918                           ;psect for function i1_mssp_clearIRQ
  8919  07E8                     i1_mssp_clearIRQ:	
  8920                           
  8921                           ;i2c_driver.c: 55: PIR1bits.SSP1IF = 0;
  8922                           
  8923                           ;incstack = 0
  8924                           ; Regs used in i1_mssp_clearIRQ: []
  8925  07E8  0020               	movlb	0	; select bank0
  8926  07E9  1190               	bcf	16,3	;volatile
  8927  07EA  0008               	return
  8928  07EB                     __end_ofi1_mssp_clearIRQ:	
  8929                           
  8930                           	psect	text65
  8931  0320                     __ptext65:	
  8932 ;; *************** function i1_do_I2C_RX *****************
  8933 ;; Defined at:
  8934 ;;		line 357 in file "mcc_generated_files/drivers/i2c_master.c"
  8935 ;; Parameters:    Size  Location     Type
  8936 ;;		None
  8937 ;; Auto vars:     Size  Location     Type
  8938 ;;		None
  8939 ;; Return value:  Size  Location     Type
  8940 ;;                  1    wreg      enum E12337
  8941 ;; Registers used:
  8942 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8943 ;; Tracked objects:
  8944 ;;		On entry : 0/0
  8945 ;;		On exit  : 0/0
  8946 ;;		Unchanged: 0/0
  8947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8948 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8949 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8950 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8951 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8952 ;;Total ram usage:        1 bytes
  8953 ;; Hardware stack levels used:    1
  8954 ;; Hardware stack levels required when called:    3
  8955 ;; This function calls:
  8956 ;;		Absolute function
  8957 ;;		i1_do_I2C_DO_NACK_RESTART
  8958 ;;		i1_do_I2C_DO_NACK_STOP
  8959 ;;		i1_i2c_driver_getRXData
  8960 ;;		i1_i2c_driver_sendACK
  8961 ;;		i1_i2c_restartWrite
  8962 ;;		i1_rd1RegCompleteHandler
  8963 ;;		i1_rd2RegCompleteHandler
  8964 ;;		i1_rdBlkRegCompleteHandler
  8965 ;;		i1_returnReset
  8966 ;;		i1_returnStop
  8967 ;;		i1_wr1RegCompleteHandler
  8968 ;;		i1_wr2RegCompleteHandler
  8969 ;; This function is called by:
  8970 ;; This function uses a non-reentrant model
  8971 ;;
  8972                           
  8973                           
  8974                           ;psect for function i1_do_I2C_RX
  8975  0320                     i1_do_I2C_RX:	
  8976  0320                     i1l4701:	
  8977                           ;incstack = 0
  8978                           ; Regs used in i1_do_I2C_RX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8979                           
  8980                           
  8981                           ;i2c_master.c: 359: *i2c_status.data_ptr++ = i2c_driver_getRXData();
  8982  0320  3187  27EE  3183   	fcall	i1_i2c_driver_getRXData
  8983  0323  00F0               	movwf	??i1_do_I2C_RX
  8984  0324  0020               	movlb	0	; select bank0
  8985  0325  0822               	movf	low ((_i2c_status| 0+2)),w
  8986  0326  0086               	movwf	6
  8987  0327  0187               	clrf	7
  8988  0328  0870               	movf	??i1_do_I2C_RX,w
  8989  0329  0081               	movwf	1
  8990  032A  3001               	movlw	1
  8991  032B  00F0               	movwf	??i1_do_I2C_RX
  8992  032C  0870               	movf	??i1_do_I2C_RX,w
  8993  032D  07A2               	addwf	low ((_i2c_status| 0+2)),f
  8994                           
  8995                           ;i2c_master.c: 360: if(--i2c_status.data_length)
  8996  032E  3001               	movlw	1
  8997  032F  02A3               	subwf	_i2c_status+3,f
  8998  0330  3000               	movlw	0
  8999  0331  3BA4               	subwfb	_i2c_status+4,f
  9000  0332  0823               	movf	_i2c_status+3,w
  9001  0333  0424               	iorwf	_i2c_status+4,w
  9002  0334  1903               	btfsc	3,2
  9003  0335  2B3A               	goto	i1l483
  9004                           
  9005                           ;i2c_master.c: 361: {
  9006                           ;i2c_master.c: 362: i2c_driver_sendACK();
  9007  0336  3187  27CC         	fcall	i1_i2c_driver_sendACK
  9008                           
  9009                           ;i2c_master.c: 363: return I2C_RCEN;
  9010  0338  3005               	movlw	5
  9011                           
  9012                           ;i2c_master.c: 364: }
  9013  0339  0008               	return
  9014  033A                     i1l483:	
  9015                           
  9016                           ;i2c_master.c: 365: else
  9017                           ;i2c_master.c: 366: {
  9018                           ;i2c_master.c: 367: i2c_status.bufferFree = 1;
  9019  033A  1520               	bsf	_i2c_status,2
  9020                           
  9021                           ;i2c_master.c: 368: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
  9022  033B  2B42               	goto	i1l4725
  9023  033C                     i1l4715:	
  9024                           ;i2c_master.c: 369: {
  9025                           ;i2c_master.c: 370: case i2c_restart_write:
  9026                           
  9027                           
  9028                           ;i2c_master.c: 371: case i2c_restart_read:
  9029                           ;i2c_master.c: 372: return do_I2C_DO_NACK_RESTART();
  9030  033C  3187  27AC         	fcall	i1_do_I2C_DO_NACK_RESTART
  9031  033E  0008               	return
  9032  033F                     i1l4719:	
  9033                           ;i2c_master.c: 374: case i2c_continue:
  9034                           
  9035                           ;i2c_master.c: 373: default:
  9036                           
  9037                           
  9038                           ;i2c_master.c: 375: case i2c_stop:
  9039                           ;i2c_master.c: 376: return do_I2C_DO_NACK_STOP();
  9040  033F  3187  27B0         	fcall	i1_do_I2C_DO_NACK_STOP
  9041                           
  9042                           ;i2c_master.c: 377: }
  9043  0341  0008               	return
  9044  0342                     i1l4725:	
  9045  0342  0020               	movlb	0	; select bank0
  9046  0343  0837               	movf	low ((_i2c_status| 0+23)),w
  9047  0344  00F0               	movwf	??i1_do_I2C_RX
  9048  0345  0870               	movf	??i1_do_I2C_RX,w
  9049  0346  00F9               	movwf	i1returnStop@p
  9050  0347  300B               	movlw	11
  9051  0348  3E20               	addlw	(low (_i2c_status| 0))& (0+255)
  9052  0349  0086               	movwf	6
  9053  034A  0187               	clrf	7
  9054  034B  3F41               	moviw [1]fsr1
  9055  034C  008A               	movwf	10
  9056  034D  3F40               	moviw [0]fsr1
  9057  034E  000A               	callw
  9058  034F  3183               	pagesel	$
  9059                           
  9060                           ; Switch size 1, requested type "space"
  9061                           ; Number of cases is 4, Range of values is 1 to 4
  9062                           ; switch strategies available:
  9063                           ; Name         Instructions Cycles
  9064                           ; simple_byte           13     7 (average)
  9065                           ; direct_byte           17     9 (fixed)
  9066                           ; jumptable            263     9 (fixed)
  9067                           ;	Chosen strategy is simple_byte
  9068  0350  3A01               	xorlw	1	; case 1
  9069  0351  1903               	skipnz
  9070  0352  2B3F               	goto	i1l4719
  9071  0353  3A03               	xorlw	3	; case 2
  9072  0354  1903               	skipnz
  9073  0355  2B3C               	goto	i1l4715
  9074  0356  3A01               	xorlw	1	; case 3
  9075  0357  1903               	skipnz
  9076  0358  2B3C               	goto	i1l4715
  9077  0359  3A07               	xorlw	7	; case 4
  9078  035A  1903               	skipnz
  9079  035B  2B3F               	goto	i1l4719
  9080  035C  2B3F               	goto	i1l4719
  9081  035D  0008               	return
  9082  035E                     __end_ofi1_do_I2C_RX:	
  9083                           
  9084                           	psect	text66
  9085  024C                     __ptext66:	
  9086 ;; *************** function i1_do_I2C_TX *****************
  9087 ;; Defined at:
  9088 ;;		line 333 in file "mcc_generated_files/drivers/i2c_master.c"
  9089 ;; Parameters:    Size  Location     Type
  9090 ;;		None
  9091 ;; Auto vars:     Size  Location     Type
  9092 ;;		None
  9093 ;; Return value:  Size  Location     Type
  9094 ;;                  1    wreg      enum E12337
  9095 ;; Registers used:
  9096 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9097 ;; Tracked objects:
  9098 ;;		On entry : 0/0
  9099 ;;		On exit  : 0/0
  9100 ;;		Unchanged: 0/0
  9101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9102 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9103 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9104 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9105 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9106 ;;Total ram usage:        3 bytes
  9107 ;; Hardware stack levels used:    1
  9108 ;; Hardware stack levels required when called:    3
  9109 ;; This function calls:
  9110 ;;		Absolute function
  9111 ;;		i1_do_I2C_SEND_RESTART_READ
  9112 ;;		i1_do_I2C_SEND_RESTART_WRITE
  9113 ;;		i1_do_I2C_SEND_STOP
  9114 ;;		i1_i2c_driver_TXData
  9115 ;;		i1_i2c_driver_isNACK
  9116 ;;		i1_i2c_restartWrite
  9117 ;;		i1_rd1RegCompleteHandler
  9118 ;;		i1_rd2RegCompleteHandler
  9119 ;;		i1_rdBlkRegCompleteHandler
  9120 ;;		i1_returnReset
  9121 ;;		i1_returnStop
  9122 ;;		i1_wr1RegCompleteHandler
  9123 ;;		i1_wr2RegCompleteHandler
  9124 ;; This function is called by:
  9125 ;; This function uses a non-reentrant model
  9126 ;;
  9127                           
  9128                           
  9129                           ;psect for function i1_do_I2C_TX
  9130  024C                     i1_do_I2C_TX:	
  9131  024C                     i1l4671:	
  9132                           ;incstack = 0
  9133                           ; Regs used in i1_do_I2C_TX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9134                           
  9135                           
  9136                           ;i2c_master.c: 335: if(i2c_driver_isNACK())
  9137  024C  3186  2697  3182   	fcall	i1_i2c_driver_isNACK
  9138  024F  1803               	btfsc	3,0
  9139  0250  2A5B               	goto	i1l4689
  9140  0251  2A77               	goto	i1l467
  9141  0252                     i1l4675:	
  9142                           ;i2c_master.c: 338: {
  9143                           ;i2c_master.c: 339: case i2c_restart_read:
  9144                           
  9145                           ;i2c_master.c: 336: {
  9146                           ;i2c_master.c: 337: switch(i2c_status.callbackTable[i2c_dataNACK](i2c_status.callbackPay
      +                          load[i2c_dataNACK]))
  9147                           
  9148                           
  9149                           ;i2c_master.c: 340: return do_I2C_SEND_RESTART_READ();
  9150  0252  3187  27C4         	fcall	i1_do_I2C_SEND_RESTART_READ
  9151  0254  0008               	return
  9152  0255                     i1l4679:	
  9153                           ;i2c_master.c: 341: case i2c_restart_write:
  9154                           
  9155                           
  9156                           ;i2c_master.c: 342: return do_I2C_SEND_RESTART_WRITE();
  9157  0255  3187  27C0         	fcall	i1_do_I2C_SEND_RESTART_WRITE
  9158  0257  0008               	return
  9159  0258                     i1l4683:	
  9160                           ;i2c_master.c: 344: case i2c_continue:
  9161                           
  9162                           ;i2c_master.c: 343: default:
  9163                           
  9164                           
  9165                           ;i2c_master.c: 345: case i2c_stop:
  9166                           ;i2c_master.c: 346: return do_I2C_SEND_STOP();
  9167  0258  3187  27B8         	fcall	i1_do_I2C_SEND_STOP
  9168                           
  9169                           ;i2c_master.c: 347: }
  9170  025A  0008               	return
  9171  025B                     i1l4689:	
  9172  025B  0020               	movlb	0	; select bank0
  9173  025C  083A               	movf	low ((_i2c_status| 0+26)),w
  9174  025D  00F1               	movwf	??i1_do_I2C_TX
  9175  025E  0871               	movf	??i1_do_I2C_TX,w
  9176  025F  00F9               	movwf	i1returnStop@p
  9177  0260  3011               	movlw	17
  9178  0261  3E20               	addlw	(low (_i2c_status| 0))& (0+255)
  9179  0262  0086               	movwf	6
  9180  0263  0187               	clrf	7
  9181  0264  3F41               	moviw [1]fsr1
  9182  0265  008A               	movwf	10
  9183  0266  3F40               	moviw [0]fsr1
  9184  0267  000A               	callw
  9185  0268  3182               	pagesel	$
  9186                           
  9187                           ; Switch size 1, requested type "space"
  9188                           ; Number of cases is 4, Range of values is 1 to 4
  9189                           ; switch strategies available:
  9190                           ; Name         Instructions Cycles
  9191                           ; simple_byte           13     7 (average)
  9192                           ; direct_byte           17     9 (fixed)
  9193                           ; jumptable            263     9 (fixed)
  9194                           ;	Chosen strategy is simple_byte
  9195  0269  3A01               	xorlw	1	; case 1
  9196  026A  1903               	skipnz
  9197  026B  2A58               	goto	i1l4683
  9198  026C  3A03               	xorlw	3	; case 2
  9199  026D  1903               	skipnz
  9200  026E  2A52               	goto	i1l4675
  9201  026F  3A01               	xorlw	1	; case 3
  9202  0270  1903               	skipnz
  9203  0271  2A55               	goto	i1l4679
  9204  0272  3A07               	xorlw	7	; case 4
  9205  0273  1903               	skipnz
  9206  0274  2A58               	goto	i1l4683
  9207  0275  2A58               	goto	i1l4683
  9208                           
  9209                           ;i2c_master.c: 348: }
  9210  0276  0008               	return
  9211  0277                     i1l467:	
  9212                           
  9213                           ;i2c_master.c: 349: else
  9214                           ;i2c_master.c: 350: {
  9215                           ;i2c_master.c: 351: i2c_status.addressNACKCheck = 0;
  9216  0277  0020               	movlb	0	; select bank0
  9217  0278  11A0               	bcf	_i2c_status,3
  9218                           
  9219                           ;i2c_master.c: 352: i2c_driver_TXData(*i2c_status.data_ptr++);
  9220  0279  3002               	movlw	2
  9221  027A  3E20               	addlw	(low (_i2c_status| 0))& (0+255)
  9222  027B  0086               	movwf	6
  9223  027C  0187               	clrf	7
  9224  027D  3F40               	moviw [0]fsr1
  9225  027E  0084               	movwf	4
  9226  027F  0185               	clrf	5
  9227  0280  0A81               	incf	1,f
  9228  0281  0800               	movf	0,w
  9229  0282  3187  279B  3182   	fcall	i1_i2c_driver_TXData
  9230                           
  9231                           ;i2c_master.c: 353: return (--i2c_status.data_length)?I2C_TX:I2C_TX_EMPTY;
  9232  0285  3001               	movlw	1
  9233  0286  0020               	movlb	0	; select bank0
  9234  0287  02A3               	subwf	_i2c_status+3,f
  9235  0288  3000               	movlw	0
  9236  0289  3BA4               	subwfb	_i2c_status+4,f
  9237  028A  0823               	movf	_i2c_status+3,w
  9238  028B  0424               	iorwf	_i2c_status+4,w
  9239  028C  1D03               	btfss	3,2
  9240  028D  2A90               	goto	i1l4697
  9241  028E  3006               	movlw	6
  9242  028F  2A91               	goto	L3
  9243  0290                     i1l4697:	
  9244  0290  3003               	movlw	3
  9245  0291                     L3:	
  9246  0291  00F2               	movwf	i1_do_I2C_TX$774
  9247  0292  3000               	movlw	0
  9248  0293  00F3               	movwf	i1_do_I2C_TX$774+1
  9249  0294  0872               	movf	i1_do_I2C_TX$774,w
  9250  0295  0008               	return
  9251  0296                     __end_ofi1_do_I2C_TX:	
  9252                           
  9253                           	psect	text67
  9254  04CB                     __ptext67:	
  9255 ;; *************** function i1_do_I2C_DO_ADDRESS_NACK *****************
  9256 ;; Defined at:
  9257 ;;		line 319 in file "mcc_generated_files/drivers/i2c_master.c"
  9258 ;; Parameters:    Size  Location     Type
  9259 ;;		None
  9260 ;; Auto vars:     Size  Location     Type
  9261 ;;		None
  9262 ;; Return value:  Size  Location     Type
  9263 ;;                  1    wreg      enum E12337
  9264 ;; Registers used:
  9265 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9266 ;; Tracked objects:
  9267 ;;		On entry : 0/0
  9268 ;;		On exit  : 0/0
  9269 ;;		Unchanged: 0/0
  9270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9271 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9272 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9273 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9274 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9275 ;;Total ram usage:        1 bytes
  9276 ;; Hardware stack levels used:    1
  9277 ;; Hardware stack levels required when called:    3
  9278 ;; This function calls:
  9279 ;;		Absolute function
  9280 ;;		i1_do_I2C_SEND_RESTART
  9281 ;;		i1_do_I2C_SEND_STOP
  9282 ;;		i1_i2c_restartWrite
  9283 ;;		i1_rd1RegCompleteHandler
  9284 ;;		i1_rd2RegCompleteHandler
  9285 ;;		i1_rdBlkRegCompleteHandler
  9286 ;;		i1_returnReset
  9287 ;;		i1_returnStop
  9288 ;;		i1_wr1RegCompleteHandler
  9289 ;;		i1_wr2RegCompleteHandler
  9290 ;; This function is called by:
  9291 ;; This function uses a non-reentrant model
  9292 ;;
  9293                           
  9294                           
  9295                           ;psect for function i1_do_I2C_DO_ADDRESS_NACK
  9296  04CB                     i1_do_I2C_DO_ADDRESS_NACK:	
  9297  04CB                     i1l4655:	
  9298                           ;incstack = 0
  9299                           ; Regs used in i1_do_I2C_DO_ADDRESS_NACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9300                           
  9301                           
  9302                           ;i2c_master.c: 321: i2c_status.addressNACKCheck = 0;
  9303  04CB  0020               	movlb	0	; select bank0
  9304  04CC  11A0               	bcf	_i2c_status,3
  9305                           
  9306                           ;i2c_master.c: 322: i2c_status.error = I2C_FAIL;
  9307  04CD  3002               	movlw	2
  9308  04CE  00F0               	movwf	??i1_do_I2C_DO_ADDRESS_NACK
  9309  04CF  0870               	movf	??i1_do_I2C_DO_ADDRESS_NACK,w
  9310  04D0  00AA               	movwf	_i2c_status+10
  9311                           
  9312                           ;i2c_master.c: 323: switch(i2c_status.callbackTable[i2c_addressNACK](i2c_status.callback
      +                          Payload[i2c_addressNACK]))
  9313  04D1  2CD8               	goto	i1l4669
  9314  04D2                     i1l4659:	
  9315                           ;i2c_master.c: 324: {
  9316                           ;i2c_master.c: 325: case i2c_restart_read:
  9317                           
  9318                           
  9319                           ;i2c_master.c: 326: case i2c_restart_write:
  9320                           ;i2c_master.c: 327: return do_I2C_SEND_RESTART();
  9321  04D2  3187  27BC         	fcall	i1_do_I2C_SEND_RESTART
  9322  04D4  0008               	return
  9323  04D5                     i1l4663:	
  9324                           ;i2c_master.c: 328: default:
  9325                           
  9326                           
  9327                           ;i2c_master.c: 329: return do_I2C_SEND_STOP();
  9328  04D5  3187  27B8         	fcall	i1_do_I2C_SEND_STOP
  9329                           
  9330                           ;i2c_master.c: 330: }
  9331  04D7  0008               	return
  9332  04D8                     i1l4669:	
  9333  04D8  0020               	movlb	0	; select bank0
  9334  04D9  0839               	movf	low ((_i2c_status| 0+25)),w
  9335  04DA  00F0               	movwf	??i1_do_I2C_DO_ADDRESS_NACK
  9336  04DB  0870               	movf	??i1_do_I2C_DO_ADDRESS_NACK,w
  9337  04DC  00F9               	movwf	i1returnStop@p
  9338  04DD  300F               	movlw	15
  9339  04DE  3E20               	addlw	(low (_i2c_status| 0))& (0+255)
  9340  04DF  0086               	movwf	6
  9341  04E0  0187               	clrf	7
  9342  04E1  3F41               	moviw [1]fsr1
  9343  04E2  008A               	movwf	10
  9344  04E3  3F40               	moviw [0]fsr1
  9345  04E4  000A               	callw
  9346  04E5  3184               	pagesel	$
  9347                           
  9348                           ; Switch size 1, requested type "space"
  9349                           ; Number of cases is 2, Range of values is 2 to 3
  9350                           ; switch strategies available:
  9351                           ; Name         Instructions Cycles
  9352                           ; simple_byte            7     4 (average)
  9353                           ; direct_byte           13     9 (fixed)
  9354                           ; jumptable            263     9 (fixed)
  9355                           ;	Chosen strategy is simple_byte
  9356  04E6  3A02               	xorlw	2	; case 2
  9357  04E7  1903               	skipnz
  9358  04E8  2CD2               	goto	i1l4659
  9359  04E9  3A01               	xorlw	1	; case 3
  9360  04EA  1903               	skipnz
  9361  04EB  2CD2               	goto	i1l4659
  9362  04EC  2CD5               	goto	i1l4663
  9363  04ED  0008               	return
  9364  04EE                     __end_ofi1_do_I2C_DO_ADDRESS_NACK:	
  9365                           
  9366                           	psect	text68
  9367  07AC                     __ptext68:	
  9368 ;; *************** function i1_do_I2C_DO_NACK_RESTART *****************
  9369 ;; Defined at:
  9370 ;;		line 311 in file "mcc_generated_files/drivers/i2c_master.c"
  9371 ;; Parameters:    Size  Location     Type
  9372 ;;		None
  9373 ;; Auto vars:     Size  Location     Type
  9374 ;;		None
  9375 ;; Return value:  Size  Location     Type
  9376 ;;                  1    wreg      enum E12337
  9377 ;; Registers used:
  9378 ;;		wreg, status,2, status,0, pclath, cstack
  9379 ;; Tracked objects:
  9380 ;;		On entry : 0/0
  9381 ;;		On exit  : 0/0
  9382 ;;		Unchanged: 0/0
  9383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9384 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9385 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9386 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9387 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9388 ;;Total ram usage:        0 bytes
  9389 ;; Hardware stack levels used:    1
  9390 ;; Hardware stack levels required when called:    1
  9391 ;; This function calls:
  9392 ;;		i1_i2c_driver_sendNACK
  9393 ;; This function is called by:
  9394 ;;		i1_do_I2C_RX
  9395 ;; This function uses a non-reentrant model
  9396 ;;
  9397                           
  9398                           
  9399                           ;psect for function i1_do_I2C_DO_NACK_RESTART
  9400  07AC                     i1_do_I2C_DO_NACK_RESTART:	
  9401  07AC                     i1l2545:	
  9402                           ;incstack = 0
  9403                           ; Regs used in i1_do_I2C_DO_NACK_RESTART: [wreg+status,2+status,0+pclath+cstack]
  9404                           
  9405                           
  9406                           ;i2c_master.c: 313: i2c_driver_sendNACK();
  9407  07AC  3187  27C8         	fcall	i1_i2c_driver_sendNACK
  9408                           
  9409                           ;i2c_master.c: 314: return I2C_SEND_RESTART;
  9410  07AE  3009               	movlw	9
  9411  07AF  0008               	return
  9412  07B0                     __end_ofi1_do_I2C_DO_NACK_RESTART:	
  9413                           
  9414                           	psect	text69
  9415  07B0                     __ptext69:	
  9416 ;; *************** function i1_do_I2C_DO_NACK_STOP *****************
  9417 ;; Defined at:
  9418 ;;		line 305 in file "mcc_generated_files/drivers/i2c_master.c"
  9419 ;; Parameters:    Size  Location     Type
  9420 ;;		None
  9421 ;; Auto vars:     Size  Location     Type
  9422 ;;		None
  9423 ;; Return value:  Size  Location     Type
  9424 ;;                  1    wreg      enum E12337
  9425 ;; Registers used:
  9426 ;;		wreg, status,2, status,0, pclath, cstack
  9427 ;; Tracked objects:
  9428 ;;		On entry : 0/0
  9429 ;;		On exit  : 0/0
  9430 ;;		Unchanged: 0/0
  9431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9432 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9433 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9434 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9435 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9436 ;;Total ram usage:        0 bytes
  9437 ;; Hardware stack levels used:    1
  9438 ;; Hardware stack levels required when called:    1
  9439 ;; This function calls:
  9440 ;;		i1_i2c_driver_sendNACK
  9441 ;; This function is called by:
  9442 ;;		i1_do_I2C_RX
  9443 ;; This function uses a non-reentrant model
  9444 ;;
  9445                           
  9446                           
  9447                           ;psect for function i1_do_I2C_DO_NACK_STOP
  9448  07B0                     i1_do_I2C_DO_NACK_STOP:	
  9449  07B0                     i1l2539:	
  9450                           ;incstack = 0
  9451                           ; Regs used in i1_do_I2C_DO_NACK_STOP: [wreg+status,2+status,0+pclath+cstack]
  9452                           
  9453                           
  9454                           ;i2c_master.c: 307: i2c_driver_sendNACK();
  9455  07B0  3187  27C8         	fcall	i1_i2c_driver_sendNACK
  9456                           
  9457                           ;i2c_master.c: 308: return I2C_SEND_STOP;
  9458  07B2  300A               	movlw	10
  9459  07B3  0008               	return
  9460  07B4                     __end_ofi1_do_I2C_DO_NACK_STOP:	
  9461                           
  9462                           	psect	text70
  9463  07B4                     __ptext70:	
  9464 ;; *************** function i1_do_I2C_DO_ACK *****************
  9465 ;; Defined at:
  9466 ;;		line 299 in file "mcc_generated_files/drivers/i2c_master.c"
  9467 ;; Parameters:    Size  Location     Type
  9468 ;;		None
  9469 ;; Auto vars:     Size  Location     Type
  9470 ;;		None
  9471 ;; Return value:  Size  Location     Type
  9472 ;;                  1    wreg      enum E12337
  9473 ;; Registers used:
  9474 ;;		wreg, status,2, status,0, pclath, cstack
  9475 ;; Tracked objects:
  9476 ;;		On entry : 0/0
  9477 ;;		On exit  : 0/0
  9478 ;;		Unchanged: 0/0
  9479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9480 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9481 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9483 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9484 ;;Total ram usage:        0 bytes
  9485 ;; Hardware stack levels used:    1
  9486 ;; Hardware stack levels required when called:    1
  9487 ;; This function calls:
  9488 ;;		i1_i2c_driver_sendACK
  9489 ;; This function is called by:
  9490 ;; This function uses a non-reentrant model
  9491 ;;
  9492                           
  9493                           
  9494                           ;psect for function i1_do_I2C_DO_ACK
  9495  07B4                     i1_do_I2C_DO_ACK:	
  9496  07B4                     i1l2733:	
  9497                           ;incstack = 0
  9498                           ; Regs used in i1_do_I2C_DO_ACK: [wreg+status,2+status,0+pclath+cstack]
  9499                           
  9500                           
  9501                           ;i2c_master.c: 301: i2c_driver_sendACK();
  9502  07B4  3187  27CC         	fcall	i1_i2c_driver_sendACK
  9503                           
  9504                           ;i2c_master.c: 302: return I2C_RCEN;
  9505  07B6  3005               	movlw	5
  9506  07B7  0008               	return
  9507  07B8                     __end_ofi1_do_I2C_DO_ACK:	
  9508                           
  9509                           	psect	text71
  9510  0790                     __ptext71:	
  9511 ;; *************** function i1_do_I2C_RCEN *****************
  9512 ;; Defined at:
  9513 ;;		line 292 in file "mcc_generated_files/drivers/i2c_master.c"
  9514 ;; Parameters:    Size  Location     Type
  9515 ;;		None
  9516 ;; Auto vars:     Size  Location     Type
  9517 ;;		None
  9518 ;; Return value:  Size  Location     Type
  9519 ;;                  1    wreg      enum E12337
  9520 ;; Registers used:
  9521 ;;		wreg, status,2, status,0, pclath, cstack
  9522 ;; Tracked objects:
  9523 ;;		On entry : 0/0
  9524 ;;		On exit  : 0/0
  9525 ;;		Unchanged: 0/0
  9526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9527 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9528 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9529 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9530 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9531 ;;Total ram usage:        0 bytes
  9532 ;; Hardware stack levels used:    1
  9533 ;; Hardware stack levels required when called:    1
  9534 ;; This function calls:
  9535 ;;		i1_i2c_driver_startRX
  9536 ;; This function is called by:
  9537 ;; This function uses a non-reentrant model
  9538 ;;
  9539                           
  9540                           
  9541                           ;psect for function i1_do_I2C_RCEN
  9542  0790                     i1_do_I2C_RCEN:	
  9543  0790                     i1l2725:	
  9544                           ;incstack = 0
  9545                           ; Regs used in i1_do_I2C_RCEN: [wreg+status,2+status,0+pclath+cstack]
  9546                           
  9547                           
  9548                           ;i2c_master.c: 294: i2c_status.addressNACKCheck = 0;
  9549  0790  0020               	movlb	0	; select bank0
  9550  0791  11A0               	bcf	_i2c_status,3
  9551                           
  9552                           ;i2c_master.c: 295: i2c_driver_startRX();
  9553  0792  3187  27F1         	fcall	i1_i2c_driver_startRX
  9554                           
  9555                           ;i2c_master.c: 296: return I2C_RX;
  9556  0794  3004               	movlw	4
  9557  0795  0008               	return
  9558  0796                     __end_ofi1_do_I2C_RCEN:	
  9559                           
  9560                           	psect	text72
  9561  074C                     __ptext72:	
  9562 ;; *************** function i1_do_I2C_SEND_ADR_WRITE *****************
  9563 ;; Defined at:
  9564 ;;		line 285 in file "mcc_generated_files/drivers/i2c_master.c"
  9565 ;; Parameters:    Size  Location     Type
  9566 ;;		None
  9567 ;; Auto vars:     Size  Location     Type
  9568 ;;		None
  9569 ;; Return value:  Size  Location     Type
  9570 ;;                  1    wreg      enum E12337
  9571 ;; Registers used:
  9572 ;;		wreg, status,2, status,0, pclath, cstack
  9573 ;; Tracked objects:
  9574 ;;		On entry : 0/0
  9575 ;;		On exit  : 0/0
  9576 ;;		Unchanged: 0/0
  9577 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9578 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9579 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9580 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9581 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9582 ;;Total ram usage:        0 bytes
  9583 ;; Hardware stack levels used:    1
  9584 ;; Hardware stack levels required when called:    1
  9585 ;; This function calls:
  9586 ;;		i1_i2c_driver_TXData
  9587 ;; This function is called by:
  9588 ;; This function uses a non-reentrant model
  9589 ;;
  9590                           
  9591                           
  9592                           ;psect for function i1_do_I2C_SEND_ADR_WRITE
  9593  074C                     i1_do_I2C_SEND_ADR_WRITE:	
  9594  074C                     i1l2717:	
  9595                           ;incstack = 0
  9596                           ; Regs used in i1_do_I2C_SEND_ADR_WRITE: [wreg+status,2+status,0+pclath+cstack]
  9597                           
  9598                           
  9599                           ;i2c_master.c: 287: i2c_status.addressNACKCheck = 1;
  9600  074C  0020               	movlb	0	; select bank0
  9601  074D  15A0               	bsf	_i2c_status,3
  9602                           
  9603                           ;i2c_master.c: 288: i2c_driver_TXData(i2c_status.address << 1);
  9604  074E  3521               	lslf	_i2c_status+1,w
  9605  074F  3187  279B         	fcall	i1_i2c_driver_TXData
  9606                           
  9607                           ;i2c_master.c: 289: return I2C_TX;
  9608  0751  3003               	movlw	3
  9609  0752  0008               	return
  9610  0753                     __end_ofi1_do_I2C_SEND_ADR_WRITE:	
  9611                           
  9612                           	psect	text73
  9613  0744                     __ptext73:	
  9614 ;; *************** function i1_do_I2C_SEND_ADR_READ *****************
  9615 ;; Defined at:
  9616 ;;		line 278 in file "mcc_generated_files/drivers/i2c_master.c"
  9617 ;; Parameters:    Size  Location     Type
  9618 ;;		None
  9619 ;; Auto vars:     Size  Location     Type
  9620 ;;		None
  9621 ;; Return value:  Size  Location     Type
  9622 ;;                  1    wreg      enum E12337
  9623 ;; Registers used:
  9624 ;;		wreg, status,2, status,0, pclath, cstack
  9625 ;; Tracked objects:
  9626 ;;		On entry : 0/0
  9627 ;;		On exit  : 0/0
  9628 ;;		Unchanged: 0/0
  9629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9630 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9631 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9632 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9633 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9634 ;;Total ram usage:        0 bytes
  9635 ;; Hardware stack levels used:    1
  9636 ;; Hardware stack levels required when called:    1
  9637 ;; This function calls:
  9638 ;;		i1_i2c_driver_TXData
  9639 ;; This function is called by:
  9640 ;; This function uses a non-reentrant model
  9641 ;;
  9642                           
  9643                           
  9644                           ;psect for function i1_do_I2C_SEND_ADR_READ
  9645  0744                     i1_do_I2C_SEND_ADR_READ:	
  9646  0744                     i1l2709:	
  9647                           ;incstack = 0
  9648                           ; Regs used in i1_do_I2C_SEND_ADR_READ: [wreg+status,2+status,0+pclath+cstack]
  9649                           
  9650                           
  9651                           ;i2c_master.c: 280: i2c_status.addressNACKCheck = 1;
  9652  0744  0020               	movlb	0	; select bank0
  9653  0745  15A0               	bsf	_i2c_status,3
  9654                           
  9655                           ;i2c_master.c: 281: i2c_driver_TXData(i2c_status.address << 1 | 1);
  9656  0746  1403               	setc
  9657  0747  0D21               	rlf	_i2c_status+1,w
  9658  0748  3187  279B         	fcall	i1_i2c_driver_TXData
  9659                           
  9660                           ;i2c_master.c: 282: return I2C_RCEN;
  9661  074A  3005               	movlw	5
  9662  074B  0008               	return
  9663  074C                     __end_ofi1_do_I2C_SEND_ADR_READ:	
  9664                           
  9665                           	psect	text74
  9666  07B8                     __ptext74:	
  9667 ;; *************** function i1_do_I2C_SEND_STOP *****************
  9668 ;; Defined at:
  9669 ;;		line 272 in file "mcc_generated_files/drivers/i2c_master.c"
  9670 ;; Parameters:    Size  Location     Type
  9671 ;;		None
  9672 ;; Auto vars:     Size  Location     Type
  9673 ;;		None
  9674 ;; Return value:  Size  Location     Type
  9675 ;;                  1    wreg      enum E12337
  9676 ;; Registers used:
  9677 ;;		wreg, status,2, status,0, pclath, cstack
  9678 ;; Tracked objects:
  9679 ;;		On entry : 0/0
  9680 ;;		On exit  : 0/0
  9681 ;;		Unchanged: 0/0
  9682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9683 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9684 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9685 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9686 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9687 ;;Total ram usage:        0 bytes
  9688 ;; Hardware stack levels used:    1
  9689 ;; Hardware stack levels required when called:    1
  9690 ;; This function calls:
  9691 ;;		i1_i2c_driver_stop
  9692 ;; This function is called by:
  9693 ;;		i1_do_I2C_DO_ADDRESS_NACK
  9694 ;;		i1_do_I2C_TX
  9695 ;;		i1_do_I2C_TX_EMPTY
  9696 ;; This function uses a non-reentrant model
  9697 ;;
  9698                           
  9699                           
  9700                           ;psect for function i1_do_I2C_SEND_STOP
  9701  07B8                     i1_do_I2C_SEND_STOP:	
  9702  07B8                     i1l2533:	
  9703                           ;incstack = 0
  9704                           ; Regs used in i1_do_I2C_SEND_STOP: [wreg+status,2+status,0+pclath+cstack]
  9705                           
  9706                           
  9707                           ;i2c_master.c: 274: i2c_driver_stop();
  9708  07B8  3187  27F4         	fcall	i1_i2c_driver_stop
  9709                           
  9710                           ;i2c_master.c: 275: return I2C_IDLE;
  9711  07BA  3000               	movlw	0
  9712  07BB  0008               	return
  9713  07BC                     __end_ofi1_do_I2C_SEND_STOP:	
  9714                           
  9715                           	psect	text75
  9716  07BC                     __ptext75:	
  9717 ;; *************** function i1_do_I2C_SEND_RESTART *****************
  9718 ;; Defined at:
  9719 ;;		line 266 in file "mcc_generated_files/drivers/i2c_master.c"
  9720 ;; Parameters:    Size  Location     Type
  9721 ;;		None
  9722 ;; Auto vars:     Size  Location     Type
  9723 ;;		None
  9724 ;; Return value:  Size  Location     Type
  9725 ;;                  1    wreg      enum E12337
  9726 ;; Registers used:
  9727 ;;		wreg, status,2, status,0, pclath, cstack
  9728 ;; Tracked objects:
  9729 ;;		On entry : 0/0
  9730 ;;		On exit  : 0/0
  9731 ;;		Unchanged: 0/0
  9732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9733 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9734 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9735 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9736 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9737 ;;Total ram usage:        0 bytes
  9738 ;; Hardware stack levels used:    1
  9739 ;; Hardware stack levels required when called:    1
  9740 ;; This function calls:
  9741 ;;		i1_i2c_driver_restart
  9742 ;; This function is called by:
  9743 ;;		i1_do_I2C_DO_ADDRESS_NACK
  9744 ;;		i1_do_I2C_TX_EMPTY
  9745 ;; This function uses a non-reentrant model
  9746 ;;
  9747                           
  9748                           
  9749                           ;psect for function i1_do_I2C_SEND_RESTART
  9750  07BC                     i1_do_I2C_SEND_RESTART:	
  9751  07BC                     i1l2527:	
  9752                           ;incstack = 0
  9753                           ; Regs used in i1_do_I2C_SEND_RESTART: [wreg+status,2+status,0+pclath+cstack]
  9754                           
  9755                           
  9756                           ;i2c_master.c: 268: i2c_driver_restart();
  9757  07BC  3187  27F7         	fcall	i1_i2c_driver_restart
  9758                           
  9759                           ;i2c_master.c: 269: return I2C_SEND_ADR_READ;
  9760  07BE  3001               	movlw	1
  9761  07BF  0008               	return
  9762  07C0                     __end_ofi1_do_I2C_SEND_RESTART:	
  9763                           
  9764                           	psect	text76
  9765  07C0                     __ptext76:	
  9766 ;; *************** function i1_do_I2C_SEND_RESTART_WRITE *****************
  9767 ;; Defined at:
  9768 ;;		line 260 in file "mcc_generated_files/drivers/i2c_master.c"
  9769 ;; Parameters:    Size  Location     Type
  9770 ;;		None
  9771 ;; Auto vars:     Size  Location     Type
  9772 ;;		None
  9773 ;; Return value:  Size  Location     Type
  9774 ;;                  1    wreg      enum E12337
  9775 ;; Registers used:
  9776 ;;		wreg, status,2, status,0, pclath, cstack
  9777 ;; Tracked objects:
  9778 ;;		On entry : 0/0
  9779 ;;		On exit  : 0/0
  9780 ;;		Unchanged: 0/0
  9781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9782 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9783 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9784 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9785 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9786 ;;Total ram usage:        0 bytes
  9787 ;; Hardware stack levels used:    1
  9788 ;; Hardware stack levels required when called:    1
  9789 ;; This function calls:
  9790 ;;		i1_i2c_driver_restart
  9791 ;; This function is called by:
  9792 ;;		i1_do_I2C_TX
  9793 ;; This function uses a non-reentrant model
  9794 ;;
  9795                           
  9796                           
  9797                           ;psect for function i1_do_I2C_SEND_RESTART_WRITE
  9798  07C0                     i1_do_I2C_SEND_RESTART_WRITE:	
  9799  07C0                     i1l2521:	
  9800                           ;incstack = 0
  9801                           ; Regs used in i1_do_I2C_SEND_RESTART_WRITE: [wreg+status,2+status,0+pclath+cstack]
  9802                           
  9803                           
  9804                           ;i2c_master.c: 262: i2c_driver_restart();
  9805  07C0  3187  27F7         	fcall	i1_i2c_driver_restart
  9806                           
  9807                           ;i2c_master.c: 263: return I2C_SEND_ADR_WRITE;
  9808  07C2  3002               	movlw	2
  9809  07C3  0008               	return
  9810  07C4                     __end_ofi1_do_I2C_SEND_RESTART_WRITE:	
  9811                           
  9812                           	psect	text77
  9813  07C4                     __ptext77:	
  9814 ;; *************** function i1_do_I2C_SEND_RESTART_READ *****************
  9815 ;; Defined at:
  9816 ;;		line 254 in file "mcc_generated_files/drivers/i2c_master.c"
  9817 ;; Parameters:    Size  Location     Type
  9818 ;;		None
  9819 ;; Auto vars:     Size  Location     Type
  9820 ;;		None
  9821 ;; Return value:  Size  Location     Type
  9822 ;;                  1    wreg      enum E12337
  9823 ;; Registers used:
  9824 ;;		wreg, status,2, status,0, pclath, cstack
  9825 ;; Tracked objects:
  9826 ;;		On entry : 0/0
  9827 ;;		On exit  : 0/0
  9828 ;;		Unchanged: 0/0
  9829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9830 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9831 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9832 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9833 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9834 ;;Total ram usage:        0 bytes
  9835 ;; Hardware stack levels used:    1
  9836 ;; Hardware stack levels required when called:    1
  9837 ;; This function calls:
  9838 ;;		i1_i2c_driver_restart
  9839 ;; This function is called by:
  9840 ;;		i1_do_I2C_TX
  9841 ;; This function uses a non-reentrant model
  9842 ;;
  9843                           
  9844                           
  9845                           ;psect for function i1_do_I2C_SEND_RESTART_READ
  9846  07C4                     i1_do_I2C_SEND_RESTART_READ:	
  9847  07C4                     i1l2515:	
  9848                           ;incstack = 0
  9849                           ; Regs used in i1_do_I2C_SEND_RESTART_READ: [wreg+status,2+status,0+pclath+cstack]
  9850                           
  9851                           
  9852                           ;i2c_master.c: 256: i2c_driver_restart();
  9853  07C4  3187  27F7         	fcall	i1_i2c_driver_restart
  9854                           
  9855                           ;i2c_master.c: 257: return I2C_SEND_ADR_READ;
  9856  07C6  3001               	movlw	1
  9857  07C7  0008               	return
  9858  07C8                     __end_ofi1_do_I2C_SEND_RESTART_READ:	
  9859                           
  9860                           	psect	text78
  9861  0796                     __ptext78:	
  9862 ;; *************** function i1_do_I2C_IDLE *****************
  9863 ;; Defined at:
  9864 ;;		line 247 in file "mcc_generated_files/drivers/i2c_master.c"
  9865 ;; Parameters:    Size  Location     Type
  9866 ;;		None
  9867 ;; Auto vars:     Size  Location     Type
  9868 ;;		None
  9869 ;; Return value:  Size  Location     Type
  9870 ;;                  1    wreg      enum E12337
  9871 ;; Registers used:
  9872 ;;		wreg, status,2
  9873 ;; Tracked objects:
  9874 ;;		On entry : 0/0
  9875 ;;		On exit  : 0/0
  9876 ;;		Unchanged: 0/0
  9877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9878 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9879 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9880 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9881 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9882 ;;Total ram usage:        0 bytes
  9883 ;; Hardware stack levels used:    1
  9884 ;; This function calls:
  9885 ;;		Nothing
  9886 ;; This function is called by:
  9887 ;; This function uses a non-reentrant model
  9888 ;;
  9889                           
  9890                           
  9891                           ;psect for function i1_do_I2C_IDLE
  9892  0796                     i1_do_I2C_IDLE:	
  9893  0796                     i1l2701:	
  9894                           ;incstack = 0
  9895                           ; Regs used in i1_do_I2C_IDLE: [wreg+status,2]
  9896                           
  9897                           
  9898                           ;i2c_master.c: 249: i2c_status.busy = 0;
  9899  0796  0020               	movlb	0	; select bank0
  9900  0797  1020               	bcf	_i2c_status,0
  9901                           
  9902                           ;i2c_master.c: 250: i2c_status.error = I2C_NOERR;
  9903  0798  01AA               	clrf	_i2c_status+10
  9904                           
  9905                           ;i2c_master.c: 251: return I2C_RESET;
  9906  0799  300E               	movlw	14
  9907  079A  0008               	return
  9908  079B                     __end_ofi1_do_I2C_IDLE:	
  9909                           
  9910                           	psect	text79
  9911  0753                     __ptext79:	
  9912 ;; *************** function i1_do_I2C_RESET *****************
  9913 ;; Defined at:
  9914 ;;		line 239 in file "mcc_generated_files/drivers/i2c_master.c"
  9915 ;; Parameters:    Size  Location     Type
  9916 ;;		None
  9917 ;; Auto vars:     Size  Location     Type
  9918 ;;		None
  9919 ;; Return value:  Size  Location     Type
  9920 ;;                  1    wreg      enum E12337
  9921 ;; Registers used:
  9922 ;;		wreg, status,2, status,0, pclath, cstack
  9923 ;; Tracked objects:
  9924 ;;		On entry : 0/0
  9925 ;;		On exit  : 0/0
  9926 ;;		Unchanged: 0/0
  9927 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9928 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9929 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9930 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9931 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9932 ;;Total ram usage:        0 bytes
  9933 ;; Hardware stack levels used:    1
  9934 ;; Hardware stack levels required when called:    1
  9935 ;; This function calls:
  9936 ;;		i1_i2c_driver_resetBus
  9937 ;; This function is called by:
  9938 ;; This function uses a non-reentrant model
  9939 ;;
  9940                           
  9941                           
  9942                           ;psect for function i1_do_I2C_RESET
  9943  0753                     i1_do_I2C_RESET:	
  9944  0753                     i1l2691:	
  9945                           ;incstack = 0
  9946                           ; Regs used in i1_do_I2C_RESET: [wreg+status,2+status,0+pclath+cstack]
  9947                           
  9948                           
  9949                           ;i2c_master.c: 241: i2c_driver_resetBus();
  9950  0753  318F  27F9         	fcall	i1_i2c_driver_resetBus
  9951                           
  9952                           ;i2c_master.c: 242: i2c_status.busy = 0;
  9953  0755  0020               	movlb	0	; select bank0
  9954  0756  1020               	bcf	_i2c_status,0
  9955                           
  9956                           ;i2c_master.c: 243: i2c_status.error = I2C_NOERR;
  9957  0757  01AA               	clrf	_i2c_status+10
  9958                           
  9959                           ;i2c_master.c: 244: return I2C_RESET;
  9960  0758  300E               	movlw	14
  9961  0759  0008               	return
  9962  075A                     __end_ofi1_do_I2C_RESET:	
  9963                           
  9964                           	psect	text80
  9965  03C2                     __ptext80:	
  9966 ;; *************** function i1_do_I2C_TX_EMPTY *****************
  9967 ;; Defined at:
  9968 ;;		line 382 in file "mcc_generated_files/drivers/i2c_master.c"
  9969 ;; Parameters:    Size  Location     Type
  9970 ;;		None
  9971 ;; Auto vars:     Size  Location     Type
  9972 ;;		None
  9973 ;; Return value:  Size  Location     Type
  9974 ;;                  1    wreg      enum E12337
  9975 ;; Registers used:
  9976 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9977 ;; Tracked objects:
  9978 ;;		On entry : 0/0
  9979 ;;		On exit  : 0/0
  9980 ;;		Unchanged: 0/0
  9981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9982 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9983 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9984 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9985 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9986 ;;Total ram usage:        1 bytes
  9987 ;; Hardware stack levels used:    1
  9988 ;; Hardware stack levels required when called:    3
  9989 ;; This function calls:
  9990 ;;		Absolute function
  9991 ;;		i1_do_I2C_SEND_RESTART
  9992 ;;		i1_do_I2C_SEND_STOP
  9993 ;;		i1_i2c_restartWrite
  9994 ;;		i1_mssp_setIRQ
  9995 ;;		i1_rd1RegCompleteHandler
  9996 ;;		i1_rd2RegCompleteHandler
  9997 ;;		i1_rdBlkRegCompleteHandler
  9998 ;;		i1_returnReset
  9999 ;;		i1_returnStop
 10000 ;;		i1_wr1RegCompleteHandler
 10001 ;;		i1_wr2RegCompleteHandler
 10002 ;; This function is called by:
 10003 ;; This function uses a non-reentrant model
 10004 ;;
 10005                           
 10006                           
 10007                           ;psect for function i1_do_I2C_TX_EMPTY
 10008  03C2                     i1_do_I2C_TX_EMPTY:	
 10009  03C2                     i1l4727:	
 10010                           ;incstack = 0
 10011                           ; Regs used in i1_do_I2C_TX_EMPTY: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10012                           
 10013                           
 10014                           ;i2c_master.c: 384: i2c_status.bufferFree = 1;
 10015  03C2  0020               	movlb	0	; select bank0
 10016  03C3  1520               	bsf	_i2c_status,2
 10017                           
 10018                           ;i2c_master.c: 385: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
 10019  03C4  2BCF               	goto	i1l4745
 10020  03C5                     i1l4729:	
 10021                           ;i2c_master.c: 386: {
 10022                           ;i2c_master.c: 387: case i2c_restart_read:
 10023                           
 10024                           
 10025                           ;i2c_master.c: 388: case i2c_restart_write:
 10026                           ;i2c_master.c: 389: return do_I2C_SEND_RESTART();
 10027  03C5  3187  27BC         	fcall	i1_do_I2C_SEND_RESTART
 10028  03C7  0008               	return
 10029  03C8                     i1l4733:	
 10030                           ;i2c_master.c: 390: case i2c_continue:
 10031                           
 10032                           
 10033                           ;i2c_master.c: 391: mssp_setIRQ();
 10034  03C8  3187  27EB         	fcall	i1_mssp_setIRQ
 10035                           
 10036                           ;i2c_master.c: 392: return I2C_TX;
 10037  03CA  3003               	movlw	3
 10038  03CB  0008               	return
 10039  03CC                     i1l4739:	
 10040                           ;i2c_master.c: 394: case i2c_stop:
 10041                           
 10042                           ;i2c_master.c: 393: default:
 10043                           
 10044                           
 10045                           ;i2c_master.c: 395: return do_I2C_SEND_STOP();
 10046  03CC  3187  27B8         	fcall	i1_do_I2C_SEND_STOP
 10047                           
 10048                           ;i2c_master.c: 396: }
 10049  03CE  0008               	return
 10050  03CF                     i1l4745:	
 10051  03CF  0020               	movlb	0	; select bank0
 10052  03D0  0837               	movf	low ((_i2c_status| 0+23)),w
 10053  03D1  00F0               	movwf	??i1_do_I2C_TX_EMPTY
 10054  03D2  0870               	movf	??i1_do_I2C_TX_EMPTY,w
 10055  03D3  00F9               	movwf	i1returnStop@p
 10056  03D4  300B               	movlw	11
 10057  03D5  3E20               	addlw	(low (_i2c_status| 0))& (0+255)
 10058  03D6  0086               	movwf	6
 10059  03D7  0187               	clrf	7
 10060  03D8  3F41               	moviw [1]fsr1
 10061  03D9  008A               	movwf	10
 10062  03DA  3F40               	moviw [0]fsr1
 10063  03DB  000A               	callw
 10064  03DC  3183               	pagesel	$
 10065                           
 10066                           ; Switch size 1, requested type "space"
 10067                           ; Number of cases is 4, Range of values is 1 to 4
 10068                           ; switch strategies available:
 10069                           ; Name         Instructions Cycles
 10070                           ; simple_byte           13     7 (average)
 10071                           ; direct_byte           17     9 (fixed)
 10072                           ; jumptable            263     9 (fixed)
 10073                           ;	Chosen strategy is simple_byte
 10074  03DD  3A01               	xorlw	1	; case 1
 10075  03DE  1903               	skipnz
 10076  03DF  2BCC               	goto	i1l4739
 10077  03E0  3A03               	xorlw	3	; case 2
 10078  03E1  1903               	skipnz
 10079  03E2  2BC5               	goto	i1l4729
 10080  03E3  3A01               	xorlw	1	; case 3
 10081  03E4  1903               	skipnz
 10082  03E5  2BC5               	goto	i1l4729
 10083  03E6  3A07               	xorlw	7	; case 4
 10084  03E7  1903               	skipnz
 10085  03E8  2BC8               	goto	i1l4733
 10086  03E9  2BCC               	goto	i1l4739
 10087  03EA  0008               	return
 10088  03EB                     __end_ofi1_do_I2C_TX_EMPTY:	
 10089                           
 10090                           	psect	text81
 10091  07EB                     __ptext81:	
 10092 ;; *************** function i1_mssp_setIRQ *****************
 10093 ;; Defined at:
 10094 ;;		line 58 in file "mcc_generated_files/i2c_driver.c"
 10095 ;; Parameters:    Size  Location     Type
 10096 ;;		None
 10097 ;; Auto vars:     Size  Location     Type
 10098 ;;		None
 10099 ;; Return value:  Size  Location     Type
 10100 ;;                  1    wreg      void 
 10101 ;; Registers used:
 10102 ;;		None
 10103 ;; Tracked objects:
 10104 ;;		On entry : 0/0
 10105 ;;		On exit  : 0/0
 10106 ;;		Unchanged: 0/0
 10107 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10108 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10109 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10110 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10111 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10112 ;;Total ram usage:        0 bytes
 10113 ;; Hardware stack levels used:    1
 10114 ;; This function calls:
 10115 ;;		Nothing
 10116 ;; This function is called by:
 10117 ;;		i1_do_I2C_TX_EMPTY
 10118 ;; This function uses a non-reentrant model
 10119 ;;
 10120                           
 10121                           
 10122                           ;psect for function i1_mssp_setIRQ
 10123  07EB                     i1_mssp_setIRQ:	
 10124                           
 10125                           ;i2c_driver.c: 60: PIR1bits.SSP1IF = 1;
 10126                           
 10127                           ;incstack = 0
 10128                           ; Regs used in i1_mssp_setIRQ: []
 10129  07EB  0020               	movlb	0	; select bank0
 10130  07EC  1590               	bsf	16,3	;volatile
 10131  07ED  0008               	return
 10132  07EE                     __end_ofi1_mssp_setIRQ:	
 10133                           
 10134                           	psect	text82
 10135  0697                     __ptext82:	
 10136 ;; *************** function i1_i2c_driver_isNACK *****************
 10137 ;; Defined at:
 10138 ;;		line 161 in file "mcc_generated_files/i2c_driver.c"
 10139 ;; Parameters:    Size  Location     Type
 10140 ;;		None
 10141 ;; Auto vars:     Size  Location     Type
 10142 ;;		None
 10143 ;; Return value:  Size  Location     Type
 10144 ;;		None               void
 10145 ;; Registers used:
 10146 ;;		wreg, status,2, status,0
 10147 ;; Tracked objects:
 10148 ;;		On entry : 0/0
 10149 ;;		On exit  : 0/0
 10150 ;;		Unchanged: 0/0
 10151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10152 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10153 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10154 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10155 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10156 ;;Total ram usage:        1 bytes
 10157 ;; Hardware stack levels used:    1
 10158 ;; This function calls:
 10159 ;;		Nothing
 10160 ;; This function is called by:
 10161 ;;		i1_do_I2C_TX
 10162 ;;		i1_i2c_ISR
 10163 ;; This function uses a non-reentrant model
 10164 ;;
 10165                           
 10166                           
 10167                           ;psect for function i1_i2c_driver_isNACK
 10168  0697                     i1_i2c_driver_isNACK:	
 10169                           
 10170                           ;i2c_driver.c: 163: return SSP1CON2bits.ACKSTAT = 1;
 10171                           
 10172                           ;incstack = 0
 10173                           ; Regs used in i1_i2c_driver_isNACK: [wreg+status,2+status,0]
 10174  0697  0024               	movlb	4	; select bank4
 10175  0698  0816               	movf	22,w	;volatile
 10176  0699  39BF               	andlw	-65
 10177  069A  3840               	iorlw	64
 10178  069B  0096               	movwf	22	;volatile
 10179  069C  0E16               	swapf	22,w	;volatile
 10180  069D  0C89               	rrf	9,f
 10181  069E  0C89               	rrf	9,f
 10182  069F  3901               	andlw	1
 10183  06A0  00F0               	movwf	??i1_i2c_driver_isNACK
 10184  06A1  0C70               	rrf	??i1_i2c_driver_isNACK,w
 10185  06A2  0008               	return
 10186  06A3                     __end_ofi1_i2c_driver_isNACK:	
 10187                           
 10188                           	psect	text83
 10189  079B                     __ptext83:	
 10190 ;; *************** function i1_i2c_driver_TXData *****************
 10191 ;; Defined at:
 10192 ;;		line 186 in file "mcc_generated_files/i2c_driver.c"
 10193 ;; Parameters:    Size  Location     Type
 10194 ;;  d               1    wreg     unsigned char 
 10195 ;; Auto vars:     Size  Location     Type
 10196 ;;  d               1    0[COMMON] unsigned char 
 10197 ;; Return value:  Size  Location     Type
 10198 ;;                  1    wreg      void 
 10199 ;; Registers used:
 10200 ;;		wreg
 10201 ;; Tracked objects:
 10202 ;;		On entry : 0/0
 10203 ;;		On exit  : 0/0
 10204 ;;		Unchanged: 0/0
 10205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10206 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10207 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10208 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10209 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10210 ;;Total ram usage:        1 bytes
 10211 ;; Hardware stack levels used:    1
 10212 ;; This function calls:
 10213 ;;		Nothing
 10214 ;; This function is called by:
 10215 ;;		i1_do_I2C_SEND_ADR_READ
 10216 ;;		i1_do_I2C_SEND_ADR_WRITE
 10217 ;;		i1_do_I2C_TX
 10218 ;; This function uses a non-reentrant model
 10219 ;;
 10220                           
 10221                           
 10222                           ;psect for function i1_i2c_driver_TXData
 10223  079B                     i1_i2c_driver_TXData:	
 10224                           
 10225                           ;incstack = 0
 10226                           ; Regs used in i1_i2c_driver_TXData: [wreg]
 10227                           ;i1i2c_driver_TXData@d stored from wreg
 10228  079B  00F0               	movwf	i1i2c_driver_TXData@d
 10229                           
 10230                           ;i2c_driver.c: 188: SSP1BUF = d;
 10231  079C  0870               	movf	i1i2c_driver_TXData@d,w
 10232  079D  0024               	movlb	4	; select bank4
 10233  079E  0091               	movwf	17	;volatile
 10234  079F  0008               	return
 10235  07A0                     __end_ofi1_i2c_driver_TXData:	
 10236                           
 10237                           	psect	text84
 10238  07EE                     __ptext84:	
 10239 ;; *************** function i1_i2c_driver_getRXData *****************
 10240 ;; Defined at:
 10241 ;;		line 171 in file "mcc_generated_files/i2c_driver.c"
 10242 ;; Parameters:    Size  Location     Type
 10243 ;;		None
 10244 ;; Auto vars:     Size  Location     Type
 10245 ;;		None
 10246 ;; Return value:  Size  Location     Type
 10247 ;;                  1    wreg      unsigned char 
 10248 ;; Registers used:
 10249 ;;		wreg
 10250 ;; Tracked objects:
 10251 ;;		On entry : 0/0
 10252 ;;		On exit  : 0/0
 10253 ;;		Unchanged: 0/0
 10254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10255 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10256 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10257 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10258 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10259 ;;Total ram usage:        0 bytes
 10260 ;; Hardware stack levels used:    1
 10261 ;; This function calls:
 10262 ;;		Nothing
 10263 ;; This function is called by:
 10264 ;;		i1_do_I2C_RX
 10265 ;; This function uses a non-reentrant model
 10266 ;;
 10267                           
 10268                           
 10269                           ;psect for function i1_i2c_driver_getRXData
 10270  07EE                     i1_i2c_driver_getRXData:	
 10271                           
 10272                           ;i2c_driver.c: 173: return SSP1BUF;
 10273                           
 10274                           ;incstack = 0
 10275                           ; Regs used in i1_i2c_driver_getRXData: [wreg]
 10276  07EE  0024               	movlb	4	; select bank4
 10277  07EF  0811               	movf	17,w	;volatile
 10278  07F0  0008               	return
 10279  07F1                     __end_ofi1_i2c_driver_getRXData:	
 10280                           
 10281                           	psect	text85
 10282  07C8                     __ptext85:	
 10283 ;; *************** function i1_i2c_driver_sendNACK *****************
 10284 ;; Defined at:
 10285 ;;		line 202 in file "mcc_generated_files/i2c_driver.c"
 10286 ;; Parameters:    Size  Location     Type
 10287 ;;		None
 10288 ;; Auto vars:     Size  Location     Type
 10289 ;;		None
 10290 ;; Return value:  Size  Location     Type
 10291 ;;                  1    wreg      void 
 10292 ;; Registers used:
 10293 ;;		None
 10294 ;; Tracked objects:
 10295 ;;		On entry : 0/0
 10296 ;;		On exit  : 0/0
 10297 ;;		Unchanged: 0/0
 10298 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10299 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10300 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10301 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10302 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10303 ;;Total ram usage:        0 bytes
 10304 ;; Hardware stack levels used:    1
 10305 ;; This function calls:
 10306 ;;		Nothing
 10307 ;; This function is called by:
 10308 ;;		i1_do_I2C_DO_NACK_STOP
 10309 ;;		i1_do_I2C_DO_NACK_RESTART
 10310 ;; This function uses a non-reentrant model
 10311 ;;
 10312                           
 10313                           
 10314                           ;psect for function i1_i2c_driver_sendNACK
 10315  07C8                     i1_i2c_driver_sendNACK:	
 10316                           
 10317                           ;i2c_driver.c: 204: SSP1CON2bits.ACKDT = 1;
 10318                           
 10319                           ;incstack = 0
 10320                           ; Regs used in i1_i2c_driver_sendNACK: []
 10321  07C8  0024               	movlb	4	; select bank4
 10322  07C9  1696               	bsf	22,5	;volatile
 10323                           
 10324                           ;i2c_driver.c: 205: SSP1CON2bits.ACKEN = 1;
 10325  07CA  1616               	bsf	22,4	;volatile
 10326  07CB  0008               	return
 10327  07CC                     __end_ofi1_i2c_driver_sendNACK:	
 10328                           
 10329                           	psect	text86
 10330  0FF9                     __ptext86:	
 10331 ;; *************** function i1_i2c_driver_resetBus *****************
 10332 ;; Defined at:
 10333 ;;		line 141 in file "mcc_generated_files/i2c_driver.c"
 10334 ;; Parameters:    Size  Location     Type
 10335 ;;		None
 10336 ;; Auto vars:     Size  Location     Type
 10337 ;;		None
 10338 ;; Return value:  Size  Location     Type
 10339 ;;                  1    wreg      void 
 10340 ;; Registers used:
 10341 ;;		None
 10342 ;; Tracked objects:
 10343 ;;		On entry : 0/0
 10344 ;;		On exit  : 0/0
 10345 ;;		Unchanged: 0/0
 10346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10347 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10348 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10349 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10350 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10351 ;;Total ram usage:        0 bytes
 10352 ;; Hardware stack levels used:    1
 10353 ;; This function calls:
 10354 ;;		Nothing
 10355 ;; This function is called by:
 10356 ;;		i1_do_I2C_RESET
 10357 ;; This function uses a non-reentrant model
 10358 ;;
 10359                           
 10360                           
 10361                           ;psect for function i1_i2c_driver_resetBus
 10362  0FF9                     i1_i2c_driver_resetBus:	
 10363                           
 10364                           ;incstack = 0
 10365                           ; Regs used in i1_i2c_driver_resetBus: []
 10366  0FF9  0008               	return
 10367  0FFA                     __end_ofi1_i2c_driver_resetBus:	
 10368                           
 10369                           	psect	text87
 10370  07F1                     __ptext87:	
 10371 ;; *************** function i1_i2c_driver_startRX *****************
 10372 ;; Defined at:
 10373 ;;		line 166 in file "mcc_generated_files/i2c_driver.c"
 10374 ;; Parameters:    Size  Location     Type
 10375 ;;		None
 10376 ;; Auto vars:     Size  Location     Type
 10377 ;;		None
 10378 ;; Return value:  Size  Location     Type
 10379 ;;                  1    wreg      void 
 10380 ;; Registers used:
 10381 ;;		None
 10382 ;; Tracked objects:
 10383 ;;		On entry : 0/0
 10384 ;;		On exit  : 0/0
 10385 ;;		Unchanged: 0/0
 10386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10387 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10388 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10390 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10391 ;;Total ram usage:        0 bytes
 10392 ;; Hardware stack levels used:    1
 10393 ;; This function calls:
 10394 ;;		Nothing
 10395 ;; This function is called by:
 10396 ;;		i1_do_I2C_RCEN
 10397 ;; This function uses a non-reentrant model
 10398 ;;
 10399                           
 10400                           
 10401                           ;psect for function i1_i2c_driver_startRX
 10402  07F1                     i1_i2c_driver_startRX:	
 10403                           
 10404                           ;i2c_driver.c: 168: SSP1CON2bits.RCEN = 1;
 10405                           
 10406                           ;incstack = 0
 10407                           ; Regs used in i1_i2c_driver_startRX: []
 10408  07F1  0024               	movlb	4	; select bank4
 10409  07F2  1596               	bsf	22,3	;volatile
 10410  07F3  0008               	return
 10411  07F4                     __end_ofi1_i2c_driver_startRX:	
 10412                           
 10413                           	psect	text88
 10414  0583                     __ptext88:	
 10415 ;; *************** function i1_rdBlkRegCompleteHandler *****************
 10416 ;; Defined at:
 10417 ;;		line 134 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 10418 ;; Parameters:    Size  Location     Type
 10419 ;;  p               1    9[COMMON] PTR void 
 10420 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 10421 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 10422 ;; Auto vars:     Size  Location     Type
 10423 ;;		None
 10424 ;; Return value:  Size  Location     Type
 10425 ;;                  1    wreg      enum E97
 10426 ;; Registers used:
 10427 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10428 ;; Tracked objects:
 10429 ;;		On entry : 0/0
 10430 ;;		On exit  : 0/0
 10431 ;;		Unchanged: 0/0
 10432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10433 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10434 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10435 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10436 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10437 ;;Total ram usage:        1 bytes
 10438 ;; Hardware stack levels used:    1
 10439 ;; Hardware stack levels required when called:    2
 10440 ;; This function calls:
 10441 ;;		i1_i2c_setBuffer
 10442 ;;		i1_i2c_setDataCompleteCallback
 10443 ;; This function is called by:
 10444 ;; This function uses a non-reentrant model
 10445 ;;
 10446                           
 10447                           
 10448                           ;psect for function i1_rdBlkRegCompleteHandler
 10449  0583                     i1_rdBlkRegCompleteHandler:	
 10450  0583                     i1l2595:	
 10451                           ;incstack = 0
 10452                           ; Regs used in i1_rdBlkRegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 10453                           
 10454                           
 10455                           ;i2c_simple_master.c: 136: i2c_setBuffer(((buf_t *)p)->data,((buf_t*)p)->len);
 10456  0583  0879               	movf	i1rdBlkRegCompleteHandler@p,w
 10457  0584  0086               	movwf	6
 10458  0585  0187               	clrf	7
 10459  0586  3F40               	moviw [0]fsr1
 10460  0587  00F0               	movwf	i1i2c_setBuffer@bufferSize
 10461  0588  3F41               	moviw [1]fsr1
 10462  0589  00F1               	movwf	i1i2c_setBuffer@bufferSize+1
 10463  058A  0879               	movf	i1rdBlkRegCompleteHandler@p,w
 10464  058B  3E02               	addlw	2
 10465  058C  0086               	movwf	6
 10466  058D  0187               	clrf	7
 10467  058E  0801               	movf	1,w
 10468  058F  3186  2656  3185   	fcall	i1_i2c_setBuffer
 10469                           
 10470                           ;i2c_simple_master.c: 137: i2c_setDataCompleteCallback((0),(0));
 10471  0592  3000               	movlw	0
 10472  0593  00F5               	movwf	i1i2c_setDataCompleteCallback@cb
 10473  0594  00F6               	movwf	i1i2c_setDataCompleteCallback@cb+1
 10474  0595  01F7               	clrf	i1i2c_setDataCompleteCallback@p
 10475  0596  3186  26A3         	fcall	i1_i2c_setDataCompleteCallback
 10476                           
 10477                           ;i2c_simple_master.c: 138: return i2c_restart_read;
 10478  0598  3002               	movlw	2
 10479  0599  0008               	return
 10480  059A                     __end_ofi1_rdBlkRegCompleteHandler:	
 10481                           
 10482                           	psect	text89
 10483  0608                     __ptext89:	
 10484 ;; *************** function i1_rd2RegCompleteHandler *****************
 10485 ;; Defined at:
 10486 ;;		line 87 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 10487 ;; Parameters:    Size  Location     Type
 10488 ;;  p               1    9[COMMON] PTR void 
 10489 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 10490 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 10491 ;; Auto vars:     Size  Location     Type
 10492 ;;		None
 10493 ;; Return value:  Size  Location     Type
 10494 ;;                  1    wreg      enum E97
 10495 ;; Registers used:
 10496 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10497 ;; Tracked objects:
 10498 ;;		On entry : 0/0
 10499 ;;		On exit  : 0/0
 10500 ;;		Unchanged: 0/0
 10501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10502 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10503 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10504 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10505 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10506 ;;Total ram usage:        1 bytes
 10507 ;; Hardware stack levels used:    1
 10508 ;; Hardware stack levels required when called:    2
 10509 ;; This function calls:
 10510 ;;		i1_i2c_setBuffer
 10511 ;;		i1_i2c_setDataCompleteCallback
 10512 ;; This function is called by:
 10513 ;; This function uses a non-reentrant model
 10514 ;;
 10515                           
 10516                           
 10517                           ;psect for function i1_rd2RegCompleteHandler
 10518  0608                     i1_rd2RegCompleteHandler:	
 10519  0608                     i1l2579:	
 10520                           ;incstack = 0
 10521                           ; Regs used in i1_rd2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 10522                           
 10523                           
 10524                           ;i2c_simple_master.c: 89: i2c_setBuffer(p,2);
 10525  0608  3002               	movlw	2
 10526  0609  00F0               	movwf	i1i2c_setBuffer@bufferSize
 10527  060A  3000               	movlw	0
 10528  060B  00F1               	movwf	i1i2c_setBuffer@bufferSize+1
 10529  060C  0879               	movf	i1rd2RegCompleteHandler@p,w
 10530  060D  3186  2656  3186   	fcall	i1_i2c_setBuffer
 10531                           
 10532                           ;i2c_simple_master.c: 90: i2c_setDataCompleteCallback((0),(0));
 10533  0610  3000               	movlw	0
 10534  0611  00F5               	movwf	i1i2c_setDataCompleteCallback@cb
 10535  0612  00F6               	movwf	i1i2c_setDataCompleteCallback@cb+1
 10536  0613  01F7               	clrf	i1i2c_setDataCompleteCallback@p
 10537  0614  3186  26A3         	fcall	i1_i2c_setDataCompleteCallback
 10538                           
 10539                           ;i2c_simple_master.c: 91: return i2c_restart_read;
 10540  0616  3002               	movlw	2
 10541  0617  0008               	return
 10542  0618                     __end_ofi1_rd2RegCompleteHandler:	
 10543                           
 10544                           	psect	text90
 10545  0618                     __ptext90:	
 10546 ;; *************** function i1_rd1RegCompleteHandler *****************
 10547 ;; Defined at:
 10548 ;;		line 58 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 10549 ;; Parameters:    Size  Location     Type
 10550 ;;  p               1    9[COMMON] PTR void 
 10551 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 10552 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 10553 ;; Auto vars:     Size  Location     Type
 10554 ;;		None
 10555 ;; Return value:  Size  Location     Type
 10556 ;;                  1    wreg      enum E97
 10557 ;; Registers used:
 10558 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10559 ;; Tracked objects:
 10560 ;;		On entry : 0/0
 10561 ;;		On exit  : 0/0
 10562 ;;		Unchanged: 0/0
 10563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10564 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10565 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10566 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10567 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10568 ;;Total ram usage:        1 bytes
 10569 ;; Hardware stack levels used:    1
 10570 ;; Hardware stack levels required when called:    2
 10571 ;; This function calls:
 10572 ;;		i1_i2c_setBuffer
 10573 ;;		i1_i2c_setDataCompleteCallback
 10574 ;; This function is called by:
 10575 ;; This function uses a non-reentrant model
 10576 ;;
 10577                           
 10578                           
 10579                           ;psect for function i1_rd1RegCompleteHandler
 10580  0618                     i1_rd1RegCompleteHandler:	
 10581  0618                     i1l2571:	
 10582                           ;incstack = 0
 10583                           ; Regs used in i1_rd1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 10584                           
 10585                           
 10586                           ;i2c_simple_master.c: 60: i2c_setBuffer(p,1);
 10587  0618  3001               	movlw	1
 10588  0619  00F0               	movwf	i1i2c_setBuffer@bufferSize
 10589  061A  3000               	movlw	0
 10590  061B  00F1               	movwf	i1i2c_setBuffer@bufferSize+1
 10591  061C  0879               	movf	i1rd1RegCompleteHandler@p,w
 10592  061D  3186  2656  3186   	fcall	i1_i2c_setBuffer
 10593                           
 10594                           ;i2c_simple_master.c: 61: i2c_setDataCompleteCallback((0),(0));
 10595  0620  3000               	movlw	0
 10596  0621  00F5               	movwf	i1i2c_setDataCompleteCallback@cb
 10597  0622  00F6               	movwf	i1i2c_setDataCompleteCallback@cb+1
 10598  0623  01F7               	clrf	i1i2c_setDataCompleteCallback@p
 10599  0624  3186  26A3         	fcall	i1_i2c_setDataCompleteCallback
 10600                           
 10601                           ;i2c_simple_master.c: 62: return i2c_restart_read;
 10602  0626  3002               	movlw	2
 10603  0627  0008               	return
 10604  0628                     __end_ofi1_rd1RegCompleteHandler:	
 10605                           
 10606                           	psect	text91
 10607  0628                     __ptext91:	
 10608 ;; *************** function i1_wr1RegCompleteHandler *****************
 10609 ;; Defined at:
 10610 ;;		line 31 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 10611 ;; Parameters:    Size  Location     Type
 10612 ;;  p               1    9[COMMON] PTR void 
 10613 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 10614 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 10615 ;; Auto vars:     Size  Location     Type
 10616 ;;		None
 10617 ;; Return value:  Size  Location     Type
 10618 ;;                  1    wreg      enum E97
 10619 ;; Registers used:
 10620 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10621 ;; Tracked objects:
 10622 ;;		On entry : 0/0
 10623 ;;		On exit  : 0/0
 10624 ;;		Unchanged: 0/0
 10625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10626 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10627 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10628 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10629 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10630 ;;Total ram usage:        1 bytes
 10631 ;; Hardware stack levels used:    1
 10632 ;; Hardware stack levels required when called:    2
 10633 ;; This function calls:
 10634 ;;		i1_i2c_setBuffer
 10635 ;;		i1_i2c_setDataCompleteCallback
 10636 ;; This function is called by:
 10637 ;; This function uses a non-reentrant model
 10638 ;;
 10639                           
 10640                           
 10641                           ;psect for function i1_wr1RegCompleteHandler
 10642  0628                     i1_wr1RegCompleteHandler:	
 10643  0628                     i1l2563:	
 10644                           ;incstack = 0
 10645                           ; Regs used in i1_wr1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 10646                           
 10647                           
 10648                           ;i2c_simple_master.c: 33: i2c_setBuffer(p,1);
 10649  0628  3001               	movlw	1
 10650  0629  00F0               	movwf	i1i2c_setBuffer@bufferSize
 10651  062A  3000               	movlw	0
 10652  062B  00F1               	movwf	i1i2c_setBuffer@bufferSize+1
 10653  062C  0879               	movf	i1wr1RegCompleteHandler@p,w
 10654  062D  3186  2656  3186   	fcall	i1_i2c_setBuffer
 10655                           
 10656                           ;i2c_simple_master.c: 34: i2c_setDataCompleteCallback((0),(0));
 10657  0630  3000               	movlw	0
 10658  0631  00F5               	movwf	i1i2c_setDataCompleteCallback@cb
 10659  0632  00F6               	movwf	i1i2c_setDataCompleteCallback@cb+1
 10660  0633  01F7               	clrf	i1i2c_setDataCompleteCallback@p
 10661  0634  3186  26A3         	fcall	i1_i2c_setDataCompleteCallback
 10662                           
 10663                           ;i2c_simple_master.c: 35: return i2c_continue;
 10664  0636  3004               	movlw	4
 10665  0637  0008               	return
 10666  0638                     __end_ofi1_wr1RegCompleteHandler:	
 10667                           
 10668                           	psect	text92
 10669  0002                     __ptext92:	
 10670 ;; *************** function i1_i2c_restartWrite *****************
 10671 ;; Defined at:
 10672 ;;		line 35 in file "mcc_generated_files/drivers/i2c_types.c"
 10673 ;; Parameters:    Size  Location     Type
 10674 ;;  p               1    9[COMMON] PTR void 
 10675 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 10676 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 10677 ;; Auto vars:     Size  Location     Type
 10678 ;;		None
 10679 ;; Return value:  Size  Location     Type
 10680 ;;                  1    wreg      enum E96
 10681 ;; Registers used:
 10682 ;;		wreg
 10683 ;; Tracked objects:
 10684 ;;		On entry : 0/0
 10685 ;;		On exit  : 0/0
 10686 ;;		Unchanged: 0/0
 10687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10688 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10689 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10690 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10691 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10692 ;;Total ram usage:        1 bytes
 10693 ;; Hardware stack levels used:    1
 10694 ;; This function calls:
 10695 ;;		Nothing
 10696 ;; This function is called by:
 10697 ;; This function uses a non-reentrant model
 10698 ;;
 10699                           
 10700                           
 10701                           ;psect for function i1_i2c_restartWrite
 10702  0002                     i1_i2c_restartWrite:	
 10703  0002                     i1l2559:	
 10704                           ;incstack = 0
 10705                           ; Regs used in i1_i2c_restartWrite: [wreg]
 10706                           
 10707                           
 10708                           ;i2c_types.c: 37: return i2c_restart_write;
 10709  0002  3003               	movlw	3
 10710  0003  0008               	return
 10711  0004                     __end_ofi1_i2c_restartWrite:	
 10712                           
 10713                           	psect	text93
 10714  0FFE                     __ptext93:	
 10715 ;; *************** function i1_returnReset *****************
 10716 ;; Defined at:
 10717 ;;		line 448 in file "mcc_generated_files/drivers/i2c_master.c"
 10718 ;; Parameters:    Size  Location     Type
 10719 ;;  p               1    9[COMMON] PTR void 
 10720 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 10721 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 10722 ;; Auto vars:     Size  Location     Type
 10723 ;;		None
 10724 ;; Return value:  Size  Location     Type
 10725 ;;                  1    wreg      enum E12171
 10726 ;; Registers used:
 10727 ;;		wreg
 10728 ;; Tracked objects:
 10729 ;;		On entry : 0/0
 10730 ;;		On exit  : 0/0
 10731 ;;		Unchanged: 0/0
 10732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10733 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10734 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10735 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10736 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10737 ;;Total ram usage:        1 bytes
 10738 ;; Hardware stack levels used:    1
 10739 ;; This function calls:
 10740 ;;		Nothing
 10741 ;; This function is called by:
 10742 ;; This function uses a non-reentrant model
 10743 ;;
 10744                           
 10745                           
 10746                           ;psect for function i1_returnReset
 10747  0FFE                     i1_returnReset:	
 10748  0FFE                     i1l2555:	
 10749                           ;incstack = 0
 10750                           ; Regs used in i1_returnReset: [wreg]
 10751                           
 10752                           
 10753                           ;i2c_master.c: 450: return i2c_reset_link;
 10754  0FFE  3005               	movlw	5
 10755  0FFF  0008               	return
 10756  1000                     __end_ofi1_returnReset:	
 10757                           
 10758                           	psect	text94
 10759  0FFC                     __ptext94:	
 10760 ;; *************** function i1_returnStop *****************
 10761 ;; Defined at:
 10762 ;;		line 443 in file "mcc_generated_files/drivers/i2c_master.c"
 10763 ;; Parameters:    Size  Location     Type
 10764 ;;  p               1    9[COMMON] PTR void 
 10765 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 10766 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 10767 ;; Auto vars:     Size  Location     Type
 10768 ;;		None
 10769 ;; Return value:  Size  Location     Type
 10770 ;;                  1    wreg      enum E12171
 10771 ;; Registers used:
 10772 ;;		wreg
 10773 ;; Tracked objects:
 10774 ;;		On entry : 0/0
 10775 ;;		On exit  : 0/0
 10776 ;;		Unchanged: 0/0
 10777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10778 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10779 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10780 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10781 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10782 ;;Total ram usage:        1 bytes
 10783 ;; Hardware stack levels used:    1
 10784 ;; This function calls:
 10785 ;;		Nothing
 10786 ;; This function is called by:
 10787 ;;		i1_setCallBack
 10788 ;;		_do_I2C_DO_ADDRESS_NACK
 10789 ;;		_do_I2C_TX
 10790 ;;		_do_I2C_RX
 10791 ;;		_do_I2C_TX_EMPTY
 10792 ;;		i1_do_I2C_DO_ADDRESS_NACK
 10793 ;;		i1_do_I2C_TX
 10794 ;;		i1_do_I2C_RX
 10795 ;;		i1_do_I2C_TX_EMPTY
 10796 ;; This function uses a non-reentrant model
 10797 ;;
 10798                           
 10799                           
 10800                           ;psect for function i1_returnStop
 10801  0FFC                     i1_returnStop:	
 10802  0FFC                     i1l2551:	
 10803                           ;incstack = 0
 10804                           ; Regs used in i1_returnStop: [wreg]
 10805                           
 10806                           
 10807                           ;i2c_master.c: 445: return i2c_stop;
 10808  0FFC  3001               	movlw	1
 10809  0FFD  0008               	return
 10810  0FFE                     __end_ofi1_returnStop:	
 10811                           
 10812                           	psect	text95
 10813  0638                     __ptext95:	
 10814 ;; *************** function i1_wr2RegCompleteHandler *****************
 10815 ;; Defined at:
 10816 ;;		line 110 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 10817 ;; Parameters:    Size  Location     Type
 10818 ;;  p               1    9[COMMON] PTR void 
 10819 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 10820 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 10821 ;; Auto vars:     Size  Location     Type
 10822 ;;		None
 10823 ;; Return value:  Size  Location     Type
 10824 ;;                  1    wreg      enum E97
 10825 ;; Registers used:
 10826 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10827 ;; Tracked objects:
 10828 ;;		On entry : 0/0
 10829 ;;		On exit  : 0/0
 10830 ;;		Unchanged: 0/0
 10831 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10832 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10833 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10834 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10835 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10836 ;;Total ram usage:        1 bytes
 10837 ;; Hardware stack levels used:    1
 10838 ;; Hardware stack levels required when called:    2
 10839 ;; This function calls:
 10840 ;;		i1_i2c_setBuffer
 10841 ;;		i1_i2c_setDataCompleteCallback
 10842 ;; This function is called by:
 10843 ;; This function uses a non-reentrant model
 10844 ;;
 10845                           
 10846                           
 10847                           ;psect for function i1_wr2RegCompleteHandler
 10848  0638                     i1_wr2RegCompleteHandler:	
 10849  0638                     i1l2587:	
 10850                           ;incstack = 0
 10851                           ; Regs used in i1_wr2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 10852                           
 10853                           
 10854                           ;i2c_simple_master.c: 112: i2c_setBuffer(p,2);
 10855  0638  3002               	movlw	2
 10856  0639  00F0               	movwf	i1i2c_setBuffer@bufferSize
 10857  063A  3000               	movlw	0
 10858  063B  00F1               	movwf	i1i2c_setBuffer@bufferSize+1
 10859  063C  0879               	movf	i1wr2RegCompleteHandler@p,w
 10860  063D  3186  2656  3186   	fcall	i1_i2c_setBuffer
 10861                           
 10862                           ;i2c_simple_master.c: 113: i2c_setDataCompleteCallback((0),(0));
 10863  0640  3000               	movlw	0
 10864  0641  00F5               	movwf	i1i2c_setDataCompleteCallback@cb
 10865  0642  00F6               	movwf	i1i2c_setDataCompleteCallback@cb+1
 10866  0643  01F7               	clrf	i1i2c_setDataCompleteCallback@p
 10867  0644  3186  26A3         	fcall	i1_i2c_setDataCompleteCallback
 10868                           
 10869                           ;i2c_simple_master.c: 114: return i2c_continue;
 10870  0646  3004               	movlw	4
 10871  0647  0008               	return
 10872  0648                     __end_ofi1_wr2RegCompleteHandler:	
 10873                           
 10874                           	psect	text96
 10875  06A3                     __ptext96:	
 10876 ;; *************** function i1_i2c_setDataCompleteCallback *****************
 10877 ;; Defined at:
 10878 ;;		line 89 in file "mcc_generated_files/drivers/i2c_master.c"
 10879 ;; Parameters:    Size  Location     Type
 10880 ;;  cb              2    5[COMMON] PTR FTN(PTR void ,)enum 
 10881 ;;		 -> rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), rd2RegCompleteHandler(1), rd1RegCompleteHandler(1), 
 10882 ;;		 -> wr1RegCompleteHandler(1), Absolute function(1), 
 10883 ;;  p               1    7[COMMON] PTR void 
 10884 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 10885 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 10886 ;; Auto vars:     Size  Location     Type
 10887 ;;		None
 10888 ;; Return value:  Size  Location     Type
 10889 ;;                  1    wreg      void 
 10890 ;; Registers used:
 10891 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10892 ;; Tracked objects:
 10893 ;;		On entry : 0/0
 10894 ;;		On exit  : 0/0
 10895 ;;		Unchanged: 0/0
 10896 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10897 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10898 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10899 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10900 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10901 ;;Total ram usage:        4 bytes
 10902 ;; Hardware stack levels used:    1
 10903 ;; Hardware stack levels required when called:    1
 10904 ;; This function calls:
 10905 ;;		i1_setCallBack
 10906 ;; This function is called by:
 10907 ;;		i1_wr1RegCompleteHandler
 10908 ;;		i1_rd1RegCompleteHandler
 10909 ;;		i1_rd2RegCompleteHandler
 10910 ;;		i1_wr2RegCompleteHandler
 10911 ;;		i1_rdBlkRegCompleteHandler
 10912 ;; This function uses a non-reentrant model
 10913 ;;
 10914                           
 10915                           
 10916                           ;psect for function i1_i2c_setDataCompleteCallback
 10917  06A3                     i1_i2c_setDataCompleteCallback:	
 10918                           
 10919                           ;i2c_master.c: 91: setCallBack(i2c_dataComplete,cb,p);
 10920                           
 10921                           ;incstack = 0
 10922                           ; Regs used in i1_i2c_setDataCompleteCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclat
      +                          h+cstack]
 10923  06A3  0876               	movf	i1i2c_setDataCompleteCallback@cb+1,w
 10924  06A4  00F1               	movwf	i1setCallBack@cb+1
 10925  06A5  0875               	movf	i1i2c_setDataCompleteCallback@cb,w
 10926  06A6  00F0               	movwf	i1setCallBack@cb
 10927  06A7  0877               	movf	i1i2c_setDataCompleteCallback@p,w
 10928  06A8  00F8               	movwf	??i1_i2c_setDataCompleteCallback
 10929  06A9  0878               	movf	??i1_i2c_setDataCompleteCallback,w
 10930  06AA  00F2               	movwf	i1setCallBack@p
 10931  06AB  3000               	movlw	0
 10932  06AC  3184  2484         	fcall	i1_setCallBack
 10933  06AE  0008               	return
 10934  06AF                     __end_ofi1_i2c_setDataCompleteCallback:	
 10935                           
 10936                           	psect	text97
 10937  0484                     __ptext97:	
 10938 ;; *************** function i1_setCallBack *****************
 10939 ;; Defined at:
 10940 ;;		line 453 in file "mcc_generated_files/drivers/i2c_master.c"
 10941 ;; Parameters:    Size  Location     Type
 10942 ;;  idx             1    wreg     enum E12355
 10943 ;;  cb              2    0[COMMON] PTR FTN(PTR void ,)enum 
 10944 ;;		 -> rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), rd2RegCompleteHandler(1), rd1RegCompleteHandler(1), 
 10945 ;;		 -> wr1RegCompleteHandler(1), i2c_restartWrite(1), Absolute function(1), 
 10946 ;;  p               1    2[COMMON] PTR void 
 10947 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 10948 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 10949 ;; Auto vars:     Size  Location     Type
 10950 ;;  idx             1    4[COMMON] enum E12355
 10951 ;; Return value:  Size  Location     Type
 10952 ;;                  1    wreg      void 
 10953 ;; Registers used:
 10954 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10955 ;; Tracked objects:
 10956 ;;		On entry : 0/0
 10957 ;;		On exit  : 0/0
 10958 ;;		Unchanged: 0/0
 10959 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10960 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10961 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10962 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10963 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10964 ;;Total ram usage:        5 bytes
 10965 ;; Hardware stack levels used:    1
 10966 ;; This function calls:
 10967 ;;		Nothing
 10968 ;; This function is called by:
 10969 ;;		i1_i2c_setDataCompleteCallback
 10970 ;; This function uses a non-reentrant model
 10971 ;;
 10972                           
 10973                           
 10974                           ;psect for function i1_setCallBack
 10975  0484                     i1_setCallBack:	
 10976                           
 10977                           ;incstack = 0
 10978                           ; Regs used in i1_setCallBack: [wreg+fsr1l+fsr1h+status,2+status,0]
 10979                           ;i1setCallBack@idx stored from wreg
 10980  0484  00F4               	movwf	i1setCallBack@idx
 10981                           
 10982                           ;i2c_master.c: 455: if(cb)
 10983  0485  0870               	movf	i1setCallBack@cb,w
 10984  0486  0471               	iorwf	i1setCallBack@cb+1,w
 10985  0487  1903               	btfsc	3,2
 10986  0488  2C9A               	goto	i1l2391
 10987                           
 10988                           ;i2c_master.c: 456: {
 10989                           ;i2c_master.c: 457: i2c_status.callbackTable[idx] = cb;
 10990  0489  3574               	lslf	i1setCallBack@idx,w
 10991  048A  3E2B               	addlw	(low ((_i2c_status| 0+11)))& (0+255)
 10992  048B  0086               	movwf	6
 10993  048C  0187               	clrf	7
 10994  048D  0870               	movf	i1setCallBack@cb,w
 10995  048E  3FC0               	movwi [0]fsr1
 10996  048F  0871               	movf	i1setCallBack@cb+1,w
 10997  0490  3FC1               	movwi [1]fsr1
 10998                           
 10999                           ;i2c_master.c: 458: i2c_status.callbackPayload[idx] = p;
 11000  0491  0872               	movf	i1setCallBack@p,w
 11001  0492  00F3               	movwf	??i1_setCallBack
 11002  0493  0874               	movf	i1setCallBack@idx,w
 11003  0494  3E37               	addlw	(low ((_i2c_status| 0+23)))& (0+255)
 11004  0495  0086               	movwf	6
 11005  0496  0187               	clrf	7
 11006  0497  0873               	movf	??i1_setCallBack,w
 11007  0498  0081               	movwf	1
 11008                           
 11009                           ;i2c_master.c: 459: }
 11010  0499  0008               	return
 11011  049A                     i1l2391:	
 11012                           
 11013                           ;i2c_master.c: 460: else
 11014                           ;i2c_master.c: 461: {
 11015                           ;i2c_master.c: 462: i2c_status.callbackTable[idx] = returnStop;
 11016  049A  3574               	lslf	i1setCallBack@idx,w
 11017  049B  3E2B               	addlw	(low ((_i2c_status| 0+11)))& (0+255)
 11018  049C  0086               	movwf	6
 11019  049D  0187               	clrf	7
 11020  049E  3084               	movlw	low _returnStop
 11021  049F  3FC0               	movwi [0]fsr1
 11022  04A0  3007               	movlw	high _returnStop
 11023  04A1  3FC1               	movwi [1]fsr1
 11024                           
 11025                           ;i2c_master.c: 463: i2c_status.callbackPayload[idx] = (0);
 11026  04A2  0874               	movf	i1setCallBack@idx,w
 11027  04A3  3E37               	addlw	(low ((_i2c_status| 0+23)))& (0+255)
 11028  04A4  0086               	movwf	6
 11029  04A5  0187               	clrf	7
 11030  04A6  0181               	clrf	1
 11031  04A7  0008               	return
 11032  04A8                     __end_ofi1_setCallBack:	
 11033                           
 11034                           	psect	text98
 11035  0656                     __ptext98:	
 11036 ;; *************** function i1_i2c_setBuffer *****************
 11037 ;; Defined at:
 11038 ;;		line 184 in file "mcc_generated_files/drivers/i2c_master.c"
 11039 ;; Parameters:    Size  Location     Type
 11040 ;;  buffer          1    wreg     PTR void 
 11041 ;;		 -> i2c_readDataBlock@reg(1), i2c_readDataBlock@d(3), i2c_write2ByteRegister@reg(1), i2c_write2ByteRegister@data(2),
      + 
 11042 ;;		 -> i2c_read2ByteRegister@reg(1), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@reg(1), i2c_read1ByteRegist
      +er@d2(1), 
 11043 ;;		 -> i2c_write1ByteRegister@reg(1), i2c_write1ByteRegister@data(1), NULL(0), writebuffer(17), 
 11044 ;;  bufferSize      2    0[COMMON] unsigned int 
 11045 ;; Auto vars:     Size  Location     Type
 11046 ;;  buffer          1    3[COMMON] PTR void 
 11047 ;;		 -> i2c_readDataBlock@reg(1), i2c_readDataBlock@d(3), i2c_write2ByteRegister@reg(1), i2c_write2ByteRegister@data(2),
      + 
 11048 ;;		 -> i2c_read2ByteRegister@reg(1), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@reg(1), i2c_read1ByteRegist
      +er@d2(1), 
 11049 ;;		 -> i2c_write1ByteRegister@reg(1), i2c_write1ByteRegister@data(1), NULL(0), writebuffer(17), 
 11050 ;; Return value:  Size  Location     Type
 11051 ;;                  1    wreg      void 
 11052 ;; Registers used:
 11053 ;;		wreg
 11054 ;; Tracked objects:
 11055 ;;		On entry : 0/0
 11056 ;;		On exit  : 0/0
 11057 ;;		Unchanged: 0/0
 11058 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11059 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11060 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11061 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11062 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11063 ;;Total ram usage:        4 bytes
 11064 ;; Hardware stack levels used:    1
 11065 ;; This function calls:
 11066 ;;		Nothing
 11067 ;; This function is called by:
 11068 ;;		i1_wr1RegCompleteHandler
 11069 ;;		i1_rd1RegCompleteHandler
 11070 ;;		i1_rd2RegCompleteHandler
 11071 ;;		i1_wr2RegCompleteHandler
 11072 ;;		i1_rdBlkRegCompleteHandler
 11073 ;; This function uses a non-reentrant model
 11074 ;;
 11075                           
 11076                           
 11077                           ;psect for function i1_i2c_setBuffer
 11078  0656                     i1_i2c_setBuffer:	
 11079                           
 11080                           ;incstack = 0
 11081                           ; Regs used in i1_i2c_setBuffer: [wreg]
 11082                           ;i1i2c_setBuffer@buffer stored from wreg
 11083  0656  00F3               	movwf	i1i2c_setBuffer@buffer
 11084                           
 11085                           ;i2c_master.c: 186: if(i2c_status.bufferFree)
 11086  0657  0020               	movlb	0	; select bank0
 11087  0658  1D20               	btfss	_i2c_status,2
 11088  0659  0008               	return
 11089                           
 11090                           ;i2c_master.c: 187: {
 11091                           ;i2c_master.c: 188: i2c_status.data_ptr = buffer;
 11092  065A  0873               	movf	i1i2c_setBuffer@buffer,w
 11093  065B  00F2               	movwf	??i1_i2c_setBuffer
 11094  065C  0872               	movf	??i1_i2c_setBuffer,w
 11095  065D  00A2               	movwf	low ((_i2c_status| 0+2))
 11096                           
 11097                           ;i2c_master.c: 189: i2c_status.data_length = bufferSize;
 11098  065E  0871               	movf	i1i2c_setBuffer@bufferSize+1,w
 11099  065F  00A4               	movwf	_i2c_status+4
 11100  0660  0870               	movf	i1i2c_setBuffer@bufferSize,w
 11101  0661  00A3               	movwf	_i2c_status+3
 11102                           
 11103                           ;i2c_master.c: 190: i2c_status.bufferFree = 0;
 11104  0662  1120               	bcf	_i2c_status,2
 11105  0663  0008               	return
 11106  0664                     __end_ofi1_i2c_setBuffer:	
 11107                           
 11108                           	psect	text99
 11109  07F4                     __ptext99:	
 11110 ;; *************** function i1_i2c_driver_stop *****************
 11111 ;; Defined at:
 11112 ;;		line 156 in file "mcc_generated_files/i2c_driver.c"
 11113 ;; Parameters:    Size  Location     Type
 11114 ;;		None
 11115 ;; Auto vars:     Size  Location     Type
 11116 ;;		None
 11117 ;; Return value:  Size  Location     Type
 11118 ;;                  1    wreg      void 
 11119 ;; Registers used:
 11120 ;;		None
 11121 ;; Tracked objects:
 11122 ;;		On entry : 0/0
 11123 ;;		On exit  : 0/0
 11124 ;;		Unchanged: 0/0
 11125 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11126 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11127 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11128 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11129 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11130 ;;Total ram usage:        0 bytes
 11131 ;; Hardware stack levels used:    1
 11132 ;; This function calls:
 11133 ;;		Nothing
 11134 ;; This function is called by:
 11135 ;;		i1_do_I2C_SEND_STOP
 11136 ;; This function uses a non-reentrant model
 11137 ;;
 11138                           
 11139                           
 11140                           ;psect for function i1_i2c_driver_stop
 11141  07F4                     i1_i2c_driver_stop:	
 11142                           
 11143                           ;i2c_driver.c: 158: SSP1CON2bits.PEN = 1;
 11144                           
 11145                           ;incstack = 0
 11146                           ; Regs used in i1_i2c_driver_stop: []
 11147  07F4  0024               	movlb	4	; select bank4
 11148  07F5  1516               	bsf	22,2	;volatile
 11149  07F6  0008               	return
 11150  07F7                     __end_ofi1_i2c_driver_stop:	
 11151                           
 11152                           	psect	text100
 11153  07F7                     __ptext100:	
 11154 ;; *************** function i1_i2c_driver_restart *****************
 11155 ;; Defined at:
 11156 ;;		line 151 in file "mcc_generated_files/i2c_driver.c"
 11157 ;; Parameters:    Size  Location     Type
 11158 ;;		None
 11159 ;; Auto vars:     Size  Location     Type
 11160 ;;		None
 11161 ;; Return value:  Size  Location     Type
 11162 ;;                  1    wreg      void 
 11163 ;; Registers used:
 11164 ;;		None
 11165 ;; Tracked objects:
 11166 ;;		On entry : 0/0
 11167 ;;		On exit  : 0/0
 11168 ;;		Unchanged: 0/0
 11169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11170 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11171 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11172 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11173 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11174 ;;Total ram usage:        0 bytes
 11175 ;; Hardware stack levels used:    1
 11176 ;; This function calls:
 11177 ;;		Nothing
 11178 ;; This function is called by:
 11179 ;;		i1_do_I2C_SEND_RESTART_READ
 11180 ;;		i1_do_I2C_SEND_RESTART_WRITE
 11181 ;;		i1_do_I2C_SEND_RESTART
 11182 ;; This function uses a non-reentrant model
 11183 ;;
 11184                           
 11185                           
 11186                           ;psect for function i1_i2c_driver_restart
 11187  07F7                     i1_i2c_driver_restart:	
 11188                           
 11189                           ;i2c_driver.c: 153: SSP1CON2bits.RSEN = 1;
 11190                           
 11191                           ;incstack = 0
 11192                           ; Regs used in i1_i2c_driver_restart: []
 11193  07F7  0024               	movlb	4	; select bank4
 11194  07F8  1496               	bsf	22,1	;volatile
 11195  07F9  0008               	return
 11196  07FA                     __end_ofi1_i2c_driver_restart:	
 11197                           
 11198                           	psect	text101
 11199  07CC                     __ptext101:	
 11200 ;; *************** function i1_i2c_driver_sendACK *****************
 11201 ;; Defined at:
 11202 ;;		line 196 in file "mcc_generated_files/i2c_driver.c"
 11203 ;; Parameters:    Size  Location     Type
 11204 ;;		None
 11205 ;; Auto vars:     Size  Location     Type
 11206 ;;		None
 11207 ;; Return value:  Size  Location     Type
 11208 ;;                  1    wreg      void 
 11209 ;; Registers used:
 11210 ;;		None
 11211 ;; Tracked objects:
 11212 ;;		On entry : 0/0
 11213 ;;		On exit  : 0/0
 11214 ;;		Unchanged: 0/0
 11215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11216 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11217 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11218 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11219 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11220 ;;Total ram usage:        0 bytes
 11221 ;; Hardware stack levels used:    1
 11222 ;; This function calls:
 11223 ;;		Nothing
 11224 ;; This function is called by:
 11225 ;;		i1_do_I2C_DO_ACK
 11226 ;;		i1_do_I2C_RX
 11227 ;; This function uses a non-reentrant model
 11228 ;;
 11229                           
 11230                           
 11231                           ;psect for function i1_i2c_driver_sendACK
 11232  07CC                     i1_i2c_driver_sendACK:	
 11233                           
 11234                           ;i2c_driver.c: 198: SSP1CON2bits.ACKDT = 0;
 11235                           
 11236                           ;incstack = 0
 11237                           ; Regs used in i1_i2c_driver_sendACK: []
 11238  07CC  0024               	movlb	4	; select bank4
 11239  07CD  1296               	bcf	22,5	;volatile
 11240                           
 11241                           ;i2c_driver.c: 199: SSP1CON2bits.ACKEN = 1;
 11242  07CE  1616               	bsf	22,4	;volatile
 11243  07CF  0008               	return
 11244  07D0                     __end_ofi1_i2c_driver_sendACK:	
 11245                           
 11246                           	psect	text102
 11247  07FA                     __ptext102:	
 11248 ;; *************** function _i2c_busCollisionISR *****************
 11249 ;; Defined at:
 11250 ;;		line 435 in file "mcc_generated_files/drivers/i2c_master.c"
 11251 ;; Parameters:    Size  Location     Type
 11252 ;;		None
 11253 ;; Auto vars:     Size  Location     Type
 11254 ;;		None
 11255 ;; Return value:  Size  Location     Type
 11256 ;;                  1    wreg      void 
 11257 ;; Registers used:
 11258 ;;		status,2, status,0, pclath, cstack
 11259 ;; Tracked objects:
 11260 ;;		On entry : 0/0
 11261 ;;		On exit  : 0/0
 11262 ;;		Unchanged: 0/0
 11263 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11265 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11266 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11267 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11268 ;;Total ram usage:        0 bytes
 11269 ;; Hardware stack levels used:    1
 11270 ;; Hardware stack levels required when called:    1
 11271 ;; This function calls:
 11272 ;;		_i2c_driver_clearBusCollision
 11273 ;; This function is called by:
 11274 ;;		_i2c_open
 11275 ;;		_INTERRUPT_InterruptManager
 11276 ;; This function uses a non-reentrant model
 11277 ;;
 11278                           
 11279                           
 11280                           ;psect for function _i2c_busCollisionISR
 11281  07FA                     _i2c_busCollisionISR:	
 11282                           
 11283                           ;i2c_master.c: 437: i2c_driver_clearBusCollision();
 11284                           
 11285                           ;incstack = 0
 11286                           ; Regs used in _i2c_busCollisionISR: [status,2+status,0+pclath+cstack]
 11287  07FA  3187  27FD         	fcall	_i2c_driver_clearBusCollision
 11288  07FC  0008               	return
 11289  07FD                     __end_of_i2c_busCollisionISR:	
 11290                           
 11291                           	psect	text103
 11292  07FD                     __ptext103:	
 11293 ;; *************** function _i2c_driver_clearBusCollision *****************
 11294 ;; Defined at:
 11295 ;;		line 253 in file "mcc_generated_files/i2c_driver.c"
 11296 ;; Parameters:    Size  Location     Type
 11297 ;;		None
 11298 ;; Auto vars:     Size  Location     Type
 11299 ;;		None
 11300 ;; Return value:  Size  Location     Type
 11301 ;;                  1    wreg      void 
 11302 ;; Registers used:
 11303 ;;		None
 11304 ;; Tracked objects:
 11305 ;;		On entry : 0/0
 11306 ;;		On exit  : 0/0
 11307 ;;		Unchanged: 0/0
 11308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11310 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11311 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11312 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11313 ;;Total ram usage:        0 bytes
 11314 ;; Hardware stack levels used:    1
 11315 ;; This function calls:
 11316 ;;		Nothing
 11317 ;; This function is called by:
 11318 ;;		_i2c_busCollisionISR
 11319 ;; This function uses a non-reentrant model
 11320 ;;
 11321                           
 11322                           
 11323                           ;psect for function _i2c_driver_clearBusCollision
 11324  07FD                     _i2c_driver_clearBusCollision:	
 11325                           
 11326                           ;i2c_driver.c: 255: PIR2bits.BCL1IF = 0;
 11327                           
 11328                           ;incstack = 0
 11329                           ; Regs used in _i2c_driver_clearBusCollision: []
 11330  07FD  0020               	movlb	0	; select bank0
 11331  07FE  1191               	bcf	17,3	;volatile
 11332  07FF  0008               	return
 11333  0800                     __end_of_i2c_driver_clearBusCollision:	
 11334  007E                     btemp	set	126	;btemp
 11335  007E                     int$flags	set	126
 11336  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        33
    BSS         84
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     21      77
    BANK1            80      0      57
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    i2c_write1ByteRegister@data.data	PTR unsigned char  size(1) Largest target is 0

    i2c_read1ByteRegister@d2.data	PTR unsigned char  size(1) Largest target is 0

    i2c_read2ByteRegister@result.data	PTR unsigned char  size(1) Largest target is 0

    i2c_write2ByteRegister@data.data	PTR unsigned char  size(1) Largest target is 0

    do_I2C_TX$1395$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    do_I2C_RX$1401$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    do_I2C_TX_EMPTY$1407$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    i2c_ISR$1413	PTR const FTN()enum E12337 size(2) Largest target is 1
		 -> do_I2C_TX_EMPTY(), do_I2C_RX(), do_I2C_TX(), do_I2C_DO_ADDRESS_NACK(), 
		 -> do_I2C_DO_NACK_RESTART(), do_I2C_DO_NACK_STOP(), do_I2C_DO_ACK(), do_I2C_RCEN(), 
		 -> do_I2C_SEND_ADR_WRITE(), do_I2C_SEND_ADR_READ(), do_I2C_SEND_STOP(), do_I2C_SEND_RESTART(), 
		 -> do_I2C_SEND_RESTART_WRITE(), do_I2C_SEND_RESTART_READ(), do_I2C_IDLE(), do_I2C_RESET(), 

    do_I2C_TX_EMPTY$1412	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    do_I2C_TX_EMPTY$1407	PTR FTN(PTR void ,)enum E12171 size(2) Largest target is 1
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), i2c_restartWrite(), Absolute function(), returnReset(), 
		 -> returnStop(), 

    do_I2C_RX$1406	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    do_I2C_RX$1401	PTR FTN(PTR void ,)enum E12171 size(2) Largest target is 1
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), i2c_restartWrite(), Absolute function(), returnReset(), 
		 -> returnStop(), 

    do_I2C_TX$1400	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    do_I2C_TX$1395	PTR FTN(PTR void ,)enum E12171 size(2) Largest target is 1
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), i2c_restartWrite(), Absolute function(), returnReset(), 
		 -> returnStop(), 

    returnStop@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    returnReset@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    cb$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    cb$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    Absolute function$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    i2c_restartWrite@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    cb$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    S571$11$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    mssp_waitForEvent@timeout	PTR unsigned int  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    d.data	PTR unsigned char  size(1) Largest target is 0

    S836$data	PTR unsigned char  size(1) Largest target is 0

    rdBlkRegCompleteHandler@p.data	PTR unsigned char  size(1) Largest target is 0

    rdBlkRegCompleteHandler@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    wr2RegCompleteHandler@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    rd2RegCompleteHandler@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    rd1RegCompleteHandler@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    i2c_writeNBytes@data	PTR void  size(1) Largest target is 17
		 -> writebuffer(BANK1[17]), 

    wr1RegCompleteHandler@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    setCallBack@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    setCallBack@cb	PTR FTN(PTR void ,)enum E12171 size(2) Largest target is 1
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), i2c_restartWrite(), Absolute function(), 

    fsmStateTable	PTR const FTN()enum E12337[16] size(2) Largest target is 1
		 -> do_I2C_TX_EMPTY(), do_I2C_RX(), do_I2C_TX(), do_I2C_DO_ADDRESS_NACK(), 
		 -> do_I2C_DO_NACK_RESTART(), do_I2C_DO_NACK_STOP(), do_I2C_DO_ACK(), do_I2C_RCEN(), 
		 -> do_I2C_SEND_ADR_WRITE(), do_I2C_SEND_ADR_READ(), do_I2C_SEND_STOP(), do_I2C_SEND_RESTART(), 
		 -> do_I2C_SEND_RESTART_WRITE(), do_I2C_SEND_RESTART_READ(), do_I2C_IDLE(), do_I2C_RESET(), 

    i2c_setBuffer@buffer	PTR void  size(1) Largest target is 17
		 -> i2c_readDataBlock@reg(COMMON[1]), i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@reg(COMMON[1]), i2c_write2ByteRegister@data(COMMON[2]), 
		 -> i2c_read2ByteRegister@reg(COMMON[1]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@reg(COMMON[1]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@reg(COMMON[1]), i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), writebuffer(BANK1[17]), 

    i2c_setAddressNACKCallback@p	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    i2c_setAddressNACKCallback@cb	PTR FTN(PTR void ,)enum E12171 size(2) Largest target is 1
		 -> i2c_restartWrite(), 

    i2c_setDataCompleteCallback@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    i2c_setDataCompleteCallback@cb	PTR FTN(PTR void ,)enum E12171 size(2) Largest target is 1
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), Absolute function(), 

    S571$callbackPayload	PTR void [6] size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    i2c_status.callbackPayload	PTR void [6] size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    S571$callbackTable	PTR FTN(PTR void ,)enum E12171[6] size(2) Largest target is 1
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), i2c_restartWrite(), Absolute function(), returnReset(), 
		 -> returnStop(), 

    i2c_status.callbackTable	PTR FTN(PTR void ,)enum E12171[6] size(2) Largest target is 1
		 -> i1_returnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), rd2RegCompleteHandler(), 
		 -> rd1RegCompleteHandler(), wr1RegCompleteHandler(), i2c_restartWrite(), Absolute function(), 
		 -> returnReset(), returnStop(), 

    S571$data_ptr	PTR unsigned char  size(1) Largest target is 17
		 -> i2c_readDataBlock@reg(COMMON[1]), i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@reg(COMMON[1]), i2c_write2ByteRegister@data(COMMON[2]), 
		 -> i2c_read2ByteRegister@reg(COMMON[1]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@reg(COMMON[1]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@reg(COMMON[1]), i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), writebuffer(BANK1[17]), 

    i2c_status.data_ptr	PTR unsigned char  size(1) Largest target is 17
		 -> i2c_readDataBlock@reg(COMMON[1]), i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@reg(COMMON[1]), i2c_write2ByteRegister@data(COMMON[2]), 
		 -> i2c_read2ByteRegister@reg(COMMON[1]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@reg(COMMON[1]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@reg(COMMON[1]), i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), writebuffer(BANK1[17]), 

    i2c_driver_setI2cISR@f	PTR void  size(2) Largest target is 1
		 -> i2c_ISR(), 

    i2c_driver_i2cISR	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), i2c_ISR(), 

    i2c_driver_setBusCollisionISR@f	PTR void  size(2) Largest target is 1
		 -> i2c_busCollisionISR(), 

    i2c_driver_busCollisionISR	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), i2c_busCollisionISR(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->i1_i2c_ISR
    i1_i2c_ISR->i1_do_I2C_TX
    i1_do_I2C_TX->i1_i2c_driver_TXData
    i1_do_I2C_TX->i1_i2c_driver_isNACK
    i1_do_I2C_SEND_ADR_WRITE->i1_i2c_driver_TXData
    i1_do_I2C_SEND_ADR_READ->i1_i2c_driver_TXData
    i1_wr2RegCompleteHandler->i1_i2c_setDataCompleteCallback
    i1_wr1RegCompleteHandler->i1_i2c_setDataCompleteCallback
    i1_rdBlkRegCompleteHandler->i1_i2c_setDataCompleteCallback
    i1_rd2RegCompleteHandler->i1_i2c_setDataCompleteCallback
    i1_rd1RegCompleteHandler->i1_i2c_setDataCompleteCallback
    i1_i2c_setDataCompleteCallback->i1_setCallBack

Critical Paths under _main in BANK0

    _main->_writeDisplay
    _writeDisplay->_i2c_writeNBytes
    _initializeDisplay->_i2c_writeNBytes
    _i2c_writeNBytes->_i2c_setAddressNACKCallback
    _i2c_setAddressNACKCallback->_setCallBack
    _i2c_open->_i2c_driver_setBusCollisionISR
    _i2c_open->_i2c_driver_setI2cISR
    _i2c_masterWrite->_i2c_masterOperation
    _i2c_poller->_i2c_ISR
    _i2c_ISR->_do_I2C_TX
    _do_I2C_TX->_i2c_driver_TXData
    _do_I2C_TX->_i2c_driver_isNACK
    _do_I2C_SEND_ADR_WRITE->_i2c_driver_TXData
    _do_I2C_SEND_ADR_READ->_i2c_driver_TXData
    _wr2RegCompleteHandler->_i2c_setDataCompleteCallback
    _wr1RegCompleteHandler->_i2c_setDataCompleteCallback
    _rdBlkRegCompleteHandler->_i2c_setDataCompleteCallback
    _rd2RegCompleteHandler->_i2c_setDataCompleteCallback
    _rd1RegCompleteHandler->_i2c_setDataCompleteCallback
    _i2c_setDataCompleteCallback->_setCallBack

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  168246
                                             19 BANK0      2     2      0
                  _SYSTEM_Initialize
                        _clearPixels
                          _drawPixel
                  _initializeDisplay
                       _writeDisplay
 ---------------------------------------------------------------------------------
 (1) _writeDisplay                                         6     6      0   84102
                                             13 BANK0      6     6      0
                            ___awdiv
                    _i2c_writeNBytes
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     604
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _initializeDisplay                                    3     3      0   83528
                                             13 BANK0      3     3      0
                    _i2c_writeNBytes
 ---------------------------------------------------------------------------------
 (2) _i2c_writeNBytes                                      4     1      3   83048
                                              9 BANK0      4     1      3
                          _i2c_close
                    _i2c_masterWrite
                           _i2c_open
         _i2c_setAddressNACKCallback
                      _i2c_setBuffer
 ---------------------------------------------------------------------------------
 (3) _i2c_setAddressNACKCallback                           4     1      3    1870
                                              5 BANK0      4     1      3
                        _setCallBack
 ---------------------------------------------------------------------------------
 (3) _i2c_open                                             3     3      0     366
                                              2 BANK0      3     3      0
                    _i2c_driver_open
      _i2c_driver_setBusCollisionISR
               _i2c_driver_setI2cISR
                      _mssp_clearIRQ
 ---------------------------------------------------------------------------------
 (4) _i2c_driver_setI2cISR                                 2     0      2      98
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _i2c_driver_setBusCollisionISR                        2     0      2      98
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _i2c_driver_open                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2c_masterWrite                                      0     0      0   78362
                _i2c_masterOperation
 ---------------------------------------------------------------------------------
 (4) _i2c_masterOperation                                  3     3      0   78362
                                              5 BANK0      3     3      0
                   _i2c_driver_start
                         _i2c_poller
                  _mssp_IRQisEnabled
 ---------------------------------------------------------------------------------
 (5) _mssp_IRQisEnabled                                    2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (5) _i2c_poller                                           0     0      0   78192
                            _i2c_ISR
                  _mssp_waitForEvent
 ---------------------------------------------------------------------------------
 (6) _mssp_waitForEvent                                    1     1      0      50
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _i2c_ISR                                              1     1      0   78142
                                              4 BANK0      1     1      0
                      _do_I2C_DO_ACK *
             _do_I2C_DO_ADDRESS_NACK *
             _do_I2C_DO_NACK_RESTART *
                _do_I2C_DO_NACK_STOP *
                        _do_I2C_IDLE *
                        _do_I2C_RCEN *
                       _do_I2C_RESET *
                          _do_I2C_RX *
               _do_I2C_SEND_ADR_READ *
              _do_I2C_SEND_ADR_WRITE *
                _do_I2C_SEND_RESTART *
           _do_I2C_SEND_RESTART_READ *
          _do_I2C_SEND_RESTART_WRITE *
                   _do_I2C_SEND_STOP *
                          _do_I2C_TX *
                    _do_I2C_TX_EMPTY *
                  _i2c_driver_isNACK
                      _mssp_clearIRQ
 ---------------------------------------------------------------------------------
 (7) _do_I2C_TX_EMPTY                                      1     1      0   19494
                                              0 BANK0      1     1      0
                   Absolute function *
                _do_I2C_SEND_RESTART
                   _do_I2C_SEND_STOP
                   _i2c_restartWrite *
                        _mssp_setIRQ
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
                        _returnReset *
                         _returnStop *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (8) _mssp_setIRQ                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_TX                                            3     3      0   19616
                                              1 BANK0      3     3      0
                   Absolute function *
           _do_I2C_SEND_RESTART_READ
          _do_I2C_SEND_RESTART_WRITE
                   _do_I2C_SEND_STOP
                  _i2c_driver_TXData
                  _i2c_driver_isNACK
                   _i2c_restartWrite *
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
                        _returnReset *
                         _returnStop *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (7) _i2c_driver_isNACK                                    1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (8) _do_I2C_SEND_RESTART_WRITE                            0     0      0       0
                 _i2c_driver_restart
 ---------------------------------------------------------------------------------
 (8) _do_I2C_SEND_RESTART_READ                             0     0      0       0
                 _i2c_driver_restart
 ---------------------------------------------------------------------------------
 (7) _do_I2C_SEND_ADR_WRITE                                0     0      0      22
                  _i2c_driver_TXData
 ---------------------------------------------------------------------------------
 (7) _do_I2C_SEND_ADR_READ                                 0     0      0      22
                  _i2c_driver_TXData
 ---------------------------------------------------------------------------------
 (8) _i2c_driver_TXData                                    1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_RX                                            1     1      0   19494
                                              0 BANK0      1     1      0
                   Absolute function *
             _do_I2C_DO_NACK_RESTART
                _do_I2C_DO_NACK_STOP
               _i2c_driver_getRXData
                 _i2c_driver_sendACK
                   _i2c_restartWrite *
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
                        _returnReset *
                         _returnStop *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (8) _i2c_driver_getRXData                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _do_I2C_DO_NACK_STOP                                  0     0      0       0
                _i2c_driver_sendNACK
 ---------------------------------------------------------------------------------
 (8) _do_I2C_DO_NACK_RESTART                               0     0      0       0
                _i2c_driver_sendNACK
 ---------------------------------------------------------------------------------
 (9) _i2c_driver_sendNACK                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_RESET                                         0     0      0       0
                _i2c_driver_resetBus
 ---------------------------------------------------------------------------------
 (8) _i2c_driver_resetBus                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_RCEN                                          0     0      0       0
                 _i2c_driver_startRX
 ---------------------------------------------------------------------------------
 (8) _i2c_driver_startRX                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_IDLE                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_DO_ADDRESS_NACK                               1     1      0   19494
                                              0 BANK0      1     1      0
                   Absolute function *
                _do_I2C_SEND_RESTART
                   _do_I2C_SEND_STOP
                   _i2c_restartWrite *
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
                        _returnReset *
                         _returnStop *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (8) _wr2RegCompleteHandler                                1     0      1    3852
                                              9 BANK0      1     0      1
                      _i2c_setBuffer
        _i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (8) _wr1RegCompleteHandler                                1     0      1    3852
                                              9 BANK0      1     0      1
                      _i2c_setBuffer
        _i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (8) _returnStop                                           1     0      1      76
                                              9 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (8) _returnReset                                          1     0      1       0
                                              9 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (8) _rdBlkRegCompleteHandler                              1     0      1    4010
                                              9 BANK0      1     0      1
                      _i2c_setBuffer
        _i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (8) _rd2RegCompleteHandler                                1     0      1    3852
                                              9 BANK0      1     0      1
                      _i2c_setBuffer
        _i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (8) _rd1RegCompleteHandler                                1     0      1    3852
                                              9 BANK0      1     0      1
                      _i2c_setBuffer
        _i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (9) _i2c_setDataCompleteCallback                          4     1      3    2478
                                              5 BANK0      4     1      3
                        _setCallBack
 ---------------------------------------------------------------------------------
 (4) _setCallBack                                          5     2      3     914
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (3) _i2c_setBuffer                                        4     2      2    1352
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (8) _i2c_restartWrite                                     1     0      1       0
                                              9 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (8) _do_I2C_SEND_STOP                                     0     0      0       0
                    _i2c_driver_stop
 ---------------------------------------------------------------------------------
 (9) _i2c_driver_stop                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _do_I2C_SEND_RESTART                                  0     0      0       0
                 _i2c_driver_restart
 ---------------------------------------------------------------------------------
 (9) _i2c_driver_restart                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              1     0      1       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_DO_ACK                                        0     0      0       0
                 _i2c_driver_sendACK
 ---------------------------------------------------------------------------------
 (8) _i2c_driver_sendACK                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2c_driver_start                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2c_close                                            2     2      0      24
                                              0 BANK0      2     2      0
                      _mssp_clearIRQ
                    _mssp_disableIRQ
 ---------------------------------------------------------------------------------
 (4) _mssp_disableIRQ                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _mssp_clearIRQ                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _drawPixel                                            9     7      2     548
                                              0 BANK0      9     7      2
 ---------------------------------------------------------------------------------
 (1) _clearPixels                                          3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _INTERRUPT_InterruptManager                          1     1      0   14790
                                              5 COMMON     1     1      0
                   Absolute function *
                _i2c_busCollisionISR *
                          i1_i2c_ISR *
 ---------------------------------------------------------------------------------
 (12) i1_i2c_ISR                                           1     1      0   14790
                                              4 COMMON     1     1      0
                    i1_do_I2C_DO_ACK *
           i1_do_I2C_DO_ADDRESS_NACK *
           i1_do_I2C_DO_NACK_RESTART *
              i1_do_I2C_DO_NACK_STOP *
                      i1_do_I2C_IDLE *
                      i1_do_I2C_RCEN *
                     i1_do_I2C_RESET *
                        i1_do_I2C_RX *
             i1_do_I2C_SEND_ADR_READ *
            i1_do_I2C_SEND_ADR_WRITE *
              i1_do_I2C_SEND_RESTART *
         i1_do_I2C_SEND_RESTART_READ *
        i1_do_I2C_SEND_RESTART_WRITE *
                 i1_do_I2C_SEND_STOP *
                        i1_do_I2C_TX *
                  i1_do_I2C_TX_EMPTY *
                i1_i2c_driver_isNACK
                    i1_mssp_clearIRQ
 ---------------------------------------------------------------------------------
 (13) i1_mssp_clearIRQ                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_TX_EMPTY                                   1     1      0    3656
                                              0 COMMON     1     1      0
                   Absolute function *
              i1_do_I2C_SEND_RESTART
                 i1_do_I2C_SEND_STOP
                 i1_i2c_restartWrite *
                      i1_mssp_setIRQ
            i1_rd1RegCompleteHandler *
            i1_rd2RegCompleteHandler *
          i1_rdBlkRegCompleteHandler *
                      i1_returnReset *
                       i1_returnStop *
            i1_wr1RegCompleteHandler *
            i1_wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (14) i1_mssp_setIRQ                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_TX                                         3     3      0    3778
                                              1 COMMON     3     3      0
                   Absolute function *
         i1_do_I2C_SEND_RESTART_READ
        i1_do_I2C_SEND_RESTART_WRITE
                 i1_do_I2C_SEND_STOP
                i1_i2c_driver_TXData
                i1_i2c_driver_isNACK
                 i1_i2c_restartWrite *
            i1_rd1RegCompleteHandler *
            i1_rd2RegCompleteHandler *
          i1_rdBlkRegCompleteHandler *
                      i1_returnReset *
                       i1_returnStop *
            i1_wr1RegCompleteHandler *
            i1_wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (13) i1_i2c_driver_isNACK                                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (14) i1_do_I2C_SEND_RESTART_WRITE                         0     0      0       0
               i1_i2c_driver_restart
 ---------------------------------------------------------------------------------
 (14) i1_do_I2C_SEND_RESTART_READ                          0     0      0       0
               i1_i2c_driver_restart
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_SEND_ADR_WRITE                             0     0      0      22
                i1_i2c_driver_TXData
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_SEND_ADR_READ                              0     0      0      22
                i1_i2c_driver_TXData
 ---------------------------------------------------------------------------------
 (14) i1_i2c_driver_TXData                                 1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_RX                                         1     1      0    3656
                                              0 COMMON     1     1      0
                   Absolute function *
           i1_do_I2C_DO_NACK_RESTART
              i1_do_I2C_DO_NACK_STOP
             i1_i2c_driver_getRXData
               i1_i2c_driver_sendACK
                 i1_i2c_restartWrite *
            i1_rd1RegCompleteHandler *
            i1_rd2RegCompleteHandler *
          i1_rdBlkRegCompleteHandler *
                      i1_returnReset *
                       i1_returnStop *
            i1_wr1RegCompleteHandler *
            i1_wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (14) i1_i2c_driver_getRXData                              0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i1_do_I2C_DO_NACK_STOP                               0     0      0       0
              i1_i2c_driver_sendNACK
 ---------------------------------------------------------------------------------
 (14) i1_do_I2C_DO_NACK_RESTART                            0     0      0       0
              i1_i2c_driver_sendNACK
 ---------------------------------------------------------------------------------
 (15) i1_i2c_driver_sendNACK                               0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_RESET                                      0     0      0       0
              i1_i2c_driver_resetBus
 ---------------------------------------------------------------------------------
 (14) i1_i2c_driver_resetBus                               0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_RCEN                                       0     0      0       0
               i1_i2c_driver_startRX
 ---------------------------------------------------------------------------------
 (14) i1_i2c_driver_startRX                                0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_IDLE                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_DO_ADDRESS_NACK                            1     1      0    3656
                                              0 COMMON     1     1      0
                   Absolute function *
              i1_do_I2C_SEND_RESTART
                 i1_do_I2C_SEND_STOP
                 i1_i2c_restartWrite *
            i1_rd1RegCompleteHandler *
            i1_rd2RegCompleteHandler *
          i1_rdBlkRegCompleteHandler *
                      i1_returnReset *
                       i1_returnStop *
            i1_wr1RegCompleteHandler *
            i1_wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (14) i1_wr2RegCompleteHandler                             1     0      1     706
                                              9 COMMON     1     0      1
                    i1_i2c_setBuffer
      i1_i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (14) i1_wr1RegCompleteHandler                             1     0      1     706
                                              9 COMMON     1     0      1
                    i1_i2c_setBuffer
      i1_i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (14) i1_returnStop                                        1     0      1      76
                                              9 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (14) i1_returnReset                                       1     0      1       0
                                              9 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (14) i1_rdBlkRegCompleteHandler                           1     0      1     756
                                              9 COMMON     1     0      1
                    i1_i2c_setBuffer
      i1_i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (14) i1_rd2RegCompleteHandler                             1     0      1     706
                                              9 COMMON     1     0      1
                    i1_i2c_setBuffer
      i1_i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (14) i1_rd1RegCompleteHandler                             1     0      1     706
                                              9 COMMON     1     0      1
                    i1_i2c_setBuffer
      i1_i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (15) i1_i2c_setDataCompleteCallback                       4     1      3     510
                                              5 COMMON     4     1      3
                      i1_setCallBack
 ---------------------------------------------------------------------------------
 (16) i1_setCallBack                                       5     2      3     206
                                              0 COMMON     5     2      3
 ---------------------------------------------------------------------------------
 (15) i1_i2c_setBuffer                                     4     2      2     174
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (14) i1_i2c_restartWrite                                  1     0      1       0
                                              9 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (14) i1_do_I2C_SEND_STOP                                  0     0      0       0
                  i1_i2c_driver_stop
 ---------------------------------------------------------------------------------
 (15) i1_i2c_driver_stop                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i1_do_I2C_SEND_RESTART                               0     0      0       0
               i1_i2c_driver_restart
 ---------------------------------------------------------------------------------
 (15) i1_i2c_driver_restart                                0     0      0       0
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              1     0      1       0
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_DO_ACK                                     0     0      0       0
               i1_i2c_driver_sendACK
 ---------------------------------------------------------------------------------
 (14) i1_i2c_driver_sendACK                                0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _i2c_busCollisionISR                                 0     0      0       0
       _i2c_driver_clearBusCollision
 ---------------------------------------------------------------------------------
 (13) _i2c_driver_clearBusCollision                        0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 16
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SYSTEM_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
   _clearPixels
   _drawPixel
   _initializeDisplay
     _i2c_writeNBytes
       _i2c_close
         _mssp_clearIRQ
         _mssp_disableIRQ
       _i2c_masterWrite
         _i2c_masterOperation
           _i2c_driver_start
           _i2c_poller
             _i2c_ISR
               _do_I2C_DO_ACK *
                 _i2c_driver_sendACK
               _do_I2C_DO_ADDRESS_NACK *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_DO_NACK_RESTART *
                 _i2c_driver_sendNACK
               _do_I2C_DO_NACK_STOP *
                 _i2c_driver_sendNACK
               _do_I2C_IDLE *
               _do_I2C_RCEN *
                 _i2c_driver_startRX
               _do_I2C_RESET *
                 _i2c_driver_resetBus
               _do_I2C_RX *
                 Absolute function(Fake) *
                 _do_I2C_DO_NACK_RESTART *
                   _i2c_driver_sendNACK
                 _do_I2C_DO_NACK_STOP *
                   _i2c_driver_sendNACK
                 _i2c_driver_getRXData *
                 _i2c_driver_sendACK *
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_SEND_ADR_READ *
                 _i2c_driver_TXData
               _do_I2C_SEND_ADR_WRITE *
                 _i2c_driver_TXData
               _do_I2C_SEND_RESTART *
                 _i2c_driver_restart
               _do_I2C_SEND_RESTART_READ *
                 _i2c_driver_restart
               _do_I2C_SEND_RESTART_WRITE *
                 _i2c_driver_restart
               _do_I2C_SEND_STOP *
                 _i2c_driver_stop
               _do_I2C_TX *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART_READ *
                   _i2c_driver_restart
                 _do_I2C_SEND_RESTART_WRITE *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_driver_TXData *
                 _i2c_driver_isNACK *
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_TX_EMPTY *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_restartWrite *
                 _mssp_setIRQ *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _i2c_driver_isNACK *
               _mssp_clearIRQ *
             _mssp_waitForEvent
           _mssp_IRQisEnabled
       _i2c_open
         _i2c_driver_open
         _i2c_driver_setBusCollisionISR
         _i2c_driver_setI2cISR
         _mssp_clearIRQ
       _i2c_setAddressNACKCallback
         _setCallBack
       _i2c_setBuffer
   _writeDisplay
     ___awdiv
     _i2c_writeNBytes
       _i2c_close
         _mssp_clearIRQ
         _mssp_disableIRQ
       _i2c_masterWrite
         _i2c_masterOperation
           _i2c_driver_start
           _i2c_poller
             _i2c_ISR
               _do_I2C_DO_ACK *
                 _i2c_driver_sendACK
               _do_I2C_DO_ADDRESS_NACK *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_DO_NACK_RESTART *
                 _i2c_driver_sendNACK
               _do_I2C_DO_NACK_STOP *
                 _i2c_driver_sendNACK
               _do_I2C_IDLE *
               _do_I2C_RCEN *
                 _i2c_driver_startRX
               _do_I2C_RESET *
                 _i2c_driver_resetBus
               _do_I2C_RX *
                 Absolute function(Fake) *
                 _do_I2C_DO_NACK_RESTART *
                   _i2c_driver_sendNACK
                 _do_I2C_DO_NACK_STOP *
                   _i2c_driver_sendNACK
                 _i2c_driver_getRXData *
                 _i2c_driver_sendACK *
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_SEND_ADR_READ *
                 _i2c_driver_TXData
               _do_I2C_SEND_ADR_WRITE *
                 _i2c_driver_TXData
               _do_I2C_SEND_RESTART *
                 _i2c_driver_restart
               _do_I2C_SEND_RESTART_READ *
                 _i2c_driver_restart
               _do_I2C_SEND_RESTART_WRITE *
                 _i2c_driver_restart
               _do_I2C_SEND_STOP *
                 _i2c_driver_stop
               _do_I2C_TX *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART_READ *
                   _i2c_driver_restart
                 _do_I2C_SEND_RESTART_WRITE *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_driver_TXData *
                 _i2c_driver_isNACK *
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_TX_EMPTY *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_restartWrite *
                 _mssp_setIRQ *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _i2c_driver_isNACK *
               _mssp_clearIRQ *
             _mssp_waitForEvent
           _mssp_IRQisEnabled
       _i2c_open
         _i2c_driver_open
         _i2c_driver_setBusCollisionISR
         _i2c_driver_setI2cISR
         _mssp_clearIRQ
       _i2c_setAddressNACKCallback
         _setCallBack
       _i2c_setBuffer

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _i2c_busCollisionISR *
     _i2c_driver_clearBusCollision
   i1_i2c_ISR *
     i1_do_I2C_DO_ACK *
       i1_i2c_driver_sendACK
     i1_do_I2C_DO_ADDRESS_NACK *
       Absolute function(Fake) *
       i1_do_I2C_SEND_RESTART *
         i1_i2c_driver_restart
       i1_do_I2C_SEND_STOP *
         i1_i2c_driver_stop
       i1_i2c_restartWrite *
       i1_rd1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rd2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rdBlkRegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_returnReset *
       i1_returnStop *
       i1_wr1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_wr2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
     i1_do_I2C_DO_NACK_RESTART *
       i1_i2c_driver_sendNACK
     i1_do_I2C_DO_NACK_STOP *
       i1_i2c_driver_sendNACK
     i1_do_I2C_IDLE *
     i1_do_I2C_RCEN *
       i1_i2c_driver_startRX
     i1_do_I2C_RESET *
       i1_i2c_driver_resetBus
     i1_do_I2C_RX *
       Absolute function(Fake) *
       i1_do_I2C_DO_NACK_RESTART *
         i1_i2c_driver_sendNACK
       i1_do_I2C_DO_NACK_STOP *
         i1_i2c_driver_sendNACK
       i1_i2c_driver_getRXData *
       i1_i2c_driver_sendACK *
       i1_i2c_restartWrite *
       i1_rd1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rd2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rdBlkRegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_returnReset *
       i1_returnStop *
       i1_wr1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_wr2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
     i1_do_I2C_SEND_ADR_READ *
       i1_i2c_driver_TXData
     i1_do_I2C_SEND_ADR_WRITE *
       i1_i2c_driver_TXData
     i1_do_I2C_SEND_RESTART *
       i1_i2c_driver_restart
     i1_do_I2C_SEND_RESTART_READ *
       i1_i2c_driver_restart
     i1_do_I2C_SEND_RESTART_WRITE *
       i1_i2c_driver_restart
     i1_do_I2C_SEND_STOP *
       i1_i2c_driver_stop
     i1_do_I2C_TX *
       Absolute function(Fake) *
       i1_do_I2C_SEND_RESTART_READ *
         i1_i2c_driver_restart
       i1_do_I2C_SEND_RESTART_WRITE *
         i1_i2c_driver_restart
       i1_do_I2C_SEND_STOP *
         i1_i2c_driver_stop
       i1_i2c_driver_TXData *
       i1_i2c_driver_isNACK *
       i1_i2c_restartWrite *
       i1_rd1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rd2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rdBlkRegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_returnReset *
       i1_returnStop *
       i1_wr1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_wr2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
     i1_do_I2C_TX_EMPTY *
       Absolute function(Fake) *
       i1_do_I2C_SEND_RESTART *
         i1_i2c_driver_restart
       i1_do_I2C_SEND_STOP *
         i1_i2c_driver_stop
       i1_i2c_restartWrite *
       i1_mssp_setIRQ *
       i1_rd1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rd2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rdBlkRegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_returnReset *
       i1_returnStop *
       i1_wr1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_wr2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
     i1_i2c_driver_isNACK *
     i1_mssp_clearIRQ *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     15      4D       5       96.3%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      39       7       71.3%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      90      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      90      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Apr 11 10:33:06 2018

            __end_of_i2c_driver_restart 07DF                     i1_i2c_driver_isNACK 0697  
                          returnReset@p 0060              __end_of_i2c_driver_startRX 07D9  
         _do_I2C_SEND_RESTART$intlevel0 0730                             __CFG_CP$OFF 0000  
                                    l55 06BD                         i1_mssp_clearIRQ 07E8  
                          ___awdiv@sign 005D                    __size_of_do_I2C_IDLE 0009  
                   _do_I2C_SEND_RESTART 072C                    __size_of_do_I2C_RCEN 000A  
                  __end_ofi1_returnStop 0FFE                    ?i1_i2c_driver_TXData 0070  
                           i1_do_I2C_RX 0320                             i1_do_I2C_TX 024C  
                           __CFG_LVP$ON 0000                    i1_i2c_driver_sendACK 07CC  
                                   l190 06FF                                     l393 0606  
                                   l386 02DC                                     l467 01E1  
                                   l483 02FC                i1_do_I2C_DO_NACK_RESTART 07AC  
          __size_of_i2c_masterOperation 001F                    _returnStop$intlevel0 0788  
                  i1_i2c_driver_restart 07F7           i2c_setDataCompleteCallback@cb 005C  
              ?i1_rd2RegCompleteHandler 0079                   __size_of_do_I2C_RESET 000B  
                          __CFG_BORV$LO 0000                                     wreg 0009  
                          __CFG_IESO$ON 0000                    i1_i2c_driver_startRX 07F1  
                 __end_ofi1_returnReset 1000                    ?i1_i2c_driver_isNACK 0070  
              ?i1_wr2RegCompleteHandler 0079         ??i1_i2c_setDataCompleteCallback 0078  
                i1_i2c_driver_getRXData 07EE                   __end_ofi1_mssp_setIRQ 07EE  
                          __CFG_ZCD$OFF 0000                 ??_rd2RegCompleteHandler 0061  
                                  l2201 05E0                   i1_i2c_driver_sendNACK 07C8  
                                  l2141 0730                                    l2135 0738  
                                  l2209 0550                                    l2217 06D4  
                                  l2129 0740                                    l2153 0718  
                                  l2227 0707                                    l2147 0728  
                                  l2235 068F                                    l2243 06C9  
                                  l2251 06F3                                    l2165 0788  
                                  l2173 077C                                    l2159 0710  
                                  l2097 0476                                    l2169 0782  
                                  l2177 05CA                                    l2185 05B4  
                                  l2193 059E                                    l2259 0720  
                         i1returnStop@p 0079                                    l4501 01C2  
                                  l2653 016B                                    l2671 018A  
                                  l2681 01A5                                    l4515 01FA  
                                  l4507 01C5                                    l2659 0176  
                                  l2861 00D9                                    l2853 0080  
                                  l4533 02FE                                    l2685 01AD  
                                  l2677 019C                                    l2669 017E  
                                  l4551 039F                                    l4543 0304  
                                  l4519 02E2                                    l2857 00AF  
                                  l4545 0399                                    l4481 03F9  
                                  l4473 03EF                                    l4537 0301  
                                  l4547 039C                                    l4563 03A6  
                                  l4557 03A3                                    l4477 03F6  
                                  l4493 01BC                                    l4573 04BC  
                                  l4565 04AC                                    l4581 06AF  
                                  l4653 0458                                    l4645 043B  
                                  l4487 03FC                                    l4497 01BF  
                                  l4489 01B6                                    l4593 051C  
                                  l4761 0154                                    l4841 0374  
                                  l4595 0520                                    l4755 010F  
                                  l4781 021A                                    l4845 0378  
                                  l4837 036C                                    l4829 0379  
                                  l4599 052A                                    l4775 0215  
                                  l4769 0206                                    l4787 0227  
                                  u1204 008E                                    u1205 008C  
                                  u1045 0181                                    u1214 00A1  
                                  u1215 009F                                    u1065 018B  
                                  u1234 00BB                                    u1235 00B9  
                                  u1075 0195                                    u1244 00C7  
                                  u1245 00C5                                    u1085 019D  
                                  _LATA 010C                                    u1174 005D  
                                  _LATB 010D                                    u1175 005B  
                                  _LATC 010E                                    u1264 00E6  
                                  u1184 0072                                    u1265 00E4  
                                  u1185 0070                                    u1274 00F2  
                                  u1275 00F0                                    u3387 06C1  
                  ?_do_I2C_SEND_RESTART 0070                                    _PLLR 04D6  
                                  _WPUA 020C                                    _WPUB 020D  
                                  _WPUC 020E                 ??_wr2RegCompleteHandler 0061  
                    initializeDisplay@i 0065                            __CFG_WRT$OFF 0000  
                         __CFG_FCMEN$ON 0000                   i1_i2c_driver_resetBus 0FF9  
     __size_of_do_I2C_SEND_RESTART_READ 0008                                    _fall 006C  
             ?_do_I2C_SEND_RESTART_READ 0070                         ??_mssp_clearIRQ 0057  
                                  _main 035E               __size_of_do_I2C_SEND_STOP 0008  
                __size_of_do_I2C_DO_ACK 0008                                    fsr0h 0005  
                                  fsr1h 0007                                    indf0 0000  
                                  fsr0l 0004                                    indf1 0001  
                                  fsr1l 0006                                    btemp 007E  
                     ??i1_do_I2C_DO_ACK 0070                           __CFG_BOREN$ON 0000  
                 ?_do_I2C_SEND_ADR_READ 0070                __size_of_i2c_writeNBytes 0026  
                                  start 0027                           _i2c_setBuffer 0648  
                         __CFG_MCLRE$ON 0000                         __end_of_i2c_ISR 04CB  
      __size_of_rdBlkRegCompleteHandler 001D                ??_do_I2C_DO_NACK_RESTART 0057  
                         i1_do_I2C_IDLE 0796                           i1_do_I2C_RCEN 0790  
                          _do_I2C_RESET 06D0                          i1returnReset@p 0079  
                         __CFG_PLLEN$ON 0000          __size_of_OSCILLATOR_Initialize 000A  
           i2c_setAddressNACKCallback@p 005E                   ??i1_i2c_driver_TXData 0070  
         __end_of_OSCILLATOR_Initialize 0703                   ?i1_i2c_driver_sendACK 0070  
                                 ?_main 0070                         __end_of___awdiv 01B2  
                         __CFG_WDTE$OFF 0000                __size_of_mssp_disableIRQ 0003  
                       ___awdiv@divisor 0057                                   i1l163 0017  
                                 i1l168 0022                                   i1l467 0277  
                                 i1l483 033A                         ___awdiv@counter 005C  
                 ?i1_i2c_driver_restart 0070                                   _TRISA 008C  
                                 _TRISB 008D                                   _TRISC 008E  
                 ?i1_i2c_driver_startRX 0070                   ??i1_i2c_driver_isNACK 0070  
                           i2c_open@ret 005B                             _writebuffer 00C8  
                    __size_ofi1_i2c_ISR 001F                    _i2c_driver_getRXData 07D3  
          ?i1_do_I2C_SEND_RESTART_WRITE 0070              ?_do_I2C_SEND_RESTART_WRITE 0070  
                                 _score 0051                                   _walls 00C0  
                                 _start 007C                   ??_do_I2C_SEND_RESTART 0057  
                                 pclath 000A              _i2c_driver_busCollisionISR 007A  
                ?_do_I2C_SEND_ADR_WRITE 0070                                   status 0003  
                                 wtemp0 007E                   __size_of_writeDisplay 005A  
                    i2c_driver_TXData@d 0057               __size_of_i2c_driver_start 0003  
                        ?_i2c_setBuffer 0057                            ?_setCallBack 0057  
               __end_ofi1_mssp_clearIRQ 07EB                           _fsmStateTable 00A0  
                       __initialization 0029                    __size_of_clearPixels 001A  
        __size_ofi1_do_I2C_SEND_RESTART 0004                              _i2c_poller 06AF  
         __end_ofi1_do_I2C_SEND_RESTART 07C0                              _i2c_status 0020  
                        ?i1_do_I2C_IDLE 0070                            __end_of_main 0395  
                        ?i1_do_I2C_RCEN 0070              __end_ofi1_do_I2C_SEND_STOP 07BC  
                      __end_of_i2c_open 02DE                    _i2c_driver_setI2cISR 0766  
                        __CFG_LPBOR$OFF 0000             ?_INTERRUPT_InterruptManager 0070  
       __end_ofi1_rd2RegCompleteHandler 0618                           setCallBack@cb 0057  
                        i1_do_I2C_RESET 0753                           _do_I2C_DO_ACK 071C  
                                ??_main 006A                           _do_I2C_TX$774 0059  
                     ?_i2c_restartWrite 0060         __end_ofi1_wr2RegCompleteHandler 0648  
                          i2c_close@ret 0058                         _i2c_driver_open 06DB  
                    ??_i2c_restartWrite 0061                         _i2c_driver_stop 07D9  
               ?_do_I2C_DO_ADDRESS_NACK 0070                  ?i1_i2c_driver_sendNACK 0070  
                          _writeDisplay 0106                   ?_i2c_driver_getRXData 0070  
                      ___awdiv@dividend 0059         i1i2c_setDataCompleteCallback@cb 0075  
                                _ANSELA 018C                                  _ANSELB 018D  
                                _ANSELC 018E                                  _BORCON 0116  
               ?i1_do_I2C_SEND_ADR_READ 0070                  ?i1_i2c_driver_resetBus 0070  
                                _RB4PPS 0E9C                                  _RB6PPS 0E9E  
                                _ODCONA 028C                                  _ODCONB 028D  
                                _ODCONC 028E                                  i1l2521 07C0  
                                i1l2515 07C4                                  i1l2701 0796  
                                i1l2533 07B8                                  i1l2391 049A  
                                i1l2551 0FFC                                  i1l2527 07BC  
                                i1l2545 07AC                                  i1l2555 0FFE  
                                i1l2563 0628                                  i1l2571 0618  
                                i1l2539 07B0                                  i1l2709 0744  
                                i1l2717 074C                                  i1l2725 0790  
                                i1l2733 07B4                                  i1l2559 0002  
                                i1l2587 0638                                  i1l2579 0608  
                                i1l2595 0583                                  i1l2691 0753  
                                i1l4701 0320                                  i1l4715 033C  
                                i1l4733 03C8                                  i1l4725 0342  
                                i1l4805 053D                                  i1l4727 03C2  
                                i1l4663 04D5                                  i1l4655 04CB  
                                i1l4671 024C                                  i1l4719 033F  
                                i1l4729 03C5                                  i1l4745 03CF  
                                i1l4739 03CC                                  i1l4659 04D2  
                                i1l4683 0258                                  i1l4675 0252  
                                i1l4669 04D8                                  i1l4679 0255  
                                i1l4697 0290                                  i1l4689 025B  
                                i1l4797 052D           ??i1_do_I2C_SEND_RESTART_WRITE 0070  
                    __size_of_i2c_close 0016                                  _OSCCON 0099  
               i1_rd1RegCompleteHandler 0618                  ??_do_I2C_SEND_ADR_READ 0058  
              rdBlkRegCompleteHandler@p 0060                               ??_i2c_ISR 005B  
               i1_wr1RegCompleteHandler 0628             ??i1_rdBlkRegCompleteHandler 007A  
                        __CFG_PWRTE$OFF 0000                     _do_I2C_RX$intlevel0 02E2  
                 __size_ofi1_returnStop 0002             __end_of_do_I2C_DO_NACK_STOP 071C  
                     __end_ofi1_i2c_ISR 054C     __end_of_i2c_setDataCompleteCallback 068B  
           _i2c_setDataCompleteCallback 067E                         _i2c_masterWrite 07A0  
                             ??___awdiv 005B                          __CFG_STVREN$ON 0000  
       __size_of_do_I2C_DO_NACK_RESTART 0008                   ?_i2c_driver_setI2cISR 0057  
                     ??_i2c_writeNBytes 0063                  __end_ofi1_do_I2C_RESET 075A  
                       i1_i2c_setBuffer 0656                  ??i1_i2c_driver_sendACK 0070  
                      ___awdiv@quotient 005E                          ?_do_I2C_DO_ACK 0070  
           __size_ofi1_i2c_restartWrite 0002                  ??i1_i2c_driver_restart 0070  
                ??i1_i2c_driver_startRX 0070          __end_of_do_I2C_DO_ADDRESS_NACK 0412  
           ?_i2c_setAddressNACKCallback 005C                            ?_returnReset 0060  
         _do_I2C_DO_NACK_STOP$intlevel0 0718              i1rdBlkRegCompleteHandler@p 0079  
     __size_ofi1_do_I2C_DO_ADDRESS_NACK 0023                            ?_mssp_setIRQ 0070  
        __end_ofi1_do_I2C_SEND_ADR_READ 074C                       ??_mssp_disableIRQ 0057  
             ?i1_do_I2C_DO_ADDRESS_NACK 0070                       i1_do_I2C_TX_EMPTY 03C2  
                     _SYSTEM_Initialize 078A                 __end_of__initialization 004C  
                       ??_i2c_setBuffer 0059          _do_I2C_SEND_ADR_READ$intlevel0 068F  
                      _do_I2C_SEND_STOP 0724                            i1_returnStop 0FFC  
                 i1_do_I2C_DO_NACK_STOP 07B0                      __size_of_do_I2C_RX 0042  
                    __size_of_do_I2C_TX 004E                      ?i1_do_I2C_TX_EMPTY 0070  
                    ?_SYSTEM_Initialize 0070       _rdBlkRegCompleteHandler$intlevel0 0550  
                   _i2c_masterOperation 050E                __size_of_do_I2C_TX_EMPTY 002D  
                      ?i1_mssp_clearIRQ 0070                         ??i1_do_I2C_IDLE 0070  
                       ??i1_do_I2C_RCEN 0070                 _rdBlkRegCompleteHandler 054C  
                           ?_i2c_poller 0070                          __pcstackCOMMON 0070  
            ??i1_do_I2C_DO_NACK_RESTART 0070                     _do_I2C_TX$intlevel0 01B6  
                   ??i1_do_I2C_TX_EMPTY 0070                            __pidataBANK0 0FFB  
                          __pidataBANK1 04EE                     ??_SYSTEM_Initialize 0057  
                       ?i1_do_I2C_RESET 0070                 __end_of_i2c_driver_open 06E5  
               __end_of_i2c_driver_stop 07DC                       __end_of_i2c_close 0608  
                          ?i1_do_I2C_RX 0070                            ?i1_do_I2C_TX 0070  
                        drawPixel@color 0058                     i1i2c_restartWrite@p 0079  
                    _i2c_driver_sendACK 07A8               i1_rdBlkRegCompleteHandler 0583  
                  ?_i2c_masterOperation 0070          i1i2c_setDataCompleteCallback@p 0077  
               ?i1_i2c_driver_getRXData 0070                          _OPTION_REGbits 0095  
          ??i1_do_I2C_SEND_RESTART_READ 0070                      _i2c_driver_restart 07DC  
                __size_ofi1_setCallBack 0024                      _i2c_driver_startRX 07D6  
                ??_i2c_driver_getRXData 0057                         i1setCallBack@cb 0070  
              i1rd1RegCompleteHandler@p 0079                         i1_do_I2C_DO_ACK 07B4  
                       i1_do_I2C_TX$774 0072                      __size_of_drawPixel 00B6  
                   ?_i2c_driver_sendACK 0070                          setCallBack@idx 005B  
             __end_ofi1_do_I2C_TX_EMPTY 03EB                  _do_I2C_DO_NACK_RESTART 070C  
             __end_of_SYSTEM_Initialize 0790               ??i1_rd1RegCompleteHandler 007A  
                   ?_i2c_driver_restart 0070                              __pbssBANK0 0020  
                            __pbssBANK1 00C0               ??i1_wr1RegCompleteHandler 007A  
                   ?_i2c_driver_startRX 0070          __size_of_rd2RegCompleteHandler 0016  
                             ?_i2c_open 0070           __end_of_rd2RegCompleteHandler 05B0  
        __size_of_wr2RegCompleteHandler 0016        __size_ofi1_rd2RegCompleteHandler 0010  
         __end_of_wr2RegCompleteHandler 05F2                 __end_of_i2c_masterWrite 07A4  
              i1wr1RegCompleteHandler@p 0079                        _i2c_driver_start 07DF  
                 _rd1RegCompleteHandler 05B0                 __end_ofi1_i2c_setBuffer 0664  
      __size_ofi1_wr2RegCompleteHandler 0010                   _do_I2C_IDLE$intlevel0 0707  
                 _wr1RegCompleteHandler 05C6            __size_of_i2c_busCollisionISR 0003  
       _wr1RegCompleteHandler$intlevel0 05CA         _rd1RegCompleteHandler$intlevel0 05B4  
                            __pmaintext 035E                           ??_do_I2C_IDLE 0057  
                  __size_of_setCallBack 0025                           ??_do_I2C_RCEN 0057  
                  ??_i2c_driver_sendACK 0057                  ??_i2c_driver_setI2cISR 0059  
                       __CFG_PPS1WAY$ON 0000                         ??_do_I2C_DO_ACK 0057  
                            __pintentry 0004                    ??_i2c_driver_restart 0057  
          __size_of_i2c_driver_sendNACK 0004                    ??_i2c_driver_startRX 0057  
                   i2c_setBuffer@buffer 005A                       _initializeDisplay 0200  
          __size_of_i2c_driver_resetBus 0001          __end_ofi1_i2c_driver_getRXData 07F1  
        ?_i2c_driver_setBusCollisionISR 0057                   ??_i2c_masterOperation 005C  
                     __end_of_do_I2C_RX 0320                       __end_of_do_I2C_TX 0200  
                            _createWall 007D                      ?_initializeDisplay 0070  
              ?i1_do_I2C_SEND_ADR_WRITE 0070                         __CFG_WDTCCS$SWC 0000  
                               _OSCTUNE 0098                                 _SSP1ADD 0212  
                               _SSP1BUF 0211                                 _SSP1MSK 0213  
                   __size_of_i2c_poller 000B                 ??_do_I2C_SEND_ADR_WRITE 0058  
   _do_I2C_SEND_RESTART_WRITE$intlevel0 0738                     ??_initializeDisplay 0064  
           ??_do_I2C_SEND_RESTART_WRITE 0057                  ?i1_do_I2C_DO_NACK_STOP 0070  
                     _mssp_IRQisEnabled 06E5                              ??_i2c_open 0059  
                               _i2c_ISR 04A8               ??_rdBlkRegCompleteHandler 0061  
                     _mssp_waitForEvent 06BA                      ?_mssp_IRQisEnabled 0070  
                 __end_of_mssp_clearIRQ 07E8                   _returnReset$intlevel0 0782  
                 _do_I2C_RCEN$intlevel0 06F3                           i1_setCallBack 0484  
                    ?_mssp_waitForEvent 0070        _do_I2C_DO_ADDRESS_NACK$intlevel0 03EF  
           __end_ofi1_i2c_driver_TXData 07A0                       __end_of_drawPixel 0106  
   __size_of_i2c_setAddressNACKCallback 000D                  __size_ofi1_returnReset 0002  
                   ??_mssp_IRQisEnabled 0057                                 ___awdiv 0160  
             __end_of_initializeDisplay 024C                  __size_ofi1_mssp_setIRQ 0003  
                     ??_do_I2C_TX_EMPTY 0057                        ?_i2c_driver_open 0070  
                   ??_mssp_waitForEvent 0057                        ?_i2c_driver_stop 0070  
                i2c_writeNBytes@address 0063             __end_ofi1_i2c_driver_isNACK 06A3  
               __end_ofi1_do_I2C_DO_ACK 07B8                                 __ptext1 0106  
                               __ptext2 0160                                 __ptext3 0200  
                               __ptext4 0439                                 __ptext5 0664  
                               __ptext6 0296                                 __ptext7 0766  
                               __ptext8 076C                                 __ptext9 06DB  
                   __end_of_do_I2C_IDLE 070C                     __end_of_do_I2C_RCEN 06F9  
                               _hiscore 004F                   _OSCILLATOR_Initialize 06F9  
               ??i1_i2c_driver_sendNACK 0070             __end_of_do_I2C_SEND_RESTART 0734  
              ??_PIN_MANAGER_Initialize 0057                  i2c_masterOperation@ret 005E  
               ??i1_i2c_driver_resetBus 0070                      i1_do_I2C_SEND_STOP 07B8  
            _do_I2C_SEND_STOP$intlevel0 0728              __size_ofi1_do_I2C_TX_EMPTY 0029  
              _do_I2C_SEND_RESTART_READ 073C              __size_of_SYSTEM_Initialize 0006  
                               clrloop0 0761               __end_of_mssp_IRQisEnabled 06EF  
                  __size_of_returnReset 0006                    end_of_initialization 004C  
                  __size_of_mssp_setIRQ 0003               __end_of_mssp_waitForEvent 06C5  
             __size_of_i2c_restartWrite 0006                                 init_ram 075A  
                   ?i1_do_I2C_SEND_STOP 0070                  ?_rd1RegCompleteHandler 0060  
                               initloop 075B                         _i2c_writeNBytes 0439  
                         ??_clearPixels 0057                        ?_i2c_masterWrite 0070  
                ?_wr1RegCompleteHandler 0060                          ?i1_setCallBack 0070  
                      ?i1_i2c_setBuffer 0070               _do_I2C_SEND_RESTART_WRITE 0734  
                 i1_do_I2C_SEND_RESTART 07BC        __end_ofi1_do_I2C_DO_ADDRESS_NACK 04EE  
       __end_ofi1_do_I2C_SEND_ADR_WRITE 0753                         _mssp_disableIRQ 07E2  
                             i1_i2c_ISR 052D                    ??i1_do_I2C_SEND_STOP 0070  
                            _returnStop 0784         __end_of_rdBlkRegCompleteHandler 0569  
              __end_of_do_I2C_SEND_STOP 072C      __end_ofi1_do_I2C_SEND_RESTART_READ 07C8  
            i1_do_I2C_SEND_RESTART_READ 07C4                               _SSPDATPPS 0E21  
                             _SSPCLKPPS 0E20                        __CFG_FOSC$INTOSC 0000  
                  __size_ofi1_do_I2C_RX 003E                    __size_ofi1_do_I2C_TX 004A  
  __size_of_i2c_setDataCompleteCallback 000D                          _gravityCounter 0055  
                         i1_returnReset 0FFE                             returnStop@p 0060  
                         i1_mssp_setIRQ 07EB      __size_ofi1_rdBlkRegCompleteHandler 0017  
          i2c_setDataCompleteCallback@p 005E                 i1_rd2RegCompleteHandler 0608  
                            drawPixel@x 005F                              drawPixel@y 0057  
               i1_wr2RegCompleteHandler 0638           __size_of_do_I2C_SEND_ADR_READ 000C  
                      ??i1_do_I2C_RESET 0070                            ??_i2c_poller 005C  
                           _do_I2C_IDLE 0703                             _do_I2C_RCEN 06EF  
            __end_ofi1_i2c_restartWrite 0004                     __end_of_clearPixels 0583  
            __size_of_initializeDisplay 004C    __end_of_i2c_driver_clearBusCollision 0800  
 __size_of_i2c_driver_clearBusCollision 0003            _i2c_driver_clearBusCollision 07FD  
                            ?i1_i2c_ISR 0070                        ?i1_do_I2C_DO_ACK 0070  
                ?_OSCILLATOR_Initialize 0070           __size_ofi1_i2c_driver_sendACK 0004  
          __size_of_do_I2C_DO_NACK_STOP 0008                __end_of_i2c_driver_start 07E2  
         __size_ofi1_i2c_driver_restart 0003                 ?_do_I2C_DO_NACK_RESTART 0070  
                   start_initialization 0029                               _i2c_close 05F2  
         __size_ofi1_i2c_driver_startRX 0003                     _i2c_busCollisionISR 07FA  
       __size_of_PIN_MANAGER_Initialize 0027                          ?i1_returnReset 0079  
               __end_of_i2c_writeNBytes 045F     __end_ofi1_do_I2C_SEND_RESTART_WRITE 07C4  
           i1_do_I2C_SEND_RESTART_WRITE 07C0                          ?i1_mssp_setIRQ 0070  
            __size_of_mssp_IRQisEnabled 000A                            setCallBack@p 0059  
                    __end_of_i2c_poller 06BA                     _i2c_driver_sendNACK 07A4  
                       i2c_open@address 005A                 i2c_setBuffer@bufferSize 0057  
            __size_of_mssp_waitForEvent 000B                  rd1RegCompleteHandler@p 0060  
                   _i2c_driver_resetBus 0FFA                         ??i1_setCallBack 0073  
                 __end_of_i2c_setBuffer 0656                       __size_of_i2c_open 0048  
 __end_ofi1_i2c_setDataCompleteCallback 06AF  __size_ofi1_i2c_setDataCompleteCallback 000C  
         i1_i2c_setDataCompleteCallback 06A3                    ?_i2c_busCollisionISR 0070  
               __end_of_mssp_disableIRQ 07E5                        i1setCallBack@idx 0074  
                 __end_ofi1_do_I2C_IDLE 079B                   __end_ofi1_do_I2C_RCEN 0796  
             i1i2c_setBuffer@bufferSize 0070                  ?i1_do_I2C_SEND_RESTART 0070  
                wr1RegCompleteHandler@p 0060                    ?_i2c_driver_sendNACK 0070  
                         ?_do_I2C_RESET 0070                             __pdataBANK0 006C  
                           __pdataBANK1 00A0               _do_I2C_TX_EMPTY$intlevel0 0399  
              __size_ofi1_mssp_clearIRQ 0003                             ?_returnStop 0060  
                  ?_i2c_driver_resetBus 0070                       _i2c_driver_TXData 0772  
        __end_of_do_I2C_DO_NACK_RESTART 0714           ?_i2c_driver_clearBusCollision 0070  
                     _i2c_driver_i2cISR 0053                i1_do_I2C_DO_ADDRESS_NACK 04CB  
                    ?_i2c_driver_TXData 0070                             __pbssCOMMON 007A  
                            ?_i2c_close 0070                               ___latbits 0002  
                         __pcstackBANK0 0057       __size_ofi1_do_I2C_DO_NACK_RESTART 0004  
              i1rd2RegCompleteHandler@p 0079                               _do_I2C_RX 02DE  
             ?i1_do_I2C_DO_NACK_RESTART 0070                               _do_I2C_TX 01B2  
                     _i2c_driver_isNACK 0671                 ??i1_do_I2C_DO_NACK_STOP 0070  
             ??i1_rd2RegCompleteHandler 007A           __size_of_i2c_driver_getRXData 0003  
                    ?_i2c_driver_isNACK 0070                     ??_i2c_driver_TXData 0057  
        __size_of_do_I2C_SEND_ADR_WRITE 000B               ??i1_wr2RegCompleteHandler 007A  
         __end_of_do_I2C_SEND_ADR_WRITE 06D0         ??_i2c_driver_setBusCollisionISR 0059  
                        i1setCallBack@p 0072                        _i2c_restartWrite 0778  
            _i2c_restartWrite$intlevel0 077C                                ?_i2c_ISR 0070  
       _do_I2C_SEND_ADR_WRITE$intlevel0 06C9        __size_ofi1_do_I2C_SEND_ADR_WRITE 0007  
                       _do_I2C_TX_EMPTY 0395                           ??_setCallBack 005A  
              i1wr2RegCompleteHandler@p 0079                   _rd2RegCompleteHandler 059A  
                           _clearPixels 0569                     ??_i2c_driver_isNACK 0057  
                 ??_i2c_busCollisionISR 0070                  _PIN_MANAGER_Initialize 0412  
                 _wr2RegCompleteHandler 05DC             __size_of_i2c_driver_sendACK 0004  
                        ??_do_I2C_RESET 0057                                ?___awdiv 0057  
                             __ptext100 07F7                               __ptext101 07CC  
                             __ptext102 07FA                               __ptext103 07FD  
                 ??_i2c_driver_sendNACK 0057             __end_of_i2c_masterOperation 052D  
              ??_do_I2C_DO_ADDRESS_NACK 0057           __size_of_i2c_driver_setI2cISR 0006  
           __size_of_i2c_driver_restart 0003               __end_of_i2c_driver_TXData 0778  
                 __end_of_do_I2C_DO_ACK 0724                   ??_i2c_driver_resetBus 0057  
           __size_of_i2c_driver_startRX 0003                             ??i1_i2c_ISR 0074  
          ??_INTERRUPT_InterruptManager 0075                               _drawPixel 0050  
                             _elevation 0056              ??_do_I2C_SEND_RESTART_READ 0057  
              ??i1_do_I2C_SEND_ADR_READ 0071                         ??i1_returnReset 007A  
             __end_of_i2c_driver_isNACK 067E                ?i1_rd1RegCompleteHandler 0079  
    __size_of_do_I2C_SEND_RESTART_WRITE 0008                         ??i1_mssp_setIRQ 0070  
        __size_ofi1_i2c_driver_sendNACK 0004           __end_ofi1_i2c_driver_sendNACK 07CC  
              ?i1_wr1RegCompleteHandler 0079                              ?_do_I2C_RX 0070  
                            ?_do_I2C_TX 0070                           ?_writeDisplay 0070  
                      ?_i2c_writeNBytes 0060          __size_ofi1_i2c_driver_resetBus 0001  
         __end_ofi1_i2c_driver_resetBus 0FFA                 ??_rd1RegCompleteHandler 0061  
                     _i2c_ISR$intlevel0 04AC                 ??_wr1RegCompleteHandler 0061  
                 i2c_driver_setI2cISR@f 0057                     __size_of_returnStop 0006  
                             clear_ram0 0760                                _PIE1bits 0090  
                              _PIE2bits 0091     __size_of_INTERRUPT_InterruptManager 0023  
                              _PIR1bits 0010                                _PIR2bits 0011  
                      ?_mssp_disableIRQ 0070                    __CFG_WDTCPS$WDTCPS1F 0000  
                              _SSP1CON1 0215                                _SSP1CON2 0216  
          ?_i2c_setDataCompleteCallback 005C          ?i1_i2c_setDataCompleteCallback 0075  
                              _SSP1STAT 0214                     __end_of_setCallBack 0484  
                            ?_drawPixel 0057            __size_ofi1_i2c_driver_TXData 0005  
                     i1_i2c_driver_stop 07F4            i2c_setAddressNACKCallback@cb 005C  
                     ?_do_I2C_SEND_STOP 0070             ?i1_do_I2C_SEND_RESTART_READ 0070  
                    ?i1_i2c_driver_stop 0070                             ??_i2c_close 0057  
                         ??_returnReset 0061                      ??_do_I2C_SEND_STOP 0057  
                __size_of_mssp_clearIRQ 0003                          ??_writeDisplay 0064  
              __size_of_i2c_driver_open 000A                       ??i1_mssp_clearIRQ 0070  
          ??_i2c_setAddressNACKCallback 005F                __size_of_i2c_driver_stop 0003  
     __end_of_do_I2C_SEND_RESTART_WRITE 073C            __size_ofi1_i2c_driver_isNACK 000C  
                         ??_mssp_setIRQ 0057          ??_i2c_driver_clearBusCollision 0070  
                          clearPixels@i 0058                 __end_of_do_I2C_TX_EMPTY 03C2  
              ?_rdBlkRegCompleteHandler 0060                     ??i1_i2c_driver_stop 0070  
          __size_of_do_I2C_SEND_RESTART 0008                 _do_I2C_DO_ACK$intlevel0 0720  
                              _i2c_open 0296                           ?i1_returnStop 0079  
                initializeDisplay@i_471 0066                  ?_rd2RegCompleteHandler 0060  
                   _do_I2C_DO_NACK_STOP 0714                        __size_of_i2c_ISR 0023  
                ?_wr2RegCompleteHandler 0060         _wr2RegCompleteHandler$intlevel0 05E0  
       _rd2RegCompleteHandler$intlevel0 059E   __end_of_i2c_driver_setBusCollisionISR 0772  
__size_of_i2c_driver_setBusCollisionISR 0006           _i2c_driver_setBusCollisionISR 076C  
                   i2c_writeNBytes@data 0060                            ?_do_I2C_IDLE 0070  
              ??i1_i2c_driver_getRXData 0070                            ?_do_I2C_RCEN 0070  
               ??_OSCILLATOR_Initialize 0057                __size_of_i2c_masterWrite 0004  
                      __size_of___awdiv 0052              __size_of_i2c_driver_TXData 0006  
       __size_of_do_I2C_DO_ADDRESS_NACK 0027               __end_ofi1_i2c_driver_stop 07F7  
                 i1i2c_setBuffer@buffer 0073           ??_i2c_setDataCompleteCallback 005F  
       __end_ofi1_rd1RegCompleteHandler 0628                __size_ofi1_i2c_setBuffer 000E  
                         ??i1_do_I2C_RX 0070                           ??i1_do_I2C_TX 0071  
    _do_I2C_SEND_RESTART_READ$intlevel0 0740             __size_ofi1_do_I2C_SEND_STOP 0004  
       __end_ofi1_wr1RegCompleteHandler 0638                    ?_do_I2C_DO_NACK_STOP 0070  
          __end_of_do_I2C_SEND_ADR_READ 0697         __size_ofi1_do_I2C_SEND_ADR_READ 0008  
            __size_of_i2c_driver_isNACK 000D                       ?_i2c_driver_start 0070  
                    i1_i2c_restartWrite 0002                             ??_do_I2C_RX 0057  
                           ??_do_I2C_TX 0058                      ??_i2c_driver_start 0057  
                              __ptext10 07A0                                __ptext11 050E  
                              __ptext20 0714                                __ptext12 06E5  
                              __ptext21 071C                                __ptext13 06AF  
                              __ptext30 06D0                                __ptext22 06EF  
                              __ptext14 06BA                                __ptext31 0395  
                              __ptext23 06C5                                __ptext15 04A8  
                              __ptext40 059A                                __ptext32 07D0  
                              __ptext24 068B                                __ptext16 02DE  
                              __ptext41 05B0                                __ptext33 0671  
                              __ptext25 0724                                __ptext17 01B2  
                              __ptext50 07D9                                __ptext42 05C6  
                              __ptext34 0772                                __ptext26 072C  
                              __ptext18 03EB                                __ptext51 07DC  
                              __ptext43 0778                                __ptext35 07D3  
                              __ptext27 0734                                __ptext19 070C  
                              __ptext60 0412                                __ptext52 07A8  
                              __ptext44 077E                                __ptext36 07A4  
                              __ptext28 073C                                __ptext61 06F9  
                              __ptext53 07DF                                __ptext45 0784  
                              __ptext37 0FFA                                __ptext29 0703  
                              __ptext70 07B4                                __ptext54 05F2  
                              __ptext46 05DC                                __ptext38 07D6  
                              __ptext71 0790                                __ptext63 052D  
                              __ptext55 07E2                                __ptext47 067E  
                              __ptext39 054C                                __ptext80 03C2  
                              __ptext72 074C                                __ptext64 07E8  
                              __ptext56 07E5                                __ptext48 045F  
                              __ptext81 07EB                                __ptext73 0744  
                              __ptext65 0320                                __ptext57 0050  
                              __ptext49 0648                                __ptext90 0618  
                              __ptext82 0697                                __ptext74 07B8  
                              __ptext66 024C                                __ptext58 0569  
                              __ptext91 0628                                __ptext83 079B  
                              __ptext75 07BC                                __ptext67 04CB  
                              __ptext59 078A                                __ptext92 0002  
                              __ptext84 07EE                                __ptext76 07C0  
                              __ptext68 07AC                                __ptext93 0FFE  
                              __ptext85 07C8                                __ptext77 07C4  
                              __ptext69 07B0                                __ptext94 0FFC  
                              __ptext86 0FF9                                __ptext78 0796  
                              __ptext95 0638                                __ptext87 07F1  
                              __ptext79 0753                                __ptext96 06A3  
                              __ptext88 0583                                __ptext97 0484  
                              __ptext89 0608                                __ptext98 0656  
                              __ptext99 07F4                            _SSP1CON1bits 0215  
                          _SSP1CON2bits 0216                            _shiftCounter 004D  
                  __end_of_do_I2C_RESET 06DB                          ??i1_returnStop 007A  
               i1_do_I2C_SEND_ADR_WRITE 074C                     ?i1_i2c_restartWrite 0079  
          __end_ofi1_i2c_driver_sendACK 07D0                     __end_of_returnReset 0784  
                         __size_of_main 0037                     __end_of_mssp_setIRQ 07D3  
          __end_ofi1_i2c_driver_restart 07FA                    i1i2c_driver_TXData@d 0070  
          __end_ofi1_i2c_driver_startRX 07F4                    __CFG_WDTCWS$WDTCWSSW 0000  
                           _setCallBack 045F                 ??i1_do_I2C_SEND_RESTART 0070  
                         _mssp_clearIRQ 07E5                 i2c_masterOperation@read 005D  
  __size_ofi1_do_I2C_SEND_RESTART_WRITE 0004                                int$flags 007E  
            ??i1_do_I2C_DO_ADDRESS_NACK 0070        __end_ofi1_do_I2C_DO_NACK_RESTART 07B0  
    __end_of_INTERRUPT_InterruptManager 0027              _INTERRUPT_InterruptManager 0004  
                          _SSP1STATbits 0214                    ??i1_i2c_restartWrite 007A  
      __end_of_do_I2C_SEND_RESTART_READ 0744                             ??_drawPixel 0059  
                          ??_returnStop 0061                __end_of_i2c_restartWrite 077E  
                 ??_do_I2C_DO_NACK_STOP 0057                mssp_waitForEvent@timeout 0057  
        i2c_driver_setBusCollisionISR@f 0057                              _INTCONbits 000B  
                    i2c_writeNBytes@len 0061                     __end_ofi1_do_I2C_RX 035E  
                   __end_ofi1_do_I2C_TX 0296                __size_ofi1_do_I2C_DO_ACK 0004  
                      ?_do_I2C_TX_EMPTY 0070                  _do_I2C_DO_ADDRESS_NACK 03EB  
        __size_ofi1_do_I2C_DO_NACK_STOP 0004                                intlevel1 0000  
         __end_ofi1_do_I2C_DO_NACK_STOP 07B4                  _do_I2C_RESET$intlevel0 06D4  
                rd2RegCompleteHandler@p 0060                       ??_i2c_driver_open 0057  
                     ??_i2c_driver_stop 0057                 ?_PIN_MANAGER_Initialize 0070  
                     i2c_restartWrite@p 0060                  i1_do_I2C_SEND_ADR_READ 0744  
                     __CFG_CLKOUTEN$OFF 0000              ?i1_rdBlkRegCompleteHandler 0079  
                          ?_clearPixels 0070                      __end_of_returnStop 078A  
                        ?_mssp_clearIRQ 0070                   __end_ofi1_setCallBack 04A8  
   __size_ofi1_do_I2C_SEND_RESTART_READ 0004                    __end_of_writeDisplay 0160  
          __end_of_i2c_driver_getRXData 07D6         __size_ofi1_i2c_driver_getRXData 0003  
                wr2RegCompleteHandler@p 0060              __size_ofi1_i2c_driver_stop 0003  
                           _pixelbuffer 003D                           writeDisplay@i 0069  
               __size_ofi1_do_I2C_RESET 0007                       ??_i2c_masterWrite 005F  
    __end_of_i2c_setAddressNACKCallback 0671              _i2c_setAddressNACKCallback 0664  
                __size_of_i2c_setBuffer 000E                       ??i1_i2c_setBuffer 0072  
                           _returnReset 077E        _do_I2C_DO_NACK_RESTART$intlevel0 0710  
                           _mssp_setIRQ 07D0               ??i1_do_I2C_SEND_ADR_WRITE 0071  
          __end_of_i2c_driver_setI2cISR 076C                  __size_ofi1_do_I2C_IDLE 0005  
                __size_ofi1_do_I2C_RCEN 0006          __end_of_PIN_MANAGER_Initialize 0439  
           __end_of_i2c_busCollisionISR 07FD          __size_of_rd1RegCompleteHandler 0016  
         __end_of_rd1RegCompleteHandler 05C6                     i1_i2c_driver_TXData 079B  
        __size_of_wr1RegCompleteHandler 0016        __size_ofi1_rd1RegCompleteHandler 0010  
         __end_of_wr1RegCompleteHandler 05DC                   _do_I2C_SEND_ADR_WRITE 06C5  
           __end_of_i2c_driver_sendNACK 07A8                    _do_I2C_SEND_ADR_READ 068B  
     __end_ofi1_rdBlkRegCompleteHandler 059A        __size_ofi1_wr1RegCompleteHandler 0010  
            __end_of_i2c_driver_sendACK 07AC             __end_of_i2c_driver_resetBus 0FFB  
