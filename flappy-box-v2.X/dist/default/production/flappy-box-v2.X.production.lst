

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Apr 10 16:46:43 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F1619
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	inittext,global,class=CODE,delta=2
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,inline,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2
    32                           	psect	text18,local,class=CODE,merge=1,delta=2
    33                           	psect	text19,local,class=CODE,merge=1,delta=2
    34                           	psect	text20,local,class=CODE,merge=1,delta=2
    35                           	psect	text21,local,class=CODE,merge=1,delta=2
    36                           	psect	text22,local,class=CODE,merge=1,delta=2
    37                           	psect	text23,local,class=CODE,merge=1,delta=2
    38                           	psect	text24,local,class=CODE,merge=1,delta=2
    39                           	psect	text25,local,class=CODE,merge=1,delta=2
    40                           	psect	text26,local,class=CODE,merge=1,delta=2
    41                           	psect	text27,local,class=CODE,merge=1,delta=2
    42                           	psect	text28,local,class=CODE,merge=1,delta=2
    43                           	psect	text29,local,class=CODE,merge=1,delta=2
    44                           	psect	text30,local,class=CODE,merge=1,inline,delta=2
    45                           	psect	text31,local,class=CODE,merge=1,inline,delta=2
    46                           	psect	text32,local,class=CODE,merge=1,inline,delta=2
    47                           	psect	text33,local,class=CODE,merge=1,inline,delta=2
    48                           	psect	text34,local,class=CODE,merge=1,inline,delta=2
    49                           	psect	text35,local,class=CODE,merge=1,inline,delta=2
    50                           	psect	text36,local,class=CODE,merge=1,inline,delta=2
    51                           	psect	text37,local,class=CODE,merge=1,delta=2
    52                           	psect	text38,local,class=CODE,merge=1,delta=2
    53                           	psect	text39,local,class=CODE,merge=1,delta=2
    54                           	psect	text40,local,class=CODE,merge=1,delta=2
    55                           	psect	text41,local,class=CODE,merge=1,delta=2
    56                           	psect	text42,local,class=CODE,merge=1,delta=2
    57                           	psect	text43,local,class=CODE,merge=1,delta=2
    58                           	psect	text44,local,class=CODE,merge=1,delta=2
    59                           	psect	text45,local,class=CODE,merge=1,delta=2
    60                           	psect	text46,local,class=CODE,merge=1,delta=2
    61                           	psect	text47,local,class=CODE,merge=1,delta=2
    62                           	psect	text48,local,class=CODE,merge=1,inline,delta=2
    63                           	psect	text49,local,class=CODE,merge=1,inline,delta=2
    64                           	psect	text50,local,class=CODE,merge=1,inline,delta=2
    65                           	psect	text51,local,class=CODE,merge=1,inline,delta=2
    66                           	psect	text52,local,class=CODE,merge=1,delta=2
    67                           	psect	text53,local,class=CODE,merge=1,inline,delta=2
    68                           	psect	text54,local,class=CODE,merge=1,inline,delta=2
    69                           	psect	text55,local,class=CODE,merge=1,delta=2,group=1
    70                           	psect	text56,local,class=CODE,merge=1,delta=2
    71                           	psect	text57,local,class=CODE,merge=1,delta=2
    72                           	psect	text58,local,class=CODE,merge=1,delta=2
    73                           	psect	text59,local,class=CODE,merge=1,delta=2
    74                           	psect	intentry,global,class=CODE,delta=2
    75                           	psect	text61,local,class=CODE,merge=1,delta=2
    76                           	psect	text62,local,class=CODE,merge=1,inline,delta=2
    77                           	psect	text63,local,class=CODE,merge=1,delta=2
    78                           	psect	text64,local,class=CODE,merge=1,delta=2
    79                           	psect	text65,local,class=CODE,merge=1,delta=2
    80                           	psect	text66,local,class=CODE,merge=1,delta=2
    81                           	psect	text67,local,class=CODE,merge=1,delta=2
    82                           	psect	text68,local,class=CODE,merge=1,delta=2
    83                           	psect	text69,local,class=CODE,merge=1,delta=2
    84                           	psect	text70,local,class=CODE,merge=1,delta=2
    85                           	psect	text71,local,class=CODE,merge=1,delta=2
    86                           	psect	text72,local,class=CODE,merge=1,delta=2
    87                           	psect	text73,local,class=CODE,merge=1,delta=2
    88                           	psect	text74,local,class=CODE,merge=1,delta=2
    89                           	psect	text75,local,class=CODE,merge=1,delta=2
    90                           	psect	text76,local,class=CODE,merge=1,delta=2
    91                           	psect	text77,local,class=CODE,merge=1,delta=2
    92                           	psect	text78,local,class=CODE,merge=1,delta=2
    93                           	psect	text79,local,class=CODE,merge=1,inline,delta=2
    94                           	psect	text80,local,class=CODE,merge=1,inline,delta=2
    95                           	psect	text81,local,class=CODE,merge=1,inline,delta=2
    96                           	psect	text82,local,class=CODE,merge=1,inline,delta=2
    97                           	psect	text83,local,class=CODE,merge=1,inline,delta=2
    98                           	psect	text84,local,class=CODE,merge=1,inline,delta=2
    99                           	psect	text85,local,class=CODE,merge=1,inline,delta=2
   100                           	psect	text86,local,class=CODE,merge=1,delta=2
   101                           	psect	text87,local,class=CODE,merge=1,delta=2
   102                           	psect	text88,local,class=CODE,merge=1,delta=2
   103                           	psect	text89,local,class=CODE,merge=1,delta=2
   104                           	psect	text90,local,class=CODE,merge=1,delta=2
   105                           	psect	text91,local,class=CODE,merge=1,delta=2
   106                           	psect	text92,local,class=CODE,merge=1,delta=2
   107                           	psect	text93,local,class=CODE,merge=1,delta=2
   108                           	psect	text94,local,class=CODE,merge=1,delta=2
   109                           	psect	text95,local,class=CODE,merge=1,delta=2
   110                           	psect	text96,local,class=CODE,merge=1,delta=2
   111                           	psect	text97,local,class=CODE,merge=1,inline,delta=2
   112                           	psect	text98,local,class=CODE,merge=1,inline,delta=2
   113                           	psect	text99,local,class=CODE,merge=1,inline,delta=2
   114                           	psect	text100,local,class=CODE,merge=1,delta=2
   115                           	psect	text101,local,class=CODE,merge=1,inline,delta=2
   116                           	dabs	1,0x7E,2
   117  0000                     
   118                           ; Version 1.45
   119                           ; Generated 16/11/2017 GMT
   120                           ; 
   121                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   122                           ; All rights reserved.
   123                           ; 
   124                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   125                           ; 
   126                           ; Redistribution and use in source and binary forms, with or without modification, are
   127                           ; permitted provided that the following conditions are met:
   128                           ; 
   129                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   130                           ;        conditions and the following disclaimer.
   131                           ; 
   132                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   133                           ;        of conditions and the following disclaimer in the documentation and/or other
   134                           ;        materials provided with the distribution.
   135                           ; 
   136                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   137                           ;        software without specific prior written permission.
   138                           ; 
   139                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   140                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   141                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   142                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   143                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   144                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   145                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   146                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   147                           ; 
   148                           ; 
   149                           ; Code-generator required, PIC16F1619 Definitions
   150                           ; 
   151                           ; SFR Addresses
   152  0000                     	;# 
   153  0001                     	;# 
   154  0002                     	;# 
   155  0003                     	;# 
   156  0004                     	;# 
   157  0005                     	;# 
   158  0006                     	;# 
   159  0007                     	;# 
   160  0008                     	;# 
   161  0009                     	;# 
   162  000A                     	;# 
   163  000B                     	;# 
   164  000C                     	;# 
   165  000D                     	;# 
   166  000E                     	;# 
   167  0010                     	;# 
   168  0011                     	;# 
   169  0012                     	;# 
   170  0013                     	;# 
   171  0014                     	;# 
   172  0015                     	;# 
   173  0016                     	;# 
   174  0016                     	;# 
   175  0017                     	;# 
   176  0018                     	;# 
   177  0019                     	;# 
   178  001A                     	;# 
   179  001A                     	;# 
   180  001B                     	;# 
   181  001B                     	;# 
   182  001C                     	;# 
   183  001D                     	;# 
   184  001E                     	;# 
   185  001F                     	;# 
   186  008C                     	;# 
   187  008D                     	;# 
   188  008E                     	;# 
   189  0090                     	;# 
   190  0091                     	;# 
   191  0092                     	;# 
   192  0093                     	;# 
   193  0094                     	;# 
   194  0095                     	;# 
   195  0096                     	;# 
   196  0098                     	;# 
   197  0099                     	;# 
   198  009A                     	;# 
   199  009B                     	;# 
   200  009B                     	;# 
   201  009C                     	;# 
   202  009D                     	;# 
   203  009E                     	;# 
   204  009F                     	;# 
   205  010C                     	;# 
   206  010D                     	;# 
   207  010E                     	;# 
   208  0111                     	;# 
   209  0112                     	;# 
   210  0113                     	;# 
   211  0114                     	;# 
   212  0115                     	;# 
   213  0116                     	;# 
   214  0117                     	;# 
   215  0118                     	;# 
   216  0119                     	;# 
   217  011C                     	;# 
   218  018C                     	;# 
   219  018D                     	;# 
   220  018E                     	;# 
   221  0191                     	;# 
   222  0191                     	;# 
   223  0192                     	;# 
   224  0193                     	;# 
   225  0193                     	;# 
   226  0194                     	;# 
   227  0195                     	;# 
   228  0196                     	;# 
   229  0197                     	;# 
   230  0199                     	;# 
   231  0199                     	;# 
   232  0199                     	;# 
   233  019A                     	;# 
   234  019A                     	;# 
   235  019A                     	;# 
   236  019B                     	;# 
   237  019B                     	;# 
   238  019B                     	;# 
   239  019B                     	;# 
   240  019B                     	;# 
   241  019C                     	;# 
   242  019C                     	;# 
   243  019C                     	;# 
   244  019D                     	;# 
   245  019D                     	;# 
   246  019D                     	;# 
   247  019E                     	;# 
   248  019E                     	;# 
   249  019E                     	;# 
   250  019F                     	;# 
   251  019F                     	;# 
   252  019F                     	;# 
   253  019F                     	;# 
   254  019F                     	;# 
   255  020C                     	;# 
   256  020D                     	;# 
   257  020E                     	;# 
   258  0211                     	;# 
   259  0211                     	;# 
   260  0212                     	;# 
   261  0212                     	;# 
   262  0213                     	;# 
   263  0213                     	;# 
   264  0214                     	;# 
   265  0214                     	;# 
   266  0215                     	;# 
   267  0215                     	;# 
   268  0215                     	;# 
   269  0215                     	;# 
   270  0216                     	;# 
   271  0216                     	;# 
   272  0217                     	;# 
   273  0217                     	;# 
   274  028C                     	;# 
   275  028D                     	;# 
   276  028E                     	;# 
   277  0291                     	;# 
   278  0291                     	;# 
   279  0292                     	;# 
   280  0293                     	;# 
   281  0294                     	;# 
   282  0298                     	;# 
   283  0298                     	;# 
   284  0299                     	;# 
   285  029A                     	;# 
   286  029B                     	;# 
   287  029E                     	;# 
   288  030C                     	;# 
   289  030D                     	;# 
   290  030E                     	;# 
   291  038C                     	;# 
   292  038D                     	;# 
   293  038E                     	;# 
   294  0391                     	;# 
   295  0392                     	;# 
   296  0393                     	;# 
   297  0394                     	;# 
   298  0395                     	;# 
   299  0396                     	;# 
   300  0397                     	;# 
   301  0398                     	;# 
   302  0399                     	;# 
   303  040E                     	;# 
   304  0413                     	;# 
   305  0413                     	;# 
   306  0414                     	;# 
   307  0414                     	;# 
   308  0415                     	;# 
   309  0416                     	;# 
   310  0417                     	;# 
   311  0418                     	;# 
   312  041A                     	;# 
   313  041A                     	;# 
   314  041B                     	;# 
   315  041B                     	;# 
   316  041C                     	;# 
   317  041D                     	;# 
   318  041E                     	;# 
   319  041F                     	;# 
   320  0493                     	;# 
   321  0494                     	;# 
   322  0495                     	;# 
   323  0496                     	;# 
   324  049A                     	;# 
   325  049B                     	;# 
   326  049C                     	;# 
   327  049D                     	;# 
   328  058C                     	;# 
   329  058C                     	;# 
   330  058D                     	;# 
   331  058E                     	;# 
   332  058E                     	;# 
   333  058F                     	;# 
   334  0590                     	;# 
   335  0590                     	;# 
   336  0591                     	;# 
   337  0592                     	;# 
   338  0592                     	;# 
   339  0593                     	;# 
   340  0594                     	;# 
   341  0594                     	;# 
   342  0595                     	;# 
   343  0596                     	;# 
   344  0596                     	;# 
   345  0597                     	;# 
   346  0598                     	;# 
   347  0599                     	;# 
   348  059A                     	;# 
   349  059B                     	;# 
   350  059B                     	;# 
   351  059C                     	;# 
   352  059D                     	;# 
   353  060C                     	;# 
   354  060C                     	;# 
   355  060D                     	;# 
   356  060E                     	;# 
   357  060F                     	;# 
   358  060F                     	;# 
   359  0610                     	;# 
   360  0611                     	;# 
   361  0612                     	;# 
   362  0613                     	;# 
   363  0614                     	;# 
   364  0617                     	;# 
   365  0618                     	;# 
   366  0619                     	;# 
   367  061A                     	;# 
   368  061B                     	;# 
   369  061C                     	;# 
   370  0691                     	;# 
   371  0692                     	;# 
   372  0693                     	;# 
   373  0694                     	;# 
   374  0695                     	;# 
   375  0696                     	;# 
   376  0697                     	;# 
   377  0699                     	;# 
   378  069A                     	;# 
   379  0711                     	;# 
   380  0712                     	;# 
   381  0713                     	;# 
   382  0714                     	;# 
   383  0715                     	;# 
   384  0718                     	;# 
   385  0718                     	;# 
   386  0719                     	;# 
   387  071A                     	;# 
   388  071A                     	;# 
   389  071B                     	;# 
   390  071C                     	;# 
   391  071D                     	;# 
   392  0791                     	;# 
   393  0791                     	;# 
   394  0792                     	;# 
   395  0793                     	;# 
   396  0793                     	;# 
   397  0794                     	;# 
   398  0795                     	;# 
   399  0795                     	;# 
   400  0796                     	;# 
   401  0797                     	;# 
   402  0797                     	;# 
   403  0798                     	;# 
   404  0799                     	;# 
   405  079A                     	;# 
   406  080C                     	;# 
   407  080C                     	;# 
   408  080D                     	;# 
   409  080E                     	;# 
   410  080E                     	;# 
   411  080F                     	;# 
   412  0810                     	;# 
   413  0810                     	;# 
   414  0811                     	;# 
   415  0812                     	;# 
   416  0812                     	;# 
   417  0813                     	;# 
   418  0814                     	;# 
   419  0815                     	;# 
   420  0816                     	;# 
   421  0817                     	;# 
   422  0818                     	;# 
   423  0819                     	;# 
   424  081A                     	;# 
   425  081A                     	;# 
   426  081B                     	;# 
   427  081C                     	;# 
   428  081C                     	;# 
   429  081D                     	;# 
   430  088C                     	;# 
   431  088D                     	;# 
   432  088E                     	;# 
   433  088F                     	;# 
   434  088F                     	;# 
   435  0890                     	;# 
   436  0891                     	;# 
   437  0892                     	;# 
   438  0893                     	;# 
   439  0893                     	;# 
   440  0894                     	;# 
   441  0895                     	;# 
   442  0896                     	;# 
   443  0897                     	;# 
   444  0897                     	;# 
   445  0898                     	;# 
   446  0899                     	;# 
   447  0D8C                     	;# 
   448  0D8C                     	;# 
   449  0D8D                     	;# 
   450  0D8E                     	;# 
   451  0D8F                     	;# 
   452  0D8F                     	;# 
   453  0D90                     	;# 
   454  0D91                     	;# 
   455  0D92                     	;# 
   456  0D92                     	;# 
   457  0D93                     	;# 
   458  0D94                     	;# 
   459  0D95                     	;# 
   460  0D95                     	;# 
   461  0D96                     	;# 
   462  0D97                     	;# 
   463  0D98                     	;# 
   464  0D99                     	;# 
   465  0D9A                     	;# 
   466  0D9B                     	;# 
   467  0D9C                     	;# 
   468  0D9D                     	;# 
   469  0D9E                     	;# 
   470  0D9E                     	;# 
   471  0D9F                     	;# 
   472  0DA0                     	;# 
   473  0DA1                     	;# 
   474  0DA1                     	;# 
   475  0DA2                     	;# 
   476  0DA3                     	;# 
   477  0DA4                     	;# 
   478  0DA4                     	;# 
   479  0DA5                     	;# 
   480  0DA6                     	;# 
   481  0DA7                     	;# 
   482  0DA7                     	;# 
   483  0DA8                     	;# 
   484  0DA9                     	;# 
   485  0DAA                     	;# 
   486  0DAB                     	;# 
   487  0DAC                     	;# 
   488  0DAD                     	;# 
   489  0DAE                     	;# 
   490  0DAF                     	;# 
   491  0E0F                     	;# 
   492  0E10                     	;# 
   493  0E11                     	;# 
   494  0E12                     	;# 
   495  0E13                     	;# 
   496  0E14                     	;# 
   497  0E15                     	;# 
   498  0E16                     	;# 
   499  0E17                     	;# 
   500  0E18                     	;# 
   501  0E19                     	;# 
   502  0E1A                     	;# 
   503  0E1B                     	;# 
   504  0E1C                     	;# 
   505  0E1D                     	;# 
   506  0E1E                     	;# 
   507  0E1F                     	;# 
   508  0E20                     	;# 
   509  0E21                     	;# 
   510  0E22                     	;# 
   511  0E23                     	;# 
   512  0E24                     	;# 
   513  0E25                     	;# 
   514  0E26                     	;# 
   515  0E27                     	;# 
   516  0E28                     	;# 
   517  0E29                     	;# 
   518  0E2A                     	;# 
   519  0E2B                     	;# 
   520  0E2C                     	;# 
   521  0E2D                     	;# 
   522  0E2E                     	;# 
   523  0E90                     	;# 
   524  0E91                     	;# 
   525  0E92                     	;# 
   526  0E94                     	;# 
   527  0E95                     	;# 
   528  0E9C                     	;# 
   529  0E9D                     	;# 
   530  0E9E                     	;# 
   531  0E9F                     	;# 
   532  0EA0                     	;# 
   533  0EA1                     	;# 
   534  0EA2                     	;# 
   535  0EA3                     	;# 
   536  0EA4                     	;# 
   537  0EA5                     	;# 
   538  0EA6                     	;# 
   539  0EA7                     	;# 
   540  0F0F                     	;# 
   541  0F10                     	;# 
   542  0F11                     	;# 
   543  0F12                     	;# 
   544  0F13                     	;# 
   545  0F14                     	;# 
   546  0F15                     	;# 
   547  0F16                     	;# 
   548  0F17                     	;# 
   549  0F18                     	;# 
   550  0F19                     	;# 
   551  0F1A                     	;# 
   552  0F1B                     	;# 
   553  0F1C                     	;# 
   554  0F1D                     	;# 
   555  0F1E                     	;# 
   556  0F1F                     	;# 
   557  0F20                     	;# 
   558  0F21                     	;# 
   559  0F22                     	;# 
   560  0F23                     	;# 
   561  0F24                     	;# 
   562  0F25                     	;# 
   563  0F26                     	;# 
   564  0F27                     	;# 
   565  0F28                     	;# 
   566  0F29                     	;# 
   567  0F2A                     	;# 
   568  0F2B                     	;# 
   569  0F2C                     	;# 
   570  0F2D                     	;# 
   571  0F2E                     	;# 
   572  0F2F                     	;# 
   573  0F30                     	;# 
   574  0F31                     	;# 
   575  0F32                     	;# 
   576  0F33                     	;# 
   577  0F34                     	;# 
   578  0F35                     	;# 
   579  0F36                     	;# 
   580  0F37                     	;# 
   581  0FE4                     	;# 
   582  0FE5                     	;# 
   583  0FE6                     	;# 
   584  0FE7                     	;# 
   585  0FE8                     	;# 
   586  0FE9                     	;# 
   587  0FEA                     	;# 
   588  0FEB                     	;# 
   589  0FED                     	;# 
   590  0FEE                     	;# 
   591  0FEF                     	;# 
   592  0000                     	;# 
   593  0001                     	;# 
   594  0002                     	;# 
   595  0003                     	;# 
   596  0004                     	;# 
   597  0005                     	;# 
   598  0006                     	;# 
   599  0007                     	;# 
   600  0008                     	;# 
   601  0009                     	;# 
   602  000A                     	;# 
   603  000B                     	;# 
   604  000C                     	;# 
   605  000D                     	;# 
   606  000E                     	;# 
   607  0010                     	;# 
   608  0011                     	;# 
   609  0012                     	;# 
   610  0013                     	;# 
   611  0014                     	;# 
   612  0015                     	;# 
   613  0016                     	;# 
   614  0016                     	;# 
   615  0017                     	;# 
   616  0018                     	;# 
   617  0019                     	;# 
   618  001A                     	;# 
   619  001A                     	;# 
   620  001B                     	;# 
   621  001B                     	;# 
   622  001C                     	;# 
   623  001D                     	;# 
   624  001E                     	;# 
   625  001F                     	;# 
   626  008C                     	;# 
   627  008D                     	;# 
   628  008E                     	;# 
   629  0090                     	;# 
   630  0091                     	;# 
   631  0092                     	;# 
   632  0093                     	;# 
   633  0094                     	;# 
   634  0095                     	;# 
   635  0096                     	;# 
   636  0098                     	;# 
   637  0099                     	;# 
   638  009A                     	;# 
   639  009B                     	;# 
   640  009B                     	;# 
   641  009C                     	;# 
   642  009D                     	;# 
   643  009E                     	;# 
   644  009F                     	;# 
   645  010C                     	;# 
   646  010D                     	;# 
   647  010E                     	;# 
   648  0111                     	;# 
   649  0112                     	;# 
   650  0113                     	;# 
   651  0114                     	;# 
   652  0115                     	;# 
   653  0116                     	;# 
   654  0117                     	;# 
   655  0118                     	;# 
   656  0119                     	;# 
   657  011C                     	;# 
   658  018C                     	;# 
   659  018D                     	;# 
   660  018E                     	;# 
   661  0191                     	;# 
   662  0191                     	;# 
   663  0192                     	;# 
   664  0193                     	;# 
   665  0193                     	;# 
   666  0194                     	;# 
   667  0195                     	;# 
   668  0196                     	;# 
   669  0197                     	;# 
   670  0199                     	;# 
   671  0199                     	;# 
   672  0199                     	;# 
   673  019A                     	;# 
   674  019A                     	;# 
   675  019A                     	;# 
   676  019B                     	;# 
   677  019B                     	;# 
   678  019B                     	;# 
   679  019B                     	;# 
   680  019B                     	;# 
   681  019C                     	;# 
   682  019C                     	;# 
   683  019C                     	;# 
   684  019D                     	;# 
   685  019D                     	;# 
   686  019D                     	;# 
   687  019E                     	;# 
   688  019E                     	;# 
   689  019E                     	;# 
   690  019F                     	;# 
   691  019F                     	;# 
   692  019F                     	;# 
   693  019F                     	;# 
   694  019F                     	;# 
   695  020C                     	;# 
   696  020D                     	;# 
   697  020E                     	;# 
   698  0211                     	;# 
   699  0211                     	;# 
   700  0212                     	;# 
   701  0212                     	;# 
   702  0213                     	;# 
   703  0213                     	;# 
   704  0214                     	;# 
   705  0214                     	;# 
   706  0215                     	;# 
   707  0215                     	;# 
   708  0215                     	;# 
   709  0215                     	;# 
   710  0216                     	;# 
   711  0216                     	;# 
   712  0217                     	;# 
   713  0217                     	;# 
   714  028C                     	;# 
   715  028D                     	;# 
   716  028E                     	;# 
   717  0291                     	;# 
   718  0291                     	;# 
   719  0292                     	;# 
   720  0293                     	;# 
   721  0294                     	;# 
   722  0298                     	;# 
   723  0298                     	;# 
   724  0299                     	;# 
   725  029A                     	;# 
   726  029B                     	;# 
   727  029E                     	;# 
   728  030C                     	;# 
   729  030D                     	;# 
   730  030E                     	;# 
   731  038C                     	;# 
   732  038D                     	;# 
   733  038E                     	;# 
   734  0391                     	;# 
   735  0392                     	;# 
   736  0393                     	;# 
   737  0394                     	;# 
   738  0395                     	;# 
   739  0396                     	;# 
   740  0397                     	;# 
   741  0398                     	;# 
   742  0399                     	;# 
   743  040E                     	;# 
   744  0413                     	;# 
   745  0413                     	;# 
   746  0414                     	;# 
   747  0414                     	;# 
   748  0415                     	;# 
   749  0416                     	;# 
   750  0417                     	;# 
   751  0418                     	;# 
   752  041A                     	;# 
   753  041A                     	;# 
   754  041B                     	;# 
   755  041B                     	;# 
   756  041C                     	;# 
   757  041D                     	;# 
   758  041E                     	;# 
   759  041F                     	;# 
   760  0493                     	;# 
   761  0494                     	;# 
   762  0495                     	;# 
   763  0496                     	;# 
   764  049A                     	;# 
   765  049B                     	;# 
   766  049C                     	;# 
   767  049D                     	;# 
   768  058C                     	;# 
   769  058C                     	;# 
   770  058D                     	;# 
   771  058E                     	;# 
   772  058E                     	;# 
   773  058F                     	;# 
   774  0590                     	;# 
   775  0590                     	;# 
   776  0591                     	;# 
   777  0592                     	;# 
   778  0592                     	;# 
   779  0593                     	;# 
   780  0594                     	;# 
   781  0594                     	;# 
   782  0595                     	;# 
   783  0596                     	;# 
   784  0596                     	;# 
   785  0597                     	;# 
   786  0598                     	;# 
   787  0599                     	;# 
   788  059A                     	;# 
   789  059B                     	;# 
   790  059B                     	;# 
   791  059C                     	;# 
   792  059D                     	;# 
   793  060C                     	;# 
   794  060C                     	;# 
   795  060D                     	;# 
   796  060E                     	;# 
   797  060F                     	;# 
   798  060F                     	;# 
   799  0610                     	;# 
   800  0611                     	;# 
   801  0612                     	;# 
   802  0613                     	;# 
   803  0614                     	;# 
   804  0617                     	;# 
   805  0618                     	;# 
   806  0619                     	;# 
   807  061A                     	;# 
   808  061B                     	;# 
   809  061C                     	;# 
   810  0691                     	;# 
   811  0692                     	;# 
   812  0693                     	;# 
   813  0694                     	;# 
   814  0695                     	;# 
   815  0696                     	;# 
   816  0697                     	;# 
   817  0699                     	;# 
   818  069A                     	;# 
   819  0711                     	;# 
   820  0712                     	;# 
   821  0713                     	;# 
   822  0714                     	;# 
   823  0715                     	;# 
   824  0718                     	;# 
   825  0718                     	;# 
   826  0719                     	;# 
   827  071A                     	;# 
   828  071A                     	;# 
   829  071B                     	;# 
   830  071C                     	;# 
   831  071D                     	;# 
   832  0791                     	;# 
   833  0791                     	;# 
   834  0792                     	;# 
   835  0793                     	;# 
   836  0793                     	;# 
   837  0794                     	;# 
   838  0795                     	;# 
   839  0795                     	;# 
   840  0796                     	;# 
   841  0797                     	;# 
   842  0797                     	;# 
   843  0798                     	;# 
   844  0799                     	;# 
   845  079A                     	;# 
   846  080C                     	;# 
   847  080C                     	;# 
   848  080D                     	;# 
   849  080E                     	;# 
   850  080E                     	;# 
   851  080F                     	;# 
   852  0810                     	;# 
   853  0810                     	;# 
   854  0811                     	;# 
   855  0812                     	;# 
   856  0812                     	;# 
   857  0813                     	;# 
   858  0814                     	;# 
   859  0815                     	;# 
   860  0816                     	;# 
   861  0817                     	;# 
   862  0818                     	;# 
   863  0819                     	;# 
   864  081A                     	;# 
   865  081A                     	;# 
   866  081B                     	;# 
   867  081C                     	;# 
   868  081C                     	;# 
   869  081D                     	;# 
   870  088C                     	;# 
   871  088D                     	;# 
   872  088E                     	;# 
   873  088F                     	;# 
   874  088F                     	;# 
   875  0890                     	;# 
   876  0891                     	;# 
   877  0892                     	;# 
   878  0893                     	;# 
   879  0893                     	;# 
   880  0894                     	;# 
   881  0895                     	;# 
   882  0896                     	;# 
   883  0897                     	;# 
   884  0897                     	;# 
   885  0898                     	;# 
   886  0899                     	;# 
   887  0D8C                     	;# 
   888  0D8C                     	;# 
   889  0D8D                     	;# 
   890  0D8E                     	;# 
   891  0D8F                     	;# 
   892  0D8F                     	;# 
   893  0D90                     	;# 
   894  0D91                     	;# 
   895  0D92                     	;# 
   896  0D92                     	;# 
   897  0D93                     	;# 
   898  0D94                     	;# 
   899  0D95                     	;# 
   900  0D95                     	;# 
   901  0D96                     	;# 
   902  0D97                     	;# 
   903  0D98                     	;# 
   904  0D99                     	;# 
   905  0D9A                     	;# 
   906  0D9B                     	;# 
   907  0D9C                     	;# 
   908  0D9D                     	;# 
   909  0D9E                     	;# 
   910  0D9E                     	;# 
   911  0D9F                     	;# 
   912  0DA0                     	;# 
   913  0DA1                     	;# 
   914  0DA1                     	;# 
   915  0DA2                     	;# 
   916  0DA3                     	;# 
   917  0DA4                     	;# 
   918  0DA4                     	;# 
   919  0DA5                     	;# 
   920  0DA6                     	;# 
   921  0DA7                     	;# 
   922  0DA7                     	;# 
   923  0DA8                     	;# 
   924  0DA9                     	;# 
   925  0DAA                     	;# 
   926  0DAB                     	;# 
   927  0DAC                     	;# 
   928  0DAD                     	;# 
   929  0DAE                     	;# 
   930  0DAF                     	;# 
   931  0E0F                     	;# 
   932  0E10                     	;# 
   933  0E11                     	;# 
   934  0E12                     	;# 
   935  0E13                     	;# 
   936  0E14                     	;# 
   937  0E15                     	;# 
   938  0E16                     	;# 
   939  0E17                     	;# 
   940  0E18                     	;# 
   941  0E19                     	;# 
   942  0E1A                     	;# 
   943  0E1B                     	;# 
   944  0E1C                     	;# 
   945  0E1D                     	;# 
   946  0E1E                     	;# 
   947  0E1F                     	;# 
   948  0E20                     	;# 
   949  0E21                     	;# 
   950  0E22                     	;# 
   951  0E23                     	;# 
   952  0E24                     	;# 
   953  0E25                     	;# 
   954  0E26                     	;# 
   955  0E27                     	;# 
   956  0E28                     	;# 
   957  0E29                     	;# 
   958  0E2A                     	;# 
   959  0E2B                     	;# 
   960  0E2C                     	;# 
   961  0E2D                     	;# 
   962  0E2E                     	;# 
   963  0E90                     	;# 
   964  0E91                     	;# 
   965  0E92                     	;# 
   966  0E94                     	;# 
   967  0E95                     	;# 
   968  0E9C                     	;# 
   969  0E9D                     	;# 
   970  0E9E                     	;# 
   971  0E9F                     	;# 
   972  0EA0                     	;# 
   973  0EA1                     	;# 
   974  0EA2                     	;# 
   975  0EA3                     	;# 
   976  0EA4                     	;# 
   977  0EA5                     	;# 
   978  0EA6                     	;# 
   979  0EA7                     	;# 
   980  0F0F                     	;# 
   981  0F10                     	;# 
   982  0F11                     	;# 
   983  0F12                     	;# 
   984  0F13                     	;# 
   985  0F14                     	;# 
   986  0F15                     	;# 
   987  0F16                     	;# 
   988  0F17                     	;# 
   989  0F18                     	;# 
   990  0F19                     	;# 
   991  0F1A                     	;# 
   992  0F1B                     	;# 
   993  0F1C                     	;# 
   994  0F1D                     	;# 
   995  0F1E                     	;# 
   996  0F1F                     	;# 
   997  0F20                     	;# 
   998  0F21                     	;# 
   999  0F22                     	;# 
  1000  0F23                     	;# 
  1001  0F24                     	;# 
  1002  0F25                     	;# 
  1003  0F26                     	;# 
  1004  0F27                     	;# 
  1005  0F28                     	;# 
  1006  0F29                     	;# 
  1007  0F2A                     	;# 
  1008  0F2B                     	;# 
  1009  0F2C                     	;# 
  1010  0F2D                     	;# 
  1011  0F2E                     	;# 
  1012  0F2F                     	;# 
  1013  0F30                     	;# 
  1014  0F31                     	;# 
  1015  0F32                     	;# 
  1016  0F33                     	;# 
  1017  0F34                     	;# 
  1018  0F35                     	;# 
  1019  0F36                     	;# 
  1020  0F37                     	;# 
  1021  0FE4                     	;# 
  1022  0FE5                     	;# 
  1023  0FE6                     	;# 
  1024  0FE7                     	;# 
  1025  0FE8                     	;# 
  1026  0FE9                     	;# 
  1027  0FEA                     	;# 
  1028  0FEB                     	;# 
  1029  0FED                     	;# 
  1030  0FEE                     	;# 
  1031  0FEF                     	;# 
  1032  0000                     	;# 
  1033  0001                     	;# 
  1034  0002                     	;# 
  1035  0003                     	;# 
  1036  0004                     	;# 
  1037  0005                     	;# 
  1038  0006                     	;# 
  1039  0007                     	;# 
  1040  0008                     	;# 
  1041  0009                     	;# 
  1042  000A                     	;# 
  1043  000B                     	;# 
  1044  000C                     	;# 
  1045  000D                     	;# 
  1046  000E                     	;# 
  1047  0010                     	;# 
  1048  0011                     	;# 
  1049  0012                     	;# 
  1050  0013                     	;# 
  1051  0014                     	;# 
  1052  0015                     	;# 
  1053  0016                     	;# 
  1054  0016                     	;# 
  1055  0017                     	;# 
  1056  0018                     	;# 
  1057  0019                     	;# 
  1058  001A                     	;# 
  1059  001A                     	;# 
  1060  001B                     	;# 
  1061  001B                     	;# 
  1062  001C                     	;# 
  1063  001D                     	;# 
  1064  001E                     	;# 
  1065  001F                     	;# 
  1066  008C                     	;# 
  1067  008D                     	;# 
  1068  008E                     	;# 
  1069  0090                     	;# 
  1070  0091                     	;# 
  1071  0092                     	;# 
  1072  0093                     	;# 
  1073  0094                     	;# 
  1074  0095                     	;# 
  1075  0096                     	;# 
  1076  0098                     	;# 
  1077  0099                     	;# 
  1078  009A                     	;# 
  1079  009B                     	;# 
  1080  009B                     	;# 
  1081  009C                     	;# 
  1082  009D                     	;# 
  1083  009E                     	;# 
  1084  009F                     	;# 
  1085  010C                     	;# 
  1086  010D                     	;# 
  1087  010E                     	;# 
  1088  0111                     	;# 
  1089  0112                     	;# 
  1090  0113                     	;# 
  1091  0114                     	;# 
  1092  0115                     	;# 
  1093  0116                     	;# 
  1094  0117                     	;# 
  1095  0118                     	;# 
  1096  0119                     	;# 
  1097  011C                     	;# 
  1098  018C                     	;# 
  1099  018D                     	;# 
  1100  018E                     	;# 
  1101  0191                     	;# 
  1102  0191                     	;# 
  1103  0192                     	;# 
  1104  0193                     	;# 
  1105  0193                     	;# 
  1106  0194                     	;# 
  1107  0195                     	;# 
  1108  0196                     	;# 
  1109  0197                     	;# 
  1110  0199                     	;# 
  1111  0199                     	;# 
  1112  0199                     	;# 
  1113  019A                     	;# 
  1114  019A                     	;# 
  1115  019A                     	;# 
  1116  019B                     	;# 
  1117  019B                     	;# 
  1118  019B                     	;# 
  1119  019B                     	;# 
  1120  019B                     	;# 
  1121  019C                     	;# 
  1122  019C                     	;# 
  1123  019C                     	;# 
  1124  019D                     	;# 
  1125  019D                     	;# 
  1126  019D                     	;# 
  1127  019E                     	;# 
  1128  019E                     	;# 
  1129  019E                     	;# 
  1130  019F                     	;# 
  1131  019F                     	;# 
  1132  019F                     	;# 
  1133  019F                     	;# 
  1134  019F                     	;# 
  1135  020C                     	;# 
  1136  020D                     	;# 
  1137  020E                     	;# 
  1138  0211                     	;# 
  1139  0211                     	;# 
  1140  0212                     	;# 
  1141  0212                     	;# 
  1142  0213                     	;# 
  1143  0213                     	;# 
  1144  0214                     	;# 
  1145  0214                     	;# 
  1146  0215                     	;# 
  1147  0215                     	;# 
  1148  0215                     	;# 
  1149  0215                     	;# 
  1150  0216                     	;# 
  1151  0216                     	;# 
  1152  0217                     	;# 
  1153  0217                     	;# 
  1154  028C                     	;# 
  1155  028D                     	;# 
  1156  028E                     	;# 
  1157  0291                     	;# 
  1158  0291                     	;# 
  1159  0292                     	;# 
  1160  0293                     	;# 
  1161  0294                     	;# 
  1162  0298                     	;# 
  1163  0298                     	;# 
  1164  0299                     	;# 
  1165  029A                     	;# 
  1166  029B                     	;# 
  1167  029E                     	;# 
  1168  030C                     	;# 
  1169  030D                     	;# 
  1170  030E                     	;# 
  1171  038C                     	;# 
  1172  038D                     	;# 
  1173  038E                     	;# 
  1174  0391                     	;# 
  1175  0392                     	;# 
  1176  0393                     	;# 
  1177  0394                     	;# 
  1178  0395                     	;# 
  1179  0396                     	;# 
  1180  0397                     	;# 
  1181  0398                     	;# 
  1182  0399                     	;# 
  1183  040E                     	;# 
  1184  0413                     	;# 
  1185  0413                     	;# 
  1186  0414                     	;# 
  1187  0414                     	;# 
  1188  0415                     	;# 
  1189  0416                     	;# 
  1190  0417                     	;# 
  1191  0418                     	;# 
  1192  041A                     	;# 
  1193  041A                     	;# 
  1194  041B                     	;# 
  1195  041B                     	;# 
  1196  041C                     	;# 
  1197  041D                     	;# 
  1198  041E                     	;# 
  1199  041F                     	;# 
  1200  0493                     	;# 
  1201  0494                     	;# 
  1202  0495                     	;# 
  1203  0496                     	;# 
  1204  049A                     	;# 
  1205  049B                     	;# 
  1206  049C                     	;# 
  1207  049D                     	;# 
  1208  058C                     	;# 
  1209  058C                     	;# 
  1210  058D                     	;# 
  1211  058E                     	;# 
  1212  058E                     	;# 
  1213  058F                     	;# 
  1214  0590                     	;# 
  1215  0590                     	;# 
  1216  0591                     	;# 
  1217  0592                     	;# 
  1218  0592                     	;# 
  1219  0593                     	;# 
  1220  0594                     	;# 
  1221  0594                     	;# 
  1222  0595                     	;# 
  1223  0596                     	;# 
  1224  0596                     	;# 
  1225  0597                     	;# 
  1226  0598                     	;# 
  1227  0599                     	;# 
  1228  059A                     	;# 
  1229  059B                     	;# 
  1230  059B                     	;# 
  1231  059C                     	;# 
  1232  059D                     	;# 
  1233  060C                     	;# 
  1234  060C                     	;# 
  1235  060D                     	;# 
  1236  060E                     	;# 
  1237  060F                     	;# 
  1238  060F                     	;# 
  1239  0610                     	;# 
  1240  0611                     	;# 
  1241  0612                     	;# 
  1242  0613                     	;# 
  1243  0614                     	;# 
  1244  0617                     	;# 
  1245  0618                     	;# 
  1246  0619                     	;# 
  1247  061A                     	;# 
  1248  061B                     	;# 
  1249  061C                     	;# 
  1250  0691                     	;# 
  1251  0692                     	;# 
  1252  0693                     	;# 
  1253  0694                     	;# 
  1254  0695                     	;# 
  1255  0696                     	;# 
  1256  0697                     	;# 
  1257  0699                     	;# 
  1258  069A                     	;# 
  1259  0711                     	;# 
  1260  0712                     	;# 
  1261  0713                     	;# 
  1262  0714                     	;# 
  1263  0715                     	;# 
  1264  0718                     	;# 
  1265  0718                     	;# 
  1266  0719                     	;# 
  1267  071A                     	;# 
  1268  071A                     	;# 
  1269  071B                     	;# 
  1270  071C                     	;# 
  1271  071D                     	;# 
  1272  0791                     	;# 
  1273  0791                     	;# 
  1274  0792                     	;# 
  1275  0793                     	;# 
  1276  0793                     	;# 
  1277  0794                     	;# 
  1278  0795                     	;# 
  1279  0795                     	;# 
  1280  0796                     	;# 
  1281  0797                     	;# 
  1282  0797                     	;# 
  1283  0798                     	;# 
  1284  0799                     	;# 
  1285  079A                     	;# 
  1286  080C                     	;# 
  1287  080C                     	;# 
  1288  080D                     	;# 
  1289  080E                     	;# 
  1290  080E                     	;# 
  1291  080F                     	;# 
  1292  0810                     	;# 
  1293  0810                     	;# 
  1294  0811                     	;# 
  1295  0812                     	;# 
  1296  0812                     	;# 
  1297  0813                     	;# 
  1298  0814                     	;# 
  1299  0815                     	;# 
  1300  0816                     	;# 
  1301  0817                     	;# 
  1302  0818                     	;# 
  1303  0819                     	;# 
  1304  081A                     	;# 
  1305  081A                     	;# 
  1306  081B                     	;# 
  1307  081C                     	;# 
  1308  081C                     	;# 
  1309  081D                     	;# 
  1310  088C                     	;# 
  1311  088D                     	;# 
  1312  088E                     	;# 
  1313  088F                     	;# 
  1314  088F                     	;# 
  1315  0890                     	;# 
  1316  0891                     	;# 
  1317  0892                     	;# 
  1318  0893                     	;# 
  1319  0893                     	;# 
  1320  0894                     	;# 
  1321  0895                     	;# 
  1322  0896                     	;# 
  1323  0897                     	;# 
  1324  0897                     	;# 
  1325  0898                     	;# 
  1326  0899                     	;# 
  1327  0D8C                     	;# 
  1328  0D8C                     	;# 
  1329  0D8D                     	;# 
  1330  0D8E                     	;# 
  1331  0D8F                     	;# 
  1332  0D8F                     	;# 
  1333  0D90                     	;# 
  1334  0D91                     	;# 
  1335  0D92                     	;# 
  1336  0D92                     	;# 
  1337  0D93                     	;# 
  1338  0D94                     	;# 
  1339  0D95                     	;# 
  1340  0D95                     	;# 
  1341  0D96                     	;# 
  1342  0D97                     	;# 
  1343  0D98                     	;# 
  1344  0D99                     	;# 
  1345  0D9A                     	;# 
  1346  0D9B                     	;# 
  1347  0D9C                     	;# 
  1348  0D9D                     	;# 
  1349  0D9E                     	;# 
  1350  0D9E                     	;# 
  1351  0D9F                     	;# 
  1352  0DA0                     	;# 
  1353  0DA1                     	;# 
  1354  0DA1                     	;# 
  1355  0DA2                     	;# 
  1356  0DA3                     	;# 
  1357  0DA4                     	;# 
  1358  0DA4                     	;# 
  1359  0DA5                     	;# 
  1360  0DA6                     	;# 
  1361  0DA7                     	;# 
  1362  0DA7                     	;# 
  1363  0DA8                     	;# 
  1364  0DA9                     	;# 
  1365  0DAA                     	;# 
  1366  0DAB                     	;# 
  1367  0DAC                     	;# 
  1368  0DAD                     	;# 
  1369  0DAE                     	;# 
  1370  0DAF                     	;# 
  1371  0E0F                     	;# 
  1372  0E10                     	;# 
  1373  0E11                     	;# 
  1374  0E12                     	;# 
  1375  0E13                     	;# 
  1376  0E14                     	;# 
  1377  0E15                     	;# 
  1378  0E16                     	;# 
  1379  0E17                     	;# 
  1380  0E18                     	;# 
  1381  0E19                     	;# 
  1382  0E1A                     	;# 
  1383  0E1B                     	;# 
  1384  0E1C                     	;# 
  1385  0E1D                     	;# 
  1386  0E1E                     	;# 
  1387  0E1F                     	;# 
  1388  0E20                     	;# 
  1389  0E21                     	;# 
  1390  0E22                     	;# 
  1391  0E23                     	;# 
  1392  0E24                     	;# 
  1393  0E25                     	;# 
  1394  0E26                     	;# 
  1395  0E27                     	;# 
  1396  0E28                     	;# 
  1397  0E29                     	;# 
  1398  0E2A                     	;# 
  1399  0E2B                     	;# 
  1400  0E2C                     	;# 
  1401  0E2D                     	;# 
  1402  0E2E                     	;# 
  1403  0E90                     	;# 
  1404  0E91                     	;# 
  1405  0E92                     	;# 
  1406  0E94                     	;# 
  1407  0E95                     	;# 
  1408  0E9C                     	;# 
  1409  0E9D                     	;# 
  1410  0E9E                     	;# 
  1411  0E9F                     	;# 
  1412  0EA0                     	;# 
  1413  0EA1                     	;# 
  1414  0EA2                     	;# 
  1415  0EA3                     	;# 
  1416  0EA4                     	;# 
  1417  0EA5                     	;# 
  1418  0EA6                     	;# 
  1419  0EA7                     	;# 
  1420  0F0F                     	;# 
  1421  0F10                     	;# 
  1422  0F11                     	;# 
  1423  0F12                     	;# 
  1424  0F13                     	;# 
  1425  0F14                     	;# 
  1426  0F15                     	;# 
  1427  0F16                     	;# 
  1428  0F17                     	;# 
  1429  0F18                     	;# 
  1430  0F19                     	;# 
  1431  0F1A                     	;# 
  1432  0F1B                     	;# 
  1433  0F1C                     	;# 
  1434  0F1D                     	;# 
  1435  0F1E                     	;# 
  1436  0F1F                     	;# 
  1437  0F20                     	;# 
  1438  0F21                     	;# 
  1439  0F22                     	;# 
  1440  0F23                     	;# 
  1441  0F24                     	;# 
  1442  0F25                     	;# 
  1443  0F26                     	;# 
  1444  0F27                     	;# 
  1445  0F28                     	;# 
  1446  0F29                     	;# 
  1447  0F2A                     	;# 
  1448  0F2B                     	;# 
  1449  0F2C                     	;# 
  1450  0F2D                     	;# 
  1451  0F2E                     	;# 
  1452  0F2F                     	;# 
  1453  0F30                     	;# 
  1454  0F31                     	;# 
  1455  0F32                     	;# 
  1456  0F33                     	;# 
  1457  0F34                     	;# 
  1458  0F35                     	;# 
  1459  0F36                     	;# 
  1460  0F37                     	;# 
  1461  0FE4                     	;# 
  1462  0FE5                     	;# 
  1463  0FE6                     	;# 
  1464  0FE7                     	;# 
  1465  0FE8                     	;# 
  1466  0FE9                     	;# 
  1467  0FEA                     	;# 
  1468  0FEB                     	;# 
  1469  0FED                     	;# 
  1470  0FEE                     	;# 
  1471  0FEF                     	;# 
  1472  0000                     	;# 
  1473  0001                     	;# 
  1474  0002                     	;# 
  1475  0003                     	;# 
  1476  0004                     	;# 
  1477  0005                     	;# 
  1478  0006                     	;# 
  1479  0007                     	;# 
  1480  0008                     	;# 
  1481  0009                     	;# 
  1482  000A                     	;# 
  1483  000B                     	;# 
  1484  000C                     	;# 
  1485  000D                     	;# 
  1486  000E                     	;# 
  1487  0010                     	;# 
  1488  0011                     	;# 
  1489  0012                     	;# 
  1490  0013                     	;# 
  1491  0014                     	;# 
  1492  0015                     	;# 
  1493  0016                     	;# 
  1494  0016                     	;# 
  1495  0017                     	;# 
  1496  0018                     	;# 
  1497  0019                     	;# 
  1498  001A                     	;# 
  1499  001A                     	;# 
  1500  001B                     	;# 
  1501  001B                     	;# 
  1502  001C                     	;# 
  1503  001D                     	;# 
  1504  001E                     	;# 
  1505  001F                     	;# 
  1506  008C                     	;# 
  1507  008D                     	;# 
  1508  008E                     	;# 
  1509  0090                     	;# 
  1510  0091                     	;# 
  1511  0092                     	;# 
  1512  0093                     	;# 
  1513  0094                     	;# 
  1514  0095                     	;# 
  1515  0096                     	;# 
  1516  0098                     	;# 
  1517  0099                     	;# 
  1518  009A                     	;# 
  1519  009B                     	;# 
  1520  009B                     	;# 
  1521  009C                     	;# 
  1522  009D                     	;# 
  1523  009E                     	;# 
  1524  009F                     	;# 
  1525  010C                     	;# 
  1526  010D                     	;# 
  1527  010E                     	;# 
  1528  0111                     	;# 
  1529  0112                     	;# 
  1530  0113                     	;# 
  1531  0114                     	;# 
  1532  0115                     	;# 
  1533  0116                     	;# 
  1534  0117                     	;# 
  1535  0118                     	;# 
  1536  0119                     	;# 
  1537  011C                     	;# 
  1538  018C                     	;# 
  1539  018D                     	;# 
  1540  018E                     	;# 
  1541  0191                     	;# 
  1542  0191                     	;# 
  1543  0192                     	;# 
  1544  0193                     	;# 
  1545  0193                     	;# 
  1546  0194                     	;# 
  1547  0195                     	;# 
  1548  0196                     	;# 
  1549  0197                     	;# 
  1550  0199                     	;# 
  1551  0199                     	;# 
  1552  0199                     	;# 
  1553  019A                     	;# 
  1554  019A                     	;# 
  1555  019A                     	;# 
  1556  019B                     	;# 
  1557  019B                     	;# 
  1558  019B                     	;# 
  1559  019B                     	;# 
  1560  019B                     	;# 
  1561  019C                     	;# 
  1562  019C                     	;# 
  1563  019C                     	;# 
  1564  019D                     	;# 
  1565  019D                     	;# 
  1566  019D                     	;# 
  1567  019E                     	;# 
  1568  019E                     	;# 
  1569  019E                     	;# 
  1570  019F                     	;# 
  1571  019F                     	;# 
  1572  019F                     	;# 
  1573  019F                     	;# 
  1574  019F                     	;# 
  1575  020C                     	;# 
  1576  020D                     	;# 
  1577  020E                     	;# 
  1578  0211                     	;# 
  1579  0211                     	;# 
  1580  0212                     	;# 
  1581  0212                     	;# 
  1582  0213                     	;# 
  1583  0213                     	;# 
  1584  0214                     	;# 
  1585  0214                     	;# 
  1586  0215                     	;# 
  1587  0215                     	;# 
  1588  0215                     	;# 
  1589  0215                     	;# 
  1590  0216                     	;# 
  1591  0216                     	;# 
  1592  0217                     	;# 
  1593  0217                     	;# 
  1594  028C                     	;# 
  1595  028D                     	;# 
  1596  028E                     	;# 
  1597  0291                     	;# 
  1598  0291                     	;# 
  1599  0292                     	;# 
  1600  0293                     	;# 
  1601  0294                     	;# 
  1602  0298                     	;# 
  1603  0298                     	;# 
  1604  0299                     	;# 
  1605  029A                     	;# 
  1606  029B                     	;# 
  1607  029E                     	;# 
  1608  030C                     	;# 
  1609  030D                     	;# 
  1610  030E                     	;# 
  1611  038C                     	;# 
  1612  038D                     	;# 
  1613  038E                     	;# 
  1614  0391                     	;# 
  1615  0392                     	;# 
  1616  0393                     	;# 
  1617  0394                     	;# 
  1618  0395                     	;# 
  1619  0396                     	;# 
  1620  0397                     	;# 
  1621  0398                     	;# 
  1622  0399                     	;# 
  1623  040E                     	;# 
  1624  0413                     	;# 
  1625  0413                     	;# 
  1626  0414                     	;# 
  1627  0414                     	;# 
  1628  0415                     	;# 
  1629  0416                     	;# 
  1630  0417                     	;# 
  1631  0418                     	;# 
  1632  041A                     	;# 
  1633  041A                     	;# 
  1634  041B                     	;# 
  1635  041B                     	;# 
  1636  041C                     	;# 
  1637  041D                     	;# 
  1638  041E                     	;# 
  1639  041F                     	;# 
  1640  0493                     	;# 
  1641  0494                     	;# 
  1642  0495                     	;# 
  1643  0496                     	;# 
  1644  049A                     	;# 
  1645  049B                     	;# 
  1646  049C                     	;# 
  1647  049D                     	;# 
  1648  058C                     	;# 
  1649  058C                     	;# 
  1650  058D                     	;# 
  1651  058E                     	;# 
  1652  058E                     	;# 
  1653  058F                     	;# 
  1654  0590                     	;# 
  1655  0590                     	;# 
  1656  0591                     	;# 
  1657  0592                     	;# 
  1658  0592                     	;# 
  1659  0593                     	;# 
  1660  0594                     	;# 
  1661  0594                     	;# 
  1662  0595                     	;# 
  1663  0596                     	;# 
  1664  0596                     	;# 
  1665  0597                     	;# 
  1666  0598                     	;# 
  1667  0599                     	;# 
  1668  059A                     	;# 
  1669  059B                     	;# 
  1670  059B                     	;# 
  1671  059C                     	;# 
  1672  059D                     	;# 
  1673  060C                     	;# 
  1674  060C                     	;# 
  1675  060D                     	;# 
  1676  060E                     	;# 
  1677  060F                     	;# 
  1678  060F                     	;# 
  1679  0610                     	;# 
  1680  0611                     	;# 
  1681  0612                     	;# 
  1682  0613                     	;# 
  1683  0614                     	;# 
  1684  0617                     	;# 
  1685  0618                     	;# 
  1686  0619                     	;# 
  1687  061A                     	;# 
  1688  061B                     	;# 
  1689  061C                     	;# 
  1690  0691                     	;# 
  1691  0692                     	;# 
  1692  0693                     	;# 
  1693  0694                     	;# 
  1694  0695                     	;# 
  1695  0696                     	;# 
  1696  0697                     	;# 
  1697  0699                     	;# 
  1698  069A                     	;# 
  1699  0711                     	;# 
  1700  0712                     	;# 
  1701  0713                     	;# 
  1702  0714                     	;# 
  1703  0715                     	;# 
  1704  0718                     	;# 
  1705  0718                     	;# 
  1706  0719                     	;# 
  1707  071A                     	;# 
  1708  071A                     	;# 
  1709  071B                     	;# 
  1710  071C                     	;# 
  1711  071D                     	;# 
  1712  0791                     	;# 
  1713  0791                     	;# 
  1714  0792                     	;# 
  1715  0793                     	;# 
  1716  0793                     	;# 
  1717  0794                     	;# 
  1718  0795                     	;# 
  1719  0795                     	;# 
  1720  0796                     	;# 
  1721  0797                     	;# 
  1722  0797                     	;# 
  1723  0798                     	;# 
  1724  0799                     	;# 
  1725  079A                     	;# 
  1726  080C                     	;# 
  1727  080C                     	;# 
  1728  080D                     	;# 
  1729  080E                     	;# 
  1730  080E                     	;# 
  1731  080F                     	;# 
  1732  0810                     	;# 
  1733  0810                     	;# 
  1734  0811                     	;# 
  1735  0812                     	;# 
  1736  0812                     	;# 
  1737  0813                     	;# 
  1738  0814                     	;# 
  1739  0815                     	;# 
  1740  0816                     	;# 
  1741  0817                     	;# 
  1742  0818                     	;# 
  1743  0819                     	;# 
  1744  081A                     	;# 
  1745  081A                     	;# 
  1746  081B                     	;# 
  1747  081C                     	;# 
  1748  081C                     	;# 
  1749  081D                     	;# 
  1750  088C                     	;# 
  1751  088D                     	;# 
  1752  088E                     	;# 
  1753  088F                     	;# 
  1754  088F                     	;# 
  1755  0890                     	;# 
  1756  0891                     	;# 
  1757  0892                     	;# 
  1758  0893                     	;# 
  1759  0893                     	;# 
  1760  0894                     	;# 
  1761  0895                     	;# 
  1762  0896                     	;# 
  1763  0897                     	;# 
  1764  0897                     	;# 
  1765  0898                     	;# 
  1766  0899                     	;# 
  1767  0D8C                     	;# 
  1768  0D8C                     	;# 
  1769  0D8D                     	;# 
  1770  0D8E                     	;# 
  1771  0D8F                     	;# 
  1772  0D8F                     	;# 
  1773  0D90                     	;# 
  1774  0D91                     	;# 
  1775  0D92                     	;# 
  1776  0D92                     	;# 
  1777  0D93                     	;# 
  1778  0D94                     	;# 
  1779  0D95                     	;# 
  1780  0D95                     	;# 
  1781  0D96                     	;# 
  1782  0D97                     	;# 
  1783  0D98                     	;# 
  1784  0D99                     	;# 
  1785  0D9A                     	;# 
  1786  0D9B                     	;# 
  1787  0D9C                     	;# 
  1788  0D9D                     	;# 
  1789  0D9E                     	;# 
  1790  0D9E                     	;# 
  1791  0D9F                     	;# 
  1792  0DA0                     	;# 
  1793  0DA1                     	;# 
  1794  0DA1                     	;# 
  1795  0DA2                     	;# 
  1796  0DA3                     	;# 
  1797  0DA4                     	;# 
  1798  0DA4                     	;# 
  1799  0DA5                     	;# 
  1800  0DA6                     	;# 
  1801  0DA7                     	;# 
  1802  0DA7                     	;# 
  1803  0DA8                     	;# 
  1804  0DA9                     	;# 
  1805  0DAA                     	;# 
  1806  0DAB                     	;# 
  1807  0DAC                     	;# 
  1808  0DAD                     	;# 
  1809  0DAE                     	;# 
  1810  0DAF                     	;# 
  1811  0E0F                     	;# 
  1812  0E10                     	;# 
  1813  0E11                     	;# 
  1814  0E12                     	;# 
  1815  0E13                     	;# 
  1816  0E14                     	;# 
  1817  0E15                     	;# 
  1818  0E16                     	;# 
  1819  0E17                     	;# 
  1820  0E18                     	;# 
  1821  0E19                     	;# 
  1822  0E1A                     	;# 
  1823  0E1B                     	;# 
  1824  0E1C                     	;# 
  1825  0E1D                     	;# 
  1826  0E1E                     	;# 
  1827  0E1F                     	;# 
  1828  0E20                     	;# 
  1829  0E21                     	;# 
  1830  0E22                     	;# 
  1831  0E23                     	;# 
  1832  0E24                     	;# 
  1833  0E25                     	;# 
  1834  0E26                     	;# 
  1835  0E27                     	;# 
  1836  0E28                     	;# 
  1837  0E29                     	;# 
  1838  0E2A                     	;# 
  1839  0E2B                     	;# 
  1840  0E2C                     	;# 
  1841  0E2D                     	;# 
  1842  0E2E                     	;# 
  1843  0E90                     	;# 
  1844  0E91                     	;# 
  1845  0E92                     	;# 
  1846  0E94                     	;# 
  1847  0E95                     	;# 
  1848  0E9C                     	;# 
  1849  0E9D                     	;# 
  1850  0E9E                     	;# 
  1851  0E9F                     	;# 
  1852  0EA0                     	;# 
  1853  0EA1                     	;# 
  1854  0EA2                     	;# 
  1855  0EA3                     	;# 
  1856  0EA4                     	;# 
  1857  0EA5                     	;# 
  1858  0EA6                     	;# 
  1859  0EA7                     	;# 
  1860  0F0F                     	;# 
  1861  0F10                     	;# 
  1862  0F11                     	;# 
  1863  0F12                     	;# 
  1864  0F13                     	;# 
  1865  0F14                     	;# 
  1866  0F15                     	;# 
  1867  0F16                     	;# 
  1868  0F17                     	;# 
  1869  0F18                     	;# 
  1870  0F19                     	;# 
  1871  0F1A                     	;# 
  1872  0F1B                     	;# 
  1873  0F1C                     	;# 
  1874  0F1D                     	;# 
  1875  0F1E                     	;# 
  1876  0F1F                     	;# 
  1877  0F20                     	;# 
  1878  0F21                     	;# 
  1879  0F22                     	;# 
  1880  0F23                     	;# 
  1881  0F24                     	;# 
  1882  0F25                     	;# 
  1883  0F26                     	;# 
  1884  0F27                     	;# 
  1885  0F28                     	;# 
  1886  0F29                     	;# 
  1887  0F2A                     	;# 
  1888  0F2B                     	;# 
  1889  0F2C                     	;# 
  1890  0F2D                     	;# 
  1891  0F2E                     	;# 
  1892  0F2F                     	;# 
  1893  0F30                     	;# 
  1894  0F31                     	;# 
  1895  0F32                     	;# 
  1896  0F33                     	;# 
  1897  0F34                     	;# 
  1898  0F35                     	;# 
  1899  0F36                     	;# 
  1900  0F37                     	;# 
  1901  0FE4                     	;# 
  1902  0FE5                     	;# 
  1903  0FE6                     	;# 
  1904  0FE7                     	;# 
  1905  0FE8                     	;# 
  1906  0FE9                     	;# 
  1907  0FEA                     	;# 
  1908  0FEB                     	;# 
  1909  0FED                     	;# 
  1910  0FEE                     	;# 
  1911  0FEF                     	;# 
  1912  0000                     	;# 
  1913  0001                     	;# 
  1914  0002                     	;# 
  1915  0003                     	;# 
  1916  0004                     	;# 
  1917  0005                     	;# 
  1918  0006                     	;# 
  1919  0007                     	;# 
  1920  0008                     	;# 
  1921  0009                     	;# 
  1922  000A                     	;# 
  1923  000B                     	;# 
  1924  000C                     	;# 
  1925  000D                     	;# 
  1926  000E                     	;# 
  1927  0010                     	;# 
  1928  0011                     	;# 
  1929  0012                     	;# 
  1930  0013                     	;# 
  1931  0014                     	;# 
  1932  0015                     	;# 
  1933  0016                     	;# 
  1934  0016                     	;# 
  1935  0017                     	;# 
  1936  0018                     	;# 
  1937  0019                     	;# 
  1938  001A                     	;# 
  1939  001A                     	;# 
  1940  001B                     	;# 
  1941  001B                     	;# 
  1942  001C                     	;# 
  1943  001D                     	;# 
  1944  001E                     	;# 
  1945  001F                     	;# 
  1946  008C                     	;# 
  1947  008D                     	;# 
  1948  008E                     	;# 
  1949  0090                     	;# 
  1950  0091                     	;# 
  1951  0092                     	;# 
  1952  0093                     	;# 
  1953  0094                     	;# 
  1954  0095                     	;# 
  1955  0096                     	;# 
  1956  0098                     	;# 
  1957  0099                     	;# 
  1958  009A                     	;# 
  1959  009B                     	;# 
  1960  009B                     	;# 
  1961  009C                     	;# 
  1962  009D                     	;# 
  1963  009E                     	;# 
  1964  009F                     	;# 
  1965  010C                     	;# 
  1966  010D                     	;# 
  1967  010E                     	;# 
  1968  0111                     	;# 
  1969  0112                     	;# 
  1970  0113                     	;# 
  1971  0114                     	;# 
  1972  0115                     	;# 
  1973  0116                     	;# 
  1974  0117                     	;# 
  1975  0118                     	;# 
  1976  0119                     	;# 
  1977  011C                     	;# 
  1978  018C                     	;# 
  1979  018D                     	;# 
  1980  018E                     	;# 
  1981  0191                     	;# 
  1982  0191                     	;# 
  1983  0192                     	;# 
  1984  0193                     	;# 
  1985  0193                     	;# 
  1986  0194                     	;# 
  1987  0195                     	;# 
  1988  0196                     	;# 
  1989  0197                     	;# 
  1990  0199                     	;# 
  1991  0199                     	;# 
  1992  0199                     	;# 
  1993  019A                     	;# 
  1994  019A                     	;# 
  1995  019A                     	;# 
  1996  019B                     	;# 
  1997  019B                     	;# 
  1998  019B                     	;# 
  1999  019B                     	;# 
  2000  019B                     	;# 
  2001  019C                     	;# 
  2002  019C                     	;# 
  2003  019C                     	;# 
  2004  019D                     	;# 
  2005  019D                     	;# 
  2006  019D                     	;# 
  2007  019E                     	;# 
  2008  019E                     	;# 
  2009  019E                     	;# 
  2010  019F                     	;# 
  2011  019F                     	;# 
  2012  019F                     	;# 
  2013  019F                     	;# 
  2014  019F                     	;# 
  2015  020C                     	;# 
  2016  020D                     	;# 
  2017  020E                     	;# 
  2018  0211                     	;# 
  2019  0211                     	;# 
  2020  0212                     	;# 
  2021  0212                     	;# 
  2022  0213                     	;# 
  2023  0213                     	;# 
  2024  0214                     	;# 
  2025  0214                     	;# 
  2026  0215                     	;# 
  2027  0215                     	;# 
  2028  0215                     	;# 
  2029  0215                     	;# 
  2030  0216                     	;# 
  2031  0216                     	;# 
  2032  0217                     	;# 
  2033  0217                     	;# 
  2034  028C                     	;# 
  2035  028D                     	;# 
  2036  028E                     	;# 
  2037  0291                     	;# 
  2038  0291                     	;# 
  2039  0292                     	;# 
  2040  0293                     	;# 
  2041  0294                     	;# 
  2042  0298                     	;# 
  2043  0298                     	;# 
  2044  0299                     	;# 
  2045  029A                     	;# 
  2046  029B                     	;# 
  2047  029E                     	;# 
  2048  030C                     	;# 
  2049  030D                     	;# 
  2050  030E                     	;# 
  2051  038C                     	;# 
  2052  038D                     	;# 
  2053  038E                     	;# 
  2054  0391                     	;# 
  2055  0392                     	;# 
  2056  0393                     	;# 
  2057  0394                     	;# 
  2058  0395                     	;# 
  2059  0396                     	;# 
  2060  0397                     	;# 
  2061  0398                     	;# 
  2062  0399                     	;# 
  2063  040E                     	;# 
  2064  0413                     	;# 
  2065  0413                     	;# 
  2066  0414                     	;# 
  2067  0414                     	;# 
  2068  0415                     	;# 
  2069  0416                     	;# 
  2070  0417                     	;# 
  2071  0418                     	;# 
  2072  041A                     	;# 
  2073  041A                     	;# 
  2074  041B                     	;# 
  2075  041B                     	;# 
  2076  041C                     	;# 
  2077  041D                     	;# 
  2078  041E                     	;# 
  2079  041F                     	;# 
  2080  0493                     	;# 
  2081  0494                     	;# 
  2082  0495                     	;# 
  2083  0496                     	;# 
  2084  049A                     	;# 
  2085  049B                     	;# 
  2086  049C                     	;# 
  2087  049D                     	;# 
  2088  058C                     	;# 
  2089  058C                     	;# 
  2090  058D                     	;# 
  2091  058E                     	;# 
  2092  058E                     	;# 
  2093  058F                     	;# 
  2094  0590                     	;# 
  2095  0590                     	;# 
  2096  0591                     	;# 
  2097  0592                     	;# 
  2098  0592                     	;# 
  2099  0593                     	;# 
  2100  0594                     	;# 
  2101  0594                     	;# 
  2102  0595                     	;# 
  2103  0596                     	;# 
  2104  0596                     	;# 
  2105  0597                     	;# 
  2106  0598                     	;# 
  2107  0599                     	;# 
  2108  059A                     	;# 
  2109  059B                     	;# 
  2110  059B                     	;# 
  2111  059C                     	;# 
  2112  059D                     	;# 
  2113  060C                     	;# 
  2114  060C                     	;# 
  2115  060D                     	;# 
  2116  060E                     	;# 
  2117  060F                     	;# 
  2118  060F                     	;# 
  2119  0610                     	;# 
  2120  0611                     	;# 
  2121  0612                     	;# 
  2122  0613                     	;# 
  2123  0614                     	;# 
  2124  0617                     	;# 
  2125  0618                     	;# 
  2126  0619                     	;# 
  2127  061A                     	;# 
  2128  061B                     	;# 
  2129  061C                     	;# 
  2130  0691                     	;# 
  2131  0692                     	;# 
  2132  0693                     	;# 
  2133  0694                     	;# 
  2134  0695                     	;# 
  2135  0696                     	;# 
  2136  0697                     	;# 
  2137  0699                     	;# 
  2138  069A                     	;# 
  2139  0711                     	;# 
  2140  0712                     	;# 
  2141  0713                     	;# 
  2142  0714                     	;# 
  2143  0715                     	;# 
  2144  0718                     	;# 
  2145  0718                     	;# 
  2146  0719                     	;# 
  2147  071A                     	;# 
  2148  071A                     	;# 
  2149  071B                     	;# 
  2150  071C                     	;# 
  2151  071D                     	;# 
  2152  0791                     	;# 
  2153  0791                     	;# 
  2154  0792                     	;# 
  2155  0793                     	;# 
  2156  0793                     	;# 
  2157  0794                     	;# 
  2158  0795                     	;# 
  2159  0795                     	;# 
  2160  0796                     	;# 
  2161  0797                     	;# 
  2162  0797                     	;# 
  2163  0798                     	;# 
  2164  0799                     	;# 
  2165  079A                     	;# 
  2166  080C                     	;# 
  2167  080C                     	;# 
  2168  080D                     	;# 
  2169  080E                     	;# 
  2170  080E                     	;# 
  2171  080F                     	;# 
  2172  0810                     	;# 
  2173  0810                     	;# 
  2174  0811                     	;# 
  2175  0812                     	;# 
  2176  0812                     	;# 
  2177  0813                     	;# 
  2178  0814                     	;# 
  2179  0815                     	;# 
  2180  0816                     	;# 
  2181  0817                     	;# 
  2182  0818                     	;# 
  2183  0819                     	;# 
  2184  081A                     	;# 
  2185  081A                     	;# 
  2186  081B                     	;# 
  2187  081C                     	;# 
  2188  081C                     	;# 
  2189  081D                     	;# 
  2190  088C                     	;# 
  2191  088D                     	;# 
  2192  088E                     	;# 
  2193  088F                     	;# 
  2194  088F                     	;# 
  2195  0890                     	;# 
  2196  0891                     	;# 
  2197  0892                     	;# 
  2198  0893                     	;# 
  2199  0893                     	;# 
  2200  0894                     	;# 
  2201  0895                     	;# 
  2202  0896                     	;# 
  2203  0897                     	;# 
  2204  0897                     	;# 
  2205  0898                     	;# 
  2206  0899                     	;# 
  2207  0D8C                     	;# 
  2208  0D8C                     	;# 
  2209  0D8D                     	;# 
  2210  0D8E                     	;# 
  2211  0D8F                     	;# 
  2212  0D8F                     	;# 
  2213  0D90                     	;# 
  2214  0D91                     	;# 
  2215  0D92                     	;# 
  2216  0D92                     	;# 
  2217  0D93                     	;# 
  2218  0D94                     	;# 
  2219  0D95                     	;# 
  2220  0D95                     	;# 
  2221  0D96                     	;# 
  2222  0D97                     	;# 
  2223  0D98                     	;# 
  2224  0D99                     	;# 
  2225  0D9A                     	;# 
  2226  0D9B                     	;# 
  2227  0D9C                     	;# 
  2228  0D9D                     	;# 
  2229  0D9E                     	;# 
  2230  0D9E                     	;# 
  2231  0D9F                     	;# 
  2232  0DA0                     	;# 
  2233  0DA1                     	;# 
  2234  0DA1                     	;# 
  2235  0DA2                     	;# 
  2236  0DA3                     	;# 
  2237  0DA4                     	;# 
  2238  0DA4                     	;# 
  2239  0DA5                     	;# 
  2240  0DA6                     	;# 
  2241  0DA7                     	;# 
  2242  0DA7                     	;# 
  2243  0DA8                     	;# 
  2244  0DA9                     	;# 
  2245  0DAA                     	;# 
  2246  0DAB                     	;# 
  2247  0DAC                     	;# 
  2248  0DAD                     	;# 
  2249  0DAE                     	;# 
  2250  0DAF                     	;# 
  2251  0E0F                     	;# 
  2252  0E10                     	;# 
  2253  0E11                     	;# 
  2254  0E12                     	;# 
  2255  0E13                     	;# 
  2256  0E14                     	;# 
  2257  0E15                     	;# 
  2258  0E16                     	;# 
  2259  0E17                     	;# 
  2260  0E18                     	;# 
  2261  0E19                     	;# 
  2262  0E1A                     	;# 
  2263  0E1B                     	;# 
  2264  0E1C                     	;# 
  2265  0E1D                     	;# 
  2266  0E1E                     	;# 
  2267  0E1F                     	;# 
  2268  0E20                     	;# 
  2269  0E21                     	;# 
  2270  0E22                     	;# 
  2271  0E23                     	;# 
  2272  0E24                     	;# 
  2273  0E25                     	;# 
  2274  0E26                     	;# 
  2275  0E27                     	;# 
  2276  0E28                     	;# 
  2277  0E29                     	;# 
  2278  0E2A                     	;# 
  2279  0E2B                     	;# 
  2280  0E2C                     	;# 
  2281  0E2D                     	;# 
  2282  0E2E                     	;# 
  2283  0E90                     	;# 
  2284  0E91                     	;# 
  2285  0E92                     	;# 
  2286  0E94                     	;# 
  2287  0E95                     	;# 
  2288  0E9C                     	;# 
  2289  0E9D                     	;# 
  2290  0E9E                     	;# 
  2291  0E9F                     	;# 
  2292  0EA0                     	;# 
  2293  0EA1                     	;# 
  2294  0EA2                     	;# 
  2295  0EA3                     	;# 
  2296  0EA4                     	;# 
  2297  0EA5                     	;# 
  2298  0EA6                     	;# 
  2299  0EA7                     	;# 
  2300  0F0F                     	;# 
  2301  0F10                     	;# 
  2302  0F11                     	;# 
  2303  0F12                     	;# 
  2304  0F13                     	;# 
  2305  0F14                     	;# 
  2306  0F15                     	;# 
  2307  0F16                     	;# 
  2308  0F17                     	;# 
  2309  0F18                     	;# 
  2310  0F19                     	;# 
  2311  0F1A                     	;# 
  2312  0F1B                     	;# 
  2313  0F1C                     	;# 
  2314  0F1D                     	;# 
  2315  0F1E                     	;# 
  2316  0F1F                     	;# 
  2317  0F20                     	;# 
  2318  0F21                     	;# 
  2319  0F22                     	;# 
  2320  0F23                     	;# 
  2321  0F24                     	;# 
  2322  0F25                     	;# 
  2323  0F26                     	;# 
  2324  0F27                     	;# 
  2325  0F28                     	;# 
  2326  0F29                     	;# 
  2327  0F2A                     	;# 
  2328  0F2B                     	;# 
  2329  0F2C                     	;# 
  2330  0F2D                     	;# 
  2331  0F2E                     	;# 
  2332  0F2F                     	;# 
  2333  0F30                     	;# 
  2334  0F31                     	;# 
  2335  0F32                     	;# 
  2336  0F33                     	;# 
  2337  0F34                     	;# 
  2338  0F35                     	;# 
  2339  0F36                     	;# 
  2340  0F37                     	;# 
  2341  0FE4                     	;# 
  2342  0FE5                     	;# 
  2343  0FE6                     	;# 
  2344  0FE7                     	;# 
  2345  0FE8                     	;# 
  2346  0FE9                     	;# 
  2347  0FEA                     	;# 
  2348  0FEB                     	;# 
  2349  0FED                     	;# 
  2350  0FEE                     	;# 
  2351  0FEF                     	;# 
  2352  0000                     	;# 
  2353  0001                     	;# 
  2354  0002                     	;# 
  2355  0003                     	;# 
  2356  0004                     	;# 
  2357  0005                     	;# 
  2358  0006                     	;# 
  2359  0007                     	;# 
  2360  0008                     	;# 
  2361  0009                     	;# 
  2362  000A                     	;# 
  2363  000B                     	;# 
  2364  000C                     	;# 
  2365  000D                     	;# 
  2366  000E                     	;# 
  2367  0010                     	;# 
  2368  0011                     	;# 
  2369  0012                     	;# 
  2370  0013                     	;# 
  2371  0014                     	;# 
  2372  0015                     	;# 
  2373  0016                     	;# 
  2374  0016                     	;# 
  2375  0017                     	;# 
  2376  0018                     	;# 
  2377  0019                     	;# 
  2378  001A                     	;# 
  2379  001A                     	;# 
  2380  001B                     	;# 
  2381  001B                     	;# 
  2382  001C                     	;# 
  2383  001D                     	;# 
  2384  001E                     	;# 
  2385  001F                     	;# 
  2386  008C                     	;# 
  2387  008D                     	;# 
  2388  008E                     	;# 
  2389  0090                     	;# 
  2390  0091                     	;# 
  2391  0092                     	;# 
  2392  0093                     	;# 
  2393  0094                     	;# 
  2394  0095                     	;# 
  2395  0096                     	;# 
  2396  0098                     	;# 
  2397  0099                     	;# 
  2398  009A                     	;# 
  2399  009B                     	;# 
  2400  009B                     	;# 
  2401  009C                     	;# 
  2402  009D                     	;# 
  2403  009E                     	;# 
  2404  009F                     	;# 
  2405  010C                     	;# 
  2406  010D                     	;# 
  2407  010E                     	;# 
  2408  0111                     	;# 
  2409  0112                     	;# 
  2410  0113                     	;# 
  2411  0114                     	;# 
  2412  0115                     	;# 
  2413  0116                     	;# 
  2414  0117                     	;# 
  2415  0118                     	;# 
  2416  0119                     	;# 
  2417  011C                     	;# 
  2418  018C                     	;# 
  2419  018D                     	;# 
  2420  018E                     	;# 
  2421  0191                     	;# 
  2422  0191                     	;# 
  2423  0192                     	;# 
  2424  0193                     	;# 
  2425  0193                     	;# 
  2426  0194                     	;# 
  2427  0195                     	;# 
  2428  0196                     	;# 
  2429  0197                     	;# 
  2430  0199                     	;# 
  2431  0199                     	;# 
  2432  0199                     	;# 
  2433  019A                     	;# 
  2434  019A                     	;# 
  2435  019A                     	;# 
  2436  019B                     	;# 
  2437  019B                     	;# 
  2438  019B                     	;# 
  2439  019B                     	;# 
  2440  019B                     	;# 
  2441  019C                     	;# 
  2442  019C                     	;# 
  2443  019C                     	;# 
  2444  019D                     	;# 
  2445  019D                     	;# 
  2446  019D                     	;# 
  2447  019E                     	;# 
  2448  019E                     	;# 
  2449  019E                     	;# 
  2450  019F                     	;# 
  2451  019F                     	;# 
  2452  019F                     	;# 
  2453  019F                     	;# 
  2454  019F                     	;# 
  2455  020C                     	;# 
  2456  020D                     	;# 
  2457  020E                     	;# 
  2458  0211                     	;# 
  2459  0211                     	;# 
  2460  0212                     	;# 
  2461  0212                     	;# 
  2462  0213                     	;# 
  2463  0213                     	;# 
  2464  0214                     	;# 
  2465  0214                     	;# 
  2466  0215                     	;# 
  2467  0215                     	;# 
  2468  0215                     	;# 
  2469  0215                     	;# 
  2470  0216                     	;# 
  2471  0216                     	;# 
  2472  0217                     	;# 
  2473  0217                     	;# 
  2474  028C                     	;# 
  2475  028D                     	;# 
  2476  028E                     	;# 
  2477  0291                     	;# 
  2478  0291                     	;# 
  2479  0292                     	;# 
  2480  0293                     	;# 
  2481  0294                     	;# 
  2482  0298                     	;# 
  2483  0298                     	;# 
  2484  0299                     	;# 
  2485  029A                     	;# 
  2486  029B                     	;# 
  2487  029E                     	;# 
  2488  030C                     	;# 
  2489  030D                     	;# 
  2490  030E                     	;# 
  2491  038C                     	;# 
  2492  038D                     	;# 
  2493  038E                     	;# 
  2494  0391                     	;# 
  2495  0392                     	;# 
  2496  0393                     	;# 
  2497  0394                     	;# 
  2498  0395                     	;# 
  2499  0396                     	;# 
  2500  0397                     	;# 
  2501  0398                     	;# 
  2502  0399                     	;# 
  2503  040E                     	;# 
  2504  0413                     	;# 
  2505  0413                     	;# 
  2506  0414                     	;# 
  2507  0414                     	;# 
  2508  0415                     	;# 
  2509  0416                     	;# 
  2510  0417                     	;# 
  2511  0418                     	;# 
  2512  041A                     	;# 
  2513  041A                     	;# 
  2514  041B                     	;# 
  2515  041B                     	;# 
  2516  041C                     	;# 
  2517  041D                     	;# 
  2518  041E                     	;# 
  2519  041F                     	;# 
  2520  0493                     	;# 
  2521  0494                     	;# 
  2522  0495                     	;# 
  2523  0496                     	;# 
  2524  049A                     	;# 
  2525  049B                     	;# 
  2526  049C                     	;# 
  2527  049D                     	;# 
  2528  058C                     	;# 
  2529  058C                     	;# 
  2530  058D                     	;# 
  2531  058E                     	;# 
  2532  058E                     	;# 
  2533  058F                     	;# 
  2534  0590                     	;# 
  2535  0590                     	;# 
  2536  0591                     	;# 
  2537  0592                     	;# 
  2538  0592                     	;# 
  2539  0593                     	;# 
  2540  0594                     	;# 
  2541  0594                     	;# 
  2542  0595                     	;# 
  2543  0596                     	;# 
  2544  0596                     	;# 
  2545  0597                     	;# 
  2546  0598                     	;# 
  2547  0599                     	;# 
  2548  059A                     	;# 
  2549  059B                     	;# 
  2550  059B                     	;# 
  2551  059C                     	;# 
  2552  059D                     	;# 
  2553  060C                     	;# 
  2554  060C                     	;# 
  2555  060D                     	;# 
  2556  060E                     	;# 
  2557  060F                     	;# 
  2558  060F                     	;# 
  2559  0610                     	;# 
  2560  0611                     	;# 
  2561  0612                     	;# 
  2562  0613                     	;# 
  2563  0614                     	;# 
  2564  0617                     	;# 
  2565  0618                     	;# 
  2566  0619                     	;# 
  2567  061A                     	;# 
  2568  061B                     	;# 
  2569  061C                     	;# 
  2570  0691                     	;# 
  2571  0692                     	;# 
  2572  0693                     	;# 
  2573  0694                     	;# 
  2574  0695                     	;# 
  2575  0696                     	;# 
  2576  0697                     	;# 
  2577  0699                     	;# 
  2578  069A                     	;# 
  2579  0711                     	;# 
  2580  0712                     	;# 
  2581  0713                     	;# 
  2582  0714                     	;# 
  2583  0715                     	;# 
  2584  0718                     	;# 
  2585  0718                     	;# 
  2586  0719                     	;# 
  2587  071A                     	;# 
  2588  071A                     	;# 
  2589  071B                     	;# 
  2590  071C                     	;# 
  2591  071D                     	;# 
  2592  0791                     	;# 
  2593  0791                     	;# 
  2594  0792                     	;# 
  2595  0793                     	;# 
  2596  0793                     	;# 
  2597  0794                     	;# 
  2598  0795                     	;# 
  2599  0795                     	;# 
  2600  0796                     	;# 
  2601  0797                     	;# 
  2602  0797                     	;# 
  2603  0798                     	;# 
  2604  0799                     	;# 
  2605  079A                     	;# 
  2606  080C                     	;# 
  2607  080C                     	;# 
  2608  080D                     	;# 
  2609  080E                     	;# 
  2610  080E                     	;# 
  2611  080F                     	;# 
  2612  0810                     	;# 
  2613  0810                     	;# 
  2614  0811                     	;# 
  2615  0812                     	;# 
  2616  0812                     	;# 
  2617  0813                     	;# 
  2618  0814                     	;# 
  2619  0815                     	;# 
  2620  0816                     	;# 
  2621  0817                     	;# 
  2622  0818                     	;# 
  2623  0819                     	;# 
  2624  081A                     	;# 
  2625  081A                     	;# 
  2626  081B                     	;# 
  2627  081C                     	;# 
  2628  081C                     	;# 
  2629  081D                     	;# 
  2630  088C                     	;# 
  2631  088D                     	;# 
  2632  088E                     	;# 
  2633  088F                     	;# 
  2634  088F                     	;# 
  2635  0890                     	;# 
  2636  0891                     	;# 
  2637  0892                     	;# 
  2638  0893                     	;# 
  2639  0893                     	;# 
  2640  0894                     	;# 
  2641  0895                     	;# 
  2642  0896                     	;# 
  2643  0897                     	;# 
  2644  0897                     	;# 
  2645  0898                     	;# 
  2646  0899                     	;# 
  2647  0D8C                     	;# 
  2648  0D8C                     	;# 
  2649  0D8D                     	;# 
  2650  0D8E                     	;# 
  2651  0D8F                     	;# 
  2652  0D8F                     	;# 
  2653  0D90                     	;# 
  2654  0D91                     	;# 
  2655  0D92                     	;# 
  2656  0D92                     	;# 
  2657  0D93                     	;# 
  2658  0D94                     	;# 
  2659  0D95                     	;# 
  2660  0D95                     	;# 
  2661  0D96                     	;# 
  2662  0D97                     	;# 
  2663  0D98                     	;# 
  2664  0D99                     	;# 
  2665  0D9A                     	;# 
  2666  0D9B                     	;# 
  2667  0D9C                     	;# 
  2668  0D9D                     	;# 
  2669  0D9E                     	;# 
  2670  0D9E                     	;# 
  2671  0D9F                     	;# 
  2672  0DA0                     	;# 
  2673  0DA1                     	;# 
  2674  0DA1                     	;# 
  2675  0DA2                     	;# 
  2676  0DA3                     	;# 
  2677  0DA4                     	;# 
  2678  0DA4                     	;# 
  2679  0DA5                     	;# 
  2680  0DA6                     	;# 
  2681  0DA7                     	;# 
  2682  0DA7                     	;# 
  2683  0DA8                     	;# 
  2684  0DA9                     	;# 
  2685  0DAA                     	;# 
  2686  0DAB                     	;# 
  2687  0DAC                     	;# 
  2688  0DAD                     	;# 
  2689  0DAE                     	;# 
  2690  0DAF                     	;# 
  2691  0E0F                     	;# 
  2692  0E10                     	;# 
  2693  0E11                     	;# 
  2694  0E12                     	;# 
  2695  0E13                     	;# 
  2696  0E14                     	;# 
  2697  0E15                     	;# 
  2698  0E16                     	;# 
  2699  0E17                     	;# 
  2700  0E18                     	;# 
  2701  0E19                     	;# 
  2702  0E1A                     	;# 
  2703  0E1B                     	;# 
  2704  0E1C                     	;# 
  2705  0E1D                     	;# 
  2706  0E1E                     	;# 
  2707  0E1F                     	;# 
  2708  0E20                     	;# 
  2709  0E21                     	;# 
  2710  0E22                     	;# 
  2711  0E23                     	;# 
  2712  0E24                     	;# 
  2713  0E25                     	;# 
  2714  0E26                     	;# 
  2715  0E27                     	;# 
  2716  0E28                     	;# 
  2717  0E29                     	;# 
  2718  0E2A                     	;# 
  2719  0E2B                     	;# 
  2720  0E2C                     	;# 
  2721  0E2D                     	;# 
  2722  0E2E                     	;# 
  2723  0E90                     	;# 
  2724  0E91                     	;# 
  2725  0E92                     	;# 
  2726  0E94                     	;# 
  2727  0E95                     	;# 
  2728  0E9C                     	;# 
  2729  0E9D                     	;# 
  2730  0E9E                     	;# 
  2731  0E9F                     	;# 
  2732  0EA0                     	;# 
  2733  0EA1                     	;# 
  2734  0EA2                     	;# 
  2735  0EA3                     	;# 
  2736  0EA4                     	;# 
  2737  0EA5                     	;# 
  2738  0EA6                     	;# 
  2739  0EA7                     	;# 
  2740  0F0F                     	;# 
  2741  0F10                     	;# 
  2742  0F11                     	;# 
  2743  0F12                     	;# 
  2744  0F13                     	;# 
  2745  0F14                     	;# 
  2746  0F15                     	;# 
  2747  0F16                     	;# 
  2748  0F17                     	;# 
  2749  0F18                     	;# 
  2750  0F19                     	;# 
  2751  0F1A                     	;# 
  2752  0F1B                     	;# 
  2753  0F1C                     	;# 
  2754  0F1D                     	;# 
  2755  0F1E                     	;# 
  2756  0F1F                     	;# 
  2757  0F20                     	;# 
  2758  0F21                     	;# 
  2759  0F22                     	;# 
  2760  0F23                     	;# 
  2761  0F24                     	;# 
  2762  0F25                     	;# 
  2763  0F26                     	;# 
  2764  0F27                     	;# 
  2765  0F28                     	;# 
  2766  0F29                     	;# 
  2767  0F2A                     	;# 
  2768  0F2B                     	;# 
  2769  0F2C                     	;# 
  2770  0F2D                     	;# 
  2771  0F2E                     	;# 
  2772  0F2F                     	;# 
  2773  0F30                     	;# 
  2774  0F31                     	;# 
  2775  0F32                     	;# 
  2776  0F33                     	;# 
  2777  0F34                     	;# 
  2778  0F35                     	;# 
  2779  0F36                     	;# 
  2780  0F37                     	;# 
  2781  0FE4                     	;# 
  2782  0FE5                     	;# 
  2783  0FE6                     	;# 
  2784  0FE7                     	;# 
  2785  0FE8                     	;# 
  2786  0FE9                     	;# 
  2787  0FEA                     	;# 
  2788  0FEB                     	;# 
  2789  0FED                     	;# 
  2790  0FEE                     	;# 
  2791  0FEF                     	;# 
  2792                           
  2793                           	psect	idataBANK1
  2794  04E9                     __pidataBANK1:	
  2795                           
  2796                           ;initializer for _fsmStateTable
  2797  04E9  34DA               	retlw	low _do_I2C_IDLE
  2798  04EA  3406               	retlw	high _do_I2C_IDLE
  2799  04EB  346C               	retlw	low _do_I2C_SEND_ADR_READ
  2800  04EC  3406               	retlw	high _do_I2C_SEND_ADR_READ
  2801  04ED  34A6               	retlw	low _do_I2C_SEND_ADR_WRITE
  2802  04EE  3406               	retlw	high _do_I2C_SEND_ADR_WRITE
  2803  04EF  3430               	retlw	low _do_I2C_TX
  2804  04F0  3402               	retlw	high _do_I2C_TX
  2805  04F1  3410               	retlw	low _do_I2C_RX
  2806  04F2  3403               	retlw	high _do_I2C_RX
  2807  04F3  34D0               	retlw	low _do_I2C_RCEN
  2808  04F4  3406               	retlw	high _do_I2C_RCEN
  2809  04F5  3490               	retlw	low _do_I2C_TX_EMPTY
  2810  04F6  3403               	retlw	high _do_I2C_TX_EMPTY
  2811  04F7  3413               	retlw	low _do_I2C_SEND_RESTART_READ
  2812  04F8  3407               	retlw	high _do_I2C_SEND_RESTART_READ
  2813  04F9  340B               	retlw	low _do_I2C_SEND_RESTART_WRITE
  2814  04FA  3407               	retlw	high _do_I2C_SEND_RESTART_WRITE
  2815  04FB  3403               	retlw	low _do_I2C_SEND_RESTART
  2816  04FC  3407               	retlw	high _do_I2C_SEND_RESTART
  2817  04FD  34FB               	retlw	low _do_I2C_SEND_STOP
  2818  04FE  3406               	retlw	high _do_I2C_SEND_STOP
  2819  04FF  34F3               	retlw	low _do_I2C_DO_ACK
  2820  0500  3406               	retlw	high _do_I2C_DO_ACK
  2821  0501  34EB               	retlw	low _do_I2C_DO_NACK_STOP
  2822  0502  3406               	retlw	high _do_I2C_DO_NACK_STOP
  2823  0503  34E3               	retlw	low _do_I2C_DO_NACK_RESTART
  2824  0504  3406               	retlw	high _do_I2C_DO_NACK_RESTART
  2825  0505  34B1               	retlw	low _do_I2C_RESET
  2826  0506  3406               	retlw	high _do_I2C_RESET
  2827  0507  34E6               	retlw	low _do_I2C_DO_ADDRESS_NACK
  2828  0508  3403               	retlw	high _do_I2C_DO_ADDRESS_NACK
  2829  000B                     _INTCONbits	set	11
  2830  0011                     _PIR2bits	set	17
  2831  0010                     _PIR1bits	set	16
  2832  0095                     _OPTION_REGbits	set	149
  2833  008E                     _TRISC	set	142
  2834  008D                     _TRISB	set	141
  2835  008C                     _TRISA	set	140
  2836  0098                     _OSCTUNE	set	152
  2837  0099                     _OSCCON	set	153
  2838  0091                     _PIE2bits	set	145
  2839  0090                     _PIE1bits	set	144
  2840  010E                     _LATC	set	270
  2841  010D                     _LATB	set	269
  2842  010C                     _LATA	set	268
  2843  0116                     _BORCON	set	278
  2844  018C                     _ANSELA	set	396
  2845  018D                     _ANSELB	set	397
  2846  018E                     _ANSELC	set	398
  2847  020E                     _WPUC	set	526
  2848  020C                     _WPUA	set	524
  2849  020D                     _WPUB	set	525
  2850  0214                     _SSP1STATbits	set	532
  2851  0213                     _SSP1MSK	set	531
  2852  0211                     _SSP1BUF	set	529
  2853  0216                     _SSP1CON2bits	set	534
  2854  0212                     _SSP1ADD	set	530
  2855  0216                     _SSP1CON2	set	534
  2856  0215                     _SSP1CON1	set	533
  2857  0214                     _SSP1STAT	set	532
  2858  0215                     _SSP1CON1bits	set	533
  2859  028E                     _ODCONC	set	654
  2860  028D                     _ODCONB	set	653
  2861  028C                     _ODCONA	set	652
  2862  0E21                     _SSPDATPPS	set	3617
  2863  0E20                     _SSPCLKPPS	set	3616
  2864  0E9C                     _RB4PPS	set	3740
  2865  0E9E                     _RB6PPS	set	3742
  2866                           
  2867                           ; #config settings
  2868  0000                     
  2869                           	psect	cinit
  2870  0029                     start_initialization:	
  2871  0029                     __initialization:	
  2872                           
  2873                           ; Initialize objects allocated to BANK1
  2874  0029  30E9               	movlw	low __pidataBANK1
  2875  002A  0084               	movwf	4
  2876  002B  3084               	movlw	(high __pidataBANK1)| (0+128)
  2877  002C  0085               	movwf	5
  2878  002D  30A0               	movlw	low __pdataBANK1
  2879  002E  0086               	movwf	6
  2880  002F  3000               	movlw	high __pdataBANK1
  2881  0030  0087               	movwf	7
  2882  0031  3020               	movlw	32
  2883  0032  3187  2738  3180   	fcall	init_ram
  2884                           
  2885                           ; Clear objects allocated to COMMON
  2886  0035  01FA               	clrf	__pbssCOMMON& (0+127)
  2887  0036  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
  2888  0037  01FC               	clrf	(__pbssCOMMON+2)& (0+127)
  2889  0038  01FD               	clrf	(__pbssCOMMON+3)& (0+127)
  2890                           
  2891                           ; Clear objects allocated to BANK0
  2892  0039  3020               	movlw	low __pbssBANK0
  2893  003A  0084               	movwf	4
  2894  003B  3000               	movlw	high __pbssBANK0
  2895  003C  0085               	movwf	5
  2896  003D  302D               	movlw	45
  2897  003E  3187  273E  3180   	fcall	clear_ram0
  2898                           
  2899                           ; Clear objects allocated to BANK1
  2900  0041  30C0               	movlw	low __pbssBANK1
  2901  0042  0084               	movwf	4
  2902  0043  3000               	movlw	high __pbssBANK1
  2903  0044  0085               	movwf	5
  2904  0045  3011               	movlw	17
  2905  0046  3187  273E         	fcall	clear_ram0
  2906  0048                     end_of_initialization:	
  2907                           ;End of C runtime variable initialization code
  2908                           
  2909  0048                     __end_of__initialization:	
  2910  0048  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2911  0049  0020               	movlb	0
  2912  004A  3181  2902         	ljmp	_main	;jump to C main() function
  2913                           
  2914                           	psect	bssCOMMON
  2915  007A                     __pbssCOMMON:	
  2916  007A                     _i2c_driver_i2cISR:	
  2917  007A                     	ds	2
  2918  007C                     _i2c_driver_busCollisionISR:	
  2919  007C                     	ds	2
  2920                           
  2921                           	psect	bssBANK0
  2922  0020                     __pbssBANK0:	
  2923  0020                     _i2c_status:	
  2924  0020                     	ds	29
  2925  003D                     _displaybuffer:	
  2926  003D                     	ds	16
  2927                           
  2928                           	psect	bssBANK1
  2929  00C0                     __pbssBANK1:	
  2930  00C0                     _writebuffer:	
  2931  00C0                     	ds	17
  2932                           
  2933                           	psect	dataBANK1
  2934  00A0                     __pdataBANK1:	
  2935  00A0                     _fsmStateTable:	
  2936  00A0                     	ds	32
  2937                           
  2938                           	psect	inittext
  2939  0738                     init_ram:	
  2940  0738  00FE               	movwf	126
  2941  0739                     initloop:	
  2942  0739  0012               	moviw fsr0++
  2943  073A  001E               	movwi fsr1++
  2944  073B  0BFE               	decfsz	126,f
  2945  073C  2F39               	goto	initloop
  2946  073D  3400               	retlw	0
  2947                           
  2948                           	psect	clrtext
  2949  073E                     clear_ram0:	
  2950                           ;	Called with FSR0 containing the base address, and
  2951                           ;	WREG with the size to clear
  2952                           
  2953  073E  0064               	clrwdt	;clear the watchdog before getting into this loop
  2954  073F                     clrloop0:	
  2955  073F  0180               	clrf	0	;clear RAM location pointed to by FSR
  2956  0740  3101               	addfsr 0,1
  2957  0741  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2958  0742  2F3F               	goto	clrloop0	;have we reached the end yet?
  2959  0743  3400               	retlw	0	;all done for this memory range, return
  2960                           
  2961                           	psect	cstackCOMMON
  2962  0070                     __pcstackCOMMON:	
  2963  0070                     ?_mssp_IRQisEnabled:	
  2964  0070                     ?_i2c_driver_open:	
  2965                           ; 1 bit 
  2966                           
  2967  0070                     ?_i2c_driver_isNACK:	
  2968                           ; 1 bit 
  2969                           
  2970  0070                     ?i1_i2c_driver_isNACK:	
  2971                           ; 1 bit 
  2972                           
  2973  0070                     ?_PIN_MANAGER_Initialize:	
  2974                           ; 1 bit 
  2975                           
  2976  0070                     ?_OSCILLATOR_Initialize:	
  2977                           ; 1 bytes @ 0x0
  2978                           
  2979  0070                     ?_i2c_busCollisionISR:	
  2980                           ; 1 bytes @ 0x0
  2981                           
  2982  0070                     ??_i2c_busCollisionISR:	
  2983                           ; 1 bytes @ 0x0
  2984                           
  2985  0070                     ?_i2c_ISR:	
  2986                           ; 1 bytes @ 0x0
  2987                           
  2988  0070                     ?_i2c_poller:	
  2989                           ; 1 bytes @ 0x0
  2990                           
  2991  0070                     ?_mssp_disableIRQ:	
  2992                           ; 1 bytes @ 0x0
  2993                           
  2994  0070                     ?_mssp_clearIRQ:	
  2995                           ; 1 bytes @ 0x0
  2996                           
  2997  0070                     ?_mssp_setIRQ:	
  2998                           ; 1 bytes @ 0x0
  2999                           
  3000  0070                     ?_mssp_waitForEvent:	
  3001                           ; 1 bytes @ 0x0
  3002                           
  3003  0070                     ?_i2c_driver_resetBus:	
  3004                           ; 1 bytes @ 0x0
  3005                           
  3006  0070                     ?_i2c_driver_start:	
  3007                           ; 1 bytes @ 0x0
  3008                           
  3009  0070                     ?_i2c_driver_restart:	
  3010                           ; 1 bytes @ 0x0
  3011                           
  3012  0070                     ?_i2c_driver_stop:	
  3013                           ; 1 bytes @ 0x0
  3014                           
  3015  0070                     ?_i2c_driver_startRX:	
  3016                           ; 1 bytes @ 0x0
  3017                           
  3018  0070                     ?_i2c_driver_getRXData:	
  3019                           ; 1 bytes @ 0x0
  3020                           
  3021  0070                     ?_i2c_driver_TXData:	
  3022                           ; 1 bytes @ 0x0
  3023                           
  3024  0070                     ?_i2c_driver_sendACK:	
  3025                           ; 1 bytes @ 0x0
  3026                           
  3027  0070                     ?_i2c_driver_sendNACK:	
  3028                           ; 1 bytes @ 0x0
  3029                           
  3030  0070                     ?_i2c_driver_clearBusCollision:	
  3031                           ; 1 bytes @ 0x0
  3032                           
  3033  0070                     ??_i2c_driver_clearBusCollision:	
  3034                           ; 1 bytes @ 0x0
  3035                           
  3036  0070                     ?_INTERRUPT_InterruptManager:	
  3037                           ; 1 bytes @ 0x0
  3038                           
  3039  0070                     ?_SYSTEM_Initialize:	
  3040                           ; 1 bytes @ 0x0
  3041                           
  3042  0070                     ?_writeDisplay:	
  3043                           ; 1 bytes @ 0x0
  3044                           
  3045  0070                     ?_main:	
  3046                           ; 1 bytes @ 0x0
  3047                           
  3048  0070                     ?_i2c_open:	
  3049                           ; 1 bytes @ 0x0
  3050                           
  3051  0070                     ?_i2c_close:	
  3052                           ; 1 bytes @ 0x0
  3053                           
  3054  0070                     ?_i2c_masterOperation:	
  3055                           ; 1 bytes @ 0x0
  3056                           
  3057  0070                     ?_i2c_masterWrite:	
  3058                           ; 1 bytes @ 0x0
  3059                           
  3060  0070                     ?_do_I2C_RESET:	
  3061                           ; 1 bytes @ 0x0
  3062                           
  3063  0070                     ?_do_I2C_IDLE:	
  3064                           ; 1 bytes @ 0x0
  3065                           
  3066  0070                     ?_do_I2C_SEND_RESTART_READ:	
  3067                           ; 1 bytes @ 0x0
  3068                           
  3069  0070                     ?_do_I2C_SEND_RESTART_WRITE:	
  3070                           ; 1 bytes @ 0x0
  3071                           
  3072  0070                     ?_do_I2C_SEND_RESTART:	
  3073                           ; 1 bytes @ 0x0
  3074                           
  3075  0070                     ?_do_I2C_SEND_STOP:	
  3076                           ; 1 bytes @ 0x0
  3077                           
  3078  0070                     ?_do_I2C_SEND_ADR_READ:	
  3079                           ; 1 bytes @ 0x0
  3080                           
  3081  0070                     ?_do_I2C_SEND_ADR_WRITE:	
  3082                           ; 1 bytes @ 0x0
  3083                           
  3084  0070                     ?_do_I2C_RCEN:	
  3085                           ; 1 bytes @ 0x0
  3086                           
  3087  0070                     ?_do_I2C_DO_ACK:	
  3088                           ; 1 bytes @ 0x0
  3089                           
  3090  0070                     ?_do_I2C_DO_NACK_STOP:	
  3091                           ; 1 bytes @ 0x0
  3092                           
  3093  0070                     ?_do_I2C_DO_NACK_RESTART:	
  3094                           ; 1 bytes @ 0x0
  3095                           
  3096  0070                     ?_do_I2C_DO_ADDRESS_NACK:	
  3097                           ; 1 bytes @ 0x0
  3098                           
  3099  0070                     ?_do_I2C_TX:	
  3100                           ; 1 bytes @ 0x0
  3101                           
  3102  0070                     ?_do_I2C_RX:	
  3103                           ; 1 bytes @ 0x0
  3104                           
  3105  0070                     ?_do_I2C_TX_EMPTY:	
  3106                           ; 1 bytes @ 0x0
  3107                           
  3108  0070                     ?i1_mssp_clearIRQ:	
  3109                           ; 1 bytes @ 0x0
  3110                           
  3111  0070                     ??i1_mssp_clearIRQ:	
  3112                           ; 1 bytes @ 0x0
  3113                           
  3114  0070                     ?i1_mssp_setIRQ:	
  3115                           ; 1 bytes @ 0x0
  3116                           
  3117  0070                     ??i1_mssp_setIRQ:	
  3118                           ; 1 bytes @ 0x0
  3119                           
  3120  0070                     ?i1_i2c_driver_resetBus:	
  3121                           ; 1 bytes @ 0x0
  3122                           
  3123  0070                     ??i1_i2c_driver_resetBus:	
  3124                           ; 1 bytes @ 0x0
  3125                           
  3126  0070                     ?i1_i2c_driver_restart:	
  3127                           ; 1 bytes @ 0x0
  3128                           
  3129  0070                     ??i1_i2c_driver_restart:	
  3130                           ; 1 bytes @ 0x0
  3131                           
  3132  0070                     ?i1_i2c_driver_stop:	
  3133                           ; 1 bytes @ 0x0
  3134                           
  3135  0070                     ??i1_i2c_driver_stop:	
  3136                           ; 1 bytes @ 0x0
  3137                           
  3138  0070                     ??i1_i2c_driver_isNACK:	
  3139                           ; 1 bytes @ 0x0
  3140                           
  3141  0070                     ?i1_i2c_driver_startRX:	
  3142                           ; 1 bytes @ 0x0
  3143                           
  3144  0070                     ??i1_i2c_driver_startRX:	
  3145                           ; 1 bytes @ 0x0
  3146                           
  3147  0070                     ?i1_i2c_driver_getRXData:	
  3148                           ; 1 bytes @ 0x0
  3149                           
  3150  0070                     ??i1_i2c_driver_getRXData:	
  3151                           ; 1 bytes @ 0x0
  3152                           
  3153  0070                     ?i1_i2c_driver_TXData:	
  3154                           ; 1 bytes @ 0x0
  3155                           
  3156  0070                     ??i1_i2c_driver_TXData:	
  3157                           ; 1 bytes @ 0x0
  3158                           
  3159  0070                     ?i1_i2c_driver_sendACK:	
  3160                           ; 1 bytes @ 0x0
  3161                           
  3162  0070                     ??i1_i2c_driver_sendACK:	
  3163                           ; 1 bytes @ 0x0
  3164                           
  3165  0070                     ?i1_i2c_driver_sendNACK:	
  3166                           ; 1 bytes @ 0x0
  3167                           
  3168  0070                     ??i1_i2c_driver_sendNACK:	
  3169                           ; 1 bytes @ 0x0
  3170                           
  3171  0070                     ?i1_i2c_setBuffer:	
  3172                           ; 1 bytes @ 0x0
  3173                           
  3174  0070                     ?i1_do_I2C_RESET:	
  3175                           ; 1 bytes @ 0x0
  3176                           
  3177  0070                     ??i1_do_I2C_RESET:	
  3178                           ; 1 bytes @ 0x0
  3179                           
  3180  0070                     ?i1_do_I2C_IDLE:	
  3181                           ; 1 bytes @ 0x0
  3182                           
  3183  0070                     ??i1_do_I2C_IDLE:	
  3184                           ; 1 bytes @ 0x0
  3185                           
  3186  0070                     ?i1_do_I2C_SEND_RESTART_READ:	
  3187                           ; 1 bytes @ 0x0
  3188                           
  3189  0070                     ??i1_do_I2C_SEND_RESTART_READ:	
  3190                           ; 1 bytes @ 0x0
  3191                           
  3192  0070                     ?i1_do_I2C_SEND_RESTART_WRITE:	
  3193                           ; 1 bytes @ 0x0
  3194                           
  3195  0070                     ??i1_do_I2C_SEND_RESTART_WRITE:	
  3196                           ; 1 bytes @ 0x0
  3197                           
  3198  0070                     ?i1_do_I2C_SEND_RESTART:	
  3199                           ; 1 bytes @ 0x0
  3200                           
  3201  0070                     ??i1_do_I2C_SEND_RESTART:	
  3202                           ; 1 bytes @ 0x0
  3203                           
  3204  0070                     ?i1_do_I2C_SEND_STOP:	
  3205                           ; 1 bytes @ 0x0
  3206                           
  3207  0070                     ??i1_do_I2C_SEND_STOP:	
  3208                           ; 1 bytes @ 0x0
  3209                           
  3210  0070                     ?i1_do_I2C_SEND_ADR_READ:	
  3211                           ; 1 bytes @ 0x0
  3212                           
  3213  0070                     ?i1_do_I2C_SEND_ADR_WRITE:	
  3214                           ; 1 bytes @ 0x0
  3215                           
  3216  0070                     ?i1_do_I2C_RCEN:	
  3217                           ; 1 bytes @ 0x0
  3218                           
  3219  0070                     ??i1_do_I2C_RCEN:	
  3220                           ; 1 bytes @ 0x0
  3221                           
  3222  0070                     ?i1_do_I2C_DO_ACK:	
  3223                           ; 1 bytes @ 0x0
  3224                           
  3225  0070                     ??i1_do_I2C_DO_ACK:	
  3226                           ; 1 bytes @ 0x0
  3227                           
  3228  0070                     ?i1_do_I2C_DO_NACK_STOP:	
  3229                           ; 1 bytes @ 0x0
  3230                           
  3231  0070                     ??i1_do_I2C_DO_NACK_STOP:	
  3232                           ; 1 bytes @ 0x0
  3233                           
  3234  0070                     ?i1_do_I2C_DO_NACK_RESTART:	
  3235                           ; 1 bytes @ 0x0
  3236                           
  3237  0070                     ??i1_do_I2C_DO_NACK_RESTART:	
  3238                           ; 1 bytes @ 0x0
  3239                           
  3240  0070                     ?i1_do_I2C_DO_ADDRESS_NACK:	
  3241                           ; 1 bytes @ 0x0
  3242                           
  3243  0070                     ??i1_do_I2C_DO_ADDRESS_NACK:	
  3244                           ; 1 bytes @ 0x0
  3245                           
  3246  0070                     ?i1_do_I2C_TX:	
  3247                           ; 1 bytes @ 0x0
  3248                           
  3249  0070                     ?i1_do_I2C_RX:	
  3250                           ; 1 bytes @ 0x0
  3251                           
  3252  0070                     ??i1_do_I2C_RX:	
  3253                           ; 1 bytes @ 0x0
  3254                           
  3255  0070                     ?i1_do_I2C_TX_EMPTY:	
  3256                           ; 1 bytes @ 0x0
  3257                           
  3258  0070                     ??i1_do_I2C_TX_EMPTY:	
  3259                           ; 1 bytes @ 0x0
  3260                           
  3261  0070                     ?i1_i2c_ISR:	
  3262                           ; 1 bytes @ 0x0
  3263                           
  3264  0070                     ?i1_setCallBack:	
  3265                           ; 1 bytes @ 0x0
  3266                           
  3267  0070                     i1i2c_driver_TXData@d:	
  3268                           ; 1 bytes @ 0x0
  3269                           
  3270  0070                     i1i2c_setBuffer@bufferSize:	
  3271                           ; 1 bytes @ 0x0
  3272                           
  3273  0070                     i1setCallBack@cb:	
  3274                           ; 2 bytes @ 0x0
  3275                           
  3276                           
  3277                           ; 2 bytes @ 0x0
  3278  0070                     	ds	1
  3279  0071                     ??i1_do_I2C_SEND_ADR_READ:	
  3280  0071                     ??i1_do_I2C_SEND_ADR_WRITE:	
  3281                           ; 1 bytes @ 0x1
  3282                           
  3283  0071                     ??i1_do_I2C_TX:	
  3284                           ; 1 bytes @ 0x1
  3285                           
  3286                           
  3287                           ; 1 bytes @ 0x1
  3288  0071                     	ds	1
  3289  0072                     ??i1_i2c_setBuffer:	
  3290  0072                     i1setCallBack@p:	
  3291                           ; 1 bytes @ 0x2
  3292                           
  3293  0072                     i1_do_I2C_TX$763:	
  3294                           ; 1 bytes @ 0x2
  3295                           
  3296                           
  3297                           ; 2 bytes @ 0x2
  3298  0072                     	ds	1
  3299  0073                     ??i1_setCallBack:	
  3300  0073                     i1i2c_setBuffer@buffer:	
  3301                           ; 1 bytes @ 0x3
  3302                           
  3303                           
  3304                           ; 1 bytes @ 0x3
  3305  0073                     	ds	1
  3306  0074                     ??i1_i2c_ISR:	
  3307  0074                     i1setCallBack@idx:	
  3308                           ; 1 bytes @ 0x4
  3309                           
  3310                           
  3311                           ; 1 bytes @ 0x4
  3312  0074                     	ds	1
  3313  0075                     ??_INTERRUPT_InterruptManager:	
  3314  0075                     ?i1_i2c_setDataCompleteCallback:	
  3315                           ; 1 bytes @ 0x5
  3316                           
  3317  0075                     i1i2c_setDataCompleteCallback@cb:	
  3318                           ; 1 bytes @ 0x5
  3319                           
  3320                           
  3321                           ; 2 bytes @ 0x5
  3322  0075                     	ds	2
  3323  0077                     i1i2c_setDataCompleteCallback@p:	
  3324                           
  3325                           ; 1 bytes @ 0x7
  3326  0077                     	ds	1
  3327  0078                     ??i1_i2c_setDataCompleteCallback:	
  3328                           
  3329                           ; 1 bytes @ 0x8
  3330  0078                     	ds	1
  3331  0079                     ?i1_returnStop:	
  3332  0079                     ?i1_returnReset:	
  3333                           ; 1 bytes @ 0x9
  3334                           
  3335  0079                     ?i1_i2c_restartWrite:	
  3336                           ; 1 bytes @ 0x9
  3337                           
  3338  0079                     ?i1_wr1RegCompleteHandler:	
  3339                           ; 1 bytes @ 0x9
  3340                           
  3341  0079                     ?i1_rd1RegCompleteHandler:	
  3342                           ; 1 bytes @ 0x9
  3343                           
  3344  0079                     ?i1_rd2RegCompleteHandler:	
  3345                           ; 1 bytes @ 0x9
  3346                           
  3347  0079                     ?i1_wr2RegCompleteHandler:	
  3348                           ; 1 bytes @ 0x9
  3349                           
  3350  0079                     ?i1_rdBlkRegCompleteHandler:	
  3351                           ; 1 bytes @ 0x9
  3352                           
  3353  0079                     i1returnStop@p:	
  3354                           ; 1 bytes @ 0x9
  3355                           
  3356  0079                     i1returnReset@p:	
  3357                           ; 1 bytes @ 0x9
  3358                           
  3359  0079                     i1i2c_restartWrite@p:	
  3360                           ; 1 bytes @ 0x9
  3361                           
  3362  0079                     i1wr1RegCompleteHandler@p:	
  3363                           ; 1 bytes @ 0x9
  3364                           
  3365  0079                     i1rd1RegCompleteHandler@p:	
  3366                           ; 1 bytes @ 0x9
  3367                           
  3368  0079                     i1rd2RegCompleteHandler@p:	
  3369                           ; 1 bytes @ 0x9
  3370                           
  3371  0079                     i1wr2RegCompleteHandler@p:	
  3372                           ; 1 bytes @ 0x9
  3373                           
  3374  0079                     i1rdBlkRegCompleteHandler@p:	
  3375                           ; 1 bytes @ 0x9
  3376                           
  3377                           
  3378                           ; 1 bytes @ 0x9
  3379  0079                     	ds	1
  3380  007A                     ??i1_returnStop:	
  3381  007A                     ??i1_returnReset:	
  3382                           ; 1 bytes @ 0xA
  3383                           
  3384  007A                     ??i1_i2c_restartWrite:	
  3385                           ; 1 bytes @ 0xA
  3386                           
  3387  007A                     ??i1_wr1RegCompleteHandler:	
  3388                           ; 1 bytes @ 0xA
  3389                           
  3390  007A                     ??i1_rd1RegCompleteHandler:	
  3391                           ; 1 bytes @ 0xA
  3392                           
  3393  007A                     ??i1_rd2RegCompleteHandler:	
  3394                           ; 1 bytes @ 0xA
  3395                           
  3396  007A                     ??i1_wr2RegCompleteHandler:	
  3397                           ; 1 bytes @ 0xA
  3398                           
  3399  007A                     ??i1_rdBlkRegCompleteHandler:	
  3400                           ; 1 bytes @ 0xA
  3401                           
  3402                           
  3403                           	psect	cstackBANK0
  3404  004D                     __pcstackBANK0:	
  3405                           ; 1 bytes @ 0xA
  3406                           
  3407  004D                     ??_PIN_MANAGER_Initialize:	
  3408  004D                     ??_OSCILLATOR_Initialize:	
  3409                           ; 1 bytes @ 0x0
  3410                           
  3411  004D                     ?_setCallBack:	
  3412                           ; 1 bytes @ 0x0
  3413                           
  3414  004D                     ??_mssp_IRQisEnabled:	
  3415                           ; 1 bytes @ 0x0
  3416                           
  3417  004D                     ??_mssp_disableIRQ:	
  3418                           ; 1 bytes @ 0x0
  3419                           
  3420  004D                     ??_mssp_clearIRQ:	
  3421                           ; 1 bytes @ 0x0
  3422                           
  3423  004D                     ??_mssp_setIRQ:	
  3424                           ; 1 bytes @ 0x0
  3425                           
  3426  004D                     ??_mssp_waitForEvent:	
  3427                           ; 1 bytes @ 0x0
  3428                           
  3429  004D                     ??_i2c_driver_open:	
  3430                           ; 1 bytes @ 0x0
  3431                           
  3432  004D                     ??_i2c_driver_resetBus:	
  3433                           ; 1 bytes @ 0x0
  3434                           
  3435  004D                     ??_i2c_driver_start:	
  3436                           ; 1 bytes @ 0x0
  3437                           
  3438  004D                     ??_i2c_driver_restart:	
  3439                           ; 1 bytes @ 0x0
  3440                           
  3441  004D                     ??_i2c_driver_stop:	
  3442                           ; 1 bytes @ 0x0
  3443                           
  3444  004D                     ??_i2c_driver_isNACK:	
  3445                           ; 1 bytes @ 0x0
  3446                           
  3447  004D                     ??_i2c_driver_startRX:	
  3448                           ; 1 bytes @ 0x0
  3449                           
  3450  004D                     ??_i2c_driver_getRXData:	
  3451                           ; 1 bytes @ 0x0
  3452                           
  3453  004D                     ??_i2c_driver_TXData:	
  3454                           ; 1 bytes @ 0x0
  3455                           
  3456  004D                     ??_i2c_driver_sendACK:	
  3457                           ; 1 bytes @ 0x0
  3458                           
  3459  004D                     ??_i2c_driver_sendNACK:	
  3460                           ; 1 bytes @ 0x0
  3461                           
  3462  004D                     ?_i2c_driver_setBusCollisionISR:	
  3463                           ; 1 bytes @ 0x0
  3464                           
  3465  004D                     ?_i2c_driver_setI2cISR:	
  3466                           ; 1 bytes @ 0x0
  3467                           
  3468  004D                     ??_SYSTEM_Initialize:	
  3469                           ; 1 bytes @ 0x0
  3470                           
  3471  004D                     ?_drawPixel:	
  3472                           ; 1 bytes @ 0x0
  3473                           
  3474  004D                     ??_i2c_close:	
  3475                           ; 1 bytes @ 0x0
  3476                           
  3477  004D                     ?_i2c_setBuffer:	
  3478                           ; 1 bytes @ 0x0
  3479                           
  3480  004D                     ??_do_I2C_RESET:	
  3481                           ; 1 bytes @ 0x0
  3482                           
  3483  004D                     ??_do_I2C_IDLE:	
  3484                           ; 1 bytes @ 0x0
  3485                           
  3486  004D                     ??_do_I2C_SEND_RESTART_READ:	
  3487                           ; 1 bytes @ 0x0
  3488                           
  3489  004D                     ??_do_I2C_SEND_RESTART_WRITE:	
  3490                           ; 1 bytes @ 0x0
  3491                           
  3492  004D                     ??_do_I2C_SEND_RESTART:	
  3493                           ; 1 bytes @ 0x0
  3494                           
  3495  004D                     ??_do_I2C_SEND_STOP:	
  3496                           ; 1 bytes @ 0x0
  3497                           
  3498  004D                     ??_do_I2C_RCEN:	
  3499                           ; 1 bytes @ 0x0
  3500                           
  3501  004D                     ??_do_I2C_DO_ACK:	
  3502                           ; 1 bytes @ 0x0
  3503                           
  3504  004D                     ??_do_I2C_DO_NACK_STOP:	
  3505                           ; 1 bytes @ 0x0
  3506                           
  3507  004D                     ??_do_I2C_DO_NACK_RESTART:	
  3508                           ; 1 bytes @ 0x0
  3509                           
  3510  004D                     ??_do_I2C_DO_ADDRESS_NACK:	
  3511                           ; 1 bytes @ 0x0
  3512                           
  3513  004D                     ??_do_I2C_RX:	
  3514                           ; 1 bytes @ 0x0
  3515                           
  3516  004D                     ??_do_I2C_TX_EMPTY:	
  3517                           ; 1 bytes @ 0x0
  3518                           
  3519  004D                     ?___awdiv:	
  3520                           ; 1 bytes @ 0x0
  3521                           
  3522  004D                     mssp_waitForEvent@timeout:	
  3523                           ; 2 bytes @ 0x0
  3524                           
  3525  004D                     i2c_driver_TXData@d:	
  3526                           ; 1 bytes @ 0x0
  3527                           
  3528  004D                     drawPixel@y:	
  3529                           ; 1 bytes @ 0x0
  3530                           
  3531  004D                     i2c_driver_setBusCollisionISR@f:	
  3532                           ; 1 bytes @ 0x0
  3533                           
  3534  004D                     i2c_driver_setI2cISR@f:	
  3535                           ; 2 bytes @ 0x0
  3536                           
  3537  004D                     i2c_setBuffer@bufferSize:	
  3538                           ; 2 bytes @ 0x0
  3539                           
  3540  004D                     setCallBack@cb:	
  3541                           ; 2 bytes @ 0x0
  3542                           
  3543  004D                     ___awdiv@divisor:	
  3544                           ; 2 bytes @ 0x0
  3545                           
  3546                           
  3547                           ; 2 bytes @ 0x0
  3548  004D                     	ds	1
  3549  004E                     ??_do_I2C_SEND_ADR_READ:	
  3550  004E                     ??_do_I2C_SEND_ADR_WRITE:	
  3551                           ; 1 bytes @ 0x1
  3552                           
  3553  004E                     ??_do_I2C_TX:	
  3554                           ; 1 bytes @ 0x1
  3555                           
  3556  004E                     drawPixel@color:	
  3557                           ; 1 bytes @ 0x1
  3558                           
  3559  004E                     i2c_close@ret:	
  3560                           ; 1 bytes @ 0x1
  3561                           
  3562                           
  3563                           ; 1 bytes @ 0x1
  3564  004E                     	ds	1
  3565  004F                     ??_i2c_driver_setBusCollisionISR:	
  3566  004F                     ??_i2c_driver_setI2cISR:	
  3567                           ; 1 bytes @ 0x2
  3568                           
  3569  004F                     ??_drawPixel:	
  3570                           ; 1 bytes @ 0x2
  3571                           
  3572  004F                     ??_i2c_open:	
  3573                           ; 1 bytes @ 0x2
  3574                           
  3575  004F                     ??_i2c_setBuffer:	
  3576                           ; 1 bytes @ 0x2
  3577                           
  3578  004F                     setCallBack@p:	
  3579                           ; 1 bytes @ 0x2
  3580                           
  3581  004F                     _do_I2C_TX$763:	
  3582                           ; 1 bytes @ 0x2
  3583                           
  3584  004F                     ___awdiv@dividend:	
  3585                           ; 2 bytes @ 0x2
  3586                           
  3587                           
  3588                           ; 2 bytes @ 0x2
  3589  004F                     	ds	1
  3590  0050                     ??_setCallBack:	
  3591  0050                     i2c_open@address:	
  3592                           ; 1 bytes @ 0x3
  3593                           
  3594  0050                     i2c_setBuffer@buffer:	
  3595                           ; 1 bytes @ 0x3
  3596                           
  3597                           
  3598                           ; 1 bytes @ 0x3
  3599  0050                     	ds	1
  3600  0051                     ??_i2c_ISR:	
  3601  0051                     ??___awdiv:	
  3602                           ; 1 bytes @ 0x4
  3603                           
  3604  0051                     i2c_open@ret:	
  3605                           ; 1 bytes @ 0x4
  3606                           
  3607  0051                     setCallBack@idx:	
  3608                           ; 1 bytes @ 0x4
  3609                           
  3610                           
  3611                           ; 1 bytes @ 0x4
  3612  0051                     	ds	1
  3613  0052                     ??_i2c_poller:	
  3614  0052                     ?_i2c_setDataCompleteCallback:	
  3615                           ; 1 bytes @ 0x5
  3616                           
  3617  0052                     ?_i2c_setAddressNACKCallback:	
  3618                           ; 1 bytes @ 0x5
  3619                           
  3620  0052                     ??_i2c_masterOperation:	
  3621                           ; 1 bytes @ 0x5
  3622                           
  3623  0052                     ___awdiv@counter:	
  3624                           ; 1 bytes @ 0x5
  3625                           
  3626  0052                     i2c_setDataCompleteCallback@cb:	
  3627                           ; 1 bytes @ 0x5
  3628                           
  3629  0052                     i2c_setAddressNACKCallback@cb:	
  3630                           ; 2 bytes @ 0x5
  3631                           
  3632                           
  3633                           ; 2 bytes @ 0x5
  3634  0052                     	ds	1
  3635  0053                     i2c_masterOperation@read:	
  3636  0053                     ___awdiv@sign:	
  3637                           ; 1 bytes @ 0x6
  3638                           
  3639                           
  3640                           ; 1 bytes @ 0x6
  3641  0053                     	ds	1
  3642  0054                     i2c_setDataCompleteCallback@p:	
  3643  0054                     i2c_setAddressNACKCallback@p:	
  3644                           ; 1 bytes @ 0x7
  3645                           
  3646  0054                     i2c_masterOperation@ret:	
  3647                           ; 1 bytes @ 0x7
  3648                           
  3649  0054                     ___awdiv@quotient:	
  3650                           ; 1 bytes @ 0x7
  3651                           
  3652                           
  3653                           ; 2 bytes @ 0x7
  3654  0054                     	ds	1
  3655  0055                     ??_i2c_setDataCompleteCallback:	
  3656  0055                     ??_i2c_setAddressNACKCallback:	
  3657                           ; 1 bytes @ 0x8
  3658                           
  3659  0055                     ??_i2c_masterWrite:	
  3660                           ; 1 bytes @ 0x8
  3661                           
  3662  0055                     drawPixel@x:	
  3663                           ; 1 bytes @ 0x8
  3664                           
  3665                           
  3666                           ; 1 bytes @ 0x8
  3667  0055                     	ds	1
  3668  0056                     ?_i2c_writeNBytes:	
  3669  0056                     ?_returnStop:	
  3670                           ; 1 bytes @ 0x9
  3671                           
  3672  0056                     ?_returnReset:	
  3673                           ; 1 bytes @ 0x9
  3674                           
  3675  0056                     ?_i2c_restartWrite:	
  3676                           ; 1 bytes @ 0x9
  3677                           
  3678  0056                     ?_wr1RegCompleteHandler:	
  3679                           ; 1 bytes @ 0x9
  3680                           
  3681  0056                     ?_rd1RegCompleteHandler:	
  3682                           ; 1 bytes @ 0x9
  3683                           
  3684  0056                     ?_rd2RegCompleteHandler:	
  3685                           ; 1 bytes @ 0x9
  3686                           
  3687  0056                     ?_wr2RegCompleteHandler:	
  3688                           ; 1 bytes @ 0x9
  3689                           
  3690  0056                     ?_rdBlkRegCompleteHandler:	
  3691                           ; 1 bytes @ 0x9
  3692                           
  3693  0056                     returnStop@p:	
  3694                           ; 1 bytes @ 0x9
  3695                           
  3696  0056                     returnReset@p:	
  3697                           ; 1 bytes @ 0x9
  3698                           
  3699  0056                     i2c_restartWrite@p:	
  3700                           ; 1 bytes @ 0x9
  3701                           
  3702  0056                     wr1RegCompleteHandler@p:	
  3703                           ; 1 bytes @ 0x9
  3704                           
  3705  0056                     i2c_writeNBytes@data:	
  3706                           ; 1 bytes @ 0x9
  3707                           
  3708  0056                     rd1RegCompleteHandler@p:	
  3709                           ; 1 bytes @ 0x9
  3710                           
  3711  0056                     rd2RegCompleteHandler@p:	
  3712                           ; 1 bytes @ 0x9
  3713                           
  3714  0056                     wr2RegCompleteHandler@p:	
  3715                           ; 1 bytes @ 0x9
  3716                           
  3717  0056                     rdBlkRegCompleteHandler@p:	
  3718                           ; 1 bytes @ 0x9
  3719                           
  3720                           
  3721                           ; 1 bytes @ 0x9
  3722  0056                     	ds	1
  3723  0057                     ??_returnStop:	
  3724  0057                     ??_returnReset:	
  3725                           ; 1 bytes @ 0xA
  3726                           
  3727  0057                     ??_i2c_restartWrite:	
  3728                           ; 1 bytes @ 0xA
  3729                           
  3730  0057                     ??_wr1RegCompleteHandler:	
  3731                           ; 1 bytes @ 0xA
  3732                           
  3733  0057                     ??_rd1RegCompleteHandler:	
  3734                           ; 1 bytes @ 0xA
  3735                           
  3736  0057                     ??_rd2RegCompleteHandler:	
  3737                           ; 1 bytes @ 0xA
  3738                           
  3739  0057                     ??_wr2RegCompleteHandler:	
  3740                           ; 1 bytes @ 0xA
  3741                           
  3742  0057                     ??_rdBlkRegCompleteHandler:	
  3743                           ; 1 bytes @ 0xA
  3744                           
  3745  0057                     i2c_writeNBytes@len:	
  3746                           ; 1 bytes @ 0xA
  3747                           
  3748                           
  3749                           ; 2 bytes @ 0xA
  3750  0057                     	ds	2
  3751  0059                     ??_i2c_writeNBytes:	
  3752  0059                     i2c_writeNBytes@address:	
  3753                           ; 1 bytes @ 0xC
  3754                           
  3755                           
  3756                           ; 1 bytes @ 0xC
  3757  0059                     	ds	1
  3758  005A                     ??_writeDisplay:	
  3759                           
  3760                           ; 1 bytes @ 0xD
  3761  005A                     	ds	5
  3762  005F                     writeDisplay@i:	
  3763                           
  3764                           ; 1 bytes @ 0x12
  3765  005F                     	ds	1
  3766  0060                     ??_main:	
  3767                           
  3768                           ; 1 bytes @ 0x13
  3769  0060                     	ds	2
  3770  0062                     main@y:	
  3771                           
  3772                           ; 2 bytes @ 0x15
  3773  0062                     	ds	2
  3774  0064                     main@i:	
  3775                           
  3776                           ; 1 bytes @ 0x17
  3777  0064                     	ds	1
  3778  0065                     main@i_466:	
  3779                           
  3780                           ; 1 bytes @ 0x18
  3781  0065                     	ds	1
  3782  0066                     main@x:	
  3783                           
  3784                           ; 2 bytes @ 0x19
  3785  0066                     	ds	2
  3786                           
  3787                           	psect	maintext
  3788  0102                     __pmaintext:	
  3789 ;;
  3790 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  3791 ;;
  3792 ;; *************** function _main *****************
  3793 ;; Defined at:
  3794 ;;		line 80 in file "main.c"
  3795 ;; Parameters:    Size  Location     Type
  3796 ;;		None
  3797 ;; Auto vars:     Size  Location     Type
  3798 ;;  i               1   24[BANK0 ] unsigned char 
  3799 ;;  i               1   23[BANK0 ] unsigned char 
  3800 ;;  x               2   25[BANK0 ] unsigned int 
  3801 ;;  y               2   21[BANK0 ] unsigned int 
  3802 ;; Return value:  Size  Location     Type
  3803 ;;                  1    wreg      void 
  3804 ;; Registers used:
  3805 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3806 ;; Tracked objects:
  3807 ;;		On entry : B1F/0
  3808 ;;		On exit  : 0/0
  3809 ;;		Unchanged: 0/0
  3810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3811 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3812 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3813 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3814 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3815 ;;Total ram usage:        8 bytes
  3816 ;; Hardware stack levels required when called:   16
  3817 ;; This function calls:
  3818 ;;		_SYSTEM_Initialize
  3819 ;;		_drawPixel
  3820 ;;		_i2c_writeNBytes
  3821 ;;		_writeDisplay
  3822 ;; This function is called by:
  3823 ;;		Startup code after reset
  3824 ;; This function uses a non-reentrant model
  3825 ;;
  3826                           
  3827                           
  3828                           ;psect for function _main
  3829  0102                     _main:	
  3830                           
  3831                           ;main.c: 83: SYSTEM_Initialize();
  3832                           
  3833                           ;incstack = 0
  3834                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3835  0102  3187  2768  3181   	fcall	_SYSTEM_Initialize
  3836                           
  3837                           ;main.c: 89: (INTCONbits.GIE = 1);
  3838  0105  178B               	bsf	11,7	;volatile
  3839                           
  3840                           ;main.c: 92: (INTCONbits.PEIE = 1);
  3841  0106  170B               	bsf	11,6	;volatile
  3842                           
  3843                           ;main.c: 94: for (uint8_t i = 0; i < 8; i++) {
  3844  0107  0020               	movlb	0	; select bank0
  3845  0108  01E4               	clrf	main@i
  3846  0109  3008               	movlw	8
  3847  010A  0264               	subwf	main@i,w
  3848  010B  1803               	btfsc	3,0
  3849  010C  291A               	goto	l4727
  3850  010D                     l4721:	
  3851                           
  3852                           ;main.c: 95: writebuffer[i] = 0;
  3853  010D  0864               	movf	main@i,w
  3854  010E  3EC0               	addlw	(low (_writebuffer| 0))& (0+255)
  3855  010F  0086               	movwf	6
  3856  0110  0187               	clrf	7
  3857  0111  0181               	clrf	1
  3858  0112  3001               	movlw	1
  3859  0113  00E0               	movwf	??_main
  3860  0114  0860               	movf	??_main,w
  3861  0115  07E4               	addwf	main@i,f
  3862  0116  3008               	movlw	8
  3863  0117  0264               	subwf	main@i,w
  3864  0118  1C03               	skipc
  3865  0119  290D               	goto	l4721
  3866  011A                     l4727:	
  3867                           
  3868                           ;main.c: 96: }
  3869                           ;main.c: 97: writebuffer[0] = 0x21;
  3870  011A  3021               	movlw	33
  3871  011B  00E0               	movwf	??_main
  3872  011C  0860               	movf	??_main,w
  3873  011D  0021               	movlb	1	; select bank1
  3874  011E  00C0               	movwf	_writebuffer^(0+128)
  3875                           
  3876                           ;main.c: 98: i2c_writeNBytes(0x70, writebuffer, 1);
  3877  011F  30C0               	movlw	(low (_writebuffer| 0))& (0+255)
  3878  0120  0020               	movlb	0	; select bank0
  3879  0121  00E0               	movwf	??_main
  3880  0122  0860               	movf	??_main,w
  3881  0123  00D6               	movwf	i2c_writeNBytes@data
  3882  0124  3001               	movlw	1
  3883  0125  00D7               	movwf	i2c_writeNBytes@len
  3884  0126  3000               	movlw	0
  3885  0127  00D8               	movwf	i2c_writeNBytes@len+1
  3886  0128  3070               	movlw	112
  3887  0129  3184  2434  3181   	fcall	_i2c_writeNBytes
  3888                           
  3889                           ;main.c: 100: for (uint8_t i = 0; i < 8; i++) {
  3890  012C  0020               	movlb	0	; select bank0
  3891  012D  01E5               	clrf	main@i_466
  3892  012E  3008               	movlw	8
  3893  012F  0265               	subwf	main@i_466,w
  3894  0130  1803               	btfsc	3,0
  3895  0131  2941               	goto	l4743
  3896  0132                     l4737:	
  3897                           
  3898                           ;main.c: 101: displaybuffer[i] = 0;
  3899  0132  3565               	lslf	main@i_466,w
  3900  0133  3E3D               	addlw	(low (_displaybuffer| 0))& (0+255)
  3901  0134  0086               	movwf	6
  3902  0135  0187               	clrf	7
  3903  0136  3000               	movlw	0
  3904  0137  3FC0               	movwi [0]fsr1
  3905  0138  3FC1               	movwi [1]fsr1
  3906  0139  3001               	movlw	1
  3907  013A  00E0               	movwf	??_main
  3908  013B  0860               	movf	??_main,w
  3909  013C  07E5               	addwf	main@i_466,f
  3910  013D  3008               	movlw	8
  3911  013E  0265               	subwf	main@i_466,w
  3912  013F  1C03               	skipc
  3913  0140  2932               	goto	l4737
  3914  0141                     l4743:	
  3915                           
  3916                           ;main.c: 102: }
  3917                           ;main.c: 104: writebuffer[0] = 0x80 | 0x01;
  3918  0141  3081               	movlw	129
  3919  0142  00E0               	movwf	??_main
  3920  0143  0860               	movf	??_main,w
  3921  0144  0021               	movlb	1	; select bank1
  3922  0145  00C0               	movwf	_writebuffer^(0+128)
  3923                           
  3924                           ;main.c: 105: i2c_writeNBytes(0x70, writebuffer, 1);
  3925  0146  30C0               	movlw	(low (_writebuffer| 0))& (0+255)
  3926  0147  0020               	movlb	0	; select bank0
  3927  0148  00E0               	movwf	??_main
  3928  0149  0860               	movf	??_main,w
  3929  014A  00D6               	movwf	i2c_writeNBytes@data
  3930  014B  3001               	movlw	1
  3931  014C  00D7               	movwf	i2c_writeNBytes@len
  3932  014D  3000               	movlw	0
  3933  014E  00D8               	movwf	i2c_writeNBytes@len+1
  3934  014F  3070               	movlw	112
  3935  0150  3184  2434  3181   	fcall	_i2c_writeNBytes
  3936                           
  3937                           ;main.c: 107: uint16_t x = 0;
  3938  0153  0020               	movlb	0	; select bank0
  3939  0154  01E6               	clrf	main@x
  3940  0155  01E7               	clrf	main@x+1
  3941                           
  3942                           ;main.c: 108: uint16_t y = 0;
  3943  0156  01E2               	clrf	main@y
  3944  0157  01E3               	clrf	main@y+1
  3945  0158                     l4751:	
  3946                           ;main.c: 109: while (1)
  3947                           
  3948                           
  3949                           ;main.c: 110: {
  3950                           ;main.c: 111: drawPixel(x, y, (x + y)%4);
  3951  0158  0020               	movlb	0	; select bank0
  3952  0159  0862               	movf	main@y,w
  3953  015A  00E0               	movwf	??_main
  3954  015B  0860               	movf	??_main,w
  3955  015C  00CD               	movwf	drawPixel@y
  3956  015D  0866               	movf	main@x,w
  3957  015E  0762               	addwf	main@y,w
  3958  015F  3903               	andlw	3
  3959  0160  00E1               	movwf	??_main+1
  3960  0161  0861               	movf	??_main+1,w
  3961  0162  00CE               	movwf	drawPixel@color
  3962  0163  0866               	movf	main@x,w
  3963  0164  3180  204C  3181   	fcall	_drawPixel
  3964                           
  3965                           ;main.c: 112: x += 1;
  3966  0167  3001               	movlw	1
  3967  0168  0020               	movlb	0	; select bank0
  3968  0169  07E6               	addwf	main@x,f
  3969  016A  3000               	movlw	0
  3970  016B  3DE7               	addwfc	main@x+1,f
  3971                           
  3972                           ;main.c: 113: if (x == 8) {
  3973  016C  3008               	movlw	8
  3974  016D  0666               	xorwf	main@x,w
  3975  016E  0467               	iorwf	main@x+1,w
  3976  016F  1D03               	btfss	3,2
  3977  0170  2977               	goto	l4761
  3978                           
  3979                           ;main.c: 114: x = 0;
  3980  0171  01E6               	clrf	main@x
  3981  0172  01E7               	clrf	main@x+1
  3982                           
  3983                           ;main.c: 115: y += 1;
  3984  0173  3001               	movlw	1
  3985  0174  07E2               	addwf	main@y,f
  3986  0175  3000               	movlw	0
  3987  0176  3DE3               	addwfc	main@y+1,f
  3988  0177                     l4761:	
  3989                           
  3990                           ;main.c: 116: }
  3991                           ;main.c: 117: writeDisplay();
  3992  0177  3181  2184  3181   	fcall	_writeDisplay
  3993                           
  3994                           ;main.c: 118: _delay((unsigned long)((300)*(1000000/4000.0)));
  3995  017A  3062               	movlw	98
  3996  017B  0020               	movlb	0	; select bank0
  3997  017C  00E0               	movwf	??_main
  3998  017D  3065               	movlw	101
  3999  017E                     u3267:	
  4000  017E  0B89               	decfsz	9,f
  4001  017F  297E               	goto	u3267
  4002  0180  0BE0               	decfsz	??_main,f
  4003  0181  297E               	goto	u3267
  4004  0182  3200               	nop2
  4005  0183  2958               	goto	l4751
  4006  0184                     __end_of_main:	
  4007                           
  4008                           	psect	text1
  4009  0184                     __ptext1:	
  4010 ;; *************** function _writeDisplay *****************
  4011 ;; Defined at:
  4012 ;;		line 57 in file "main.c"
  4013 ;; Parameters:    Size  Location     Type
  4014 ;;		None
  4015 ;; Auto vars:     Size  Location     Type
  4016 ;;  i               1   18[BANK0 ] unsigned char 
  4017 ;; Return value:  Size  Location     Type
  4018 ;;                  1    wreg      void 
  4019 ;; Registers used:
  4020 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4021 ;; Tracked objects:
  4022 ;;		On entry : 0/0
  4023 ;;		On exit  : 0/0
  4024 ;;		Unchanged: 0/0
  4025 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4026 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4027 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4028 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4029 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4030 ;;Total ram usage:        6 bytes
  4031 ;; Hardware stack levels used:    1
  4032 ;; Hardware stack levels required when called:   15
  4033 ;; This function calls:
  4034 ;;		___awdiv
  4035 ;;		_i2c_writeNBytes
  4036 ;; This function is called by:
  4037 ;;		_main
  4038 ;; This function uses a non-reentrant model
  4039 ;;
  4040                           
  4041                           
  4042                           ;psect for function _writeDisplay
  4043  0184                     _writeDisplay:	
  4044                           
  4045                           ;main.c: 58: writebuffer[0] = 0;
  4046                           
  4047                           ;incstack = 0
  4048                           ; Regs used in _writeDisplay: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4049  0184  0021               	movlb	1	; select bank1
  4050  0185  01C0               	clrf	_writebuffer^(0+128)
  4051                           
  4052                           ;main.c: 59: for (uint8_t i = 1; i < 17; i += 2) {
  4053  0186  0020               	movlb	0	; select bank0
  4054  0187  01DF               	clrf	writeDisplay@i
  4055  0188  0ADF               	incf	writeDisplay@i,f
  4056  0189  3011               	movlw	17
  4057  018A  025F               	subwf	writeDisplay@i,w
  4058  018B  1803               	btfsc	3,0
  4059  018C  29D2               	goto	l4681
  4060  018D                     l4675:	
  4061                           
  4062                           ;main.c: 60: writebuffer[i] = displaybuffer[i/2] & 0xFF;
  4063  018D  3002               	movlw	2
  4064  018E  00CD               	movwf	___awdiv@divisor
  4065  018F  3000               	movlw	0
  4066  0190  00CE               	movwf	___awdiv@divisor+1
  4067  0191  085F               	movf	writeDisplay@i,w
  4068  0192  00DA               	movwf	??_writeDisplay
  4069  0193  01DB               	clrf	??_writeDisplay+1
  4070  0194  085A               	movf	??_writeDisplay,w
  4071  0195  00CF               	movwf	___awdiv@dividend
  4072  0196  085B               	movf	??_writeDisplay+1,w
  4073  0197  00D0               	movwf	___awdiv@dividend+1
  4074  0198  3181  21DE  3181   	fcall	___awdiv
  4075  019B  0020               	movlb	0	; select bank0
  4076  019C  084D               	movf	?___awdiv,w
  4077  019D  0709               	addwf	9,w
  4078  019E  3E3D               	addlw	(low (_displaybuffer| 0))& (0+255)
  4079  019F  0086               	movwf	6
  4080  01A0  0187               	clrf	7
  4081  01A1  0801               	movf	1,w
  4082  01A2  00DC               	movwf	??_writeDisplay+2
  4083  01A3  085F               	movf	writeDisplay@i,w
  4084  01A4  3EC0               	addlw	(low (_writebuffer| 0))& (0+255)
  4085  01A5  0086               	movwf	6
  4086  01A6  0187               	clrf	7
  4087  01A7  085C               	movf	??_writeDisplay+2,w
  4088  01A8  0081               	movwf	1
  4089                           
  4090                           ;main.c: 61: writebuffer[i + 1] = displaybuffer[i/2] >> 8;
  4091  01A9  3002               	movlw	2
  4092  01AA  00CD               	movwf	___awdiv@divisor
  4093  01AB  3000               	movlw	0
  4094  01AC  00CE               	movwf	___awdiv@divisor+1
  4095  01AD  085F               	movf	writeDisplay@i,w
  4096  01AE  00DA               	movwf	??_writeDisplay
  4097  01AF  01DB               	clrf	??_writeDisplay+1
  4098  01B0  085A               	movf	??_writeDisplay,w
  4099  01B1  00CF               	movwf	___awdiv@dividend
  4100  01B2  085B               	movf	??_writeDisplay+1,w
  4101  01B3  00D0               	movwf	___awdiv@dividend+1
  4102  01B4  3181  21DE  3181   	fcall	___awdiv
  4103  01B7  0020               	movlb	0	; select bank0
  4104  01B8  084D               	movf	?___awdiv,w
  4105  01B9  0709               	addwf	9,w
  4106  01BA  3E3D               	addlw	(low (_displaybuffer| 0))& (0+255)
  4107  01BB  0086               	movwf	6
  4108  01BC  0187               	clrf	7
  4109  01BD  3F40               	moviw [0]fsr1
  4110  01BE  00DC               	movwf	??_writeDisplay+2
  4111  01BF  3F41               	moviw [1]fsr1
  4112  01C0  00DD               	movwf	??_writeDisplay+3
  4113  01C1  085D               	movf	??_writeDisplay+3,w
  4114  01C2  00DE               	movwf	??_writeDisplay+4
  4115  01C3  085F               	movf	writeDisplay@i,w
  4116  01C4  3E01               	addlw	1
  4117  01C5  3EC0               	addlw	(low (_writebuffer| 0))& (0+255)
  4118  01C6  0086               	movwf	6
  4119  01C7  0187               	clrf	7
  4120  01C8  085E               	movf	??_writeDisplay+4,w
  4121  01C9  0081               	movwf	1
  4122  01CA  3002               	movlw	2
  4123  01CB  00DA               	movwf	??_writeDisplay
  4124  01CC  085A               	movf	??_writeDisplay,w
  4125  01CD  07DF               	addwf	writeDisplay@i,f
  4126  01CE  3011               	movlw	17
  4127  01CF  025F               	subwf	writeDisplay@i,w
  4128  01D0  1C03               	skipc
  4129  01D1  298D               	goto	l4675
  4130  01D2                     l4681:	
  4131                           
  4132                           ;main.c: 62: }
  4133                           ;main.c: 63: i2c_writeNBytes(0x70, writebuffer, 17);
  4134  01D2  30C0               	movlw	(low (_writebuffer| 0))& (0+255)
  4135  01D3  00DA               	movwf	??_writeDisplay
  4136  01D4  085A               	movf	??_writeDisplay,w
  4137  01D5  00D6               	movwf	i2c_writeNBytes@data
  4138  01D6  3011               	movlw	17
  4139  01D7  00D7               	movwf	i2c_writeNBytes@len
  4140  01D8  3000               	movlw	0
  4141  01D9  00D8               	movwf	i2c_writeNBytes@len+1
  4142  01DA  3070               	movlw	112
  4143  01DB  3184  2434         	fcall	_i2c_writeNBytes
  4144  01DD  0008               	return
  4145  01DE                     __end_of_writeDisplay:	
  4146                           
  4147                           	psect	text2
  4148  0434                     __ptext2:	
  4149 ;; *************** function _i2c_writeNBytes *****************
  4150 ;; Defined at:
  4151 ;;		line 48 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  4152 ;; Parameters:    Size  Location     Type
  4153 ;;  address         1    wreg     unsigned char 
  4154 ;;  data            1    9[BANK0 ] PTR void 
  4155 ;;		 -> writebuffer(17), 
  4156 ;;  len             2   10[BANK0 ] unsigned int 
  4157 ;; Auto vars:     Size  Location     Type
  4158 ;;  address         1   12[BANK0 ] unsigned char 
  4159 ;; Return value:  Size  Location     Type
  4160 ;;                  1    wreg      void 
  4161 ;; Registers used:
  4162 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4163 ;; Tracked objects:
  4164 ;;		On entry : 0/0
  4165 ;;		On exit  : 0/0
  4166 ;;		Unchanged: 0/0
  4167 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4168 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4169 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4170 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4171 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4172 ;;Total ram usage:        4 bytes
  4173 ;; Hardware stack levels used:    1
  4174 ;; Hardware stack levels required when called:   14
  4175 ;; This function calls:
  4176 ;;		_i2c_close
  4177 ;;		_i2c_masterWrite
  4178 ;;		_i2c_open
  4179 ;;		_i2c_setAddressNACKCallback
  4180 ;;		_i2c_setBuffer
  4181 ;; This function is called by:
  4182 ;;		_writeDisplay
  4183 ;;		_main
  4184 ;; This function uses a non-reentrant model
  4185 ;;
  4186                           
  4187                           
  4188                           ;psect for function _i2c_writeNBytes
  4189  0434                     _i2c_writeNBytes:	
  4190                           
  4191                           ;incstack = 0
  4192                           ; Regs used in _i2c_writeNBytes: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4193                           ;i2c_writeNBytes@address stored from wreg
  4194  0434  0020               	movlb	0	; select bank0
  4195  0435  00D9               	movwf	i2c_writeNBytes@address
  4196  0436                     l4565:	
  4197                           ;i2c_simple_master.c: 50: while(!i2c_open(address));
  4198                           
  4199  0436  0020               	movlb	0	; select bank0
  4200  0437  0859               	movf	i2c_writeNBytes@address,w
  4201  0438  3182  22C8  3184   	fcall	_i2c_open
  4202  043B  3A00               	xorlw	0
  4203  043C  1903               	skipnz
  4204  043D  2C36               	goto	l4565
  4205                           
  4206                           ;i2c_simple_master.c: 51: i2c_setBuffer(data,len);
  4207  043E  0020               	movlb	0	; select bank0
  4208  043F  0858               	movf	i2c_writeNBytes@len+1,w
  4209  0440  00CE               	movwf	i2c_setBuffer@bufferSize+1
  4210  0441  0857               	movf	i2c_writeNBytes@len,w
  4211  0442  00CD               	movwf	i2c_setBuffer@bufferSize
  4212  0443  0856               	movf	i2c_writeNBytes@data,w
  4213  0444  3186  2629  3184   	fcall	_i2c_setBuffer
  4214                           
  4215                           ;i2c_simple_master.c: 52: i2c_setAddressNACKCallback(i2c_restartWrite,(0));
  4216  0447  3056               	movlw	low _i2c_restartWrite
  4217  0448  0020               	movlb	0	; select bank0
  4218  0449  00D2               	movwf	i2c_setAddressNACKCallback@cb
  4219  044A  3007               	movlw	high _i2c_restartWrite
  4220  044B  00D3               	movwf	i2c_setAddressNACKCallback@cb+1
  4221  044C  01D4               	clrf	i2c_setAddressNACKCallback@p
  4222  044D  3186  2645  3184   	fcall	_i2c_setAddressNACKCallback
  4223                           
  4224                           ;i2c_simple_master.c: 53: i2c_masterWrite();
  4225  0450  3187  277E  3184   	fcall	_i2c_masterWrite
  4226  0453                     l4573:	
  4227                           ;i2c_simple_master.c: 54: while(I2C_BUSY == i2c_close());
  4228                           
  4229  0453  3185  25D3  3184   	fcall	_i2c_close
  4230  0456  3A01               	xorlw	1
  4231  0457  1D03               	btfss	3,2
  4232  0458  0008               	return
  4233  0459  2C53               	goto	l4573
  4234  045A                     __end_of_i2c_writeNBytes:	
  4235                           
  4236                           	psect	text3
  4237  0645                     __ptext3:	
  4238 ;; *************** function _i2c_setAddressNACKCallback *****************
  4239 ;; Defined at:
  4240 ;;		line 99 in file "mcc_generated_files/drivers/i2c_master.c"
  4241 ;; Parameters:    Size  Location     Type
  4242 ;;  cb              2    5[BANK0 ] PTR FTN(PTR void ,)enum 
  4243 ;;		 -> i2c_restartWrite(1), 
  4244 ;;  p               1    7[BANK0 ] PTR void 
  4245 ;;		 -> NULL(0), 
  4246 ;; Auto vars:     Size  Location     Type
  4247 ;;		None
  4248 ;; Return value:  Size  Location     Type
  4249 ;;                  1    wreg      void 
  4250 ;; Registers used:
  4251 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4252 ;; Tracked objects:
  4253 ;;		On entry : 0/0
  4254 ;;		On exit  : 0/0
  4255 ;;		Unchanged: 0/0
  4256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4257 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4258 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4259 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4260 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4261 ;;Total ram usage:        4 bytes
  4262 ;; Hardware stack levels used:    1
  4263 ;; Hardware stack levels required when called:    7
  4264 ;; This function calls:
  4265 ;;		_setCallBack
  4266 ;; This function is called by:
  4267 ;;		_i2c_writeNBytes
  4268 ;;		_i2c_write1ByteRegister
  4269 ;;		_i2c_read1ByteRegister
  4270 ;;		_i2c_read2ByteRegister
  4271 ;;		_i2c_write2ByteRegister
  4272 ;;		_i2c_readDataBlock
  4273 ;; This function uses a non-reentrant model
  4274 ;;
  4275                           
  4276                           
  4277                           ;psect for function _i2c_setAddressNACKCallback
  4278  0645                     _i2c_setAddressNACKCallback:	
  4279                           
  4280                           ;i2c_master.c: 101: setCallBack(i2c_addressNACK,cb,p);
  4281                           
  4282                           ;incstack = 0
  4283                           ; Regs used in _i2c_setAddressNACKCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  4284  0645  0020               	movlb	0	; select bank0
  4285  0646  0853               	movf	i2c_setAddressNACKCallback@cb+1,w
  4286  0647  00CE               	movwf	setCallBack@cb+1
  4287  0648  0852               	movf	i2c_setAddressNACKCallback@cb,w
  4288  0649  00CD               	movwf	setCallBack@cb
  4289  064A  0854               	movf	i2c_setAddressNACKCallback@p,w
  4290  064B  00D5               	movwf	??_i2c_setAddressNACKCallback
  4291  064C  0855               	movf	??_i2c_setAddressNACKCallback,w
  4292  064D  00CF               	movwf	setCallBack@p
  4293  064E  3002               	movlw	2
  4294  064F  3184  245A         	fcall	_setCallBack
  4295  0651  0008               	return
  4296  0652                     __end_of_i2c_setAddressNACKCallback:	
  4297                           
  4298                           	psect	text4
  4299  02C8                     __ptext4:	
  4300 ;; *************** function _i2c_open *****************
  4301 ;; Defined at:
  4302 ;;		line 116 in file "mcc_generated_files/drivers/i2c_master.c"
  4303 ;; Parameters:    Size  Location     Type
  4304 ;;  address         1    wreg     unsigned char 
  4305 ;; Auto vars:     Size  Location     Type
  4306 ;;  address         1    3[BANK0 ] unsigned char 
  4307 ;;  ret             1    4[BANK0 ] enum E12166
  4308 ;; Return value:  Size  Location     Type
  4309 ;;                  1    wreg      enum E12166
  4310 ;; Registers used:
  4311 ;;		wreg, status,2, status,0, pclath, cstack
  4312 ;; Tracked objects:
  4313 ;;		On entry : 0/0
  4314 ;;		On exit  : 0/0
  4315 ;;		Unchanged: 0/0
  4316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4318 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4319 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4320 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4321 ;;Total ram usage:        3 bytes
  4322 ;; Hardware stack levels used:    1
  4323 ;; Hardware stack levels required when called:    7
  4324 ;; This function calls:
  4325 ;;		_i2c_driver_open
  4326 ;;		_i2c_driver_setBusCollisionISR
  4327 ;;		_i2c_driver_setI2cISR
  4328 ;;		_mssp_clearIRQ
  4329 ;; This function is called by:
  4330 ;;		_i2c_writeNBytes
  4331 ;;		_i2c_write1ByteRegister
  4332 ;;		_i2c_read1ByteRegister
  4333 ;;		_i2c_read2ByteRegister
  4334 ;;		_i2c_write2ByteRegister
  4335 ;;		_i2c_readDataBlock
  4336 ;;		_i2c_readNBytes
  4337 ;; This function uses a non-reentrant model
  4338 ;;
  4339                           
  4340                           
  4341                           ;psect for function _i2c_open
  4342  02C8                     _i2c_open:	
  4343                           
  4344                           ;incstack = 0
  4345                           ; Regs used in _i2c_open: [wreg+status,2+status,0+pclath+cstack]
  4346                           ;i2c_open@address stored from wreg
  4347  02C8  0020               	movlb	0	; select bank0
  4348  02C9  00D0               	movwf	i2c_open@address
  4349                           
  4350                           ;i2c_master.c: 118: i2c_error_t ret = I2C_BUSY;
  4351  02CA  01D1               	clrf	i2c_open@ret
  4352  02CB  0AD1               	incf	i2c_open@ret,f
  4353                           
  4354                           ;i2c_master.c: 120: if(!i2c_status.inUse)
  4355  02CC  18A0               	btfsc	_i2c_status,1
  4356  02CD  2B0E               	goto	l354
  4357                           
  4358                           ;i2c_master.c: 121: {
  4359                           ;i2c_master.c: 122: i2c_status.address = address;
  4360  02CE  0850               	movf	i2c_open@address,w
  4361  02CF  00CF               	movwf	??_i2c_open
  4362  02D0  084F               	movf	??_i2c_open,w
  4363  02D1  00A1               	movwf	_i2c_status+1
  4364                           
  4365                           ;i2c_master.c: 123: i2c_status.busy = 0;
  4366  02D2  1020               	bcf	_i2c_status,0
  4367                           
  4368                           ;i2c_master.c: 124: i2c_status.inUse = 1;
  4369  02D3  14A0               	bsf	_i2c_status,1
  4370                           
  4371                           ;i2c_master.c: 125: i2c_status.addressNACKCheck = 0;
  4372  02D4  11A0               	bcf	_i2c_status,3
  4373                           
  4374                           ;i2c_master.c: 126: i2c_status.state = I2C_RESET;
  4375  02D5  300E               	movlw	14
  4376  02D6  00CF               	movwf	??_i2c_open
  4377  02D7  084F               	movf	??_i2c_open,w
  4378  02D8  00A9               	movwf	_i2c_status+9
  4379                           
  4380                           ;i2c_master.c: 127: i2c_status.time_out_value = 500;
  4381  02D9  30F4               	movlw	244
  4382  02DA  00A7               	movwf	_i2c_status+7
  4383  02DB  3001               	movlw	1
  4384  02DC  00A8               	movwf	_i2c_status+8
  4385                           
  4386                           ;i2c_master.c: 128: i2c_status.bufferFree = 1;
  4387  02DD  1520               	bsf	_i2c_status,2
  4388                           
  4389                           ;i2c_master.c: 131: i2c_status.callbackTable[i2c_dataComplete]=returnStop;
  4390  02DE  3062               	movlw	low _returnStop
  4391  02DF  00AB               	movwf	low ((_i2c_status| 0+11))
  4392  02E0  3007               	movlw	high _returnStop
  4393  02E1  00AC               	movwf	(low ((_i2c_status| 0+11))+1)
  4394                           
  4395                           ;i2c_master.c: 132: i2c_status.callbackPayload[i2c_dataComplete] = (0);
  4396  02E2  01B7               	clrf	low ((_i2c_status| 0+23))
  4397                           
  4398                           ;i2c_master.c: 133: i2c_status.callbackTable[i2c_writeCollision]=returnStop;
  4399  02E3  3062               	movlw	low _returnStop
  4400  02E4  00AD               	movwf	low ((_i2c_status| 0+13))
  4401  02E5  3007               	movlw	high _returnStop
  4402  02E6  00AE               	movwf	(low ((_i2c_status| 0+13))+1)
  4403                           
  4404                           ;i2c_master.c: 134: i2c_status.callbackPayload[i2c_writeCollision] = (0);
  4405  02E7  01B8               	clrf	low ((_i2c_status| 0+24))
  4406                           
  4407                           ;i2c_master.c: 135: i2c_status.callbackTable[i2c_addressNACK]=returnStop;
  4408  02E8  3062               	movlw	low _returnStop
  4409  02E9  00AF               	movwf	low ((_i2c_status| 0+15))
  4410  02EA  3007               	movlw	high _returnStop
  4411  02EB  00B0               	movwf	(low ((_i2c_status| 0+15))+1)
  4412                           
  4413                           ;i2c_master.c: 136: i2c_status.callbackPayload[i2c_addressNACK] = (0);
  4414  02EC  01B9               	clrf	low ((_i2c_status| 0+25))
  4415                           
  4416                           ;i2c_master.c: 137: i2c_status.callbackTable[i2c_dataNACK]=returnStop;
  4417  02ED  3062               	movlw	low _returnStop
  4418  02EE  00B1               	movwf	low ((_i2c_status| 0+17))
  4419  02EF  3007               	movlw	high _returnStop
  4420  02F0  00B2               	movwf	(low ((_i2c_status| 0+17))+1)
  4421                           
  4422                           ;i2c_master.c: 138: i2c_status.callbackPayload[i2c_dataNACK] = (0);
  4423  02F1  01BA               	clrf	low ((_i2c_status| 0+26))
  4424                           
  4425                           ;i2c_master.c: 139: i2c_status.callbackTable[i2c_timeOut]=returnReset;
  4426  02F2  305C               	movlw	low _returnReset
  4427  02F3  00B3               	movwf	low ((_i2c_status| 0+19))
  4428  02F4  3007               	movlw	high _returnReset
  4429  02F5  00B4               	movwf	(low ((_i2c_status| 0+19))+1)
  4430                           
  4431                           ;i2c_master.c: 140: i2c_status.callbackPayload[i2c_timeOut] = (0);
  4432  02F6  01BB               	clrf	low ((_i2c_status| 0+27))
  4433                           
  4434                           ;i2c_master.c: 142: i2c_driver_open();
  4435  02F7  3186  26BC  3182   	fcall	_i2c_driver_open
  4436                           
  4437                           ;i2c_master.c: 143: mssp_clearIRQ();
  4438  02FA  3187  27C3  3182   	fcall	_mssp_clearIRQ
  4439                           
  4440                           ;i2c_master.c: 145: i2c_driver_setBusCollisionISR(i2c_busCollisionISR);
  4441  02FD  30D8               	movlw	low _i2c_busCollisionISR
  4442  02FE  0020               	movlb	0	; select bank0
  4443  02FF  00CD               	movwf	i2c_driver_setBusCollisionISR@f
  4444  0300  3007               	movlw	high _i2c_busCollisionISR
  4445  0301  00CE               	movwf	i2c_driver_setBusCollisionISR@f+1
  4446  0302  3187  274A  3182   	fcall	_i2c_driver_setBusCollisionISR
  4447                           
  4448                           ;i2c_master.c: 146: i2c_driver_setI2cISR(i2c_ISR);
  4449  0305  30A3               	movlw	low _i2c_ISR
  4450  0306  0020               	movlb	0	; select bank0
  4451  0307  00CD               	movwf	i2c_driver_setI2cISR@f
  4452  0308  3004               	movlw	high _i2c_ISR
  4453  0309  00CE               	movwf	i2c_driver_setI2cISR@f+1
  4454  030A  3187  2744         	fcall	_i2c_driver_setI2cISR
  4455                           
  4456                           ;i2c_master.c: 151: ret = I2C_NOERR;
  4457  030C  0020               	movlb	0	; select bank0
  4458  030D  01D1               	clrf	i2c_open@ret
  4459  030E                     l354:	
  4460                           
  4461                           ;i2c_master.c: 152: }
  4462                           ;i2c_master.c: 153: return ret;
  4463  030E  0851               	movf	i2c_open@ret,w
  4464  030F  0008               	return
  4465  0310                     __end_of_i2c_open:	
  4466                           
  4467                           	psect	text5
  4468  0744                     __ptext5:	
  4469 ;; *************** function _i2c_driver_setI2cISR *****************
  4470 ;; Defined at:
  4471 ;;		line 262 in file "mcc_generated_files/i2c_driver.c"
  4472 ;; Parameters:    Size  Location     Type
  4473 ;;  f               2    0[BANK0 ] PTR void 
  4474 ;;		 -> i2c_ISR(1), 
  4475 ;; Auto vars:     Size  Location     Type
  4476 ;;		None
  4477 ;; Return value:  Size  Location     Type
  4478 ;;                  1    wreg      void 
  4479 ;; Registers used:
  4480 ;;		wreg
  4481 ;; Tracked objects:
  4482 ;;		On entry : 0/0
  4483 ;;		On exit  : 0/0
  4484 ;;		Unchanged: 0/0
  4485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4486 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4487 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4488 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4489 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4490 ;;Total ram usage:        2 bytes
  4491 ;; Hardware stack levels used:    1
  4492 ;; Hardware stack levels required when called:    6
  4493 ;; This function calls:
  4494 ;;		Nothing
  4495 ;; This function is called by:
  4496 ;;		_i2c_open
  4497 ;; This function uses a non-reentrant model
  4498 ;;
  4499                           
  4500                           
  4501                           ;psect for function _i2c_driver_setI2cISR
  4502  0744                     _i2c_driver_setI2cISR:	
  4503                           
  4504                           ;i2c_driver.c: 263: i2c_driver_i2cISR = f;
  4505                           
  4506                           ;incstack = 0
  4507                           ; Regs used in _i2c_driver_setI2cISR: [wreg]
  4508  0744  0020               	movlb	0	; select bank0
  4509  0745  084E               	movf	i2c_driver_setI2cISR@f+1,w
  4510  0746  00FB               	movwf	_i2c_driver_i2cISR+1
  4511  0747  084D               	movf	i2c_driver_setI2cISR@f,w
  4512  0748  00FA               	movwf	_i2c_driver_i2cISR
  4513  0749  0008               	return
  4514  074A                     __end_of_i2c_driver_setI2cISR:	
  4515                           
  4516                           	psect	text6
  4517  074A                     __ptext6:	
  4518 ;; *************** function _i2c_driver_setBusCollisionISR *****************
  4519 ;; Defined at:
  4520 ;;		line 258 in file "mcc_generated_files/i2c_driver.c"
  4521 ;; Parameters:    Size  Location     Type
  4522 ;;  f               2    0[BANK0 ] PTR void 
  4523 ;;		 -> i2c_busCollisionISR(1), 
  4524 ;; Auto vars:     Size  Location     Type
  4525 ;;		None
  4526 ;; Return value:  Size  Location     Type
  4527 ;;                  1    wreg      void 
  4528 ;; Registers used:
  4529 ;;		wreg
  4530 ;; Tracked objects:
  4531 ;;		On entry : 0/0
  4532 ;;		On exit  : 0/0
  4533 ;;		Unchanged: 0/0
  4534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4535 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4536 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4537 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4538 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4539 ;;Total ram usage:        2 bytes
  4540 ;; Hardware stack levels used:    1
  4541 ;; Hardware stack levels required when called:    6
  4542 ;; This function calls:
  4543 ;;		Nothing
  4544 ;; This function is called by:
  4545 ;;		_i2c_open
  4546 ;; This function uses a non-reentrant model
  4547 ;;
  4548                           
  4549                           
  4550                           ;psect for function _i2c_driver_setBusCollisionISR
  4551  074A                     _i2c_driver_setBusCollisionISR:	
  4552                           
  4553                           ;i2c_driver.c: 259: i2c_driver_busCollisionISR = f;
  4554                           
  4555                           ;incstack = 0
  4556                           ; Regs used in _i2c_driver_setBusCollisionISR: [wreg]
  4557  074A  0020               	movlb	0	; select bank0
  4558  074B  084E               	movf	i2c_driver_setBusCollisionISR@f+1,w
  4559  074C  00FD               	movwf	_i2c_driver_busCollisionISR+1
  4560  074D  084D               	movf	i2c_driver_setBusCollisionISR@f,w
  4561  074E  00FC               	movwf	_i2c_driver_busCollisionISR
  4562  074F  0008               	return
  4563  0750                     __end_of_i2c_driver_setBusCollisionISR:	
  4564                           
  4565                           	psect	text7
  4566  06BC                     __ptext7:	
  4567 ;; *************** function _i2c_driver_open *****************
  4568 ;; Defined at:
  4569 ;;		line 83 in file "mcc_generated_files/i2c_driver.c"
  4570 ;; Parameters:    Size  Location     Type
  4571 ;;		None
  4572 ;; Auto vars:     Size  Location     Type
  4573 ;;		None
  4574 ;; Return value:  Size  Location     Type
  4575 ;;		None               void
  4576 ;; Registers used:
  4577 ;;		wreg, status,2
  4578 ;; Tracked objects:
  4579 ;;		On entry : 0/0
  4580 ;;		On exit  : 0/0
  4581 ;;		Unchanged: 0/0
  4582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4583 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4584 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4585 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4586 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4587 ;;Total ram usage:        0 bytes
  4588 ;; Hardware stack levels used:    1
  4589 ;; Hardware stack levels required when called:    6
  4590 ;; This function calls:
  4591 ;;		Nothing
  4592 ;; This function is called by:
  4593 ;;		_i2c_open
  4594 ;; This function uses a non-reentrant model
  4595 ;;
  4596                           
  4597                           
  4598                           ;psect for function _i2c_driver_open
  4599  06BC                     _i2c_driver_open:	
  4600                           
  4601                           ;i2c_driver.c: 85: if(!SSP1CON1bits.SSPEN)
  4602                           
  4603                           ;incstack = 0
  4604                           ; Regs used in _i2c_driver_open: [wreg+status,2]
  4605  06BC  0024               	movlb	4	; select bank4
  4606  06BD  1A95               	btfsc	21,5	;volatile
  4607  06BE  0008               	return
  4608                           
  4609                           ;i2c_driver.c: 86: {
  4610                           ;i2c_driver.c: 87: SSP1STAT = 0x00;
  4611  06BF  0194               	clrf	20	;volatile
  4612                           
  4613                           ;i2c_driver.c: 88: SSP1CON1 = 0x28;
  4614  06C0  3028               	movlw	40
  4615  06C1  0095               	movwf	21	;volatile
  4616                           
  4617                           ;i2c_driver.c: 89: SSP1CON2 = 0x00;
  4618  06C2  0196               	clrf	22	;volatile
  4619                           
  4620                           ;i2c_driver.c: 90: SSP1ADD = 0x3;
  4621  06C3  3003               	movlw	3
  4622  06C4  0092               	movwf	18	;volatile
  4623                           
  4624                           ;i2c_driver.c: 93: else
  4625                           ;i2c_driver.c: 94: return 0;
  4626                           ;	Return value of _i2c_driver_open is never used
  4627                           
  4628                           ;i2c_driver.c: 92: }
  4629                           
  4630                           ;i2c_driver.c: 91: return 1;
  4631                           ;	Return value of _i2c_driver_open is never used
  4632  06C5  0008               	return
  4633  06C6                     __end_of_i2c_driver_open:	
  4634                           
  4635                           	psect	text8
  4636  077E                     __ptext8:	
  4637 ;; *************** function _i2c_masterWrite *****************
  4638 ;; Defined at:
  4639 ;;		line 222 in file "mcc_generated_files/drivers/i2c_master.c"
  4640 ;; Parameters:    Size  Location     Type
  4641 ;;		None
  4642 ;; Auto vars:     Size  Location     Type
  4643 ;;		None
  4644 ;; Return value:  Size  Location     Type
  4645 ;;                  1    wreg      enum E12166
  4646 ;; Registers used:
  4647 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4648 ;; Tracked objects:
  4649 ;;		On entry : 0/0
  4650 ;;		On exit  : 0/0
  4651 ;;		Unchanged: 0/0
  4652 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4653 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4654 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4655 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4656 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4657 ;;Total ram usage:        0 bytes
  4658 ;; Hardware stack levels used:    1
  4659 ;; Hardware stack levels required when called:   13
  4660 ;; This function calls:
  4661 ;;		_i2c_masterOperation
  4662 ;; This function is called by:
  4663 ;;		_i2c_writeNBytes
  4664 ;;		_i2c_write1ByteRegister
  4665 ;;		_i2c_read1ByteRegister
  4666 ;;		_i2c_read2ByteRegister
  4667 ;;		_i2c_write2ByteRegister
  4668 ;;		_i2c_readDataBlock
  4669 ;; This function uses a non-reentrant model
  4670 ;;
  4671                           
  4672                           
  4673                           ;psect for function _i2c_masterWrite
  4674  077E                     _i2c_masterWrite:	
  4675                           
  4676                           ;i2c_master.c: 224: return i2c_masterOperation(0);
  4677                           ;	Return value of _i2c_masterWrite is never used
  4678                           
  4679                           ;incstack = 0
  4680                           ; Regs used in _i2c_masterWrite: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4681  077E  3000               	movlw	0
  4682  077F  3185  2509         	fcall	_i2c_masterOperation
  4683  0781  0008               	return
  4684  0782                     __end_of_i2c_masterWrite:	
  4685                           
  4686                           	psect	text9
  4687  0509                     __ptext9:	
  4688 ;; *************** function _i2c_masterOperation *****************
  4689 ;; Defined at:
  4690 ;;		line 193 in file "mcc_generated_files/drivers/i2c_master.c"
  4691 ;; Parameters:    Size  Location     Type
  4692 ;;  read            1    wreg     unsigned char 
  4693 ;; Auto vars:     Size  Location     Type
  4694 ;;  read            1    6[BANK0 ] unsigned char 
  4695 ;;  ret             1    7[BANK0 ] enum E12166
  4696 ;; Return value:  Size  Location     Type
  4697 ;;                  1    wreg      enum E12166
  4698 ;; Registers used:
  4699 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4700 ;; Tracked objects:
  4701 ;;		On entry : 0/0
  4702 ;;		On exit  : 0/0
  4703 ;;		Unchanged: 0/0
  4704 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4705 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4706 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4707 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4708 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4709 ;;Total ram usage:        3 bytes
  4710 ;; Hardware stack levels used:    1
  4711 ;; Hardware stack levels required when called:   12
  4712 ;; This function calls:
  4713 ;;		_i2c_driver_start
  4714 ;;		_i2c_poller
  4715 ;;		_mssp_IRQisEnabled
  4716 ;; This function is called by:
  4717 ;;		_i2c_masterWrite
  4718 ;;		_i2c_masterRead
  4719 ;; This function uses a non-reentrant model
  4720 ;;
  4721                           
  4722                           
  4723                           ;psect for function _i2c_masterOperation
  4724  0509                     _i2c_masterOperation:	
  4725                           
  4726                           ;incstack = 0
  4727                           ; Regs used in _i2c_masterOperation: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4728                           ;i2c_masterOperation@read stored from wreg
  4729  0509  0020               	movlb	0	; select bank0
  4730  050A  00D3               	movwf	i2c_masterOperation@read
  4731                           
  4732                           ;i2c_master.c: 195: i2c_error_t ret = I2C_BUSY;
  4733  050B  01D4               	clrf	i2c_masterOperation@ret
  4734  050C  0AD4               	incf	i2c_masterOperation@ret,f
  4735                           
  4736                           ;i2c_master.c: 196: if(!i2c_status.busy)
  4737  050D  1820               	btfsc	_i2c_status,0
  4738  050E  2D25               	goto	l4519
  4739                           
  4740                           ;i2c_master.c: 197: {
  4741                           ;i2c_master.c: 198: i2c_status.busy = 1;
  4742  050F  1420               	bsf	_i2c_status,0
  4743                           
  4744                           ;i2c_master.c: 199: ret = I2C_NOERR;
  4745  0510  01D4               	clrf	i2c_masterOperation@ret
  4746                           
  4747                           ;i2c_master.c: 201: if(read)
  4748  0511  0853               	movf	i2c_masterOperation@read,w
  4749  0512  1903               	btfsc	3,2
  4750  0513  2D17               	goto	l4513
  4751                           
  4752                           ;i2c_master.c: 202: {
  4753                           ;i2c_master.c: 203: i2c_status.state = I2C_SEND_ADR_READ;
  4754  0514  01A9               	clrf	_i2c_status+9
  4755  0515  0AA9               	incf	_i2c_status+9,f
  4756                           
  4757                           ;i2c_master.c: 204: }
  4758  0516  2D1B               	goto	l4515
  4759  0517                     l4513:	
  4760                           
  4761                           ;i2c_master.c: 205: else
  4762                           ;i2c_master.c: 206: {
  4763                           ;i2c_master.c: 207: i2c_status.state = I2C_SEND_ADR_WRITE;
  4764  0517  3002               	movlw	2
  4765  0518  00D2               	movwf	??_i2c_masterOperation
  4766  0519  0852               	movf	??_i2c_masterOperation,w
  4767  051A  00A9               	movwf	_i2c_status+9
  4768  051B                     l4515:	
  4769                           
  4770                           ;i2c_master.c: 208: }
  4771                           ;i2c_master.c: 209: i2c_driver_start();
  4772  051B  3187  27BD  3185   	fcall	_i2c_driver_start
  4773                           
  4774                           ;i2c_master.c: 211: if(! mssp_IRQisEnabled())
  4775  051E  3186  26C6  3185   	fcall	_mssp_IRQisEnabled
  4776  0521  1803               	btfsc	3,0
  4777  0522  2D25               	goto	l4519
  4778                           
  4779                           ;i2c_master.c: 212: i2c_poller();
  4780  0523  3186  2690         	fcall	_i2c_poller
  4781  0525                     l4519:	
  4782                           
  4783                           ;i2c_master.c: 213: }
  4784                           ;i2c_master.c: 214: return ret;
  4785  0525  0020               	movlb	0	; select bank0
  4786  0526  0854               	movf	i2c_masterOperation@ret,w
  4787  0527  0008               	return
  4788  0528                     __end_of_i2c_masterOperation:	
  4789                           
  4790                           	psect	text10
  4791  06C6                     __ptext10:	
  4792 ;; *************** function _mssp_IRQisEnabled *****************
  4793 ;; Defined at:
  4794 ;;		line 43 in file "mcc_generated_files/i2c_driver.c"
  4795 ;; Parameters:    Size  Location     Type
  4796 ;;		None
  4797 ;; Auto vars:     Size  Location     Type
  4798 ;;		None
  4799 ;; Return value:  Size  Location     Type
  4800 ;;		None               void
  4801 ;; Registers used:
  4802 ;;		wreg, status,2, status,0
  4803 ;; Tracked objects:
  4804 ;;		On entry : 0/0
  4805 ;;		On exit  : 0/0
  4806 ;;		Unchanged: 0/0
  4807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4808 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4809 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4810 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4811 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4812 ;;Total ram usage:        2 bytes
  4813 ;; Hardware stack levels used:    1
  4814 ;; Hardware stack levels required when called:    6
  4815 ;; This function calls:
  4816 ;;		Nothing
  4817 ;; This function is called by:
  4818 ;;		_i2c_masterOperation
  4819 ;; This function uses a non-reentrant model
  4820 ;;
  4821                           
  4822                           
  4823                           ;psect for function _mssp_IRQisEnabled
  4824  06C6                     _mssp_IRQisEnabled:	
  4825                           
  4826                           ;i2c_driver.c: 45: return PIE1bits.SSP1IE;
  4827                           
  4828                           ;incstack = 0
  4829                           ; Regs used in _mssp_IRQisEnabled: [wreg+status,2+status,0]
  4830  06C6  0021               	movlb	1	; select bank1
  4831  06C7  0C10               	rrf	16,w	;volatile
  4832  06C8  0020               	movlb	0	; select bank0
  4833  06C9  00CD               	movwf	??_mssp_IRQisEnabled
  4834  06CA  0CCD               	rrf	??_mssp_IRQisEnabled,f
  4835  06CB  0C4D               	rrf	??_mssp_IRQisEnabled,w
  4836  06CC  3901               	andlw	1
  4837  06CD  00CE               	movwf	??_mssp_IRQisEnabled+1
  4838  06CE  0C4E               	rrf	??_mssp_IRQisEnabled+1,w
  4839  06CF  0008               	return
  4840  06D0                     __end_of_mssp_IRQisEnabled:	
  4841                           
  4842                           	psect	text11
  4843  0690                     __ptext11:	
  4844 ;; *************** function _i2c_poller *****************
  4845 ;; Defined at:
  4846 ;;		line 230 in file "mcc_generated_files/drivers/i2c_master.c"
  4847 ;; Parameters:    Size  Location     Type
  4848 ;;		None
  4849 ;; Auto vars:     Size  Location     Type
  4850 ;;		None
  4851 ;; Return value:  Size  Location     Type
  4852 ;;                  1    wreg      void 
  4853 ;; Registers used:
  4854 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4855 ;; Tracked objects:
  4856 ;;		On entry : 0/0
  4857 ;;		On exit  : 0/0
  4858 ;;		Unchanged: 0/0
  4859 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4860 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4861 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4862 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4863 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4864 ;;Total ram usage:        0 bytes
  4865 ;; Hardware stack levels used:    1
  4866 ;; Hardware stack levels required when called:   11
  4867 ;; This function calls:
  4868 ;;		_i2c_ISR
  4869 ;;		_mssp_waitForEvent
  4870 ;; This function is called by:
  4871 ;;		_i2c_masterOperation
  4872 ;; This function uses a non-reentrant model
  4873 ;;
  4874                           
  4875                           
  4876                           ;psect for function _i2c_poller
  4877  0690                     _i2c_poller:	
  4878  0690                     l4501:	
  4879                           ;i2c_master.c: 232: while(i2c_status.busy)
  4880                           
  4881                           ;incstack = 0
  4882                           ; Regs used in _i2c_poller: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4883                           
  4884  0690  0020               	movlb	0	; select bank0
  4885  0691  1C20               	btfss	_i2c_status,0
  4886  0692  0008               	return
  4887                           
  4888                           ;i2c_master.c: 233: {
  4889                           ;i2c_master.c: 234: mssp_waitForEvent((0));
  4890  0693  3000               	movlw	0
  4891  0694  3186  269B  3186   	fcall	_mssp_waitForEvent
  4892                           
  4893                           ;i2c_master.c: 235: i2c_ISR();
  4894  0697  3184  24A3  3186   	fcall	_i2c_ISR
  4895  069A  2E90               	goto	l4501
  4896  069B                     __end_of_i2c_poller:	
  4897                           
  4898                           	psect	text12
  4899  069B                     __ptext12:	
  4900 ;; *************** function _mssp_waitForEvent *****************
  4901 ;; Defined at:
  4902 ;;		line 68 in file "mcc_generated_files/i2c_driver.c"
  4903 ;; Parameters:    Size  Location     Type
  4904 ;;  timeout         1    wreg     PTR unsigned int 
  4905 ;;		 -> NULL(0), 
  4906 ;; Auto vars:     Size  Location     Type
  4907 ;;  timeout         1    0[BANK0 ] PTR unsigned int 
  4908 ;;		 -> NULL(0), 
  4909 ;; Return value:  Size  Location     Type
  4910 ;;                  1    wreg      void 
  4911 ;; Registers used:
  4912 ;;		wreg
  4913 ;; Tracked objects:
  4914 ;;		On entry : 0/0
  4915 ;;		On exit  : 0/0
  4916 ;;		Unchanged: 0/0
  4917 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4918 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4919 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4920 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4921 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4922 ;;Total ram usage:        1 bytes
  4923 ;; Hardware stack levels used:    1
  4924 ;; Hardware stack levels required when called:    6
  4925 ;; This function calls:
  4926 ;;		Nothing
  4927 ;; This function is called by:
  4928 ;;		_i2c_poller
  4929 ;; This function uses a non-reentrant model
  4930 ;;
  4931                           
  4932                           
  4933                           ;psect for function _mssp_waitForEvent
  4934  069B                     _mssp_waitForEvent:	
  4935                           
  4936                           ;i2c_driver.c: 73: if(PIR1bits.SSP1IF == 0)
  4937                           
  4938                           ;incstack = 0
  4939                           ; Regs used in _mssp_waitForEvent: [wreg]
  4940  069B  0020               	movlb	0	; select bank0
  4941  069C  1990               	btfsc	16,3	;volatile
  4942  069D  0008               	return
  4943  069E                     l55:	
  4944                           ;i2c_driver.c: 74: {
  4945                           ;i2c_driver.c: 75: while(1)
  4946                           
  4947                           
  4948                           ;i2c_driver.c: 76: {
  4949                           ;i2c_driver.c: 77: if(PIR1bits.SSP1IF) break;
  4950  069E  0020               	movlb	0	; select bank0
  4951  069F  1990               	btfsc	16,3	;volatile
  4952  06A0  0008               	return
  4953                           
  4954                           ;i2c_driver.c: 78: _delay((unsigned long)((100)*(1000000/4000000.0)));
  4955  06A1  3008               	movlw	8
  4956  06A2                     u3277:	
  4957  06A2  0B89               	decfsz	9,f
  4958  06A3  2EA2               	goto	u3277
  4959  06A4  0000               	nop
  4960  06A5  2E9E               	goto	l55
  4961  06A6                     __end_of_mssp_waitForEvent:	
  4962                           
  4963                           	psect	text13
  4964  04A3                     __ptext13:	
  4965 ;; *************** function _i2c_ISR *****************
  4966 ;; Defined at:
  4967 ;;		line 419 in file "mcc_generated_files/drivers/i2c_master.c"
  4968 ;; Parameters:    Size  Location     Type
  4969 ;;		None
  4970 ;; Auto vars:     Size  Location     Type
  4971 ;;		None
  4972 ;; Return value:  Size  Location     Type
  4973 ;;                  1    wreg      void 
  4974 ;; Registers used:
  4975 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4976 ;; Tracked objects:
  4977 ;;		On entry : 0/0
  4978 ;;		On exit  : 0/0
  4979 ;;		Unchanged: 0/0
  4980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4981 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4982 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4983 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4984 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4985 ;;Total ram usage:        1 bytes
  4986 ;; Hardware stack levels used:    1
  4987 ;; Hardware stack levels required when called:   10
  4988 ;; This function calls:
  4989 ;;		_do_I2C_DO_ACK
  4990 ;;		_do_I2C_DO_ADDRESS_NACK
  4991 ;;		_do_I2C_DO_NACK_RESTART
  4992 ;;		_do_I2C_DO_NACK_STOP
  4993 ;;		_do_I2C_IDLE
  4994 ;;		_do_I2C_RCEN
  4995 ;;		_do_I2C_RESET
  4996 ;;		_do_I2C_RX
  4997 ;;		_do_I2C_SEND_ADR_READ
  4998 ;;		_do_I2C_SEND_ADR_WRITE
  4999 ;;		_do_I2C_SEND_RESTART
  5000 ;;		_do_I2C_SEND_RESTART_READ
  5001 ;;		_do_I2C_SEND_RESTART_WRITE
  5002 ;;		_do_I2C_SEND_STOP
  5003 ;;		_do_I2C_TX
  5004 ;;		_do_I2C_TX_EMPTY
  5005 ;;		_i2c_driver_isNACK
  5006 ;;		_mssp_clearIRQ
  5007 ;; This function is called by:
  5008 ;;		_i2c_open
  5009 ;;		_i2c_poller
  5010 ;;		_INTERRUPT_InterruptManager
  5011 ;; This function uses a non-reentrant model
  5012 ;;
  5013                           
  5014                           
  5015                           ;psect for function _i2c_ISR
  5016  04A3                     _i2c_ISR:	
  5017                           
  5018                           ;Skip over the trampoline to the duplicate function for level 1
  5019  04A3  1C7E               	btfss	126,0
  5020  04A4  2CA7               	goto	l4485
  5021  04A5  3185  2D28         	ljmp	i1l4687
  5022  04A7                     _i2c_ISR$intlevel0:	
  5023  04A7                     l4485:	
  5024                           ;incstack = 0
  5025                           ; Regs used in _i2c_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5026                           
  5027                           
  5028                           ;i2c_master.c: 421: mssp_clearIRQ();
  5029  04A7  3187  27C3  3184   	fcall	_mssp_clearIRQ
  5030                           
  5031                           ;i2c_master.c: 427: if(i2c_status.addressNACKCheck && i2c_driver_isNACK())
  5032  04AA  0020               	movlb	0	; select bank0
  5033  04AB  1DA0               	btfss	_i2c_status,3
  5034  04AC  2CB7               	goto	l4493
  5035  04AD  3186  2652  3184   	fcall	_i2c_driver_isNACK
  5036  04B0  1C03               	btfss	3,0
  5037  04B1  2CB7               	goto	l4493
  5038                           
  5039                           ;i2c_master.c: 428: {
  5040                           ;i2c_master.c: 429: i2c_status.state = I2C_ADDRESS_NACK;
  5041  04B2  300F               	movlw	15
  5042  04B3  0020               	movlb	0	; select bank0
  5043  04B4  00D1               	movwf	??_i2c_ISR
  5044  04B5  0851               	movf	??_i2c_ISR,w
  5045  04B6  00A9               	movwf	_i2c_status+9
  5046  04B7                     l4493:	
  5047                           
  5048                           ;i2c_master.c: 430: }
  5049                           ;i2c_master.c: 432: i2c_status.state = fsmStateTable[i2c_status.state]();
  5050  04B7  0020               	movlb	0	; select bank0
  5051  04B8  3529               	lslf	_i2c_status+9,w
  5052  04B9  3EA0               	addlw	(low (_fsmStateTable| 0))& (0+255)
  5053  04BA  0086               	movwf	6
  5054  04BB  0187               	clrf	7
  5055  04BC  3F41               	moviw [1]fsr1
  5056  04BD  008A               	movwf	10
  5057  04BE  3F40               	moviw [0]fsr1
  5058  04BF  000A               	callw
  5059  04C0  3184               	pagesel	$
  5060  04C1  0020               	movlb	0	; select bank0
  5061  04C2  00D1               	movwf	??_i2c_ISR
  5062  04C3  0851               	movf	??_i2c_ISR,w
  5063  04C4  00A9               	movwf	_i2c_status+9
  5064  04C5  0008               	return
  5065  04C6                     __end_of_i2c_ISR:	
  5066                           
  5067                           	psect	text14
  5068  0310                     __ptext14:	
  5069 ;; *************** function _do_I2C_RX *****************
  5070 ;; Defined at:
  5071 ;;		line 357 in file "mcc_generated_files/drivers/i2c_master.c"
  5072 ;; Parameters:    Size  Location     Type
  5073 ;;		None
  5074 ;; Auto vars:     Size  Location     Type
  5075 ;;		None
  5076 ;; Return value:  Size  Location     Type
  5077 ;;                  1    wreg      enum E12337
  5078 ;; Registers used:
  5079 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5080 ;; Tracked objects:
  5081 ;;		On entry : 0/0
  5082 ;;		On exit  : 0/0
  5083 ;;		Unchanged: 0/0
  5084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5086 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5087 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5088 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5089 ;;Total ram usage:        1 bytes
  5090 ;; Hardware stack levels used:    1
  5091 ;; Hardware stack levels required when called:    9
  5092 ;; This function calls:
  5093 ;;		Absolute function
  5094 ;;		_do_I2C_DO_NACK_RESTART
  5095 ;;		_do_I2C_DO_NACK_STOP
  5096 ;;		_i2c_driver_getRXData
  5097 ;;		_i2c_driver_sendACK
  5098 ;;		_i2c_restartWrite
  5099 ;;		_rd1RegCompleteHandler
  5100 ;;		_rd2RegCompleteHandler
  5101 ;;		_rdBlkRegCompleteHandler
  5102 ;;		_returnReset
  5103 ;;		_returnStop
  5104 ;;		_wr1RegCompleteHandler
  5105 ;;		_wr2RegCompleteHandler
  5106 ;; This function is called by:
  5107 ;;		_i2c_ISR
  5108 ;;		i1_i2c_ISR
  5109 ;; This function uses a non-reentrant model
  5110 ;;
  5111                           
  5112                           
  5113                           ;psect for function _do_I2C_RX
  5114  0310                     _do_I2C_RX:	
  5115                           
  5116                           ;Skip over the trampoline to the duplicate function for level 1
  5117  0310  1C7E               	btfss	126,0
  5118  0311  2B14               	goto	l4439
  5119  0312  3183  2B52         	ljmp	i1l4621
  5120  0314                     _do_I2C_RX$intlevel0:	
  5121  0314                     l4439:	
  5122                           ;incstack = 0
  5123                           ; Regs used in _do_I2C_RX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5124                           
  5125                           
  5126                           ;i2c_master.c: 359: *i2c_status.data_ptr++ = i2c_driver_getRXData();
  5127  0314  3187  27B1  3183   	fcall	_i2c_driver_getRXData
  5128  0317  0020               	movlb	0	; select bank0
  5129  0318  00CD               	movwf	??_do_I2C_RX
  5130  0319  0822               	movf	low ((_i2c_status| 0+2)),w
  5131  031A  0086               	movwf	6
  5132  031B  0187               	clrf	7
  5133  031C  084D               	movf	??_do_I2C_RX,w
  5134  031D  0081               	movwf	1
  5135  031E  3001               	movlw	1
  5136  031F  00CD               	movwf	??_do_I2C_RX
  5137  0320  084D               	movf	??_do_I2C_RX,w
  5138  0321  07A2               	addwf	low ((_i2c_status| 0+2)),f
  5139                           
  5140                           ;i2c_master.c: 360: if(--i2c_status.data_length)
  5141  0322  3001               	movlw	1
  5142  0323  02A3               	subwf	_i2c_status+3,f
  5143  0324  3000               	movlw	0
  5144  0325  3BA4               	subwfb	_i2c_status+4,f
  5145  0326  0823               	movf	_i2c_status+3,w
  5146  0327  0424               	iorwf	_i2c_status+4,w
  5147  0328  1903               	btfsc	3,2
  5148  0329  2B2E               	goto	l451
  5149                           
  5150                           ;i2c_master.c: 361: {
  5151                           ;i2c_master.c: 362: i2c_driver_sendACK();
  5152  032A  3187  2786         	fcall	_i2c_driver_sendACK
  5153                           
  5154                           ;i2c_master.c: 363: return I2C_RCEN;
  5155  032C  3005               	movlw	5
  5156                           
  5157                           ;i2c_master.c: 364: }
  5158  032D  0008               	return
  5159  032E                     l451:	
  5160                           
  5161                           ;i2c_master.c: 365: else
  5162                           ;i2c_master.c: 366: {
  5163                           ;i2c_master.c: 367: i2c_status.bufferFree = 1;
  5164  032E  1520               	bsf	_i2c_status,2
  5165                           
  5166                           ;i2c_master.c: 368: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
  5167  032F  2B36               	goto	l4463
  5168  0330                     l4453:	
  5169                           ;i2c_master.c: 369: {
  5170                           ;i2c_master.c: 370: case i2c_restart_write:
  5171                           
  5172                           
  5173                           ;i2c_master.c: 371: case i2c_restart_read:
  5174                           ;i2c_master.c: 372: return do_I2C_DO_NACK_RESTART();
  5175  0330  3186  26E3         	fcall	_do_I2C_DO_NACK_RESTART
  5176  0332  0008               	return
  5177  0333                     l4457:	
  5178                           ;i2c_master.c: 374: case i2c_continue:
  5179                           
  5180                           ;i2c_master.c: 373: default:
  5181                           
  5182                           
  5183                           ;i2c_master.c: 375: case i2c_stop:
  5184                           ;i2c_master.c: 376: return do_I2C_DO_NACK_STOP();
  5185  0333  3186  26EB         	fcall	_do_I2C_DO_NACK_STOP
  5186                           
  5187                           ;i2c_master.c: 377: }
  5188  0335  0008               	return
  5189  0336                     l4463:	
  5190  0336  0020               	movlb	0	; select bank0
  5191  0337  0837               	movf	low ((_i2c_status| 0+23)),w
  5192  0338  00CD               	movwf	??_do_I2C_RX
  5193  0339  084D               	movf	??_do_I2C_RX,w
  5194  033A  00D6               	movwf	returnStop@p
  5195  033B  300B               	movlw	11
  5196  033C  3E20               	addlw	(low (_i2c_status| 0))& (0+255)
  5197  033D  0086               	movwf	6
  5198  033E  0187               	clrf	7
  5199  033F  3F41               	moviw [1]fsr1
  5200  0340  008A               	movwf	10
  5201  0341  3F40               	moviw [0]fsr1
  5202  0342  000A               	callw
  5203  0343  3183               	pagesel	$
  5204                           
  5205                           ; Switch size 1, requested type "space"
  5206                           ; Number of cases is 4, Range of values is 1 to 4
  5207                           ; switch strategies available:
  5208                           ; Name         Instructions Cycles
  5209                           ; simple_byte           13     7 (average)
  5210                           ; direct_byte           17     9 (fixed)
  5211                           ; jumptable            263     9 (fixed)
  5212                           ;	Chosen strategy is simple_byte
  5213  0344  3A01               	xorlw	1	; case 1
  5214  0345  1903               	skipnz
  5215  0346  2B33               	goto	l4457
  5216  0347  3A03               	xorlw	3	; case 2
  5217  0348  1903               	skipnz
  5218  0349  2B30               	goto	l4453
  5219  034A  3A01               	xorlw	1	; case 3
  5220  034B  1903               	skipnz
  5221  034C  2B30               	goto	l4453
  5222  034D  3A07               	xorlw	7	; case 4
  5223  034E  1903               	skipnz
  5224  034F  2B33               	goto	l4457
  5225  0350  2B33               	goto	l4457
  5226  0351  0008               	return
  5227  0352                     __end_of_do_I2C_RX:	
  5228                           
  5229                           	psect	text15
  5230  0230                     __ptext15:	
  5231 ;; *************** function _do_I2C_TX *****************
  5232 ;; Defined at:
  5233 ;;		line 333 in file "mcc_generated_files/drivers/i2c_master.c"
  5234 ;; Parameters:    Size  Location     Type
  5235 ;;		None
  5236 ;; Auto vars:     Size  Location     Type
  5237 ;;		None
  5238 ;; Return value:  Size  Location     Type
  5239 ;;                  1    wreg      enum E12337
  5240 ;; Registers used:
  5241 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5242 ;; Tracked objects:
  5243 ;;		On entry : 0/0
  5244 ;;		On exit  : 0/0
  5245 ;;		Unchanged: 0/0
  5246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5247 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5248 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5249 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5250 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5251 ;;Total ram usage:        3 bytes
  5252 ;; Hardware stack levels used:    1
  5253 ;; Hardware stack levels required when called:    9
  5254 ;; This function calls:
  5255 ;;		Absolute function
  5256 ;;		_do_I2C_SEND_RESTART_READ
  5257 ;;		_do_I2C_SEND_RESTART_WRITE
  5258 ;;		_do_I2C_SEND_STOP
  5259 ;;		_i2c_driver_TXData
  5260 ;;		_i2c_driver_isNACK
  5261 ;;		_i2c_restartWrite
  5262 ;;		_rd1RegCompleteHandler
  5263 ;;		_rd2RegCompleteHandler
  5264 ;;		_rdBlkRegCompleteHandler
  5265 ;;		_returnReset
  5266 ;;		_returnStop
  5267 ;;		_wr1RegCompleteHandler
  5268 ;;		_wr2RegCompleteHandler
  5269 ;; This function is called by:
  5270 ;;		_i2c_ISR
  5271 ;;		i1_i2c_ISR
  5272 ;; This function uses a non-reentrant model
  5273 ;;
  5274                           
  5275                           
  5276                           ;psect for function _do_I2C_TX
  5277  0230                     _do_I2C_TX:	
  5278                           
  5279                           ;Skip over the trampoline to the duplicate function for level 1
  5280  0230  1C7E               	btfss	126,0
  5281  0231  2A34               	goto	l4409
  5282  0232  3182  2A7E         	ljmp	i1l4591
  5283  0234                     _do_I2C_TX$intlevel0:	
  5284  0234                     l4409:	
  5285                           ;incstack = 0
  5286                           ; Regs used in _do_I2C_TX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5287                           
  5288                           
  5289                           ;i2c_master.c: 335: if(i2c_driver_isNACK())
  5290  0234  3186  2652  3182   	fcall	_i2c_driver_isNACK
  5291  0237  1803               	btfsc	3,0
  5292  0238  2A43               	goto	l4427
  5293  0239  2A5F               	goto	l435
  5294  023A                     l4413:	
  5295                           ;i2c_master.c: 338: {
  5296                           ;i2c_master.c: 339: case i2c_restart_read:
  5297                           
  5298                           ;i2c_master.c: 336: {
  5299                           ;i2c_master.c: 337: switch(i2c_status.callbackTable[i2c_dataNACK](i2c_status.callbackPay
      +                          load[i2c_dataNACK]))
  5300                           
  5301                           
  5302                           ;i2c_master.c: 340: return do_I2C_SEND_RESTART_READ();
  5303  023A  3187  2713         	fcall	_do_I2C_SEND_RESTART_READ
  5304  023C  0008               	return
  5305  023D                     l4417:	
  5306                           ;i2c_master.c: 341: case i2c_restart_write:
  5307                           
  5308                           
  5309                           ;i2c_master.c: 342: return do_I2C_SEND_RESTART_WRITE();
  5310  023D  3187  270B         	fcall	_do_I2C_SEND_RESTART_WRITE
  5311  023F  0008               	return
  5312  0240                     l4421:	
  5313                           ;i2c_master.c: 344: case i2c_continue:
  5314                           
  5315                           ;i2c_master.c: 343: default:
  5316                           
  5317                           
  5318                           ;i2c_master.c: 345: case i2c_stop:
  5319                           ;i2c_master.c: 346: return do_I2C_SEND_STOP();
  5320  0240  3186  26FB         	fcall	_do_I2C_SEND_STOP
  5321                           
  5322                           ;i2c_master.c: 347: }
  5323  0242  0008               	return
  5324  0243                     l4427:	
  5325  0243  0020               	movlb	0	; select bank0
  5326  0244  083A               	movf	low ((_i2c_status| 0+26)),w
  5327  0245  00CE               	movwf	??_do_I2C_TX
  5328  0246  084E               	movf	??_do_I2C_TX,w
  5329  0247  00D6               	movwf	returnStop@p
  5330  0248  3011               	movlw	17
  5331  0249  3E20               	addlw	(low (_i2c_status| 0))& (0+255)
  5332  024A  0086               	movwf	6
  5333  024B  0187               	clrf	7
  5334  024C  3F41               	moviw [1]fsr1
  5335  024D  008A               	movwf	10
  5336  024E  3F40               	moviw [0]fsr1
  5337  024F  000A               	callw
  5338  0250  3182               	pagesel	$
  5339                           
  5340                           ; Switch size 1, requested type "space"
  5341                           ; Number of cases is 4, Range of values is 1 to 4
  5342                           ; switch strategies available:
  5343                           ; Name         Instructions Cycles
  5344                           ; simple_byte           13     7 (average)
  5345                           ; direct_byte           17     9 (fixed)
  5346                           ; jumptable            263     9 (fixed)
  5347                           ;	Chosen strategy is simple_byte
  5348  0251  3A01               	xorlw	1	; case 1
  5349  0252  1903               	skipnz
  5350  0253  2A40               	goto	l4421
  5351  0254  3A03               	xorlw	3	; case 2
  5352  0255  1903               	skipnz
  5353  0256  2A3A               	goto	l4413
  5354  0257  3A01               	xorlw	1	; case 3
  5355  0258  1903               	skipnz
  5356  0259  2A3D               	goto	l4417
  5357  025A  3A07               	xorlw	7	; case 4
  5358  025B  1903               	skipnz
  5359  025C  2A40               	goto	l4421
  5360  025D  2A40               	goto	l4421
  5361                           
  5362                           ;i2c_master.c: 348: }
  5363  025E  0008               	return
  5364  025F                     l435:	
  5365                           
  5366                           ;i2c_master.c: 349: else
  5367                           ;i2c_master.c: 350: {
  5368                           ;i2c_master.c: 351: i2c_status.addressNACKCheck = 0;
  5369  025F  0020               	movlb	0	; select bank0
  5370  0260  11A0               	bcf	_i2c_status,3
  5371                           
  5372                           ;i2c_master.c: 352: i2c_driver_TXData(*i2c_status.data_ptr++);
  5373  0261  3002               	movlw	2
  5374  0262  3E20               	addlw	(low (_i2c_status| 0))& (0+255)
  5375  0263  0086               	movwf	6
  5376  0264  0187               	clrf	7
  5377  0265  3F40               	moviw [0]fsr1
  5378  0266  0084               	movwf	4
  5379  0267  0185               	clrf	5
  5380  0268  0A81               	incf	1,f
  5381  0269  0800               	movf	0,w
  5382  026A  3187  2750  3182   	fcall	_i2c_driver_TXData
  5383                           
  5384                           ;i2c_master.c: 353: return (--i2c_status.data_length)?I2C_TX:I2C_TX_EMPTY;
  5385  026D  3001               	movlw	1
  5386  026E  0020               	movlb	0	; select bank0
  5387  026F  02A3               	subwf	_i2c_status+3,f
  5388  0270  3000               	movlw	0
  5389  0271  3BA4               	subwfb	_i2c_status+4,f
  5390  0272  0823               	movf	_i2c_status+3,w
  5391  0273  0424               	iorwf	_i2c_status+4,w
  5392  0274  1D03               	btfss	3,2
  5393  0275  2A78               	goto	l4435
  5394  0276  3006               	movlw	6
  5395  0277  2A79               	goto	L1
  5396  0278                     l4435:	
  5397  0278  3003               	movlw	3
  5398  0279                     L1:	
  5399  0279  00CF               	movwf	_do_I2C_TX$763
  5400  027A  3000               	movlw	0
  5401  027B  00D0               	movwf	_do_I2C_TX$763+1
  5402  027C  084F               	movf	_do_I2C_TX$763,w
  5403  027D  0008               	return
  5404  027E                     __end_of_do_I2C_TX:	
  5405                           
  5406                           	psect	text16
  5407  03E6                     __ptext16:	
  5408 ;; *************** function _do_I2C_DO_ADDRESS_NACK *****************
  5409 ;; Defined at:
  5410 ;;		line 319 in file "mcc_generated_files/drivers/i2c_master.c"
  5411 ;; Parameters:    Size  Location     Type
  5412 ;;		None
  5413 ;; Auto vars:     Size  Location     Type
  5414 ;;		None
  5415 ;; Return value:  Size  Location     Type
  5416 ;;                  1    wreg      enum E12337
  5417 ;; Registers used:
  5418 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5419 ;; Tracked objects:
  5420 ;;		On entry : 0/0
  5421 ;;		On exit  : 0/0
  5422 ;;		Unchanged: 0/0
  5423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5424 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5425 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5426 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5427 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5428 ;;Total ram usage:        1 bytes
  5429 ;; Hardware stack levels used:    1
  5430 ;; Hardware stack levels required when called:    9
  5431 ;; This function calls:
  5432 ;;		Absolute function
  5433 ;;		_do_I2C_SEND_RESTART
  5434 ;;		_do_I2C_SEND_STOP
  5435 ;;		_i2c_restartWrite
  5436 ;;		_rd1RegCompleteHandler
  5437 ;;		_rd2RegCompleteHandler
  5438 ;;		_rdBlkRegCompleteHandler
  5439 ;;		_returnReset
  5440 ;;		_returnStop
  5441 ;;		_wr1RegCompleteHandler
  5442 ;;		_wr2RegCompleteHandler
  5443 ;; This function is called by:
  5444 ;;		_i2c_ISR
  5445 ;;		i1_i2c_ISR
  5446 ;; This function uses a non-reentrant model
  5447 ;;
  5448                           
  5449                           
  5450                           ;psect for function _do_I2C_DO_ADDRESS_NACK
  5451  03E6                     _do_I2C_DO_ADDRESS_NACK:	
  5452                           
  5453                           ;Skip over the trampoline to the duplicate function for level 1
  5454  03E6  1C7E               	btfss	126,0
  5455  03E7  2BEA               	goto	l4393
  5456  03E8  3184  2CC6         	ljmp	i1l4575
  5457  03EA                     _do_I2C_DO_ADDRESS_NACK$intlevel0:	
  5458  03EA                     l4393:	
  5459                           ;incstack = 0
  5460                           ; Regs used in _do_I2C_DO_ADDRESS_NACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5461                           
  5462                           
  5463                           ;i2c_master.c: 321: i2c_status.addressNACKCheck = 0;
  5464  03EA  0020               	movlb	0	; select bank0
  5465  03EB  11A0               	bcf	_i2c_status,3
  5466                           
  5467                           ;i2c_master.c: 322: i2c_status.error = I2C_FAIL;
  5468  03EC  3002               	movlw	2
  5469  03ED  00CD               	movwf	??_do_I2C_DO_ADDRESS_NACK
  5470  03EE  084D               	movf	??_do_I2C_DO_ADDRESS_NACK,w
  5471  03EF  00AA               	movwf	_i2c_status+10
  5472                           
  5473                           ;i2c_master.c: 323: switch(i2c_status.callbackTable[i2c_addressNACK](i2c_status.callback
      +                          Payload[i2c_addressNACK]))
  5474  03F0  2BF7               	goto	l4407
  5475  03F1                     l4397:	
  5476                           ;i2c_master.c: 324: {
  5477                           ;i2c_master.c: 325: case i2c_restart_read:
  5478                           
  5479                           
  5480                           ;i2c_master.c: 326: case i2c_restart_write:
  5481                           ;i2c_master.c: 327: return do_I2C_SEND_RESTART();
  5482  03F1  3187  2703         	fcall	_do_I2C_SEND_RESTART
  5483  03F3  0008               	return
  5484  03F4                     l4401:	
  5485                           ;i2c_master.c: 328: default:
  5486                           
  5487                           
  5488                           ;i2c_master.c: 329: return do_I2C_SEND_STOP();
  5489  03F4  3186  26FB         	fcall	_do_I2C_SEND_STOP
  5490                           
  5491                           ;i2c_master.c: 330: }
  5492  03F6  0008               	return
  5493  03F7                     l4407:	
  5494  03F7  0020               	movlb	0	; select bank0
  5495  03F8  0839               	movf	low ((_i2c_status| 0+25)),w
  5496  03F9  00CD               	movwf	??_do_I2C_DO_ADDRESS_NACK
  5497  03FA  084D               	movf	??_do_I2C_DO_ADDRESS_NACK,w
  5498  03FB  00D6               	movwf	returnStop@p
  5499  03FC  300F               	movlw	15
  5500  03FD  3E20               	addlw	(low (_i2c_status| 0))& (0+255)
  5501  03FE  0086               	movwf	6
  5502  03FF  0187               	clrf	7
  5503  0400  3F41               	moviw [1]fsr1
  5504  0401  008A               	movwf	10
  5505  0402  3F40               	moviw [0]fsr1
  5506  0403  000A               	callw
  5507  0404  3183               	pagesel	$
  5508                           
  5509                           ; Switch size 1, requested type "space"
  5510                           ; Number of cases is 2, Range of values is 2 to 3
  5511                           ; switch strategies available:
  5512                           ; Name         Instructions Cycles
  5513                           ; simple_byte            7     4 (average)
  5514                           ; direct_byte           13     9 (fixed)
  5515                           ; jumptable            263     9 (fixed)
  5516                           ;	Chosen strategy is simple_byte
  5517  0405  3A02               	xorlw	2	; case 2
  5518  0406  1903               	skipnz
  5519  0407  2BF1               	goto	l4397
  5520  0408  3A01               	xorlw	1	; case 3
  5521  0409  1903               	skipnz
  5522  040A  2BF1               	goto	l4397
  5523  040B  2BF4               	goto	l4401
  5524  040C  0008               	return
  5525  040D                     __end_of_do_I2C_DO_ADDRESS_NACK:	
  5526                           
  5527                           	psect	text17
  5528  06E3                     __ptext17:	
  5529 ;; *************** function _do_I2C_DO_NACK_RESTART *****************
  5530 ;; Defined at:
  5531 ;;		line 311 in file "mcc_generated_files/drivers/i2c_master.c"
  5532 ;; Parameters:    Size  Location     Type
  5533 ;;		None
  5534 ;; Auto vars:     Size  Location     Type
  5535 ;;		None
  5536 ;; Return value:  Size  Location     Type
  5537 ;;                  1    wreg      enum E12337
  5538 ;; Registers used:
  5539 ;;		wreg, status,2, status,0, pclath, cstack
  5540 ;; Tracked objects:
  5541 ;;		On entry : 0/0
  5542 ;;		On exit  : 0/0
  5543 ;;		Unchanged: 0/0
  5544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5545 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5546 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5547 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5548 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5549 ;;Total ram usage:        0 bytes
  5550 ;; Hardware stack levels used:    1
  5551 ;; Hardware stack levels required when called:    7
  5552 ;; This function calls:
  5553 ;;		_i2c_driver_sendNACK
  5554 ;; This function is called by:
  5555 ;;		_do_I2C_RX
  5556 ;;		_i2c_ISR
  5557 ;;		i1_i2c_ISR
  5558 ;; This function uses a non-reentrant model
  5559 ;;
  5560                           
  5561                           
  5562                           ;psect for function _do_I2C_DO_NACK_RESTART
  5563  06E3                     _do_I2C_DO_NACK_RESTART:	
  5564                           
  5565                           ;Skip over the trampoline to the duplicate function for level 1
  5566  06E3  1C7E               	btfss	126,0
  5567  06E4  2EE7               	goto	l2111
  5568  06E5  3187  2F8A         	ljmp	i1l2497
  5569  06E7                     _do_I2C_DO_NACK_RESTART$intlevel0:	
  5570  06E7                     l2111:	
  5571                           ;incstack = 0
  5572                           ; Regs used in _do_I2C_DO_NACK_RESTART: [wreg+status,2+status,0+pclath+cstack]
  5573                           
  5574                           
  5575                           ;i2c_master.c: 313: i2c_driver_sendNACK();
  5576  06E7  3187  2782         	fcall	_i2c_driver_sendNACK
  5577                           
  5578                           ;i2c_master.c: 314: return I2C_SEND_RESTART;
  5579  06E9  3009               	movlw	9
  5580  06EA  0008               	return
  5581  06EB                     __end_of_do_I2C_DO_NACK_RESTART:	
  5582                           
  5583                           	psect	text18
  5584  06EB                     __ptext18:	
  5585 ;; *************** function _do_I2C_DO_NACK_STOP *****************
  5586 ;; Defined at:
  5587 ;;		line 305 in file "mcc_generated_files/drivers/i2c_master.c"
  5588 ;; Parameters:    Size  Location     Type
  5589 ;;		None
  5590 ;; Auto vars:     Size  Location     Type
  5591 ;;		None
  5592 ;; Return value:  Size  Location     Type
  5593 ;;                  1    wreg      enum E12337
  5594 ;; Registers used:
  5595 ;;		wreg, status,2, status,0, pclath, cstack
  5596 ;; Tracked objects:
  5597 ;;		On entry : 0/0
  5598 ;;		On exit  : 0/0
  5599 ;;		Unchanged: 0/0
  5600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5601 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5602 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5603 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5604 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5605 ;;Total ram usage:        0 bytes
  5606 ;; Hardware stack levels used:    1
  5607 ;; Hardware stack levels required when called:    7
  5608 ;; This function calls:
  5609 ;;		_i2c_driver_sendNACK
  5610 ;; This function is called by:
  5611 ;;		_do_I2C_RX
  5612 ;;		_i2c_ISR
  5613 ;;		i1_i2c_ISR
  5614 ;; This function uses a non-reentrant model
  5615 ;;
  5616                           
  5617                           
  5618                           ;psect for function _do_I2C_DO_NACK_STOP
  5619  06EB                     _do_I2C_DO_NACK_STOP:	
  5620                           
  5621                           ;Skip over the trampoline to the duplicate function for level 1
  5622  06EB  1C7E               	btfss	126,0
  5623  06EC  2EEF               	goto	l2105
  5624  06ED  3187  2F8E         	ljmp	i1l2491
  5625  06EF                     _do_I2C_DO_NACK_STOP$intlevel0:	
  5626  06EF                     l2105:	
  5627                           ;incstack = 0
  5628                           ; Regs used in _do_I2C_DO_NACK_STOP: [wreg+status,2+status,0+pclath+cstack]
  5629                           
  5630                           
  5631                           ;i2c_master.c: 307: i2c_driver_sendNACK();
  5632  06EF  3187  2782         	fcall	_i2c_driver_sendNACK
  5633                           
  5634                           ;i2c_master.c: 308: return I2C_SEND_STOP;
  5635  06F1  300A               	movlw	10
  5636  06F2  0008               	return
  5637  06F3                     __end_of_do_I2C_DO_NACK_STOP:	
  5638                           
  5639                           	psect	text19
  5640  06F3                     __ptext19:	
  5641 ;; *************** function _do_I2C_DO_ACK *****************
  5642 ;; Defined at:
  5643 ;;		line 299 in file "mcc_generated_files/drivers/i2c_master.c"
  5644 ;; Parameters:    Size  Location     Type
  5645 ;;		None
  5646 ;; Auto vars:     Size  Location     Type
  5647 ;;		None
  5648 ;; Return value:  Size  Location     Type
  5649 ;;                  1    wreg      enum E12337
  5650 ;; Registers used:
  5651 ;;		wreg, status,2, status,0, pclath, cstack
  5652 ;; Tracked objects:
  5653 ;;		On entry : 0/0
  5654 ;;		On exit  : 0/0
  5655 ;;		Unchanged: 0/0
  5656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5657 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5658 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5659 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5660 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5661 ;;Total ram usage:        0 bytes
  5662 ;; Hardware stack levels used:    1
  5663 ;; Hardware stack levels required when called:    7
  5664 ;; This function calls:
  5665 ;;		_i2c_driver_sendACK
  5666 ;; This function is called by:
  5667 ;;		_i2c_ISR
  5668 ;;		i1_i2c_ISR
  5669 ;; This function uses a non-reentrant model
  5670 ;;
  5671                           
  5672                           
  5673                           ;psect for function _do_I2C_DO_ACK
  5674  06F3                     _do_I2C_DO_ACK:	
  5675                           
  5676                           ;Skip over the trampoline to the duplicate function for level 1
  5677  06F3  1C7E               	btfss	126,0
  5678  06F4  2EF7               	goto	l2211
  5679  06F5  3187  2F92         	ljmp	i1l2683
  5680  06F7                     _do_I2C_DO_ACK$intlevel0:	
  5681  06F7                     l2211:	
  5682                           ;incstack = 0
  5683                           ; Regs used in _do_I2C_DO_ACK: [wreg+status,2+status,0+pclath+cstack]
  5684                           
  5685                           
  5686                           ;i2c_master.c: 301: i2c_driver_sendACK();
  5687  06F7  3187  2786         	fcall	_i2c_driver_sendACK
  5688                           
  5689                           ;i2c_master.c: 302: return I2C_RCEN;
  5690  06F9  3005               	movlw	5
  5691  06FA  0008               	return
  5692  06FB                     __end_of_do_I2C_DO_ACK:	
  5693                           
  5694                           	psect	text20
  5695  06D0                     __ptext20:	
  5696 ;; *************** function _do_I2C_RCEN *****************
  5697 ;; Defined at:
  5698 ;;		line 292 in file "mcc_generated_files/drivers/i2c_master.c"
  5699 ;; Parameters:    Size  Location     Type
  5700 ;;		None
  5701 ;; Auto vars:     Size  Location     Type
  5702 ;;		None
  5703 ;; Return value:  Size  Location     Type
  5704 ;;                  1    wreg      enum E12337
  5705 ;; Registers used:
  5706 ;;		wreg, status,2, status,0, pclath, cstack
  5707 ;; Tracked objects:
  5708 ;;		On entry : 0/0
  5709 ;;		On exit  : 0/0
  5710 ;;		Unchanged: 0/0
  5711 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5712 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5713 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5714 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5715 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5716 ;;Total ram usage:        0 bytes
  5717 ;; Hardware stack levels used:    1
  5718 ;; Hardware stack levels required when called:    7
  5719 ;; This function calls:
  5720 ;;		_i2c_driver_startRX
  5721 ;; This function is called by:
  5722 ;;		_i2c_ISR
  5723 ;;		i1_i2c_ISR
  5724 ;; This function uses a non-reentrant model
  5725 ;;
  5726                           
  5727                           
  5728                           ;psect for function _do_I2C_RCEN
  5729  06D0                     _do_I2C_RCEN:	
  5730                           
  5731                           ;Skip over the trampoline to the duplicate function for level 1
  5732  06D0  1C7E               	btfss	126,0
  5733  06D1  2ED4               	goto	l2203
  5734  06D2  3187  2F6E         	ljmp	i1l2675
  5735  06D4                     _do_I2C_RCEN$intlevel0:	
  5736  06D4                     l2203:	
  5737                           ;incstack = 0
  5738                           ; Regs used in _do_I2C_RCEN: [wreg+status,2+status,0+pclath+cstack]
  5739                           
  5740                           
  5741                           ;i2c_master.c: 294: i2c_status.addressNACKCheck = 0;
  5742  06D4  0020               	movlb	0	; select bank0
  5743  06D5  11A0               	bcf	_i2c_status,3
  5744                           
  5745                           ;i2c_master.c: 295: i2c_driver_startRX();
  5746  06D6  3187  27B4         	fcall	_i2c_driver_startRX
  5747                           
  5748                           ;i2c_master.c: 296: return I2C_RX;
  5749  06D8  3004               	movlw	4
  5750  06D9  0008               	return
  5751  06DA                     __end_of_do_I2C_RCEN:	
  5752                           
  5753                           	psect	text21
  5754  06A6                     __ptext21:	
  5755 ;; *************** function _do_I2C_SEND_ADR_WRITE *****************
  5756 ;; Defined at:
  5757 ;;		line 285 in file "mcc_generated_files/drivers/i2c_master.c"
  5758 ;; Parameters:    Size  Location     Type
  5759 ;;		None
  5760 ;; Auto vars:     Size  Location     Type
  5761 ;;		None
  5762 ;; Return value:  Size  Location     Type
  5763 ;;                  1    wreg      enum E12337
  5764 ;; Registers used:
  5765 ;;		wreg, status,2, status,0, pclath, cstack
  5766 ;; Tracked objects:
  5767 ;;		On entry : 0/0
  5768 ;;		On exit  : 0/0
  5769 ;;		Unchanged: 0/0
  5770 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5771 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5772 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5773 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5774 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5775 ;;Total ram usage:        0 bytes
  5776 ;; Hardware stack levels used:    1
  5777 ;; Hardware stack levels required when called:    7
  5778 ;; This function calls:
  5779 ;;		_i2c_driver_TXData
  5780 ;; This function is called by:
  5781 ;;		_i2c_ISR
  5782 ;;		i1_i2c_ISR
  5783 ;; This function uses a non-reentrant model
  5784 ;;
  5785                           
  5786                           
  5787                           ;psect for function _do_I2C_SEND_ADR_WRITE
  5788  06A6                     _do_I2C_SEND_ADR_WRITE:	
  5789                           
  5790                           ;Skip over the trampoline to the duplicate function for level 1
  5791  06A6  1C7E               	btfss	126,0
  5792  06A7  2EAA               	goto	l2195
  5793  06A8  3187  2F2A         	ljmp	i1l2667
  5794  06AA                     _do_I2C_SEND_ADR_WRITE$intlevel0:	
  5795  06AA                     l2195:	
  5796                           ;incstack = 0
  5797                           ; Regs used in _do_I2C_SEND_ADR_WRITE: [wreg+status,2+status,0+pclath+cstack]
  5798                           
  5799                           
  5800                           ;i2c_master.c: 287: i2c_status.addressNACKCheck = 1;
  5801  06AA  0020               	movlb	0	; select bank0
  5802  06AB  15A0               	bsf	_i2c_status,3
  5803                           
  5804                           ;i2c_master.c: 288: i2c_driver_TXData(i2c_status.address << 1);
  5805  06AC  3521               	lslf	_i2c_status+1,w
  5806  06AD  3187  2750         	fcall	_i2c_driver_TXData
  5807                           
  5808                           ;i2c_master.c: 289: return I2C_TX;
  5809  06AF  3003               	movlw	3
  5810  06B0  0008               	return
  5811  06B1                     __end_of_do_I2C_SEND_ADR_WRITE:	
  5812                           
  5813                           	psect	text22
  5814  066C                     __ptext22:	
  5815 ;; *************** function _do_I2C_SEND_ADR_READ *****************
  5816 ;; Defined at:
  5817 ;;		line 278 in file "mcc_generated_files/drivers/i2c_master.c"
  5818 ;; Parameters:    Size  Location     Type
  5819 ;;		None
  5820 ;; Auto vars:     Size  Location     Type
  5821 ;;		None
  5822 ;; Return value:  Size  Location     Type
  5823 ;;                  1    wreg      enum E12337
  5824 ;; Registers used:
  5825 ;;		wreg, status,2, status,0, pclath, cstack
  5826 ;; Tracked objects:
  5827 ;;		On entry : 0/0
  5828 ;;		On exit  : 0/0
  5829 ;;		Unchanged: 0/0
  5830 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5831 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5832 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5833 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5834 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5835 ;;Total ram usage:        0 bytes
  5836 ;; Hardware stack levels used:    1
  5837 ;; Hardware stack levels required when called:    7
  5838 ;; This function calls:
  5839 ;;		_i2c_driver_TXData
  5840 ;; This function is called by:
  5841 ;;		_i2c_ISR
  5842 ;;		i1_i2c_ISR
  5843 ;; This function uses a non-reentrant model
  5844 ;;
  5845                           
  5846                           
  5847                           ;psect for function _do_I2C_SEND_ADR_READ
  5848  066C                     _do_I2C_SEND_ADR_READ:	
  5849                           
  5850                           ;Skip over the trampoline to the duplicate function for level 1
  5851  066C  1C7E               	btfss	126,0
  5852  066D  2E70               	goto	l2187
  5853  066E  3187  2F1B         	ljmp	i1l2659
  5854  0670                     _do_I2C_SEND_ADR_READ$intlevel0:	
  5855  0670                     l2187:	
  5856                           ;incstack = 0
  5857                           ; Regs used in _do_I2C_SEND_ADR_READ: [wreg+status,2+status,0+pclath+cstack]
  5858                           
  5859                           
  5860                           ;i2c_master.c: 280: i2c_status.addressNACKCheck = 1;
  5861  0670  0020               	movlb	0	; select bank0
  5862  0671  15A0               	bsf	_i2c_status,3
  5863                           
  5864                           ;i2c_master.c: 281: i2c_driver_TXData(i2c_status.address << 1 | 1);
  5865  0672  1403               	setc
  5866  0673  0D21               	rlf	_i2c_status+1,w
  5867  0674  3187  2750         	fcall	_i2c_driver_TXData
  5868                           
  5869                           ;i2c_master.c: 282: return I2C_RCEN;
  5870  0676  3005               	movlw	5
  5871  0677  0008               	return
  5872  0678                     __end_of_do_I2C_SEND_ADR_READ:	
  5873                           
  5874                           	psect	text23
  5875  06FB                     __ptext23:	
  5876 ;; *************** function _do_I2C_SEND_STOP *****************
  5877 ;; Defined at:
  5878 ;;		line 272 in file "mcc_generated_files/drivers/i2c_master.c"
  5879 ;; Parameters:    Size  Location     Type
  5880 ;;		None
  5881 ;; Auto vars:     Size  Location     Type
  5882 ;;		None
  5883 ;; Return value:  Size  Location     Type
  5884 ;;                  1    wreg      enum E12337
  5885 ;; Registers used:
  5886 ;;		wreg, status,2, status,0, pclath, cstack
  5887 ;; Tracked objects:
  5888 ;;		On entry : 0/0
  5889 ;;		On exit  : 0/0
  5890 ;;		Unchanged: 0/0
  5891 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5892 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5893 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5894 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5895 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5896 ;;Total ram usage:        0 bytes
  5897 ;; Hardware stack levels used:    1
  5898 ;; Hardware stack levels required when called:    7
  5899 ;; This function calls:
  5900 ;;		_i2c_driver_stop
  5901 ;; This function is called by:
  5902 ;;		_do_I2C_DO_ADDRESS_NACK
  5903 ;;		_do_I2C_TX
  5904 ;;		_do_I2C_TX_EMPTY
  5905 ;;		_i2c_ISR
  5906 ;;		i1_i2c_ISR
  5907 ;; This function uses a non-reentrant model
  5908 ;;
  5909                           
  5910                           
  5911                           ;psect for function _do_I2C_SEND_STOP
  5912  06FB                     _do_I2C_SEND_STOP:	
  5913                           
  5914                           ;Skip over the trampoline to the duplicate function for level 1
  5915  06FB  1C7E               	btfss	126,0
  5916  06FC  2EFF               	goto	l2099
  5917  06FD  3187  2F96         	ljmp	i1l2485
  5918  06FF                     _do_I2C_SEND_STOP$intlevel0:	
  5919  06FF                     l2099:	
  5920                           ;incstack = 0
  5921                           ; Regs used in _do_I2C_SEND_STOP: [wreg+status,2+status,0+pclath+cstack]
  5922                           
  5923                           
  5924                           ;i2c_master.c: 274: i2c_driver_stop();
  5925  06FF  3187  27B7         	fcall	_i2c_driver_stop
  5926                           
  5927                           ;i2c_master.c: 275: return I2C_IDLE;
  5928  0701  3000               	movlw	0
  5929  0702  0008               	return
  5930  0703                     __end_of_do_I2C_SEND_STOP:	
  5931                           
  5932                           	psect	text24
  5933  0703                     __ptext24:	
  5934 ;; *************** function _do_I2C_SEND_RESTART *****************
  5935 ;; Defined at:
  5936 ;;		line 266 in file "mcc_generated_files/drivers/i2c_master.c"
  5937 ;; Parameters:    Size  Location     Type
  5938 ;;		None
  5939 ;; Auto vars:     Size  Location     Type
  5940 ;;		None
  5941 ;; Return value:  Size  Location     Type
  5942 ;;                  1    wreg      enum E12337
  5943 ;; Registers used:
  5944 ;;		wreg, status,2, status,0, pclath, cstack
  5945 ;; Tracked objects:
  5946 ;;		On entry : 0/0
  5947 ;;		On exit  : 0/0
  5948 ;;		Unchanged: 0/0
  5949 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5950 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5951 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5952 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5953 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5954 ;;Total ram usage:        0 bytes
  5955 ;; Hardware stack levels used:    1
  5956 ;; Hardware stack levels required when called:    7
  5957 ;; This function calls:
  5958 ;;		_i2c_driver_restart
  5959 ;; This function is called by:
  5960 ;;		_do_I2C_DO_ADDRESS_NACK
  5961 ;;		_do_I2C_TX_EMPTY
  5962 ;;		_i2c_ISR
  5963 ;;		i1_i2c_ISR
  5964 ;; This function uses a non-reentrant model
  5965 ;;
  5966                           
  5967                           
  5968                           ;psect for function _do_I2C_SEND_RESTART
  5969  0703                     _do_I2C_SEND_RESTART:	
  5970                           
  5971                           ;Skip over the trampoline to the duplicate function for level 1
  5972  0703  1C7E               	btfss	126,0
  5973  0704  2F07               	goto	l2093
  5974  0705  3187  2F9A         	ljmp	i1l2479
  5975  0707                     _do_I2C_SEND_RESTART$intlevel0:	
  5976  0707                     l2093:	
  5977                           ;incstack = 0
  5978                           ; Regs used in _do_I2C_SEND_RESTART: [wreg+status,2+status,0+pclath+cstack]
  5979                           
  5980                           
  5981                           ;i2c_master.c: 268: i2c_driver_restart();
  5982  0707  3187  27BA         	fcall	_i2c_driver_restart
  5983                           
  5984                           ;i2c_master.c: 269: return I2C_SEND_ADR_READ;
  5985  0709  3001               	movlw	1
  5986  070A  0008               	return
  5987  070B                     __end_of_do_I2C_SEND_RESTART:	
  5988                           
  5989                           	psect	text25
  5990  070B                     __ptext25:	
  5991 ;; *************** function _do_I2C_SEND_RESTART_WRITE *****************
  5992 ;; Defined at:
  5993 ;;		line 260 in file "mcc_generated_files/drivers/i2c_master.c"
  5994 ;; Parameters:    Size  Location     Type
  5995 ;;		None
  5996 ;; Auto vars:     Size  Location     Type
  5997 ;;		None
  5998 ;; Return value:  Size  Location     Type
  5999 ;;                  1    wreg      enum E12337
  6000 ;; Registers used:
  6001 ;;		wreg, status,2, status,0, pclath, cstack
  6002 ;; Tracked objects:
  6003 ;;		On entry : 0/0
  6004 ;;		On exit  : 0/0
  6005 ;;		Unchanged: 0/0
  6006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6007 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6008 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6009 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6010 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6011 ;;Total ram usage:        0 bytes
  6012 ;; Hardware stack levels used:    1
  6013 ;; Hardware stack levels required when called:    7
  6014 ;; This function calls:
  6015 ;;		_i2c_driver_restart
  6016 ;; This function is called by:
  6017 ;;		_do_I2C_TX
  6018 ;;		_i2c_ISR
  6019 ;;		i1_i2c_ISR
  6020 ;; This function uses a non-reentrant model
  6021 ;;
  6022                           
  6023                           
  6024                           ;psect for function _do_I2C_SEND_RESTART_WRITE
  6025  070B                     _do_I2C_SEND_RESTART_WRITE:	
  6026                           
  6027                           ;Skip over the trampoline to the duplicate function for level 1
  6028  070B  1C7E               	btfss	126,0
  6029  070C  2F0F               	goto	l2087
  6030  070D  3187  2F9E         	ljmp	i1l2473
  6031  070F                     _do_I2C_SEND_RESTART_WRITE$intlevel0:	
  6032  070F                     l2087:	
  6033                           ;incstack = 0
  6034                           ; Regs used in _do_I2C_SEND_RESTART_WRITE: [wreg+status,2+status,0+pclath+cstack]
  6035                           
  6036                           
  6037                           ;i2c_master.c: 262: i2c_driver_restart();
  6038  070F  3187  27BA         	fcall	_i2c_driver_restart
  6039                           
  6040                           ;i2c_master.c: 263: return I2C_SEND_ADR_WRITE;
  6041  0711  3002               	movlw	2
  6042  0712  0008               	return
  6043  0713                     __end_of_do_I2C_SEND_RESTART_WRITE:	
  6044                           
  6045                           	psect	text26
  6046  0713                     __ptext26:	
  6047 ;; *************** function _do_I2C_SEND_RESTART_READ *****************
  6048 ;; Defined at:
  6049 ;;		line 254 in file "mcc_generated_files/drivers/i2c_master.c"
  6050 ;; Parameters:    Size  Location     Type
  6051 ;;		None
  6052 ;; Auto vars:     Size  Location     Type
  6053 ;;		None
  6054 ;; Return value:  Size  Location     Type
  6055 ;;                  1    wreg      enum E12337
  6056 ;; Registers used:
  6057 ;;		wreg, status,2, status,0, pclath, cstack
  6058 ;; Tracked objects:
  6059 ;;		On entry : 0/0
  6060 ;;		On exit  : 0/0
  6061 ;;		Unchanged: 0/0
  6062 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6063 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6064 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6065 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6066 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6067 ;;Total ram usage:        0 bytes
  6068 ;; Hardware stack levels used:    1
  6069 ;; Hardware stack levels required when called:    7
  6070 ;; This function calls:
  6071 ;;		_i2c_driver_restart
  6072 ;; This function is called by:
  6073 ;;		_do_I2C_TX
  6074 ;;		_i2c_ISR
  6075 ;;		i1_i2c_ISR
  6076 ;; This function uses a non-reentrant model
  6077 ;;
  6078                           
  6079                           
  6080                           ;psect for function _do_I2C_SEND_RESTART_READ
  6081  0713                     _do_I2C_SEND_RESTART_READ:	
  6082                           
  6083                           ;Skip over the trampoline to the duplicate function for level 1
  6084  0713  1C7E               	btfss	126,0
  6085  0714  2F17               	goto	l2081
  6086  0715  3187  2FA2         	ljmp	i1l2467
  6087  0717                     _do_I2C_SEND_RESTART_READ$intlevel0:	
  6088  0717                     l2081:	
  6089                           ;incstack = 0
  6090                           ; Regs used in _do_I2C_SEND_RESTART_READ: [wreg+status,2+status,0+pclath+cstack]
  6091                           
  6092                           
  6093                           ;i2c_master.c: 256: i2c_driver_restart();
  6094  0717  3187  27BA         	fcall	_i2c_driver_restart
  6095                           
  6096                           ;i2c_master.c: 257: return I2C_SEND_ADR_READ;
  6097  0719  3001               	movlw	1
  6098  071A  0008               	return
  6099  071B                     __end_of_do_I2C_SEND_RESTART_READ:	
  6100                           
  6101                           	psect	text27
  6102  06DA                     __ptext27:	
  6103 ;; *************** function _do_I2C_IDLE *****************
  6104 ;; Defined at:
  6105 ;;		line 247 in file "mcc_generated_files/drivers/i2c_master.c"
  6106 ;; Parameters:    Size  Location     Type
  6107 ;;		None
  6108 ;; Auto vars:     Size  Location     Type
  6109 ;;		None
  6110 ;; Return value:  Size  Location     Type
  6111 ;;                  1    wreg      enum E12337
  6112 ;; Registers used:
  6113 ;;		wreg, status,2
  6114 ;; Tracked objects:
  6115 ;;		On entry : 0/0
  6116 ;;		On exit  : 0/0
  6117 ;;		Unchanged: 0/0
  6118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6119 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6120 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6121 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6122 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6123 ;;Total ram usage:        0 bytes
  6124 ;; Hardware stack levels used:    1
  6125 ;; Hardware stack levels required when called:    6
  6126 ;; This function calls:
  6127 ;;		Nothing
  6128 ;; This function is called by:
  6129 ;;		_i2c_ISR
  6130 ;;		i1_i2c_ISR
  6131 ;; This function uses a non-reentrant model
  6132 ;;
  6133                           
  6134                           
  6135                           ;psect for function _do_I2C_IDLE
  6136  06DA                     _do_I2C_IDLE:	
  6137                           
  6138                           ;Skip over the trampoline to the duplicate function for level 1
  6139  06DA  1C7E               	btfss	126,0
  6140  06DB  2EDE               	goto	l2179
  6141  06DC  3187  2F74         	ljmp	i1l2651
  6142  06DE                     _do_I2C_IDLE$intlevel0:	
  6143  06DE                     l2179:	
  6144                           ;incstack = 0
  6145                           ; Regs used in _do_I2C_IDLE: [wreg+status,2]
  6146                           
  6147                           
  6148                           ;i2c_master.c: 249: i2c_status.busy = 0;
  6149  06DE  0020               	movlb	0	; select bank0
  6150  06DF  1020               	bcf	_i2c_status,0
  6151                           
  6152                           ;i2c_master.c: 250: i2c_status.error = I2C_NOERR;
  6153  06E0  01AA               	clrf	_i2c_status+10
  6154                           
  6155                           ;i2c_master.c: 251: return I2C_RESET;
  6156  06E1  300E               	movlw	14
  6157  06E2  0008               	return
  6158  06E3                     __end_of_do_I2C_IDLE:	
  6159                           
  6160                           	psect	text28
  6161  06B1                     __ptext28:	
  6162 ;; *************** function _do_I2C_RESET *****************
  6163 ;; Defined at:
  6164 ;;		line 239 in file "mcc_generated_files/drivers/i2c_master.c"
  6165 ;; Parameters:    Size  Location     Type
  6166 ;;		None
  6167 ;; Auto vars:     Size  Location     Type
  6168 ;;		None
  6169 ;; Return value:  Size  Location     Type
  6170 ;;                  1    wreg      enum E12337
  6171 ;; Registers used:
  6172 ;;		wreg, status,2, status,0, pclath, cstack
  6173 ;; Tracked objects:
  6174 ;;		On entry : 0/0
  6175 ;;		On exit  : 0/0
  6176 ;;		Unchanged: 0/0
  6177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6178 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6179 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6180 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6181 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6182 ;;Total ram usage:        0 bytes
  6183 ;; Hardware stack levels used:    1
  6184 ;; Hardware stack levels required when called:    7
  6185 ;; This function calls:
  6186 ;;		_i2c_driver_resetBus
  6187 ;; This function is called by:
  6188 ;;		_i2c_ISR
  6189 ;;		i1_i2c_ISR
  6190 ;; This function uses a non-reentrant model
  6191 ;;
  6192                           
  6193                           
  6194                           ;psect for function _do_I2C_RESET
  6195  06B1                     _do_I2C_RESET:	
  6196                           
  6197                           ;Skip over the trampoline to the duplicate function for level 1
  6198  06B1  1C7E               	btfss	126,0
  6199  06B2  2EB5               	goto	l2169
  6200  06B3  3187  2F31         	ljmp	i1l2641
  6201  06B5                     _do_I2C_RESET$intlevel0:	
  6202  06B5                     l2169:	
  6203                           ;incstack = 0
  6204                           ; Regs used in _do_I2C_RESET: [wreg+status,2+status,0+pclath+cstack]
  6205                           
  6206                           
  6207                           ;i2c_master.c: 241: i2c_driver_resetBus();
  6208  06B5  3187  27E4         	fcall	_i2c_driver_resetBus
  6209                           
  6210                           ;i2c_master.c: 242: i2c_status.busy = 0;
  6211  06B7  0020               	movlb	0	; select bank0
  6212  06B8  1020               	bcf	_i2c_status,0
  6213                           
  6214                           ;i2c_master.c: 243: i2c_status.error = I2C_NOERR;
  6215  06B9  01AA               	clrf	_i2c_status+10
  6216                           
  6217                           ;i2c_master.c: 244: return I2C_RESET;
  6218  06BA  300E               	movlw	14
  6219  06BB  0008               	return
  6220  06BC                     __end_of_do_I2C_RESET:	
  6221                           
  6222                           	psect	text29
  6223  0390                     __ptext29:	
  6224 ;; *************** function _do_I2C_TX_EMPTY *****************
  6225 ;; Defined at:
  6226 ;;		line 382 in file "mcc_generated_files/drivers/i2c_master.c"
  6227 ;; Parameters:    Size  Location     Type
  6228 ;;		None
  6229 ;; Auto vars:     Size  Location     Type
  6230 ;;		None
  6231 ;; Return value:  Size  Location     Type
  6232 ;;                  1    wreg      enum E12337
  6233 ;; Registers used:
  6234 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6235 ;; Tracked objects:
  6236 ;;		On entry : 0/0
  6237 ;;		On exit  : 0/0
  6238 ;;		Unchanged: 0/0
  6239 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6240 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6241 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6242 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6243 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6244 ;;Total ram usage:        1 bytes
  6245 ;; Hardware stack levels used:    1
  6246 ;; Hardware stack levels required when called:    9
  6247 ;; This function calls:
  6248 ;;		Absolute function
  6249 ;;		_do_I2C_SEND_RESTART
  6250 ;;		_do_I2C_SEND_STOP
  6251 ;;		_i2c_restartWrite
  6252 ;;		_mssp_setIRQ
  6253 ;;		_rd1RegCompleteHandler
  6254 ;;		_rd2RegCompleteHandler
  6255 ;;		_rdBlkRegCompleteHandler
  6256 ;;		_returnReset
  6257 ;;		_returnStop
  6258 ;;		_wr1RegCompleteHandler
  6259 ;;		_wr2RegCompleteHandler
  6260 ;; This function is called by:
  6261 ;;		_i2c_ISR
  6262 ;;		i1_i2c_ISR
  6263 ;; This function uses a non-reentrant model
  6264 ;;
  6265                           
  6266                           
  6267                           ;psect for function _do_I2C_TX_EMPTY
  6268  0390                     _do_I2C_TX_EMPTY:	
  6269                           
  6270                           ;Skip over the trampoline to the duplicate function for level 1
  6271  0390  1C7E               	btfss	126,0
  6272  0391  2B94               	goto	l4465
  6273  0392  3183  2BBD         	ljmp	i1l4647
  6274  0394                     _do_I2C_TX_EMPTY$intlevel0:	
  6275  0394                     l4465:	
  6276                           ;incstack = 0
  6277                           ; Regs used in _do_I2C_TX_EMPTY: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6278                           
  6279                           
  6280                           ;i2c_master.c: 384: i2c_status.bufferFree = 1;
  6281  0394  0020               	movlb	0	; select bank0
  6282  0395  1520               	bsf	_i2c_status,2
  6283                           
  6284                           ;i2c_master.c: 385: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
  6285  0396  2BA1               	goto	l4483
  6286  0397                     l4467:	
  6287                           ;i2c_master.c: 386: {
  6288                           ;i2c_master.c: 387: case i2c_restart_read:
  6289                           
  6290                           
  6291                           ;i2c_master.c: 388: case i2c_restart_write:
  6292                           ;i2c_master.c: 389: return do_I2C_SEND_RESTART();
  6293  0397  3187  2703         	fcall	_do_I2C_SEND_RESTART
  6294  0399  0008               	return
  6295  039A                     l4471:	
  6296                           ;i2c_master.c: 390: case i2c_continue:
  6297                           
  6298                           
  6299                           ;i2c_master.c: 391: mssp_setIRQ();
  6300  039A  3187  27AE         	fcall	_mssp_setIRQ
  6301                           
  6302                           ;i2c_master.c: 392: return I2C_TX;
  6303  039C  3003               	movlw	3
  6304  039D  0008               	return
  6305  039E                     l4477:	
  6306                           ;i2c_master.c: 394: case i2c_stop:
  6307                           
  6308                           ;i2c_master.c: 393: default:
  6309                           
  6310                           
  6311                           ;i2c_master.c: 395: return do_I2C_SEND_STOP();
  6312  039E  3186  26FB         	fcall	_do_I2C_SEND_STOP
  6313                           
  6314                           ;i2c_master.c: 396: }
  6315  03A0  0008               	return
  6316  03A1                     l4483:	
  6317  03A1  0020               	movlb	0	; select bank0
  6318  03A2  0837               	movf	low ((_i2c_status| 0+23)),w
  6319  03A3  00CD               	movwf	??_do_I2C_TX_EMPTY
  6320  03A4  084D               	movf	??_do_I2C_TX_EMPTY,w
  6321  03A5  00D6               	movwf	returnStop@p
  6322  03A6  300B               	movlw	11
  6323  03A7  3E20               	addlw	(low (_i2c_status| 0))& (0+255)
  6324  03A8  0086               	movwf	6
  6325  03A9  0187               	clrf	7
  6326  03AA  3F41               	moviw [1]fsr1
  6327  03AB  008A               	movwf	10
  6328  03AC  3F40               	moviw [0]fsr1
  6329  03AD  000A               	callw
  6330  03AE  3183               	pagesel	$
  6331                           
  6332                           ; Switch size 1, requested type "space"
  6333                           ; Number of cases is 4, Range of values is 1 to 4
  6334                           ; switch strategies available:
  6335                           ; Name         Instructions Cycles
  6336                           ; simple_byte           13     7 (average)
  6337                           ; direct_byte           17     9 (fixed)
  6338                           ; jumptable            263     9 (fixed)
  6339                           ;	Chosen strategy is simple_byte
  6340  03AF  3A01               	xorlw	1	; case 1
  6341  03B0  1903               	skipnz
  6342  03B1  2B9E               	goto	l4477
  6343  03B2  3A03               	xorlw	3	; case 2
  6344  03B3  1903               	skipnz
  6345  03B4  2B97               	goto	l4467
  6346  03B5  3A01               	xorlw	1	; case 3
  6347  03B6  1903               	skipnz
  6348  03B7  2B97               	goto	l4467
  6349  03B8  3A07               	xorlw	7	; case 4
  6350  03B9  1903               	skipnz
  6351  03BA  2B9A               	goto	l4471
  6352  03BB  2B9E               	goto	l4477
  6353  03BC  0008               	return
  6354  03BD                     __end_of_do_I2C_TX_EMPTY:	
  6355                           
  6356                           	psect	text30
  6357  07AE                     __ptext30:	
  6358 ;; *************** function _mssp_setIRQ *****************
  6359 ;; Defined at:
  6360 ;;		line 58 in file "mcc_generated_files/i2c_driver.c"
  6361 ;; Parameters:    Size  Location     Type
  6362 ;;		None
  6363 ;; Auto vars:     Size  Location     Type
  6364 ;;		None
  6365 ;; Return value:  Size  Location     Type
  6366 ;;                  1    wreg      void 
  6367 ;; Registers used:
  6368 ;;		None
  6369 ;; Tracked objects:
  6370 ;;		On entry : 0/0
  6371 ;;		On exit  : 0/0
  6372 ;;		Unchanged: 0/0
  6373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6374 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6375 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6376 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6377 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6378 ;;Total ram usage:        0 bytes
  6379 ;; Hardware stack levels used:    1
  6380 ;; Hardware stack levels required when called:    6
  6381 ;; This function calls:
  6382 ;;		Nothing
  6383 ;; This function is called by:
  6384 ;;		_do_I2C_TX_EMPTY
  6385 ;; This function uses a non-reentrant model
  6386 ;;
  6387                           
  6388                           
  6389                           ;psect for function _mssp_setIRQ
  6390  07AE                     _mssp_setIRQ:	
  6391                           
  6392                           ;i2c_driver.c: 60: PIR1bits.SSP1IF = 1;
  6393                           
  6394                           ;incstack = 0
  6395                           ; Regs used in _mssp_setIRQ: []
  6396  07AE  0020               	movlb	0	; select bank0
  6397  07AF  1590               	bsf	16,3	;volatile
  6398  07B0  0008               	return
  6399  07B1                     __end_of_mssp_setIRQ:	
  6400                           
  6401                           	psect	text31
  6402  0652                     __ptext31:	
  6403 ;; *************** function _i2c_driver_isNACK *****************
  6404 ;; Defined at:
  6405 ;;		line 161 in file "mcc_generated_files/i2c_driver.c"
  6406 ;; Parameters:    Size  Location     Type
  6407 ;;		None
  6408 ;; Auto vars:     Size  Location     Type
  6409 ;;		None
  6410 ;; Return value:  Size  Location     Type
  6411 ;;		None               void
  6412 ;; Registers used:
  6413 ;;		wreg, status,2, status,0
  6414 ;; Tracked objects:
  6415 ;;		On entry : 0/0
  6416 ;;		On exit  : 0/0
  6417 ;;		Unchanged: 0/0
  6418 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6419 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6420 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6421 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6422 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6423 ;;Total ram usage:        1 bytes
  6424 ;; Hardware stack levels used:    1
  6425 ;; Hardware stack levels required when called:    6
  6426 ;; This function calls:
  6427 ;;		Nothing
  6428 ;; This function is called by:
  6429 ;;		_do_I2C_TX
  6430 ;;		_i2c_ISR
  6431 ;; This function uses a non-reentrant model
  6432 ;;
  6433                           
  6434                           
  6435                           ;psect for function _i2c_driver_isNACK
  6436  0652                     _i2c_driver_isNACK:	
  6437                           
  6438                           ;i2c_driver.c: 163: return SSP1CON2bits.ACKSTAT = 1;
  6439                           
  6440                           ;incstack = 0
  6441                           ; Regs used in _i2c_driver_isNACK: [wreg+status,2+status,0]
  6442  0652  0024               	movlb	4	; select bank4
  6443  0653  0816               	movf	22,w	;volatile
  6444  0654  39BF               	andlw	-65
  6445  0655  3840               	iorlw	64
  6446  0656  0096               	movwf	22	;volatile
  6447  0657  0E16               	swapf	22,w	;volatile
  6448  0658  0C89               	rrf	9,f
  6449  0659  0C89               	rrf	9,f
  6450  065A  3901               	andlw	1
  6451  065B  0020               	movlb	0	; select bank0
  6452  065C  00CD               	movwf	??_i2c_driver_isNACK
  6453  065D  0C4D               	rrf	??_i2c_driver_isNACK,w
  6454  065E  0008               	return
  6455  065F                     __end_of_i2c_driver_isNACK:	
  6456                           
  6457                           	psect	text32
  6458  0750                     __ptext32:	
  6459 ;; *************** function _i2c_driver_TXData *****************
  6460 ;; Defined at:
  6461 ;;		line 186 in file "mcc_generated_files/i2c_driver.c"
  6462 ;; Parameters:    Size  Location     Type
  6463 ;;  d               1    wreg     unsigned char 
  6464 ;; Auto vars:     Size  Location     Type
  6465 ;;  d               1    0[BANK0 ] unsigned char 
  6466 ;; Return value:  Size  Location     Type
  6467 ;;                  1    wreg      void 
  6468 ;; Registers used:
  6469 ;;		wreg
  6470 ;; Tracked objects:
  6471 ;;		On entry : 0/0
  6472 ;;		On exit  : 0/0
  6473 ;;		Unchanged: 0/0
  6474 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6475 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6476 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6477 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6478 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6479 ;;Total ram usage:        1 bytes
  6480 ;; Hardware stack levels used:    1
  6481 ;; Hardware stack levels required when called:    6
  6482 ;; This function calls:
  6483 ;;		Nothing
  6484 ;; This function is called by:
  6485 ;;		_do_I2C_SEND_ADR_READ
  6486 ;;		_do_I2C_SEND_ADR_WRITE
  6487 ;;		_do_I2C_TX
  6488 ;; This function uses a non-reentrant model
  6489 ;;
  6490                           
  6491                           
  6492                           ;psect for function _i2c_driver_TXData
  6493  0750                     _i2c_driver_TXData:	
  6494                           
  6495                           ;incstack = 0
  6496                           ; Regs used in _i2c_driver_TXData: [wreg]
  6497                           ;i2c_driver_TXData@d stored from wreg
  6498  0750  0020               	movlb	0	; select bank0
  6499  0751  00CD               	movwf	i2c_driver_TXData@d
  6500                           
  6501                           ;i2c_driver.c: 188: SSP1BUF = d;
  6502  0752  084D               	movf	i2c_driver_TXData@d,w
  6503  0753  0024               	movlb	4	; select bank4
  6504  0754  0091               	movwf	17	;volatile
  6505  0755  0008               	return
  6506  0756                     __end_of_i2c_driver_TXData:	
  6507                           
  6508                           	psect	text33
  6509  07B1                     __ptext33:	
  6510 ;; *************** function _i2c_driver_getRXData *****************
  6511 ;; Defined at:
  6512 ;;		line 171 in file "mcc_generated_files/i2c_driver.c"
  6513 ;; Parameters:    Size  Location     Type
  6514 ;;		None
  6515 ;; Auto vars:     Size  Location     Type
  6516 ;;		None
  6517 ;; Return value:  Size  Location     Type
  6518 ;;                  1    wreg      unsigned char 
  6519 ;; Registers used:
  6520 ;;		wreg
  6521 ;; Tracked objects:
  6522 ;;		On entry : 0/0
  6523 ;;		On exit  : 0/0
  6524 ;;		Unchanged: 0/0
  6525 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6526 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6527 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6528 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6529 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6530 ;;Total ram usage:        0 bytes
  6531 ;; Hardware stack levels used:    1
  6532 ;; Hardware stack levels required when called:    6
  6533 ;; This function calls:
  6534 ;;		Nothing
  6535 ;; This function is called by:
  6536 ;;		_do_I2C_RX
  6537 ;; This function uses a non-reentrant model
  6538 ;;
  6539                           
  6540                           
  6541                           ;psect for function _i2c_driver_getRXData
  6542  07B1                     _i2c_driver_getRXData:	
  6543                           
  6544                           ;i2c_driver.c: 173: return SSP1BUF;
  6545                           
  6546                           ;incstack = 0
  6547                           ; Regs used in _i2c_driver_getRXData: [wreg]
  6548  07B1  0024               	movlb	4	; select bank4
  6549  07B2  0811               	movf	17,w	;volatile
  6550  07B3  0008               	return
  6551  07B4                     __end_of_i2c_driver_getRXData:	
  6552                           
  6553                           	psect	text34
  6554  0782                     __ptext34:	
  6555 ;; *************** function _i2c_driver_sendNACK *****************
  6556 ;; Defined at:
  6557 ;;		line 202 in file "mcc_generated_files/i2c_driver.c"
  6558 ;; Parameters:    Size  Location     Type
  6559 ;;		None
  6560 ;; Auto vars:     Size  Location     Type
  6561 ;;		None
  6562 ;; Return value:  Size  Location     Type
  6563 ;;                  1    wreg      void 
  6564 ;; Registers used:
  6565 ;;		None
  6566 ;; Tracked objects:
  6567 ;;		On entry : 0/0
  6568 ;;		On exit  : 0/0
  6569 ;;		Unchanged: 0/0
  6570 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6571 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6572 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6573 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6574 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6575 ;;Total ram usage:        0 bytes
  6576 ;; Hardware stack levels used:    1
  6577 ;; Hardware stack levels required when called:    6
  6578 ;; This function calls:
  6579 ;;		Nothing
  6580 ;; This function is called by:
  6581 ;;		_do_I2C_DO_NACK_STOP
  6582 ;;		_do_I2C_DO_NACK_RESTART
  6583 ;; This function uses a non-reentrant model
  6584 ;;
  6585                           
  6586                           
  6587                           ;psect for function _i2c_driver_sendNACK
  6588  0782                     _i2c_driver_sendNACK:	
  6589                           
  6590                           ;i2c_driver.c: 204: SSP1CON2bits.ACKDT = 1;
  6591                           
  6592                           ;incstack = 0
  6593                           ; Regs used in _i2c_driver_sendNACK: []
  6594  0782  0024               	movlb	4	; select bank4
  6595  0783  1696               	bsf	22,5	;volatile
  6596                           
  6597                           ;i2c_driver.c: 205: SSP1CON2bits.ACKEN = 1;
  6598  0784  1616               	bsf	22,4	;volatile
  6599  0785  0008               	return
  6600  0786                     __end_of_i2c_driver_sendNACK:	
  6601                           
  6602                           	psect	text35
  6603  07E4                     __ptext35:	
  6604 ;; *************** function _i2c_driver_resetBus *****************
  6605 ;; Defined at:
  6606 ;;		line 141 in file "mcc_generated_files/i2c_driver.c"
  6607 ;; Parameters:    Size  Location     Type
  6608 ;;		None
  6609 ;; Auto vars:     Size  Location     Type
  6610 ;;		None
  6611 ;; Return value:  Size  Location     Type
  6612 ;;                  1    wreg      void 
  6613 ;; Registers used:
  6614 ;;		None
  6615 ;; Tracked objects:
  6616 ;;		On entry : 0/0
  6617 ;;		On exit  : 0/0
  6618 ;;		Unchanged: 0/0
  6619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6620 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6621 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6622 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6623 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6624 ;;Total ram usage:        0 bytes
  6625 ;; Hardware stack levels used:    1
  6626 ;; Hardware stack levels required when called:    6
  6627 ;; This function calls:
  6628 ;;		Nothing
  6629 ;; This function is called by:
  6630 ;;		_do_I2C_RESET
  6631 ;; This function uses a non-reentrant model
  6632 ;;
  6633                           
  6634                           
  6635                           ;psect for function _i2c_driver_resetBus
  6636  07E4                     _i2c_driver_resetBus:	
  6637                           
  6638                           ;incstack = 0
  6639                           ; Regs used in _i2c_driver_resetBus: []
  6640  07E4  0008               	return
  6641  07E5                     __end_of_i2c_driver_resetBus:	
  6642                           
  6643                           	psect	text36
  6644  07B4                     __ptext36:	
  6645 ;; *************** function _i2c_driver_startRX *****************
  6646 ;; Defined at:
  6647 ;;		line 166 in file "mcc_generated_files/i2c_driver.c"
  6648 ;; Parameters:    Size  Location     Type
  6649 ;;		None
  6650 ;; Auto vars:     Size  Location     Type
  6651 ;;		None
  6652 ;; Return value:  Size  Location     Type
  6653 ;;                  1    wreg      void 
  6654 ;; Registers used:
  6655 ;;		None
  6656 ;; Tracked objects:
  6657 ;;		On entry : 0/0
  6658 ;;		On exit  : 0/0
  6659 ;;		Unchanged: 0/0
  6660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6661 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6662 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6663 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6664 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6665 ;;Total ram usage:        0 bytes
  6666 ;; Hardware stack levels used:    1
  6667 ;; Hardware stack levels required when called:    6
  6668 ;; This function calls:
  6669 ;;		Nothing
  6670 ;; This function is called by:
  6671 ;;		_do_I2C_RCEN
  6672 ;; This function uses a non-reentrant model
  6673 ;;
  6674                           
  6675                           
  6676                           ;psect for function _i2c_driver_startRX
  6677  07B4                     _i2c_driver_startRX:	
  6678                           
  6679                           ;i2c_driver.c: 168: SSP1CON2bits.RCEN = 1;
  6680                           
  6681                           ;incstack = 0
  6682                           ; Regs used in _i2c_driver_startRX: []
  6683  07B4  0024               	movlb	4	; select bank4
  6684  07B5  1596               	bsf	22,3	;volatile
  6685  07B6  0008               	return
  6686  07B7                     __end_of_i2c_driver_startRX:	
  6687                           
  6688                           	psect	text37
  6689  0547                     __ptext37:	
  6690 ;; *************** function _rdBlkRegCompleteHandler *****************
  6691 ;; Defined at:
  6692 ;;		line 134 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  6693 ;; Parameters:    Size  Location     Type
  6694 ;;  p               1    9[BANK0 ] PTR void 
  6695 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  6696 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  6697 ;; Auto vars:     Size  Location     Type
  6698 ;;		None
  6699 ;; Return value:  Size  Location     Type
  6700 ;;                  1    wreg      enum E97
  6701 ;; Registers used:
  6702 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6703 ;; Tracked objects:
  6704 ;;		On entry : 0/0
  6705 ;;		On exit  : 0/0
  6706 ;;		Unchanged: 0/0
  6707 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6708 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6709 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6710 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6711 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6712 ;;Total ram usage:        1 bytes
  6713 ;; Hardware stack levels used:    1
  6714 ;; Hardware stack levels required when called:    8
  6715 ;; This function calls:
  6716 ;;		_i2c_setBuffer
  6717 ;;		_i2c_setDataCompleteCallback
  6718 ;; This function is called by:
  6719 ;;		_i2c_readDataBlock
  6720 ;;		_do_I2C_DO_ADDRESS_NACK
  6721 ;;		_do_I2C_TX
  6722 ;;		_do_I2C_RX
  6723 ;;		_do_I2C_TX_EMPTY
  6724 ;;		i1_do_I2C_DO_ADDRESS_NACK
  6725 ;;		i1_do_I2C_TX
  6726 ;;		i1_do_I2C_RX
  6727 ;;		i1_do_I2C_TX_EMPTY
  6728 ;; This function uses a non-reentrant model
  6729 ;;
  6730                           
  6731                           
  6732                           ;psect for function _rdBlkRegCompleteHandler
  6733  0547                     _rdBlkRegCompleteHandler:	
  6734                           
  6735                           ;Skip over the trampoline to the duplicate function for level 1
  6736  0547  1C7E               	btfss	126,0
  6737  0548  2D4B               	goto	l2161
  6738  0549  3185  2D64         	ljmp	i1l2547
  6739  054B                     _rdBlkRegCompleteHandler$intlevel0:	
  6740  054B                     l2161:	
  6741                           ;incstack = 0
  6742                           ; Regs used in _rdBlkRegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  6743                           
  6744                           
  6745                           ;i2c_simple_master.c: 136: i2c_setBuffer(((buf_t *)p)->data,((buf_t*)p)->len);
  6746  054B  0020               	movlb	0	; select bank0
  6747  054C  0856               	movf	rdBlkRegCompleteHandler@p,w
  6748  054D  0086               	movwf	6
  6749  054E  0187               	clrf	7
  6750  054F  3F40               	moviw [0]fsr1
  6751  0550  00CD               	movwf	i2c_setBuffer@bufferSize
  6752  0551  3F41               	moviw [1]fsr1
  6753  0552  00CE               	movwf	i2c_setBuffer@bufferSize+1
  6754  0553  0856               	movf	rdBlkRegCompleteHandler@p,w
  6755  0554  3E02               	addlw	2
  6756  0555  0086               	movwf	6
  6757  0556  0187               	clrf	7
  6758  0557  0801               	movf	1,w
  6759  0558  3186  2629  3185   	fcall	_i2c_setBuffer
  6760                           
  6761                           ;i2c_simple_master.c: 137: i2c_setDataCompleteCallback((0),(0));
  6762  055B  3000               	movlw	0
  6763  055C  0020               	movlb	0	; select bank0
  6764  055D  00D2               	movwf	i2c_setDataCompleteCallback@cb
  6765  055E  00D3               	movwf	i2c_setDataCompleteCallback@cb+1
  6766  055F  01D4               	clrf	i2c_setDataCompleteCallback@p
  6767  0560  3186  265F         	fcall	_i2c_setDataCompleteCallback
  6768                           
  6769                           ;i2c_simple_master.c: 138: return i2c_restart_read;
  6770  0562  3002               	movlw	2
  6771  0563  0008               	return
  6772  0564                     __end_of_rdBlkRegCompleteHandler:	
  6773                           
  6774                           	psect	text38
  6775  057B                     __ptext38:	
  6776 ;; *************** function _rd2RegCompleteHandler *****************
  6777 ;; Defined at:
  6778 ;;		line 87 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  6779 ;; Parameters:    Size  Location     Type
  6780 ;;  p               1    9[BANK0 ] PTR void 
  6781 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  6782 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  6783 ;; Auto vars:     Size  Location     Type
  6784 ;;		None
  6785 ;; Return value:  Size  Location     Type
  6786 ;;                  1    wreg      enum E97
  6787 ;; Registers used:
  6788 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6789 ;; Tracked objects:
  6790 ;;		On entry : 0/0
  6791 ;;		On exit  : 0/0
  6792 ;;		Unchanged: 0/0
  6793 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6794 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6795 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6796 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6797 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6798 ;;Total ram usage:        1 bytes
  6799 ;; Hardware stack levels used:    1
  6800 ;; Hardware stack levels required when called:    8
  6801 ;; This function calls:
  6802 ;;		_i2c_setBuffer
  6803 ;;		_i2c_setDataCompleteCallback
  6804 ;; This function is called by:
  6805 ;;		_i2c_read2ByteRegister
  6806 ;;		_do_I2C_DO_ADDRESS_NACK
  6807 ;;		_do_I2C_TX
  6808 ;;		_do_I2C_RX
  6809 ;;		_do_I2C_TX_EMPTY
  6810 ;;		i1_do_I2C_DO_ADDRESS_NACK
  6811 ;;		i1_do_I2C_TX
  6812 ;;		i1_do_I2C_RX
  6813 ;;		i1_do_I2C_TX_EMPTY
  6814 ;; This function uses a non-reentrant model
  6815 ;;
  6816                           
  6817                           
  6818                           ;psect for function _rd2RegCompleteHandler
  6819  057B                     _rd2RegCompleteHandler:	
  6820                           
  6821                           ;Skip over the trampoline to the duplicate function for level 1
  6822  057B  1C7E               	btfss	126,0
  6823  057C  2D7F               	goto	l2145
  6824  057D  3185  2DE9         	ljmp	i1l2531
  6825  057F                     _rd2RegCompleteHandler$intlevel0:	
  6826  057F                     l2145:	
  6827                           ;incstack = 0
  6828                           ; Regs used in _rd2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6829                           
  6830                           
  6831                           ;i2c_simple_master.c: 89: i2c_setBuffer(p,2);
  6832  057F  3002               	movlw	2
  6833  0580  0020               	movlb	0	; select bank0
  6834  0581  00CD               	movwf	i2c_setBuffer@bufferSize
  6835  0582  3000               	movlw	0
  6836  0583  00CE               	movwf	i2c_setBuffer@bufferSize+1
  6837  0584  0856               	movf	rd2RegCompleteHandler@p,w
  6838  0585  3186  2629  3185   	fcall	_i2c_setBuffer
  6839                           
  6840                           ;i2c_simple_master.c: 90: i2c_setDataCompleteCallback((0),(0));
  6841  0588  3000               	movlw	0
  6842  0589  0020               	movlb	0	; select bank0
  6843  058A  00D2               	movwf	i2c_setDataCompleteCallback@cb
  6844  058B  00D3               	movwf	i2c_setDataCompleteCallback@cb+1
  6845  058C  01D4               	clrf	i2c_setDataCompleteCallback@p
  6846  058D  3186  265F         	fcall	_i2c_setDataCompleteCallback
  6847                           
  6848                           ;i2c_simple_master.c: 91: return i2c_restart_read;
  6849  058F  3002               	movlw	2
  6850  0590  0008               	return
  6851  0591                     __end_of_rd2RegCompleteHandler:	
  6852                           
  6853                           	psect	text39
  6854  0591                     __ptext39:	
  6855 ;; *************** function _rd1RegCompleteHandler *****************
  6856 ;; Defined at:
  6857 ;;		line 58 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  6858 ;; Parameters:    Size  Location     Type
  6859 ;;  p               1    9[BANK0 ] PTR void 
  6860 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  6861 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  6862 ;; Auto vars:     Size  Location     Type
  6863 ;;		None
  6864 ;; Return value:  Size  Location     Type
  6865 ;;                  1    wreg      enum E97
  6866 ;; Registers used:
  6867 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6868 ;; Tracked objects:
  6869 ;;		On entry : 0/0
  6870 ;;		On exit  : 0/0
  6871 ;;		Unchanged: 0/0
  6872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6873 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6874 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6875 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6876 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6877 ;;Total ram usage:        1 bytes
  6878 ;; Hardware stack levels used:    1
  6879 ;; Hardware stack levels required when called:    8
  6880 ;; This function calls:
  6881 ;;		_i2c_setBuffer
  6882 ;;		_i2c_setDataCompleteCallback
  6883 ;; This function is called by:
  6884 ;;		_i2c_read1ByteRegister
  6885 ;;		_do_I2C_DO_ADDRESS_NACK
  6886 ;;		_do_I2C_TX
  6887 ;;		_do_I2C_RX
  6888 ;;		_do_I2C_TX_EMPTY
  6889 ;;		i1_do_I2C_DO_ADDRESS_NACK
  6890 ;;		i1_do_I2C_TX
  6891 ;;		i1_do_I2C_RX
  6892 ;;		i1_do_I2C_TX_EMPTY
  6893 ;; This function uses a non-reentrant model
  6894 ;;
  6895                           
  6896                           
  6897                           ;psect for function _rd1RegCompleteHandler
  6898  0591                     _rd1RegCompleteHandler:	
  6899                           
  6900                           ;Skip over the trampoline to the duplicate function for level 1
  6901  0591  1C7E               	btfss	126,0
  6902  0592  2D95               	goto	l2137
  6903  0593  3185  2DF9         	ljmp	i1l2523
  6904  0595                     _rd1RegCompleteHandler$intlevel0:	
  6905  0595                     l2137:	
  6906                           ;incstack = 0
  6907                           ; Regs used in _rd1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6908                           
  6909                           
  6910                           ;i2c_simple_master.c: 60: i2c_setBuffer(p,1);
  6911  0595  3001               	movlw	1
  6912  0596  0020               	movlb	0	; select bank0
  6913  0597  00CD               	movwf	i2c_setBuffer@bufferSize
  6914  0598  3000               	movlw	0
  6915  0599  00CE               	movwf	i2c_setBuffer@bufferSize+1
  6916  059A  0856               	movf	rd1RegCompleteHandler@p,w
  6917  059B  3186  2629  3185   	fcall	_i2c_setBuffer
  6918                           
  6919                           ;i2c_simple_master.c: 61: i2c_setDataCompleteCallback((0),(0));
  6920  059E  3000               	movlw	0
  6921  059F  0020               	movlb	0	; select bank0
  6922  05A0  00D2               	movwf	i2c_setDataCompleteCallback@cb
  6923  05A1  00D3               	movwf	i2c_setDataCompleteCallback@cb+1
  6924  05A2  01D4               	clrf	i2c_setDataCompleteCallback@p
  6925  05A3  3186  265F         	fcall	_i2c_setDataCompleteCallback
  6926                           
  6927                           ;i2c_simple_master.c: 62: return i2c_restart_read;
  6928  05A5  3002               	movlw	2
  6929  05A6  0008               	return
  6930  05A7                     __end_of_rd1RegCompleteHandler:	
  6931                           
  6932                           	psect	text40
  6933  05A7                     __ptext40:	
  6934 ;; *************** function _wr1RegCompleteHandler *****************
  6935 ;; Defined at:
  6936 ;;		line 31 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  6937 ;; Parameters:    Size  Location     Type
  6938 ;;  p               1    9[BANK0 ] PTR void 
  6939 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  6940 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  6941 ;; Auto vars:     Size  Location     Type
  6942 ;;		None
  6943 ;; Return value:  Size  Location     Type
  6944 ;;                  1    wreg      enum E97
  6945 ;; Registers used:
  6946 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6947 ;; Tracked objects:
  6948 ;;		On entry : 0/0
  6949 ;;		On exit  : 0/0
  6950 ;;		Unchanged: 0/0
  6951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6952 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6953 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6954 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6955 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6956 ;;Total ram usage:        1 bytes
  6957 ;; Hardware stack levels used:    1
  6958 ;; Hardware stack levels required when called:    8
  6959 ;; This function calls:
  6960 ;;		_i2c_setBuffer
  6961 ;;		_i2c_setDataCompleteCallback
  6962 ;; This function is called by:
  6963 ;;		_i2c_write1ByteRegister
  6964 ;;		_do_I2C_DO_ADDRESS_NACK
  6965 ;;		_do_I2C_TX
  6966 ;;		_do_I2C_RX
  6967 ;;		_do_I2C_TX_EMPTY
  6968 ;;		i1_do_I2C_DO_ADDRESS_NACK
  6969 ;;		i1_do_I2C_TX
  6970 ;;		i1_do_I2C_RX
  6971 ;;		i1_do_I2C_TX_EMPTY
  6972 ;; This function uses a non-reentrant model
  6973 ;;
  6974                           
  6975                           
  6976                           ;psect for function _wr1RegCompleteHandler
  6977  05A7                     _wr1RegCompleteHandler:	
  6978                           
  6979                           ;Skip over the trampoline to the duplicate function for level 1
  6980  05A7  1C7E               	btfss	126,0
  6981  05A8  2DAB               	goto	l2129
  6982  05A9  3186  2E09         	ljmp	i1l2515
  6983  05AB                     _wr1RegCompleteHandler$intlevel0:	
  6984  05AB                     l2129:	
  6985                           ;incstack = 0
  6986                           ; Regs used in _wr1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6987                           
  6988                           
  6989                           ;i2c_simple_master.c: 33: i2c_setBuffer(p,1);
  6990  05AB  3001               	movlw	1
  6991  05AC  0020               	movlb	0	; select bank0
  6992  05AD  00CD               	movwf	i2c_setBuffer@bufferSize
  6993  05AE  3000               	movlw	0
  6994  05AF  00CE               	movwf	i2c_setBuffer@bufferSize+1
  6995  05B0  0856               	movf	wr1RegCompleteHandler@p,w
  6996  05B1  3186  2629  3185   	fcall	_i2c_setBuffer
  6997                           
  6998                           ;i2c_simple_master.c: 34: i2c_setDataCompleteCallback((0),(0));
  6999  05B4  3000               	movlw	0
  7000  05B5  0020               	movlb	0	; select bank0
  7001  05B6  00D2               	movwf	i2c_setDataCompleteCallback@cb
  7002  05B7  00D3               	movwf	i2c_setDataCompleteCallback@cb+1
  7003  05B8  01D4               	clrf	i2c_setDataCompleteCallback@p
  7004  05B9  3186  265F         	fcall	_i2c_setDataCompleteCallback
  7005                           
  7006                           ;i2c_simple_master.c: 35: return i2c_continue;
  7007  05BB  3004               	movlw	4
  7008  05BC  0008               	return
  7009  05BD                     __end_of_wr1RegCompleteHandler:	
  7010                           
  7011                           	psect	text41
  7012  0756                     __ptext41:	
  7013 ;; *************** function _i2c_restartWrite *****************
  7014 ;; Defined at:
  7015 ;;		line 35 in file "mcc_generated_files/drivers/i2c_types.c"
  7016 ;; Parameters:    Size  Location     Type
  7017 ;;  p               1    9[BANK0 ] PTR void 
  7018 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  7019 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  7020 ;; Auto vars:     Size  Location     Type
  7021 ;;		None
  7022 ;; Return value:  Size  Location     Type
  7023 ;;                  1    wreg      enum E96
  7024 ;; Registers used:
  7025 ;;		wreg
  7026 ;; Tracked objects:
  7027 ;;		On entry : 0/0
  7028 ;;		On exit  : 0/0
  7029 ;;		Unchanged: 0/0
  7030 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7031 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7032 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7033 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7034 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7035 ;;Total ram usage:        1 bytes
  7036 ;; Hardware stack levels used:    1
  7037 ;; Hardware stack levels required when called:    6
  7038 ;; This function calls:
  7039 ;;		Nothing
  7040 ;; This function is called by:
  7041 ;;		_i2c_writeNBytes
  7042 ;;		_i2c_write1ByteRegister
  7043 ;;		_i2c_read1ByteRegister
  7044 ;;		_i2c_read2ByteRegister
  7045 ;;		_i2c_write2ByteRegister
  7046 ;;		_i2c_readDataBlock
  7047 ;;		_do_I2C_DO_ADDRESS_NACK
  7048 ;;		_do_I2C_TX
  7049 ;;		_do_I2C_RX
  7050 ;;		_do_I2C_TX_EMPTY
  7051 ;;		i1_do_I2C_DO_ADDRESS_NACK
  7052 ;;		i1_do_I2C_TX
  7053 ;;		i1_do_I2C_RX
  7054 ;;		i1_do_I2C_TX_EMPTY
  7055 ;; This function uses a non-reentrant model
  7056 ;;
  7057                           
  7058                           
  7059                           ;psect for function _i2c_restartWrite
  7060  0756                     _i2c_restartWrite:	
  7061                           
  7062                           ;Skip over the trampoline to the duplicate function for level 1
  7063  0756  1C7E               	btfss	126,0
  7064  0757  2F5A               	goto	l2125
  7065  0758  3187  2FDE         	ljmp	i1l2511
  7066  075A                     _i2c_restartWrite$intlevel0:	
  7067  075A                     l2125:	
  7068                           ;incstack = 0
  7069                           ; Regs used in _i2c_restartWrite: [wreg]
  7070                           
  7071                           
  7072                           ;i2c_types.c: 37: return i2c_restart_write;
  7073  075A  3003               	movlw	3
  7074  075B  0008               	return
  7075  075C                     __end_of_i2c_restartWrite:	
  7076                           
  7077                           	psect	text42
  7078  075C                     __ptext42:	
  7079 ;; *************** function _returnReset *****************
  7080 ;; Defined at:
  7081 ;;		line 448 in file "mcc_generated_files/drivers/i2c_master.c"
  7082 ;; Parameters:    Size  Location     Type
  7083 ;;  p               1    9[BANK0 ] PTR void 
  7084 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  7085 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  7086 ;; Auto vars:     Size  Location     Type
  7087 ;;		None
  7088 ;; Return value:  Size  Location     Type
  7089 ;;                  1    wreg      enum E12171
  7090 ;; Registers used:
  7091 ;;		wreg
  7092 ;; Tracked objects:
  7093 ;;		On entry : 0/0
  7094 ;;		On exit  : 0/0
  7095 ;;		Unchanged: 0/0
  7096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7097 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7098 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7099 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7100 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7101 ;;Total ram usage:        1 bytes
  7102 ;; Hardware stack levels used:    1
  7103 ;; Hardware stack levels required when called:    6
  7104 ;; This function calls:
  7105 ;;		Nothing
  7106 ;; This function is called by:
  7107 ;;		_i2c_open
  7108 ;;		_do_I2C_DO_ADDRESS_NACK
  7109 ;;		_do_I2C_TX
  7110 ;;		_do_I2C_RX
  7111 ;;		_do_I2C_TX_EMPTY
  7112 ;;		i1_do_I2C_DO_ADDRESS_NACK
  7113 ;;		i1_do_I2C_TX
  7114 ;;		i1_do_I2C_RX
  7115 ;;		i1_do_I2C_TX_EMPTY
  7116 ;; This function uses a non-reentrant model
  7117 ;;
  7118                           
  7119                           
  7120                           ;psect for function _returnReset
  7121  075C                     _returnReset:	
  7122                           
  7123                           ;Skip over the trampoline to the duplicate function for level 1
  7124  075C  1C7E               	btfss	126,0
  7125  075D  2F60               	goto	l2121
  7126  075E  3187  2FE0         	ljmp	i1l2507
  7127  0760                     _returnReset$intlevel0:	
  7128  0760                     l2121:	
  7129                           ;incstack = 0
  7130                           ; Regs used in _returnReset: [wreg]
  7131                           
  7132                           
  7133                           ;i2c_master.c: 450: return i2c_reset_link;
  7134  0760  3005               	movlw	5
  7135  0761  0008               	return
  7136  0762                     __end_of_returnReset:	
  7137                           
  7138                           	psect	text43
  7139  0762                     __ptext43:	
  7140 ;; *************** function _returnStop *****************
  7141 ;; Defined at:
  7142 ;;		line 443 in file "mcc_generated_files/drivers/i2c_master.c"
  7143 ;; Parameters:    Size  Location     Type
  7144 ;;  p               1    9[BANK0 ] PTR void 
  7145 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  7146 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  7147 ;; Auto vars:     Size  Location     Type
  7148 ;;		None
  7149 ;; Return value:  Size  Location     Type
  7150 ;;                  1    wreg      enum E12171
  7151 ;; Registers used:
  7152 ;;		wreg
  7153 ;; Tracked objects:
  7154 ;;		On entry : 0/0
  7155 ;;		On exit  : 0/0
  7156 ;;		Unchanged: 0/0
  7157 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7158 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7159 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7160 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7161 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7162 ;;Total ram usage:        1 bytes
  7163 ;; Hardware stack levels used:    1
  7164 ;; Hardware stack levels required when called:    6
  7165 ;; This function calls:
  7166 ;;		Nothing
  7167 ;; This function is called by:
  7168 ;;		_i2c_open
  7169 ;;		_setCallBack
  7170 ;;		_do_I2C_DO_ADDRESS_NACK
  7171 ;;		_do_I2C_TX
  7172 ;;		_do_I2C_RX
  7173 ;;		_do_I2C_TX_EMPTY
  7174 ;;		i1_do_I2C_DO_ADDRESS_NACK
  7175 ;;		i1_do_I2C_TX
  7176 ;;		i1_do_I2C_RX
  7177 ;;		i1_do_I2C_TX_EMPTY
  7178 ;; This function uses a non-reentrant model
  7179 ;;
  7180                           
  7181                           
  7182                           ;psect for function _returnStop
  7183  0762                     _returnStop:	
  7184                           
  7185                           ;Skip over the trampoline to the duplicate function for level 1
  7186  0762  1C7E               	btfss	126,0
  7187  0763  2F66               	goto	l2117
  7188  0764  3187  2FE2         	ljmp	i1l2503
  7189  0766                     _returnStop$intlevel0:	
  7190  0766                     l2117:	
  7191                           ;incstack = 0
  7192                           ; Regs used in _returnStop: [wreg]
  7193                           
  7194                           
  7195                           ;i2c_master.c: 445: return i2c_stop;
  7196  0766  3001               	movlw	1
  7197  0767  0008               	return
  7198  0768                     __end_of_returnStop:	
  7199                           
  7200                           	psect	text44
  7201  05BD                     __ptext44:	
  7202 ;; *************** function _wr2RegCompleteHandler *****************
  7203 ;; Defined at:
  7204 ;;		line 110 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  7205 ;; Parameters:    Size  Location     Type
  7206 ;;  p               1    9[BANK0 ] PTR void 
  7207 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  7208 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  7209 ;; Auto vars:     Size  Location     Type
  7210 ;;		None
  7211 ;; Return value:  Size  Location     Type
  7212 ;;                  1    wreg      enum E97
  7213 ;; Registers used:
  7214 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7215 ;; Tracked objects:
  7216 ;;		On entry : 0/0
  7217 ;;		On exit  : 0/0
  7218 ;;		Unchanged: 0/0
  7219 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7220 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7221 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7222 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7223 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7224 ;;Total ram usage:        1 bytes
  7225 ;; Hardware stack levels used:    1
  7226 ;; Hardware stack levels required when called:    8
  7227 ;; This function calls:
  7228 ;;		_i2c_setBuffer
  7229 ;;		_i2c_setDataCompleteCallback
  7230 ;; This function is called by:
  7231 ;;		_i2c_write2ByteRegister
  7232 ;;		_do_I2C_DO_ADDRESS_NACK
  7233 ;;		_do_I2C_TX
  7234 ;;		_do_I2C_RX
  7235 ;;		_do_I2C_TX_EMPTY
  7236 ;;		i1_do_I2C_DO_ADDRESS_NACK
  7237 ;;		i1_do_I2C_TX
  7238 ;;		i1_do_I2C_RX
  7239 ;;		i1_do_I2C_TX_EMPTY
  7240 ;; This function uses a non-reentrant model
  7241 ;;
  7242                           
  7243                           
  7244                           ;psect for function _wr2RegCompleteHandler
  7245  05BD                     _wr2RegCompleteHandler:	
  7246                           
  7247                           ;Skip over the trampoline to the duplicate function for level 1
  7248  05BD  1C7E               	btfss	126,0
  7249  05BE  2DC1               	goto	l2153
  7250  05BF  3186  2E19         	ljmp	i1l2539
  7251  05C1                     _wr2RegCompleteHandler$intlevel0:	
  7252  05C1                     l2153:	
  7253                           ;incstack = 0
  7254                           ; Regs used in _wr2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  7255                           
  7256                           
  7257                           ;i2c_simple_master.c: 112: i2c_setBuffer(p,2);
  7258  05C1  3002               	movlw	2
  7259  05C2  0020               	movlb	0	; select bank0
  7260  05C3  00CD               	movwf	i2c_setBuffer@bufferSize
  7261  05C4  3000               	movlw	0
  7262  05C5  00CE               	movwf	i2c_setBuffer@bufferSize+1
  7263  05C6  0856               	movf	wr2RegCompleteHandler@p,w
  7264  05C7  3186  2629  3185   	fcall	_i2c_setBuffer
  7265                           
  7266                           ;i2c_simple_master.c: 113: i2c_setDataCompleteCallback((0),(0));
  7267  05CA  3000               	movlw	0
  7268  05CB  0020               	movlb	0	; select bank0
  7269  05CC  00D2               	movwf	i2c_setDataCompleteCallback@cb
  7270  05CD  00D3               	movwf	i2c_setDataCompleteCallback@cb+1
  7271  05CE  01D4               	clrf	i2c_setDataCompleteCallback@p
  7272  05CF  3186  265F         	fcall	_i2c_setDataCompleteCallback
  7273                           
  7274                           ;i2c_simple_master.c: 114: return i2c_continue;
  7275  05D1  3004               	movlw	4
  7276  05D2  0008               	return
  7277  05D3                     __end_of_wr2RegCompleteHandler:	
  7278                           
  7279                           	psect	text45
  7280  065F                     __ptext45:	
  7281 ;; *************** function _i2c_setDataCompleteCallback *****************
  7282 ;; Defined at:
  7283 ;;		line 89 in file "mcc_generated_files/drivers/i2c_master.c"
  7284 ;; Parameters:    Size  Location     Type
  7285 ;;  cb              2    5[BANK0 ] PTR FTN(PTR void ,)enum 
  7286 ;;		 -> rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), rd2RegCompleteHandler(1), rd1RegCompleteHandler(1), 
  7287 ;;		 -> wr1RegCompleteHandler(1), Absolute function(1), 
  7288 ;;  p               1    7[BANK0 ] PTR void 
  7289 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  7290 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  7291 ;; Auto vars:     Size  Location     Type
  7292 ;;		None
  7293 ;; Return value:  Size  Location     Type
  7294 ;;                  1    wreg      void 
  7295 ;; Registers used:
  7296 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7297 ;; Tracked objects:
  7298 ;;		On entry : 0/0
  7299 ;;		On exit  : 0/0
  7300 ;;		Unchanged: 0/0
  7301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7302 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7303 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7304 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7305 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7306 ;;Total ram usage:        4 bytes
  7307 ;; Hardware stack levels used:    1
  7308 ;; Hardware stack levels required when called:    7
  7309 ;; This function calls:
  7310 ;;		_setCallBack
  7311 ;; This function is called by:
  7312 ;;		_wr1RegCompleteHandler
  7313 ;;		_rd1RegCompleteHandler
  7314 ;;		_rd2RegCompleteHandler
  7315 ;;		_wr2RegCompleteHandler
  7316 ;;		_rdBlkRegCompleteHandler
  7317 ;;		_i2c_write1ByteRegister
  7318 ;;		_i2c_read1ByteRegister
  7319 ;;		_i2c_read2ByteRegister
  7320 ;;		_i2c_write2ByteRegister
  7321 ;;		_i2c_readDataBlock
  7322 ;; This function uses a non-reentrant model
  7323 ;;
  7324                           
  7325                           
  7326                           ;psect for function _i2c_setDataCompleteCallback
  7327  065F                     _i2c_setDataCompleteCallback:	
  7328                           
  7329                           ;i2c_master.c: 91: setCallBack(i2c_dataComplete,cb,p);
  7330                           
  7331                           ;incstack = 0
  7332                           ; Regs used in _i2c_setDataCompleteCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  7333  065F  0020               	movlb	0	; select bank0
  7334  0660  0853               	movf	i2c_setDataCompleteCallback@cb+1,w
  7335  0661  00CE               	movwf	setCallBack@cb+1
  7336  0662  0852               	movf	i2c_setDataCompleteCallback@cb,w
  7337  0663  00CD               	movwf	setCallBack@cb
  7338  0664  0854               	movf	i2c_setDataCompleteCallback@p,w
  7339  0665  00D5               	movwf	??_i2c_setDataCompleteCallback
  7340  0666  0855               	movf	??_i2c_setDataCompleteCallback,w
  7341  0667  00CF               	movwf	setCallBack@p
  7342  0668  3000               	movlw	0
  7343  0669  3184  245A         	fcall	_setCallBack
  7344  066B  0008               	return
  7345  066C                     __end_of_i2c_setDataCompleteCallback:	
  7346                           
  7347                           	psect	text46
  7348  045A                     __ptext46:	
  7349 ;; *************** function _setCallBack *****************
  7350 ;; Defined at:
  7351 ;;		line 453 in file "mcc_generated_files/drivers/i2c_master.c"
  7352 ;; Parameters:    Size  Location     Type
  7353 ;;  idx             1    wreg     enum E12355
  7354 ;;  cb              2    0[BANK0 ] PTR FTN(PTR void ,)enum 
  7355 ;;		 -> rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), rd2RegCompleteHandler(1), rd1RegCompleteHandler(1), 
  7356 ;;		 -> wr1RegCompleteHandler(1), i2c_restartWrite(1), Absolute function(1), 
  7357 ;;  p               1    2[BANK0 ] PTR void 
  7358 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  7359 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  7360 ;; Auto vars:     Size  Location     Type
  7361 ;;  idx             1    4[BANK0 ] enum E12355
  7362 ;; Return value:  Size  Location     Type
  7363 ;;                  1    wreg      void 
  7364 ;; Registers used:
  7365 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7366 ;; Tracked objects:
  7367 ;;		On entry : 0/0
  7368 ;;		On exit  : 0/0
  7369 ;;		Unchanged: 0/0
  7370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7371 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7372 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7373 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7374 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7375 ;;Total ram usage:        5 bytes
  7376 ;; Hardware stack levels used:    1
  7377 ;; Hardware stack levels required when called:    6
  7378 ;; This function calls:
  7379 ;;		Nothing
  7380 ;; This function is called by:
  7381 ;;		_i2c_setDataCompleteCallback
  7382 ;;		_i2c_setAddressNACKCallback
  7383 ;;		_i2c_setWriteCollisionCallback
  7384 ;;		_i2c_setDataNACKCallback
  7385 ;;		_i2c_setTimeOutCallback
  7386 ;; This function uses a non-reentrant model
  7387 ;;
  7388                           
  7389                           
  7390                           ;psect for function _setCallBack
  7391  045A                     _setCallBack:	
  7392                           
  7393                           ;incstack = 0
  7394                           ; Regs used in _setCallBack: [wreg+fsr1l+fsr1h+status,2+status,0]
  7395                           ;setCallBack@idx stored from wreg
  7396  045A  0020               	movlb	0	; select bank0
  7397  045B  00D1               	movwf	setCallBack@idx
  7398                           
  7399                           ;i2c_master.c: 455: if(cb)
  7400  045C  084D               	movf	setCallBack@cb,w
  7401  045D  044E               	iorwf	setCallBack@cb+1,w
  7402  045E  1903               	btfsc	3,2
  7403  045F  2C71               	goto	l2049
  7404                           
  7405                           ;i2c_master.c: 456: {
  7406                           ;i2c_master.c: 457: i2c_status.callbackTable[idx] = cb;
  7407  0460  3551               	lslf	setCallBack@idx,w
  7408  0461  3E2B               	addlw	(low ((_i2c_status| 0+11)))& (0+255)
  7409  0462  0086               	movwf	6
  7410  0463  0187               	clrf	7
  7411  0464  084D               	movf	setCallBack@cb,w
  7412  0465  3FC0               	movwi [0]fsr1
  7413  0466  084E               	movf	setCallBack@cb+1,w
  7414  0467  3FC1               	movwi [1]fsr1
  7415                           
  7416                           ;i2c_master.c: 458: i2c_status.callbackPayload[idx] = p;
  7417  0468  084F               	movf	setCallBack@p,w
  7418  0469  00D0               	movwf	??_setCallBack
  7419  046A  0851               	movf	setCallBack@idx,w
  7420  046B  3E37               	addlw	(low ((_i2c_status| 0+23)))& (0+255)
  7421  046C  0086               	movwf	6
  7422  046D  0187               	clrf	7
  7423  046E  0850               	movf	??_setCallBack,w
  7424  046F  0081               	movwf	1
  7425                           
  7426                           ;i2c_master.c: 459: }
  7427  0470  0008               	return
  7428  0471                     l2049:	
  7429                           
  7430                           ;i2c_master.c: 460: else
  7431                           ;i2c_master.c: 461: {
  7432                           ;i2c_master.c: 462: i2c_status.callbackTable[idx] = returnStop;
  7433  0471  3551               	lslf	setCallBack@idx,w
  7434  0472  3E2B               	addlw	(low ((_i2c_status| 0+11)))& (0+255)
  7435  0473  0086               	movwf	6
  7436  0474  0187               	clrf	7
  7437  0475  3062               	movlw	low _returnStop
  7438  0476  3FC0               	movwi [0]fsr1
  7439  0477  3007               	movlw	high _returnStop
  7440  0478  3FC1               	movwi [1]fsr1
  7441                           
  7442                           ;i2c_master.c: 463: i2c_status.callbackPayload[idx] = (0);
  7443  0479  0851               	movf	setCallBack@idx,w
  7444  047A  3E37               	addlw	(low ((_i2c_status| 0+23)))& (0+255)
  7445  047B  0086               	movwf	6
  7446  047C  0187               	clrf	7
  7447  047D  0181               	clrf	1
  7448  047E  0008               	return
  7449  047F                     __end_of_setCallBack:	
  7450                           
  7451                           	psect	text47
  7452  0629                     __ptext47:	
  7453 ;; *************** function _i2c_setBuffer *****************
  7454 ;; Defined at:
  7455 ;;		line 184 in file "mcc_generated_files/drivers/i2c_master.c"
  7456 ;; Parameters:    Size  Location     Type
  7457 ;;  buffer          1    wreg     PTR void 
  7458 ;;		 -> i2c_readDataBlock@reg(1), i2c_readDataBlock@d(3), i2c_write2ByteRegister@reg(1), i2c_write2ByteRegister@data(2),
      + 
  7459 ;;		 -> i2c_read2ByteRegister@reg(1), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@reg(1), i2c_read1ByteRegist
      +er@d2(1), 
  7460 ;;		 -> i2c_write1ByteRegister@reg(1), i2c_write1ByteRegister@data(1), NULL(0), writebuffer(17), 
  7461 ;;  bufferSize      2    0[BANK0 ] unsigned int 
  7462 ;; Auto vars:     Size  Location     Type
  7463 ;;  buffer          1    3[BANK0 ] PTR void 
  7464 ;;		 -> i2c_readDataBlock@reg(1), i2c_readDataBlock@d(3), i2c_write2ByteRegister@reg(1), i2c_write2ByteRegister@data(2),
      + 
  7465 ;;		 -> i2c_read2ByteRegister@reg(1), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@reg(1), i2c_read1ByteRegist
      +er@d2(1), 
  7466 ;;		 -> i2c_write1ByteRegister@reg(1), i2c_write1ByteRegister@data(1), NULL(0), writebuffer(17), 
  7467 ;; Return value:  Size  Location     Type
  7468 ;;                  1    wreg      void 
  7469 ;; Registers used:
  7470 ;;		wreg
  7471 ;; Tracked objects:
  7472 ;;		On entry : 0/0
  7473 ;;		On exit  : 0/0
  7474 ;;		Unchanged: 0/0
  7475 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7476 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7477 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7478 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7479 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7480 ;;Total ram usage:        4 bytes
  7481 ;; Hardware stack levels used:    1
  7482 ;; Hardware stack levels required when called:    6
  7483 ;; This function calls:
  7484 ;;		Nothing
  7485 ;; This function is called by:
  7486 ;;		_wr1RegCompleteHandler
  7487 ;;		_i2c_writeNBytes
  7488 ;;		_rd1RegCompleteHandler
  7489 ;;		_rd2RegCompleteHandler
  7490 ;;		_wr2RegCompleteHandler
  7491 ;;		_rdBlkRegCompleteHandler
  7492 ;;		_i2c_write1ByteRegister
  7493 ;;		_i2c_read1ByteRegister
  7494 ;;		_i2c_read2ByteRegister
  7495 ;;		_i2c_write2ByteRegister
  7496 ;;		_i2c_readDataBlock
  7497 ;;		_i2c_readNBytes
  7498 ;; This function uses a non-reentrant model
  7499 ;;
  7500                           
  7501                           
  7502                           ;psect for function _i2c_setBuffer
  7503  0629                     _i2c_setBuffer:	
  7504                           
  7505                           ;incstack = 0
  7506                           ; Regs used in _i2c_setBuffer: [wreg]
  7507                           ;i2c_setBuffer@buffer stored from wreg
  7508  0629  0020               	movlb	0	; select bank0
  7509  062A  00D0               	movwf	i2c_setBuffer@buffer
  7510                           
  7511                           ;i2c_master.c: 186: if(i2c_status.bufferFree)
  7512  062B  1D20               	btfss	_i2c_status,2
  7513  062C  0008               	return
  7514                           
  7515                           ;i2c_master.c: 187: {
  7516                           ;i2c_master.c: 188: i2c_status.data_ptr = buffer;
  7517  062D  0850               	movf	i2c_setBuffer@buffer,w
  7518  062E  00CF               	movwf	??_i2c_setBuffer
  7519  062F  084F               	movf	??_i2c_setBuffer,w
  7520  0630  00A2               	movwf	low ((_i2c_status| 0+2))
  7521                           
  7522                           ;i2c_master.c: 189: i2c_status.data_length = bufferSize;
  7523  0631  084E               	movf	i2c_setBuffer@bufferSize+1,w
  7524  0632  00A4               	movwf	_i2c_status+4
  7525  0633  084D               	movf	i2c_setBuffer@bufferSize,w
  7526  0634  00A3               	movwf	_i2c_status+3
  7527                           
  7528                           ;i2c_master.c: 190: i2c_status.bufferFree = 0;
  7529  0635  1120               	bcf	_i2c_status,2
  7530  0636  0008               	return
  7531  0637                     __end_of_i2c_setBuffer:	
  7532                           
  7533                           	psect	text48
  7534  07B7                     __ptext48:	
  7535 ;; *************** function _i2c_driver_stop *****************
  7536 ;; Defined at:
  7537 ;;		line 156 in file "mcc_generated_files/i2c_driver.c"
  7538 ;; Parameters:    Size  Location     Type
  7539 ;;		None
  7540 ;; Auto vars:     Size  Location     Type
  7541 ;;		None
  7542 ;; Return value:  Size  Location     Type
  7543 ;;                  1    wreg      void 
  7544 ;; Registers used:
  7545 ;;		None
  7546 ;; Tracked objects:
  7547 ;;		On entry : 0/0
  7548 ;;		On exit  : 0/0
  7549 ;;		Unchanged: 0/0
  7550 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7551 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7552 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7553 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7554 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7555 ;;Total ram usage:        0 bytes
  7556 ;; Hardware stack levels used:    1
  7557 ;; Hardware stack levels required when called:    6
  7558 ;; This function calls:
  7559 ;;		Nothing
  7560 ;; This function is called by:
  7561 ;;		_do_I2C_SEND_STOP
  7562 ;; This function uses a non-reentrant model
  7563 ;;
  7564                           
  7565                           
  7566                           ;psect for function _i2c_driver_stop
  7567  07B7                     _i2c_driver_stop:	
  7568                           
  7569                           ;i2c_driver.c: 158: SSP1CON2bits.PEN = 1;
  7570                           
  7571                           ;incstack = 0
  7572                           ; Regs used in _i2c_driver_stop: []
  7573  07B7  0024               	movlb	4	; select bank4
  7574  07B8  1516               	bsf	22,2	;volatile
  7575  07B9  0008               	return
  7576  07BA                     __end_of_i2c_driver_stop:	
  7577                           
  7578                           	psect	text49
  7579  07BA                     __ptext49:	
  7580 ;; *************** function _i2c_driver_restart *****************
  7581 ;; Defined at:
  7582 ;;		line 151 in file "mcc_generated_files/i2c_driver.c"
  7583 ;; Parameters:    Size  Location     Type
  7584 ;;		None
  7585 ;; Auto vars:     Size  Location     Type
  7586 ;;		None
  7587 ;; Return value:  Size  Location     Type
  7588 ;;                  1    wreg      void 
  7589 ;; Registers used:
  7590 ;;		None
  7591 ;; Tracked objects:
  7592 ;;		On entry : 0/0
  7593 ;;		On exit  : 0/0
  7594 ;;		Unchanged: 0/0
  7595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7596 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7597 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7598 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7599 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7600 ;;Total ram usage:        0 bytes
  7601 ;; Hardware stack levels used:    1
  7602 ;; Hardware stack levels required when called:    6
  7603 ;; This function calls:
  7604 ;;		Nothing
  7605 ;; This function is called by:
  7606 ;;		_do_I2C_SEND_RESTART_READ
  7607 ;;		_do_I2C_SEND_RESTART_WRITE
  7608 ;;		_do_I2C_SEND_RESTART
  7609 ;; This function uses a non-reentrant model
  7610 ;;
  7611                           
  7612                           
  7613                           ;psect for function _i2c_driver_restart
  7614  07BA                     _i2c_driver_restart:	
  7615                           
  7616                           ;i2c_driver.c: 153: SSP1CON2bits.RSEN = 1;
  7617                           
  7618                           ;incstack = 0
  7619                           ; Regs used in _i2c_driver_restart: []
  7620  07BA  0024               	movlb	4	; select bank4
  7621  07BB  1496               	bsf	22,1	;volatile
  7622  07BC  0008               	return
  7623  07BD                     __end_of_i2c_driver_restart:	
  7624                           
  7625                           	psect	text50
  7626  0786                     __ptext50:	
  7627 ;; *************** function _i2c_driver_sendACK *****************
  7628 ;; Defined at:
  7629 ;;		line 196 in file "mcc_generated_files/i2c_driver.c"
  7630 ;; Parameters:    Size  Location     Type
  7631 ;;		None
  7632 ;; Auto vars:     Size  Location     Type
  7633 ;;		None
  7634 ;; Return value:  Size  Location     Type
  7635 ;;                  1    wreg      void 
  7636 ;; Registers used:
  7637 ;;		None
  7638 ;; Tracked objects:
  7639 ;;		On entry : 0/0
  7640 ;;		On exit  : 0/0
  7641 ;;		Unchanged: 0/0
  7642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7643 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7644 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7645 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7646 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7647 ;;Total ram usage:        0 bytes
  7648 ;; Hardware stack levels used:    1
  7649 ;; Hardware stack levels required when called:    6
  7650 ;; This function calls:
  7651 ;;		Nothing
  7652 ;; This function is called by:
  7653 ;;		_do_I2C_DO_ACK
  7654 ;;		_do_I2C_RX
  7655 ;; This function uses a non-reentrant model
  7656 ;;
  7657                           
  7658                           
  7659                           ;psect for function _i2c_driver_sendACK
  7660  0786                     _i2c_driver_sendACK:	
  7661                           
  7662                           ;i2c_driver.c: 198: SSP1CON2bits.ACKDT = 0;
  7663                           
  7664                           ;incstack = 0
  7665                           ; Regs used in _i2c_driver_sendACK: []
  7666  0786  0024               	movlb	4	; select bank4
  7667  0787  1296               	bcf	22,5	;volatile
  7668                           
  7669                           ;i2c_driver.c: 199: SSP1CON2bits.ACKEN = 1;
  7670  0788  1616               	bsf	22,4	;volatile
  7671  0789  0008               	return
  7672  078A                     __end_of_i2c_driver_sendACK:	
  7673                           
  7674                           	psect	text51
  7675  07BD                     __ptext51:	
  7676 ;; *************** function _i2c_driver_start *****************
  7677 ;; Defined at:
  7678 ;;		line 146 in file "mcc_generated_files/i2c_driver.c"
  7679 ;; Parameters:    Size  Location     Type
  7680 ;;		None
  7681 ;; Auto vars:     Size  Location     Type
  7682 ;;		None
  7683 ;; Return value:  Size  Location     Type
  7684 ;;                  1    wreg      void 
  7685 ;; Registers used:
  7686 ;;		None
  7687 ;; Tracked objects:
  7688 ;;		On entry : 0/0
  7689 ;;		On exit  : 0/0
  7690 ;;		Unchanged: 0/0
  7691 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7692 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7693 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7694 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7695 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7696 ;;Total ram usage:        0 bytes
  7697 ;; Hardware stack levels used:    1
  7698 ;; Hardware stack levels required when called:    6
  7699 ;; This function calls:
  7700 ;;		Nothing
  7701 ;; This function is called by:
  7702 ;;		_i2c_masterOperation
  7703 ;; This function uses a non-reentrant model
  7704 ;;
  7705                           
  7706                           
  7707                           ;psect for function _i2c_driver_start
  7708  07BD                     _i2c_driver_start:	
  7709                           
  7710                           ;i2c_driver.c: 148: SSP1CON2bits.SEN = 1;
  7711                           
  7712                           ;incstack = 0
  7713                           ; Regs used in _i2c_driver_start: []
  7714  07BD  0024               	movlb	4	; select bank4
  7715  07BE  1416               	bsf	22,0	;volatile
  7716  07BF  0008               	return
  7717  07C0                     __end_of_i2c_driver_start:	
  7718                           
  7719                           	psect	text52
  7720  05D3                     __ptext52:	
  7721 ;; *************** function _i2c_close *****************
  7722 ;; Defined at:
  7723 ;;		line 162 in file "mcc_generated_files/drivers/i2c_master.c"
  7724 ;; Parameters:    Size  Location     Type
  7725 ;;		None
  7726 ;; Auto vars:     Size  Location     Type
  7727 ;;  ret             1    1[BANK0 ] enum E12166
  7728 ;; Return value:  Size  Location     Type
  7729 ;;                  1    wreg      enum E12166
  7730 ;; Registers used:
  7731 ;;		wreg, status,2, status,0, pclath, cstack
  7732 ;; Tracked objects:
  7733 ;;		On entry : 0/0
  7734 ;;		On exit  : 0/0
  7735 ;;		Unchanged: 0/0
  7736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7737 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7738 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7739 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7740 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7741 ;;Total ram usage:        2 bytes
  7742 ;; Hardware stack levels used:    1
  7743 ;; Hardware stack levels required when called:    7
  7744 ;; This function calls:
  7745 ;;		_mssp_clearIRQ
  7746 ;;		_mssp_disableIRQ
  7747 ;; This function is called by:
  7748 ;;		_i2c_writeNBytes
  7749 ;;		_i2c_write1ByteRegister
  7750 ;;		_i2c_read1ByteRegister
  7751 ;;		_i2c_read2ByteRegister
  7752 ;;		_i2c_write2ByteRegister
  7753 ;;		_i2c_readDataBlock
  7754 ;;		_i2c_readNBytes
  7755 ;; This function uses a non-reentrant model
  7756 ;;
  7757                           
  7758                           
  7759                           ;psect for function _i2c_close
  7760  05D3                     _i2c_close:	
  7761                           
  7762                           ;i2c_master.c: 164: i2c_error_t ret = I2C_BUSY;
  7763                           
  7764                           ;incstack = 0
  7765                           ; Regs used in _i2c_close: [wreg+status,2+status,0+pclath+cstack]
  7766  05D3  0020               	movlb	0	; select bank0
  7767  05D4  01CE               	clrf	i2c_close@ret
  7768  05D5  0ACE               	incf	i2c_close@ret,f
  7769                           
  7770                           ;i2c_master.c: 165: if(!i2c_status.busy)
  7771  05D6  1820               	btfsc	_i2c_status,0
  7772  05D7  2DE7               	goto	l361
  7773                           
  7774                           ;i2c_master.c: 166: {
  7775                           ;i2c_master.c: 167: i2c_status.inUse = 0;
  7776  05D8  10A0               	bcf	_i2c_status,1
  7777                           
  7778                           ;i2c_master.c: 169: i2c_status.address = 0xff;
  7779  05D9  30FF               	movlw	255
  7780  05DA  00CD               	movwf	??_i2c_close
  7781  05DB  084D               	movf	??_i2c_close,w
  7782  05DC  00A1               	movwf	_i2c_status+1
  7783                           
  7784                           ;i2c_master.c: 170: mssp_clearIRQ();
  7785  05DD  3187  27C3  3185   	fcall	_mssp_clearIRQ
  7786                           
  7787                           ;i2c_master.c: 171: mssp_disableIRQ();
  7788  05E0  3187  27C0         	fcall	_mssp_disableIRQ
  7789                           
  7790                           ;i2c_master.c: 172: ret = i2c_status.error;
  7791  05E2  0020               	movlb	0	; select bank0
  7792  05E3  082A               	movf	_i2c_status+10,w
  7793  05E4  00CD               	movwf	??_i2c_close
  7794  05E5  084D               	movf	??_i2c_close,w
  7795  05E6  00CE               	movwf	i2c_close@ret
  7796  05E7                     l361:	
  7797                           
  7798                           ;i2c_master.c: 173: }
  7799                           ;i2c_master.c: 174: return ret;
  7800  05E7  084E               	movf	i2c_close@ret,w
  7801  05E8  0008               	return
  7802  05E9                     __end_of_i2c_close:	
  7803                           
  7804                           	psect	text53
  7805  07C0                     __ptext53:	
  7806 ;; *************** function _mssp_disableIRQ *****************
  7807 ;; Defined at:
  7808 ;;		line 48 in file "mcc_generated_files/i2c_driver.c"
  7809 ;; Parameters:    Size  Location     Type
  7810 ;;		None
  7811 ;; Auto vars:     Size  Location     Type
  7812 ;;		None
  7813 ;; Return value:  Size  Location     Type
  7814 ;;                  1    wreg      void 
  7815 ;; Registers used:
  7816 ;;		None
  7817 ;; Tracked objects:
  7818 ;;		On entry : 0/0
  7819 ;;		On exit  : 0/0
  7820 ;;		Unchanged: 0/0
  7821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7822 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7823 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7824 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7825 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7826 ;;Total ram usage:        0 bytes
  7827 ;; Hardware stack levels used:    1
  7828 ;; Hardware stack levels required when called:    6
  7829 ;; This function calls:
  7830 ;;		Nothing
  7831 ;; This function is called by:
  7832 ;;		_i2c_close
  7833 ;;		_i2c_setTimeOut
  7834 ;; This function uses a non-reentrant model
  7835 ;;
  7836                           
  7837                           
  7838                           ;psect for function _mssp_disableIRQ
  7839  07C0                     _mssp_disableIRQ:	
  7840                           
  7841                           ;i2c_driver.c: 50: PIE1bits.SSP1IE = 0;
  7842                           
  7843                           ;incstack = 0
  7844                           ; Regs used in _mssp_disableIRQ: []
  7845  07C0  0021               	movlb	1	; select bank1
  7846  07C1  1190               	bcf	16,3	;volatile
  7847  07C2  0008               	return
  7848  07C3                     __end_of_mssp_disableIRQ:	
  7849                           
  7850                           	psect	text54
  7851  07C3                     __ptext54:	
  7852 ;; *************** function _mssp_clearIRQ *****************
  7853 ;; Defined at:
  7854 ;;		line 53 in file "mcc_generated_files/i2c_driver.c"
  7855 ;; Parameters:    Size  Location     Type
  7856 ;;		None
  7857 ;; Auto vars:     Size  Location     Type
  7858 ;;		None
  7859 ;; Return value:  Size  Location     Type
  7860 ;;                  1    wreg      void 
  7861 ;; Registers used:
  7862 ;;		None
  7863 ;; Tracked objects:
  7864 ;;		On entry : 0/0
  7865 ;;		On exit  : 0/0
  7866 ;;		Unchanged: 0/0
  7867 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7868 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7869 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7870 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7871 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7872 ;;Total ram usage:        0 bytes
  7873 ;; Hardware stack levels used:    1
  7874 ;; Hardware stack levels required when called:    6
  7875 ;; This function calls:
  7876 ;;		Nothing
  7877 ;; This function is called by:
  7878 ;;		_i2c_open
  7879 ;;		_i2c_close
  7880 ;;		_i2c_ISR
  7881 ;; This function uses a non-reentrant model
  7882 ;;
  7883                           
  7884                           
  7885                           ;psect for function _mssp_clearIRQ
  7886  07C3                     _mssp_clearIRQ:	
  7887                           
  7888                           ;i2c_driver.c: 55: PIR1bits.SSP1IF = 0;
  7889                           
  7890                           ;incstack = 0
  7891                           ; Regs used in _mssp_clearIRQ: []
  7892  07C3  0020               	movlb	0	; select bank0
  7893  07C4  1190               	bcf	16,3	;volatile
  7894  07C5  0008               	return
  7895  07C6                     __end_of_mssp_clearIRQ:	
  7896                           
  7897                           	psect	text55
  7898  01DE                     __ptext55:	
  7899 ;; *************** function ___awdiv *****************
  7900 ;; Defined at:
  7901 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  7902 ;; Parameters:    Size  Location     Type
  7903 ;;  divisor         2    0[BANK0 ] int 
  7904 ;;  dividend        2    2[BANK0 ] int 
  7905 ;; Auto vars:     Size  Location     Type
  7906 ;;  quotient        2    7[BANK0 ] int 
  7907 ;;  sign            1    6[BANK0 ] unsigned char 
  7908 ;;  counter         1    5[BANK0 ] unsigned char 
  7909 ;; Return value:  Size  Location     Type
  7910 ;;                  2    0[BANK0 ] int 
  7911 ;; Registers used:
  7912 ;;		wreg, status,2, status,0
  7913 ;; Tracked objects:
  7914 ;;		On entry : 0/0
  7915 ;;		On exit  : 0/0
  7916 ;;		Unchanged: 0/0
  7917 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7918 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7919 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7920 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7921 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7922 ;;Total ram usage:        9 bytes
  7923 ;; Hardware stack levels used:    1
  7924 ;; Hardware stack levels required when called:    6
  7925 ;; This function calls:
  7926 ;;		Nothing
  7927 ;; This function is called by:
  7928 ;;		_writeDisplay
  7929 ;; This function uses a non-reentrant model
  7930 ;;
  7931                           
  7932                           
  7933                           ;psect for function ___awdiv
  7934  01DE                     ___awdiv:	
  7935                           
  7936                           ;incstack = 0
  7937                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  7938  01DE  0020               	movlb	0	; select bank0
  7939  01DF  01D3               	clrf	___awdiv@sign
  7940  01E0  1FCE               	btfss	___awdiv@divisor+1,7
  7941  01E1  29E9               	goto	l2603
  7942  01E2  09CD               	comf	___awdiv@divisor,f
  7943  01E3  09CE               	comf	___awdiv@divisor+1,f
  7944  01E4  0ACD               	incf	___awdiv@divisor,f
  7945  01E5  1903               	skipnz
  7946  01E6  0ACE               	incf	___awdiv@divisor+1,f
  7947  01E7  01D3               	clrf	___awdiv@sign
  7948  01E8  0AD3               	incf	___awdiv@sign,f
  7949  01E9                     l2603:	
  7950  01E9  1FD0               	btfss	___awdiv@dividend+1,7
  7951  01EA  29F4               	goto	l2609
  7952  01EB  09CF               	comf	___awdiv@dividend,f
  7953  01EC  09D0               	comf	___awdiv@dividend+1,f
  7954  01ED  0ACF               	incf	___awdiv@dividend,f
  7955  01EE  1903               	skipnz
  7956  01EF  0AD0               	incf	___awdiv@dividend+1,f
  7957  01F0  3001               	movlw	1
  7958  01F1  00D1               	movwf	??___awdiv
  7959  01F2  0851               	movf	??___awdiv,w
  7960  01F3  06D3               	xorwf	___awdiv@sign,f
  7961  01F4                     l2609:	
  7962  01F4  01D4               	clrf	___awdiv@quotient
  7963  01F5  01D5               	clrf	___awdiv@quotient+1
  7964  01F6  084D               	movf	___awdiv@divisor,w
  7965  01F7  044E               	iorwf	___awdiv@divisor+1,w
  7966  01F8  1903               	btfsc	3,2
  7967  01F9  2A23               	goto	l2631
  7968  01FA  01D2               	clrf	___awdiv@counter
  7969  01FB  0AD2               	incf	___awdiv@counter,f
  7970  01FC                     l2619:	
  7971  01FC  1BCE               	btfsc	___awdiv@divisor+1,7
  7972  01FD  2A08               	goto	l2621
  7973  01FE  3001               	movlw	1
  7974  01FF                     u995:	
  7975  01FF  35CD               	lslf	___awdiv@divisor,f
  7976  0200  0DCE               	rlf	___awdiv@divisor+1,f
  7977  0201  0B89               	decfsz	9,f
  7978  0202  29FF               	goto	u995
  7979  0203  3001               	movlw	1
  7980  0204  00D1               	movwf	??___awdiv
  7981  0205  0851               	movf	??___awdiv,w
  7982  0206  07D2               	addwf	___awdiv@counter,f
  7983  0207  29FC               	goto	l2619
  7984  0208                     l2621:	
  7985  0208  3001               	movlw	1
  7986  0209                     u1015:	
  7987  0209  35D4               	lslf	___awdiv@quotient,f
  7988  020A  0DD5               	rlf	___awdiv@quotient+1,f
  7989  020B  0B89               	decfsz	9,f
  7990  020C  2A09               	goto	u1015
  7991  020D  084E               	movf	___awdiv@divisor+1,w
  7992  020E  0250               	subwf	___awdiv@dividend+1,w
  7993  020F  1D03               	skipz
  7994  0210  2A13               	goto	u1025
  7995  0211  084D               	movf	___awdiv@divisor,w
  7996  0212  024F               	subwf	___awdiv@dividend,w
  7997  0213                     u1025:	
  7998  0213  1C03               	skipc
  7999  0214  2A1A               	goto	l2627
  8000  0215  084D               	movf	___awdiv@divisor,w
  8001  0216  02CF               	subwf	___awdiv@dividend,f
  8002  0217  084E               	movf	___awdiv@divisor+1,w
  8003  0218  3BD0               	subwfb	___awdiv@dividend+1,f
  8004  0219  1454               	bsf	___awdiv@quotient,0
  8005  021A                     l2627:	
  8006  021A  3001               	movlw	1
  8007  021B                     u1035:	
  8008  021B  36CE               	lsrf	___awdiv@divisor+1,f
  8009  021C  0CCD               	rrf	___awdiv@divisor,f
  8010  021D  0B89               	decfsz	9,f
  8011  021E  2A1B               	goto	u1035
  8012  021F  3001               	movlw	1
  8013  0220  02D2               	subwf	___awdiv@counter,f
  8014  0221  1D03               	btfss	3,2
  8015  0222  2A08               	goto	l2621
  8016  0223                     l2631:	
  8017  0223  0853               	movf	___awdiv@sign,w
  8018  0224  1903               	btfsc	3,2
  8019  0225  2A2B               	goto	l2635
  8020  0226  09D4               	comf	___awdiv@quotient,f
  8021  0227  09D5               	comf	___awdiv@quotient+1,f
  8022  0228  0AD4               	incf	___awdiv@quotient,f
  8023  0229  1903               	skipnz
  8024  022A  0AD5               	incf	___awdiv@quotient+1,f
  8025  022B                     l2635:	
  8026  022B  0855               	movf	___awdiv@quotient+1,w
  8027  022C  00CE               	movwf	?___awdiv+1
  8028  022D  0854               	movf	___awdiv@quotient,w
  8029  022E  00CD               	movwf	?___awdiv
  8030  022F  0008               	return
  8031  0230                     __end_of___awdiv:	
  8032                           
  8033                           	psect	text56
  8034  004C                     __ptext56:	
  8035 ;; *************** function _drawPixel *****************
  8036 ;; Defined at:
  8037 ;;		line 66 in file "main.c"
  8038 ;; Parameters:    Size  Location     Type
  8039 ;;  x               1    wreg     unsigned char 
  8040 ;;  y               1    0[BANK0 ] unsigned char 
  8041 ;;  color           1    1[BANK0 ] unsigned char 
  8042 ;; Auto vars:     Size  Location     Type
  8043 ;;  x               1    8[BANK0 ] unsigned char 
  8044 ;; Return value:  Size  Location     Type
  8045 ;;                  1    wreg      void 
  8046 ;; Registers used:
  8047 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8048 ;; Tracked objects:
  8049 ;;		On entry : 0/0
  8050 ;;		On exit  : 0/0
  8051 ;;		Unchanged: 0/0
  8052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8053 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8054 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8055 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8056 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8057 ;;Total ram usage:        9 bytes
  8058 ;; Hardware stack levels used:    1
  8059 ;; Hardware stack levels required when called:    6
  8060 ;; This function calls:
  8061 ;;		Nothing
  8062 ;; This function is called by:
  8063 ;;		_main
  8064 ;; This function uses a non-reentrant model
  8065 ;;
  8066                           
  8067                           
  8068                           ;psect for function _drawPixel
  8069  004C                     _drawPixel:	
  8070                           
  8071                           ;incstack = 0
  8072                           ; Regs used in _drawPixel: [wreg+fsr1l+fsr1h+status,2+status,0]
  8073                           ;drawPixel@x stored from wreg
  8074  004C  0020               	movlb	0	; select bank0
  8075  004D  00D5               	movwf	drawPixel@x
  8076                           
  8077                           ;main.c: 67: if (color == 1) {
  8078  004E  034E               	decf	drawPixel@color,w
  8079  004F  1D03               	btfss	3,2
  8080  0050  287C               	goto	l2803
  8081                           
  8082                           ;main.c: 68: displaybuffer[y] |= 1 << x;
  8083  0051  3001               	movlw	1
  8084  0052  00CF               	movwf	??_drawPixel
  8085  0053  3000               	movlw	0
  8086  0054  00D0               	movwf	??_drawPixel+1
  8087  0055  0A55               	incf	drawPixel@x,w
  8088  0056  2859               	goto	u1124
  8089  0057                     u1125:	
  8090  0057  35CF               	lslf	??_drawPixel,f
  8091  0058  0DD0               	rlf	??_drawPixel+1,f
  8092  0059                     u1124:	
  8093  0059  0B89               	decfsz	9,f
  8094  005A  2857               	goto	u1125
  8095  005B  354D               	lslf	drawPixel@y,w
  8096  005C  3E3D               	addlw	(low (_displaybuffer| 0))& (0+255)
  8097  005D  0086               	movwf	6
  8098  005E  0187               	clrf	7
  8099  005F  084F               	movf	??_drawPixel,w
  8100  0060  0481               	iorwf	1,f
  8101  0061  3141               	addfsr 1,1
  8102  0062  0850               	movf	??_drawPixel+1,w
  8103  0063  0481               	iorwf	1,f
  8104                           
  8105                           ;main.c: 69: displaybuffer[y] &= ~(1 << (x + 8));
  8106  0064  3001               	movlw	1
  8107  0065  00CF               	movwf	??_drawPixel
  8108  0066  3000               	movlw	0
  8109  0067  00D0               	movwf	??_drawPixel+1
  8110  0068  0855               	movf	drawPixel@x,w
  8111  0069  3E08               	addlw	8
  8112  006A  0A89               	incf	9,f
  8113  006B  286E               	goto	u1134
  8114  006C                     u1135:	
  8115  006C  35CF               	lslf	??_drawPixel,f
  8116  006D  0DD0               	rlf	??_drawPixel+1,f
  8117  006E                     u1134:	
  8118  006E  0B89               	decfsz	9,f
  8119  006F  286C               	goto	u1135
  8120  0070  09CF               	comf	??_drawPixel,f
  8121  0071  09D0               	comf	??_drawPixel+1,f
  8122  0072  354D               	lslf	drawPixel@y,w
  8123  0073  3E3D               	addlw	(low (_displaybuffer| 0))& (0+255)
  8124  0074  0086               	movwf	6
  8125  0075  0187               	clrf	7
  8126  0076  084F               	movf	??_drawPixel,w
  8127  0077  0581               	andwf	1,f
  8128  0078  3141               	addfsr 1,1
  8129  0079  0850               	movf	??_drawPixel+1,w
  8130  007A  0581               	andwf	1,f
  8131                           
  8132                           ;main.c: 70: } else if (color == 2) {
  8133  007B  0008               	return
  8134  007C                     l2803:	
  8135  007C  3002               	movlw	2
  8136  007D  064E               	xorwf	drawPixel@color,w
  8137  007E  1D03               	btfss	3,2
  8138  007F  28AB               	goto	l2807
  8139                           
  8140                           ;main.c: 71: displaybuffer[y] |= 1 << (x + 8);
  8141  0080  3001               	movlw	1
  8142  0081  00CF               	movwf	??_drawPixel
  8143  0082  3000               	movlw	0
  8144  0083  00D0               	movwf	??_drawPixel+1
  8145  0084  0855               	movf	drawPixel@x,w
  8146  0085  3E08               	addlw	8
  8147  0086  0A89               	incf	9,f
  8148  0087  288A               	goto	u1154
  8149  0088                     u1155:	
  8150  0088  35CF               	lslf	??_drawPixel,f
  8151  0089  0DD0               	rlf	??_drawPixel+1,f
  8152  008A                     u1154:	
  8153  008A  0B89               	decfsz	9,f
  8154  008B  2888               	goto	u1155
  8155  008C  354D               	lslf	drawPixel@y,w
  8156  008D  3E3D               	addlw	(low (_displaybuffer| 0))& (0+255)
  8157  008E  0086               	movwf	6
  8158  008F  0187               	clrf	7
  8159  0090  084F               	movf	??_drawPixel,w
  8160  0091  0481               	iorwf	1,f
  8161  0092  3141               	addfsr 1,1
  8162  0093  0850               	movf	??_drawPixel+1,w
  8163  0094  0481               	iorwf	1,f
  8164                           
  8165                           ;main.c: 72: displaybuffer[y] &= ~(1 << x);
  8166  0095  3001               	movlw	1
  8167  0096  00CF               	movwf	??_drawPixel
  8168  0097  3000               	movlw	0
  8169  0098  00D0               	movwf	??_drawPixel+1
  8170  0099  0A55               	incf	drawPixel@x,w
  8171  009A  289D               	goto	u1164
  8172  009B                     u1165:	
  8173  009B  35CF               	lslf	??_drawPixel,f
  8174  009C  0DD0               	rlf	??_drawPixel+1,f
  8175  009D                     u1164:	
  8176  009D  0B89               	decfsz	9,f
  8177  009E  289B               	goto	u1165
  8178  009F  09CF               	comf	??_drawPixel,f
  8179  00A0  09D0               	comf	??_drawPixel+1,f
  8180  00A1  354D               	lslf	drawPixel@y,w
  8181  00A2  3E3D               	addlw	(low (_displaybuffer| 0))& (0+255)
  8182  00A3  0086               	movwf	6
  8183  00A4  0187               	clrf	7
  8184  00A5  084F               	movf	??_drawPixel,w
  8185  00A6  0581               	andwf	1,f
  8186  00A7  3141               	addfsr 1,1
  8187  00A8  0850               	movf	??_drawPixel+1,w
  8188  00A9  0581               	andwf	1,f
  8189                           
  8190                           ;main.c: 73: } else if (color == 3) {
  8191  00AA  0008               	return
  8192  00AB                     l2807:	
  8193  00AB  3003               	movlw	3
  8194  00AC  064E               	xorwf	drawPixel@color,w
  8195  00AD  1D03               	btfss	3,2
  8196  00AE  28D5               	goto	l2811
  8197                           
  8198                           ;main.c: 74: displaybuffer[y] |= (1 << (x + 8)) | (1 << x);
  8199  00AF  3001               	movlw	1
  8200  00B0  00CF               	movwf	??_drawPixel
  8201  00B1  3000               	movlw	0
  8202  00B2  00D0               	movwf	??_drawPixel+1
  8203  00B3  0A55               	incf	drawPixel@x,w
  8204  00B4  28B7               	goto	u1184
  8205  00B5                     u1185:	
  8206  00B5  35CF               	lslf	??_drawPixel,f
  8207  00B6  0DD0               	rlf	??_drawPixel+1,f
  8208  00B7                     u1184:	
  8209  00B7  0B89               	decfsz	9,f
  8210  00B8  28B5               	goto	u1185
  8211  00B9  3001               	movlw	1
  8212  00BA  00D1               	movwf	??_drawPixel+2
  8213  00BB  3000               	movlw	0
  8214  00BC  00D2               	movwf	??_drawPixel+3
  8215  00BD  0855               	movf	drawPixel@x,w
  8216  00BE  3E08               	addlw	8
  8217  00BF  0A89               	incf	9,f
  8218  00C0  28C3               	goto	u1194
  8219  00C1                     u1195:	
  8220  00C1  35D1               	lslf	??_drawPixel+2,f
  8221  00C2  0DD2               	rlf	??_drawPixel+3,f
  8222  00C3                     u1194:	
  8223  00C3  0B89               	decfsz	9,f
  8224  00C4  28C1               	goto	u1195
  8225  00C5  084F               	movf	??_drawPixel,w
  8226  00C6  0451               	iorwf	??_drawPixel+2,w
  8227  00C7  00D3               	movwf	??_drawPixel+4
  8228  00C8  0850               	movf	??_drawPixel+1,w
  8229  00C9  0452               	iorwf	??_drawPixel+3,w
  8230  00CA  00D4               	movwf	??_drawPixel+5
  8231  00CB  354D               	lslf	drawPixel@y,w
  8232  00CC  3E3D               	addlw	(low (_displaybuffer| 0))& (0+255)
  8233  00CD  0086               	movwf	6
  8234  00CE  0187               	clrf	7
  8235  00CF  0853               	movf	??_drawPixel+4,w
  8236  00D0  0481               	iorwf	1,f
  8237  00D1  3141               	addfsr 1,1
  8238  00D2  0854               	movf	??_drawPixel+5,w
  8239  00D3  0481               	iorwf	1,f
  8240                           
  8241                           ;main.c: 75: } else if (color == 0) {
  8242  00D4  0008               	return
  8243  00D5                     l2811:	
  8244  00D5  084E               	movf	drawPixel@color,w
  8245  00D6  1D03               	btfss	3,2
  8246  00D7  0008               	return
  8247                           
  8248                           ;main.c: 76: displaybuffer[y] &= ~(1 << x) & ~(1 << (x + 8));
  8249  00D8  3001               	movlw	1
  8250  00D9  00CF               	movwf	??_drawPixel
  8251  00DA  3000               	movlw	0
  8252  00DB  00D0               	movwf	??_drawPixel+1
  8253  00DC  0855               	movf	drawPixel@x,w
  8254  00DD  3E08               	addlw	8
  8255  00DE  0A89               	incf	9,f
  8256  00DF  28E2               	goto	u1214
  8257  00E0                     u1215:	
  8258  00E0  35CF               	lslf	??_drawPixel,f
  8259  00E1  0DD0               	rlf	??_drawPixel+1,f
  8260  00E2                     u1214:	
  8261  00E2  0B89               	decfsz	9,f
  8262  00E3  28E0               	goto	u1215
  8263  00E4  09CF               	comf	??_drawPixel,f
  8264  00E5  09D0               	comf	??_drawPixel+1,f
  8265  00E6  3001               	movlw	1
  8266  00E7  00D1               	movwf	??_drawPixel+2
  8267  00E8  3000               	movlw	0
  8268  00E9  00D2               	movwf	??_drawPixel+3
  8269  00EA  0A55               	incf	drawPixel@x,w
  8270  00EB  28EE               	goto	u1224
  8271  00EC                     u1225:	
  8272  00EC  35D1               	lslf	??_drawPixel+2,f
  8273  00ED  0DD2               	rlf	??_drawPixel+3,f
  8274  00EE                     u1224:	
  8275  00EE  0B89               	decfsz	9,f
  8276  00EF  28EC               	goto	u1225
  8277  00F0  09D1               	comf	??_drawPixel+2,f
  8278  00F1  09D2               	comf	??_drawPixel+3,f
  8279  00F2  084F               	movf	??_drawPixel,w
  8280  00F3  0551               	andwf	??_drawPixel+2,w
  8281  00F4  00D3               	movwf	??_drawPixel+4
  8282  00F5  0850               	movf	??_drawPixel+1,w
  8283  00F6  0552               	andwf	??_drawPixel+3,w
  8284  00F7  00D4               	movwf	??_drawPixel+5
  8285  00F8  354D               	lslf	drawPixel@y,w
  8286  00F9  3E3D               	addlw	(low (_displaybuffer| 0))& (0+255)
  8287  00FA  0086               	movwf	6
  8288  00FB  0187               	clrf	7
  8289  00FC  0853               	movf	??_drawPixel+4,w
  8290  00FD  0581               	andwf	1,f
  8291  00FE  3141               	addfsr 1,1
  8292  00FF  0854               	movf	??_drawPixel+5,w
  8293  0100  0581               	andwf	1,f
  8294  0101  0008               	return
  8295  0102                     __end_of_drawPixel:	
  8296                           
  8297                           	psect	text57
  8298  0768                     __ptext57:	
  8299 ;; *************** function _SYSTEM_Initialize *****************
  8300 ;; Defined at:
  8301 ;;		line 77 in file "mcc_generated_files/mcc.c"
  8302 ;; Parameters:    Size  Location     Type
  8303 ;;		None
  8304 ;; Auto vars:     Size  Location     Type
  8305 ;;		None
  8306 ;; Return value:  Size  Location     Type
  8307 ;;                  1    wreg      void 
  8308 ;; Registers used:
  8309 ;;		wreg, status,2, status,0, pclath, cstack
  8310 ;; Tracked objects:
  8311 ;;		On entry : 0/0
  8312 ;;		On exit  : 0/0
  8313 ;;		Unchanged: 0/0
  8314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8315 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8316 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8317 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8318 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8319 ;;Total ram usage:        0 bytes
  8320 ;; Hardware stack levels used:    1
  8321 ;; Hardware stack levels required when called:    7
  8322 ;; This function calls:
  8323 ;;		_OSCILLATOR_Initialize
  8324 ;;		_PIN_MANAGER_Initialize
  8325 ;; This function is called by:
  8326 ;;		_main
  8327 ;; This function uses a non-reentrant model
  8328 ;;
  8329                           
  8330                           
  8331                           ;psect for function _SYSTEM_Initialize
  8332  0768                     _SYSTEM_Initialize:	
  8333                           
  8334                           ;mcc.c: 79: PIN_MANAGER_Initialize();
  8335                           
  8336                           ;incstack = 0
  8337                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  8338  0768  3184  240D  3187   	fcall	_PIN_MANAGER_Initialize
  8339                           
  8340                           ;mcc.c: 80: OSCILLATOR_Initialize();
  8341  076B  3187  2723         	fcall	_OSCILLATOR_Initialize
  8342  076D  0008               	return
  8343  076E                     __end_of_SYSTEM_Initialize:	
  8344                           
  8345                           	psect	text58
  8346  040D                     __ptext58:	
  8347 ;; *************** function _PIN_MANAGER_Initialize *****************
  8348 ;; Defined at:
  8349 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  8350 ;; Parameters:    Size  Location     Type
  8351 ;;		None
  8352 ;; Auto vars:     Size  Location     Type
  8353 ;;		None
  8354 ;; Return value:  Size  Location     Type
  8355 ;;                  1    wreg      void 
  8356 ;; Registers used:
  8357 ;;		wreg, status,2
  8358 ;; Tracked objects:
  8359 ;;		On entry : 0/0
  8360 ;;		On exit  : 0/0
  8361 ;;		Unchanged: 0/0
  8362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8363 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8364 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8365 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8366 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8367 ;;Total ram usage:        0 bytes
  8368 ;; Hardware stack levels used:    1
  8369 ;; Hardware stack levels required when called:    6
  8370 ;; This function calls:
  8371 ;;		Nothing
  8372 ;; This function is called by:
  8373 ;;		_SYSTEM_Initialize
  8374 ;; This function uses a non-reentrant model
  8375 ;;
  8376                           
  8377                           
  8378                           ;psect for function _PIN_MANAGER_Initialize
  8379  040D                     _PIN_MANAGER_Initialize:	
  8380                           
  8381                           ;pin_manager.c: 57: LATA = 0x00;
  8382                           
  8383                           ;incstack = 0
  8384                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  8385  040D  0022               	movlb	2	; select bank2
  8386  040E  018C               	clrf	12	;volatile
  8387                           
  8388                           ;pin_manager.c: 58: LATB = 0x00;
  8389  040F  018D               	clrf	13	;volatile
  8390                           
  8391                           ;pin_manager.c: 59: LATC = 0x00;
  8392  0410  018E               	clrf	14	;volatile
  8393                           
  8394                           ;pin_manager.c: 64: TRISA = 0x37;
  8395  0411  3037               	movlw	55
  8396  0412  0021               	movlb	1	; select bank1
  8397  0413  008C               	movwf	12	;volatile
  8398                           
  8399                           ;pin_manager.c: 65: TRISB = 0xF0;
  8400  0414  30F0               	movlw	240
  8401  0415  008D               	movwf	13	;volatile
  8402                           
  8403                           ;pin_manager.c: 66: TRISC = 0xFF;
  8404  0416  30FF               	movlw	255
  8405  0417  008E               	movwf	14	;volatile
  8406                           
  8407                           ;pin_manager.c: 71: ANSELC = 0xCF;
  8408  0418  30CF               	movlw	207
  8409  0419  0023               	movlb	3	; select bank3
  8410  041A  008E               	movwf	14	;volatile
  8411                           
  8412                           ;pin_manager.c: 72: ANSELB = 0xA0;
  8413  041B  30A0               	movlw	160
  8414  041C  008D               	movwf	13	;volatile
  8415                           
  8416                           ;pin_manager.c: 73: ANSELA = 0x17;
  8417  041D  3017               	movlw	23
  8418  041E  008C               	movwf	12	;volatile
  8419                           
  8420                           ;pin_manager.c: 78: WPUB = 0x00;
  8421  041F  0024               	movlb	4	; select bank4
  8422  0420  018D               	clrf	13	;volatile
  8423                           
  8424                           ;pin_manager.c: 79: WPUA = 0x00;
  8425  0421  018C               	clrf	12	;volatile
  8426                           
  8427                           ;pin_manager.c: 80: WPUC = 0x00;
  8428  0422  018E               	clrf	14	;volatile
  8429                           
  8430                           ;pin_manager.c: 81: OPTION_REGbits.nWPUEN = 1;
  8431  0423  0021               	movlb	1	; select bank1
  8432  0424  1795               	bsf	21,7	;volatile
  8433                           
  8434                           ;pin_manager.c: 86: ODCONA = 0x00;
  8435  0425  0025               	movlb	5	; select bank5
  8436  0426  018C               	clrf	12	;volatile
  8437                           
  8438                           ;pin_manager.c: 87: ODCONB = 0x00;
  8439  0427  018D               	clrf	13	;volatile
  8440                           
  8441                           ;pin_manager.c: 88: ODCONC = 0x00;
  8442  0428  018E               	clrf	14	;volatile
  8443                           
  8444                           ;pin_manager.c: 95: SSPCLKPPS = 0x0E;
  8445  0429  300E               	movlw	14
  8446  042A  003C               	movlb	28	; select bank28
  8447  042B  00A0               	movwf	32	;volatile
  8448                           
  8449                           ;pin_manager.c: 96: SSPDATPPS = 0x0C;
  8450  042C  300C               	movlw	12
  8451  042D  00A1               	movwf	33	;volatile
  8452                           
  8453                           ;pin_manager.c: 97: RB6PPS = 0x10;
  8454  042E  3010               	movlw	16
  8455  042F  003D               	movlb	29	; select bank29
  8456  0430  009E               	movwf	30	;volatile
  8457                           
  8458                           ;pin_manager.c: 98: RB4PPS = 0x11;
  8459  0431  3011               	movlw	17
  8460  0432  009C               	movwf	28	;volatile
  8461  0433  0008               	return
  8462  0434                     __end_of_PIN_MANAGER_Initialize:	
  8463                           
  8464                           	psect	text59
  8465  0723                     __ptext59:	
  8466 ;; *************** function _OSCILLATOR_Initialize *****************
  8467 ;; Defined at:
  8468 ;;		line 83 in file "mcc_generated_files/mcc.c"
  8469 ;; Parameters:    Size  Location     Type
  8470 ;;		None
  8471 ;; Auto vars:     Size  Location     Type
  8472 ;;		None
  8473 ;; Return value:  Size  Location     Type
  8474 ;;                  1    wreg      void 
  8475 ;; Registers used:
  8476 ;;		wreg, status,2
  8477 ;; Tracked objects:
  8478 ;;		On entry : 0/0
  8479 ;;		On exit  : 0/0
  8480 ;;		Unchanged: 0/0
  8481 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8482 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8483 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8484 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8485 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8486 ;;Total ram usage:        0 bytes
  8487 ;; Hardware stack levels used:    1
  8488 ;; Hardware stack levels required when called:    6
  8489 ;; This function calls:
  8490 ;;		Nothing
  8491 ;; This function is called by:
  8492 ;;		_SYSTEM_Initialize
  8493 ;; This function uses a non-reentrant model
  8494 ;;
  8495                           
  8496                           
  8497                           ;psect for function _OSCILLATOR_Initialize
  8498  0723                     _OSCILLATOR_Initialize:	
  8499                           
  8500                           ;mcc.c: 86: OSCCON = 0x58;
  8501                           
  8502                           ;incstack = 0
  8503                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  8504  0723  3058               	movlw	88
  8505  0724  0021               	movlb	1	; select bank1
  8506  0725  0099               	movwf	25	;volatile
  8507                           
  8508                           ;mcc.c: 88: OSCTUNE = 0x00;
  8509  0726  0198               	clrf	24	;volatile
  8510                           
  8511                           ;mcc.c: 90: BORCON = 0x00;
  8512  0727  0022               	movlb	2	; select bank2
  8513  0728  0196               	clrf	22	;volatile
  8514  0729  0008               	return
  8515  072A                     __end_of_OSCILLATOR_Initialize:	
  8516                           
  8517                           	psect	intentry
  8518  0004                     __pintentry:	
  8519 ;; *************** function _INTERRUPT_InterruptManager *****************
  8520 ;; Defined at:
  8521 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  8522 ;; Parameters:    Size  Location     Type
  8523 ;;		None
  8524 ;; Auto vars:     Size  Location     Type
  8525 ;;		None
  8526 ;; Return value:  Size  Location     Type
  8527 ;;                  1    wreg      void 
  8528 ;; Registers used:
  8529 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8530 ;; Tracked objects:
  8531 ;;		On entry : 0/0
  8532 ;;		On exit  : 0/0
  8533 ;;		Unchanged: 0/0
  8534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8535 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8536 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8537 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8538 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8539 ;;Total ram usage:        1 bytes
  8540 ;; Hardware stack levels used:    1
  8541 ;; Hardware stack levels required when called:    5
  8542 ;; This function calls:
  8543 ;;		Absolute function
  8544 ;;		_i2c_busCollisionISR
  8545 ;;		i1_i2c_ISR
  8546 ;; This function is called by:
  8547 ;;		Interrupt level 1
  8548 ;; This function uses a non-reentrant model
  8549 ;;
  8550                           
  8551  0004                     _INTERRUPT_InterruptManager:	
  8552                           
  8553                           ;incstack = 0
  8554  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  8555                           
  8556                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8557  0005  3180               	pagesel	$
  8558  0006  0020               	movlb	0	; select bank0
  8559  0007  087F               	movf	127,w
  8560  0008  00F5               	movwf	??_INTERRUPT_InterruptManager
  8561                           
  8562                           ;interrupt_manager.c: 54: if(INTCONbits.PEIE == 1)
  8563  0009  1F0B               	btfss	11,6	;volatile
  8564  000A  2822               	goto	i1l168
  8565                           
  8566                           ;interrupt_manager.c: 55: {
  8567                           ;interrupt_manager.c: 56: if(PIE2bits.BCL1IE == 1 && PIR2bits.BCL1IF == 1)
  8568  000B  0021               	movlb	1	; select bank1
  8569  000C  1D91               	btfss	17,3	;volatile
  8570  000D  2817               	goto	i1l163
  8571  000E  0020               	movlb	0	; select bank0
  8572  000F  1D91               	btfss	17,3	;volatile
  8573  0010  2817               	goto	i1l163
  8574                           
  8575                           ;interrupt_manager.c: 57: {
  8576                           ;interrupt_manager.c: 58: i2c_driver_busCollisionISR();
  8577  0011  087D               	movf	_i2c_driver_busCollisionISR+1,w
  8578  0012  008A               	movwf	10
  8579  0013  087C               	movf	_i2c_driver_busCollisionISR,w
  8580  0014  000A               	callw
  8581  0015  3180               	pagesel	$
  8582                           
  8583                           ;interrupt_manager.c: 59: }
  8584  0016  2822               	goto	i1l168
  8585  0017                     i1l163:	
  8586                           
  8587                           ;interrupt_manager.c: 60: else if(PIE1bits.SSP1IE == 1 && PIR1bits.SSP1IF == 1)
  8588  0017  0021               	movlb	1	; select bank1
  8589  0018  1D90               	btfss	16,3	;volatile
  8590  0019  2822               	goto	i1l168
  8591  001A  0020               	movlb	0	; select bank0
  8592  001B  1D90               	btfss	16,3	;volatile
  8593  001C  2822               	goto	i1l168
  8594                           
  8595                           ;interrupt_manager.c: 61: {
  8596                           ;interrupt_manager.c: 62: i2c_driver_i2cISR();
  8597  001D  087B               	movf	_i2c_driver_i2cISR+1,w
  8598  001E  008A               	movwf	10
  8599  001F  087A               	movf	_i2c_driver_i2cISR,w
  8600  0020  000A               	callw
  8601  0021  3180               	pagesel	$
  8602  0022                     i1l168:	
  8603                           ;interrupt_manager.c: 69: else
  8604                           ;interrupt_manager.c: 70: {
  8605                           
  8606                           ;interrupt_manager.c: 67: }
  8607                           ;interrupt_manager.c: 68: }
  8608                           
  8609                           ;interrupt_manager.c: 64: else
  8610                           ;interrupt_manager.c: 65: {
  8611                           
  8612                           ;interrupt_manager.c: 63: }
  8613                           
  8614  0022  0875               	movf	??_INTERRUPT_InterruptManager,w
  8615  0023  0020               	movlb	0	; select bank0
  8616  0024  00FF               	movwf	127
  8617  0025  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  8618  0026  0009               	retfie
  8619  0027                     __end_of_INTERRUPT_InterruptManager:	
  8620                           
  8621                           	psect	text61
  8622  0528                     __ptext61:	
  8623 ;; *************** function i1_i2c_ISR *****************
  8624 ;; Defined at:
  8625 ;;		line 419 in file "mcc_generated_files/drivers/i2c_master.c"
  8626 ;; Parameters:    Size  Location     Type
  8627 ;;		None
  8628 ;; Auto vars:     Size  Location     Type
  8629 ;;		None
  8630 ;; Return value:  Size  Location     Type
  8631 ;;                  1    wreg      void 
  8632 ;; Registers used:
  8633 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8634 ;; Tracked objects:
  8635 ;;		On entry : 0/0
  8636 ;;		On exit  : 0/0
  8637 ;;		Unchanged: 0/0
  8638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8639 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8640 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8641 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8642 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8643 ;;Total ram usage:        1 bytes
  8644 ;; Hardware stack levels used:    1
  8645 ;; Hardware stack levels required when called:    4
  8646 ;; This function calls:
  8647 ;;		i1_do_I2C_DO_ACK
  8648 ;;		i1_do_I2C_DO_ADDRESS_NACK
  8649 ;;		i1_do_I2C_DO_NACK_RESTART
  8650 ;;		i1_do_I2C_DO_NACK_STOP
  8651 ;;		i1_do_I2C_IDLE
  8652 ;;		i1_do_I2C_RCEN
  8653 ;;		i1_do_I2C_RESET
  8654 ;;		i1_do_I2C_RX
  8655 ;;		i1_do_I2C_SEND_ADR_READ
  8656 ;;		i1_do_I2C_SEND_ADR_WRITE
  8657 ;;		i1_do_I2C_SEND_RESTART
  8658 ;;		i1_do_I2C_SEND_RESTART_READ
  8659 ;;		i1_do_I2C_SEND_RESTART_WRITE
  8660 ;;		i1_do_I2C_SEND_STOP
  8661 ;;		i1_do_I2C_TX
  8662 ;;		i1_do_I2C_TX_EMPTY
  8663 ;;		i1_i2c_driver_isNACK
  8664 ;;		i1_mssp_clearIRQ
  8665 ;; This function is called by:
  8666 ;; This function uses a non-reentrant model
  8667 ;;
  8668                           
  8669                           
  8670                           ;psect for function i1_i2c_ISR
  8671  0528                     i1_i2c_ISR:	
  8672  0528                     i1l4687:	
  8673                           ;incstack = 0
  8674                           ; Regs used in i1_i2c_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8675                           
  8676                           
  8677                           ;i2c_master.c: 421: mssp_clearIRQ();
  8678  0528  3187  27C6  3185   	fcall	i1_mssp_clearIRQ
  8679                           
  8680                           ;i2c_master.c: 427: if(i2c_status.addressNACKCheck && i2c_driver_isNACK())
  8681  052B  0020               	movlb	0	; select bank0
  8682  052C  1DA0               	btfss	_i2c_status,3
  8683  052D  2D38               	goto	i1l4695
  8684  052E  3186  2678  3185   	fcall	i1_i2c_driver_isNACK
  8685  0531  1C03               	btfss	3,0
  8686  0532  2D38               	goto	i1l4695
  8687                           
  8688                           ;i2c_master.c: 428: {
  8689                           ;i2c_master.c: 429: i2c_status.state = I2C_ADDRESS_NACK;
  8690  0533  300F               	movlw	15
  8691  0534  00F4               	movwf	??i1_i2c_ISR
  8692  0535  0874               	movf	??i1_i2c_ISR,w
  8693  0536  0020               	movlb	0	; select bank0
  8694  0537  00A9               	movwf	_i2c_status+9
  8695  0538                     i1l4695:	
  8696                           
  8697                           ;i2c_master.c: 430: }
  8698                           ;i2c_master.c: 432: i2c_status.state = fsmStateTable[i2c_status.state]();
  8699  0538  0020               	movlb	0	; select bank0
  8700  0539  3529               	lslf	_i2c_status+9,w
  8701  053A  3EA0               	addlw	(low (_fsmStateTable| 0))& (0+255)
  8702  053B  0086               	movwf	6
  8703  053C  0187               	clrf	7
  8704  053D  3F41               	moviw [1]fsr1
  8705  053E  008A               	movwf	10
  8706  053F  3F40               	moviw [0]fsr1
  8707  0540  000A               	callw
  8708  0541  3185               	pagesel	$
  8709  0542  00F4               	movwf	??i1_i2c_ISR
  8710  0543  0874               	movf	??i1_i2c_ISR,w
  8711  0544  0020               	movlb	0	; select bank0
  8712  0545  00A9               	movwf	_i2c_status+9
  8713  0546  0008               	return
  8714  0547                     __end_ofi1_i2c_ISR:	
  8715                           
  8716                           	psect	text62
  8717  07C6                     __ptext62:	
  8718 ;; *************** function i1_mssp_clearIRQ *****************
  8719 ;; Defined at:
  8720 ;;		line 53 in file "mcc_generated_files/i2c_driver.c"
  8721 ;; Parameters:    Size  Location     Type
  8722 ;;		None
  8723 ;; Auto vars:     Size  Location     Type
  8724 ;;		None
  8725 ;; Return value:  Size  Location     Type
  8726 ;;                  1    wreg      void 
  8727 ;; Registers used:
  8728 ;;		None
  8729 ;; Tracked objects:
  8730 ;;		On entry : 0/0
  8731 ;;		On exit  : 0/0
  8732 ;;		Unchanged: 0/0
  8733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8735 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8736 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8737 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8738 ;;Total ram usage:        0 bytes
  8739 ;; Hardware stack levels used:    1
  8740 ;; This function calls:
  8741 ;;		Nothing
  8742 ;; This function is called by:
  8743 ;;		i1_i2c_ISR
  8744 ;; This function uses a non-reentrant model
  8745 ;;
  8746                           
  8747                           
  8748                           ;psect for function i1_mssp_clearIRQ
  8749  07C6                     i1_mssp_clearIRQ:	
  8750                           
  8751                           ;i2c_driver.c: 55: PIR1bits.SSP1IF = 0;
  8752                           
  8753                           ;incstack = 0
  8754                           ; Regs used in i1_mssp_clearIRQ: []
  8755  07C6  0020               	movlb	0	; select bank0
  8756  07C7  1190               	bcf	16,3	;volatile
  8757  07C8  0008               	return
  8758  07C9                     __end_ofi1_mssp_clearIRQ:	
  8759                           
  8760                           	psect	text63
  8761  0352                     __ptext63:	
  8762 ;; *************** function i1_do_I2C_RX *****************
  8763 ;; Defined at:
  8764 ;;		line 357 in file "mcc_generated_files/drivers/i2c_master.c"
  8765 ;; Parameters:    Size  Location     Type
  8766 ;;		None
  8767 ;; Auto vars:     Size  Location     Type
  8768 ;;		None
  8769 ;; Return value:  Size  Location     Type
  8770 ;;                  1    wreg      enum E12337
  8771 ;; Registers used:
  8772 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8773 ;; Tracked objects:
  8774 ;;		On entry : 0/0
  8775 ;;		On exit  : 0/0
  8776 ;;		Unchanged: 0/0
  8777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8778 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8779 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8780 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8781 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8782 ;;Total ram usage:        1 bytes
  8783 ;; Hardware stack levels used:    1
  8784 ;; Hardware stack levels required when called:    3
  8785 ;; This function calls:
  8786 ;;		Absolute function
  8787 ;;		i1_do_I2C_DO_NACK_RESTART
  8788 ;;		i1_do_I2C_DO_NACK_STOP
  8789 ;;		i1_i2c_driver_getRXData
  8790 ;;		i1_i2c_driver_sendACK
  8791 ;;		i1_i2c_restartWrite
  8792 ;;		i1_rd1RegCompleteHandler
  8793 ;;		i1_rd2RegCompleteHandler
  8794 ;;		i1_rdBlkRegCompleteHandler
  8795 ;;		i1_returnReset
  8796 ;;		i1_returnStop
  8797 ;;		i1_wr1RegCompleteHandler
  8798 ;;		i1_wr2RegCompleteHandler
  8799 ;; This function is called by:
  8800 ;; This function uses a non-reentrant model
  8801 ;;
  8802                           
  8803                           
  8804                           ;psect for function i1_do_I2C_RX
  8805  0352                     i1_do_I2C_RX:	
  8806  0352                     i1l4621:	
  8807                           ;incstack = 0
  8808                           ; Regs used in i1_do_I2C_RX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8809                           
  8810                           
  8811                           ;i2c_master.c: 359: *i2c_status.data_ptr++ = i2c_driver_getRXData();
  8812  0352  3187  27CC  3183   	fcall	i1_i2c_driver_getRXData
  8813  0355  00F0               	movwf	??i1_do_I2C_RX
  8814  0356  0020               	movlb	0	; select bank0
  8815  0357  0822               	movf	low ((_i2c_status| 0+2)),w
  8816  0358  0086               	movwf	6
  8817  0359  0187               	clrf	7
  8818  035A  0870               	movf	??i1_do_I2C_RX,w
  8819  035B  0081               	movwf	1
  8820  035C  3001               	movlw	1
  8821  035D  00F0               	movwf	??i1_do_I2C_RX
  8822  035E  0870               	movf	??i1_do_I2C_RX,w
  8823  035F  07A2               	addwf	low ((_i2c_status| 0+2)),f
  8824                           
  8825                           ;i2c_master.c: 360: if(--i2c_status.data_length)
  8826  0360  3001               	movlw	1
  8827  0361  02A3               	subwf	_i2c_status+3,f
  8828  0362  3000               	movlw	0
  8829  0363  3BA4               	subwfb	_i2c_status+4,f
  8830  0364  0823               	movf	_i2c_status+3,w
  8831  0365  0424               	iorwf	_i2c_status+4,w
  8832  0366  1903               	btfsc	3,2
  8833  0367  2B6C               	goto	i1l451
  8834                           
  8835                           ;i2c_master.c: 361: {
  8836                           ;i2c_master.c: 362: i2c_driver_sendACK();
  8837  0368  3187  27AA         	fcall	i1_i2c_driver_sendACK
  8838                           
  8839                           ;i2c_master.c: 363: return I2C_RCEN;
  8840  036A  3005               	movlw	5
  8841                           
  8842                           ;i2c_master.c: 364: }
  8843  036B  0008               	return
  8844  036C                     i1l451:	
  8845                           
  8846                           ;i2c_master.c: 365: else
  8847                           ;i2c_master.c: 366: {
  8848                           ;i2c_master.c: 367: i2c_status.bufferFree = 1;
  8849  036C  1520               	bsf	_i2c_status,2
  8850                           
  8851                           ;i2c_master.c: 368: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
  8852  036D  2B74               	goto	i1l4645
  8853  036E                     i1l4635:	
  8854                           ;i2c_master.c: 369: {
  8855                           ;i2c_master.c: 370: case i2c_restart_write:
  8856                           
  8857                           
  8858                           ;i2c_master.c: 371: case i2c_restart_read:
  8859                           ;i2c_master.c: 372: return do_I2C_DO_NACK_RESTART();
  8860  036E  3187  278A         	fcall	i1_do_I2C_DO_NACK_RESTART
  8861  0370  0008               	return
  8862  0371                     i1l4639:	
  8863                           ;i2c_master.c: 374: case i2c_continue:
  8864                           
  8865                           ;i2c_master.c: 373: default:
  8866                           
  8867                           
  8868                           ;i2c_master.c: 375: case i2c_stop:
  8869                           ;i2c_master.c: 376: return do_I2C_DO_NACK_STOP();
  8870  0371  3187  278E         	fcall	i1_do_I2C_DO_NACK_STOP
  8871                           
  8872                           ;i2c_master.c: 377: }
  8873  0373  0008               	return
  8874  0374                     i1l4645:	
  8875  0374  0020               	movlb	0	; select bank0
  8876  0375  0837               	movf	low ((_i2c_status| 0+23)),w
  8877  0376  00F0               	movwf	??i1_do_I2C_RX
  8878  0377  0870               	movf	??i1_do_I2C_RX,w
  8879  0378  00F9               	movwf	i1returnStop@p
  8880  0379  300B               	movlw	11
  8881  037A  3E20               	addlw	(low (_i2c_status| 0))& (0+255)
  8882  037B  0086               	movwf	6
  8883  037C  0187               	clrf	7
  8884  037D  3F41               	moviw [1]fsr1
  8885  037E  008A               	movwf	10
  8886  037F  3F40               	moviw [0]fsr1
  8887  0380  000A               	callw
  8888  0381  3183               	pagesel	$
  8889                           
  8890                           ; Switch size 1, requested type "space"
  8891                           ; Number of cases is 4, Range of values is 1 to 4
  8892                           ; switch strategies available:
  8893                           ; Name         Instructions Cycles
  8894                           ; simple_byte           13     7 (average)
  8895                           ; direct_byte           17     9 (fixed)
  8896                           ; jumptable            263     9 (fixed)
  8897                           ;	Chosen strategy is simple_byte
  8898  0382  3A01               	xorlw	1	; case 1
  8899  0383  1903               	skipnz
  8900  0384  2B71               	goto	i1l4639
  8901  0385  3A03               	xorlw	3	; case 2
  8902  0386  1903               	skipnz
  8903  0387  2B6E               	goto	i1l4635
  8904  0388  3A01               	xorlw	1	; case 3
  8905  0389  1903               	skipnz
  8906  038A  2B6E               	goto	i1l4635
  8907  038B  3A07               	xorlw	7	; case 4
  8908  038C  1903               	skipnz
  8909  038D  2B71               	goto	i1l4639
  8910  038E  2B71               	goto	i1l4639
  8911  038F  0008               	return
  8912  0390                     __end_ofi1_do_I2C_RX:	
  8913                           
  8914                           	psect	text64
  8915  027E                     __ptext64:	
  8916 ;; *************** function i1_do_I2C_TX *****************
  8917 ;; Defined at:
  8918 ;;		line 333 in file "mcc_generated_files/drivers/i2c_master.c"
  8919 ;; Parameters:    Size  Location     Type
  8920 ;;		None
  8921 ;; Auto vars:     Size  Location     Type
  8922 ;;		None
  8923 ;; Return value:  Size  Location     Type
  8924 ;;                  1    wreg      enum E12337
  8925 ;; Registers used:
  8926 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8927 ;; Tracked objects:
  8928 ;;		On entry : 0/0
  8929 ;;		On exit  : 0/0
  8930 ;;		Unchanged: 0/0
  8931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8932 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8933 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8934 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8935 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8936 ;;Total ram usage:        3 bytes
  8937 ;; Hardware stack levels used:    1
  8938 ;; Hardware stack levels required when called:    3
  8939 ;; This function calls:
  8940 ;;		Absolute function
  8941 ;;		i1_do_I2C_SEND_RESTART_READ
  8942 ;;		i1_do_I2C_SEND_RESTART_WRITE
  8943 ;;		i1_do_I2C_SEND_STOP
  8944 ;;		i1_i2c_driver_TXData
  8945 ;;		i1_i2c_driver_isNACK
  8946 ;;		i1_i2c_restartWrite
  8947 ;;		i1_rd1RegCompleteHandler
  8948 ;;		i1_rd2RegCompleteHandler
  8949 ;;		i1_rdBlkRegCompleteHandler
  8950 ;;		i1_returnReset
  8951 ;;		i1_returnStop
  8952 ;;		i1_wr1RegCompleteHandler
  8953 ;;		i1_wr2RegCompleteHandler
  8954 ;; This function is called by:
  8955 ;; This function uses a non-reentrant model
  8956 ;;
  8957                           
  8958                           
  8959                           ;psect for function i1_do_I2C_TX
  8960  027E                     i1_do_I2C_TX:	
  8961  027E                     i1l4591:	
  8962                           ;incstack = 0
  8963                           ; Regs used in i1_do_I2C_TX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8964                           
  8965                           
  8966                           ;i2c_master.c: 335: if(i2c_driver_isNACK())
  8967  027E  3186  2678  3182   	fcall	i1_i2c_driver_isNACK
  8968  0281  1803               	btfsc	3,0
  8969  0282  2A8D               	goto	i1l4609
  8970  0283  2AA9               	goto	i1l435
  8971  0284                     i1l4595:	
  8972                           ;i2c_master.c: 338: {
  8973                           ;i2c_master.c: 339: case i2c_restart_read:
  8974                           
  8975                           ;i2c_master.c: 336: {
  8976                           ;i2c_master.c: 337: switch(i2c_status.callbackTable[i2c_dataNACK](i2c_status.callbackPay
      +                          load[i2c_dataNACK]))
  8977                           
  8978                           
  8979                           ;i2c_master.c: 340: return do_I2C_SEND_RESTART_READ();
  8980  0284  3187  27A2         	fcall	i1_do_I2C_SEND_RESTART_READ
  8981  0286  0008               	return
  8982  0287                     i1l4599:	
  8983                           ;i2c_master.c: 341: case i2c_restart_write:
  8984                           
  8985                           
  8986                           ;i2c_master.c: 342: return do_I2C_SEND_RESTART_WRITE();
  8987  0287  3187  279E         	fcall	i1_do_I2C_SEND_RESTART_WRITE
  8988  0289  0008               	return
  8989  028A                     i1l4603:	
  8990                           ;i2c_master.c: 344: case i2c_continue:
  8991                           
  8992                           ;i2c_master.c: 343: default:
  8993                           
  8994                           
  8995                           ;i2c_master.c: 345: case i2c_stop:
  8996                           ;i2c_master.c: 346: return do_I2C_SEND_STOP();
  8997  028A  3187  2796         	fcall	i1_do_I2C_SEND_STOP
  8998                           
  8999                           ;i2c_master.c: 347: }
  9000  028C  0008               	return
  9001  028D                     i1l4609:	
  9002  028D  0020               	movlb	0	; select bank0
  9003  028E  083A               	movf	low ((_i2c_status| 0+26)),w
  9004  028F  00F1               	movwf	??i1_do_I2C_TX
  9005  0290  0871               	movf	??i1_do_I2C_TX,w
  9006  0291  00F9               	movwf	i1returnStop@p
  9007  0292  3011               	movlw	17
  9008  0293  3E20               	addlw	(low (_i2c_status| 0))& (0+255)
  9009  0294  0086               	movwf	6
  9010  0295  0187               	clrf	7
  9011  0296  3F41               	moviw [1]fsr1
  9012  0297  008A               	movwf	10
  9013  0298  3F40               	moviw [0]fsr1
  9014  0299  000A               	callw
  9015  029A  3182               	pagesel	$
  9016                           
  9017                           ; Switch size 1, requested type "space"
  9018                           ; Number of cases is 4, Range of values is 1 to 4
  9019                           ; switch strategies available:
  9020                           ; Name         Instructions Cycles
  9021                           ; simple_byte           13     7 (average)
  9022                           ; direct_byte           17     9 (fixed)
  9023                           ; jumptable            263     9 (fixed)
  9024                           ;	Chosen strategy is simple_byte
  9025  029B  3A01               	xorlw	1	; case 1
  9026  029C  1903               	skipnz
  9027  029D  2A8A               	goto	i1l4603
  9028  029E  3A03               	xorlw	3	; case 2
  9029  029F  1903               	skipnz
  9030  02A0  2A84               	goto	i1l4595
  9031  02A1  3A01               	xorlw	1	; case 3
  9032  02A2  1903               	skipnz
  9033  02A3  2A87               	goto	i1l4599
  9034  02A4  3A07               	xorlw	7	; case 4
  9035  02A5  1903               	skipnz
  9036  02A6  2A8A               	goto	i1l4603
  9037  02A7  2A8A               	goto	i1l4603
  9038                           
  9039                           ;i2c_master.c: 348: }
  9040  02A8  0008               	return
  9041  02A9                     i1l435:	
  9042                           
  9043                           ;i2c_master.c: 349: else
  9044                           ;i2c_master.c: 350: {
  9045                           ;i2c_master.c: 351: i2c_status.addressNACKCheck = 0;
  9046  02A9  0020               	movlb	0	; select bank0
  9047  02AA  11A0               	bcf	_i2c_status,3
  9048                           
  9049                           ;i2c_master.c: 352: i2c_driver_TXData(*i2c_status.data_ptr++);
  9050  02AB  3002               	movlw	2
  9051  02AC  3E20               	addlw	(low (_i2c_status| 0))& (0+255)
  9052  02AD  0086               	movwf	6
  9053  02AE  0187               	clrf	7
  9054  02AF  3F40               	moviw [0]fsr1
  9055  02B0  0084               	movwf	4
  9056  02B1  0185               	clrf	5
  9057  02B2  0A81               	incf	1,f
  9058  02B3  0800               	movf	0,w
  9059  02B4  3187  2779  3182   	fcall	i1_i2c_driver_TXData
  9060                           
  9061                           ;i2c_master.c: 353: return (--i2c_status.data_length)?I2C_TX:I2C_TX_EMPTY;
  9062  02B7  3001               	movlw	1
  9063  02B8  0020               	movlb	0	; select bank0
  9064  02B9  02A3               	subwf	_i2c_status+3,f
  9065  02BA  3000               	movlw	0
  9066  02BB  3BA4               	subwfb	_i2c_status+4,f
  9067  02BC  0823               	movf	_i2c_status+3,w
  9068  02BD  0424               	iorwf	_i2c_status+4,w
  9069  02BE  1D03               	btfss	3,2
  9070  02BF  2AC2               	goto	i1l4617
  9071  02C0  3006               	movlw	6
  9072  02C1  2AC3               	goto	L2
  9073  02C2                     i1l4617:	
  9074  02C2  3003               	movlw	3
  9075  02C3                     L2:	
  9076  02C3  00F2               	movwf	i1_do_I2C_TX$763
  9077  02C4  3000               	movlw	0
  9078  02C5  00F3               	movwf	i1_do_I2C_TX$763+1
  9079  02C6  0872               	movf	i1_do_I2C_TX$763,w
  9080  02C7  0008               	return
  9081  02C8                     __end_ofi1_do_I2C_TX:	
  9082                           
  9083                           	psect	text65
  9084  04C6                     __ptext65:	
  9085 ;; *************** function i1_do_I2C_DO_ADDRESS_NACK *****************
  9086 ;; Defined at:
  9087 ;;		line 319 in file "mcc_generated_files/drivers/i2c_master.c"
  9088 ;; Parameters:    Size  Location     Type
  9089 ;;		None
  9090 ;; Auto vars:     Size  Location     Type
  9091 ;;		None
  9092 ;; Return value:  Size  Location     Type
  9093 ;;                  1    wreg      enum E12337
  9094 ;; Registers used:
  9095 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9096 ;; Tracked objects:
  9097 ;;		On entry : 0/0
  9098 ;;		On exit  : 0/0
  9099 ;;		Unchanged: 0/0
  9100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9101 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9102 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9103 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9104 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9105 ;;Total ram usage:        1 bytes
  9106 ;; Hardware stack levels used:    1
  9107 ;; Hardware stack levels required when called:    3
  9108 ;; This function calls:
  9109 ;;		Absolute function
  9110 ;;		i1_do_I2C_SEND_RESTART
  9111 ;;		i1_do_I2C_SEND_STOP
  9112 ;;		i1_i2c_restartWrite
  9113 ;;		i1_rd1RegCompleteHandler
  9114 ;;		i1_rd2RegCompleteHandler
  9115 ;;		i1_rdBlkRegCompleteHandler
  9116 ;;		i1_returnReset
  9117 ;;		i1_returnStop
  9118 ;;		i1_wr1RegCompleteHandler
  9119 ;;		i1_wr2RegCompleteHandler
  9120 ;; This function is called by:
  9121 ;; This function uses a non-reentrant model
  9122 ;;
  9123                           
  9124                           
  9125                           ;psect for function i1_do_I2C_DO_ADDRESS_NACK
  9126  04C6                     i1_do_I2C_DO_ADDRESS_NACK:	
  9127  04C6                     i1l4575:	
  9128                           ;incstack = 0
  9129                           ; Regs used in i1_do_I2C_DO_ADDRESS_NACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9130                           
  9131                           
  9132                           ;i2c_master.c: 321: i2c_status.addressNACKCheck = 0;
  9133  04C6  0020               	movlb	0	; select bank0
  9134  04C7  11A0               	bcf	_i2c_status,3
  9135                           
  9136                           ;i2c_master.c: 322: i2c_status.error = I2C_FAIL;
  9137  04C8  3002               	movlw	2
  9138  04C9  00F0               	movwf	??i1_do_I2C_DO_ADDRESS_NACK
  9139  04CA  0870               	movf	??i1_do_I2C_DO_ADDRESS_NACK,w
  9140  04CB  00AA               	movwf	_i2c_status+10
  9141                           
  9142                           ;i2c_master.c: 323: switch(i2c_status.callbackTable[i2c_addressNACK](i2c_status.callback
      +                          Payload[i2c_addressNACK]))
  9143  04CC  2CD3               	goto	i1l4589
  9144  04CD                     i1l4579:	
  9145                           ;i2c_master.c: 324: {
  9146                           ;i2c_master.c: 325: case i2c_restart_read:
  9147                           
  9148                           
  9149                           ;i2c_master.c: 326: case i2c_restart_write:
  9150                           ;i2c_master.c: 327: return do_I2C_SEND_RESTART();
  9151  04CD  3187  279A         	fcall	i1_do_I2C_SEND_RESTART
  9152  04CF  0008               	return
  9153  04D0                     i1l4583:	
  9154                           ;i2c_master.c: 328: default:
  9155                           
  9156                           
  9157                           ;i2c_master.c: 329: return do_I2C_SEND_STOP();
  9158  04D0  3187  2796         	fcall	i1_do_I2C_SEND_STOP
  9159                           
  9160                           ;i2c_master.c: 330: }
  9161  04D2  0008               	return
  9162  04D3                     i1l4589:	
  9163  04D3  0020               	movlb	0	; select bank0
  9164  04D4  0839               	movf	low ((_i2c_status| 0+25)),w
  9165  04D5  00F0               	movwf	??i1_do_I2C_DO_ADDRESS_NACK
  9166  04D6  0870               	movf	??i1_do_I2C_DO_ADDRESS_NACK,w
  9167  04D7  00F9               	movwf	i1returnStop@p
  9168  04D8  300F               	movlw	15
  9169  04D9  3E20               	addlw	(low (_i2c_status| 0))& (0+255)
  9170  04DA  0086               	movwf	6
  9171  04DB  0187               	clrf	7
  9172  04DC  3F41               	moviw [1]fsr1
  9173  04DD  008A               	movwf	10
  9174  04DE  3F40               	moviw [0]fsr1
  9175  04DF  000A               	callw
  9176  04E0  3184               	pagesel	$
  9177                           
  9178                           ; Switch size 1, requested type "space"
  9179                           ; Number of cases is 2, Range of values is 2 to 3
  9180                           ; switch strategies available:
  9181                           ; Name         Instructions Cycles
  9182                           ; simple_byte            7     4 (average)
  9183                           ; direct_byte           13     9 (fixed)
  9184                           ; jumptable            263     9 (fixed)
  9185                           ;	Chosen strategy is simple_byte
  9186  04E1  3A02               	xorlw	2	; case 2
  9187  04E2  1903               	skipnz
  9188  04E3  2CCD               	goto	i1l4579
  9189  04E4  3A01               	xorlw	1	; case 3
  9190  04E5  1903               	skipnz
  9191  04E6  2CCD               	goto	i1l4579
  9192  04E7  2CD0               	goto	i1l4583
  9193  04E8  0008               	return
  9194  04E9                     __end_ofi1_do_I2C_DO_ADDRESS_NACK:	
  9195                           
  9196                           	psect	text66
  9197  078A                     __ptext66:	
  9198 ;; *************** function i1_do_I2C_DO_NACK_RESTART *****************
  9199 ;; Defined at:
  9200 ;;		line 311 in file "mcc_generated_files/drivers/i2c_master.c"
  9201 ;; Parameters:    Size  Location     Type
  9202 ;;		None
  9203 ;; Auto vars:     Size  Location     Type
  9204 ;;		None
  9205 ;; Return value:  Size  Location     Type
  9206 ;;                  1    wreg      enum E12337
  9207 ;; Registers used:
  9208 ;;		wreg, status,2, status,0, pclath, cstack
  9209 ;; Tracked objects:
  9210 ;;		On entry : 0/0
  9211 ;;		On exit  : 0/0
  9212 ;;		Unchanged: 0/0
  9213 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9214 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9215 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9216 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9217 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9218 ;;Total ram usage:        0 bytes
  9219 ;; Hardware stack levels used:    1
  9220 ;; Hardware stack levels required when called:    1
  9221 ;; This function calls:
  9222 ;;		i1_i2c_driver_sendNACK
  9223 ;; This function is called by:
  9224 ;;		i1_do_I2C_RX
  9225 ;; This function uses a non-reentrant model
  9226 ;;
  9227                           
  9228                           
  9229                           ;psect for function i1_do_I2C_DO_NACK_RESTART
  9230  078A                     i1_do_I2C_DO_NACK_RESTART:	
  9231  078A                     i1l2497:	
  9232                           ;incstack = 0
  9233                           ; Regs used in i1_do_I2C_DO_NACK_RESTART: [wreg+status,2+status,0+pclath+cstack]
  9234                           
  9235                           
  9236                           ;i2c_master.c: 313: i2c_driver_sendNACK();
  9237  078A  3187  27A6         	fcall	i1_i2c_driver_sendNACK
  9238                           
  9239                           ;i2c_master.c: 314: return I2C_SEND_RESTART;
  9240  078C  3009               	movlw	9
  9241  078D  0008               	return
  9242  078E                     __end_ofi1_do_I2C_DO_NACK_RESTART:	
  9243                           
  9244                           	psect	text67
  9245  078E                     __ptext67:	
  9246 ;; *************** function i1_do_I2C_DO_NACK_STOP *****************
  9247 ;; Defined at:
  9248 ;;		line 305 in file "mcc_generated_files/drivers/i2c_master.c"
  9249 ;; Parameters:    Size  Location     Type
  9250 ;;		None
  9251 ;; Auto vars:     Size  Location     Type
  9252 ;;		None
  9253 ;; Return value:  Size  Location     Type
  9254 ;;                  1    wreg      enum E12337
  9255 ;; Registers used:
  9256 ;;		wreg, status,2, status,0, pclath, cstack
  9257 ;; Tracked objects:
  9258 ;;		On entry : 0/0
  9259 ;;		On exit  : 0/0
  9260 ;;		Unchanged: 0/0
  9261 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9262 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9263 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9264 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9265 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9266 ;;Total ram usage:        0 bytes
  9267 ;; Hardware stack levels used:    1
  9268 ;; Hardware stack levels required when called:    1
  9269 ;; This function calls:
  9270 ;;		i1_i2c_driver_sendNACK
  9271 ;; This function is called by:
  9272 ;;		i1_do_I2C_RX
  9273 ;; This function uses a non-reentrant model
  9274 ;;
  9275                           
  9276                           
  9277                           ;psect for function i1_do_I2C_DO_NACK_STOP
  9278  078E                     i1_do_I2C_DO_NACK_STOP:	
  9279  078E                     i1l2491:	
  9280                           ;incstack = 0
  9281                           ; Regs used in i1_do_I2C_DO_NACK_STOP: [wreg+status,2+status,0+pclath+cstack]
  9282                           
  9283                           
  9284                           ;i2c_master.c: 307: i2c_driver_sendNACK();
  9285  078E  3187  27A6         	fcall	i1_i2c_driver_sendNACK
  9286                           
  9287                           ;i2c_master.c: 308: return I2C_SEND_STOP;
  9288  0790  300A               	movlw	10
  9289  0791  0008               	return
  9290  0792                     __end_ofi1_do_I2C_DO_NACK_STOP:	
  9291                           
  9292                           	psect	text68
  9293  0792                     __ptext68:	
  9294 ;; *************** function i1_do_I2C_DO_ACK *****************
  9295 ;; Defined at:
  9296 ;;		line 299 in file "mcc_generated_files/drivers/i2c_master.c"
  9297 ;; Parameters:    Size  Location     Type
  9298 ;;		None
  9299 ;; Auto vars:     Size  Location     Type
  9300 ;;		None
  9301 ;; Return value:  Size  Location     Type
  9302 ;;                  1    wreg      enum E12337
  9303 ;; Registers used:
  9304 ;;		wreg, status,2, status,0, pclath, cstack
  9305 ;; Tracked objects:
  9306 ;;		On entry : 0/0
  9307 ;;		On exit  : 0/0
  9308 ;;		Unchanged: 0/0
  9309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9310 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9311 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9312 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9313 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9314 ;;Total ram usage:        0 bytes
  9315 ;; Hardware stack levels used:    1
  9316 ;; Hardware stack levels required when called:    1
  9317 ;; This function calls:
  9318 ;;		i1_i2c_driver_sendACK
  9319 ;; This function is called by:
  9320 ;; This function uses a non-reentrant model
  9321 ;;
  9322                           
  9323                           
  9324                           ;psect for function i1_do_I2C_DO_ACK
  9325  0792                     i1_do_I2C_DO_ACK:	
  9326  0792                     i1l2683:	
  9327                           ;incstack = 0
  9328                           ; Regs used in i1_do_I2C_DO_ACK: [wreg+status,2+status,0+pclath+cstack]
  9329                           
  9330                           
  9331                           ;i2c_master.c: 301: i2c_driver_sendACK();
  9332  0792  3187  27AA         	fcall	i1_i2c_driver_sendACK
  9333                           
  9334                           ;i2c_master.c: 302: return I2C_RCEN;
  9335  0794  3005               	movlw	5
  9336  0795  0008               	return
  9337  0796                     __end_ofi1_do_I2C_DO_ACK:	
  9338                           
  9339                           	psect	text69
  9340  076E                     __ptext69:	
  9341 ;; *************** function i1_do_I2C_RCEN *****************
  9342 ;; Defined at:
  9343 ;;		line 292 in file "mcc_generated_files/drivers/i2c_master.c"
  9344 ;; Parameters:    Size  Location     Type
  9345 ;;		None
  9346 ;; Auto vars:     Size  Location     Type
  9347 ;;		None
  9348 ;; Return value:  Size  Location     Type
  9349 ;;                  1    wreg      enum E12337
  9350 ;; Registers used:
  9351 ;;		wreg, status,2, status,0, pclath, cstack
  9352 ;; Tracked objects:
  9353 ;;		On entry : 0/0
  9354 ;;		On exit  : 0/0
  9355 ;;		Unchanged: 0/0
  9356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9357 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9358 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9359 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9360 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9361 ;;Total ram usage:        0 bytes
  9362 ;; Hardware stack levels used:    1
  9363 ;; Hardware stack levels required when called:    1
  9364 ;; This function calls:
  9365 ;;		i1_i2c_driver_startRX
  9366 ;; This function is called by:
  9367 ;; This function uses a non-reentrant model
  9368 ;;
  9369                           
  9370                           
  9371                           ;psect for function i1_do_I2C_RCEN
  9372  076E                     i1_do_I2C_RCEN:	
  9373  076E                     i1l2675:	
  9374                           ;incstack = 0
  9375                           ; Regs used in i1_do_I2C_RCEN: [wreg+status,2+status,0+pclath+cstack]
  9376                           
  9377                           
  9378                           ;i2c_master.c: 294: i2c_status.addressNACKCheck = 0;
  9379  076E  0020               	movlb	0	; select bank0
  9380  076F  11A0               	bcf	_i2c_status,3
  9381                           
  9382                           ;i2c_master.c: 295: i2c_driver_startRX();
  9383  0770  3187  27CF         	fcall	i1_i2c_driver_startRX
  9384                           
  9385                           ;i2c_master.c: 296: return I2C_RX;
  9386  0772  3004               	movlw	4
  9387  0773  0008               	return
  9388  0774                     __end_ofi1_do_I2C_RCEN:	
  9389                           
  9390                           	psect	text70
  9391  072A                     __ptext70:	
  9392 ;; *************** function i1_do_I2C_SEND_ADR_WRITE *****************
  9393 ;; Defined at:
  9394 ;;		line 285 in file "mcc_generated_files/drivers/i2c_master.c"
  9395 ;; Parameters:    Size  Location     Type
  9396 ;;		None
  9397 ;; Auto vars:     Size  Location     Type
  9398 ;;		None
  9399 ;; Return value:  Size  Location     Type
  9400 ;;                  1    wreg      enum E12337
  9401 ;; Registers used:
  9402 ;;		wreg, status,2, status,0, pclath, cstack
  9403 ;; Tracked objects:
  9404 ;;		On entry : 0/0
  9405 ;;		On exit  : 0/0
  9406 ;;		Unchanged: 0/0
  9407 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9408 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9409 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9410 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9411 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9412 ;;Total ram usage:        0 bytes
  9413 ;; Hardware stack levels used:    1
  9414 ;; Hardware stack levels required when called:    1
  9415 ;; This function calls:
  9416 ;;		i1_i2c_driver_TXData
  9417 ;; This function is called by:
  9418 ;; This function uses a non-reentrant model
  9419 ;;
  9420                           
  9421                           
  9422                           ;psect for function i1_do_I2C_SEND_ADR_WRITE
  9423  072A                     i1_do_I2C_SEND_ADR_WRITE:	
  9424  072A                     i1l2667:	
  9425                           ;incstack = 0
  9426                           ; Regs used in i1_do_I2C_SEND_ADR_WRITE: [wreg+status,2+status,0+pclath+cstack]
  9427                           
  9428                           
  9429                           ;i2c_master.c: 287: i2c_status.addressNACKCheck = 1;
  9430  072A  0020               	movlb	0	; select bank0
  9431  072B  15A0               	bsf	_i2c_status,3
  9432                           
  9433                           ;i2c_master.c: 288: i2c_driver_TXData(i2c_status.address << 1);
  9434  072C  3521               	lslf	_i2c_status+1,w
  9435  072D  3187  2779         	fcall	i1_i2c_driver_TXData
  9436                           
  9437                           ;i2c_master.c: 289: return I2C_TX;
  9438  072F  3003               	movlw	3
  9439  0730  0008               	return
  9440  0731                     __end_ofi1_do_I2C_SEND_ADR_WRITE:	
  9441                           
  9442                           	psect	text71
  9443  071B                     __ptext71:	
  9444 ;; *************** function i1_do_I2C_SEND_ADR_READ *****************
  9445 ;; Defined at:
  9446 ;;		line 278 in file "mcc_generated_files/drivers/i2c_master.c"
  9447 ;; Parameters:    Size  Location     Type
  9448 ;;		None
  9449 ;; Auto vars:     Size  Location     Type
  9450 ;;		None
  9451 ;; Return value:  Size  Location     Type
  9452 ;;                  1    wreg      enum E12337
  9453 ;; Registers used:
  9454 ;;		wreg, status,2, status,0, pclath, cstack
  9455 ;; Tracked objects:
  9456 ;;		On entry : 0/0
  9457 ;;		On exit  : 0/0
  9458 ;;		Unchanged: 0/0
  9459 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9460 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9461 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9462 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9463 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9464 ;;Total ram usage:        0 bytes
  9465 ;; Hardware stack levels used:    1
  9466 ;; Hardware stack levels required when called:    1
  9467 ;; This function calls:
  9468 ;;		i1_i2c_driver_TXData
  9469 ;; This function is called by:
  9470 ;; This function uses a non-reentrant model
  9471 ;;
  9472                           
  9473                           
  9474                           ;psect for function i1_do_I2C_SEND_ADR_READ
  9475  071B                     i1_do_I2C_SEND_ADR_READ:	
  9476  071B                     i1l2659:	
  9477                           ;incstack = 0
  9478                           ; Regs used in i1_do_I2C_SEND_ADR_READ: [wreg+status,2+status,0+pclath+cstack]
  9479                           
  9480                           
  9481                           ;i2c_master.c: 280: i2c_status.addressNACKCheck = 1;
  9482  071B  0020               	movlb	0	; select bank0
  9483  071C  15A0               	bsf	_i2c_status,3
  9484                           
  9485                           ;i2c_master.c: 281: i2c_driver_TXData(i2c_status.address << 1 | 1);
  9486  071D  1403               	setc
  9487  071E  0D21               	rlf	_i2c_status+1,w
  9488  071F  3187  2779         	fcall	i1_i2c_driver_TXData
  9489                           
  9490                           ;i2c_master.c: 282: return I2C_RCEN;
  9491  0721  3005               	movlw	5
  9492  0722  0008               	return
  9493  0723                     __end_ofi1_do_I2C_SEND_ADR_READ:	
  9494                           
  9495                           	psect	text72
  9496  0796                     __ptext72:	
  9497 ;; *************** function i1_do_I2C_SEND_STOP *****************
  9498 ;; Defined at:
  9499 ;;		line 272 in file "mcc_generated_files/drivers/i2c_master.c"
  9500 ;; Parameters:    Size  Location     Type
  9501 ;;		None
  9502 ;; Auto vars:     Size  Location     Type
  9503 ;;		None
  9504 ;; Return value:  Size  Location     Type
  9505 ;;                  1    wreg      enum E12337
  9506 ;; Registers used:
  9507 ;;		wreg, status,2, status,0, pclath, cstack
  9508 ;; Tracked objects:
  9509 ;;		On entry : 0/0
  9510 ;;		On exit  : 0/0
  9511 ;;		Unchanged: 0/0
  9512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9513 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9514 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9515 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9516 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9517 ;;Total ram usage:        0 bytes
  9518 ;; Hardware stack levels used:    1
  9519 ;; Hardware stack levels required when called:    1
  9520 ;; This function calls:
  9521 ;;		i1_i2c_driver_stop
  9522 ;; This function is called by:
  9523 ;;		i1_do_I2C_DO_ADDRESS_NACK
  9524 ;;		i1_do_I2C_TX
  9525 ;;		i1_do_I2C_TX_EMPTY
  9526 ;; This function uses a non-reentrant model
  9527 ;;
  9528                           
  9529                           
  9530                           ;psect for function i1_do_I2C_SEND_STOP
  9531  0796                     i1_do_I2C_SEND_STOP:	
  9532  0796                     i1l2485:	
  9533                           ;incstack = 0
  9534                           ; Regs used in i1_do_I2C_SEND_STOP: [wreg+status,2+status,0+pclath+cstack]
  9535                           
  9536                           
  9537                           ;i2c_master.c: 274: i2c_driver_stop();
  9538  0796  3187  27D2         	fcall	i1_i2c_driver_stop
  9539                           
  9540                           ;i2c_master.c: 275: return I2C_IDLE;
  9541  0798  3000               	movlw	0
  9542  0799  0008               	return
  9543  079A                     __end_ofi1_do_I2C_SEND_STOP:	
  9544                           
  9545                           	psect	text73
  9546  079A                     __ptext73:	
  9547 ;; *************** function i1_do_I2C_SEND_RESTART *****************
  9548 ;; Defined at:
  9549 ;;		line 266 in file "mcc_generated_files/drivers/i2c_master.c"
  9550 ;; Parameters:    Size  Location     Type
  9551 ;;		None
  9552 ;; Auto vars:     Size  Location     Type
  9553 ;;		None
  9554 ;; Return value:  Size  Location     Type
  9555 ;;                  1    wreg      enum E12337
  9556 ;; Registers used:
  9557 ;;		wreg, status,2, status,0, pclath, cstack
  9558 ;; Tracked objects:
  9559 ;;		On entry : 0/0
  9560 ;;		On exit  : 0/0
  9561 ;;		Unchanged: 0/0
  9562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9563 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9564 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9565 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9566 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9567 ;;Total ram usage:        0 bytes
  9568 ;; Hardware stack levels used:    1
  9569 ;; Hardware stack levels required when called:    1
  9570 ;; This function calls:
  9571 ;;		i1_i2c_driver_restart
  9572 ;; This function is called by:
  9573 ;;		i1_do_I2C_DO_ADDRESS_NACK
  9574 ;;		i1_do_I2C_TX_EMPTY
  9575 ;; This function uses a non-reentrant model
  9576 ;;
  9577                           
  9578                           
  9579                           ;psect for function i1_do_I2C_SEND_RESTART
  9580  079A                     i1_do_I2C_SEND_RESTART:	
  9581  079A                     i1l2479:	
  9582                           ;incstack = 0
  9583                           ; Regs used in i1_do_I2C_SEND_RESTART: [wreg+status,2+status,0+pclath+cstack]
  9584                           
  9585                           
  9586                           ;i2c_master.c: 268: i2c_driver_restart();
  9587  079A  3187  27D5         	fcall	i1_i2c_driver_restart
  9588                           
  9589                           ;i2c_master.c: 269: return I2C_SEND_ADR_READ;
  9590  079C  3001               	movlw	1
  9591  079D  0008               	return
  9592  079E                     __end_ofi1_do_I2C_SEND_RESTART:	
  9593                           
  9594                           	psect	text74
  9595  079E                     __ptext74:	
  9596 ;; *************** function i1_do_I2C_SEND_RESTART_WRITE *****************
  9597 ;; Defined at:
  9598 ;;		line 260 in file "mcc_generated_files/drivers/i2c_master.c"
  9599 ;; Parameters:    Size  Location     Type
  9600 ;;		None
  9601 ;; Auto vars:     Size  Location     Type
  9602 ;;		None
  9603 ;; Return value:  Size  Location     Type
  9604 ;;                  1    wreg      enum E12337
  9605 ;; Registers used:
  9606 ;;		wreg, status,2, status,0, pclath, cstack
  9607 ;; Tracked objects:
  9608 ;;		On entry : 0/0
  9609 ;;		On exit  : 0/0
  9610 ;;		Unchanged: 0/0
  9611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9612 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9613 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9614 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9615 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9616 ;;Total ram usage:        0 bytes
  9617 ;; Hardware stack levels used:    1
  9618 ;; Hardware stack levels required when called:    1
  9619 ;; This function calls:
  9620 ;;		i1_i2c_driver_restart
  9621 ;; This function is called by:
  9622 ;;		i1_do_I2C_TX
  9623 ;; This function uses a non-reentrant model
  9624 ;;
  9625                           
  9626                           
  9627                           ;psect for function i1_do_I2C_SEND_RESTART_WRITE
  9628  079E                     i1_do_I2C_SEND_RESTART_WRITE:	
  9629  079E                     i1l2473:	
  9630                           ;incstack = 0
  9631                           ; Regs used in i1_do_I2C_SEND_RESTART_WRITE: [wreg+status,2+status,0+pclath+cstack]
  9632                           
  9633                           
  9634                           ;i2c_master.c: 262: i2c_driver_restart();
  9635  079E  3187  27D5         	fcall	i1_i2c_driver_restart
  9636                           
  9637                           ;i2c_master.c: 263: return I2C_SEND_ADR_WRITE;
  9638  07A0  3002               	movlw	2
  9639  07A1  0008               	return
  9640  07A2                     __end_ofi1_do_I2C_SEND_RESTART_WRITE:	
  9641                           
  9642                           	psect	text75
  9643  07A2                     __ptext75:	
  9644 ;; *************** function i1_do_I2C_SEND_RESTART_READ *****************
  9645 ;; Defined at:
  9646 ;;		line 254 in file "mcc_generated_files/drivers/i2c_master.c"
  9647 ;; Parameters:    Size  Location     Type
  9648 ;;		None
  9649 ;; Auto vars:     Size  Location     Type
  9650 ;;		None
  9651 ;; Return value:  Size  Location     Type
  9652 ;;                  1    wreg      enum E12337
  9653 ;; Registers used:
  9654 ;;		wreg, status,2, status,0, pclath, cstack
  9655 ;; Tracked objects:
  9656 ;;		On entry : 0/0
  9657 ;;		On exit  : 0/0
  9658 ;;		Unchanged: 0/0
  9659 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9660 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9661 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9662 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9663 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9664 ;;Total ram usage:        0 bytes
  9665 ;; Hardware stack levels used:    1
  9666 ;; Hardware stack levels required when called:    1
  9667 ;; This function calls:
  9668 ;;		i1_i2c_driver_restart
  9669 ;; This function is called by:
  9670 ;;		i1_do_I2C_TX
  9671 ;; This function uses a non-reentrant model
  9672 ;;
  9673                           
  9674                           
  9675                           ;psect for function i1_do_I2C_SEND_RESTART_READ
  9676  07A2                     i1_do_I2C_SEND_RESTART_READ:	
  9677  07A2                     i1l2467:	
  9678                           ;incstack = 0
  9679                           ; Regs used in i1_do_I2C_SEND_RESTART_READ: [wreg+status,2+status,0+pclath+cstack]
  9680                           
  9681                           
  9682                           ;i2c_master.c: 256: i2c_driver_restart();
  9683  07A2  3187  27D5         	fcall	i1_i2c_driver_restart
  9684                           
  9685                           ;i2c_master.c: 257: return I2C_SEND_ADR_READ;
  9686  07A4  3001               	movlw	1
  9687  07A5  0008               	return
  9688  07A6                     __end_ofi1_do_I2C_SEND_RESTART_READ:	
  9689                           
  9690                           	psect	text76
  9691  0774                     __ptext76:	
  9692 ;; *************** function i1_do_I2C_IDLE *****************
  9693 ;; Defined at:
  9694 ;;		line 247 in file "mcc_generated_files/drivers/i2c_master.c"
  9695 ;; Parameters:    Size  Location     Type
  9696 ;;		None
  9697 ;; Auto vars:     Size  Location     Type
  9698 ;;		None
  9699 ;; Return value:  Size  Location     Type
  9700 ;;                  1    wreg      enum E12337
  9701 ;; Registers used:
  9702 ;;		wreg, status,2
  9703 ;; Tracked objects:
  9704 ;;		On entry : 0/0
  9705 ;;		On exit  : 0/0
  9706 ;;		Unchanged: 0/0
  9707 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9708 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9709 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9710 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9711 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9712 ;;Total ram usage:        0 bytes
  9713 ;; Hardware stack levels used:    1
  9714 ;; This function calls:
  9715 ;;		Nothing
  9716 ;; This function is called by:
  9717 ;; This function uses a non-reentrant model
  9718 ;;
  9719                           
  9720                           
  9721                           ;psect for function i1_do_I2C_IDLE
  9722  0774                     i1_do_I2C_IDLE:	
  9723  0774                     i1l2651:	
  9724                           ;incstack = 0
  9725                           ; Regs used in i1_do_I2C_IDLE: [wreg+status,2]
  9726                           
  9727                           
  9728                           ;i2c_master.c: 249: i2c_status.busy = 0;
  9729  0774  0020               	movlb	0	; select bank0
  9730  0775  1020               	bcf	_i2c_status,0
  9731                           
  9732                           ;i2c_master.c: 250: i2c_status.error = I2C_NOERR;
  9733  0776  01AA               	clrf	_i2c_status+10
  9734                           
  9735                           ;i2c_master.c: 251: return I2C_RESET;
  9736  0777  300E               	movlw	14
  9737  0778  0008               	return
  9738  0779                     __end_ofi1_do_I2C_IDLE:	
  9739                           
  9740                           	psect	text77
  9741  0731                     __ptext77:	
  9742 ;; *************** function i1_do_I2C_RESET *****************
  9743 ;; Defined at:
  9744 ;;		line 239 in file "mcc_generated_files/drivers/i2c_master.c"
  9745 ;; Parameters:    Size  Location     Type
  9746 ;;		None
  9747 ;; Auto vars:     Size  Location     Type
  9748 ;;		None
  9749 ;; Return value:  Size  Location     Type
  9750 ;;                  1    wreg      enum E12337
  9751 ;; Registers used:
  9752 ;;		wreg, status,2, status,0, pclath, cstack
  9753 ;; Tracked objects:
  9754 ;;		On entry : 0/0
  9755 ;;		On exit  : 0/0
  9756 ;;		Unchanged: 0/0
  9757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9758 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9759 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9760 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9761 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9762 ;;Total ram usage:        0 bytes
  9763 ;; Hardware stack levels used:    1
  9764 ;; Hardware stack levels required when called:    1
  9765 ;; This function calls:
  9766 ;;		i1_i2c_driver_resetBus
  9767 ;; This function is called by:
  9768 ;; This function uses a non-reentrant model
  9769 ;;
  9770                           
  9771                           
  9772                           ;psect for function i1_do_I2C_RESET
  9773  0731                     i1_do_I2C_RESET:	
  9774  0731                     i1l2641:	
  9775                           ;incstack = 0
  9776                           ; Regs used in i1_do_I2C_RESET: [wreg+status,2+status,0+pclath+cstack]
  9777                           
  9778                           
  9779                           ;i2c_master.c: 241: i2c_driver_resetBus();
  9780  0731  3187  27E5         	fcall	i1_i2c_driver_resetBus
  9781                           
  9782                           ;i2c_master.c: 242: i2c_status.busy = 0;
  9783  0733  0020               	movlb	0	; select bank0
  9784  0734  1020               	bcf	_i2c_status,0
  9785                           
  9786                           ;i2c_master.c: 243: i2c_status.error = I2C_NOERR;
  9787  0735  01AA               	clrf	_i2c_status+10
  9788                           
  9789                           ;i2c_master.c: 244: return I2C_RESET;
  9790  0736  300E               	movlw	14
  9791  0737  0008               	return
  9792  0738                     __end_ofi1_do_I2C_RESET:	
  9793                           
  9794                           	psect	text78
  9795  03BD                     __ptext78:	
  9796 ;; *************** function i1_do_I2C_TX_EMPTY *****************
  9797 ;; Defined at:
  9798 ;;		line 382 in file "mcc_generated_files/drivers/i2c_master.c"
  9799 ;; Parameters:    Size  Location     Type
  9800 ;;		None
  9801 ;; Auto vars:     Size  Location     Type
  9802 ;;		None
  9803 ;; Return value:  Size  Location     Type
  9804 ;;                  1    wreg      enum E12337
  9805 ;; Registers used:
  9806 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9807 ;; Tracked objects:
  9808 ;;		On entry : 0/0
  9809 ;;		On exit  : 0/0
  9810 ;;		Unchanged: 0/0
  9811 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9812 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9813 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9814 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9815 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9816 ;;Total ram usage:        1 bytes
  9817 ;; Hardware stack levels used:    1
  9818 ;; Hardware stack levels required when called:    3
  9819 ;; This function calls:
  9820 ;;		Absolute function
  9821 ;;		i1_do_I2C_SEND_RESTART
  9822 ;;		i1_do_I2C_SEND_STOP
  9823 ;;		i1_i2c_restartWrite
  9824 ;;		i1_mssp_setIRQ
  9825 ;;		i1_rd1RegCompleteHandler
  9826 ;;		i1_rd2RegCompleteHandler
  9827 ;;		i1_rdBlkRegCompleteHandler
  9828 ;;		i1_returnReset
  9829 ;;		i1_returnStop
  9830 ;;		i1_wr1RegCompleteHandler
  9831 ;;		i1_wr2RegCompleteHandler
  9832 ;; This function is called by:
  9833 ;; This function uses a non-reentrant model
  9834 ;;
  9835                           
  9836                           
  9837                           ;psect for function i1_do_I2C_TX_EMPTY
  9838  03BD                     i1_do_I2C_TX_EMPTY:	
  9839  03BD                     i1l4647:	
  9840                           ;incstack = 0
  9841                           ; Regs used in i1_do_I2C_TX_EMPTY: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9842                           
  9843                           
  9844                           ;i2c_master.c: 384: i2c_status.bufferFree = 1;
  9845  03BD  0020               	movlb	0	; select bank0
  9846  03BE  1520               	bsf	_i2c_status,2
  9847                           
  9848                           ;i2c_master.c: 385: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
  9849  03BF  2BCA               	goto	i1l4665
  9850  03C0                     i1l4649:	
  9851                           ;i2c_master.c: 386: {
  9852                           ;i2c_master.c: 387: case i2c_restart_read:
  9853                           
  9854                           
  9855                           ;i2c_master.c: 388: case i2c_restart_write:
  9856                           ;i2c_master.c: 389: return do_I2C_SEND_RESTART();
  9857  03C0  3187  279A         	fcall	i1_do_I2C_SEND_RESTART
  9858  03C2  0008               	return
  9859  03C3                     i1l4653:	
  9860                           ;i2c_master.c: 390: case i2c_continue:
  9861                           
  9862                           
  9863                           ;i2c_master.c: 391: mssp_setIRQ();
  9864  03C3  3187  27C9         	fcall	i1_mssp_setIRQ
  9865                           
  9866                           ;i2c_master.c: 392: return I2C_TX;
  9867  03C5  3003               	movlw	3
  9868  03C6  0008               	return
  9869  03C7                     i1l4659:	
  9870                           ;i2c_master.c: 394: case i2c_stop:
  9871                           
  9872                           ;i2c_master.c: 393: default:
  9873                           
  9874                           
  9875                           ;i2c_master.c: 395: return do_I2C_SEND_STOP();
  9876  03C7  3187  2796         	fcall	i1_do_I2C_SEND_STOP
  9877                           
  9878                           ;i2c_master.c: 396: }
  9879  03C9  0008               	return
  9880  03CA                     i1l4665:	
  9881  03CA  0020               	movlb	0	; select bank0
  9882  03CB  0837               	movf	low ((_i2c_status| 0+23)),w
  9883  03CC  00F0               	movwf	??i1_do_I2C_TX_EMPTY
  9884  03CD  0870               	movf	??i1_do_I2C_TX_EMPTY,w
  9885  03CE  00F9               	movwf	i1returnStop@p
  9886  03CF  300B               	movlw	11
  9887  03D0  3E20               	addlw	(low (_i2c_status| 0))& (0+255)
  9888  03D1  0086               	movwf	6
  9889  03D2  0187               	clrf	7
  9890  03D3  3F41               	moviw [1]fsr1
  9891  03D4  008A               	movwf	10
  9892  03D5  3F40               	moviw [0]fsr1
  9893  03D6  000A               	callw
  9894  03D7  3183               	pagesel	$
  9895                           
  9896                           ; Switch size 1, requested type "space"
  9897                           ; Number of cases is 4, Range of values is 1 to 4
  9898                           ; switch strategies available:
  9899                           ; Name         Instructions Cycles
  9900                           ; simple_byte           13     7 (average)
  9901                           ; direct_byte           17     9 (fixed)
  9902                           ; jumptable            263     9 (fixed)
  9903                           ;	Chosen strategy is simple_byte
  9904  03D8  3A01               	xorlw	1	; case 1
  9905  03D9  1903               	skipnz
  9906  03DA  2BC7               	goto	i1l4659
  9907  03DB  3A03               	xorlw	3	; case 2
  9908  03DC  1903               	skipnz
  9909  03DD  2BC0               	goto	i1l4649
  9910  03DE  3A01               	xorlw	1	; case 3
  9911  03DF  1903               	skipnz
  9912  03E0  2BC0               	goto	i1l4649
  9913  03E1  3A07               	xorlw	7	; case 4
  9914  03E2  1903               	skipnz
  9915  03E3  2BC3               	goto	i1l4653
  9916  03E4  2BC7               	goto	i1l4659
  9917  03E5  0008               	return
  9918  03E6                     __end_ofi1_do_I2C_TX_EMPTY:	
  9919                           
  9920                           	psect	text79
  9921  07C9                     __ptext79:	
  9922 ;; *************** function i1_mssp_setIRQ *****************
  9923 ;; Defined at:
  9924 ;;		line 58 in file "mcc_generated_files/i2c_driver.c"
  9925 ;; Parameters:    Size  Location     Type
  9926 ;;		None
  9927 ;; Auto vars:     Size  Location     Type
  9928 ;;		None
  9929 ;; Return value:  Size  Location     Type
  9930 ;;                  1    wreg      void 
  9931 ;; Registers used:
  9932 ;;		None
  9933 ;; Tracked objects:
  9934 ;;		On entry : 0/0
  9935 ;;		On exit  : 0/0
  9936 ;;		Unchanged: 0/0
  9937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9938 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9939 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9940 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9941 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9942 ;;Total ram usage:        0 bytes
  9943 ;; Hardware stack levels used:    1
  9944 ;; This function calls:
  9945 ;;		Nothing
  9946 ;; This function is called by:
  9947 ;;		i1_do_I2C_TX_EMPTY
  9948 ;; This function uses a non-reentrant model
  9949 ;;
  9950                           
  9951                           
  9952                           ;psect for function i1_mssp_setIRQ
  9953  07C9                     i1_mssp_setIRQ:	
  9954                           
  9955                           ;i2c_driver.c: 60: PIR1bits.SSP1IF = 1;
  9956                           
  9957                           ;incstack = 0
  9958                           ; Regs used in i1_mssp_setIRQ: []
  9959  07C9  0020               	movlb	0	; select bank0
  9960  07CA  1590               	bsf	16,3	;volatile
  9961  07CB  0008               	return
  9962  07CC                     __end_ofi1_mssp_setIRQ:	
  9963                           
  9964                           	psect	text80
  9965  0678                     __ptext80:	
  9966 ;; *************** function i1_i2c_driver_isNACK *****************
  9967 ;; Defined at:
  9968 ;;		line 161 in file "mcc_generated_files/i2c_driver.c"
  9969 ;; Parameters:    Size  Location     Type
  9970 ;;		None
  9971 ;; Auto vars:     Size  Location     Type
  9972 ;;		None
  9973 ;; Return value:  Size  Location     Type
  9974 ;;		None               void
  9975 ;; Registers used:
  9976 ;;		wreg, status,2, status,0
  9977 ;; Tracked objects:
  9978 ;;		On entry : 0/0
  9979 ;;		On exit  : 0/0
  9980 ;;		Unchanged: 0/0
  9981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9982 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9983 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9984 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9985 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9986 ;;Total ram usage:        1 bytes
  9987 ;; Hardware stack levels used:    1
  9988 ;; This function calls:
  9989 ;;		Nothing
  9990 ;; This function is called by:
  9991 ;;		i1_do_I2C_TX
  9992 ;;		i1_i2c_ISR
  9993 ;; This function uses a non-reentrant model
  9994 ;;
  9995                           
  9996                           
  9997                           ;psect for function i1_i2c_driver_isNACK
  9998  0678                     i1_i2c_driver_isNACK:	
  9999                           
 10000                           ;i2c_driver.c: 163: return SSP1CON2bits.ACKSTAT = 1;
 10001                           
 10002                           ;incstack = 0
 10003                           ; Regs used in i1_i2c_driver_isNACK: [wreg+status,2+status,0]
 10004  0678  0024               	movlb	4	; select bank4
 10005  0679  0816               	movf	22,w	;volatile
 10006  067A  39BF               	andlw	-65
 10007  067B  3840               	iorlw	64
 10008  067C  0096               	movwf	22	;volatile
 10009  067D  0E16               	swapf	22,w	;volatile
 10010  067E  0C89               	rrf	9,f
 10011  067F  0C89               	rrf	9,f
 10012  0680  3901               	andlw	1
 10013  0681  00F0               	movwf	??i1_i2c_driver_isNACK
 10014  0682  0C70               	rrf	??i1_i2c_driver_isNACK,w
 10015  0683  0008               	return
 10016  0684                     __end_ofi1_i2c_driver_isNACK:	
 10017                           
 10018                           	psect	text81
 10019  0779                     __ptext81:	
 10020 ;; *************** function i1_i2c_driver_TXData *****************
 10021 ;; Defined at:
 10022 ;;		line 186 in file "mcc_generated_files/i2c_driver.c"
 10023 ;; Parameters:    Size  Location     Type
 10024 ;;  d               1    wreg     unsigned char 
 10025 ;; Auto vars:     Size  Location     Type
 10026 ;;  d               1    0[COMMON] unsigned char 
 10027 ;; Return value:  Size  Location     Type
 10028 ;;                  1    wreg      void 
 10029 ;; Registers used:
 10030 ;;		wreg
 10031 ;; Tracked objects:
 10032 ;;		On entry : 0/0
 10033 ;;		On exit  : 0/0
 10034 ;;		Unchanged: 0/0
 10035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10036 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10037 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10038 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10039 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10040 ;;Total ram usage:        1 bytes
 10041 ;; Hardware stack levels used:    1
 10042 ;; This function calls:
 10043 ;;		Nothing
 10044 ;; This function is called by:
 10045 ;;		i1_do_I2C_SEND_ADR_READ
 10046 ;;		i1_do_I2C_SEND_ADR_WRITE
 10047 ;;		i1_do_I2C_TX
 10048 ;; This function uses a non-reentrant model
 10049 ;;
 10050                           
 10051                           
 10052                           ;psect for function i1_i2c_driver_TXData
 10053  0779                     i1_i2c_driver_TXData:	
 10054                           
 10055                           ;incstack = 0
 10056                           ; Regs used in i1_i2c_driver_TXData: [wreg]
 10057                           ;i1i2c_driver_TXData@d stored from wreg
 10058  0779  00F0               	movwf	i1i2c_driver_TXData@d
 10059                           
 10060                           ;i2c_driver.c: 188: SSP1BUF = d;
 10061  077A  0870               	movf	i1i2c_driver_TXData@d,w
 10062  077B  0024               	movlb	4	; select bank4
 10063  077C  0091               	movwf	17	;volatile
 10064  077D  0008               	return
 10065  077E                     __end_ofi1_i2c_driver_TXData:	
 10066                           
 10067                           	psect	text82
 10068  07CC                     __ptext82:	
 10069 ;; *************** function i1_i2c_driver_getRXData *****************
 10070 ;; Defined at:
 10071 ;;		line 171 in file "mcc_generated_files/i2c_driver.c"
 10072 ;; Parameters:    Size  Location     Type
 10073 ;;		None
 10074 ;; Auto vars:     Size  Location     Type
 10075 ;;		None
 10076 ;; Return value:  Size  Location     Type
 10077 ;;                  1    wreg      unsigned char 
 10078 ;; Registers used:
 10079 ;;		wreg
 10080 ;; Tracked objects:
 10081 ;;		On entry : 0/0
 10082 ;;		On exit  : 0/0
 10083 ;;		Unchanged: 0/0
 10084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10086 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10087 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10088 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10089 ;;Total ram usage:        0 bytes
 10090 ;; Hardware stack levels used:    1
 10091 ;; This function calls:
 10092 ;;		Nothing
 10093 ;; This function is called by:
 10094 ;;		i1_do_I2C_RX
 10095 ;; This function uses a non-reentrant model
 10096 ;;
 10097                           
 10098                           
 10099                           ;psect for function i1_i2c_driver_getRXData
 10100  07CC                     i1_i2c_driver_getRXData:	
 10101                           
 10102                           ;i2c_driver.c: 173: return SSP1BUF;
 10103                           
 10104                           ;incstack = 0
 10105                           ; Regs used in i1_i2c_driver_getRXData: [wreg]
 10106  07CC  0024               	movlb	4	; select bank4
 10107  07CD  0811               	movf	17,w	;volatile
 10108  07CE  0008               	return
 10109  07CF                     __end_ofi1_i2c_driver_getRXData:	
 10110                           
 10111                           	psect	text83
 10112  07A6                     __ptext83:	
 10113 ;; *************** function i1_i2c_driver_sendNACK *****************
 10114 ;; Defined at:
 10115 ;;		line 202 in file "mcc_generated_files/i2c_driver.c"
 10116 ;; Parameters:    Size  Location     Type
 10117 ;;		None
 10118 ;; Auto vars:     Size  Location     Type
 10119 ;;		None
 10120 ;; Return value:  Size  Location     Type
 10121 ;;                  1    wreg      void 
 10122 ;; Registers used:
 10123 ;;		None
 10124 ;; Tracked objects:
 10125 ;;		On entry : 0/0
 10126 ;;		On exit  : 0/0
 10127 ;;		Unchanged: 0/0
 10128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10129 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10130 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10131 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10132 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10133 ;;Total ram usage:        0 bytes
 10134 ;; Hardware stack levels used:    1
 10135 ;; This function calls:
 10136 ;;		Nothing
 10137 ;; This function is called by:
 10138 ;;		i1_do_I2C_DO_NACK_STOP
 10139 ;;		i1_do_I2C_DO_NACK_RESTART
 10140 ;; This function uses a non-reentrant model
 10141 ;;
 10142                           
 10143                           
 10144                           ;psect for function i1_i2c_driver_sendNACK
 10145  07A6                     i1_i2c_driver_sendNACK:	
 10146                           
 10147                           ;i2c_driver.c: 204: SSP1CON2bits.ACKDT = 1;
 10148                           
 10149                           ;incstack = 0
 10150                           ; Regs used in i1_i2c_driver_sendNACK: []
 10151  07A6  0024               	movlb	4	; select bank4
 10152  07A7  1696               	bsf	22,5	;volatile
 10153                           
 10154                           ;i2c_driver.c: 205: SSP1CON2bits.ACKEN = 1;
 10155  07A8  1616               	bsf	22,4	;volatile
 10156  07A9  0008               	return
 10157  07AA                     __end_ofi1_i2c_driver_sendNACK:	
 10158                           
 10159                           	psect	text84
 10160  07E5                     __ptext84:	
 10161 ;; *************** function i1_i2c_driver_resetBus *****************
 10162 ;; Defined at:
 10163 ;;		line 141 in file "mcc_generated_files/i2c_driver.c"
 10164 ;; Parameters:    Size  Location     Type
 10165 ;;		None
 10166 ;; Auto vars:     Size  Location     Type
 10167 ;;		None
 10168 ;; Return value:  Size  Location     Type
 10169 ;;                  1    wreg      void 
 10170 ;; Registers used:
 10171 ;;		None
 10172 ;; Tracked objects:
 10173 ;;		On entry : 0/0
 10174 ;;		On exit  : 0/0
 10175 ;;		Unchanged: 0/0
 10176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10178 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10179 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10180 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10181 ;;Total ram usage:        0 bytes
 10182 ;; Hardware stack levels used:    1
 10183 ;; This function calls:
 10184 ;;		Nothing
 10185 ;; This function is called by:
 10186 ;;		i1_do_I2C_RESET
 10187 ;; This function uses a non-reentrant model
 10188 ;;
 10189                           
 10190                           
 10191                           ;psect for function i1_i2c_driver_resetBus
 10192  07E5                     i1_i2c_driver_resetBus:	
 10193                           
 10194                           ;incstack = 0
 10195                           ; Regs used in i1_i2c_driver_resetBus: []
 10196  07E5  0008               	return
 10197  07E6                     __end_ofi1_i2c_driver_resetBus:	
 10198                           
 10199                           	psect	text85
 10200  07CF                     __ptext85:	
 10201 ;; *************** function i1_i2c_driver_startRX *****************
 10202 ;; Defined at:
 10203 ;;		line 166 in file "mcc_generated_files/i2c_driver.c"
 10204 ;; Parameters:    Size  Location     Type
 10205 ;;		None
 10206 ;; Auto vars:     Size  Location     Type
 10207 ;;		None
 10208 ;; Return value:  Size  Location     Type
 10209 ;;                  1    wreg      void 
 10210 ;; Registers used:
 10211 ;;		None
 10212 ;; Tracked objects:
 10213 ;;		On entry : 0/0
 10214 ;;		On exit  : 0/0
 10215 ;;		Unchanged: 0/0
 10216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10217 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10218 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10219 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10220 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10221 ;;Total ram usage:        0 bytes
 10222 ;; Hardware stack levels used:    1
 10223 ;; This function calls:
 10224 ;;		Nothing
 10225 ;; This function is called by:
 10226 ;;		i1_do_I2C_RCEN
 10227 ;; This function uses a non-reentrant model
 10228 ;;
 10229                           
 10230                           
 10231                           ;psect for function i1_i2c_driver_startRX
 10232  07CF                     i1_i2c_driver_startRX:	
 10233                           
 10234                           ;i2c_driver.c: 168: SSP1CON2bits.RCEN = 1;
 10235                           
 10236                           ;incstack = 0
 10237                           ; Regs used in i1_i2c_driver_startRX: []
 10238  07CF  0024               	movlb	4	; select bank4
 10239  07D0  1596               	bsf	22,3	;volatile
 10240  07D1  0008               	return
 10241  07D2                     __end_ofi1_i2c_driver_startRX:	
 10242                           
 10243                           	psect	text86
 10244  0564                     __ptext86:	
 10245 ;; *************** function i1_rdBlkRegCompleteHandler *****************
 10246 ;; Defined at:
 10247 ;;		line 134 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 10248 ;; Parameters:    Size  Location     Type
 10249 ;;  p               1    9[COMMON] PTR void 
 10250 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 10251 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 10252 ;; Auto vars:     Size  Location     Type
 10253 ;;		None
 10254 ;; Return value:  Size  Location     Type
 10255 ;;                  1    wreg      enum E97
 10256 ;; Registers used:
 10257 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10258 ;; Tracked objects:
 10259 ;;		On entry : 0/0
 10260 ;;		On exit  : 0/0
 10261 ;;		Unchanged: 0/0
 10262 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10263 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10264 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10265 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10266 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10267 ;;Total ram usage:        1 bytes
 10268 ;; Hardware stack levels used:    1
 10269 ;; Hardware stack levels required when called:    2
 10270 ;; This function calls:
 10271 ;;		i1_i2c_setBuffer
 10272 ;;		i1_i2c_setDataCompleteCallback
 10273 ;; This function is called by:
 10274 ;; This function uses a non-reentrant model
 10275 ;;
 10276                           
 10277                           
 10278                           ;psect for function i1_rdBlkRegCompleteHandler
 10279  0564                     i1_rdBlkRegCompleteHandler:	
 10280  0564                     i1l2547:	
 10281                           ;incstack = 0
 10282                           ; Regs used in i1_rdBlkRegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 10283                           
 10284                           
 10285                           ;i2c_simple_master.c: 136: i2c_setBuffer(((buf_t *)p)->data,((buf_t*)p)->len);
 10286  0564  0879               	movf	i1rdBlkRegCompleteHandler@p,w
 10287  0565  0086               	movwf	6
 10288  0566  0187               	clrf	7
 10289  0567  3F40               	moviw [0]fsr1
 10290  0568  00F0               	movwf	i1i2c_setBuffer@bufferSize
 10291  0569  3F41               	moviw [1]fsr1
 10292  056A  00F1               	movwf	i1i2c_setBuffer@bufferSize+1
 10293  056B  0879               	movf	i1rdBlkRegCompleteHandler@p,w
 10294  056C  3E02               	addlw	2
 10295  056D  0086               	movwf	6
 10296  056E  0187               	clrf	7
 10297  056F  0801               	movf	1,w
 10298  0570  3186  2637  3185   	fcall	i1_i2c_setBuffer
 10299                           
 10300                           ;i2c_simple_master.c: 137: i2c_setDataCompleteCallback((0),(0));
 10301  0573  3000               	movlw	0
 10302  0574  00F5               	movwf	i1i2c_setDataCompleteCallback@cb
 10303  0575  00F6               	movwf	i1i2c_setDataCompleteCallback@cb+1
 10304  0576  01F7               	clrf	i1i2c_setDataCompleteCallback@p
 10305  0577  3186  2684         	fcall	i1_i2c_setDataCompleteCallback
 10306                           
 10307                           ;i2c_simple_master.c: 138: return i2c_restart_read;
 10308  0579  3002               	movlw	2
 10309  057A  0008               	return
 10310  057B                     __end_ofi1_rdBlkRegCompleteHandler:	
 10311                           
 10312                           	psect	text87
 10313  05E9                     __ptext87:	
 10314 ;; *************** function i1_rd2RegCompleteHandler *****************
 10315 ;; Defined at:
 10316 ;;		line 87 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 10317 ;; Parameters:    Size  Location     Type
 10318 ;;  p               1    9[COMMON] PTR void 
 10319 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 10320 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 10321 ;; Auto vars:     Size  Location     Type
 10322 ;;		None
 10323 ;; Return value:  Size  Location     Type
 10324 ;;                  1    wreg      enum E97
 10325 ;; Registers used:
 10326 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10327 ;; Tracked objects:
 10328 ;;		On entry : 0/0
 10329 ;;		On exit  : 0/0
 10330 ;;		Unchanged: 0/0
 10331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10332 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10333 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10334 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10335 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10336 ;;Total ram usage:        1 bytes
 10337 ;; Hardware stack levels used:    1
 10338 ;; Hardware stack levels required when called:    2
 10339 ;; This function calls:
 10340 ;;		i1_i2c_setBuffer
 10341 ;;		i1_i2c_setDataCompleteCallback
 10342 ;; This function is called by:
 10343 ;; This function uses a non-reentrant model
 10344 ;;
 10345                           
 10346                           
 10347                           ;psect for function i1_rd2RegCompleteHandler
 10348  05E9                     i1_rd2RegCompleteHandler:	
 10349  05E9                     i1l2531:	
 10350                           ;incstack = 0
 10351                           ; Regs used in i1_rd2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 10352                           
 10353                           
 10354                           ;i2c_simple_master.c: 89: i2c_setBuffer(p,2);
 10355  05E9  3002               	movlw	2
 10356  05EA  00F0               	movwf	i1i2c_setBuffer@bufferSize
 10357  05EB  3000               	movlw	0
 10358  05EC  00F1               	movwf	i1i2c_setBuffer@bufferSize+1
 10359  05ED  0879               	movf	i1rd2RegCompleteHandler@p,w
 10360  05EE  3186  2637  3185   	fcall	i1_i2c_setBuffer
 10361                           
 10362                           ;i2c_simple_master.c: 90: i2c_setDataCompleteCallback((0),(0));
 10363  05F1  3000               	movlw	0
 10364  05F2  00F5               	movwf	i1i2c_setDataCompleteCallback@cb
 10365  05F3  00F6               	movwf	i1i2c_setDataCompleteCallback@cb+1
 10366  05F4  01F7               	clrf	i1i2c_setDataCompleteCallback@p
 10367  05F5  3186  2684         	fcall	i1_i2c_setDataCompleteCallback
 10368                           
 10369                           ;i2c_simple_master.c: 91: return i2c_restart_read;
 10370  05F7  3002               	movlw	2
 10371  05F8  0008               	return
 10372  05F9                     __end_ofi1_rd2RegCompleteHandler:	
 10373                           
 10374                           	psect	text88
 10375  05F9                     __ptext88:	
 10376 ;; *************** function i1_rd1RegCompleteHandler *****************
 10377 ;; Defined at:
 10378 ;;		line 58 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 10379 ;; Parameters:    Size  Location     Type
 10380 ;;  p               1    9[COMMON] PTR void 
 10381 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 10382 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 10383 ;; Auto vars:     Size  Location     Type
 10384 ;;		None
 10385 ;; Return value:  Size  Location     Type
 10386 ;;                  1    wreg      enum E97
 10387 ;; Registers used:
 10388 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10389 ;; Tracked objects:
 10390 ;;		On entry : 0/0
 10391 ;;		On exit  : 0/0
 10392 ;;		Unchanged: 0/0
 10393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10394 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10395 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10396 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10397 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10398 ;;Total ram usage:        1 bytes
 10399 ;; Hardware stack levels used:    1
 10400 ;; Hardware stack levels required when called:    2
 10401 ;; This function calls:
 10402 ;;		i1_i2c_setBuffer
 10403 ;;		i1_i2c_setDataCompleteCallback
 10404 ;; This function is called by:
 10405 ;; This function uses a non-reentrant model
 10406 ;;
 10407                           
 10408                           
 10409                           ;psect for function i1_rd1RegCompleteHandler
 10410  05F9                     i1_rd1RegCompleteHandler:	
 10411  05F9                     i1l2523:	
 10412                           ;incstack = 0
 10413                           ; Regs used in i1_rd1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 10414                           
 10415                           
 10416                           ;i2c_simple_master.c: 60: i2c_setBuffer(p,1);
 10417  05F9  3001               	movlw	1
 10418  05FA  00F0               	movwf	i1i2c_setBuffer@bufferSize
 10419  05FB  3000               	movlw	0
 10420  05FC  00F1               	movwf	i1i2c_setBuffer@bufferSize+1
 10421  05FD  0879               	movf	i1rd1RegCompleteHandler@p,w
 10422  05FE  3186  2637  3185   	fcall	i1_i2c_setBuffer
 10423                           
 10424                           ;i2c_simple_master.c: 61: i2c_setDataCompleteCallback((0),(0));
 10425  0601  3000               	movlw	0
 10426  0602  00F5               	movwf	i1i2c_setDataCompleteCallback@cb
 10427  0603  00F6               	movwf	i1i2c_setDataCompleteCallback@cb+1
 10428  0604  01F7               	clrf	i1i2c_setDataCompleteCallback@p
 10429  0605  3186  2684         	fcall	i1_i2c_setDataCompleteCallback
 10430                           
 10431                           ;i2c_simple_master.c: 62: return i2c_restart_read;
 10432  0607  3002               	movlw	2
 10433  0608  0008               	return
 10434  0609                     __end_ofi1_rd1RegCompleteHandler:	
 10435                           
 10436                           	psect	text89
 10437  0609                     __ptext89:	
 10438 ;; *************** function i1_wr1RegCompleteHandler *****************
 10439 ;; Defined at:
 10440 ;;		line 31 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 10441 ;; Parameters:    Size  Location     Type
 10442 ;;  p               1    9[COMMON] PTR void 
 10443 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 10444 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 10445 ;; Auto vars:     Size  Location     Type
 10446 ;;		None
 10447 ;; Return value:  Size  Location     Type
 10448 ;;                  1    wreg      enum E97
 10449 ;; Registers used:
 10450 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10451 ;; Tracked objects:
 10452 ;;		On entry : 0/0
 10453 ;;		On exit  : 0/0
 10454 ;;		Unchanged: 0/0
 10455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10456 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10457 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10458 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10459 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10460 ;;Total ram usage:        1 bytes
 10461 ;; Hardware stack levels used:    1
 10462 ;; Hardware stack levels required when called:    2
 10463 ;; This function calls:
 10464 ;;		i1_i2c_setBuffer
 10465 ;;		i1_i2c_setDataCompleteCallback
 10466 ;; This function is called by:
 10467 ;; This function uses a non-reentrant model
 10468 ;;
 10469                           
 10470                           
 10471                           ;psect for function i1_wr1RegCompleteHandler
 10472  0609                     i1_wr1RegCompleteHandler:	
 10473  0609                     i1l2515:	
 10474                           ;incstack = 0
 10475                           ; Regs used in i1_wr1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 10476                           
 10477                           
 10478                           ;i2c_simple_master.c: 33: i2c_setBuffer(p,1);
 10479  0609  3001               	movlw	1
 10480  060A  00F0               	movwf	i1i2c_setBuffer@bufferSize
 10481  060B  3000               	movlw	0
 10482  060C  00F1               	movwf	i1i2c_setBuffer@bufferSize+1
 10483  060D  0879               	movf	i1wr1RegCompleteHandler@p,w
 10484  060E  3186  2637  3186   	fcall	i1_i2c_setBuffer
 10485                           
 10486                           ;i2c_simple_master.c: 34: i2c_setDataCompleteCallback((0),(0));
 10487  0611  3000               	movlw	0
 10488  0612  00F5               	movwf	i1i2c_setDataCompleteCallback@cb
 10489  0613  00F6               	movwf	i1i2c_setDataCompleteCallback@cb+1
 10490  0614  01F7               	clrf	i1i2c_setDataCompleteCallback@p
 10491  0615  3186  2684         	fcall	i1_i2c_setDataCompleteCallback
 10492                           
 10493                           ;i2c_simple_master.c: 35: return i2c_continue;
 10494  0617  3004               	movlw	4
 10495  0618  0008               	return
 10496  0619                     __end_ofi1_wr1RegCompleteHandler:	
 10497                           
 10498                           	psect	text90
 10499  07DE                     __ptext90:	
 10500 ;; *************** function i1_i2c_restartWrite *****************
 10501 ;; Defined at:
 10502 ;;		line 35 in file "mcc_generated_files/drivers/i2c_types.c"
 10503 ;; Parameters:    Size  Location     Type
 10504 ;;  p               1    9[COMMON] PTR void 
 10505 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 10506 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 10507 ;; Auto vars:     Size  Location     Type
 10508 ;;		None
 10509 ;; Return value:  Size  Location     Type
 10510 ;;                  1    wreg      enum E96
 10511 ;; Registers used:
 10512 ;;		wreg
 10513 ;; Tracked objects:
 10514 ;;		On entry : 0/0
 10515 ;;		On exit  : 0/0
 10516 ;;		Unchanged: 0/0
 10517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10518 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10519 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10521 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10522 ;;Total ram usage:        1 bytes
 10523 ;; Hardware stack levels used:    1
 10524 ;; This function calls:
 10525 ;;		Nothing
 10526 ;; This function is called by:
 10527 ;; This function uses a non-reentrant model
 10528 ;;
 10529                           
 10530                           
 10531                           ;psect for function i1_i2c_restartWrite
 10532  07DE                     i1_i2c_restartWrite:	
 10533  07DE                     i1l2511:	
 10534                           ;incstack = 0
 10535                           ; Regs used in i1_i2c_restartWrite: [wreg]
 10536                           
 10537                           
 10538                           ;i2c_types.c: 37: return i2c_restart_write;
 10539  07DE  3003               	movlw	3
 10540  07DF  0008               	return
 10541  07E0                     __end_ofi1_i2c_restartWrite:	
 10542                           
 10543                           	psect	text91
 10544  07E0                     __ptext91:	
 10545 ;; *************** function i1_returnReset *****************
 10546 ;; Defined at:
 10547 ;;		line 448 in file "mcc_generated_files/drivers/i2c_master.c"
 10548 ;; Parameters:    Size  Location     Type
 10549 ;;  p               1    9[COMMON] PTR void 
 10550 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 10551 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 10552 ;; Auto vars:     Size  Location     Type
 10553 ;;		None
 10554 ;; Return value:  Size  Location     Type
 10555 ;;                  1    wreg      enum E12171
 10556 ;; Registers used:
 10557 ;;		wreg
 10558 ;; Tracked objects:
 10559 ;;		On entry : 0/0
 10560 ;;		On exit  : 0/0
 10561 ;;		Unchanged: 0/0
 10562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10563 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10564 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10565 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10566 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10567 ;;Total ram usage:        1 bytes
 10568 ;; Hardware stack levels used:    1
 10569 ;; This function calls:
 10570 ;;		Nothing
 10571 ;; This function is called by:
 10572 ;; This function uses a non-reentrant model
 10573 ;;
 10574                           
 10575                           
 10576                           ;psect for function i1_returnReset
 10577  07E0                     i1_returnReset:	
 10578  07E0                     i1l2507:	
 10579                           ;incstack = 0
 10580                           ; Regs used in i1_returnReset: [wreg]
 10581                           
 10582                           
 10583                           ;i2c_master.c: 450: return i2c_reset_link;
 10584  07E0  3005               	movlw	5
 10585  07E1  0008               	return
 10586  07E2                     __end_ofi1_returnReset:	
 10587                           
 10588                           	psect	text92
 10589  07E2                     __ptext92:	
 10590 ;; *************** function i1_returnStop *****************
 10591 ;; Defined at:
 10592 ;;		line 443 in file "mcc_generated_files/drivers/i2c_master.c"
 10593 ;; Parameters:    Size  Location     Type
 10594 ;;  p               1    9[COMMON] PTR void 
 10595 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 10596 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 10597 ;; Auto vars:     Size  Location     Type
 10598 ;;		None
 10599 ;; Return value:  Size  Location     Type
 10600 ;;                  1    wreg      enum E12171
 10601 ;; Registers used:
 10602 ;;		wreg
 10603 ;; Tracked objects:
 10604 ;;		On entry : 0/0
 10605 ;;		On exit  : 0/0
 10606 ;;		Unchanged: 0/0
 10607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10608 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10609 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10610 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10611 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10612 ;;Total ram usage:        1 bytes
 10613 ;; Hardware stack levels used:    1
 10614 ;; This function calls:
 10615 ;;		Nothing
 10616 ;; This function is called by:
 10617 ;;		i1_setCallBack
 10618 ;;		_do_I2C_DO_ADDRESS_NACK
 10619 ;;		_do_I2C_TX
 10620 ;;		_do_I2C_RX
 10621 ;;		_do_I2C_TX_EMPTY
 10622 ;;		i1_do_I2C_DO_ADDRESS_NACK
 10623 ;;		i1_do_I2C_TX
 10624 ;;		i1_do_I2C_RX
 10625 ;;		i1_do_I2C_TX_EMPTY
 10626 ;; This function uses a non-reentrant model
 10627 ;;
 10628                           
 10629                           
 10630                           ;psect for function i1_returnStop
 10631  07E2                     i1_returnStop:	
 10632  07E2                     i1l2503:	
 10633                           ;incstack = 0
 10634                           ; Regs used in i1_returnStop: [wreg]
 10635                           
 10636                           
 10637                           ;i2c_master.c: 445: return i2c_stop;
 10638  07E2  3001               	movlw	1
 10639  07E3  0008               	return
 10640  07E4                     __end_ofi1_returnStop:	
 10641                           
 10642                           	psect	text93
 10643  0619                     __ptext93:	
 10644 ;; *************** function i1_wr2RegCompleteHandler *****************
 10645 ;; Defined at:
 10646 ;;		line 110 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 10647 ;; Parameters:    Size  Location     Type
 10648 ;;  p               1    9[COMMON] PTR void 
 10649 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 10650 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 10651 ;; Auto vars:     Size  Location     Type
 10652 ;;		None
 10653 ;; Return value:  Size  Location     Type
 10654 ;;                  1    wreg      enum E97
 10655 ;; Registers used:
 10656 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10657 ;; Tracked objects:
 10658 ;;		On entry : 0/0
 10659 ;;		On exit  : 0/0
 10660 ;;		Unchanged: 0/0
 10661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10662 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10663 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10664 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10665 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10666 ;;Total ram usage:        1 bytes
 10667 ;; Hardware stack levels used:    1
 10668 ;; Hardware stack levels required when called:    2
 10669 ;; This function calls:
 10670 ;;		i1_i2c_setBuffer
 10671 ;;		i1_i2c_setDataCompleteCallback
 10672 ;; This function is called by:
 10673 ;; This function uses a non-reentrant model
 10674 ;;
 10675                           
 10676                           
 10677                           ;psect for function i1_wr2RegCompleteHandler
 10678  0619                     i1_wr2RegCompleteHandler:	
 10679  0619                     i1l2539:	
 10680                           ;incstack = 0
 10681                           ; Regs used in i1_wr2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 10682                           
 10683                           
 10684                           ;i2c_simple_master.c: 112: i2c_setBuffer(p,2);
 10685  0619  3002               	movlw	2
 10686  061A  00F0               	movwf	i1i2c_setBuffer@bufferSize
 10687  061B  3000               	movlw	0
 10688  061C  00F1               	movwf	i1i2c_setBuffer@bufferSize+1
 10689  061D  0879               	movf	i1wr2RegCompleteHandler@p,w
 10690  061E  3186  2637  3186   	fcall	i1_i2c_setBuffer
 10691                           
 10692                           ;i2c_simple_master.c: 113: i2c_setDataCompleteCallback((0),(0));
 10693  0621  3000               	movlw	0
 10694  0622  00F5               	movwf	i1i2c_setDataCompleteCallback@cb
 10695  0623  00F6               	movwf	i1i2c_setDataCompleteCallback@cb+1
 10696  0624  01F7               	clrf	i1i2c_setDataCompleteCallback@p
 10697  0625  3186  2684         	fcall	i1_i2c_setDataCompleteCallback
 10698                           
 10699                           ;i2c_simple_master.c: 114: return i2c_continue;
 10700  0627  3004               	movlw	4
 10701  0628  0008               	return
 10702  0629                     __end_ofi1_wr2RegCompleteHandler:	
 10703                           
 10704                           	psect	text94
 10705  0684                     __ptext94:	
 10706 ;; *************** function i1_i2c_setDataCompleteCallback *****************
 10707 ;; Defined at:
 10708 ;;		line 89 in file "mcc_generated_files/drivers/i2c_master.c"
 10709 ;; Parameters:    Size  Location     Type
 10710 ;;  cb              2    5[COMMON] PTR FTN(PTR void ,)enum 
 10711 ;;		 -> rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), rd2RegCompleteHandler(1), rd1RegCompleteHandler(1), 
 10712 ;;		 -> wr1RegCompleteHandler(1), Absolute function(1), 
 10713 ;;  p               1    7[COMMON] PTR void 
 10714 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 10715 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 10716 ;; Auto vars:     Size  Location     Type
 10717 ;;		None
 10718 ;; Return value:  Size  Location     Type
 10719 ;;                  1    wreg      void 
 10720 ;; Registers used:
 10721 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10722 ;; Tracked objects:
 10723 ;;		On entry : 0/0
 10724 ;;		On exit  : 0/0
 10725 ;;		Unchanged: 0/0
 10726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10727 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10728 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10729 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10730 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10731 ;;Total ram usage:        4 bytes
 10732 ;; Hardware stack levels used:    1
 10733 ;; Hardware stack levels required when called:    1
 10734 ;; This function calls:
 10735 ;;		i1_setCallBack
 10736 ;; This function is called by:
 10737 ;;		i1_wr1RegCompleteHandler
 10738 ;;		i1_rd1RegCompleteHandler
 10739 ;;		i1_rd2RegCompleteHandler
 10740 ;;		i1_wr2RegCompleteHandler
 10741 ;;		i1_rdBlkRegCompleteHandler
 10742 ;; This function uses a non-reentrant model
 10743 ;;
 10744                           
 10745                           
 10746                           ;psect for function i1_i2c_setDataCompleteCallback
 10747  0684                     i1_i2c_setDataCompleteCallback:	
 10748                           
 10749                           ;i2c_master.c: 91: setCallBack(i2c_dataComplete,cb,p);
 10750                           
 10751                           ;incstack = 0
 10752                           ; Regs used in i1_i2c_setDataCompleteCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclat
      +                          h+cstack]
 10753  0684  0876               	movf	i1i2c_setDataCompleteCallback@cb+1,w
 10754  0685  00F1               	movwf	i1setCallBack@cb+1
 10755  0686  0875               	movf	i1i2c_setDataCompleteCallback@cb,w
 10756  0687  00F0               	movwf	i1setCallBack@cb
 10757  0688  0877               	movf	i1i2c_setDataCompleteCallback@p,w
 10758  0689  00F8               	movwf	??i1_i2c_setDataCompleteCallback
 10759  068A  0878               	movf	??i1_i2c_setDataCompleteCallback,w
 10760  068B  00F2               	movwf	i1setCallBack@p
 10761  068C  3000               	movlw	0
 10762  068D  3184  247F         	fcall	i1_setCallBack
 10763  068F  0008               	return
 10764  0690                     __end_ofi1_i2c_setDataCompleteCallback:	
 10765                           
 10766                           	psect	text95
 10767  047F                     __ptext95:	
 10768 ;; *************** function i1_setCallBack *****************
 10769 ;; Defined at:
 10770 ;;		line 453 in file "mcc_generated_files/drivers/i2c_master.c"
 10771 ;; Parameters:    Size  Location     Type
 10772 ;;  idx             1    wreg     enum E12355
 10773 ;;  cb              2    0[COMMON] PTR FTN(PTR void ,)enum 
 10774 ;;		 -> rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), rd2RegCompleteHandler(1), rd1RegCompleteHandler(1), 
 10775 ;;		 -> wr1RegCompleteHandler(1), i2c_restartWrite(1), Absolute function(1), 
 10776 ;;  p               1    2[COMMON] PTR void 
 10777 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 10778 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 10779 ;; Auto vars:     Size  Location     Type
 10780 ;;  idx             1    4[COMMON] enum E12355
 10781 ;; Return value:  Size  Location     Type
 10782 ;;                  1    wreg      void 
 10783 ;; Registers used:
 10784 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10785 ;; Tracked objects:
 10786 ;;		On entry : 0/0
 10787 ;;		On exit  : 0/0
 10788 ;;		Unchanged: 0/0
 10789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10790 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10791 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10792 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10793 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10794 ;;Total ram usage:        5 bytes
 10795 ;; Hardware stack levels used:    1
 10796 ;; This function calls:
 10797 ;;		Nothing
 10798 ;; This function is called by:
 10799 ;;		i1_i2c_setDataCompleteCallback
 10800 ;; This function uses a non-reentrant model
 10801 ;;
 10802                           
 10803                           
 10804                           ;psect for function i1_setCallBack
 10805  047F                     i1_setCallBack:	
 10806                           
 10807                           ;incstack = 0
 10808                           ; Regs used in i1_setCallBack: [wreg+fsr1l+fsr1h+status,2+status,0]
 10809                           ;i1setCallBack@idx stored from wreg
 10810  047F  00F4               	movwf	i1setCallBack@idx
 10811                           
 10812                           ;i2c_master.c: 455: if(cb)
 10813  0480  0870               	movf	i1setCallBack@cb,w
 10814  0481  0471               	iorwf	i1setCallBack@cb+1,w
 10815  0482  1903               	btfsc	3,2
 10816  0483  2C95               	goto	i1l2343
 10817                           
 10818                           ;i2c_master.c: 456: {
 10819                           ;i2c_master.c: 457: i2c_status.callbackTable[idx] = cb;
 10820  0484  3574               	lslf	i1setCallBack@idx,w
 10821  0485  3E2B               	addlw	(low ((_i2c_status| 0+11)))& (0+255)
 10822  0486  0086               	movwf	6
 10823  0487  0187               	clrf	7
 10824  0488  0870               	movf	i1setCallBack@cb,w
 10825  0489  3FC0               	movwi [0]fsr1
 10826  048A  0871               	movf	i1setCallBack@cb+1,w
 10827  048B  3FC1               	movwi [1]fsr1
 10828                           
 10829                           ;i2c_master.c: 458: i2c_status.callbackPayload[idx] = p;
 10830  048C  0872               	movf	i1setCallBack@p,w
 10831  048D  00F3               	movwf	??i1_setCallBack
 10832  048E  0874               	movf	i1setCallBack@idx,w
 10833  048F  3E37               	addlw	(low ((_i2c_status| 0+23)))& (0+255)
 10834  0490  0086               	movwf	6
 10835  0491  0187               	clrf	7
 10836  0492  0873               	movf	??i1_setCallBack,w
 10837  0493  0081               	movwf	1
 10838                           
 10839                           ;i2c_master.c: 459: }
 10840  0494  0008               	return
 10841  0495                     i1l2343:	
 10842                           
 10843                           ;i2c_master.c: 460: else
 10844                           ;i2c_master.c: 461: {
 10845                           ;i2c_master.c: 462: i2c_status.callbackTable[idx] = returnStop;
 10846  0495  3574               	lslf	i1setCallBack@idx,w
 10847  0496  3E2B               	addlw	(low ((_i2c_status| 0+11)))& (0+255)
 10848  0497  0086               	movwf	6
 10849  0498  0187               	clrf	7
 10850  0499  3062               	movlw	low _returnStop
 10851  049A  3FC0               	movwi [0]fsr1
 10852  049B  3007               	movlw	high _returnStop
 10853  049C  3FC1               	movwi [1]fsr1
 10854                           
 10855                           ;i2c_master.c: 463: i2c_status.callbackPayload[idx] = (0);
 10856  049D  0874               	movf	i1setCallBack@idx,w
 10857  049E  3E37               	addlw	(low ((_i2c_status| 0+23)))& (0+255)
 10858  049F  0086               	movwf	6
 10859  04A0  0187               	clrf	7
 10860  04A1  0181               	clrf	1
 10861  04A2  0008               	return
 10862  04A3                     __end_ofi1_setCallBack:	
 10863                           
 10864                           	psect	text96
 10865  0637                     __ptext96:	
 10866 ;; *************** function i1_i2c_setBuffer *****************
 10867 ;; Defined at:
 10868 ;;		line 184 in file "mcc_generated_files/drivers/i2c_master.c"
 10869 ;; Parameters:    Size  Location     Type
 10870 ;;  buffer          1    wreg     PTR void 
 10871 ;;		 -> i2c_readDataBlock@reg(1), i2c_readDataBlock@d(3), i2c_write2ByteRegister@reg(1), i2c_write2ByteRegister@data(2),
      + 
 10872 ;;		 -> i2c_read2ByteRegister@reg(1), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@reg(1), i2c_read1ByteRegist
      +er@d2(1), 
 10873 ;;		 -> i2c_write1ByteRegister@reg(1), i2c_write1ByteRegister@data(1), NULL(0), writebuffer(17), 
 10874 ;;  bufferSize      2    0[COMMON] unsigned int 
 10875 ;; Auto vars:     Size  Location     Type
 10876 ;;  buffer          1    3[COMMON] PTR void 
 10877 ;;		 -> i2c_readDataBlock@reg(1), i2c_readDataBlock@d(3), i2c_write2ByteRegister@reg(1), i2c_write2ByteRegister@data(2),
      + 
 10878 ;;		 -> i2c_read2ByteRegister@reg(1), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@reg(1), i2c_read1ByteRegist
      +er@d2(1), 
 10879 ;;		 -> i2c_write1ByteRegister@reg(1), i2c_write1ByteRegister@data(1), NULL(0), writebuffer(17), 
 10880 ;; Return value:  Size  Location     Type
 10881 ;;                  1    wreg      void 
 10882 ;; Registers used:
 10883 ;;		wreg
 10884 ;; Tracked objects:
 10885 ;;		On entry : 0/0
 10886 ;;		On exit  : 0/0
 10887 ;;		Unchanged: 0/0
 10888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10889 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10890 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10891 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10892 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10893 ;;Total ram usage:        4 bytes
 10894 ;; Hardware stack levels used:    1
 10895 ;; This function calls:
 10896 ;;		Nothing
 10897 ;; This function is called by:
 10898 ;;		i1_wr1RegCompleteHandler
 10899 ;;		i1_rd1RegCompleteHandler
 10900 ;;		i1_rd2RegCompleteHandler
 10901 ;;		i1_wr2RegCompleteHandler
 10902 ;;		i1_rdBlkRegCompleteHandler
 10903 ;; This function uses a non-reentrant model
 10904 ;;
 10905                           
 10906                           
 10907                           ;psect for function i1_i2c_setBuffer
 10908  0637                     i1_i2c_setBuffer:	
 10909                           
 10910                           ;incstack = 0
 10911                           ; Regs used in i1_i2c_setBuffer: [wreg]
 10912                           ;i1i2c_setBuffer@buffer stored from wreg
 10913  0637  00F3               	movwf	i1i2c_setBuffer@buffer
 10914                           
 10915                           ;i2c_master.c: 186: if(i2c_status.bufferFree)
 10916  0638  0020               	movlb	0	; select bank0
 10917  0639  1D20               	btfss	_i2c_status,2
 10918  063A  0008               	return
 10919                           
 10920                           ;i2c_master.c: 187: {
 10921                           ;i2c_master.c: 188: i2c_status.data_ptr = buffer;
 10922  063B  0873               	movf	i1i2c_setBuffer@buffer,w
 10923  063C  00F2               	movwf	??i1_i2c_setBuffer
 10924  063D  0872               	movf	??i1_i2c_setBuffer,w
 10925  063E  00A2               	movwf	low ((_i2c_status| 0+2))
 10926                           
 10927                           ;i2c_master.c: 189: i2c_status.data_length = bufferSize;
 10928  063F  0871               	movf	i1i2c_setBuffer@bufferSize+1,w
 10929  0640  00A4               	movwf	_i2c_status+4
 10930  0641  0870               	movf	i1i2c_setBuffer@bufferSize,w
 10931  0642  00A3               	movwf	_i2c_status+3
 10932                           
 10933                           ;i2c_master.c: 190: i2c_status.bufferFree = 0;
 10934  0643  1120               	bcf	_i2c_status,2
 10935  0644  0008               	return
 10936  0645                     __end_ofi1_i2c_setBuffer:	
 10937                           
 10938                           	psect	text97
 10939  07D2                     __ptext97:	
 10940 ;; *************** function i1_i2c_driver_stop *****************
 10941 ;; Defined at:
 10942 ;;		line 156 in file "mcc_generated_files/i2c_driver.c"
 10943 ;; Parameters:    Size  Location     Type
 10944 ;;		None
 10945 ;; Auto vars:     Size  Location     Type
 10946 ;;		None
 10947 ;; Return value:  Size  Location     Type
 10948 ;;                  1    wreg      void 
 10949 ;; Registers used:
 10950 ;;		None
 10951 ;; Tracked objects:
 10952 ;;		On entry : 0/0
 10953 ;;		On exit  : 0/0
 10954 ;;		Unchanged: 0/0
 10955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10956 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10957 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10958 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10959 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10960 ;;Total ram usage:        0 bytes
 10961 ;; Hardware stack levels used:    1
 10962 ;; This function calls:
 10963 ;;		Nothing
 10964 ;; This function is called by:
 10965 ;;		i1_do_I2C_SEND_STOP
 10966 ;; This function uses a non-reentrant model
 10967 ;;
 10968                           
 10969                           
 10970                           ;psect for function i1_i2c_driver_stop
 10971  07D2                     i1_i2c_driver_stop:	
 10972                           
 10973                           ;i2c_driver.c: 158: SSP1CON2bits.PEN = 1;
 10974                           
 10975                           ;incstack = 0
 10976                           ; Regs used in i1_i2c_driver_stop: []
 10977  07D2  0024               	movlb	4	; select bank4
 10978  07D3  1516               	bsf	22,2	;volatile
 10979  07D4  0008               	return
 10980  07D5                     __end_ofi1_i2c_driver_stop:	
 10981                           
 10982                           	psect	text98
 10983  07D5                     __ptext98:	
 10984 ;; *************** function i1_i2c_driver_restart *****************
 10985 ;; Defined at:
 10986 ;;		line 151 in file "mcc_generated_files/i2c_driver.c"
 10987 ;; Parameters:    Size  Location     Type
 10988 ;;		None
 10989 ;; Auto vars:     Size  Location     Type
 10990 ;;		None
 10991 ;; Return value:  Size  Location     Type
 10992 ;;                  1    wreg      void 
 10993 ;; Registers used:
 10994 ;;		None
 10995 ;; Tracked objects:
 10996 ;;		On entry : 0/0
 10997 ;;		On exit  : 0/0
 10998 ;;		Unchanged: 0/0
 10999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11001 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11002 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11003 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11004 ;;Total ram usage:        0 bytes
 11005 ;; Hardware stack levels used:    1
 11006 ;; This function calls:
 11007 ;;		Nothing
 11008 ;; This function is called by:
 11009 ;;		i1_do_I2C_SEND_RESTART_READ
 11010 ;;		i1_do_I2C_SEND_RESTART_WRITE
 11011 ;;		i1_do_I2C_SEND_RESTART
 11012 ;; This function uses a non-reentrant model
 11013 ;;
 11014                           
 11015                           
 11016                           ;psect for function i1_i2c_driver_restart
 11017  07D5                     i1_i2c_driver_restart:	
 11018                           
 11019                           ;i2c_driver.c: 153: SSP1CON2bits.RSEN = 1;
 11020                           
 11021                           ;incstack = 0
 11022                           ; Regs used in i1_i2c_driver_restart: []
 11023  07D5  0024               	movlb	4	; select bank4
 11024  07D6  1496               	bsf	22,1	;volatile
 11025  07D7  0008               	return
 11026  07D8                     __end_ofi1_i2c_driver_restart:	
 11027                           
 11028                           	psect	text99
 11029  07AA                     __ptext99:	
 11030 ;; *************** function i1_i2c_driver_sendACK *****************
 11031 ;; Defined at:
 11032 ;;		line 196 in file "mcc_generated_files/i2c_driver.c"
 11033 ;; Parameters:    Size  Location     Type
 11034 ;;		None
 11035 ;; Auto vars:     Size  Location     Type
 11036 ;;		None
 11037 ;; Return value:  Size  Location     Type
 11038 ;;                  1    wreg      void 
 11039 ;; Registers used:
 11040 ;;		None
 11041 ;; Tracked objects:
 11042 ;;		On entry : 0/0
 11043 ;;		On exit  : 0/0
 11044 ;;		Unchanged: 0/0
 11045 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11046 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11047 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11048 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11049 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11050 ;;Total ram usage:        0 bytes
 11051 ;; Hardware stack levels used:    1
 11052 ;; This function calls:
 11053 ;;		Nothing
 11054 ;; This function is called by:
 11055 ;;		i1_do_I2C_DO_ACK
 11056 ;;		i1_do_I2C_RX
 11057 ;; This function uses a non-reentrant model
 11058 ;;
 11059                           
 11060                           
 11061                           ;psect for function i1_i2c_driver_sendACK
 11062  07AA                     i1_i2c_driver_sendACK:	
 11063                           
 11064                           ;i2c_driver.c: 198: SSP1CON2bits.ACKDT = 0;
 11065                           
 11066                           ;incstack = 0
 11067                           ; Regs used in i1_i2c_driver_sendACK: []
 11068  07AA  0024               	movlb	4	; select bank4
 11069  07AB  1296               	bcf	22,5	;volatile
 11070                           
 11071                           ;i2c_driver.c: 199: SSP1CON2bits.ACKEN = 1;
 11072  07AC  1616               	bsf	22,4	;volatile
 11073  07AD  0008               	return
 11074  07AE                     __end_ofi1_i2c_driver_sendACK:	
 11075                           
 11076                           	psect	text100
 11077  07D8                     __ptext100:	
 11078 ;; *************** function _i2c_busCollisionISR *****************
 11079 ;; Defined at:
 11080 ;;		line 435 in file "mcc_generated_files/drivers/i2c_master.c"
 11081 ;; Parameters:    Size  Location     Type
 11082 ;;		None
 11083 ;; Auto vars:     Size  Location     Type
 11084 ;;		None
 11085 ;; Return value:  Size  Location     Type
 11086 ;;                  1    wreg      void 
 11087 ;; Registers used:
 11088 ;;		status,2, status,0, pclath, cstack
 11089 ;; Tracked objects:
 11090 ;;		On entry : 0/0
 11091 ;;		On exit  : 0/0
 11092 ;;		Unchanged: 0/0
 11093 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11094 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11095 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11096 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11097 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11098 ;;Total ram usage:        0 bytes
 11099 ;; Hardware stack levels used:    1
 11100 ;; Hardware stack levels required when called:    1
 11101 ;; This function calls:
 11102 ;;		_i2c_driver_clearBusCollision
 11103 ;; This function is called by:
 11104 ;;		_i2c_open
 11105 ;;		_INTERRUPT_InterruptManager
 11106 ;; This function uses a non-reentrant model
 11107 ;;
 11108                           
 11109                           
 11110                           ;psect for function _i2c_busCollisionISR
 11111  07D8                     _i2c_busCollisionISR:	
 11112                           
 11113                           ;i2c_master.c: 437: i2c_driver_clearBusCollision();
 11114                           
 11115                           ;incstack = 0
 11116                           ; Regs used in _i2c_busCollisionISR: [status,2+status,0+pclath+cstack]
 11117  07D8  3187  27DB         	fcall	_i2c_driver_clearBusCollision
 11118  07DA  0008               	return
 11119  07DB                     __end_of_i2c_busCollisionISR:	
 11120                           
 11121                           	psect	text101
 11122  07DB                     __ptext101:	
 11123 ;; *************** function _i2c_driver_clearBusCollision *****************
 11124 ;; Defined at:
 11125 ;;		line 253 in file "mcc_generated_files/i2c_driver.c"
 11126 ;; Parameters:    Size  Location     Type
 11127 ;;		None
 11128 ;; Auto vars:     Size  Location     Type
 11129 ;;		None
 11130 ;; Return value:  Size  Location     Type
 11131 ;;                  1    wreg      void 
 11132 ;; Registers used:
 11133 ;;		None
 11134 ;; Tracked objects:
 11135 ;;		On entry : 0/0
 11136 ;;		On exit  : 0/0
 11137 ;;		Unchanged: 0/0
 11138 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11139 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11140 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11141 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11142 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11143 ;;Total ram usage:        0 bytes
 11144 ;; Hardware stack levels used:    1
 11145 ;; This function calls:
 11146 ;;		Nothing
 11147 ;; This function is called by:
 11148 ;;		_i2c_busCollisionISR
 11149 ;; This function uses a non-reentrant model
 11150 ;;
 11151                           
 11152                           
 11153                           ;psect for function _i2c_driver_clearBusCollision
 11154  07DB                     _i2c_driver_clearBusCollision:	
 11155                           
 11156                           ;i2c_driver.c: 255: PIR2bits.BCL1IF = 0;
 11157                           
 11158                           ;incstack = 0
 11159                           ; Regs used in _i2c_driver_clearBusCollision: []
 11160  07DB  0020               	movlb	0	; select bank0
 11161  07DC  1191               	bcf	17,3	;volatile
 11162  07DD  0008               	return
 11163  07DE                     __end_of_i2c_driver_clearBusCollision:	
 11164  007E                     btemp	set	126	;btemp
 11165  007E                     int$flags	set	126
 11166  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        32
    BSS         66
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     27      72
    BANK1            80      0      49
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    i2c_write1ByteRegister@data.data	PTR unsigned char  size(1) Largest target is 0

    i2c_read1ByteRegister@d2.data	PTR unsigned char  size(1) Largest target is 0

    i2c_read2ByteRegister@result.data	PTR unsigned char  size(1) Largest target is 0

    i2c_write2ByteRegister@data.data	PTR unsigned char  size(1) Largest target is 0

    do_I2C_TX$1380$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    do_I2C_RX$1386$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    do_I2C_TX_EMPTY$1392$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    i2c_ISR$1398	PTR const FTN()enum E12337 size(2) Largest target is 1
		 -> do_I2C_TX_EMPTY(), do_I2C_RX(), do_I2C_TX(), do_I2C_DO_ADDRESS_NACK(), 
		 -> do_I2C_DO_NACK_RESTART(), do_I2C_DO_NACK_STOP(), do_I2C_DO_ACK(), do_I2C_RCEN(), 
		 -> do_I2C_SEND_ADR_WRITE(), do_I2C_SEND_ADR_READ(), do_I2C_SEND_STOP(), do_I2C_SEND_RESTART(), 
		 -> do_I2C_SEND_RESTART_WRITE(), do_I2C_SEND_RESTART_READ(), do_I2C_IDLE(), do_I2C_RESET(), 

    do_I2C_TX_EMPTY$1397	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    do_I2C_TX_EMPTY$1392	PTR FTN(PTR void ,)enum E12171 size(2) Largest target is 1
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), i2c_restartWrite(), Absolute function(), returnReset(), 
		 -> returnStop(), 

    do_I2C_RX$1391	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    do_I2C_RX$1386	PTR FTN(PTR void ,)enum E12171 size(2) Largest target is 1
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), i2c_restartWrite(), Absolute function(), returnReset(), 
		 -> returnStop(), 

    do_I2C_TX$1385	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    do_I2C_TX$1380	PTR FTN(PTR void ,)enum E12171 size(2) Largest target is 1
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), i2c_restartWrite(), Absolute function(), returnReset(), 
		 -> returnStop(), 

    returnStop@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    returnReset@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    cb$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    cb$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    Absolute function$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    i2c_restartWrite@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    cb$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    S560$11$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    mssp_waitForEvent@timeout	PTR unsigned int  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    d.data	PTR unsigned char  size(1) Largest target is 0

    S825$data	PTR unsigned char  size(1) Largest target is 0

    rdBlkRegCompleteHandler@p.data	PTR unsigned char  size(1) Largest target is 0

    rdBlkRegCompleteHandler@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    wr2RegCompleteHandler@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    rd2RegCompleteHandler@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    rd1RegCompleteHandler@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    i2c_writeNBytes@data	PTR void  size(1) Largest target is 17
		 -> writebuffer(BANK1[17]), 

    wr1RegCompleteHandler@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    setCallBack@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    setCallBack@cb	PTR FTN(PTR void ,)enum E12171 size(2) Largest target is 1
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), i2c_restartWrite(), Absolute function(), 

    fsmStateTable	PTR const FTN()enum E12337[16] size(2) Largest target is 1
		 -> do_I2C_TX_EMPTY(), do_I2C_RX(), do_I2C_TX(), do_I2C_DO_ADDRESS_NACK(), 
		 -> do_I2C_DO_NACK_RESTART(), do_I2C_DO_NACK_STOP(), do_I2C_DO_ACK(), do_I2C_RCEN(), 
		 -> do_I2C_SEND_ADR_WRITE(), do_I2C_SEND_ADR_READ(), do_I2C_SEND_STOP(), do_I2C_SEND_RESTART(), 
		 -> do_I2C_SEND_RESTART_WRITE(), do_I2C_SEND_RESTART_READ(), do_I2C_IDLE(), do_I2C_RESET(), 

    i2c_setBuffer@buffer	PTR void  size(1) Largest target is 17
		 -> i2c_readDataBlock@reg(COMMON[1]), i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@reg(COMMON[1]), i2c_write2ByteRegister@data(COMMON[2]), 
		 -> i2c_read2ByteRegister@reg(COMMON[1]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@reg(COMMON[1]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@reg(COMMON[1]), i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), writebuffer(BANK1[17]), 

    i2c_setAddressNACKCallback@p	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    i2c_setAddressNACKCallback@cb	PTR FTN(PTR void ,)enum E12171 size(2) Largest target is 1
		 -> i2c_restartWrite(), 

    i2c_setDataCompleteCallback@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    i2c_setDataCompleteCallback@cb	PTR FTN(PTR void ,)enum E12171 size(2) Largest target is 1
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), Absolute function(), 

    S560$callbackPayload	PTR void [6] size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    i2c_status.callbackPayload	PTR void [6] size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    S560$callbackTable	PTR FTN(PTR void ,)enum E12171[6] size(2) Largest target is 1
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), i2c_restartWrite(), Absolute function(), returnReset(), 
		 -> returnStop(), 

    i2c_status.callbackTable	PTR FTN(PTR void ,)enum E12171[6] size(2) Largest target is 1
		 -> i1_returnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), rd2RegCompleteHandler(), 
		 -> rd1RegCompleteHandler(), wr1RegCompleteHandler(), i2c_restartWrite(), Absolute function(), 
		 -> returnReset(), returnStop(), 

    S560$data_ptr	PTR unsigned char  size(1) Largest target is 17
		 -> i2c_readDataBlock@reg(COMMON[1]), i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@reg(COMMON[1]), i2c_write2ByteRegister@data(COMMON[2]), 
		 -> i2c_read2ByteRegister@reg(COMMON[1]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@reg(COMMON[1]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@reg(COMMON[1]), i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), writebuffer(BANK1[17]), 

    i2c_status.data_ptr	PTR unsigned char  size(1) Largest target is 17
		 -> i2c_readDataBlock@reg(COMMON[1]), i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@reg(COMMON[1]), i2c_write2ByteRegister@data(COMMON[2]), 
		 -> i2c_read2ByteRegister@reg(COMMON[1]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@reg(COMMON[1]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@reg(COMMON[1]), i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), writebuffer(BANK1[17]), 

    i2c_driver_setI2cISR@f	PTR void  size(2) Largest target is 1
		 -> i2c_ISR(), 

    i2c_driver_i2cISR	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), i2c_ISR(), 

    i2c_driver_setBusCollisionISR@f	PTR void  size(2) Largest target is 1
		 -> i2c_busCollisionISR(), 

    i2c_driver_busCollisionISR	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), i2c_busCollisionISR(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->i1_i2c_ISR
    i1_i2c_ISR->i1_do_I2C_TX
    i1_do_I2C_TX->i1_i2c_driver_TXData
    i1_do_I2C_TX->i1_i2c_driver_isNACK
    i1_do_I2C_SEND_ADR_WRITE->i1_i2c_driver_TXData
    i1_do_I2C_SEND_ADR_READ->i1_i2c_driver_TXData
    i1_wr2RegCompleteHandler->i1_i2c_setDataCompleteCallback
    i1_wr1RegCompleteHandler->i1_i2c_setDataCompleteCallback
    i1_rdBlkRegCompleteHandler->i1_i2c_setDataCompleteCallback
    i1_rd2RegCompleteHandler->i1_i2c_setDataCompleteCallback
    i1_rd1RegCompleteHandler->i1_i2c_setDataCompleteCallback
    i1_i2c_setDataCompleteCallback->i1_setCallBack

Critical Paths under _main in BANK0

    _main->_writeDisplay
    _writeDisplay->_i2c_writeNBytes
    _i2c_writeNBytes->_i2c_setAddressNACKCallback
    _i2c_setAddressNACKCallback->_setCallBack
    _i2c_open->_i2c_driver_setBusCollisionISR
    _i2c_open->_i2c_driver_setI2cISR
    _i2c_masterWrite->_i2c_masterOperation
    _i2c_poller->_i2c_ISR
    _i2c_ISR->_do_I2C_TX
    _do_I2C_TX->_i2c_driver_TXData
    _do_I2C_TX->_i2c_driver_isNACK
    _do_I2C_SEND_ADR_WRITE->_i2c_driver_TXData
    _do_I2C_SEND_ADR_READ->_i2c_driver_TXData
    _wr2RegCompleteHandler->_i2c_setDataCompleteCallback
    _wr1RegCompleteHandler->_i2c_setDataCompleteCallback
    _rdBlkRegCompleteHandler->_i2c_setDataCompleteCallback
    _rd2RegCompleteHandler->_i2c_setDataCompleteCallback
    _rd1RegCompleteHandler->_i2c_setDataCompleteCallback
    _i2c_setDataCompleteCallback->_setCallBack

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     8      0  168603
                                             19 BANK0      8     8      0
                  _SYSTEM_Initialize
                          _drawPixel
                    _i2c_writeNBytes
                       _writeDisplay
 ---------------------------------------------------------------------------------
 (1) _writeDisplay                                         6     6      0   84102
                                             13 BANK0      6     6      0
                            ___awdiv
                    _i2c_writeNBytes
 ---------------------------------------------------------------------------------
 (2) _i2c_writeNBytes                                      4     1      3   83048
                                              9 BANK0      4     1      3
                          _i2c_close
                    _i2c_masterWrite
                           _i2c_open
         _i2c_setAddressNACKCallback
                      _i2c_setBuffer
 ---------------------------------------------------------------------------------
 (3) _i2c_setAddressNACKCallback                           4     1      3    1870
                                              5 BANK0      4     1      3
                        _setCallBack
 ---------------------------------------------------------------------------------
 (3) _i2c_open                                             3     3      0     366
                                              2 BANK0      3     3      0
                    _i2c_driver_open
      _i2c_driver_setBusCollisionISR
               _i2c_driver_setI2cISR
                      _mssp_clearIRQ
 ---------------------------------------------------------------------------------
 (4) _i2c_driver_setI2cISR                                 2     0      2      98
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _i2c_driver_setBusCollisionISR                        2     0      2      98
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _i2c_driver_open                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2c_masterWrite                                      0     0      0   78362
                _i2c_masterOperation
 ---------------------------------------------------------------------------------
 (4) _i2c_masterOperation                                  3     3      0   78362
                                              5 BANK0      3     3      0
                   _i2c_driver_start
                         _i2c_poller
                  _mssp_IRQisEnabled
 ---------------------------------------------------------------------------------
 (5) _mssp_IRQisEnabled                                    2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (5) _i2c_poller                                           0     0      0   78192
                            _i2c_ISR
                  _mssp_waitForEvent
 ---------------------------------------------------------------------------------
 (6) _mssp_waitForEvent                                    1     1      0      50
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _i2c_ISR                                              1     1      0   78142
                                              4 BANK0      1     1      0
                      _do_I2C_DO_ACK *
             _do_I2C_DO_ADDRESS_NACK *
             _do_I2C_DO_NACK_RESTART *
                _do_I2C_DO_NACK_STOP *
                        _do_I2C_IDLE *
                        _do_I2C_RCEN *
                       _do_I2C_RESET *
                          _do_I2C_RX *
               _do_I2C_SEND_ADR_READ *
              _do_I2C_SEND_ADR_WRITE *
                _do_I2C_SEND_RESTART *
           _do_I2C_SEND_RESTART_READ *
          _do_I2C_SEND_RESTART_WRITE *
                   _do_I2C_SEND_STOP *
                          _do_I2C_TX *
                    _do_I2C_TX_EMPTY *
                  _i2c_driver_isNACK
                      _mssp_clearIRQ
 ---------------------------------------------------------------------------------
 (7) _do_I2C_TX_EMPTY                                      1     1      0   19494
                                              0 BANK0      1     1      0
                   Absolute function *
                _do_I2C_SEND_RESTART
                   _do_I2C_SEND_STOP
                   _i2c_restartWrite *
                        _mssp_setIRQ
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
                        _returnReset *
                         _returnStop *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (8) _mssp_setIRQ                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_TX                                            3     3      0   19616
                                              1 BANK0      3     3      0
                   Absolute function *
           _do_I2C_SEND_RESTART_READ
          _do_I2C_SEND_RESTART_WRITE
                   _do_I2C_SEND_STOP
                  _i2c_driver_TXData
                  _i2c_driver_isNACK
                   _i2c_restartWrite *
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
                        _returnReset *
                         _returnStop *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (7) _i2c_driver_isNACK                                    1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (8) _do_I2C_SEND_RESTART_WRITE                            0     0      0       0
                 _i2c_driver_restart
 ---------------------------------------------------------------------------------
 (8) _do_I2C_SEND_RESTART_READ                             0     0      0       0
                 _i2c_driver_restart
 ---------------------------------------------------------------------------------
 (7) _do_I2C_SEND_ADR_WRITE                                0     0      0      22
                  _i2c_driver_TXData
 ---------------------------------------------------------------------------------
 (7) _do_I2C_SEND_ADR_READ                                 0     0      0      22
                  _i2c_driver_TXData
 ---------------------------------------------------------------------------------
 (8) _i2c_driver_TXData                                    1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_RX                                            1     1      0   19494
                                              0 BANK0      1     1      0
                   Absolute function *
             _do_I2C_DO_NACK_RESTART
                _do_I2C_DO_NACK_STOP
               _i2c_driver_getRXData
                 _i2c_driver_sendACK
                   _i2c_restartWrite *
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
                        _returnReset *
                         _returnStop *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (8) _i2c_driver_getRXData                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _do_I2C_DO_NACK_STOP                                  0     0      0       0
                _i2c_driver_sendNACK
 ---------------------------------------------------------------------------------
 (8) _do_I2C_DO_NACK_RESTART                               0     0      0       0
                _i2c_driver_sendNACK
 ---------------------------------------------------------------------------------
 (9) _i2c_driver_sendNACK                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_RESET                                         0     0      0       0
                _i2c_driver_resetBus
 ---------------------------------------------------------------------------------
 (8) _i2c_driver_resetBus                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_RCEN                                          0     0      0       0
                 _i2c_driver_startRX
 ---------------------------------------------------------------------------------
 (8) _i2c_driver_startRX                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_IDLE                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_DO_ADDRESS_NACK                               1     1      0   19494
                                              0 BANK0      1     1      0
                   Absolute function *
                _do_I2C_SEND_RESTART
                   _do_I2C_SEND_STOP
                   _i2c_restartWrite *
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
                        _returnReset *
                         _returnStop *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (8) _wr2RegCompleteHandler                                1     0      1    3852
                                              9 BANK0      1     0      1
                      _i2c_setBuffer
        _i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (8) _wr1RegCompleteHandler                                1     0      1    3852
                                              9 BANK0      1     0      1
                      _i2c_setBuffer
        _i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (8) _returnStop                                           1     0      1      76
                                              9 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (8) _returnReset                                          1     0      1       0
                                              9 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (8) _rdBlkRegCompleteHandler                              1     0      1    4010
                                              9 BANK0      1     0      1
                      _i2c_setBuffer
        _i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (8) _rd2RegCompleteHandler                                1     0      1    3852
                                              9 BANK0      1     0      1
                      _i2c_setBuffer
        _i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (8) _rd1RegCompleteHandler                                1     0      1    3852
                                              9 BANK0      1     0      1
                      _i2c_setBuffer
        _i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (9) _i2c_setDataCompleteCallback                          4     1      3    2478
                                              5 BANK0      4     1      3
                        _setCallBack
 ---------------------------------------------------------------------------------
 (4) _setCallBack                                          5     2      3     914
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (3) _i2c_setBuffer                                        4     2      2    1352
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (8) _i2c_restartWrite                                     1     0      1       0
                                              9 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (8) _do_I2C_SEND_STOP                                     0     0      0       0
                    _i2c_driver_stop
 ---------------------------------------------------------------------------------
 (9) _i2c_driver_stop                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _do_I2C_SEND_RESTART                                  0     0      0       0
                 _i2c_driver_restart
 ---------------------------------------------------------------------------------
 (9) _i2c_driver_restart                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              1     0      1       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_DO_ACK                                        0     0      0       0
                 _i2c_driver_sendACK
 ---------------------------------------------------------------------------------
 (8) _i2c_driver_sendACK                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2c_driver_start                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2c_close                                            2     2      0      24
                                              0 BANK0      2     2      0
                      _mssp_clearIRQ
                    _mssp_disableIRQ
 ---------------------------------------------------------------------------------
 (4) _mssp_disableIRQ                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _mssp_clearIRQ                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     604
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _drawPixel                                            9     7      2     548
                                              0 BANK0      9     7      2
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _INTERRUPT_InterruptManager                          1     1      0   14790
                                              5 COMMON     1     1      0
                   Absolute function *
                _i2c_busCollisionISR *
                          i1_i2c_ISR *
 ---------------------------------------------------------------------------------
 (12) i1_i2c_ISR                                           1     1      0   14790
                                              4 COMMON     1     1      0
                    i1_do_I2C_DO_ACK *
           i1_do_I2C_DO_ADDRESS_NACK *
           i1_do_I2C_DO_NACK_RESTART *
              i1_do_I2C_DO_NACK_STOP *
                      i1_do_I2C_IDLE *
                      i1_do_I2C_RCEN *
                     i1_do_I2C_RESET *
                        i1_do_I2C_RX *
             i1_do_I2C_SEND_ADR_READ *
            i1_do_I2C_SEND_ADR_WRITE *
              i1_do_I2C_SEND_RESTART *
         i1_do_I2C_SEND_RESTART_READ *
        i1_do_I2C_SEND_RESTART_WRITE *
                 i1_do_I2C_SEND_STOP *
                        i1_do_I2C_TX *
                  i1_do_I2C_TX_EMPTY *
                i1_i2c_driver_isNACK
                    i1_mssp_clearIRQ
 ---------------------------------------------------------------------------------
 (13) i1_mssp_clearIRQ                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_TX_EMPTY                                   1     1      0    3656
                                              0 COMMON     1     1      0
                   Absolute function *
              i1_do_I2C_SEND_RESTART
                 i1_do_I2C_SEND_STOP
                 i1_i2c_restartWrite *
                      i1_mssp_setIRQ
            i1_rd1RegCompleteHandler *
            i1_rd2RegCompleteHandler *
          i1_rdBlkRegCompleteHandler *
                      i1_returnReset *
                       i1_returnStop *
            i1_wr1RegCompleteHandler *
            i1_wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (14) i1_mssp_setIRQ                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_TX                                         3     3      0    3778
                                              1 COMMON     3     3      0
                   Absolute function *
         i1_do_I2C_SEND_RESTART_READ
        i1_do_I2C_SEND_RESTART_WRITE
                 i1_do_I2C_SEND_STOP
                i1_i2c_driver_TXData
                i1_i2c_driver_isNACK
                 i1_i2c_restartWrite *
            i1_rd1RegCompleteHandler *
            i1_rd2RegCompleteHandler *
          i1_rdBlkRegCompleteHandler *
                      i1_returnReset *
                       i1_returnStop *
            i1_wr1RegCompleteHandler *
            i1_wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (13) i1_i2c_driver_isNACK                                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (14) i1_do_I2C_SEND_RESTART_WRITE                         0     0      0       0
               i1_i2c_driver_restart
 ---------------------------------------------------------------------------------
 (14) i1_do_I2C_SEND_RESTART_READ                          0     0      0       0
               i1_i2c_driver_restart
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_SEND_ADR_WRITE                             0     0      0      22
                i1_i2c_driver_TXData
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_SEND_ADR_READ                              0     0      0      22
                i1_i2c_driver_TXData
 ---------------------------------------------------------------------------------
 (14) i1_i2c_driver_TXData                                 1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_RX                                         1     1      0    3656
                                              0 COMMON     1     1      0
                   Absolute function *
           i1_do_I2C_DO_NACK_RESTART
              i1_do_I2C_DO_NACK_STOP
             i1_i2c_driver_getRXData
               i1_i2c_driver_sendACK
                 i1_i2c_restartWrite *
            i1_rd1RegCompleteHandler *
            i1_rd2RegCompleteHandler *
          i1_rdBlkRegCompleteHandler *
                      i1_returnReset *
                       i1_returnStop *
            i1_wr1RegCompleteHandler *
            i1_wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (14) i1_i2c_driver_getRXData                              0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i1_do_I2C_DO_NACK_STOP                               0     0      0       0
              i1_i2c_driver_sendNACK
 ---------------------------------------------------------------------------------
 (14) i1_do_I2C_DO_NACK_RESTART                            0     0      0       0
              i1_i2c_driver_sendNACK
 ---------------------------------------------------------------------------------
 (15) i1_i2c_driver_sendNACK                               0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_RESET                                      0     0      0       0
              i1_i2c_driver_resetBus
 ---------------------------------------------------------------------------------
 (14) i1_i2c_driver_resetBus                               0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_RCEN                                       0     0      0       0
               i1_i2c_driver_startRX
 ---------------------------------------------------------------------------------
 (14) i1_i2c_driver_startRX                                0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_IDLE                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_DO_ADDRESS_NACK                            1     1      0    3656
                                              0 COMMON     1     1      0
                   Absolute function *
              i1_do_I2C_SEND_RESTART
                 i1_do_I2C_SEND_STOP
                 i1_i2c_restartWrite *
            i1_rd1RegCompleteHandler *
            i1_rd2RegCompleteHandler *
          i1_rdBlkRegCompleteHandler *
                      i1_returnReset *
                       i1_returnStop *
            i1_wr1RegCompleteHandler *
            i1_wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (14) i1_wr2RegCompleteHandler                             1     0      1     706
                                              9 COMMON     1     0      1
                    i1_i2c_setBuffer
      i1_i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (14) i1_wr1RegCompleteHandler                             1     0      1     706
                                              9 COMMON     1     0      1
                    i1_i2c_setBuffer
      i1_i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (14) i1_returnStop                                        1     0      1      76
                                              9 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (14) i1_returnReset                                       1     0      1       0
                                              9 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (14) i1_rdBlkRegCompleteHandler                           1     0      1     756
                                              9 COMMON     1     0      1
                    i1_i2c_setBuffer
      i1_i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (14) i1_rd2RegCompleteHandler                             1     0      1     706
                                              9 COMMON     1     0      1
                    i1_i2c_setBuffer
      i1_i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (14) i1_rd1RegCompleteHandler                             1     0      1     706
                                              9 COMMON     1     0      1
                    i1_i2c_setBuffer
      i1_i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (15) i1_i2c_setDataCompleteCallback                       4     1      3     510
                                              5 COMMON     4     1      3
                      i1_setCallBack
 ---------------------------------------------------------------------------------
 (16) i1_setCallBack                                       5     2      3     206
                                              0 COMMON     5     2      3
 ---------------------------------------------------------------------------------
 (15) i1_i2c_setBuffer                                     4     2      2     174
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (14) i1_i2c_restartWrite                                  1     0      1       0
                                              9 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (14) i1_do_I2C_SEND_STOP                                  0     0      0       0
                  i1_i2c_driver_stop
 ---------------------------------------------------------------------------------
 (15) i1_i2c_driver_stop                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i1_do_I2C_SEND_RESTART                               0     0      0       0
               i1_i2c_driver_restart
 ---------------------------------------------------------------------------------
 (15) i1_i2c_driver_restart                                0     0      0       0
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              1     0      1       0
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_DO_ACK                                     0     0      0       0
               i1_i2c_driver_sendACK
 ---------------------------------------------------------------------------------
 (14) i1_i2c_driver_sendACK                                0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _i2c_busCollisionISR                                 0     0      0       0
       _i2c_driver_clearBusCollision
 ---------------------------------------------------------------------------------
 (13) _i2c_driver_clearBusCollision                        0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 16
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SYSTEM_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
   _drawPixel
   _i2c_writeNBytes
     _i2c_close
       _mssp_clearIRQ
       _mssp_disableIRQ
     _i2c_masterWrite
       _i2c_masterOperation
         _i2c_driver_start
         _i2c_poller
           _i2c_ISR
             _do_I2C_DO_ACK *
               _i2c_driver_sendACK
             _do_I2C_DO_ADDRESS_NACK *
               Absolute function(Fake) *
               _do_I2C_SEND_RESTART *
                 _i2c_driver_restart
               _do_I2C_SEND_STOP *
                 _i2c_driver_stop
               _i2c_restartWrite *
               _rd1RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _rd2RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _rdBlkRegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _returnReset *
               _returnStop *
               _wr1RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _wr2RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
             _do_I2C_DO_NACK_RESTART *
               _i2c_driver_sendNACK
             _do_I2C_DO_NACK_STOP *
               _i2c_driver_sendNACK
             _do_I2C_IDLE *
             _do_I2C_RCEN *
               _i2c_driver_startRX
             _do_I2C_RESET *
               _i2c_driver_resetBus
             _do_I2C_RX *
               Absolute function(Fake) *
               _do_I2C_DO_NACK_RESTART *
                 _i2c_driver_sendNACK
               _do_I2C_DO_NACK_STOP *
                 _i2c_driver_sendNACK
               _i2c_driver_getRXData *
               _i2c_driver_sendACK *
               _i2c_restartWrite *
               _rd1RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _rd2RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _rdBlkRegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _returnReset *
               _returnStop *
               _wr1RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _wr2RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
             _do_I2C_SEND_ADR_READ *
               _i2c_driver_TXData
             _do_I2C_SEND_ADR_WRITE *
               _i2c_driver_TXData
             _do_I2C_SEND_RESTART *
               _i2c_driver_restart
             _do_I2C_SEND_RESTART_READ *
               _i2c_driver_restart
             _do_I2C_SEND_RESTART_WRITE *
               _i2c_driver_restart
             _do_I2C_SEND_STOP *
               _i2c_driver_stop
             _do_I2C_TX *
               Absolute function(Fake) *
               _do_I2C_SEND_RESTART_READ *
                 _i2c_driver_restart
               _do_I2C_SEND_RESTART_WRITE *
                 _i2c_driver_restart
               _do_I2C_SEND_STOP *
                 _i2c_driver_stop
               _i2c_driver_TXData *
               _i2c_driver_isNACK *
               _i2c_restartWrite *
               _rd1RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _rd2RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _rdBlkRegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _returnReset *
               _returnStop *
               _wr1RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _wr2RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
             _do_I2C_TX_EMPTY *
               Absolute function(Fake) *
               _do_I2C_SEND_RESTART *
                 _i2c_driver_restart
               _do_I2C_SEND_STOP *
                 _i2c_driver_stop
               _i2c_restartWrite *
               _mssp_setIRQ *
               _rd1RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _rd2RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _rdBlkRegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _returnReset *
               _returnStop *
               _wr1RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _wr2RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
             _i2c_driver_isNACK *
             _mssp_clearIRQ *
           _mssp_waitForEvent
         _mssp_IRQisEnabled
     _i2c_open
       _i2c_driver_open
       _i2c_driver_setBusCollisionISR
       _i2c_driver_setI2cISR
       _mssp_clearIRQ
     _i2c_setAddressNACKCallback
       _setCallBack
     _i2c_setBuffer
   _writeDisplay
     ___awdiv
     _i2c_writeNBytes
       _i2c_close
         _mssp_clearIRQ
         _mssp_disableIRQ
       _i2c_masterWrite
         _i2c_masterOperation
           _i2c_driver_start
           _i2c_poller
             _i2c_ISR
               _do_I2C_DO_ACK *
                 _i2c_driver_sendACK
               _do_I2C_DO_ADDRESS_NACK *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_DO_NACK_RESTART *
                 _i2c_driver_sendNACK
               _do_I2C_DO_NACK_STOP *
                 _i2c_driver_sendNACK
               _do_I2C_IDLE *
               _do_I2C_RCEN *
                 _i2c_driver_startRX
               _do_I2C_RESET *
                 _i2c_driver_resetBus
               _do_I2C_RX *
                 Absolute function(Fake) *
                 _do_I2C_DO_NACK_RESTART *
                   _i2c_driver_sendNACK
                 _do_I2C_DO_NACK_STOP *
                   _i2c_driver_sendNACK
                 _i2c_driver_getRXData *
                 _i2c_driver_sendACK *
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_SEND_ADR_READ *
                 _i2c_driver_TXData
               _do_I2C_SEND_ADR_WRITE *
                 _i2c_driver_TXData
               _do_I2C_SEND_RESTART *
                 _i2c_driver_restart
               _do_I2C_SEND_RESTART_READ *
                 _i2c_driver_restart
               _do_I2C_SEND_RESTART_WRITE *
                 _i2c_driver_restart
               _do_I2C_SEND_STOP *
                 _i2c_driver_stop
               _do_I2C_TX *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART_READ *
                   _i2c_driver_restart
                 _do_I2C_SEND_RESTART_WRITE *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_driver_TXData *
                 _i2c_driver_isNACK *
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_TX_EMPTY *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_restartWrite *
                 _mssp_setIRQ *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _i2c_driver_isNACK *
               _mssp_clearIRQ *
             _mssp_waitForEvent
           _mssp_IRQisEnabled
       _i2c_open
         _i2c_driver_open
         _i2c_driver_setBusCollisionISR
         _i2c_driver_setI2cISR
         _mssp_clearIRQ
       _i2c_setAddressNACKCallback
         _setCallBack
       _i2c_setBuffer

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _i2c_busCollisionISR *
     _i2c_driver_clearBusCollision
   i1_i2c_ISR *
     i1_do_I2C_DO_ACK *
       i1_i2c_driver_sendACK
     i1_do_I2C_DO_ADDRESS_NACK *
       Absolute function(Fake) *
       i1_do_I2C_SEND_RESTART *
         i1_i2c_driver_restart
       i1_do_I2C_SEND_STOP *
         i1_i2c_driver_stop
       i1_i2c_restartWrite *
       i1_rd1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rd2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rdBlkRegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_returnReset *
       i1_returnStop *
       i1_wr1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_wr2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
     i1_do_I2C_DO_NACK_RESTART *
       i1_i2c_driver_sendNACK
     i1_do_I2C_DO_NACK_STOP *
       i1_i2c_driver_sendNACK
     i1_do_I2C_IDLE *
     i1_do_I2C_RCEN *
       i1_i2c_driver_startRX
     i1_do_I2C_RESET *
       i1_i2c_driver_resetBus
     i1_do_I2C_RX *
       Absolute function(Fake) *
       i1_do_I2C_DO_NACK_RESTART *
         i1_i2c_driver_sendNACK
       i1_do_I2C_DO_NACK_STOP *
         i1_i2c_driver_sendNACK
       i1_i2c_driver_getRXData *
       i1_i2c_driver_sendACK *
       i1_i2c_restartWrite *
       i1_rd1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rd2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rdBlkRegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_returnReset *
       i1_returnStop *
       i1_wr1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_wr2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
     i1_do_I2C_SEND_ADR_READ *
       i1_i2c_driver_TXData
     i1_do_I2C_SEND_ADR_WRITE *
       i1_i2c_driver_TXData
     i1_do_I2C_SEND_RESTART *
       i1_i2c_driver_restart
     i1_do_I2C_SEND_RESTART_READ *
       i1_i2c_driver_restart
     i1_do_I2C_SEND_RESTART_WRITE *
       i1_i2c_driver_restart
     i1_do_I2C_SEND_STOP *
       i1_i2c_driver_stop
     i1_do_I2C_TX *
       Absolute function(Fake) *
       i1_do_I2C_SEND_RESTART_READ *
         i1_i2c_driver_restart
       i1_do_I2C_SEND_RESTART_WRITE *
         i1_i2c_driver_restart
       i1_do_I2C_SEND_STOP *
         i1_i2c_driver_stop
       i1_i2c_driver_TXData *
       i1_i2c_driver_isNACK *
       i1_i2c_restartWrite *
       i1_rd1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rd2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rdBlkRegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_returnReset *
       i1_returnStop *
       i1_wr1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_wr2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
     i1_do_I2C_TX_EMPTY *
       Absolute function(Fake) *
       i1_do_I2C_SEND_RESTART *
         i1_i2c_driver_restart
       i1_do_I2C_SEND_STOP *
         i1_i2c_driver_stop
       i1_i2c_restartWrite *
       i1_mssp_setIRQ *
       i1_rd1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rd2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rdBlkRegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_returnReset *
       i1_returnStop *
       i1_wr1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_wr2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
     i1_i2c_driver_isNACK *
     i1_mssp_clearIRQ *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     1B      48       5       90.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      31       7       61.3%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      83      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      83      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Apr 10 16:46:43 2018

            __end_of_i2c_driver_restart 07BD                     i1_i2c_driver_isNACK 0678  
                          returnReset@p 0056              __end_of_i2c_driver_startRX 07B7  
         _do_I2C_SEND_RESTART$intlevel0 0707                             __CFG_CP$OFF 0000  
                                    l55 069E                         i1_mssp_clearIRQ 07C6  
                          ___awdiv@sign 0053                    __size_of_do_I2C_IDLE 0009  
                   _do_I2C_SEND_RESTART 0703                    __size_of_do_I2C_RCEN 000A  
                  __end_ofi1_returnStop 07E4                    ?i1_i2c_driver_TXData 0070  
                           i1_do_I2C_RX 0352                             i1_do_I2C_TX 027E  
                           __CFG_LVP$ON 0000                    i1_i2c_driver_sendACK 07AA  
                                   l361 05E7                                     l354 030E  
                                   l435 025F                                     l451 032E  
              i1_do_I2C_DO_NACK_RESTART 078A                                     u995 01FF  
          __size_of_i2c_masterOperation 001F                    _returnStop$intlevel0 0766  
                  i1_i2c_driver_restart 07D5           i2c_setDataCompleteCallback@cb 0052  
              ?i1_rd2RegCompleteHandler 0079                   __size_of_do_I2C_RESET 000B  
                          __CFG_BORV$LO 0000                                     wreg 0009  
                          __CFG_IESO$ON 0000                    i1_i2c_driver_startRX 07CF  
                 __end_ofi1_returnReset 07E2                    ?i1_i2c_driver_isNACK 0070  
              ?i1_wr2RegCompleteHandler 0079         ??i1_i2c_setDataCompleteCallback 0078  
                i1_i2c_driver_getRXData 07CC                   __end_ofi1_mssp_setIRQ 07CC  
                          __CFG_ZCD$OFF 0000                 ??_rd2RegCompleteHandler 0057  
                                  l2111 06E7                                    l2121 0760  
                                  l2105 06EF                   i1_i2c_driver_sendNACK 07A6  
                                  l2203 06D4                                    l2211 06F7  
                                  l2117 0766                                    l2125 075A  
                                  l2049 0471                                    l2153 05C1  
                                  l2129 05AB                                    l2137 0595  
                                  l2145 057F                                    l2161 054B  
                                  l2081 0717                                    l2093 0707  
                                  l2087 070F                                    l2169 06B5  
                                  l2603 01E9                                    l2179 06DE  
                                  l2099 06FF                                    l2187 0670  
                                  l2195 06AA                                    l2621 0208  
                                  l2631 0223                                    l2609 01F4  
                                  l4401 03F4                                    l2811 00D5  
                                  l2803 007C                                    l2635 022B  
                                  l2627 021A                                    l2619 01FC  
                         i1returnStop@p 0079                                    l4421 0240  
                                  l4413 023A                                    l4501 0690  
                                  l2807 00AB                                    l4407 03F7  
                                  l4417 023D                                    l4409 0234  
                                  l4513 0517                                    l4435 0278  
                                  l4427 0243                                    l4515 051B  
                                  l4453 0330                                    l4471 039A  
                                  l4463 0336                                    l4439 0314  
                                  l4519 0525                                    l4465 0394  
                                  l4393 03EA                                    l4457 0333  
                                  l4721 010D                                    l4467 0397  
                                  l4483 03A1                                    l4477 039E  
                                  l4397 03F1                                    l4493 04B7  
                                  l4485 04A7                                    l4573 0453  
                                  l4565 0436                                    l4751 0158  
                                  l4743 0141                                    l4727 011A  
                                  l4681 01D2                                    l4761 0177  
                                  l4737 0132                                    l4675 018D  
                                  u1015 0209                                    u1025 0213  
                                  u1035 021B                                    u1124 0059  
                                  u1125 0057                                    u1214 00E2  
                                  u1134 006E                                    u1215 00E0  
                                  u1135 006C                                    u1224 00EE  
                                  u1225 00EC                                    u1154 008A  
                                  u1155 0088                                    u1164 009D  
                                  u1165 009B                                    _LATA 010C  
                                  _LATB 010D                                    _LATC 010E  
                                  u1184 00B7                                    u1185 00B5  
                                  u1194 00C3                                    u1195 00C1  
                                  u3267 017E                                    u3277 06A2  
                  ?_do_I2C_SEND_RESTART 0070                                    _WPUA 020C  
                                  _WPUB 020D                                    _WPUC 020E  
               ??_wr2RegCompleteHandler 0057                            __CFG_WRT$OFF 0000  
                         __CFG_FCMEN$ON 0000                   i1_i2c_driver_resetBus 07E5  
     __size_of_do_I2C_SEND_RESTART_READ 0008               ?_do_I2C_SEND_RESTART_READ 0070  
                       ??_mssp_clearIRQ 004D                                    _main 0102  
             __size_of_do_I2C_SEND_STOP 0008                  __size_of_do_I2C_DO_ACK 0008  
                                  fsr0h 0005                                    fsr1h 0007  
                                  indf0 0000                                    fsr0l 0004  
                                  indf1 0001                                    fsr1l 0006  
                                  btemp 007E                       ??i1_do_I2C_DO_ACK 0070  
                         __CFG_BOREN$ON 0000                   ?_do_I2C_SEND_ADR_READ 0070  
              __size_of_i2c_writeNBytes 0026                                    start 0027  
                         _i2c_setBuffer 0629                           __CFG_MCLRE$ON 0000  
                       __end_of_i2c_ISR 04C6        __size_of_rdBlkRegCompleteHandler 001D  
              ??_do_I2C_DO_NACK_RESTART 004D                           i1_do_I2C_IDLE 0774  
                         i1_do_I2C_RCEN 076E                            _do_I2C_RESET 06B1  
                        i1returnReset@p 0079                           __CFG_PLLEN$ON 0000  
        __size_of_OSCILLATOR_Initialize 0007             i2c_setAddressNACKCallback@p 0054  
                 ??i1_i2c_driver_TXData 0070           __end_of_OSCILLATOR_Initialize 072A  
                 ?i1_i2c_driver_sendACK 0070                                   ?_main 0070  
                       __end_of___awdiv 0230                           __CFG_WDTE$OFF 0000  
              __size_of_mssp_disableIRQ 0003                         ___awdiv@divisor 004D  
                                 i1l163 0017                                   i1l168 0022  
                                 i1l435 02A9                                   i1l451 036C  
                       ___awdiv@counter 0052                   ?i1_i2c_driver_restart 0070  
                                 _TRISA 008C                                   _TRISB 008D  
                                 _TRISC 008E                   ?i1_i2c_driver_startRX 0070  
                 ??i1_i2c_driver_isNACK 0070                             i2c_open@ret 0051  
                           _writebuffer 00C0                      __size_ofi1_i2c_ISR 001F  
                  _i2c_driver_getRXData 07B1            ?i1_do_I2C_SEND_RESTART_WRITE 0070  
            ?_do_I2C_SEND_RESTART_WRITE 0070                   ??_do_I2C_SEND_RESTART 004D  
                                 main@i 0064                                   main@x 0066  
                                 main@y 0062                                   pclath 000A  
            _i2c_driver_busCollisionISR 007C                  ?_do_I2C_SEND_ADR_WRITE 0070  
                                 status 0003                                   wtemp0 007E  
                 __size_of_writeDisplay 005A                      i2c_driver_TXData@d 004D  
             __size_of_i2c_driver_start 0003                          ?_i2c_setBuffer 004D  
                          ?_setCallBack 004D                 __end_ofi1_mssp_clearIRQ 07C9  
                         _fsmStateTable 00A0                         __initialization 0029  
        __size_ofi1_do_I2C_SEND_RESTART 0004                              _i2c_poller 0690  
         __end_ofi1_do_I2C_SEND_RESTART 079E                              _i2c_status 0020  
                        ?i1_do_I2C_IDLE 0070                            __end_of_main 0184  
                        ?i1_do_I2C_RCEN 0070              __end_ofi1_do_I2C_SEND_STOP 079A  
                      __end_of_i2c_open 0310                    _i2c_driver_setI2cISR 0744  
                        __CFG_LPBOR$OFF 0000             ?_INTERRUPT_InterruptManager 0070  
       __end_ofi1_rd2RegCompleteHandler 05F9                           setCallBack@cb 004D  
                        i1_do_I2C_RESET 0731                           _do_I2C_DO_ACK 06F3  
                                ??_main 0060                           _do_I2C_TX$763 004F  
                     ?_i2c_restartWrite 0056         __end_ofi1_wr2RegCompleteHandler 0629  
                          i2c_close@ret 004E                         _i2c_driver_open 06BC  
                    ??_i2c_restartWrite 0057                         _i2c_driver_stop 07B7  
               ?_do_I2C_DO_ADDRESS_NACK 0070                  ?i1_i2c_driver_sendNACK 0070  
                          _writeDisplay 0184                   ?_i2c_driver_getRXData 0070  
                      ___awdiv@dividend 004F         i1i2c_setDataCompleteCallback@cb 0075  
                                _ANSELA 018C                                  _ANSELB 018D  
                                _ANSELC 018E                                  _BORCON 0116  
               ?i1_do_I2C_SEND_ADR_READ 0070                  ?i1_i2c_driver_resetBus 0070  
                                _RB4PPS 0E9C                                  _RB6PPS 0E9E  
                                _ODCONA 028C                                  _ODCONB 028D  
                                _ODCONC 028E                                  i1l2343 0495  
                                i1l2503 07E2                                  i1l2511 07DE  
                                i1l2507 07E0                                  i1l2515 0609  
                                i1l2523 05F9                                  i1l2531 05E9  
                                i1l2641 0731                                  i1l2473 079E  
                                i1l2539 0619                                  i1l2547 0564  
                                i1l2651 0774                                  i1l2467 07A2  
                                i1l2491 078E                                  i1l2485 0796  
                                i1l2479 079A                                  i1l2497 078A  
                                i1l2659 071B                                  i1l2667 072A  
                                i1l2675 076E                                  i1l2683 0792  
                                i1l4603 028A                                  i1l4621 0352  
                                i1l4617 02C2                                  i1l4609 028D  
                                i1l4635 036E                                  i1l4653 03C3  
                                i1l4645 0374                                  i1l4647 03BD  
                                i1l4583 04D0                                  i1l4575 04C6  
                                i1l4591 027E                                  i1l4639 0371  
                                i1l4649 03C0                                  i1l4665 03CA  
                                i1l4659 03C7                                  i1l4579 04CD  
                                i1l4595 0284                                  i1l4589 04D3  
                                i1l4599 0287                                  i1l4695 0538  
                                i1l4687 0528           ??i1_do_I2C_SEND_RESTART_WRITE 0070  
                    __size_of_i2c_close 0016                                  _OSCCON 0099  
               i1_rd1RegCompleteHandler 05F9                  ??_do_I2C_SEND_ADR_READ 004E  
              rdBlkRegCompleteHandler@p 0056                               ??_i2c_ISR 0051  
               i1_wr1RegCompleteHandler 0609             ??i1_rdBlkRegCompleteHandler 007A  
                        __CFG_PWRTE$OFF 0000                     _do_I2C_RX$intlevel0 0314  
                 __size_ofi1_returnStop 0002             __end_of_do_I2C_DO_NACK_STOP 06F3  
                     __end_ofi1_i2c_ISR 0547     __end_of_i2c_setDataCompleteCallback 066C  
           _i2c_setDataCompleteCallback 065F                         _i2c_masterWrite 077E  
                             ??___awdiv 0051                          __CFG_STVREN$ON 0000  
       __size_of_do_I2C_DO_NACK_RESTART 0008                   ?_i2c_driver_setI2cISR 004D  
                     ??_i2c_writeNBytes 0059                  __end_ofi1_do_I2C_RESET 0738  
                       i1_i2c_setBuffer 0637                  ??i1_i2c_driver_sendACK 0070  
                      ___awdiv@quotient 0054                          ?_do_I2C_DO_ACK 0070  
           __size_ofi1_i2c_restartWrite 0002                  ??i1_i2c_driver_restart 0070  
                ??i1_i2c_driver_startRX 0070          __end_of_do_I2C_DO_ADDRESS_NACK 040D  
           ?_i2c_setAddressNACKCallback 0052                            ?_returnReset 0056  
         _do_I2C_DO_NACK_STOP$intlevel0 06EF              i1rdBlkRegCompleteHandler@p 0079  
     __size_ofi1_do_I2C_DO_ADDRESS_NACK 0023                            ?_mssp_setIRQ 0070  
        __end_ofi1_do_I2C_SEND_ADR_READ 0723                       ??_mssp_disableIRQ 004D  
             ?i1_do_I2C_DO_ADDRESS_NACK 0070                       i1_do_I2C_TX_EMPTY 03BD  
                     _SYSTEM_Initialize 0768                 __end_of__initialization 0048  
                       ??_i2c_setBuffer 004F          _do_I2C_SEND_ADR_READ$intlevel0 0670  
                      _do_I2C_SEND_STOP 06FB                            i1_returnStop 07E2  
                 i1_do_I2C_DO_NACK_STOP 078E                      __size_of_do_I2C_RX 0042  
                    __size_of_do_I2C_TX 004E                      ?i1_do_I2C_TX_EMPTY 0070  
                    ?_SYSTEM_Initialize 0070       _rdBlkRegCompleteHandler$intlevel0 054B  
                   _i2c_masterOperation 0509                __size_of_do_I2C_TX_EMPTY 002D  
                      ?i1_mssp_clearIRQ 0070                         ??i1_do_I2C_IDLE 0070  
                       ??i1_do_I2C_RCEN 0070                 _rdBlkRegCompleteHandler 0547  
                           ?_i2c_poller 0070                          __pcstackCOMMON 0070  
            ??i1_do_I2C_DO_NACK_RESTART 0070                     _do_I2C_TX$intlevel0 0234  
                   ??i1_do_I2C_TX_EMPTY 0070                            __pidataBANK1 04E9  
                   ??_SYSTEM_Initialize 004D                         ?i1_do_I2C_RESET 0070  
               __end_of_i2c_driver_open 06C6                 __end_of_i2c_driver_stop 07BA  
                     __end_of_i2c_close 05E9                            ?i1_do_I2C_RX 0070  
                          ?i1_do_I2C_TX 0070                          drawPixel@color 004E  
                   i1i2c_restartWrite@p 0079                      _i2c_driver_sendACK 0786  
             i1_rdBlkRegCompleteHandler 0564                    ?_i2c_masterOperation 0070  
        i1i2c_setDataCompleteCallback@p 0077                 ?i1_i2c_driver_getRXData 0070  
                        _OPTION_REGbits 0095            ??i1_do_I2C_SEND_RESTART_READ 0070  
                    _i2c_driver_restart 07BA                  __size_ofi1_setCallBack 0024  
                    _i2c_driver_startRX 07B4                  ??_i2c_driver_getRXData 004D  
                       i1setCallBack@cb 0070                i1rd1RegCompleteHandler@p 0079  
                       i1_do_I2C_DO_ACK 0792                         i1_do_I2C_TX$763 0072  
                    __size_of_drawPixel 00B6                     ?_i2c_driver_sendACK 0070  
                        setCallBack@idx 0051               __end_ofi1_do_I2C_TX_EMPTY 03E6  
                _do_I2C_DO_NACK_RESTART 06E3               __end_of_SYSTEM_Initialize 076E  
             ??i1_rd1RegCompleteHandler 007A                     ?_i2c_driver_restart 0070  
                            __pbssBANK0 0020                              __pbssBANK1 00C0  
             ??i1_wr1RegCompleteHandler 007A                     ?_i2c_driver_startRX 0070  
        __size_of_rd2RegCompleteHandler 0016                               ?_i2c_open 0070  
         __end_of_rd2RegCompleteHandler 0591          __size_of_wr2RegCompleteHandler 0016  
      __size_ofi1_rd2RegCompleteHandler 0010           __end_of_wr2RegCompleteHandler 05D3  
               __end_of_i2c_masterWrite 0782                i1wr1RegCompleteHandler@p 0079  
                      _i2c_driver_start 07BD                   _rd1RegCompleteHandler 0591  
               __end_ofi1_i2c_setBuffer 0645        __size_ofi1_wr2RegCompleteHandler 0010  
                 _do_I2C_IDLE$intlevel0 06DE                   _wr1RegCompleteHandler 05A7  
          __size_of_i2c_busCollisionISR 0003         _wr1RegCompleteHandler$intlevel0 05AB  
       _rd1RegCompleteHandler$intlevel0 0595                              __pmaintext 0102  
                         ??_do_I2C_IDLE 004D                    __size_of_setCallBack 0025  
                         ??_do_I2C_RCEN 004D                    ??_i2c_driver_sendACK 004D  
                ??_i2c_driver_setI2cISR 004F                         __CFG_PPS1WAY$ON 0000  
                       ??_do_I2C_DO_ACK 004D                              __pintentry 0004  
                  ??_i2c_driver_restart 004D            __size_of_i2c_driver_sendNACK 0004  
                  ??_i2c_driver_startRX 004D                     i2c_setBuffer@buffer 0050  
          __size_of_i2c_driver_resetBus 0001          __end_ofi1_i2c_driver_getRXData 07CF  
        ?_i2c_driver_setBusCollisionISR 004D                   ??_i2c_masterOperation 0052  
                     __end_of_do_I2C_RX 0352                       __end_of_do_I2C_TX 027E  
              ?i1_do_I2C_SEND_ADR_WRITE 0070                         __CFG_WDTCCS$SWC 0000  
                               _OSCTUNE 0098                                 _SSP1ADD 0212  
                               _SSP1BUF 0211                                 _SSP1MSK 0213  
                   __size_of_i2c_poller 000B                 ??_do_I2C_SEND_ADR_WRITE 004E  
   _do_I2C_SEND_RESTART_WRITE$intlevel0 070F             ??_do_I2C_SEND_RESTART_WRITE 004D  
                ?i1_do_I2C_DO_NACK_STOP 0070                       _mssp_IRQisEnabled 06C6  
                            ??_i2c_open 004F                                 _i2c_ISR 04A3  
             ??_rdBlkRegCompleteHandler 0057                       _mssp_waitForEvent 069B  
                    ?_mssp_IRQisEnabled 0070                   __end_of_mssp_clearIRQ 07C6  
                 _returnReset$intlevel0 0760                   _do_I2C_RCEN$intlevel0 06D4  
                         i1_setCallBack 047F                      ?_mssp_waitForEvent 0070  
      _do_I2C_DO_ADDRESS_NACK$intlevel0 03EA             __end_ofi1_i2c_driver_TXData 077E  
                     __end_of_drawPixel 0102     __size_of_i2c_setAddressNACKCallback 000D  
                __size_ofi1_returnReset 0002                     ??_mssp_IRQisEnabled 004D  
                               ___awdiv 01DE                  __size_ofi1_mssp_setIRQ 0003  
                     ??_do_I2C_TX_EMPTY 004D                        ?_i2c_driver_open 0070  
                   ??_mssp_waitForEvent 004D                        ?_i2c_driver_stop 0070  
                i2c_writeNBytes@address 0059             __end_ofi1_i2c_driver_isNACK 0684  
               __end_ofi1_do_I2C_DO_ACK 0796                                 __ptext1 0184  
                               __ptext2 0434                                 __ptext3 0645  
                               __ptext4 02C8                                 __ptext5 0744  
                               __ptext6 074A                                 __ptext7 06BC  
                               __ptext8 077E                                 __ptext9 0509  
                   __end_of_do_I2C_IDLE 06E3                     __end_of_do_I2C_RCEN 06DA  
                 _OSCILLATOR_Initialize 0723                 ??i1_i2c_driver_sendNACK 0070  
           __end_of_do_I2C_SEND_RESTART 070B                ??_PIN_MANAGER_Initialize 004D  
                i2c_masterOperation@ret 0054                 ??i1_i2c_driver_resetBus 0070  
                    i1_do_I2C_SEND_STOP 0796              _do_I2C_SEND_STOP$intlevel0 06FF  
            __size_ofi1_do_I2C_TX_EMPTY 0029                _do_I2C_SEND_RESTART_READ 0713  
            __size_of_SYSTEM_Initialize 0006                                 clrloop0 073F  
             __end_of_mssp_IRQisEnabled 06D0                    __size_of_returnReset 0006  
                  end_of_initialization 0048                    __size_of_mssp_setIRQ 0003  
             __end_of_mssp_waitForEvent 06A6               __size_of_i2c_restartWrite 0006  
                               init_ram 0738                     ?i1_do_I2C_SEND_STOP 0070  
                ?_rd1RegCompleteHandler 0056                                 initloop 0739  
                       _i2c_writeNBytes 0434                        ?_i2c_masterWrite 0070  
                ?_wr1RegCompleteHandler 0056                          ?i1_setCallBack 0070  
                      ?i1_i2c_setBuffer 0070               _do_I2C_SEND_RESTART_WRITE 070B  
                 i1_do_I2C_SEND_RESTART 079A        __end_ofi1_do_I2C_DO_ADDRESS_NACK 04E9  
       __end_ofi1_do_I2C_SEND_ADR_WRITE 0731                         _mssp_disableIRQ 07C0  
                             i1_i2c_ISR 0528                    ??i1_do_I2C_SEND_STOP 0070  
                            _returnStop 0762         __end_of_rdBlkRegCompleteHandler 0564  
              __end_of_do_I2C_SEND_STOP 0703      __end_ofi1_do_I2C_SEND_RESTART_READ 07A6  
            i1_do_I2C_SEND_RESTART_READ 07A2                               _SSPDATPPS 0E21  
                             _SSPCLKPPS 0E20                        __CFG_FOSC$INTOSC 0000  
                  __size_ofi1_do_I2C_RX 003E                    __size_ofi1_do_I2C_TX 004A  
  __size_of_i2c_setDataCompleteCallback 000D                           i1_returnReset 07E0  
                           returnStop@p 0056                           i1_mssp_setIRQ 07C9  
    __size_ofi1_rdBlkRegCompleteHandler 0017            i2c_setDataCompleteCallback@p 0054  
               i1_rd2RegCompleteHandler 05E9                              drawPixel@x 0055  
                            drawPixel@y 004D                 i1_wr2RegCompleteHandler 0619  
         __size_of_do_I2C_SEND_ADR_READ 000C                        ??i1_do_I2C_RESET 0070  
                          ??_i2c_poller 0052                             _do_I2C_IDLE 06DA  
                           _do_I2C_RCEN 06D0              __end_ofi1_i2c_restartWrite 07E0  
  __end_of_i2c_driver_clearBusCollision 07DE   __size_of_i2c_driver_clearBusCollision 0003  
          _i2c_driver_clearBusCollision 07DB                              ?i1_i2c_ISR 0070  
                      ?i1_do_I2C_DO_ACK 0070                  ?_OSCILLATOR_Initialize 0070  
         __size_ofi1_i2c_driver_sendACK 0004            __size_of_do_I2C_DO_NACK_STOP 0008  
              __end_of_i2c_driver_start 07C0           __size_ofi1_i2c_driver_restart 0003  
               ?_do_I2C_DO_NACK_RESTART 0070                     start_initialization 0029  
                             _i2c_close 05D3           __size_ofi1_i2c_driver_startRX 0003  
                   _i2c_busCollisionISR 07D8         __size_of_PIN_MANAGER_Initialize 0027  
                        ?i1_returnReset 0079                 __end_of_i2c_writeNBytes 045A  
   __end_ofi1_do_I2C_SEND_RESTART_WRITE 07A2             i1_do_I2C_SEND_RESTART_WRITE 079E  
                        ?i1_mssp_setIRQ 0070              __size_of_mssp_IRQisEnabled 000A  
                          setCallBack@p 004F                      __end_of_i2c_poller 069B  
                   _i2c_driver_sendNACK 0782                         i2c_open@address 0050  
               i2c_setBuffer@bufferSize 004D              __size_of_mssp_waitForEvent 000B  
                rd1RegCompleteHandler@p 0056                     _i2c_driver_resetBus 07E4  
                       ??i1_setCallBack 0073                   __end_of_i2c_setBuffer 0637  
                     __size_of_i2c_open 0048   __end_ofi1_i2c_setDataCompleteCallback 0690  
__size_ofi1_i2c_setDataCompleteCallback 000C           i1_i2c_setDataCompleteCallback 0684  
                  ?_i2c_busCollisionISR 0070                 __end_of_mssp_disableIRQ 07C3  
                      i1setCallBack@idx 0074                   __end_ofi1_do_I2C_IDLE 0779  
                 __end_ofi1_do_I2C_RCEN 0774               i1i2c_setBuffer@bufferSize 0070  
                ?i1_do_I2C_SEND_RESTART 0070                  wr1RegCompleteHandler@p 0056  
                  ?_i2c_driver_sendNACK 0070                           ?_do_I2C_RESET 0070  
                           __pdataBANK1 00A0               _do_I2C_TX_EMPTY$intlevel0 0394  
              __size_ofi1_mssp_clearIRQ 0003                             ?_returnStop 0056  
                  ?_i2c_driver_resetBus 0070                       _i2c_driver_TXData 0750  
        __end_of_do_I2C_DO_NACK_RESTART 06EB           ?_i2c_driver_clearBusCollision 0070  
                     _i2c_driver_i2cISR 007A                i1_do_I2C_DO_ADDRESS_NACK 04C6  
                    ?_i2c_driver_TXData 0070                             __pbssCOMMON 007A  
                            ?_i2c_close 0070                               ___latbits 0002  
                         __pcstackBANK0 004D       __size_ofi1_do_I2C_DO_NACK_RESTART 0004  
              i1rd2RegCompleteHandler@p 0079                               _do_I2C_RX 0310  
             ?i1_do_I2C_DO_NACK_RESTART 0070                               _do_I2C_TX 0230  
                     _i2c_driver_isNACK 0652                 ??i1_do_I2C_DO_NACK_STOP 0070  
             ??i1_rd2RegCompleteHandler 007A           __size_of_i2c_driver_getRXData 0003  
                    ?_i2c_driver_isNACK 0070                     ??_i2c_driver_TXData 004D  
        __size_of_do_I2C_SEND_ADR_WRITE 000B               ??i1_wr2RegCompleteHandler 007A  
         __end_of_do_I2C_SEND_ADR_WRITE 06B1         ??_i2c_driver_setBusCollisionISR 004F  
                        i1setCallBack@p 0072                        _i2c_restartWrite 0756  
            _i2c_restartWrite$intlevel0 075A                                ?_i2c_ISR 0070  
       _do_I2C_SEND_ADR_WRITE$intlevel0 06AA        __size_ofi1_do_I2C_SEND_ADR_WRITE 0007  
                       _do_I2C_TX_EMPTY 0390                           ??_setCallBack 0050  
              i1wr2RegCompleteHandler@p 0079                   _rd2RegCompleteHandler 057B  
                   ??_i2c_driver_isNACK 004D                   ??_i2c_busCollisionISR 0070  
                _PIN_MANAGER_Initialize 040D                   _wr2RegCompleteHandler 05BD  
           __size_of_i2c_driver_sendACK 0004                          ??_do_I2C_RESET 004D  
                              ?___awdiv 004D                               __ptext100 07D8  
                             __ptext101 07DB                   ??_i2c_driver_sendNACK 004D  
           __end_of_i2c_masterOperation 0528                ??_do_I2C_DO_ADDRESS_NACK 004D  
         __size_of_i2c_driver_setI2cISR 0006             __size_of_i2c_driver_restart 0003  
             __end_of_i2c_driver_TXData 0756                   __end_of_do_I2C_DO_ACK 06FB  
                 ??_i2c_driver_resetBus 004D             __size_of_i2c_driver_startRX 0003  
                           ??i1_i2c_ISR 0074            ??_INTERRUPT_InterruptManager 0075  
                             _drawPixel 004C              ??_do_I2C_SEND_RESTART_READ 004D  
              ??i1_do_I2C_SEND_ADR_READ 0071                         ??i1_returnReset 007A  
             __end_of_i2c_driver_isNACK 065F                ?i1_rd1RegCompleteHandler 0079  
    __size_of_do_I2C_SEND_RESTART_WRITE 0008                         ??i1_mssp_setIRQ 0070  
        __size_ofi1_i2c_driver_sendNACK 0004           __end_ofi1_i2c_driver_sendNACK 07AA  
              ?i1_wr1RegCompleteHandler 0079                              ?_do_I2C_RX 0070  
                            ?_do_I2C_TX 0070                           ?_writeDisplay 0070  
                      ?_i2c_writeNBytes 0056          __size_ofi1_i2c_driver_resetBus 0001  
         __end_ofi1_i2c_driver_resetBus 07E6                 ??_rd1RegCompleteHandler 0057  
                     _i2c_ISR$intlevel0 04A7                 ??_wr1RegCompleteHandler 0057  
                 i2c_driver_setI2cISR@f 004D                     __size_of_returnStop 0006  
                             clear_ram0 073E                                _PIE1bits 0090  
                              _PIE2bits 0091     __size_of_INTERRUPT_InterruptManager 0023  
                              _PIR1bits 0010                                _PIR2bits 0011  
                      ?_mssp_disableIRQ 0070                    __CFG_WDTCPS$WDTCPS1F 0000  
                              _SSP1CON1 0215                                _SSP1CON2 0216  
          ?_i2c_setDataCompleteCallback 0052          ?i1_i2c_setDataCompleteCallback 0075  
                              _SSP1STAT 0214                     __end_of_setCallBack 047F  
                            ?_drawPixel 004D                               main@i_466 0065  
          __size_ofi1_i2c_driver_TXData 0005                       i1_i2c_driver_stop 07D2  
          i2c_setAddressNACKCallback@cb 0052                       ?_do_I2C_SEND_STOP 0070  
           ?i1_do_I2C_SEND_RESTART_READ 0070                      ?i1_i2c_driver_stop 0070  
                           ??_i2c_close 004D                           ??_returnReset 0057  
                    ??_do_I2C_SEND_STOP 004D                  __size_of_mssp_clearIRQ 0003  
                        ??_writeDisplay 005A                __size_of_i2c_driver_open 000A  
                     ??i1_mssp_clearIRQ 0070            ??_i2c_setAddressNACKCallback 0055  
              __size_of_i2c_driver_stop 0003       __end_of_do_I2C_SEND_RESTART_WRITE 0713  
          __size_ofi1_i2c_driver_isNACK 000C                           ??_mssp_setIRQ 004D  
        ??_i2c_driver_clearBusCollision 0070                 __end_of_do_I2C_TX_EMPTY 03BD  
              ?_rdBlkRegCompleteHandler 0056                     ??i1_i2c_driver_stop 0070  
          __size_of_do_I2C_SEND_RESTART 0008                 _do_I2C_DO_ACK$intlevel0 06F7  
                              _i2c_open 02C8                           ?i1_returnStop 0079  
                ?_rd2RegCompleteHandler 0056                     _do_I2C_DO_NACK_STOP 06EB  
                      __size_of_i2c_ISR 0023                  ?_wr2RegCompleteHandler 0056  
       _wr2RegCompleteHandler$intlevel0 05C1         _rd2RegCompleteHandler$intlevel0 057F  
 __end_of_i2c_driver_setBusCollisionISR 0750  __size_of_i2c_driver_setBusCollisionISR 0006  
         _i2c_driver_setBusCollisionISR 074A                     i2c_writeNBytes@data 0056  
                          ?_do_I2C_IDLE 0070                ??i1_i2c_driver_getRXData 0070  
                          ?_do_I2C_RCEN 0070                 ??_OSCILLATOR_Initialize 004D  
                      __size_of___awdiv 0052                __size_of_i2c_masterWrite 0004  
            __size_of_i2c_driver_TXData 0006         __size_of_do_I2C_DO_ADDRESS_NACK 0027  
             __end_ofi1_i2c_driver_stop 07D5                   i1i2c_setBuffer@buffer 0073  
         ??_i2c_setDataCompleteCallback 0055         __end_ofi1_rd1RegCompleteHandler 0609  
              __size_ofi1_i2c_setBuffer 000E                           ??i1_do_I2C_RX 0070  
                         ??i1_do_I2C_TX 0071      _do_I2C_SEND_RESTART_READ$intlevel0 0717  
           __size_ofi1_do_I2C_SEND_STOP 0004         __end_ofi1_wr1RegCompleteHandler 0619  
                  ?_do_I2C_DO_NACK_STOP 0070            __end_of_do_I2C_SEND_ADR_READ 0678  
       __size_ofi1_do_I2C_SEND_ADR_READ 0008              __size_of_i2c_driver_isNACK 000D  
                     ?_i2c_driver_start 0070                      i1_i2c_restartWrite 07DE  
                           ??_do_I2C_RX 004D                             ??_do_I2C_TX 004E  
                    ??_i2c_driver_start 004D                                __ptext10 06C6  
                              __ptext11 0690                                __ptext20 06D0  
                              __ptext12 069B                                __ptext21 06A6  
                              __ptext13 04A3                                __ptext30 07AE  
                              __ptext22 066C                                __ptext14 0310  
                              __ptext31 0652                                __ptext23 06FB  
                              __ptext15 0230                                __ptext40 05A7  
                              __ptext32 0750                                __ptext24 0703  
                              __ptext16 03E6                                __ptext41 0756  
                              __ptext33 07B1                                __ptext25 070B  
                              __ptext17 06E3                                __ptext50 0786  
                              __ptext42 075C                                __ptext34 0782  
                              __ptext26 0713                                __ptext18 06EB  
                              __ptext51 07BD                                __ptext43 0762  
                              __ptext35 07E4                                __ptext27 06DA  
                              __ptext19 06F3                                __ptext52 05D3  
                              __ptext44 05BD                                __ptext36 07B4  
                              __ptext28 06B1                                __ptext61 0528  
                              __ptext53 07C0                                __ptext45 065F  
                              __ptext37 0547                                __ptext29 0390  
                              __ptext70 072A                                __ptext62 07C6  
                              __ptext54 07C3                                __ptext46 045A  
                              __ptext38 057B                                __ptext71 071B  
                              __ptext63 0352                                __ptext55 01DE  
                              __ptext47 0629                                __ptext39 0591  
                              __ptext80 0678                                __ptext72 0796  
                              __ptext64 027E                                __ptext56 004C  
                              __ptext48 07B7                                __ptext81 0779  
                              __ptext73 079A                                __ptext65 04C6  
                              __ptext57 0768                                __ptext49 07BA  
                              __ptext90 07DE                                __ptext82 07CC  
                              __ptext74 079E                                __ptext66 078A  
                              __ptext58 040D                                __ptext91 07E0  
                              __ptext83 07A6                                __ptext75 07A2  
                              __ptext67 078E                                __ptext59 0723  
                              __ptext92 07E2                                __ptext84 07E5  
                              __ptext76 0774                                __ptext68 0792  
                              __ptext93 0619                                __ptext85 07CF  
                              __ptext77 0731                                __ptext69 076E  
                              __ptext94 0684                                __ptext86 0564  
                              __ptext78 03BD                                __ptext95 047F  
                              __ptext87 05E9                                __ptext79 07C9  
                              __ptext96 0637                                __ptext88 05F9  
                              __ptext97 07D2                                __ptext89 0609  
                              __ptext98 07D5                                __ptext99 07AA  
                          _SSP1CON1bits 0215                            _SSP1CON2bits 0216  
                  __end_of_do_I2C_RESET 06BC                          ??i1_returnStop 007A  
               i1_do_I2C_SEND_ADR_WRITE 072A                     ?i1_i2c_restartWrite 0079  
          __end_ofi1_i2c_driver_sendACK 07AE                     __end_of_returnReset 0762  
                         __size_of_main 0082                     __end_of_mssp_setIRQ 07B1  
          __end_ofi1_i2c_driver_restart 07D8                    i1i2c_driver_TXData@d 0070  
          __end_ofi1_i2c_driver_startRX 07D2                    __CFG_WDTCWS$WDTCWSSW 0000  
                           _setCallBack 045A                 ??i1_do_I2C_SEND_RESTART 0070  
                         _mssp_clearIRQ 07C3                 i2c_masterOperation@read 0053  
  __size_ofi1_do_I2C_SEND_RESTART_WRITE 0004                                int$flags 007E  
            ??i1_do_I2C_DO_ADDRESS_NACK 0070        __end_ofi1_do_I2C_DO_NACK_RESTART 078E  
    __end_of_INTERRUPT_InterruptManager 0027              _INTERRUPT_InterruptManager 0004  
                          _SSP1STATbits 0214                    ??i1_i2c_restartWrite 007A  
      __end_of_do_I2C_SEND_RESTART_READ 071B                             ??_drawPixel 004F  
                          ??_returnStop 0057                __end_of_i2c_restartWrite 075C  
                 ??_do_I2C_DO_NACK_STOP 004D                mssp_waitForEvent@timeout 004D  
        i2c_driver_setBusCollisionISR@f 004D                              _INTCONbits 000B  
                    i2c_writeNBytes@len 0057                     __end_ofi1_do_I2C_RX 0390  
                   __end_ofi1_do_I2C_TX 02C8                __size_ofi1_do_I2C_DO_ACK 0004  
                      ?_do_I2C_TX_EMPTY 0070                  _do_I2C_DO_ADDRESS_NACK 03E6  
        __size_ofi1_do_I2C_DO_NACK_STOP 0004                                intlevel1 0000  
         __end_ofi1_do_I2C_DO_NACK_STOP 0792                  _do_I2C_RESET$intlevel0 06B5  
                rd2RegCompleteHandler@p 0056                       ??_i2c_driver_open 004D  
                     ??_i2c_driver_stop 004D                 ?_PIN_MANAGER_Initialize 0070  
                     i2c_restartWrite@p 0056                  i1_do_I2C_SEND_ADR_READ 071B  
                     __CFG_CLKOUTEN$OFF 0000              ?i1_rdBlkRegCompleteHandler 0079  
                    __end_of_returnStop 0768                          ?_mssp_clearIRQ 0070  
                 __end_ofi1_setCallBack 04A3     __size_ofi1_do_I2C_SEND_RESTART_READ 0004  
                  __end_of_writeDisplay 01DE            __end_of_i2c_driver_getRXData 07B4  
       __size_ofi1_i2c_driver_getRXData 0003                  wr2RegCompleteHandler@p 0056  
            __size_ofi1_i2c_driver_stop 0003                           writeDisplay@i 005F  
               __size_ofi1_do_I2C_RESET 0007                       ??_i2c_masterWrite 0055  
    __end_of_i2c_setAddressNACKCallback 0652              _i2c_setAddressNACKCallback 0645  
                __size_of_i2c_setBuffer 000E                       ??i1_i2c_setBuffer 0072  
                           _returnReset 075C        _do_I2C_DO_NACK_RESTART$intlevel0 06E7  
                           _mssp_setIRQ 07AE               ??i1_do_I2C_SEND_ADR_WRITE 0071  
          __end_of_i2c_driver_setI2cISR 074A                  __size_ofi1_do_I2C_IDLE 0005  
                __size_ofi1_do_I2C_RCEN 0006          __end_of_PIN_MANAGER_Initialize 0434  
           __end_of_i2c_busCollisionISR 07DB          __size_of_rd1RegCompleteHandler 0016  
         __end_of_rd1RegCompleteHandler 05A7                           _displaybuffer 003D  
                   i1_i2c_driver_TXData 0779          __size_of_wr1RegCompleteHandler 0016  
      __size_ofi1_rd1RegCompleteHandler 0010           __end_of_wr1RegCompleteHandler 05BD  
                 _do_I2C_SEND_ADR_WRITE 06A6             __end_of_i2c_driver_sendNACK 0786  
                  _do_I2C_SEND_ADR_READ 066C       __end_ofi1_rdBlkRegCompleteHandler 057B  
      __size_ofi1_wr1RegCompleteHandler 0010              __end_of_i2c_driver_sendACK 078A  
           __end_of_i2c_driver_resetBus 07E5  
