

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Apr 10 16:12:30 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F1619
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	inittext,global,class=CODE,delta=2
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,inline,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	psect	text19,local,class=CODE,merge=1,delta=2
    33                           	psect	text20,local,class=CODE,merge=1,delta=2
    34                           	psect	text21,local,class=CODE,merge=1,delta=2
    35                           	psect	text22,local,class=CODE,merge=1,delta=2
    36                           	psect	text23,local,class=CODE,merge=1,delta=2
    37                           	psect	text24,local,class=CODE,merge=1,delta=2
    38                           	psect	text25,local,class=CODE,merge=1,delta=2
    39                           	psect	text26,local,class=CODE,merge=1,delta=2
    40                           	psect	text27,local,class=CODE,merge=1,delta=2
    41                           	psect	text28,local,class=CODE,merge=1,delta=2
    42                           	psect	text29,local,class=CODE,merge=1,inline,delta=2
    43                           	psect	text30,local,class=CODE,merge=1,inline,delta=2
    44                           	psect	text31,local,class=CODE,merge=1,inline,delta=2
    45                           	psect	text32,local,class=CODE,merge=1,inline,delta=2
    46                           	psect	text33,local,class=CODE,merge=1,inline,delta=2
    47                           	psect	text34,local,class=CODE,merge=1,inline,delta=2
    48                           	psect	text35,local,class=CODE,merge=1,inline,delta=2
    49                           	psect	text36,local,class=CODE,merge=1,delta=2
    50                           	psect	text37,local,class=CODE,merge=1,delta=2
    51                           	psect	text38,local,class=CODE,merge=1,delta=2
    52                           	psect	text39,local,class=CODE,merge=1,delta=2
    53                           	psect	text40,local,class=CODE,merge=1,delta=2
    54                           	psect	text41,local,class=CODE,merge=1,delta=2
    55                           	psect	text42,local,class=CODE,merge=1,delta=2
    56                           	psect	text43,local,class=CODE,merge=1,delta=2
    57                           	psect	text44,local,class=CODE,merge=1,delta=2
    58                           	psect	text45,local,class=CODE,merge=1,delta=2
    59                           	psect	text46,local,class=CODE,merge=1,delta=2
    60                           	psect	text47,local,class=CODE,merge=1,inline,delta=2
    61                           	psect	text48,local,class=CODE,merge=1,inline,delta=2
    62                           	psect	text49,local,class=CODE,merge=1,inline,delta=2
    63                           	psect	text50,local,class=CODE,merge=1,inline,delta=2
    64                           	psect	text51,local,class=CODE,merge=1,delta=2
    65                           	psect	text52,local,class=CODE,merge=1,inline,delta=2
    66                           	psect	text53,local,class=CODE,merge=1,inline,delta=2
    67                           	psect	text54,local,class=CODE,merge=1,delta=2,group=1
    68                           	psect	text55,local,class=CODE,merge=1,delta=2
    69                           	psect	text56,local,class=CODE,merge=1,delta=2
    70                           	psect	text57,local,class=CODE,merge=1,delta=2
    71                           	psect	intentry,global,class=CODE,delta=2
    72                           	psect	text59,local,class=CODE,merge=1,delta=2
    73                           	psect	text60,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text61,local,class=CODE,merge=1,delta=2
    75                           	psect	text62,local,class=CODE,merge=1,delta=2
    76                           	psect	text63,local,class=CODE,merge=1,delta=2
    77                           	psect	text64,local,class=CODE,merge=1,delta=2
    78                           	psect	text65,local,class=CODE,merge=1,delta=2
    79                           	psect	text66,local,class=CODE,merge=1,delta=2
    80                           	psect	text67,local,class=CODE,merge=1,delta=2
    81                           	psect	text68,local,class=CODE,merge=1,delta=2
    82                           	psect	text69,local,class=CODE,merge=1,delta=2
    83                           	psect	text70,local,class=CODE,merge=1,delta=2
    84                           	psect	text71,local,class=CODE,merge=1,delta=2
    85                           	psect	text72,local,class=CODE,merge=1,delta=2
    86                           	psect	text73,local,class=CODE,merge=1,delta=2
    87                           	psect	text74,local,class=CODE,merge=1,delta=2
    88                           	psect	text75,local,class=CODE,merge=1,delta=2
    89                           	psect	text76,local,class=CODE,merge=1,delta=2
    90                           	psect	text77,local,class=CODE,merge=1,inline,delta=2
    91                           	psect	text78,local,class=CODE,merge=1,inline,delta=2
    92                           	psect	text79,local,class=CODE,merge=1,inline,delta=2
    93                           	psect	text80,local,class=CODE,merge=1,inline,delta=2
    94                           	psect	text81,local,class=CODE,merge=1,inline,delta=2
    95                           	psect	text82,local,class=CODE,merge=1,inline,delta=2
    96                           	psect	text83,local,class=CODE,merge=1,inline,delta=2
    97                           	psect	text84,local,class=CODE,merge=1,delta=2
    98                           	psect	text85,local,class=CODE,merge=1,delta=2
    99                           	psect	text86,local,class=CODE,merge=1,delta=2
   100                           	psect	text87,local,class=CODE,merge=1,delta=2
   101                           	psect	text88,local,class=CODE,merge=1,delta=2
   102                           	psect	text89,local,class=CODE,merge=1,delta=2
   103                           	psect	text90,local,class=CODE,merge=1,delta=2
   104                           	psect	text91,local,class=CODE,merge=1,delta=2
   105                           	psect	text92,local,class=CODE,merge=1,delta=2
   106                           	psect	text93,local,class=CODE,merge=1,delta=2
   107                           	psect	text94,local,class=CODE,merge=1,delta=2
   108                           	psect	text95,local,class=CODE,merge=1,inline,delta=2
   109                           	psect	text96,local,class=CODE,merge=1,inline,delta=2
   110                           	psect	text97,local,class=CODE,merge=1,inline,delta=2
   111                           	psect	text98,local,class=CODE,merge=1,delta=2
   112                           	psect	text99,local,class=CODE,merge=1,inline,delta=2
   113                           	dabs	1,0x7E,2
   114  0000                     
   115                           ; Version 1.45
   116                           ; Generated 16/11/2017 GMT
   117                           ; 
   118                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   119                           ; All rights reserved.
   120                           ; 
   121                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   122                           ; 
   123                           ; Redistribution and use in source and binary forms, with or without modification, are
   124                           ; permitted provided that the following conditions are met:
   125                           ; 
   126                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   127                           ;        conditions and the following disclaimer.
   128                           ; 
   129                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   130                           ;        of conditions and the following disclaimer in the documentation and/or other
   131                           ;        materials provided with the distribution.
   132                           ; 
   133                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   134                           ;        software without specific prior written permission.
   135                           ; 
   136                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   137                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   138                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   139                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   140                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   141                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   142                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   143                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   144                           ; 
   145                           ; 
   146                           ; Code-generator required, PIC16F1619 Definitions
   147                           ; 
   148                           ; SFR Addresses
   149  0000                     	;# 
   150  0001                     	;# 
   151  0002                     	;# 
   152  0003                     	;# 
   153  0004                     	;# 
   154  0005                     	;# 
   155  0006                     	;# 
   156  0007                     	;# 
   157  0008                     	;# 
   158  0009                     	;# 
   159  000A                     	;# 
   160  000B                     	;# 
   161  000C                     	;# 
   162  000D                     	;# 
   163  000E                     	;# 
   164  0010                     	;# 
   165  0011                     	;# 
   166  0012                     	;# 
   167  0013                     	;# 
   168  0014                     	;# 
   169  0015                     	;# 
   170  0016                     	;# 
   171  0016                     	;# 
   172  0017                     	;# 
   173  0018                     	;# 
   174  0019                     	;# 
   175  001A                     	;# 
   176  001A                     	;# 
   177  001B                     	;# 
   178  001B                     	;# 
   179  001C                     	;# 
   180  001D                     	;# 
   181  001E                     	;# 
   182  001F                     	;# 
   183  008C                     	;# 
   184  008D                     	;# 
   185  008E                     	;# 
   186  0090                     	;# 
   187  0091                     	;# 
   188  0092                     	;# 
   189  0093                     	;# 
   190  0094                     	;# 
   191  0095                     	;# 
   192  0096                     	;# 
   193  0098                     	;# 
   194  0099                     	;# 
   195  009A                     	;# 
   196  009B                     	;# 
   197  009B                     	;# 
   198  009C                     	;# 
   199  009D                     	;# 
   200  009E                     	;# 
   201  009F                     	;# 
   202  010C                     	;# 
   203  010D                     	;# 
   204  010E                     	;# 
   205  0111                     	;# 
   206  0112                     	;# 
   207  0113                     	;# 
   208  0114                     	;# 
   209  0115                     	;# 
   210  0116                     	;# 
   211  0117                     	;# 
   212  0118                     	;# 
   213  0119                     	;# 
   214  011C                     	;# 
   215  018C                     	;# 
   216  018D                     	;# 
   217  018E                     	;# 
   218  0191                     	;# 
   219  0191                     	;# 
   220  0192                     	;# 
   221  0193                     	;# 
   222  0193                     	;# 
   223  0194                     	;# 
   224  0195                     	;# 
   225  0196                     	;# 
   226  0197                     	;# 
   227  0199                     	;# 
   228  0199                     	;# 
   229  0199                     	;# 
   230  019A                     	;# 
   231  019A                     	;# 
   232  019A                     	;# 
   233  019B                     	;# 
   234  019B                     	;# 
   235  019B                     	;# 
   236  019B                     	;# 
   237  019B                     	;# 
   238  019C                     	;# 
   239  019C                     	;# 
   240  019C                     	;# 
   241  019D                     	;# 
   242  019D                     	;# 
   243  019D                     	;# 
   244  019E                     	;# 
   245  019E                     	;# 
   246  019E                     	;# 
   247  019F                     	;# 
   248  019F                     	;# 
   249  019F                     	;# 
   250  019F                     	;# 
   251  019F                     	;# 
   252  020C                     	;# 
   253  020D                     	;# 
   254  020E                     	;# 
   255  0211                     	;# 
   256  0211                     	;# 
   257  0212                     	;# 
   258  0212                     	;# 
   259  0213                     	;# 
   260  0213                     	;# 
   261  0214                     	;# 
   262  0214                     	;# 
   263  0215                     	;# 
   264  0215                     	;# 
   265  0215                     	;# 
   266  0215                     	;# 
   267  0216                     	;# 
   268  0216                     	;# 
   269  0217                     	;# 
   270  0217                     	;# 
   271  028C                     	;# 
   272  028D                     	;# 
   273  028E                     	;# 
   274  0291                     	;# 
   275  0291                     	;# 
   276  0292                     	;# 
   277  0293                     	;# 
   278  0294                     	;# 
   279  0298                     	;# 
   280  0298                     	;# 
   281  0299                     	;# 
   282  029A                     	;# 
   283  029B                     	;# 
   284  029E                     	;# 
   285  030C                     	;# 
   286  030D                     	;# 
   287  030E                     	;# 
   288  038C                     	;# 
   289  038D                     	;# 
   290  038E                     	;# 
   291  0391                     	;# 
   292  0392                     	;# 
   293  0393                     	;# 
   294  0394                     	;# 
   295  0395                     	;# 
   296  0396                     	;# 
   297  0397                     	;# 
   298  0398                     	;# 
   299  0399                     	;# 
   300  040E                     	;# 
   301  0413                     	;# 
   302  0413                     	;# 
   303  0414                     	;# 
   304  0414                     	;# 
   305  0415                     	;# 
   306  0416                     	;# 
   307  0417                     	;# 
   308  0418                     	;# 
   309  041A                     	;# 
   310  041A                     	;# 
   311  041B                     	;# 
   312  041B                     	;# 
   313  041C                     	;# 
   314  041D                     	;# 
   315  041E                     	;# 
   316  041F                     	;# 
   317  0493                     	;# 
   318  0494                     	;# 
   319  0495                     	;# 
   320  0496                     	;# 
   321  049A                     	;# 
   322  049B                     	;# 
   323  049C                     	;# 
   324  049D                     	;# 
   325  058C                     	;# 
   326  058C                     	;# 
   327  058D                     	;# 
   328  058E                     	;# 
   329  058E                     	;# 
   330  058F                     	;# 
   331  0590                     	;# 
   332  0590                     	;# 
   333  0591                     	;# 
   334  0592                     	;# 
   335  0592                     	;# 
   336  0593                     	;# 
   337  0594                     	;# 
   338  0594                     	;# 
   339  0595                     	;# 
   340  0596                     	;# 
   341  0596                     	;# 
   342  0597                     	;# 
   343  0598                     	;# 
   344  0599                     	;# 
   345  059A                     	;# 
   346  059B                     	;# 
   347  059B                     	;# 
   348  059C                     	;# 
   349  059D                     	;# 
   350  060C                     	;# 
   351  060C                     	;# 
   352  060D                     	;# 
   353  060E                     	;# 
   354  060F                     	;# 
   355  060F                     	;# 
   356  0610                     	;# 
   357  0611                     	;# 
   358  0612                     	;# 
   359  0613                     	;# 
   360  0614                     	;# 
   361  0617                     	;# 
   362  0618                     	;# 
   363  0619                     	;# 
   364  061A                     	;# 
   365  061B                     	;# 
   366  061C                     	;# 
   367  0691                     	;# 
   368  0692                     	;# 
   369  0693                     	;# 
   370  0694                     	;# 
   371  0695                     	;# 
   372  0696                     	;# 
   373  0697                     	;# 
   374  0699                     	;# 
   375  069A                     	;# 
   376  0711                     	;# 
   377  0712                     	;# 
   378  0713                     	;# 
   379  0714                     	;# 
   380  0715                     	;# 
   381  0718                     	;# 
   382  0718                     	;# 
   383  0719                     	;# 
   384  071A                     	;# 
   385  071A                     	;# 
   386  071B                     	;# 
   387  071C                     	;# 
   388  071D                     	;# 
   389  0791                     	;# 
   390  0791                     	;# 
   391  0792                     	;# 
   392  0793                     	;# 
   393  0793                     	;# 
   394  0794                     	;# 
   395  0795                     	;# 
   396  0795                     	;# 
   397  0796                     	;# 
   398  0797                     	;# 
   399  0797                     	;# 
   400  0798                     	;# 
   401  0799                     	;# 
   402  079A                     	;# 
   403  080C                     	;# 
   404  080C                     	;# 
   405  080D                     	;# 
   406  080E                     	;# 
   407  080E                     	;# 
   408  080F                     	;# 
   409  0810                     	;# 
   410  0810                     	;# 
   411  0811                     	;# 
   412  0812                     	;# 
   413  0812                     	;# 
   414  0813                     	;# 
   415  0814                     	;# 
   416  0815                     	;# 
   417  0816                     	;# 
   418  0817                     	;# 
   419  0818                     	;# 
   420  0819                     	;# 
   421  081A                     	;# 
   422  081A                     	;# 
   423  081B                     	;# 
   424  081C                     	;# 
   425  081C                     	;# 
   426  081D                     	;# 
   427  088C                     	;# 
   428  088D                     	;# 
   429  088E                     	;# 
   430  088F                     	;# 
   431  088F                     	;# 
   432  0890                     	;# 
   433  0891                     	;# 
   434  0892                     	;# 
   435  0893                     	;# 
   436  0893                     	;# 
   437  0894                     	;# 
   438  0895                     	;# 
   439  0896                     	;# 
   440  0897                     	;# 
   441  0897                     	;# 
   442  0898                     	;# 
   443  0899                     	;# 
   444  0D8C                     	;# 
   445  0D8C                     	;# 
   446  0D8D                     	;# 
   447  0D8E                     	;# 
   448  0D8F                     	;# 
   449  0D8F                     	;# 
   450  0D90                     	;# 
   451  0D91                     	;# 
   452  0D92                     	;# 
   453  0D92                     	;# 
   454  0D93                     	;# 
   455  0D94                     	;# 
   456  0D95                     	;# 
   457  0D95                     	;# 
   458  0D96                     	;# 
   459  0D97                     	;# 
   460  0D98                     	;# 
   461  0D99                     	;# 
   462  0D9A                     	;# 
   463  0D9B                     	;# 
   464  0D9C                     	;# 
   465  0D9D                     	;# 
   466  0D9E                     	;# 
   467  0D9E                     	;# 
   468  0D9F                     	;# 
   469  0DA0                     	;# 
   470  0DA1                     	;# 
   471  0DA1                     	;# 
   472  0DA2                     	;# 
   473  0DA3                     	;# 
   474  0DA4                     	;# 
   475  0DA4                     	;# 
   476  0DA5                     	;# 
   477  0DA6                     	;# 
   478  0DA7                     	;# 
   479  0DA7                     	;# 
   480  0DA8                     	;# 
   481  0DA9                     	;# 
   482  0DAA                     	;# 
   483  0DAB                     	;# 
   484  0DAC                     	;# 
   485  0DAD                     	;# 
   486  0DAE                     	;# 
   487  0DAF                     	;# 
   488  0E0F                     	;# 
   489  0E10                     	;# 
   490  0E11                     	;# 
   491  0E12                     	;# 
   492  0E13                     	;# 
   493  0E14                     	;# 
   494  0E15                     	;# 
   495  0E16                     	;# 
   496  0E17                     	;# 
   497  0E18                     	;# 
   498  0E19                     	;# 
   499  0E1A                     	;# 
   500  0E1B                     	;# 
   501  0E1C                     	;# 
   502  0E1D                     	;# 
   503  0E1E                     	;# 
   504  0E1F                     	;# 
   505  0E20                     	;# 
   506  0E21                     	;# 
   507  0E22                     	;# 
   508  0E23                     	;# 
   509  0E24                     	;# 
   510  0E25                     	;# 
   511  0E26                     	;# 
   512  0E27                     	;# 
   513  0E28                     	;# 
   514  0E29                     	;# 
   515  0E2A                     	;# 
   516  0E2B                     	;# 
   517  0E2C                     	;# 
   518  0E2D                     	;# 
   519  0E2E                     	;# 
   520  0E90                     	;# 
   521  0E91                     	;# 
   522  0E92                     	;# 
   523  0E94                     	;# 
   524  0E95                     	;# 
   525  0E9C                     	;# 
   526  0E9D                     	;# 
   527  0E9E                     	;# 
   528  0E9F                     	;# 
   529  0EA0                     	;# 
   530  0EA1                     	;# 
   531  0EA2                     	;# 
   532  0EA3                     	;# 
   533  0EA4                     	;# 
   534  0EA5                     	;# 
   535  0EA6                     	;# 
   536  0EA7                     	;# 
   537  0F0F                     	;# 
   538  0F10                     	;# 
   539  0F11                     	;# 
   540  0F12                     	;# 
   541  0F13                     	;# 
   542  0F14                     	;# 
   543  0F15                     	;# 
   544  0F16                     	;# 
   545  0F17                     	;# 
   546  0F18                     	;# 
   547  0F19                     	;# 
   548  0F1A                     	;# 
   549  0F1B                     	;# 
   550  0F1C                     	;# 
   551  0F1D                     	;# 
   552  0F1E                     	;# 
   553  0F1F                     	;# 
   554  0F20                     	;# 
   555  0F21                     	;# 
   556  0F22                     	;# 
   557  0F23                     	;# 
   558  0F24                     	;# 
   559  0F25                     	;# 
   560  0F26                     	;# 
   561  0F27                     	;# 
   562  0F28                     	;# 
   563  0F29                     	;# 
   564  0F2A                     	;# 
   565  0F2B                     	;# 
   566  0F2C                     	;# 
   567  0F2D                     	;# 
   568  0F2E                     	;# 
   569  0F2F                     	;# 
   570  0F30                     	;# 
   571  0F31                     	;# 
   572  0F32                     	;# 
   573  0F33                     	;# 
   574  0F34                     	;# 
   575  0F35                     	;# 
   576  0F36                     	;# 
   577  0F37                     	;# 
   578  0FE4                     	;# 
   579  0FE5                     	;# 
   580  0FE6                     	;# 
   581  0FE7                     	;# 
   582  0FE8                     	;# 
   583  0FE9                     	;# 
   584  0FEA                     	;# 
   585  0FEB                     	;# 
   586  0FED                     	;# 
   587  0FEE                     	;# 
   588  0FEF                     	;# 
   589  0000                     	;# 
   590  0001                     	;# 
   591  0002                     	;# 
   592  0003                     	;# 
   593  0004                     	;# 
   594  0005                     	;# 
   595  0006                     	;# 
   596  0007                     	;# 
   597  0008                     	;# 
   598  0009                     	;# 
   599  000A                     	;# 
   600  000B                     	;# 
   601  000C                     	;# 
   602  000D                     	;# 
   603  000E                     	;# 
   604  0010                     	;# 
   605  0011                     	;# 
   606  0012                     	;# 
   607  0013                     	;# 
   608  0014                     	;# 
   609  0015                     	;# 
   610  0016                     	;# 
   611  0016                     	;# 
   612  0017                     	;# 
   613  0018                     	;# 
   614  0019                     	;# 
   615  001A                     	;# 
   616  001A                     	;# 
   617  001B                     	;# 
   618  001B                     	;# 
   619  001C                     	;# 
   620  001D                     	;# 
   621  001E                     	;# 
   622  001F                     	;# 
   623  008C                     	;# 
   624  008D                     	;# 
   625  008E                     	;# 
   626  0090                     	;# 
   627  0091                     	;# 
   628  0092                     	;# 
   629  0093                     	;# 
   630  0094                     	;# 
   631  0095                     	;# 
   632  0096                     	;# 
   633  0098                     	;# 
   634  0099                     	;# 
   635  009A                     	;# 
   636  009B                     	;# 
   637  009B                     	;# 
   638  009C                     	;# 
   639  009D                     	;# 
   640  009E                     	;# 
   641  009F                     	;# 
   642  010C                     	;# 
   643  010D                     	;# 
   644  010E                     	;# 
   645  0111                     	;# 
   646  0112                     	;# 
   647  0113                     	;# 
   648  0114                     	;# 
   649  0115                     	;# 
   650  0116                     	;# 
   651  0117                     	;# 
   652  0118                     	;# 
   653  0119                     	;# 
   654  011C                     	;# 
   655  018C                     	;# 
   656  018D                     	;# 
   657  018E                     	;# 
   658  0191                     	;# 
   659  0191                     	;# 
   660  0192                     	;# 
   661  0193                     	;# 
   662  0193                     	;# 
   663  0194                     	;# 
   664  0195                     	;# 
   665  0196                     	;# 
   666  0197                     	;# 
   667  0199                     	;# 
   668  0199                     	;# 
   669  0199                     	;# 
   670  019A                     	;# 
   671  019A                     	;# 
   672  019A                     	;# 
   673  019B                     	;# 
   674  019B                     	;# 
   675  019B                     	;# 
   676  019B                     	;# 
   677  019B                     	;# 
   678  019C                     	;# 
   679  019C                     	;# 
   680  019C                     	;# 
   681  019D                     	;# 
   682  019D                     	;# 
   683  019D                     	;# 
   684  019E                     	;# 
   685  019E                     	;# 
   686  019E                     	;# 
   687  019F                     	;# 
   688  019F                     	;# 
   689  019F                     	;# 
   690  019F                     	;# 
   691  019F                     	;# 
   692  020C                     	;# 
   693  020D                     	;# 
   694  020E                     	;# 
   695  0211                     	;# 
   696  0211                     	;# 
   697  0212                     	;# 
   698  0212                     	;# 
   699  0213                     	;# 
   700  0213                     	;# 
   701  0214                     	;# 
   702  0214                     	;# 
   703  0215                     	;# 
   704  0215                     	;# 
   705  0215                     	;# 
   706  0215                     	;# 
   707  0216                     	;# 
   708  0216                     	;# 
   709  0217                     	;# 
   710  0217                     	;# 
   711  028C                     	;# 
   712  028D                     	;# 
   713  028E                     	;# 
   714  0291                     	;# 
   715  0291                     	;# 
   716  0292                     	;# 
   717  0293                     	;# 
   718  0294                     	;# 
   719  0298                     	;# 
   720  0298                     	;# 
   721  0299                     	;# 
   722  029A                     	;# 
   723  029B                     	;# 
   724  029E                     	;# 
   725  030C                     	;# 
   726  030D                     	;# 
   727  030E                     	;# 
   728  038C                     	;# 
   729  038D                     	;# 
   730  038E                     	;# 
   731  0391                     	;# 
   732  0392                     	;# 
   733  0393                     	;# 
   734  0394                     	;# 
   735  0395                     	;# 
   736  0396                     	;# 
   737  0397                     	;# 
   738  0398                     	;# 
   739  0399                     	;# 
   740  040E                     	;# 
   741  0413                     	;# 
   742  0413                     	;# 
   743  0414                     	;# 
   744  0414                     	;# 
   745  0415                     	;# 
   746  0416                     	;# 
   747  0417                     	;# 
   748  0418                     	;# 
   749  041A                     	;# 
   750  041A                     	;# 
   751  041B                     	;# 
   752  041B                     	;# 
   753  041C                     	;# 
   754  041D                     	;# 
   755  041E                     	;# 
   756  041F                     	;# 
   757  0493                     	;# 
   758  0494                     	;# 
   759  0495                     	;# 
   760  0496                     	;# 
   761  049A                     	;# 
   762  049B                     	;# 
   763  049C                     	;# 
   764  049D                     	;# 
   765  058C                     	;# 
   766  058C                     	;# 
   767  058D                     	;# 
   768  058E                     	;# 
   769  058E                     	;# 
   770  058F                     	;# 
   771  0590                     	;# 
   772  0590                     	;# 
   773  0591                     	;# 
   774  0592                     	;# 
   775  0592                     	;# 
   776  0593                     	;# 
   777  0594                     	;# 
   778  0594                     	;# 
   779  0595                     	;# 
   780  0596                     	;# 
   781  0596                     	;# 
   782  0597                     	;# 
   783  0598                     	;# 
   784  0599                     	;# 
   785  059A                     	;# 
   786  059B                     	;# 
   787  059B                     	;# 
   788  059C                     	;# 
   789  059D                     	;# 
   790  060C                     	;# 
   791  060C                     	;# 
   792  060D                     	;# 
   793  060E                     	;# 
   794  060F                     	;# 
   795  060F                     	;# 
   796  0610                     	;# 
   797  0611                     	;# 
   798  0612                     	;# 
   799  0613                     	;# 
   800  0614                     	;# 
   801  0617                     	;# 
   802  0618                     	;# 
   803  0619                     	;# 
   804  061A                     	;# 
   805  061B                     	;# 
   806  061C                     	;# 
   807  0691                     	;# 
   808  0692                     	;# 
   809  0693                     	;# 
   810  0694                     	;# 
   811  0695                     	;# 
   812  0696                     	;# 
   813  0697                     	;# 
   814  0699                     	;# 
   815  069A                     	;# 
   816  0711                     	;# 
   817  0712                     	;# 
   818  0713                     	;# 
   819  0714                     	;# 
   820  0715                     	;# 
   821  0718                     	;# 
   822  0718                     	;# 
   823  0719                     	;# 
   824  071A                     	;# 
   825  071A                     	;# 
   826  071B                     	;# 
   827  071C                     	;# 
   828  071D                     	;# 
   829  0791                     	;# 
   830  0791                     	;# 
   831  0792                     	;# 
   832  0793                     	;# 
   833  0793                     	;# 
   834  0794                     	;# 
   835  0795                     	;# 
   836  0795                     	;# 
   837  0796                     	;# 
   838  0797                     	;# 
   839  0797                     	;# 
   840  0798                     	;# 
   841  0799                     	;# 
   842  079A                     	;# 
   843  080C                     	;# 
   844  080C                     	;# 
   845  080D                     	;# 
   846  080E                     	;# 
   847  080E                     	;# 
   848  080F                     	;# 
   849  0810                     	;# 
   850  0810                     	;# 
   851  0811                     	;# 
   852  0812                     	;# 
   853  0812                     	;# 
   854  0813                     	;# 
   855  0814                     	;# 
   856  0815                     	;# 
   857  0816                     	;# 
   858  0817                     	;# 
   859  0818                     	;# 
   860  0819                     	;# 
   861  081A                     	;# 
   862  081A                     	;# 
   863  081B                     	;# 
   864  081C                     	;# 
   865  081C                     	;# 
   866  081D                     	;# 
   867  088C                     	;# 
   868  088D                     	;# 
   869  088E                     	;# 
   870  088F                     	;# 
   871  088F                     	;# 
   872  0890                     	;# 
   873  0891                     	;# 
   874  0892                     	;# 
   875  0893                     	;# 
   876  0893                     	;# 
   877  0894                     	;# 
   878  0895                     	;# 
   879  0896                     	;# 
   880  0897                     	;# 
   881  0897                     	;# 
   882  0898                     	;# 
   883  0899                     	;# 
   884  0D8C                     	;# 
   885  0D8C                     	;# 
   886  0D8D                     	;# 
   887  0D8E                     	;# 
   888  0D8F                     	;# 
   889  0D8F                     	;# 
   890  0D90                     	;# 
   891  0D91                     	;# 
   892  0D92                     	;# 
   893  0D92                     	;# 
   894  0D93                     	;# 
   895  0D94                     	;# 
   896  0D95                     	;# 
   897  0D95                     	;# 
   898  0D96                     	;# 
   899  0D97                     	;# 
   900  0D98                     	;# 
   901  0D99                     	;# 
   902  0D9A                     	;# 
   903  0D9B                     	;# 
   904  0D9C                     	;# 
   905  0D9D                     	;# 
   906  0D9E                     	;# 
   907  0D9E                     	;# 
   908  0D9F                     	;# 
   909  0DA0                     	;# 
   910  0DA1                     	;# 
   911  0DA1                     	;# 
   912  0DA2                     	;# 
   913  0DA3                     	;# 
   914  0DA4                     	;# 
   915  0DA4                     	;# 
   916  0DA5                     	;# 
   917  0DA6                     	;# 
   918  0DA7                     	;# 
   919  0DA7                     	;# 
   920  0DA8                     	;# 
   921  0DA9                     	;# 
   922  0DAA                     	;# 
   923  0DAB                     	;# 
   924  0DAC                     	;# 
   925  0DAD                     	;# 
   926  0DAE                     	;# 
   927  0DAF                     	;# 
   928  0E0F                     	;# 
   929  0E10                     	;# 
   930  0E11                     	;# 
   931  0E12                     	;# 
   932  0E13                     	;# 
   933  0E14                     	;# 
   934  0E15                     	;# 
   935  0E16                     	;# 
   936  0E17                     	;# 
   937  0E18                     	;# 
   938  0E19                     	;# 
   939  0E1A                     	;# 
   940  0E1B                     	;# 
   941  0E1C                     	;# 
   942  0E1D                     	;# 
   943  0E1E                     	;# 
   944  0E1F                     	;# 
   945  0E20                     	;# 
   946  0E21                     	;# 
   947  0E22                     	;# 
   948  0E23                     	;# 
   949  0E24                     	;# 
   950  0E25                     	;# 
   951  0E26                     	;# 
   952  0E27                     	;# 
   953  0E28                     	;# 
   954  0E29                     	;# 
   955  0E2A                     	;# 
   956  0E2B                     	;# 
   957  0E2C                     	;# 
   958  0E2D                     	;# 
   959  0E2E                     	;# 
   960  0E90                     	;# 
   961  0E91                     	;# 
   962  0E92                     	;# 
   963  0E94                     	;# 
   964  0E95                     	;# 
   965  0E9C                     	;# 
   966  0E9D                     	;# 
   967  0E9E                     	;# 
   968  0E9F                     	;# 
   969  0EA0                     	;# 
   970  0EA1                     	;# 
   971  0EA2                     	;# 
   972  0EA3                     	;# 
   973  0EA4                     	;# 
   974  0EA5                     	;# 
   975  0EA6                     	;# 
   976  0EA7                     	;# 
   977  0F0F                     	;# 
   978  0F10                     	;# 
   979  0F11                     	;# 
   980  0F12                     	;# 
   981  0F13                     	;# 
   982  0F14                     	;# 
   983  0F15                     	;# 
   984  0F16                     	;# 
   985  0F17                     	;# 
   986  0F18                     	;# 
   987  0F19                     	;# 
   988  0F1A                     	;# 
   989  0F1B                     	;# 
   990  0F1C                     	;# 
   991  0F1D                     	;# 
   992  0F1E                     	;# 
   993  0F1F                     	;# 
   994  0F20                     	;# 
   995  0F21                     	;# 
   996  0F22                     	;# 
   997  0F23                     	;# 
   998  0F24                     	;# 
   999  0F25                     	;# 
  1000  0F26                     	;# 
  1001  0F27                     	;# 
  1002  0F28                     	;# 
  1003  0F29                     	;# 
  1004  0F2A                     	;# 
  1005  0F2B                     	;# 
  1006  0F2C                     	;# 
  1007  0F2D                     	;# 
  1008  0F2E                     	;# 
  1009  0F2F                     	;# 
  1010  0F30                     	;# 
  1011  0F31                     	;# 
  1012  0F32                     	;# 
  1013  0F33                     	;# 
  1014  0F34                     	;# 
  1015  0F35                     	;# 
  1016  0F36                     	;# 
  1017  0F37                     	;# 
  1018  0FE4                     	;# 
  1019  0FE5                     	;# 
  1020  0FE6                     	;# 
  1021  0FE7                     	;# 
  1022  0FE8                     	;# 
  1023  0FE9                     	;# 
  1024  0FEA                     	;# 
  1025  0FEB                     	;# 
  1026  0FED                     	;# 
  1027  0FEE                     	;# 
  1028  0FEF                     	;# 
  1029  0000                     	;# 
  1030  0001                     	;# 
  1031  0002                     	;# 
  1032  0003                     	;# 
  1033  0004                     	;# 
  1034  0005                     	;# 
  1035  0006                     	;# 
  1036  0007                     	;# 
  1037  0008                     	;# 
  1038  0009                     	;# 
  1039  000A                     	;# 
  1040  000B                     	;# 
  1041  000C                     	;# 
  1042  000D                     	;# 
  1043  000E                     	;# 
  1044  0010                     	;# 
  1045  0011                     	;# 
  1046  0012                     	;# 
  1047  0013                     	;# 
  1048  0014                     	;# 
  1049  0015                     	;# 
  1050  0016                     	;# 
  1051  0016                     	;# 
  1052  0017                     	;# 
  1053  0018                     	;# 
  1054  0019                     	;# 
  1055  001A                     	;# 
  1056  001A                     	;# 
  1057  001B                     	;# 
  1058  001B                     	;# 
  1059  001C                     	;# 
  1060  001D                     	;# 
  1061  001E                     	;# 
  1062  001F                     	;# 
  1063  008C                     	;# 
  1064  008D                     	;# 
  1065  008E                     	;# 
  1066  0090                     	;# 
  1067  0091                     	;# 
  1068  0092                     	;# 
  1069  0093                     	;# 
  1070  0094                     	;# 
  1071  0095                     	;# 
  1072  0096                     	;# 
  1073  0098                     	;# 
  1074  0099                     	;# 
  1075  009A                     	;# 
  1076  009B                     	;# 
  1077  009B                     	;# 
  1078  009C                     	;# 
  1079  009D                     	;# 
  1080  009E                     	;# 
  1081  009F                     	;# 
  1082  010C                     	;# 
  1083  010D                     	;# 
  1084  010E                     	;# 
  1085  0111                     	;# 
  1086  0112                     	;# 
  1087  0113                     	;# 
  1088  0114                     	;# 
  1089  0115                     	;# 
  1090  0116                     	;# 
  1091  0117                     	;# 
  1092  0118                     	;# 
  1093  0119                     	;# 
  1094  011C                     	;# 
  1095  018C                     	;# 
  1096  018D                     	;# 
  1097  018E                     	;# 
  1098  0191                     	;# 
  1099  0191                     	;# 
  1100  0192                     	;# 
  1101  0193                     	;# 
  1102  0193                     	;# 
  1103  0194                     	;# 
  1104  0195                     	;# 
  1105  0196                     	;# 
  1106  0197                     	;# 
  1107  0199                     	;# 
  1108  0199                     	;# 
  1109  0199                     	;# 
  1110  019A                     	;# 
  1111  019A                     	;# 
  1112  019A                     	;# 
  1113  019B                     	;# 
  1114  019B                     	;# 
  1115  019B                     	;# 
  1116  019B                     	;# 
  1117  019B                     	;# 
  1118  019C                     	;# 
  1119  019C                     	;# 
  1120  019C                     	;# 
  1121  019D                     	;# 
  1122  019D                     	;# 
  1123  019D                     	;# 
  1124  019E                     	;# 
  1125  019E                     	;# 
  1126  019E                     	;# 
  1127  019F                     	;# 
  1128  019F                     	;# 
  1129  019F                     	;# 
  1130  019F                     	;# 
  1131  019F                     	;# 
  1132  020C                     	;# 
  1133  020D                     	;# 
  1134  020E                     	;# 
  1135  0211                     	;# 
  1136  0211                     	;# 
  1137  0212                     	;# 
  1138  0212                     	;# 
  1139  0213                     	;# 
  1140  0213                     	;# 
  1141  0214                     	;# 
  1142  0214                     	;# 
  1143  0215                     	;# 
  1144  0215                     	;# 
  1145  0215                     	;# 
  1146  0215                     	;# 
  1147  0216                     	;# 
  1148  0216                     	;# 
  1149  0217                     	;# 
  1150  0217                     	;# 
  1151  028C                     	;# 
  1152  028D                     	;# 
  1153  028E                     	;# 
  1154  0291                     	;# 
  1155  0291                     	;# 
  1156  0292                     	;# 
  1157  0293                     	;# 
  1158  0294                     	;# 
  1159  0298                     	;# 
  1160  0298                     	;# 
  1161  0299                     	;# 
  1162  029A                     	;# 
  1163  029B                     	;# 
  1164  029E                     	;# 
  1165  030C                     	;# 
  1166  030D                     	;# 
  1167  030E                     	;# 
  1168  038C                     	;# 
  1169  038D                     	;# 
  1170  038E                     	;# 
  1171  0391                     	;# 
  1172  0392                     	;# 
  1173  0393                     	;# 
  1174  0394                     	;# 
  1175  0395                     	;# 
  1176  0396                     	;# 
  1177  0397                     	;# 
  1178  0398                     	;# 
  1179  0399                     	;# 
  1180  040E                     	;# 
  1181  0413                     	;# 
  1182  0413                     	;# 
  1183  0414                     	;# 
  1184  0414                     	;# 
  1185  0415                     	;# 
  1186  0416                     	;# 
  1187  0417                     	;# 
  1188  0418                     	;# 
  1189  041A                     	;# 
  1190  041A                     	;# 
  1191  041B                     	;# 
  1192  041B                     	;# 
  1193  041C                     	;# 
  1194  041D                     	;# 
  1195  041E                     	;# 
  1196  041F                     	;# 
  1197  0493                     	;# 
  1198  0494                     	;# 
  1199  0495                     	;# 
  1200  0496                     	;# 
  1201  049A                     	;# 
  1202  049B                     	;# 
  1203  049C                     	;# 
  1204  049D                     	;# 
  1205  058C                     	;# 
  1206  058C                     	;# 
  1207  058D                     	;# 
  1208  058E                     	;# 
  1209  058E                     	;# 
  1210  058F                     	;# 
  1211  0590                     	;# 
  1212  0590                     	;# 
  1213  0591                     	;# 
  1214  0592                     	;# 
  1215  0592                     	;# 
  1216  0593                     	;# 
  1217  0594                     	;# 
  1218  0594                     	;# 
  1219  0595                     	;# 
  1220  0596                     	;# 
  1221  0596                     	;# 
  1222  0597                     	;# 
  1223  0598                     	;# 
  1224  0599                     	;# 
  1225  059A                     	;# 
  1226  059B                     	;# 
  1227  059B                     	;# 
  1228  059C                     	;# 
  1229  059D                     	;# 
  1230  060C                     	;# 
  1231  060C                     	;# 
  1232  060D                     	;# 
  1233  060E                     	;# 
  1234  060F                     	;# 
  1235  060F                     	;# 
  1236  0610                     	;# 
  1237  0611                     	;# 
  1238  0612                     	;# 
  1239  0613                     	;# 
  1240  0614                     	;# 
  1241  0617                     	;# 
  1242  0618                     	;# 
  1243  0619                     	;# 
  1244  061A                     	;# 
  1245  061B                     	;# 
  1246  061C                     	;# 
  1247  0691                     	;# 
  1248  0692                     	;# 
  1249  0693                     	;# 
  1250  0694                     	;# 
  1251  0695                     	;# 
  1252  0696                     	;# 
  1253  0697                     	;# 
  1254  0699                     	;# 
  1255  069A                     	;# 
  1256  0711                     	;# 
  1257  0712                     	;# 
  1258  0713                     	;# 
  1259  0714                     	;# 
  1260  0715                     	;# 
  1261  0718                     	;# 
  1262  0718                     	;# 
  1263  0719                     	;# 
  1264  071A                     	;# 
  1265  071A                     	;# 
  1266  071B                     	;# 
  1267  071C                     	;# 
  1268  071D                     	;# 
  1269  0791                     	;# 
  1270  0791                     	;# 
  1271  0792                     	;# 
  1272  0793                     	;# 
  1273  0793                     	;# 
  1274  0794                     	;# 
  1275  0795                     	;# 
  1276  0795                     	;# 
  1277  0796                     	;# 
  1278  0797                     	;# 
  1279  0797                     	;# 
  1280  0798                     	;# 
  1281  0799                     	;# 
  1282  079A                     	;# 
  1283  080C                     	;# 
  1284  080C                     	;# 
  1285  080D                     	;# 
  1286  080E                     	;# 
  1287  080E                     	;# 
  1288  080F                     	;# 
  1289  0810                     	;# 
  1290  0810                     	;# 
  1291  0811                     	;# 
  1292  0812                     	;# 
  1293  0812                     	;# 
  1294  0813                     	;# 
  1295  0814                     	;# 
  1296  0815                     	;# 
  1297  0816                     	;# 
  1298  0817                     	;# 
  1299  0818                     	;# 
  1300  0819                     	;# 
  1301  081A                     	;# 
  1302  081A                     	;# 
  1303  081B                     	;# 
  1304  081C                     	;# 
  1305  081C                     	;# 
  1306  081D                     	;# 
  1307  088C                     	;# 
  1308  088D                     	;# 
  1309  088E                     	;# 
  1310  088F                     	;# 
  1311  088F                     	;# 
  1312  0890                     	;# 
  1313  0891                     	;# 
  1314  0892                     	;# 
  1315  0893                     	;# 
  1316  0893                     	;# 
  1317  0894                     	;# 
  1318  0895                     	;# 
  1319  0896                     	;# 
  1320  0897                     	;# 
  1321  0897                     	;# 
  1322  0898                     	;# 
  1323  0899                     	;# 
  1324  0D8C                     	;# 
  1325  0D8C                     	;# 
  1326  0D8D                     	;# 
  1327  0D8E                     	;# 
  1328  0D8F                     	;# 
  1329  0D8F                     	;# 
  1330  0D90                     	;# 
  1331  0D91                     	;# 
  1332  0D92                     	;# 
  1333  0D92                     	;# 
  1334  0D93                     	;# 
  1335  0D94                     	;# 
  1336  0D95                     	;# 
  1337  0D95                     	;# 
  1338  0D96                     	;# 
  1339  0D97                     	;# 
  1340  0D98                     	;# 
  1341  0D99                     	;# 
  1342  0D9A                     	;# 
  1343  0D9B                     	;# 
  1344  0D9C                     	;# 
  1345  0D9D                     	;# 
  1346  0D9E                     	;# 
  1347  0D9E                     	;# 
  1348  0D9F                     	;# 
  1349  0DA0                     	;# 
  1350  0DA1                     	;# 
  1351  0DA1                     	;# 
  1352  0DA2                     	;# 
  1353  0DA3                     	;# 
  1354  0DA4                     	;# 
  1355  0DA4                     	;# 
  1356  0DA5                     	;# 
  1357  0DA6                     	;# 
  1358  0DA7                     	;# 
  1359  0DA7                     	;# 
  1360  0DA8                     	;# 
  1361  0DA9                     	;# 
  1362  0DAA                     	;# 
  1363  0DAB                     	;# 
  1364  0DAC                     	;# 
  1365  0DAD                     	;# 
  1366  0DAE                     	;# 
  1367  0DAF                     	;# 
  1368  0E0F                     	;# 
  1369  0E10                     	;# 
  1370  0E11                     	;# 
  1371  0E12                     	;# 
  1372  0E13                     	;# 
  1373  0E14                     	;# 
  1374  0E15                     	;# 
  1375  0E16                     	;# 
  1376  0E17                     	;# 
  1377  0E18                     	;# 
  1378  0E19                     	;# 
  1379  0E1A                     	;# 
  1380  0E1B                     	;# 
  1381  0E1C                     	;# 
  1382  0E1D                     	;# 
  1383  0E1E                     	;# 
  1384  0E1F                     	;# 
  1385  0E20                     	;# 
  1386  0E21                     	;# 
  1387  0E22                     	;# 
  1388  0E23                     	;# 
  1389  0E24                     	;# 
  1390  0E25                     	;# 
  1391  0E26                     	;# 
  1392  0E27                     	;# 
  1393  0E28                     	;# 
  1394  0E29                     	;# 
  1395  0E2A                     	;# 
  1396  0E2B                     	;# 
  1397  0E2C                     	;# 
  1398  0E2D                     	;# 
  1399  0E2E                     	;# 
  1400  0E90                     	;# 
  1401  0E91                     	;# 
  1402  0E92                     	;# 
  1403  0E94                     	;# 
  1404  0E95                     	;# 
  1405  0E9C                     	;# 
  1406  0E9D                     	;# 
  1407  0E9E                     	;# 
  1408  0E9F                     	;# 
  1409  0EA0                     	;# 
  1410  0EA1                     	;# 
  1411  0EA2                     	;# 
  1412  0EA3                     	;# 
  1413  0EA4                     	;# 
  1414  0EA5                     	;# 
  1415  0EA6                     	;# 
  1416  0EA7                     	;# 
  1417  0F0F                     	;# 
  1418  0F10                     	;# 
  1419  0F11                     	;# 
  1420  0F12                     	;# 
  1421  0F13                     	;# 
  1422  0F14                     	;# 
  1423  0F15                     	;# 
  1424  0F16                     	;# 
  1425  0F17                     	;# 
  1426  0F18                     	;# 
  1427  0F19                     	;# 
  1428  0F1A                     	;# 
  1429  0F1B                     	;# 
  1430  0F1C                     	;# 
  1431  0F1D                     	;# 
  1432  0F1E                     	;# 
  1433  0F1F                     	;# 
  1434  0F20                     	;# 
  1435  0F21                     	;# 
  1436  0F22                     	;# 
  1437  0F23                     	;# 
  1438  0F24                     	;# 
  1439  0F25                     	;# 
  1440  0F26                     	;# 
  1441  0F27                     	;# 
  1442  0F28                     	;# 
  1443  0F29                     	;# 
  1444  0F2A                     	;# 
  1445  0F2B                     	;# 
  1446  0F2C                     	;# 
  1447  0F2D                     	;# 
  1448  0F2E                     	;# 
  1449  0F2F                     	;# 
  1450  0F30                     	;# 
  1451  0F31                     	;# 
  1452  0F32                     	;# 
  1453  0F33                     	;# 
  1454  0F34                     	;# 
  1455  0F35                     	;# 
  1456  0F36                     	;# 
  1457  0F37                     	;# 
  1458  0FE4                     	;# 
  1459  0FE5                     	;# 
  1460  0FE6                     	;# 
  1461  0FE7                     	;# 
  1462  0FE8                     	;# 
  1463  0FE9                     	;# 
  1464  0FEA                     	;# 
  1465  0FEB                     	;# 
  1466  0FED                     	;# 
  1467  0FEE                     	;# 
  1468  0FEF                     	;# 
  1469  0000                     	;# 
  1470  0001                     	;# 
  1471  0002                     	;# 
  1472  0003                     	;# 
  1473  0004                     	;# 
  1474  0005                     	;# 
  1475  0006                     	;# 
  1476  0007                     	;# 
  1477  0008                     	;# 
  1478  0009                     	;# 
  1479  000A                     	;# 
  1480  000B                     	;# 
  1481  000C                     	;# 
  1482  000D                     	;# 
  1483  000E                     	;# 
  1484  0010                     	;# 
  1485  0011                     	;# 
  1486  0012                     	;# 
  1487  0013                     	;# 
  1488  0014                     	;# 
  1489  0015                     	;# 
  1490  0016                     	;# 
  1491  0016                     	;# 
  1492  0017                     	;# 
  1493  0018                     	;# 
  1494  0019                     	;# 
  1495  001A                     	;# 
  1496  001A                     	;# 
  1497  001B                     	;# 
  1498  001B                     	;# 
  1499  001C                     	;# 
  1500  001D                     	;# 
  1501  001E                     	;# 
  1502  001F                     	;# 
  1503  008C                     	;# 
  1504  008D                     	;# 
  1505  008E                     	;# 
  1506  0090                     	;# 
  1507  0091                     	;# 
  1508  0092                     	;# 
  1509  0093                     	;# 
  1510  0094                     	;# 
  1511  0095                     	;# 
  1512  0096                     	;# 
  1513  0098                     	;# 
  1514  0099                     	;# 
  1515  009A                     	;# 
  1516  009B                     	;# 
  1517  009B                     	;# 
  1518  009C                     	;# 
  1519  009D                     	;# 
  1520  009E                     	;# 
  1521  009F                     	;# 
  1522  010C                     	;# 
  1523  010D                     	;# 
  1524  010E                     	;# 
  1525  0111                     	;# 
  1526  0112                     	;# 
  1527  0113                     	;# 
  1528  0114                     	;# 
  1529  0115                     	;# 
  1530  0116                     	;# 
  1531  0117                     	;# 
  1532  0118                     	;# 
  1533  0119                     	;# 
  1534  011C                     	;# 
  1535  018C                     	;# 
  1536  018D                     	;# 
  1537  018E                     	;# 
  1538  0191                     	;# 
  1539  0191                     	;# 
  1540  0192                     	;# 
  1541  0193                     	;# 
  1542  0193                     	;# 
  1543  0194                     	;# 
  1544  0195                     	;# 
  1545  0196                     	;# 
  1546  0197                     	;# 
  1547  0199                     	;# 
  1548  0199                     	;# 
  1549  0199                     	;# 
  1550  019A                     	;# 
  1551  019A                     	;# 
  1552  019A                     	;# 
  1553  019B                     	;# 
  1554  019B                     	;# 
  1555  019B                     	;# 
  1556  019B                     	;# 
  1557  019B                     	;# 
  1558  019C                     	;# 
  1559  019C                     	;# 
  1560  019C                     	;# 
  1561  019D                     	;# 
  1562  019D                     	;# 
  1563  019D                     	;# 
  1564  019E                     	;# 
  1565  019E                     	;# 
  1566  019E                     	;# 
  1567  019F                     	;# 
  1568  019F                     	;# 
  1569  019F                     	;# 
  1570  019F                     	;# 
  1571  019F                     	;# 
  1572  020C                     	;# 
  1573  020D                     	;# 
  1574  020E                     	;# 
  1575  0211                     	;# 
  1576  0211                     	;# 
  1577  0212                     	;# 
  1578  0212                     	;# 
  1579  0213                     	;# 
  1580  0213                     	;# 
  1581  0214                     	;# 
  1582  0214                     	;# 
  1583  0215                     	;# 
  1584  0215                     	;# 
  1585  0215                     	;# 
  1586  0215                     	;# 
  1587  0216                     	;# 
  1588  0216                     	;# 
  1589  0217                     	;# 
  1590  0217                     	;# 
  1591  028C                     	;# 
  1592  028D                     	;# 
  1593  028E                     	;# 
  1594  0291                     	;# 
  1595  0291                     	;# 
  1596  0292                     	;# 
  1597  0293                     	;# 
  1598  0294                     	;# 
  1599  0298                     	;# 
  1600  0298                     	;# 
  1601  0299                     	;# 
  1602  029A                     	;# 
  1603  029B                     	;# 
  1604  029E                     	;# 
  1605  030C                     	;# 
  1606  030D                     	;# 
  1607  030E                     	;# 
  1608  038C                     	;# 
  1609  038D                     	;# 
  1610  038E                     	;# 
  1611  0391                     	;# 
  1612  0392                     	;# 
  1613  0393                     	;# 
  1614  0394                     	;# 
  1615  0395                     	;# 
  1616  0396                     	;# 
  1617  0397                     	;# 
  1618  0398                     	;# 
  1619  0399                     	;# 
  1620  040E                     	;# 
  1621  0413                     	;# 
  1622  0413                     	;# 
  1623  0414                     	;# 
  1624  0414                     	;# 
  1625  0415                     	;# 
  1626  0416                     	;# 
  1627  0417                     	;# 
  1628  0418                     	;# 
  1629  041A                     	;# 
  1630  041A                     	;# 
  1631  041B                     	;# 
  1632  041B                     	;# 
  1633  041C                     	;# 
  1634  041D                     	;# 
  1635  041E                     	;# 
  1636  041F                     	;# 
  1637  0493                     	;# 
  1638  0494                     	;# 
  1639  0495                     	;# 
  1640  0496                     	;# 
  1641  049A                     	;# 
  1642  049B                     	;# 
  1643  049C                     	;# 
  1644  049D                     	;# 
  1645  058C                     	;# 
  1646  058C                     	;# 
  1647  058D                     	;# 
  1648  058E                     	;# 
  1649  058E                     	;# 
  1650  058F                     	;# 
  1651  0590                     	;# 
  1652  0590                     	;# 
  1653  0591                     	;# 
  1654  0592                     	;# 
  1655  0592                     	;# 
  1656  0593                     	;# 
  1657  0594                     	;# 
  1658  0594                     	;# 
  1659  0595                     	;# 
  1660  0596                     	;# 
  1661  0596                     	;# 
  1662  0597                     	;# 
  1663  0598                     	;# 
  1664  0599                     	;# 
  1665  059A                     	;# 
  1666  059B                     	;# 
  1667  059B                     	;# 
  1668  059C                     	;# 
  1669  059D                     	;# 
  1670  060C                     	;# 
  1671  060C                     	;# 
  1672  060D                     	;# 
  1673  060E                     	;# 
  1674  060F                     	;# 
  1675  060F                     	;# 
  1676  0610                     	;# 
  1677  0611                     	;# 
  1678  0612                     	;# 
  1679  0613                     	;# 
  1680  0614                     	;# 
  1681  0617                     	;# 
  1682  0618                     	;# 
  1683  0619                     	;# 
  1684  061A                     	;# 
  1685  061B                     	;# 
  1686  061C                     	;# 
  1687  0691                     	;# 
  1688  0692                     	;# 
  1689  0693                     	;# 
  1690  0694                     	;# 
  1691  0695                     	;# 
  1692  0696                     	;# 
  1693  0697                     	;# 
  1694  0699                     	;# 
  1695  069A                     	;# 
  1696  0711                     	;# 
  1697  0712                     	;# 
  1698  0713                     	;# 
  1699  0714                     	;# 
  1700  0715                     	;# 
  1701  0718                     	;# 
  1702  0718                     	;# 
  1703  0719                     	;# 
  1704  071A                     	;# 
  1705  071A                     	;# 
  1706  071B                     	;# 
  1707  071C                     	;# 
  1708  071D                     	;# 
  1709  0791                     	;# 
  1710  0791                     	;# 
  1711  0792                     	;# 
  1712  0793                     	;# 
  1713  0793                     	;# 
  1714  0794                     	;# 
  1715  0795                     	;# 
  1716  0795                     	;# 
  1717  0796                     	;# 
  1718  0797                     	;# 
  1719  0797                     	;# 
  1720  0798                     	;# 
  1721  0799                     	;# 
  1722  079A                     	;# 
  1723  080C                     	;# 
  1724  080C                     	;# 
  1725  080D                     	;# 
  1726  080E                     	;# 
  1727  080E                     	;# 
  1728  080F                     	;# 
  1729  0810                     	;# 
  1730  0810                     	;# 
  1731  0811                     	;# 
  1732  0812                     	;# 
  1733  0812                     	;# 
  1734  0813                     	;# 
  1735  0814                     	;# 
  1736  0815                     	;# 
  1737  0816                     	;# 
  1738  0817                     	;# 
  1739  0818                     	;# 
  1740  0819                     	;# 
  1741  081A                     	;# 
  1742  081A                     	;# 
  1743  081B                     	;# 
  1744  081C                     	;# 
  1745  081C                     	;# 
  1746  081D                     	;# 
  1747  088C                     	;# 
  1748  088D                     	;# 
  1749  088E                     	;# 
  1750  088F                     	;# 
  1751  088F                     	;# 
  1752  0890                     	;# 
  1753  0891                     	;# 
  1754  0892                     	;# 
  1755  0893                     	;# 
  1756  0893                     	;# 
  1757  0894                     	;# 
  1758  0895                     	;# 
  1759  0896                     	;# 
  1760  0897                     	;# 
  1761  0897                     	;# 
  1762  0898                     	;# 
  1763  0899                     	;# 
  1764  0D8C                     	;# 
  1765  0D8C                     	;# 
  1766  0D8D                     	;# 
  1767  0D8E                     	;# 
  1768  0D8F                     	;# 
  1769  0D8F                     	;# 
  1770  0D90                     	;# 
  1771  0D91                     	;# 
  1772  0D92                     	;# 
  1773  0D92                     	;# 
  1774  0D93                     	;# 
  1775  0D94                     	;# 
  1776  0D95                     	;# 
  1777  0D95                     	;# 
  1778  0D96                     	;# 
  1779  0D97                     	;# 
  1780  0D98                     	;# 
  1781  0D99                     	;# 
  1782  0D9A                     	;# 
  1783  0D9B                     	;# 
  1784  0D9C                     	;# 
  1785  0D9D                     	;# 
  1786  0D9E                     	;# 
  1787  0D9E                     	;# 
  1788  0D9F                     	;# 
  1789  0DA0                     	;# 
  1790  0DA1                     	;# 
  1791  0DA1                     	;# 
  1792  0DA2                     	;# 
  1793  0DA3                     	;# 
  1794  0DA4                     	;# 
  1795  0DA4                     	;# 
  1796  0DA5                     	;# 
  1797  0DA6                     	;# 
  1798  0DA7                     	;# 
  1799  0DA7                     	;# 
  1800  0DA8                     	;# 
  1801  0DA9                     	;# 
  1802  0DAA                     	;# 
  1803  0DAB                     	;# 
  1804  0DAC                     	;# 
  1805  0DAD                     	;# 
  1806  0DAE                     	;# 
  1807  0DAF                     	;# 
  1808  0E0F                     	;# 
  1809  0E10                     	;# 
  1810  0E11                     	;# 
  1811  0E12                     	;# 
  1812  0E13                     	;# 
  1813  0E14                     	;# 
  1814  0E15                     	;# 
  1815  0E16                     	;# 
  1816  0E17                     	;# 
  1817  0E18                     	;# 
  1818  0E19                     	;# 
  1819  0E1A                     	;# 
  1820  0E1B                     	;# 
  1821  0E1C                     	;# 
  1822  0E1D                     	;# 
  1823  0E1E                     	;# 
  1824  0E1F                     	;# 
  1825  0E20                     	;# 
  1826  0E21                     	;# 
  1827  0E22                     	;# 
  1828  0E23                     	;# 
  1829  0E24                     	;# 
  1830  0E25                     	;# 
  1831  0E26                     	;# 
  1832  0E27                     	;# 
  1833  0E28                     	;# 
  1834  0E29                     	;# 
  1835  0E2A                     	;# 
  1836  0E2B                     	;# 
  1837  0E2C                     	;# 
  1838  0E2D                     	;# 
  1839  0E2E                     	;# 
  1840  0E90                     	;# 
  1841  0E91                     	;# 
  1842  0E92                     	;# 
  1843  0E94                     	;# 
  1844  0E95                     	;# 
  1845  0E9C                     	;# 
  1846  0E9D                     	;# 
  1847  0E9E                     	;# 
  1848  0E9F                     	;# 
  1849  0EA0                     	;# 
  1850  0EA1                     	;# 
  1851  0EA2                     	;# 
  1852  0EA3                     	;# 
  1853  0EA4                     	;# 
  1854  0EA5                     	;# 
  1855  0EA6                     	;# 
  1856  0EA7                     	;# 
  1857  0F0F                     	;# 
  1858  0F10                     	;# 
  1859  0F11                     	;# 
  1860  0F12                     	;# 
  1861  0F13                     	;# 
  1862  0F14                     	;# 
  1863  0F15                     	;# 
  1864  0F16                     	;# 
  1865  0F17                     	;# 
  1866  0F18                     	;# 
  1867  0F19                     	;# 
  1868  0F1A                     	;# 
  1869  0F1B                     	;# 
  1870  0F1C                     	;# 
  1871  0F1D                     	;# 
  1872  0F1E                     	;# 
  1873  0F1F                     	;# 
  1874  0F20                     	;# 
  1875  0F21                     	;# 
  1876  0F22                     	;# 
  1877  0F23                     	;# 
  1878  0F24                     	;# 
  1879  0F25                     	;# 
  1880  0F26                     	;# 
  1881  0F27                     	;# 
  1882  0F28                     	;# 
  1883  0F29                     	;# 
  1884  0F2A                     	;# 
  1885  0F2B                     	;# 
  1886  0F2C                     	;# 
  1887  0F2D                     	;# 
  1888  0F2E                     	;# 
  1889  0F2F                     	;# 
  1890  0F30                     	;# 
  1891  0F31                     	;# 
  1892  0F32                     	;# 
  1893  0F33                     	;# 
  1894  0F34                     	;# 
  1895  0F35                     	;# 
  1896  0F36                     	;# 
  1897  0F37                     	;# 
  1898  0FE4                     	;# 
  1899  0FE5                     	;# 
  1900  0FE6                     	;# 
  1901  0FE7                     	;# 
  1902  0FE8                     	;# 
  1903  0FE9                     	;# 
  1904  0FEA                     	;# 
  1905  0FEB                     	;# 
  1906  0FED                     	;# 
  1907  0FEE                     	;# 
  1908  0FEF                     	;# 
  1909  0000                     	;# 
  1910  0001                     	;# 
  1911  0002                     	;# 
  1912  0003                     	;# 
  1913  0004                     	;# 
  1914  0005                     	;# 
  1915  0006                     	;# 
  1916  0007                     	;# 
  1917  0008                     	;# 
  1918  0009                     	;# 
  1919  000A                     	;# 
  1920  000B                     	;# 
  1921  000C                     	;# 
  1922  000D                     	;# 
  1923  000E                     	;# 
  1924  0010                     	;# 
  1925  0011                     	;# 
  1926  0012                     	;# 
  1927  0013                     	;# 
  1928  0014                     	;# 
  1929  0015                     	;# 
  1930  0016                     	;# 
  1931  0016                     	;# 
  1932  0017                     	;# 
  1933  0018                     	;# 
  1934  0019                     	;# 
  1935  001A                     	;# 
  1936  001A                     	;# 
  1937  001B                     	;# 
  1938  001B                     	;# 
  1939  001C                     	;# 
  1940  001D                     	;# 
  1941  001E                     	;# 
  1942  001F                     	;# 
  1943  008C                     	;# 
  1944  008D                     	;# 
  1945  008E                     	;# 
  1946  0090                     	;# 
  1947  0091                     	;# 
  1948  0092                     	;# 
  1949  0093                     	;# 
  1950  0094                     	;# 
  1951  0095                     	;# 
  1952  0096                     	;# 
  1953  0098                     	;# 
  1954  0099                     	;# 
  1955  009A                     	;# 
  1956  009B                     	;# 
  1957  009B                     	;# 
  1958  009C                     	;# 
  1959  009D                     	;# 
  1960  009E                     	;# 
  1961  009F                     	;# 
  1962  010C                     	;# 
  1963  010D                     	;# 
  1964  010E                     	;# 
  1965  0111                     	;# 
  1966  0112                     	;# 
  1967  0113                     	;# 
  1968  0114                     	;# 
  1969  0115                     	;# 
  1970  0116                     	;# 
  1971  0117                     	;# 
  1972  0118                     	;# 
  1973  0119                     	;# 
  1974  011C                     	;# 
  1975  018C                     	;# 
  1976  018D                     	;# 
  1977  018E                     	;# 
  1978  0191                     	;# 
  1979  0191                     	;# 
  1980  0192                     	;# 
  1981  0193                     	;# 
  1982  0193                     	;# 
  1983  0194                     	;# 
  1984  0195                     	;# 
  1985  0196                     	;# 
  1986  0197                     	;# 
  1987  0199                     	;# 
  1988  0199                     	;# 
  1989  0199                     	;# 
  1990  019A                     	;# 
  1991  019A                     	;# 
  1992  019A                     	;# 
  1993  019B                     	;# 
  1994  019B                     	;# 
  1995  019B                     	;# 
  1996  019B                     	;# 
  1997  019B                     	;# 
  1998  019C                     	;# 
  1999  019C                     	;# 
  2000  019C                     	;# 
  2001  019D                     	;# 
  2002  019D                     	;# 
  2003  019D                     	;# 
  2004  019E                     	;# 
  2005  019E                     	;# 
  2006  019E                     	;# 
  2007  019F                     	;# 
  2008  019F                     	;# 
  2009  019F                     	;# 
  2010  019F                     	;# 
  2011  019F                     	;# 
  2012  020C                     	;# 
  2013  020D                     	;# 
  2014  020E                     	;# 
  2015  0211                     	;# 
  2016  0211                     	;# 
  2017  0212                     	;# 
  2018  0212                     	;# 
  2019  0213                     	;# 
  2020  0213                     	;# 
  2021  0214                     	;# 
  2022  0214                     	;# 
  2023  0215                     	;# 
  2024  0215                     	;# 
  2025  0215                     	;# 
  2026  0215                     	;# 
  2027  0216                     	;# 
  2028  0216                     	;# 
  2029  0217                     	;# 
  2030  0217                     	;# 
  2031  028C                     	;# 
  2032  028D                     	;# 
  2033  028E                     	;# 
  2034  0291                     	;# 
  2035  0291                     	;# 
  2036  0292                     	;# 
  2037  0293                     	;# 
  2038  0294                     	;# 
  2039  0298                     	;# 
  2040  0298                     	;# 
  2041  0299                     	;# 
  2042  029A                     	;# 
  2043  029B                     	;# 
  2044  029E                     	;# 
  2045  030C                     	;# 
  2046  030D                     	;# 
  2047  030E                     	;# 
  2048  038C                     	;# 
  2049  038D                     	;# 
  2050  038E                     	;# 
  2051  0391                     	;# 
  2052  0392                     	;# 
  2053  0393                     	;# 
  2054  0394                     	;# 
  2055  0395                     	;# 
  2056  0396                     	;# 
  2057  0397                     	;# 
  2058  0398                     	;# 
  2059  0399                     	;# 
  2060  040E                     	;# 
  2061  0413                     	;# 
  2062  0413                     	;# 
  2063  0414                     	;# 
  2064  0414                     	;# 
  2065  0415                     	;# 
  2066  0416                     	;# 
  2067  0417                     	;# 
  2068  0418                     	;# 
  2069  041A                     	;# 
  2070  041A                     	;# 
  2071  041B                     	;# 
  2072  041B                     	;# 
  2073  041C                     	;# 
  2074  041D                     	;# 
  2075  041E                     	;# 
  2076  041F                     	;# 
  2077  0493                     	;# 
  2078  0494                     	;# 
  2079  0495                     	;# 
  2080  0496                     	;# 
  2081  049A                     	;# 
  2082  049B                     	;# 
  2083  049C                     	;# 
  2084  049D                     	;# 
  2085  058C                     	;# 
  2086  058C                     	;# 
  2087  058D                     	;# 
  2088  058E                     	;# 
  2089  058E                     	;# 
  2090  058F                     	;# 
  2091  0590                     	;# 
  2092  0590                     	;# 
  2093  0591                     	;# 
  2094  0592                     	;# 
  2095  0592                     	;# 
  2096  0593                     	;# 
  2097  0594                     	;# 
  2098  0594                     	;# 
  2099  0595                     	;# 
  2100  0596                     	;# 
  2101  0596                     	;# 
  2102  0597                     	;# 
  2103  0598                     	;# 
  2104  0599                     	;# 
  2105  059A                     	;# 
  2106  059B                     	;# 
  2107  059B                     	;# 
  2108  059C                     	;# 
  2109  059D                     	;# 
  2110  060C                     	;# 
  2111  060C                     	;# 
  2112  060D                     	;# 
  2113  060E                     	;# 
  2114  060F                     	;# 
  2115  060F                     	;# 
  2116  0610                     	;# 
  2117  0611                     	;# 
  2118  0612                     	;# 
  2119  0613                     	;# 
  2120  0614                     	;# 
  2121  0617                     	;# 
  2122  0618                     	;# 
  2123  0619                     	;# 
  2124  061A                     	;# 
  2125  061B                     	;# 
  2126  061C                     	;# 
  2127  0691                     	;# 
  2128  0692                     	;# 
  2129  0693                     	;# 
  2130  0694                     	;# 
  2131  0695                     	;# 
  2132  0696                     	;# 
  2133  0697                     	;# 
  2134  0699                     	;# 
  2135  069A                     	;# 
  2136  0711                     	;# 
  2137  0712                     	;# 
  2138  0713                     	;# 
  2139  0714                     	;# 
  2140  0715                     	;# 
  2141  0718                     	;# 
  2142  0718                     	;# 
  2143  0719                     	;# 
  2144  071A                     	;# 
  2145  071A                     	;# 
  2146  071B                     	;# 
  2147  071C                     	;# 
  2148  071D                     	;# 
  2149  0791                     	;# 
  2150  0791                     	;# 
  2151  0792                     	;# 
  2152  0793                     	;# 
  2153  0793                     	;# 
  2154  0794                     	;# 
  2155  0795                     	;# 
  2156  0795                     	;# 
  2157  0796                     	;# 
  2158  0797                     	;# 
  2159  0797                     	;# 
  2160  0798                     	;# 
  2161  0799                     	;# 
  2162  079A                     	;# 
  2163  080C                     	;# 
  2164  080C                     	;# 
  2165  080D                     	;# 
  2166  080E                     	;# 
  2167  080E                     	;# 
  2168  080F                     	;# 
  2169  0810                     	;# 
  2170  0810                     	;# 
  2171  0811                     	;# 
  2172  0812                     	;# 
  2173  0812                     	;# 
  2174  0813                     	;# 
  2175  0814                     	;# 
  2176  0815                     	;# 
  2177  0816                     	;# 
  2178  0817                     	;# 
  2179  0818                     	;# 
  2180  0819                     	;# 
  2181  081A                     	;# 
  2182  081A                     	;# 
  2183  081B                     	;# 
  2184  081C                     	;# 
  2185  081C                     	;# 
  2186  081D                     	;# 
  2187  088C                     	;# 
  2188  088D                     	;# 
  2189  088E                     	;# 
  2190  088F                     	;# 
  2191  088F                     	;# 
  2192  0890                     	;# 
  2193  0891                     	;# 
  2194  0892                     	;# 
  2195  0893                     	;# 
  2196  0893                     	;# 
  2197  0894                     	;# 
  2198  0895                     	;# 
  2199  0896                     	;# 
  2200  0897                     	;# 
  2201  0897                     	;# 
  2202  0898                     	;# 
  2203  0899                     	;# 
  2204  0D8C                     	;# 
  2205  0D8C                     	;# 
  2206  0D8D                     	;# 
  2207  0D8E                     	;# 
  2208  0D8F                     	;# 
  2209  0D8F                     	;# 
  2210  0D90                     	;# 
  2211  0D91                     	;# 
  2212  0D92                     	;# 
  2213  0D92                     	;# 
  2214  0D93                     	;# 
  2215  0D94                     	;# 
  2216  0D95                     	;# 
  2217  0D95                     	;# 
  2218  0D96                     	;# 
  2219  0D97                     	;# 
  2220  0D98                     	;# 
  2221  0D99                     	;# 
  2222  0D9A                     	;# 
  2223  0D9B                     	;# 
  2224  0D9C                     	;# 
  2225  0D9D                     	;# 
  2226  0D9E                     	;# 
  2227  0D9E                     	;# 
  2228  0D9F                     	;# 
  2229  0DA0                     	;# 
  2230  0DA1                     	;# 
  2231  0DA1                     	;# 
  2232  0DA2                     	;# 
  2233  0DA3                     	;# 
  2234  0DA4                     	;# 
  2235  0DA4                     	;# 
  2236  0DA5                     	;# 
  2237  0DA6                     	;# 
  2238  0DA7                     	;# 
  2239  0DA7                     	;# 
  2240  0DA8                     	;# 
  2241  0DA9                     	;# 
  2242  0DAA                     	;# 
  2243  0DAB                     	;# 
  2244  0DAC                     	;# 
  2245  0DAD                     	;# 
  2246  0DAE                     	;# 
  2247  0DAF                     	;# 
  2248  0E0F                     	;# 
  2249  0E10                     	;# 
  2250  0E11                     	;# 
  2251  0E12                     	;# 
  2252  0E13                     	;# 
  2253  0E14                     	;# 
  2254  0E15                     	;# 
  2255  0E16                     	;# 
  2256  0E17                     	;# 
  2257  0E18                     	;# 
  2258  0E19                     	;# 
  2259  0E1A                     	;# 
  2260  0E1B                     	;# 
  2261  0E1C                     	;# 
  2262  0E1D                     	;# 
  2263  0E1E                     	;# 
  2264  0E1F                     	;# 
  2265  0E20                     	;# 
  2266  0E21                     	;# 
  2267  0E22                     	;# 
  2268  0E23                     	;# 
  2269  0E24                     	;# 
  2270  0E25                     	;# 
  2271  0E26                     	;# 
  2272  0E27                     	;# 
  2273  0E28                     	;# 
  2274  0E29                     	;# 
  2275  0E2A                     	;# 
  2276  0E2B                     	;# 
  2277  0E2C                     	;# 
  2278  0E2D                     	;# 
  2279  0E2E                     	;# 
  2280  0E90                     	;# 
  2281  0E91                     	;# 
  2282  0E92                     	;# 
  2283  0E94                     	;# 
  2284  0E95                     	;# 
  2285  0E9C                     	;# 
  2286  0E9D                     	;# 
  2287  0E9E                     	;# 
  2288  0E9F                     	;# 
  2289  0EA0                     	;# 
  2290  0EA1                     	;# 
  2291  0EA2                     	;# 
  2292  0EA3                     	;# 
  2293  0EA4                     	;# 
  2294  0EA5                     	;# 
  2295  0EA6                     	;# 
  2296  0EA7                     	;# 
  2297  0F0F                     	;# 
  2298  0F10                     	;# 
  2299  0F11                     	;# 
  2300  0F12                     	;# 
  2301  0F13                     	;# 
  2302  0F14                     	;# 
  2303  0F15                     	;# 
  2304  0F16                     	;# 
  2305  0F17                     	;# 
  2306  0F18                     	;# 
  2307  0F19                     	;# 
  2308  0F1A                     	;# 
  2309  0F1B                     	;# 
  2310  0F1C                     	;# 
  2311  0F1D                     	;# 
  2312  0F1E                     	;# 
  2313  0F1F                     	;# 
  2314  0F20                     	;# 
  2315  0F21                     	;# 
  2316  0F22                     	;# 
  2317  0F23                     	;# 
  2318  0F24                     	;# 
  2319  0F25                     	;# 
  2320  0F26                     	;# 
  2321  0F27                     	;# 
  2322  0F28                     	;# 
  2323  0F29                     	;# 
  2324  0F2A                     	;# 
  2325  0F2B                     	;# 
  2326  0F2C                     	;# 
  2327  0F2D                     	;# 
  2328  0F2E                     	;# 
  2329  0F2F                     	;# 
  2330  0F30                     	;# 
  2331  0F31                     	;# 
  2332  0F32                     	;# 
  2333  0F33                     	;# 
  2334  0F34                     	;# 
  2335  0F35                     	;# 
  2336  0F36                     	;# 
  2337  0F37                     	;# 
  2338  0FE4                     	;# 
  2339  0FE5                     	;# 
  2340  0FE6                     	;# 
  2341  0FE7                     	;# 
  2342  0FE8                     	;# 
  2343  0FE9                     	;# 
  2344  0FEA                     	;# 
  2345  0FEB                     	;# 
  2346  0FED                     	;# 
  2347  0FEE                     	;# 
  2348  0FEF                     	;# 
  2349  0000                     	;# 
  2350  0001                     	;# 
  2351  0002                     	;# 
  2352  0003                     	;# 
  2353  0004                     	;# 
  2354  0005                     	;# 
  2355  0006                     	;# 
  2356  0007                     	;# 
  2357  0008                     	;# 
  2358  0009                     	;# 
  2359  000A                     	;# 
  2360  000B                     	;# 
  2361  000C                     	;# 
  2362  000D                     	;# 
  2363  000E                     	;# 
  2364  0010                     	;# 
  2365  0011                     	;# 
  2366  0012                     	;# 
  2367  0013                     	;# 
  2368  0014                     	;# 
  2369  0015                     	;# 
  2370  0016                     	;# 
  2371  0016                     	;# 
  2372  0017                     	;# 
  2373  0018                     	;# 
  2374  0019                     	;# 
  2375  001A                     	;# 
  2376  001A                     	;# 
  2377  001B                     	;# 
  2378  001B                     	;# 
  2379  001C                     	;# 
  2380  001D                     	;# 
  2381  001E                     	;# 
  2382  001F                     	;# 
  2383  008C                     	;# 
  2384  008D                     	;# 
  2385  008E                     	;# 
  2386  0090                     	;# 
  2387  0091                     	;# 
  2388  0092                     	;# 
  2389  0093                     	;# 
  2390  0094                     	;# 
  2391  0095                     	;# 
  2392  0096                     	;# 
  2393  0098                     	;# 
  2394  0099                     	;# 
  2395  009A                     	;# 
  2396  009B                     	;# 
  2397  009B                     	;# 
  2398  009C                     	;# 
  2399  009D                     	;# 
  2400  009E                     	;# 
  2401  009F                     	;# 
  2402  010C                     	;# 
  2403  010D                     	;# 
  2404  010E                     	;# 
  2405  0111                     	;# 
  2406  0112                     	;# 
  2407  0113                     	;# 
  2408  0114                     	;# 
  2409  0115                     	;# 
  2410  0116                     	;# 
  2411  0117                     	;# 
  2412  0118                     	;# 
  2413  0119                     	;# 
  2414  011C                     	;# 
  2415  018C                     	;# 
  2416  018D                     	;# 
  2417  018E                     	;# 
  2418  0191                     	;# 
  2419  0191                     	;# 
  2420  0192                     	;# 
  2421  0193                     	;# 
  2422  0193                     	;# 
  2423  0194                     	;# 
  2424  0195                     	;# 
  2425  0196                     	;# 
  2426  0197                     	;# 
  2427  0199                     	;# 
  2428  0199                     	;# 
  2429  0199                     	;# 
  2430  019A                     	;# 
  2431  019A                     	;# 
  2432  019A                     	;# 
  2433  019B                     	;# 
  2434  019B                     	;# 
  2435  019B                     	;# 
  2436  019B                     	;# 
  2437  019B                     	;# 
  2438  019C                     	;# 
  2439  019C                     	;# 
  2440  019C                     	;# 
  2441  019D                     	;# 
  2442  019D                     	;# 
  2443  019D                     	;# 
  2444  019E                     	;# 
  2445  019E                     	;# 
  2446  019E                     	;# 
  2447  019F                     	;# 
  2448  019F                     	;# 
  2449  019F                     	;# 
  2450  019F                     	;# 
  2451  019F                     	;# 
  2452  020C                     	;# 
  2453  020D                     	;# 
  2454  020E                     	;# 
  2455  0211                     	;# 
  2456  0211                     	;# 
  2457  0212                     	;# 
  2458  0212                     	;# 
  2459  0213                     	;# 
  2460  0213                     	;# 
  2461  0214                     	;# 
  2462  0214                     	;# 
  2463  0215                     	;# 
  2464  0215                     	;# 
  2465  0215                     	;# 
  2466  0215                     	;# 
  2467  0216                     	;# 
  2468  0216                     	;# 
  2469  0217                     	;# 
  2470  0217                     	;# 
  2471  028C                     	;# 
  2472  028D                     	;# 
  2473  028E                     	;# 
  2474  0291                     	;# 
  2475  0291                     	;# 
  2476  0292                     	;# 
  2477  0293                     	;# 
  2478  0294                     	;# 
  2479  0298                     	;# 
  2480  0298                     	;# 
  2481  0299                     	;# 
  2482  029A                     	;# 
  2483  029B                     	;# 
  2484  029E                     	;# 
  2485  030C                     	;# 
  2486  030D                     	;# 
  2487  030E                     	;# 
  2488  038C                     	;# 
  2489  038D                     	;# 
  2490  038E                     	;# 
  2491  0391                     	;# 
  2492  0392                     	;# 
  2493  0393                     	;# 
  2494  0394                     	;# 
  2495  0395                     	;# 
  2496  0396                     	;# 
  2497  0397                     	;# 
  2498  0398                     	;# 
  2499  0399                     	;# 
  2500  040E                     	;# 
  2501  0413                     	;# 
  2502  0413                     	;# 
  2503  0414                     	;# 
  2504  0414                     	;# 
  2505  0415                     	;# 
  2506  0416                     	;# 
  2507  0417                     	;# 
  2508  0418                     	;# 
  2509  041A                     	;# 
  2510  041A                     	;# 
  2511  041B                     	;# 
  2512  041B                     	;# 
  2513  041C                     	;# 
  2514  041D                     	;# 
  2515  041E                     	;# 
  2516  041F                     	;# 
  2517  0493                     	;# 
  2518  0494                     	;# 
  2519  0495                     	;# 
  2520  0496                     	;# 
  2521  049A                     	;# 
  2522  049B                     	;# 
  2523  049C                     	;# 
  2524  049D                     	;# 
  2525  058C                     	;# 
  2526  058C                     	;# 
  2527  058D                     	;# 
  2528  058E                     	;# 
  2529  058E                     	;# 
  2530  058F                     	;# 
  2531  0590                     	;# 
  2532  0590                     	;# 
  2533  0591                     	;# 
  2534  0592                     	;# 
  2535  0592                     	;# 
  2536  0593                     	;# 
  2537  0594                     	;# 
  2538  0594                     	;# 
  2539  0595                     	;# 
  2540  0596                     	;# 
  2541  0596                     	;# 
  2542  0597                     	;# 
  2543  0598                     	;# 
  2544  0599                     	;# 
  2545  059A                     	;# 
  2546  059B                     	;# 
  2547  059B                     	;# 
  2548  059C                     	;# 
  2549  059D                     	;# 
  2550  060C                     	;# 
  2551  060C                     	;# 
  2552  060D                     	;# 
  2553  060E                     	;# 
  2554  060F                     	;# 
  2555  060F                     	;# 
  2556  0610                     	;# 
  2557  0611                     	;# 
  2558  0612                     	;# 
  2559  0613                     	;# 
  2560  0614                     	;# 
  2561  0617                     	;# 
  2562  0618                     	;# 
  2563  0619                     	;# 
  2564  061A                     	;# 
  2565  061B                     	;# 
  2566  061C                     	;# 
  2567  0691                     	;# 
  2568  0692                     	;# 
  2569  0693                     	;# 
  2570  0694                     	;# 
  2571  0695                     	;# 
  2572  0696                     	;# 
  2573  0697                     	;# 
  2574  0699                     	;# 
  2575  069A                     	;# 
  2576  0711                     	;# 
  2577  0712                     	;# 
  2578  0713                     	;# 
  2579  0714                     	;# 
  2580  0715                     	;# 
  2581  0718                     	;# 
  2582  0718                     	;# 
  2583  0719                     	;# 
  2584  071A                     	;# 
  2585  071A                     	;# 
  2586  071B                     	;# 
  2587  071C                     	;# 
  2588  071D                     	;# 
  2589  0791                     	;# 
  2590  0791                     	;# 
  2591  0792                     	;# 
  2592  0793                     	;# 
  2593  0793                     	;# 
  2594  0794                     	;# 
  2595  0795                     	;# 
  2596  0795                     	;# 
  2597  0796                     	;# 
  2598  0797                     	;# 
  2599  0797                     	;# 
  2600  0798                     	;# 
  2601  0799                     	;# 
  2602  079A                     	;# 
  2603  080C                     	;# 
  2604  080C                     	;# 
  2605  080D                     	;# 
  2606  080E                     	;# 
  2607  080E                     	;# 
  2608  080F                     	;# 
  2609  0810                     	;# 
  2610  0810                     	;# 
  2611  0811                     	;# 
  2612  0812                     	;# 
  2613  0812                     	;# 
  2614  0813                     	;# 
  2615  0814                     	;# 
  2616  0815                     	;# 
  2617  0816                     	;# 
  2618  0817                     	;# 
  2619  0818                     	;# 
  2620  0819                     	;# 
  2621  081A                     	;# 
  2622  081A                     	;# 
  2623  081B                     	;# 
  2624  081C                     	;# 
  2625  081C                     	;# 
  2626  081D                     	;# 
  2627  088C                     	;# 
  2628  088D                     	;# 
  2629  088E                     	;# 
  2630  088F                     	;# 
  2631  088F                     	;# 
  2632  0890                     	;# 
  2633  0891                     	;# 
  2634  0892                     	;# 
  2635  0893                     	;# 
  2636  0893                     	;# 
  2637  0894                     	;# 
  2638  0895                     	;# 
  2639  0896                     	;# 
  2640  0897                     	;# 
  2641  0897                     	;# 
  2642  0898                     	;# 
  2643  0899                     	;# 
  2644  0D8C                     	;# 
  2645  0D8C                     	;# 
  2646  0D8D                     	;# 
  2647  0D8E                     	;# 
  2648  0D8F                     	;# 
  2649  0D8F                     	;# 
  2650  0D90                     	;# 
  2651  0D91                     	;# 
  2652  0D92                     	;# 
  2653  0D92                     	;# 
  2654  0D93                     	;# 
  2655  0D94                     	;# 
  2656  0D95                     	;# 
  2657  0D95                     	;# 
  2658  0D96                     	;# 
  2659  0D97                     	;# 
  2660  0D98                     	;# 
  2661  0D99                     	;# 
  2662  0D9A                     	;# 
  2663  0D9B                     	;# 
  2664  0D9C                     	;# 
  2665  0D9D                     	;# 
  2666  0D9E                     	;# 
  2667  0D9E                     	;# 
  2668  0D9F                     	;# 
  2669  0DA0                     	;# 
  2670  0DA1                     	;# 
  2671  0DA1                     	;# 
  2672  0DA2                     	;# 
  2673  0DA3                     	;# 
  2674  0DA4                     	;# 
  2675  0DA4                     	;# 
  2676  0DA5                     	;# 
  2677  0DA6                     	;# 
  2678  0DA7                     	;# 
  2679  0DA7                     	;# 
  2680  0DA8                     	;# 
  2681  0DA9                     	;# 
  2682  0DAA                     	;# 
  2683  0DAB                     	;# 
  2684  0DAC                     	;# 
  2685  0DAD                     	;# 
  2686  0DAE                     	;# 
  2687  0DAF                     	;# 
  2688  0E0F                     	;# 
  2689  0E10                     	;# 
  2690  0E11                     	;# 
  2691  0E12                     	;# 
  2692  0E13                     	;# 
  2693  0E14                     	;# 
  2694  0E15                     	;# 
  2695  0E16                     	;# 
  2696  0E17                     	;# 
  2697  0E18                     	;# 
  2698  0E19                     	;# 
  2699  0E1A                     	;# 
  2700  0E1B                     	;# 
  2701  0E1C                     	;# 
  2702  0E1D                     	;# 
  2703  0E1E                     	;# 
  2704  0E1F                     	;# 
  2705  0E20                     	;# 
  2706  0E21                     	;# 
  2707  0E22                     	;# 
  2708  0E23                     	;# 
  2709  0E24                     	;# 
  2710  0E25                     	;# 
  2711  0E26                     	;# 
  2712  0E27                     	;# 
  2713  0E28                     	;# 
  2714  0E29                     	;# 
  2715  0E2A                     	;# 
  2716  0E2B                     	;# 
  2717  0E2C                     	;# 
  2718  0E2D                     	;# 
  2719  0E2E                     	;# 
  2720  0E90                     	;# 
  2721  0E91                     	;# 
  2722  0E92                     	;# 
  2723  0E94                     	;# 
  2724  0E95                     	;# 
  2725  0E9C                     	;# 
  2726  0E9D                     	;# 
  2727  0E9E                     	;# 
  2728  0E9F                     	;# 
  2729  0EA0                     	;# 
  2730  0EA1                     	;# 
  2731  0EA2                     	;# 
  2732  0EA3                     	;# 
  2733  0EA4                     	;# 
  2734  0EA5                     	;# 
  2735  0EA6                     	;# 
  2736  0EA7                     	;# 
  2737  0F0F                     	;# 
  2738  0F10                     	;# 
  2739  0F11                     	;# 
  2740  0F12                     	;# 
  2741  0F13                     	;# 
  2742  0F14                     	;# 
  2743  0F15                     	;# 
  2744  0F16                     	;# 
  2745  0F17                     	;# 
  2746  0F18                     	;# 
  2747  0F19                     	;# 
  2748  0F1A                     	;# 
  2749  0F1B                     	;# 
  2750  0F1C                     	;# 
  2751  0F1D                     	;# 
  2752  0F1E                     	;# 
  2753  0F1F                     	;# 
  2754  0F20                     	;# 
  2755  0F21                     	;# 
  2756  0F22                     	;# 
  2757  0F23                     	;# 
  2758  0F24                     	;# 
  2759  0F25                     	;# 
  2760  0F26                     	;# 
  2761  0F27                     	;# 
  2762  0F28                     	;# 
  2763  0F29                     	;# 
  2764  0F2A                     	;# 
  2765  0F2B                     	;# 
  2766  0F2C                     	;# 
  2767  0F2D                     	;# 
  2768  0F2E                     	;# 
  2769  0F2F                     	;# 
  2770  0F30                     	;# 
  2771  0F31                     	;# 
  2772  0F32                     	;# 
  2773  0F33                     	;# 
  2774  0F34                     	;# 
  2775  0F35                     	;# 
  2776  0F36                     	;# 
  2777  0F37                     	;# 
  2778  0FE4                     	;# 
  2779  0FE5                     	;# 
  2780  0FE6                     	;# 
  2781  0FE7                     	;# 
  2782  0FE8                     	;# 
  2783  0FE9                     	;# 
  2784  0FEA                     	;# 
  2785  0FEB                     	;# 
  2786  0FED                     	;# 
  2787  0FEE                     	;# 
  2788  0FEF                     	;# 
  2789                           
  2790                           	psect	idataBANK1
  2791  0445                     __pidataBANK1:	
  2792                           
  2793                           ;initializer for _fsmStateTable
  2794  0445  3423               	retlw	low _do_I2C_IDLE
  2795  0446  3406               	retlw	high _do_I2C_IDLE
  2796  0447  34B5               	retlw	low _do_I2C_SEND_ADR_READ
  2797  0448  3405               	retlw	high _do_I2C_SEND_ADR_READ
  2798  0449  34EF               	retlw	low _do_I2C_SEND_ADR_WRITE
  2799  044A  3405               	retlw	high _do_I2C_SEND_ADR_WRITE
  2800  044B  3456               	retlw	low _do_I2C_TX
  2801  044C  3401               	retlw	high _do_I2C_TX
  2802  044D  343E               	retlw	low _do_I2C_RX
  2803  044E  3402               	retlw	high _do_I2C_RX
  2804  044F  3419               	retlw	low _do_I2C_RCEN
  2805  0450  3406               	retlw	high _do_I2C_RCEN
  2806  0451  34C2               	retlw	low _do_I2C_TX_EMPTY
  2807  0452  3402               	retlw	high _do_I2C_TX_EMPTY
  2808  0453  345C               	retlw	low _do_I2C_SEND_RESTART_READ
  2809  0454  3406               	retlw	high _do_I2C_SEND_RESTART_READ
  2810  0455  3454               	retlw	low _do_I2C_SEND_RESTART_WRITE
  2811  0456  3406               	retlw	high _do_I2C_SEND_RESTART_WRITE
  2812  0457  344C               	retlw	low _do_I2C_SEND_RESTART
  2813  0458  3406               	retlw	high _do_I2C_SEND_RESTART
  2814  0459  3444               	retlw	low _do_I2C_SEND_STOP
  2815  045A  3406               	retlw	high _do_I2C_SEND_STOP
  2816  045B  343C               	retlw	low _do_I2C_DO_ACK
  2817  045C  3406               	retlw	high _do_I2C_DO_ACK
  2818  045D  3434               	retlw	low _do_I2C_DO_NACK_STOP
  2819  045E  3406               	retlw	high _do_I2C_DO_NACK_STOP
  2820  045F  342C               	retlw	low _do_I2C_DO_NACK_RESTART
  2821  0460  3406               	retlw	high _do_I2C_DO_NACK_RESTART
  2822  0461  34FA               	retlw	low _do_I2C_RESET
  2823  0462  3405               	retlw	high _do_I2C_RESET
  2824  0463  34F0               	retlw	low _do_I2C_DO_ADDRESS_NACK
  2825  0464  3402               	retlw	high _do_I2C_DO_ADDRESS_NACK
  2826  000B                     _INTCONbits	set	11
  2827  0011                     _PIR2bits	set	17
  2828  0010                     _PIR1bits	set	16
  2829  0095                     _OPTION_REGbits	set	149
  2830  008E                     _TRISC	set	142
  2831  008D                     _TRISB	set	141
  2832  008C                     _TRISA	set	140
  2833  0098                     _OSCTUNE	set	152
  2834  0099                     _OSCCON	set	153
  2835  0091                     _PIE2bits	set	145
  2836  0090                     _PIE1bits	set	144
  2837  010E                     _LATC	set	270
  2838  010D                     _LATB	set	269
  2839  010C                     _LATA	set	268
  2840  0116                     _BORCON	set	278
  2841  018C                     _ANSELA	set	396
  2842  018D                     _ANSELB	set	397
  2843  018E                     _ANSELC	set	398
  2844  020E                     _WPUC	set	526
  2845  020C                     _WPUA	set	524
  2846  020D                     _WPUB	set	525
  2847  0214                     _SSP1STATbits	set	532
  2848  0213                     _SSP1MSK	set	531
  2849  0211                     _SSP1BUF	set	529
  2850  0216                     _SSP1CON2bits	set	534
  2851  0212                     _SSP1ADD	set	530
  2852  0216                     _SSP1CON2	set	534
  2853  0215                     _SSP1CON1	set	533
  2854  0214                     _SSP1STAT	set	532
  2855  0215                     _SSP1CON1bits	set	533
  2856  028E                     _ODCONC	set	654
  2857  028D                     _ODCONB	set	653
  2858  028C                     _ODCONA	set	652
  2859  0E21                     _SSPDATPPS	set	3617
  2860  0E20                     _SSPCLKPPS	set	3616
  2861  0E9C                     _RB4PPS	set	3740
  2862  0E9E                     _RB6PPS	set	3742
  2863                           
  2864                           ; #config settings
  2865  0000                     
  2866                           	psect	cinit
  2867  0029                     start_initialization:	
  2868  0029                     __initialization:	
  2869                           
  2870                           ; Initialize objects allocated to BANK1
  2871  0029  3045               	movlw	low __pidataBANK1
  2872  002A  0084               	movwf	4
  2873  002B  3084               	movlw	(high __pidataBANK1)| (0+128)
  2874  002C  0085               	movwf	5
  2875  002D  30A0               	movlw	low __pdataBANK1
  2876  002E  0086               	movwf	6
  2877  002F  3000               	movlw	high __pdataBANK1
  2878  0030  0087               	movwf	7
  2879  0031  3020               	movlw	32
  2880  0032  3186  2681  3180   	fcall	init_ram
  2881                           
  2882                           ; Clear objects allocated to COMMON
  2883  0035  01FA               	clrf	__pbssCOMMON& (0+127)
  2884  0036  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
  2885  0037  01FC               	clrf	(__pbssCOMMON+2)& (0+127)
  2886  0038  01FD               	clrf	(__pbssCOMMON+3)& (0+127)
  2887                           
  2888                           ; Clear objects allocated to BANK1
  2889  0039  30C0               	movlw	low __pbssBANK1
  2890  003A  0084               	movwf	4
  2891  003B  3000               	movlw	high __pbssBANK1
  2892  003C  0085               	movwf	5
  2893  003D  301D               	movlw	29
  2894  003E  3186  2687         	fcall	clear_ram0
  2895  0040                     end_of_initialization:	
  2896                           ;End of C runtime variable initialization code
  2897                           
  2898  0040                     __end_of__initialization:	
  2899  0040  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2900  0041  0020               	movlb	0
  2901  0042  3180  2844         	ljmp	_main	;jump to C main() function
  2902                           
  2903                           	psect	bssCOMMON
  2904  007A                     __pbssCOMMON:	
  2905  007A                     _i2c_driver_i2cISR:	
  2906  007A                     	ds	2
  2907  007C                     _i2c_driver_busCollisionISR:	
  2908  007C                     	ds	2
  2909                           
  2910                           	psect	bssBANK1
  2911  00C0                     __pbssBANK1:	
  2912  00C0                     _i2c_status:	
  2913  00C0                     	ds	29
  2914                           
  2915                           	psect	dataBANK1
  2916  00A0                     __pdataBANK1:	
  2917  00A0                     _fsmStateTable:	
  2918  00A0                     	ds	32
  2919                           
  2920                           	psect	inittext
  2921  0681                     init_ram:	
  2922  0681  00FE               	movwf	126
  2923  0682                     initloop:	
  2924  0682  0012               	moviw fsr0++
  2925  0683  001E               	movwi fsr1++
  2926  0684  0BFE               	decfsz	126,f
  2927  0685  2E82               	goto	initloop
  2928  0686  3400               	retlw	0
  2929                           
  2930                           	psect	clrtext
  2931  0687                     clear_ram0:	
  2932                           ;	Called with FSR0 containing the base address, and
  2933                           ;	WREG with the size to clear
  2934                           
  2935  0687  0064               	clrwdt	;clear the watchdog before getting into this loop
  2936  0688                     clrloop0:	
  2937  0688  0180               	clrf	0	;clear RAM location pointed to by FSR
  2938  0689  3101               	addfsr 0,1
  2939  068A  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2940  068B  2E88               	goto	clrloop0	;have we reached the end yet?
  2941  068C  3400               	retlw	0	;all done for this memory range, return
  2942                           
  2943                           	psect	cstackCOMMON
  2944  0070                     __pcstackCOMMON:	
  2945  0070                     ?_mssp_IRQisEnabled:	
  2946  0070                     ?_i2c_driver_open:	
  2947                           ; 1 bit 
  2948                           
  2949  0070                     ?_i2c_driver_isNACK:	
  2950                           ; 1 bit 
  2951                           
  2952  0070                     ?i1_i2c_driver_isNACK:	
  2953                           ; 1 bit 
  2954                           
  2955  0070                     ?_PIN_MANAGER_Initialize:	
  2956                           ; 1 bit 
  2957                           
  2958  0070                     ?_OSCILLATOR_Initialize:	
  2959                           ; 1 bytes @ 0x0
  2960                           
  2961  0070                     ?_i2c_busCollisionISR:	
  2962                           ; 1 bytes @ 0x0
  2963                           
  2964  0070                     ??_i2c_busCollisionISR:	
  2965                           ; 1 bytes @ 0x0
  2966                           
  2967  0070                     ?_i2c_ISR:	
  2968                           ; 1 bytes @ 0x0
  2969                           
  2970  0070                     ?_i2c_poller:	
  2971                           ; 1 bytes @ 0x0
  2972                           
  2973  0070                     ?_mssp_disableIRQ:	
  2974                           ; 1 bytes @ 0x0
  2975                           
  2976  0070                     ?_mssp_clearIRQ:	
  2977                           ; 1 bytes @ 0x0
  2978                           
  2979  0070                     ?_mssp_setIRQ:	
  2980                           ; 1 bytes @ 0x0
  2981                           
  2982  0070                     ?_mssp_waitForEvent:	
  2983                           ; 1 bytes @ 0x0
  2984                           
  2985  0070                     ?_i2c_driver_resetBus:	
  2986                           ; 1 bytes @ 0x0
  2987                           
  2988  0070                     ?_i2c_driver_start:	
  2989                           ; 1 bytes @ 0x0
  2990                           
  2991  0070                     ?_i2c_driver_restart:	
  2992                           ; 1 bytes @ 0x0
  2993                           
  2994  0070                     ?_i2c_driver_stop:	
  2995                           ; 1 bytes @ 0x0
  2996                           
  2997  0070                     ?_i2c_driver_startRX:	
  2998                           ; 1 bytes @ 0x0
  2999                           
  3000  0070                     ?_i2c_driver_getRXData:	
  3001                           ; 1 bytes @ 0x0
  3002                           
  3003  0070                     ?_i2c_driver_TXData:	
  3004                           ; 1 bytes @ 0x0
  3005                           
  3006  0070                     ?_i2c_driver_sendACK:	
  3007                           ; 1 bytes @ 0x0
  3008                           
  3009  0070                     ?_i2c_driver_sendNACK:	
  3010                           ; 1 bytes @ 0x0
  3011                           
  3012  0070                     ?_i2c_driver_clearBusCollision:	
  3013                           ; 1 bytes @ 0x0
  3014                           
  3015  0070                     ??_i2c_driver_clearBusCollision:	
  3016                           ; 1 bytes @ 0x0
  3017                           
  3018  0070                     ?_INTERRUPT_InterruptManager:	
  3019                           ; 1 bytes @ 0x0
  3020                           
  3021  0070                     ?_SYSTEM_Initialize:	
  3022                           ; 1 bytes @ 0x0
  3023                           
  3024  0070                     ?_main:	
  3025                           ; 1 bytes @ 0x0
  3026                           
  3027  0070                     ?_i2c_open:	
  3028                           ; 1 bytes @ 0x0
  3029                           
  3030  0070                     ?_i2c_close:	
  3031                           ; 1 bytes @ 0x0
  3032                           
  3033  0070                     ?_i2c_masterOperation:	
  3034                           ; 1 bytes @ 0x0
  3035                           
  3036  0070                     ?_i2c_masterWrite:	
  3037                           ; 1 bytes @ 0x0
  3038                           
  3039  0070                     ?_do_I2C_RESET:	
  3040                           ; 1 bytes @ 0x0
  3041                           
  3042  0070                     ?_do_I2C_IDLE:	
  3043                           ; 1 bytes @ 0x0
  3044                           
  3045  0070                     ?_do_I2C_SEND_RESTART_READ:	
  3046                           ; 1 bytes @ 0x0
  3047                           
  3048  0070                     ?_do_I2C_SEND_RESTART_WRITE:	
  3049                           ; 1 bytes @ 0x0
  3050                           
  3051  0070                     ?_do_I2C_SEND_RESTART:	
  3052                           ; 1 bytes @ 0x0
  3053                           
  3054  0070                     ?_do_I2C_SEND_STOP:	
  3055                           ; 1 bytes @ 0x0
  3056                           
  3057  0070                     ?_do_I2C_SEND_ADR_READ:	
  3058                           ; 1 bytes @ 0x0
  3059                           
  3060  0070                     ?_do_I2C_SEND_ADR_WRITE:	
  3061                           ; 1 bytes @ 0x0
  3062                           
  3063  0070                     ?_do_I2C_RCEN:	
  3064                           ; 1 bytes @ 0x0
  3065                           
  3066  0070                     ?_do_I2C_DO_ACK:	
  3067                           ; 1 bytes @ 0x0
  3068                           
  3069  0070                     ?_do_I2C_DO_NACK_STOP:	
  3070                           ; 1 bytes @ 0x0
  3071                           
  3072  0070                     ?_do_I2C_DO_NACK_RESTART:	
  3073                           ; 1 bytes @ 0x0
  3074                           
  3075  0070                     ?_do_I2C_DO_ADDRESS_NACK:	
  3076                           ; 1 bytes @ 0x0
  3077                           
  3078  0070                     ?_do_I2C_TX:	
  3079                           ; 1 bytes @ 0x0
  3080                           
  3081  0070                     ?_do_I2C_RX:	
  3082                           ; 1 bytes @ 0x0
  3083                           
  3084  0070                     ?_do_I2C_TX_EMPTY:	
  3085                           ; 1 bytes @ 0x0
  3086                           
  3087  0070                     ?i1_mssp_clearIRQ:	
  3088                           ; 1 bytes @ 0x0
  3089                           
  3090  0070                     ??i1_mssp_clearIRQ:	
  3091                           ; 1 bytes @ 0x0
  3092                           
  3093  0070                     ?i1_mssp_setIRQ:	
  3094                           ; 1 bytes @ 0x0
  3095                           
  3096  0070                     ??i1_mssp_setIRQ:	
  3097                           ; 1 bytes @ 0x0
  3098                           
  3099  0070                     ?i1_i2c_driver_resetBus:	
  3100                           ; 1 bytes @ 0x0
  3101                           
  3102  0070                     ??i1_i2c_driver_resetBus:	
  3103                           ; 1 bytes @ 0x0
  3104                           
  3105  0070                     ?i1_i2c_driver_restart:	
  3106                           ; 1 bytes @ 0x0
  3107                           
  3108  0070                     ??i1_i2c_driver_restart:	
  3109                           ; 1 bytes @ 0x0
  3110                           
  3111  0070                     ?i1_i2c_driver_stop:	
  3112                           ; 1 bytes @ 0x0
  3113                           
  3114  0070                     ??i1_i2c_driver_stop:	
  3115                           ; 1 bytes @ 0x0
  3116                           
  3117  0070                     ??i1_i2c_driver_isNACK:	
  3118                           ; 1 bytes @ 0x0
  3119                           
  3120  0070                     ?i1_i2c_driver_startRX:	
  3121                           ; 1 bytes @ 0x0
  3122                           
  3123  0070                     ??i1_i2c_driver_startRX:	
  3124                           ; 1 bytes @ 0x0
  3125                           
  3126  0070                     ?i1_i2c_driver_getRXData:	
  3127                           ; 1 bytes @ 0x0
  3128                           
  3129  0070                     ??i1_i2c_driver_getRXData:	
  3130                           ; 1 bytes @ 0x0
  3131                           
  3132  0070                     ?i1_i2c_driver_TXData:	
  3133                           ; 1 bytes @ 0x0
  3134                           
  3135  0070                     ??i1_i2c_driver_TXData:	
  3136                           ; 1 bytes @ 0x0
  3137                           
  3138  0070                     ?i1_i2c_driver_sendACK:	
  3139                           ; 1 bytes @ 0x0
  3140                           
  3141  0070                     ??i1_i2c_driver_sendACK:	
  3142                           ; 1 bytes @ 0x0
  3143                           
  3144  0070                     ?i1_i2c_driver_sendNACK:	
  3145                           ; 1 bytes @ 0x0
  3146                           
  3147  0070                     ??i1_i2c_driver_sendNACK:	
  3148                           ; 1 bytes @ 0x0
  3149                           
  3150  0070                     ?i1_i2c_setBuffer:	
  3151                           ; 1 bytes @ 0x0
  3152                           
  3153  0070                     ?i1_do_I2C_RESET:	
  3154                           ; 1 bytes @ 0x0
  3155                           
  3156  0070                     ??i1_do_I2C_RESET:	
  3157                           ; 1 bytes @ 0x0
  3158                           
  3159  0070                     ?i1_do_I2C_IDLE:	
  3160                           ; 1 bytes @ 0x0
  3161                           
  3162  0070                     ??i1_do_I2C_IDLE:	
  3163                           ; 1 bytes @ 0x0
  3164                           
  3165  0070                     ?i1_do_I2C_SEND_RESTART_READ:	
  3166                           ; 1 bytes @ 0x0
  3167                           
  3168  0070                     ??i1_do_I2C_SEND_RESTART_READ:	
  3169                           ; 1 bytes @ 0x0
  3170                           
  3171  0070                     ?i1_do_I2C_SEND_RESTART_WRITE:	
  3172                           ; 1 bytes @ 0x0
  3173                           
  3174  0070                     ??i1_do_I2C_SEND_RESTART_WRITE:	
  3175                           ; 1 bytes @ 0x0
  3176                           
  3177  0070                     ?i1_do_I2C_SEND_RESTART:	
  3178                           ; 1 bytes @ 0x0
  3179                           
  3180  0070                     ??i1_do_I2C_SEND_RESTART:	
  3181                           ; 1 bytes @ 0x0
  3182                           
  3183  0070                     ?i1_do_I2C_SEND_STOP:	
  3184                           ; 1 bytes @ 0x0
  3185                           
  3186  0070                     ??i1_do_I2C_SEND_STOP:	
  3187                           ; 1 bytes @ 0x0
  3188                           
  3189  0070                     ?i1_do_I2C_SEND_ADR_READ:	
  3190                           ; 1 bytes @ 0x0
  3191                           
  3192  0070                     ?i1_do_I2C_SEND_ADR_WRITE:	
  3193                           ; 1 bytes @ 0x0
  3194                           
  3195  0070                     ?i1_do_I2C_RCEN:	
  3196                           ; 1 bytes @ 0x0
  3197                           
  3198  0070                     ??i1_do_I2C_RCEN:	
  3199                           ; 1 bytes @ 0x0
  3200                           
  3201  0070                     ?i1_do_I2C_DO_ACK:	
  3202                           ; 1 bytes @ 0x0
  3203                           
  3204  0070                     ??i1_do_I2C_DO_ACK:	
  3205                           ; 1 bytes @ 0x0
  3206                           
  3207  0070                     ?i1_do_I2C_DO_NACK_STOP:	
  3208                           ; 1 bytes @ 0x0
  3209                           
  3210  0070                     ??i1_do_I2C_DO_NACK_STOP:	
  3211                           ; 1 bytes @ 0x0
  3212                           
  3213  0070                     ?i1_do_I2C_DO_NACK_RESTART:	
  3214                           ; 1 bytes @ 0x0
  3215                           
  3216  0070                     ??i1_do_I2C_DO_NACK_RESTART:	
  3217                           ; 1 bytes @ 0x0
  3218                           
  3219  0070                     ?i1_do_I2C_DO_ADDRESS_NACK:	
  3220                           ; 1 bytes @ 0x0
  3221                           
  3222  0070                     ??i1_do_I2C_DO_ADDRESS_NACK:	
  3223                           ; 1 bytes @ 0x0
  3224                           
  3225  0070                     ?i1_do_I2C_TX:	
  3226                           ; 1 bytes @ 0x0
  3227                           
  3228  0070                     ?i1_do_I2C_RX:	
  3229                           ; 1 bytes @ 0x0
  3230                           
  3231  0070                     ??i1_do_I2C_RX:	
  3232                           ; 1 bytes @ 0x0
  3233                           
  3234  0070                     ?i1_do_I2C_TX_EMPTY:	
  3235                           ; 1 bytes @ 0x0
  3236                           
  3237  0070                     ??i1_do_I2C_TX_EMPTY:	
  3238                           ; 1 bytes @ 0x0
  3239                           
  3240  0070                     ?i1_i2c_ISR:	
  3241                           ; 1 bytes @ 0x0
  3242                           
  3243  0070                     ?i1_setCallBack:	
  3244                           ; 1 bytes @ 0x0
  3245                           
  3246  0070                     i1i2c_driver_TXData@d:	
  3247                           ; 1 bytes @ 0x0
  3248                           
  3249  0070                     i1i2c_setBuffer@bufferSize:	
  3250                           ; 1 bytes @ 0x0
  3251                           
  3252  0070                     i1setCallBack@cb:	
  3253                           ; 2 bytes @ 0x0
  3254                           
  3255                           
  3256                           ; 2 bytes @ 0x0
  3257  0070                     	ds	1
  3258  0071                     ??i1_do_I2C_SEND_ADR_READ:	
  3259  0071                     ??i1_do_I2C_SEND_ADR_WRITE:	
  3260                           ; 1 bytes @ 0x1
  3261                           
  3262  0071                     ??i1_do_I2C_TX:	
  3263                           ; 1 bytes @ 0x1
  3264                           
  3265                           
  3266                           ; 1 bytes @ 0x1
  3267  0071                     	ds	1
  3268  0072                     ??i1_i2c_setBuffer:	
  3269  0072                     i1setCallBack@p:	
  3270                           ; 1 bytes @ 0x2
  3271                           
  3272  0072                     i1_do_I2C_TX$754:	
  3273                           ; 1 bytes @ 0x2
  3274                           
  3275                           
  3276                           ; 2 bytes @ 0x2
  3277  0072                     	ds	1
  3278  0073                     ??i1_setCallBack:	
  3279  0073                     i1i2c_setBuffer@buffer:	
  3280                           ; 1 bytes @ 0x3
  3281                           
  3282                           
  3283                           ; 1 bytes @ 0x3
  3284  0073                     	ds	1
  3285  0074                     ??i1_i2c_ISR:	
  3286  0074                     i1setCallBack@idx:	
  3287                           ; 1 bytes @ 0x4
  3288                           
  3289                           
  3290                           ; 1 bytes @ 0x4
  3291  0074                     	ds	1
  3292  0075                     ??_INTERRUPT_InterruptManager:	
  3293  0075                     ?i1_i2c_setDataCompleteCallback:	
  3294                           ; 1 bytes @ 0x5
  3295                           
  3296  0075                     i1i2c_setDataCompleteCallback@cb:	
  3297                           ; 1 bytes @ 0x5
  3298                           
  3299                           
  3300                           ; 2 bytes @ 0x5
  3301  0075                     	ds	2
  3302  0077                     i1i2c_setDataCompleteCallback@p:	
  3303                           
  3304                           ; 1 bytes @ 0x7
  3305  0077                     	ds	1
  3306  0078                     ??i1_i2c_setDataCompleteCallback:	
  3307                           
  3308                           ; 1 bytes @ 0x8
  3309  0078                     	ds	1
  3310  0079                     ?i1_returnStop:	
  3311  0079                     ?i1_returnReset:	
  3312                           ; 1 bytes @ 0x9
  3313                           
  3314  0079                     ?i1_i2c_restartWrite:	
  3315                           ; 1 bytes @ 0x9
  3316                           
  3317  0079                     ?i1_wr1RegCompleteHandler:	
  3318                           ; 1 bytes @ 0x9
  3319                           
  3320  0079                     ?i1_rd1RegCompleteHandler:	
  3321                           ; 1 bytes @ 0x9
  3322                           
  3323  0079                     ?i1_rd2RegCompleteHandler:	
  3324                           ; 1 bytes @ 0x9
  3325                           
  3326  0079                     ?i1_wr2RegCompleteHandler:	
  3327                           ; 1 bytes @ 0x9
  3328                           
  3329  0079                     ?i1_rdBlkRegCompleteHandler:	
  3330                           ; 1 bytes @ 0x9
  3331                           
  3332  0079                     i1returnStop@p:	
  3333                           ; 1 bytes @ 0x9
  3334                           
  3335  0079                     i1returnReset@p:	
  3336                           ; 1 bytes @ 0x9
  3337                           
  3338  0079                     i1i2c_restartWrite@p:	
  3339                           ; 1 bytes @ 0x9
  3340                           
  3341  0079                     i1wr1RegCompleteHandler@p:	
  3342                           ; 1 bytes @ 0x9
  3343                           
  3344  0079                     i1rd1RegCompleteHandler@p:	
  3345                           ; 1 bytes @ 0x9
  3346                           
  3347  0079                     i1rd2RegCompleteHandler@p:	
  3348                           ; 1 bytes @ 0x9
  3349                           
  3350  0079                     i1wr2RegCompleteHandler@p:	
  3351                           ; 1 bytes @ 0x9
  3352                           
  3353  0079                     i1rdBlkRegCompleteHandler@p:	
  3354                           ; 1 bytes @ 0x9
  3355                           
  3356                           
  3357                           ; 1 bytes @ 0x9
  3358  0079                     	ds	1
  3359  007A                     ??i1_returnStop:	
  3360  007A                     ??i1_returnReset:	
  3361                           ; 1 bytes @ 0xA
  3362                           
  3363  007A                     ??i1_i2c_restartWrite:	
  3364                           ; 1 bytes @ 0xA
  3365                           
  3366  007A                     ??i1_wr1RegCompleteHandler:	
  3367                           ; 1 bytes @ 0xA
  3368                           
  3369  007A                     ??i1_rd1RegCompleteHandler:	
  3370                           ; 1 bytes @ 0xA
  3371                           
  3372  007A                     ??i1_rd2RegCompleteHandler:	
  3373                           ; 1 bytes @ 0xA
  3374                           
  3375  007A                     ??i1_wr2RegCompleteHandler:	
  3376                           ; 1 bytes @ 0xA
  3377                           
  3378  007A                     ??i1_rdBlkRegCompleteHandler:	
  3379                           ; 1 bytes @ 0xA
  3380                           
  3381                           
  3382                           	psect	cstackBANK0
  3383  0020                     __pcstackBANK0:	
  3384                           ; 1 bytes @ 0xA
  3385                           
  3386  0020                     ??_PIN_MANAGER_Initialize:	
  3387  0020                     ??_OSCILLATOR_Initialize:	
  3388                           ; 1 bytes @ 0x0
  3389                           
  3390  0020                     ?_setCallBack:	
  3391                           ; 1 bytes @ 0x0
  3392                           
  3393  0020                     ??_mssp_IRQisEnabled:	
  3394                           ; 1 bytes @ 0x0
  3395                           
  3396  0020                     ??_mssp_disableIRQ:	
  3397                           ; 1 bytes @ 0x0
  3398                           
  3399  0020                     ??_mssp_clearIRQ:	
  3400                           ; 1 bytes @ 0x0
  3401                           
  3402  0020                     ??_mssp_setIRQ:	
  3403                           ; 1 bytes @ 0x0
  3404                           
  3405  0020                     ??_mssp_waitForEvent:	
  3406                           ; 1 bytes @ 0x0
  3407                           
  3408  0020                     ??_i2c_driver_open:	
  3409                           ; 1 bytes @ 0x0
  3410                           
  3411  0020                     ??_i2c_driver_resetBus:	
  3412                           ; 1 bytes @ 0x0
  3413                           
  3414  0020                     ??_i2c_driver_start:	
  3415                           ; 1 bytes @ 0x0
  3416                           
  3417  0020                     ??_i2c_driver_restart:	
  3418                           ; 1 bytes @ 0x0
  3419                           
  3420  0020                     ??_i2c_driver_stop:	
  3421                           ; 1 bytes @ 0x0
  3422                           
  3423  0020                     ??_i2c_driver_isNACK:	
  3424                           ; 1 bytes @ 0x0
  3425                           
  3426  0020                     ??_i2c_driver_startRX:	
  3427                           ; 1 bytes @ 0x0
  3428                           
  3429  0020                     ??_i2c_driver_getRXData:	
  3430                           ; 1 bytes @ 0x0
  3431                           
  3432  0020                     ??_i2c_driver_TXData:	
  3433                           ; 1 bytes @ 0x0
  3434                           
  3435  0020                     ??_i2c_driver_sendACK:	
  3436                           ; 1 bytes @ 0x0
  3437                           
  3438  0020                     ??_i2c_driver_sendNACK:	
  3439                           ; 1 bytes @ 0x0
  3440                           
  3441  0020                     ?_i2c_driver_setBusCollisionISR:	
  3442                           ; 1 bytes @ 0x0
  3443                           
  3444  0020                     ?_i2c_driver_setI2cISR:	
  3445                           ; 1 bytes @ 0x0
  3446                           
  3447  0020                     ??_SYSTEM_Initialize:	
  3448                           ; 1 bytes @ 0x0
  3449                           
  3450  0020                     ??_i2c_close:	
  3451                           ; 1 bytes @ 0x0
  3452                           
  3453  0020                     ?_i2c_setBuffer:	
  3454                           ; 1 bytes @ 0x0
  3455                           
  3456  0020                     ??_do_I2C_RESET:	
  3457                           ; 1 bytes @ 0x0
  3458                           
  3459  0020                     ??_do_I2C_IDLE:	
  3460                           ; 1 bytes @ 0x0
  3461                           
  3462  0020                     ??_do_I2C_SEND_RESTART_READ:	
  3463                           ; 1 bytes @ 0x0
  3464                           
  3465  0020                     ??_do_I2C_SEND_RESTART_WRITE:	
  3466                           ; 1 bytes @ 0x0
  3467                           
  3468  0020                     ??_do_I2C_SEND_RESTART:	
  3469                           ; 1 bytes @ 0x0
  3470                           
  3471  0020                     ??_do_I2C_SEND_STOP:	
  3472                           ; 1 bytes @ 0x0
  3473                           
  3474  0020                     ??_do_I2C_RCEN:	
  3475                           ; 1 bytes @ 0x0
  3476                           
  3477  0020                     ??_do_I2C_DO_ACK:	
  3478                           ; 1 bytes @ 0x0
  3479                           
  3480  0020                     ??_do_I2C_DO_NACK_STOP:	
  3481                           ; 1 bytes @ 0x0
  3482                           
  3483  0020                     ??_do_I2C_DO_NACK_RESTART:	
  3484                           ; 1 bytes @ 0x0
  3485                           
  3486  0020                     ??_do_I2C_DO_ADDRESS_NACK:	
  3487                           ; 1 bytes @ 0x0
  3488                           
  3489  0020                     ??_do_I2C_RX:	
  3490                           ; 1 bytes @ 0x0
  3491                           
  3492  0020                     ??_do_I2C_TX_EMPTY:	
  3493                           ; 1 bytes @ 0x0
  3494                           
  3495  0020                     ?___awdiv:	
  3496                           ; 1 bytes @ 0x0
  3497                           
  3498  0020                     mssp_waitForEvent@timeout:	
  3499                           ; 2 bytes @ 0x0
  3500                           
  3501  0020                     i2c_driver_TXData@d:	
  3502                           ; 1 bytes @ 0x0
  3503                           
  3504  0020                     i2c_driver_setBusCollisionISR@f:	
  3505                           ; 1 bytes @ 0x0
  3506                           
  3507  0020                     i2c_driver_setI2cISR@f:	
  3508                           ; 2 bytes @ 0x0
  3509                           
  3510  0020                     i2c_setBuffer@bufferSize:	
  3511                           ; 2 bytes @ 0x0
  3512                           
  3513  0020                     setCallBack@cb:	
  3514                           ; 2 bytes @ 0x0
  3515                           
  3516  0020                     ___awdiv@divisor:	
  3517                           ; 2 bytes @ 0x0
  3518                           
  3519                           
  3520                           ; 2 bytes @ 0x0
  3521  0020                     	ds	1
  3522  0021                     ??_do_I2C_SEND_ADR_READ:	
  3523  0021                     ??_do_I2C_SEND_ADR_WRITE:	
  3524                           ; 1 bytes @ 0x1
  3525                           
  3526  0021                     ??_do_I2C_TX:	
  3527                           ; 1 bytes @ 0x1
  3528                           
  3529  0021                     i2c_close@ret:	
  3530                           ; 1 bytes @ 0x1
  3531                           
  3532                           
  3533                           ; 1 bytes @ 0x1
  3534  0021                     	ds	1
  3535  0022                     ??_i2c_driver_setBusCollisionISR:	
  3536  0022                     ??_i2c_driver_setI2cISR:	
  3537                           ; 1 bytes @ 0x2
  3538                           
  3539  0022                     ??_i2c_open:	
  3540                           ; 1 bytes @ 0x2
  3541                           
  3542  0022                     ??_i2c_setBuffer:	
  3543                           ; 1 bytes @ 0x2
  3544                           
  3545  0022                     setCallBack@p:	
  3546                           ; 1 bytes @ 0x2
  3547                           
  3548  0022                     _do_I2C_TX$754:	
  3549                           ; 1 bytes @ 0x2
  3550                           
  3551  0022                     ___awdiv@dividend:	
  3552                           ; 2 bytes @ 0x2
  3553                           
  3554                           
  3555                           ; 2 bytes @ 0x2
  3556  0022                     	ds	1
  3557  0023                     ??_setCallBack:	
  3558  0023                     i2c_open@address:	
  3559                           ; 1 bytes @ 0x3
  3560                           
  3561  0023                     i2c_setBuffer@buffer:	
  3562                           ; 1 bytes @ 0x3
  3563                           
  3564                           
  3565                           ; 1 bytes @ 0x3
  3566  0023                     	ds	1
  3567  0024                     ??_i2c_ISR:	
  3568  0024                     ??___awdiv:	
  3569                           ; 1 bytes @ 0x4
  3570                           
  3571  0024                     i2c_open@ret:	
  3572                           ; 1 bytes @ 0x4
  3573                           
  3574  0024                     setCallBack@idx:	
  3575                           ; 1 bytes @ 0x4
  3576                           
  3577                           
  3578                           ; 1 bytes @ 0x4
  3579  0024                     	ds	1
  3580  0025                     ??_i2c_poller:	
  3581  0025                     ?_i2c_setDataCompleteCallback:	
  3582                           ; 1 bytes @ 0x5
  3583                           
  3584  0025                     ?_i2c_setAddressNACKCallback:	
  3585                           ; 1 bytes @ 0x5
  3586                           
  3587  0025                     ??_i2c_masterOperation:	
  3588                           ; 1 bytes @ 0x5
  3589                           
  3590  0025                     ___awdiv@counter:	
  3591                           ; 1 bytes @ 0x5
  3592                           
  3593  0025                     i2c_setDataCompleteCallback@cb:	
  3594                           ; 1 bytes @ 0x5
  3595                           
  3596  0025                     i2c_setAddressNACKCallback@cb:	
  3597                           ; 2 bytes @ 0x5
  3598                           
  3599                           
  3600                           ; 2 bytes @ 0x5
  3601  0025                     	ds	1
  3602  0026                     i2c_masterOperation@read:	
  3603  0026                     ___awdiv@sign:	
  3604                           ; 1 bytes @ 0x6
  3605                           
  3606                           
  3607                           ; 1 bytes @ 0x6
  3608  0026                     	ds	1
  3609  0027                     i2c_setDataCompleteCallback@p:	
  3610  0027                     i2c_setAddressNACKCallback@p:	
  3611                           ; 1 bytes @ 0x7
  3612                           
  3613  0027                     i2c_masterOperation@ret:	
  3614                           ; 1 bytes @ 0x7
  3615                           
  3616  0027                     ___awdiv@quotient:	
  3617                           ; 1 bytes @ 0x7
  3618                           
  3619                           
  3620                           ; 2 bytes @ 0x7
  3621  0027                     	ds	1
  3622  0028                     ??_i2c_setDataCompleteCallback:	
  3623  0028                     ??_i2c_setAddressNACKCallback:	
  3624                           ; 1 bytes @ 0x8
  3625                           
  3626  0028                     ??_i2c_masterWrite:	
  3627                           ; 1 bytes @ 0x8
  3628                           
  3629                           
  3630                           ; 1 bytes @ 0x8
  3631  0028                     	ds	1
  3632  0029                     ?_i2c_writeNBytes:	
  3633  0029                     ?_returnStop:	
  3634                           ; 1 bytes @ 0x9
  3635                           
  3636  0029                     ?_returnReset:	
  3637                           ; 1 bytes @ 0x9
  3638                           
  3639  0029                     ?_i2c_restartWrite:	
  3640                           ; 1 bytes @ 0x9
  3641                           
  3642  0029                     ?_wr1RegCompleteHandler:	
  3643                           ; 1 bytes @ 0x9
  3644                           
  3645  0029                     ?_rd1RegCompleteHandler:	
  3646                           ; 1 bytes @ 0x9
  3647                           
  3648  0029                     ?_rd2RegCompleteHandler:	
  3649                           ; 1 bytes @ 0x9
  3650                           
  3651  0029                     ?_wr2RegCompleteHandler:	
  3652                           ; 1 bytes @ 0x9
  3653                           
  3654  0029                     ?_rdBlkRegCompleteHandler:	
  3655                           ; 1 bytes @ 0x9
  3656                           
  3657  0029                     returnStop@p:	
  3658                           ; 1 bytes @ 0x9
  3659                           
  3660  0029                     returnReset@p:	
  3661                           ; 1 bytes @ 0x9
  3662                           
  3663  0029                     i2c_restartWrite@p:	
  3664                           ; 1 bytes @ 0x9
  3665                           
  3666  0029                     wr1RegCompleteHandler@p:	
  3667                           ; 1 bytes @ 0x9
  3668                           
  3669  0029                     i2c_writeNBytes@data:	
  3670                           ; 1 bytes @ 0x9
  3671                           
  3672  0029                     rd1RegCompleteHandler@p:	
  3673                           ; 1 bytes @ 0x9
  3674                           
  3675  0029                     rd2RegCompleteHandler@p:	
  3676                           ; 1 bytes @ 0x9
  3677                           
  3678  0029                     wr2RegCompleteHandler@p:	
  3679                           ; 1 bytes @ 0x9
  3680                           
  3681  0029                     rdBlkRegCompleteHandler@p:	
  3682                           ; 1 bytes @ 0x9
  3683                           
  3684                           
  3685                           ; 1 bytes @ 0x9
  3686  0029                     	ds	1
  3687  002A                     ??_returnStop:	
  3688  002A                     ??_returnReset:	
  3689                           ; 1 bytes @ 0xA
  3690                           
  3691  002A                     ??_i2c_restartWrite:	
  3692                           ; 1 bytes @ 0xA
  3693                           
  3694  002A                     ??_wr1RegCompleteHandler:	
  3695                           ; 1 bytes @ 0xA
  3696                           
  3697  002A                     ??_rd1RegCompleteHandler:	
  3698                           ; 1 bytes @ 0xA
  3699                           
  3700  002A                     ??_rd2RegCompleteHandler:	
  3701                           ; 1 bytes @ 0xA
  3702                           
  3703  002A                     ??_wr2RegCompleteHandler:	
  3704                           ; 1 bytes @ 0xA
  3705                           
  3706  002A                     ??_rdBlkRegCompleteHandler:	
  3707                           ; 1 bytes @ 0xA
  3708                           
  3709  002A                     i2c_writeNBytes@len:	
  3710                           ; 1 bytes @ 0xA
  3711                           
  3712                           
  3713                           ; 2 bytes @ 0xA
  3714  002A                     	ds	2
  3715  002C                     ??_i2c_writeNBytes:	
  3716  002C                     i2c_writeNBytes@address:	
  3717                           ; 1 bytes @ 0xC
  3718                           
  3719                           
  3720                           ; 1 bytes @ 0xC
  3721  002C                     	ds	1
  3722  002D                     ??_main:	
  3723                           
  3724                           ; 1 bytes @ 0xD
  3725  002D                     	ds	6
  3726  0033                     main@writebuffer:	
  3727                           
  3728                           ; 17 bytes @ 0x13
  3729  0033                     	ds	17
  3730  0044                     main@displaybuffer:	
  3731                           
  3732                           ; 16 bytes @ 0x24
  3733  0044                     	ds	16
  3734  0054                     main@y:	
  3735                           
  3736                           ; 2 bytes @ 0x34
  3737  0054                     	ds	2
  3738  0056                     main@x:	
  3739                           
  3740                           ; 2 bytes @ 0x36
  3741  0056                     	ds	2
  3742  0058                     main@i:	
  3743                           
  3744                           ; 1 bytes @ 0x38
  3745  0058                     	ds	1
  3746  0059                     main@i_458:	
  3747                           
  3748                           ; 1 bytes @ 0x39
  3749  0059                     	ds	1
  3750  005A                     main@i_461:	
  3751                           
  3752                           ; 1 bytes @ 0x3A
  3753  005A                     	ds	1
  3754                           
  3755                           	psect	maintext
  3756  0044                     __pmaintext:	
  3757 ;;
  3758 ;;Main: autosize = 0, tempsize = 6, incstack = 0, save=0
  3759 ;;
  3760 ;; *************** function _main *****************
  3761 ;; Defined at:
  3762 ;;		line 48 in file "main.c"
  3763 ;; Parameters:    Size  Location     Type
  3764 ;;		None
  3765 ;; Auto vars:     Size  Location     Type
  3766 ;;  i               1   58[BANK0 ] unsigned char 
  3767 ;;  i               1   57[BANK0 ] unsigned char 
  3768 ;;  i               1   56[BANK0 ] unsigned char 
  3769 ;;  writebuffer    17   19[BANK0 ] unsigned char [17]
  3770 ;;  displaybuffe   16   36[BANK0 ] unsigned int [8]
  3771 ;;  x               2   54[BANK0 ] unsigned int 
  3772 ;;  y               2   52[BANK0 ] unsigned int 
  3773 ;; Return value:  Size  Location     Type
  3774 ;;                  1    wreg      void 
  3775 ;; Registers used:
  3776 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3777 ;; Tracked objects:
  3778 ;;		On entry : B1F/0
  3779 ;;		On exit  : 0/0
  3780 ;;		Unchanged: 0/0
  3781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3782 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3783 ;;      Locals:         0      40       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3784 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3785 ;;      Totals:         0      46       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3786 ;;Total ram usage:       46 bytes
  3787 ;; Hardware stack levels required when called:   15
  3788 ;; This function calls:
  3789 ;;		_SYSTEM_Initialize
  3790 ;;		___awdiv
  3791 ;;		_i2c_writeNBytes
  3792 ;; This function is called by:
  3793 ;;		Startup code after reset
  3794 ;; This function uses a non-reentrant model
  3795 ;;
  3796                           
  3797                           
  3798                           ;psect for function _main
  3799  0044                     _main:	
  3800                           
  3801                           ;main.c: 51: SYSTEM_Initialize();
  3802                           
  3803                           ;incstack = 0
  3804                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3805  0044  3186  26B1  3180   	fcall	_SYSTEM_Initialize
  3806                           
  3807                           ;main.c: 57: (INTCONbits.GIE = 1);
  3808  0047  178B               	bsf	11,7	;volatile
  3809                           
  3810                           ;main.c: 60: (INTCONbits.PEIE = 1);
  3811  0048  170B               	bsf	11,6	;volatile
  3812                           
  3813                           ;main.c: 62: uint8_t writebuffer[17];
  3814                           ;main.c: 63: for (uint8_t i = 0; i < 8; i++) {
  3815  0049  0020               	movlb	0	; select bank0
  3816  004A  01D8               	clrf	main@i
  3817  004B  3008               	movlw	8
  3818  004C  0258               	subwf	main@i,w
  3819  004D  1803               	btfsc	3,0
  3820  004E  285C               	goto	l4573
  3821  004F                     l4567:	
  3822                           
  3823                           ;main.c: 64: writebuffer[i] = 0;
  3824  004F  0858               	movf	main@i,w
  3825  0050  3E33               	addlw	(low (main@writebuffer| 0))& (0+255)
  3826  0051  0086               	movwf	6
  3827  0052  0187               	clrf	7
  3828  0053  0181               	clrf	1
  3829  0054  3001               	movlw	1
  3830  0055  00AD               	movwf	??_main
  3831  0056  082D               	movf	??_main,w
  3832  0057  07D8               	addwf	main@i,f
  3833  0058  3008               	movlw	8
  3834  0059  0258               	subwf	main@i,w
  3835  005A  1C03               	skipc
  3836  005B  284F               	goto	l4567
  3837  005C                     l4573:	
  3838                           
  3839                           ;main.c: 65: }
  3840                           ;main.c: 66: writebuffer[0] = 0x21;
  3841  005C  3021               	movlw	33
  3842  005D  00AD               	movwf	??_main
  3843  005E  082D               	movf	??_main,w
  3844  005F  00B3               	movwf	main@writebuffer
  3845                           
  3846                           ;main.c: 67: i2c_writeNBytes(0x70, writebuffer, 1);
  3847  0060  3033               	movlw	(low (main@writebuffer| 0))& (0+255)
  3848  0061  00AD               	movwf	??_main
  3849  0062  082D               	movf	??_main,w
  3850  0063  00A9               	movwf	i2c_writeNBytes@data
  3851  0064  3001               	movlw	1
  3852  0065  00AA               	movwf	i2c_writeNBytes@len
  3853  0066  3000               	movlw	0
  3854  0067  00AB               	movwf	i2c_writeNBytes@len+1
  3855  0068  3070               	movlw	112
  3856  0069  3183  236A  3180   	fcall	_i2c_writeNBytes
  3857                           
  3858                           ;main.c: 69: uint16_t displaybuffer[8];
  3859                           ;main.c: 70: for (uint8_t i = 0; i < 8; i++) {
  3860  006C  0020               	movlb	0	; select bank0
  3861  006D  01D9               	clrf	main@i_458
  3862  006E  3008               	movlw	8
  3863  006F  0259               	subwf	main@i_458,w
  3864  0070  1803               	btfsc	3,0
  3865  0071  2881               	goto	l4589
  3866  0072                     l4583:	
  3867                           
  3868                           ;main.c: 71: displaybuffer[i] = 0;
  3869  0072  3559               	lslf	main@i_458,w
  3870  0073  3E44               	addlw	(low (main@displaybuffer| 0))& (0+255)
  3871  0074  0086               	movwf	6
  3872  0075  0187               	clrf	7
  3873  0076  3000               	movlw	0
  3874  0077  3FC0               	movwi [0]fsr1
  3875  0078  3FC1               	movwi [1]fsr1
  3876  0079  3001               	movlw	1
  3877  007A  00AD               	movwf	??_main
  3878  007B  082D               	movf	??_main,w
  3879  007C  07D9               	addwf	main@i_458,f
  3880  007D  3008               	movlw	8
  3881  007E  0259               	subwf	main@i_458,w
  3882  007F  1C03               	skipc
  3883  0080  2872               	goto	l4583
  3884  0081                     l4589:	
  3885                           
  3886                           ;main.c: 72: }
  3887                           ;main.c: 74: uint16_t x = 0;
  3888  0081  01D6               	clrf	main@x
  3889  0082  01D7               	clrf	main@x+1
  3890                           
  3891                           ;main.c: 75: uint16_t y = 0;
  3892  0083  01D4               	clrf	main@y
  3893  0084  01D5               	clrf	main@y+1
  3894                           
  3895                           ;main.c: 76: displaybuffer[y] |= (1 << (x+8)) | (1 << x);
  3896  0085  3001               	movlw	1
  3897  0086  00AD               	movwf	??_main
  3898  0087  3000               	movlw	0
  3899  0088  00AE               	movwf	??_main+1
  3900  0089  0A56               	incf	main@x,w
  3901  008A  288D               	goto	u2894
  3902  008B                     u2895:	
  3903  008B  35AD               	lslf	??_main,f
  3904  008C  0DAE               	rlf	??_main+1,f
  3905  008D                     u2894:	
  3906  008D  0B89               	decfsz	9,f
  3907  008E  288B               	goto	u2895
  3908  008F  3001               	movlw	1
  3909  0090  00AF               	movwf	??_main+2
  3910  0091  3000               	movlw	0
  3911  0092  00B0               	movwf	??_main+3
  3912  0093  0856               	movf	main@x,w
  3913  0094  3E08               	addlw	8
  3914  0095  0A89               	incf	9,f
  3915  0096  2899               	goto	u2904
  3916  0097                     u2905:	
  3917  0097  35AF               	lslf	??_main+2,f
  3918  0098  0DB0               	rlf	??_main+3,f
  3919  0099                     u2904:	
  3920  0099  0B89               	decfsz	9,f
  3921  009A  2897               	goto	u2905
  3922  009B  082D               	movf	??_main,w
  3923  009C  042F               	iorwf	??_main+2,w
  3924  009D  00B1               	movwf	??_main+4
  3925  009E  082E               	movf	??_main+1,w
  3926  009F  0430               	iorwf	??_main+3,w
  3927  00A0  00B2               	movwf	??_main+5
  3928  00A1  3554               	lslf	main@y,w
  3929  00A2  3E44               	addlw	(low (main@displaybuffer| 0))& (0+255)
  3930  00A3  0086               	movwf	6
  3931  00A4  0187               	clrf	7
  3932  00A5  0831               	movf	??_main+4,w
  3933  00A6  0481               	iorwf	1,f
  3934  00A7  3141               	addfsr 1,1
  3935  00A8  0832               	movf	??_main+5,w
  3936  00A9  0481               	iorwf	1,f
  3937  00AA                     l4593:	
  3938                           ;main.c: 77: while (1)
  3939                           
  3940                           
  3941                           ;main.c: 78: {
  3942                           ;main.c: 79: writebuffer[0] = 0;
  3943  00AA  0020               	movlb	0	; select bank0
  3944  00AB  01B3               	clrf	main@writebuffer
  3945                           
  3946                           ;main.c: 80: for (uint8_t i = 1; i < 17; i += 2) {
  3947  00AC  01DA               	clrf	main@i_461
  3948  00AD  0ADA               	incf	main@i_461,f
  3949  00AE  3011               	movlw	17
  3950  00AF  025A               	subwf	main@i_461,w
  3951  00B0  1803               	btfsc	3,0
  3952  00B1  28F7               	goto	l4607
  3953  00B2                     l4601:	
  3954                           
  3955                           ;main.c: 81: writebuffer[i] = displaybuffer[i/2] & 0xFF;
  3956  00B2  3002               	movlw	2
  3957  00B3  00A0               	movwf	___awdiv@divisor
  3958  00B4  3000               	movlw	0
  3959  00B5  00A1               	movwf	___awdiv@divisor+1
  3960  00B6  085A               	movf	main@i_461,w
  3961  00B7  00AD               	movwf	??_main
  3962  00B8  01AE               	clrf	??_main+1
  3963  00B9  082D               	movf	??_main,w
  3964  00BA  00A2               	movwf	___awdiv@dividend
  3965  00BB  082E               	movf	??_main+1,w
  3966  00BC  00A3               	movwf	___awdiv@dividend+1
  3967  00BD  3181  2104  3180   	fcall	___awdiv
  3968  00C0  0020               	movlb	0	; select bank0
  3969  00C1  0820               	movf	?___awdiv,w
  3970  00C2  0709               	addwf	9,w
  3971  00C3  3E44               	addlw	(low (main@displaybuffer| 0))& (0+255)
  3972  00C4  0086               	movwf	6
  3973  00C5  0187               	clrf	7
  3974  00C6  0801               	movf	1,w
  3975  00C7  00AF               	movwf	??_main+2
  3976  00C8  085A               	movf	main@i_461,w
  3977  00C9  3E33               	addlw	(low (main@writebuffer| 0))& (0+255)
  3978  00CA  0086               	movwf	6
  3979  00CB  0187               	clrf	7
  3980  00CC  082F               	movf	??_main+2,w
  3981  00CD  0081               	movwf	1
  3982                           
  3983                           ;main.c: 82: writebuffer[i + 1] = displaybuffer[i/2] >> 8;
  3984  00CE  3002               	movlw	2
  3985  00CF  00A0               	movwf	___awdiv@divisor
  3986  00D0  3000               	movlw	0
  3987  00D1  00A1               	movwf	___awdiv@divisor+1
  3988  00D2  085A               	movf	main@i_461,w
  3989  00D3  00AD               	movwf	??_main
  3990  00D4  01AE               	clrf	??_main+1
  3991  00D5  082D               	movf	??_main,w
  3992  00D6  00A2               	movwf	___awdiv@dividend
  3993  00D7  082E               	movf	??_main+1,w
  3994  00D8  00A3               	movwf	___awdiv@dividend+1
  3995  00D9  3181  2104  3180   	fcall	___awdiv
  3996  00DC  0020               	movlb	0	; select bank0
  3997  00DD  0820               	movf	?___awdiv,w
  3998  00DE  0709               	addwf	9,w
  3999  00DF  3E44               	addlw	(low (main@displaybuffer| 0))& (0+255)
  4000  00E0  0086               	movwf	6
  4001  00E1  0187               	clrf	7
  4002  00E2  3F40               	moviw [0]fsr1
  4003  00E3  00AF               	movwf	??_main+2
  4004  00E4  3F41               	moviw [1]fsr1
  4005  00E5  00B0               	movwf	??_main+3
  4006  00E6  0830               	movf	??_main+3,w
  4007  00E7  00B1               	movwf	??_main+4
  4008  00E8  085A               	movf	main@i_461,w
  4009  00E9  3E01               	addlw	1
  4010  00EA  3E33               	addlw	(low (main@writebuffer| 0))& (0+255)
  4011  00EB  0086               	movwf	6
  4012  00EC  0187               	clrf	7
  4013  00ED  0831               	movf	??_main+4,w
  4014  00EE  0081               	movwf	1
  4015  00EF  3002               	movlw	2
  4016  00F0  00AD               	movwf	??_main
  4017  00F1  082D               	movf	??_main,w
  4018  00F2  07DA               	addwf	main@i_461,f
  4019  00F3  3011               	movlw	17
  4020  00F4  025A               	subwf	main@i_461,w
  4021  00F5  1C03               	skipc
  4022  00F6  28B2               	goto	l4601
  4023  00F7                     l4607:	
  4024                           
  4025                           ;main.c: 83: }
  4026                           ;main.c: 84: i2c_writeNBytes(0x70, writebuffer, 17);
  4027  00F7  3033               	movlw	(low (main@writebuffer| 0))& (0+255)
  4028  00F8  00AD               	movwf	??_main
  4029  00F9  082D               	movf	??_main,w
  4030  00FA  00A9               	movwf	i2c_writeNBytes@data
  4031  00FB  3011               	movlw	17
  4032  00FC  00AA               	movwf	i2c_writeNBytes@len
  4033  00FD  3000               	movlw	0
  4034  00FE  00AB               	movwf	i2c_writeNBytes@len+1
  4035  00FF  3070               	movlw	112
  4036  0100  3183  236A  3180   	fcall	_i2c_writeNBytes
  4037  0103  28AA               	goto	l4593
  4038  0104                     __end_of_main:	
  4039                           
  4040                           	psect	text1
  4041  036A                     __ptext1:	
  4042 ;; *************** function _i2c_writeNBytes *****************
  4043 ;; Defined at:
  4044 ;;		line 48 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  4045 ;; Parameters:    Size  Location     Type
  4046 ;;  address         1    wreg     unsigned char 
  4047 ;;  data            1    9[BANK0 ] PTR void 
  4048 ;;		 -> main@writebuffer(17), 
  4049 ;;  len             2   10[BANK0 ] unsigned int 
  4050 ;; Auto vars:     Size  Location     Type
  4051 ;;  address         1   12[BANK0 ] unsigned char 
  4052 ;; Return value:  Size  Location     Type
  4053 ;;                  1    wreg      void 
  4054 ;; Registers used:
  4055 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4056 ;; Tracked objects:
  4057 ;;		On entry : 0/0
  4058 ;;		On exit  : 0/0
  4059 ;;		Unchanged: 0/0
  4060 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4061 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4062 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4063 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4064 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4065 ;;Total ram usage:        4 bytes
  4066 ;; Hardware stack levels used:    1
  4067 ;; Hardware stack levels required when called:   14
  4068 ;; This function calls:
  4069 ;;		_i2c_close
  4070 ;;		_i2c_masterWrite
  4071 ;;		_i2c_open
  4072 ;;		_i2c_setAddressNACKCallback
  4073 ;;		_i2c_setBuffer
  4074 ;; This function is called by:
  4075 ;;		_main
  4076 ;; This function uses a non-reentrant model
  4077 ;;
  4078                           
  4079                           
  4080                           ;psect for function _i2c_writeNBytes
  4081  036A                     _i2c_writeNBytes:	
  4082                           
  4083                           ;incstack = 0
  4084                           ; Regs used in _i2c_writeNBytes: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4085                           ;i2c_writeNBytes@address stored from wreg
  4086  036A  0020               	movlb	0	; select bank0
  4087  036B  00AC               	movwf	i2c_writeNBytes@address
  4088  036C                     l4519:	
  4089                           ;i2c_simple_master.c: 50: while(!i2c_open(address));
  4090                           
  4091  036C  0020               	movlb	0	; select bank0
  4092  036D  082C               	movf	i2c_writeNBytes@address,w
  4093  036E  3181  21A6  3183   	fcall	_i2c_open
  4094  0371  3A00               	xorlw	0
  4095  0372  1903               	skipnz
  4096  0373  2B6C               	goto	l4519
  4097                           
  4098                           ;i2c_simple_master.c: 51: i2c_setBuffer(data,len);
  4099  0374  0020               	movlb	0	; select bank0
  4100  0375  082B               	movf	i2c_writeNBytes@len+1,w
  4101  0376  00A1               	movwf	i2c_setBuffer@bufferSize+1
  4102  0377  082A               	movf	i2c_writeNBytes@len,w
  4103  0378  00A0               	movwf	i2c_setBuffer@bufferSize
  4104  0379  0829               	movf	i2c_writeNBytes@data,w
  4105  037A  3185  252B  3183   	fcall	_i2c_setBuffer
  4106                           
  4107                           ;i2c_simple_master.c: 52: i2c_setAddressNACKCallback(i2c_restartWrite,(0));
  4108  037D  309F               	movlw	low _i2c_restartWrite
  4109  037E  0020               	movlb	0	; select bank0
  4110  037F  00A5               	movwf	i2c_setAddressNACKCallback@cb
  4111  0380  3006               	movlw	high _i2c_restartWrite
  4112  0381  00A6               	movwf	i2c_setAddressNACKCallback@cb+1
  4113  0382  01A7               	clrf	i2c_setAddressNACKCallback@p
  4114  0383  3185  258E  3183   	fcall	_i2c_setAddressNACKCallback
  4115                           
  4116                           ;i2c_simple_master.c: 53: i2c_masterWrite();
  4117  0386  3186  26C7  3183   	fcall	_i2c_masterWrite
  4118  0389                     l4527:	
  4119                           ;i2c_simple_master.c: 54: while(I2C_BUSY == i2c_close());
  4120                           
  4121  0389  3184  24A1  3183   	fcall	_i2c_close
  4122  038C  3A01               	xorlw	1
  4123  038D  1D03               	btfss	3,2
  4124  038E  0008               	return
  4125  038F  2B89               	goto	l4527
  4126  0390                     __end_of_i2c_writeNBytes:	
  4127                           
  4128                           	psect	text2
  4129  058E                     __ptext2:	
  4130 ;; *************** function _i2c_setAddressNACKCallback *****************
  4131 ;; Defined at:
  4132 ;;		line 99 in file "mcc_generated_files/drivers/i2c_master.c"
  4133 ;; Parameters:    Size  Location     Type
  4134 ;;  cb              2    5[BANK0 ] PTR FTN(PTR void ,)enum 
  4135 ;;		 -> i2c_restartWrite(1), 
  4136 ;;  p               1    7[BANK0 ] PTR void 
  4137 ;;		 -> NULL(0), 
  4138 ;; Auto vars:     Size  Location     Type
  4139 ;;		None
  4140 ;; Return value:  Size  Location     Type
  4141 ;;                  1    wreg      void 
  4142 ;; Registers used:
  4143 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4144 ;; Tracked objects:
  4145 ;;		On entry : 0/0
  4146 ;;		On exit  : 0/0
  4147 ;;		Unchanged: 0/0
  4148 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4149 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4150 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4151 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4152 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4153 ;;Total ram usage:        4 bytes
  4154 ;; Hardware stack levels used:    1
  4155 ;; Hardware stack levels required when called:    7
  4156 ;; This function calls:
  4157 ;;		_setCallBack
  4158 ;; This function is called by:
  4159 ;;		_i2c_writeNBytes
  4160 ;;		_i2c_write1ByteRegister
  4161 ;;		_i2c_read1ByteRegister
  4162 ;;		_i2c_read2ByteRegister
  4163 ;;		_i2c_write2ByteRegister
  4164 ;;		_i2c_readDataBlock
  4165 ;; This function uses a non-reentrant model
  4166 ;;
  4167                           
  4168                           
  4169                           ;psect for function _i2c_setAddressNACKCallback
  4170  058E                     _i2c_setAddressNACKCallback:	
  4171                           
  4172                           ;i2c_master.c: 101: setCallBack(i2c_addressNACK,cb,p);
  4173                           
  4174                           ;incstack = 0
  4175                           ; Regs used in _i2c_setAddressNACKCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  4176  058E  0020               	movlb	0	; select bank0
  4177  058F  0826               	movf	i2c_setAddressNACKCallback@cb+1,w
  4178  0590  00A1               	movwf	setCallBack@cb+1
  4179  0591  0825               	movf	i2c_setAddressNACKCallback@cb,w
  4180  0592  00A0               	movwf	setCallBack@cb
  4181  0593  0827               	movf	i2c_setAddressNACKCallback@p,w
  4182  0594  00A8               	movwf	??_i2c_setAddressNACKCallback
  4183  0595  0828               	movf	??_i2c_setAddressNACKCallback,w
  4184  0596  00A2               	movwf	setCallBack@p
  4185  0597  3002               	movlw	2
  4186  0598  3183  23B5         	fcall	_setCallBack
  4187  059A  0008               	return
  4188  059B                     __end_of_i2c_setAddressNACKCallback:	
  4189                           
  4190                           	psect	text3
  4191  01A6                     __ptext3:	
  4192 ;; *************** function _i2c_open *****************
  4193 ;; Defined at:
  4194 ;;		line 116 in file "mcc_generated_files/drivers/i2c_master.c"
  4195 ;; Parameters:    Size  Location     Type
  4196 ;;  address         1    wreg     unsigned char 
  4197 ;; Auto vars:     Size  Location     Type
  4198 ;;  address         1    3[BANK0 ] unsigned char 
  4199 ;;  ret             1    4[BANK0 ] enum E12166
  4200 ;; Return value:  Size  Location     Type
  4201 ;;                  1    wreg      enum E12166
  4202 ;; Registers used:
  4203 ;;		wreg, status,2, status,0, pclath, cstack
  4204 ;; Tracked objects:
  4205 ;;		On entry : 0/0
  4206 ;;		On exit  : 0/0
  4207 ;;		Unchanged: 0/0
  4208 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4209 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4210 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4211 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4212 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4213 ;;Total ram usage:        3 bytes
  4214 ;; Hardware stack levels used:    1
  4215 ;; Hardware stack levels required when called:    7
  4216 ;; This function calls:
  4217 ;;		_i2c_driver_open
  4218 ;;		_i2c_driver_setBusCollisionISR
  4219 ;;		_i2c_driver_setI2cISR
  4220 ;;		_mssp_clearIRQ
  4221 ;; This function is called by:
  4222 ;;		_i2c_writeNBytes
  4223 ;;		_i2c_write1ByteRegister
  4224 ;;		_i2c_read1ByteRegister
  4225 ;;		_i2c_read2ByteRegister
  4226 ;;		_i2c_write2ByteRegister
  4227 ;;		_i2c_readDataBlock
  4228 ;;		_i2c_readNBytes
  4229 ;; This function uses a non-reentrant model
  4230 ;;
  4231                           
  4232                           
  4233                           ;psect for function _i2c_open
  4234  01A6                     _i2c_open:	
  4235                           
  4236                           ;incstack = 0
  4237                           ; Regs used in _i2c_open: [wreg+status,2+status,0+pclath+cstack]
  4238                           ;i2c_open@address stored from wreg
  4239  01A6  0020               	movlb	0	; select bank0
  4240  01A7  00A3               	movwf	i2c_open@address
  4241                           
  4242                           ;i2c_master.c: 118: i2c_error_t ret = I2C_BUSY;
  4243  01A8  01A4               	clrf	i2c_open@ret
  4244  01A9  0AA4               	incf	i2c_open@ret,f
  4245                           
  4246                           ;i2c_master.c: 120: if(!i2c_status.inUse)
  4247  01AA  0021               	movlb	1	; select bank1
  4248  01AB  18C0               	btfsc	_i2c_status^(0+128),1
  4249  01AC  29F1               	goto	l334
  4250                           
  4251                           ;i2c_master.c: 121: {
  4252                           ;i2c_master.c: 122: i2c_status.address = address;
  4253  01AD  0020               	movlb	0	; select bank0
  4254  01AE  0823               	movf	i2c_open@address,w
  4255  01AF  00A2               	movwf	??_i2c_open
  4256  01B0  0822               	movf	??_i2c_open,w
  4257  01B1  0021               	movlb	1	; select bank1
  4258  01B2  00C1               	movwf	(_i2c_status^(0+128)+1)
  4259                           
  4260                           ;i2c_master.c: 123: i2c_status.busy = 0;
  4261  01B3  1040               	bcf	_i2c_status^(0+128),0
  4262                           
  4263                           ;i2c_master.c: 124: i2c_status.inUse = 1;
  4264  01B4  14C0               	bsf	_i2c_status^(0+128),1
  4265                           
  4266                           ;i2c_master.c: 125: i2c_status.addressNACKCheck = 0;
  4267  01B5  11C0               	bcf	_i2c_status^(0+128),3
  4268                           
  4269                           ;i2c_master.c: 126: i2c_status.state = I2C_RESET;
  4270  01B6  300E               	movlw	14
  4271  01B7  0020               	movlb	0	; select bank0
  4272  01B8  00A2               	movwf	??_i2c_open
  4273  01B9  0822               	movf	??_i2c_open,w
  4274  01BA  0021               	movlb	1	; select bank1
  4275  01BB  00C9               	movwf	(_i2c_status^(0+128)+9)
  4276                           
  4277                           ;i2c_master.c: 127: i2c_status.time_out_value = 500;
  4278  01BC  30F4               	movlw	244
  4279  01BD  00C7               	movwf	(_i2c_status^(0+128)+7)
  4280  01BE  3001               	movlw	1
  4281  01BF  00C8               	movwf	(_i2c_status^(0+128)+8)
  4282                           
  4283                           ;i2c_master.c: 128: i2c_status.bufferFree = 1;
  4284  01C0  1540               	bsf	_i2c_status^(0+128),2
  4285                           
  4286                           ;i2c_master.c: 131: i2c_status.callbackTable[i2c_dataComplete]=returnStop;
  4287  01C1  30AB               	movlw	low _returnStop
  4288  01C2  00CB               	movwf	(low ((_i2c_status| 0+11)))^(0+128)
  4289  01C3  3006               	movlw	high _returnStop
  4290  01C4  00CC               	movwf	((low ((_i2c_status| 0+11)))^(0+128)+1)
  4291                           
  4292                           ;i2c_master.c: 132: i2c_status.callbackPayload[i2c_dataComplete] = (0);
  4293  01C5  01D7               	clrf	(low ((_i2c_status| 0+23)))^(0+128)
  4294                           
  4295                           ;i2c_master.c: 133: i2c_status.callbackTable[i2c_writeCollision]=returnStop;
  4296  01C6  30AB               	movlw	low _returnStop
  4297  01C7  00CD               	movwf	(low ((_i2c_status| 0+13)))^(0+128)
  4298  01C8  3006               	movlw	high _returnStop
  4299  01C9  00CE               	movwf	((low ((_i2c_status| 0+13)))^(0+128)+1)
  4300                           
  4301                           ;i2c_master.c: 134: i2c_status.callbackPayload[i2c_writeCollision] = (0);
  4302  01CA  01D8               	clrf	(low ((_i2c_status| 0+24)))^(0+128)
  4303                           
  4304                           ;i2c_master.c: 135: i2c_status.callbackTable[i2c_addressNACK]=returnStop;
  4305  01CB  30AB               	movlw	low _returnStop
  4306  01CC  00CF               	movwf	(low ((_i2c_status| 0+15)))^(0+128)
  4307  01CD  3006               	movlw	high _returnStop
  4308  01CE  00D0               	movwf	((low ((_i2c_status| 0+15)))^(0+128)+1)
  4309                           
  4310                           ;i2c_master.c: 136: i2c_status.callbackPayload[i2c_addressNACK] = (0);
  4311  01CF  01D9               	clrf	(low ((_i2c_status| 0+25)))^(0+128)
  4312                           
  4313                           ;i2c_master.c: 137: i2c_status.callbackTable[i2c_dataNACK]=returnStop;
  4314  01D0  30AB               	movlw	low _returnStop
  4315  01D1  00D1               	movwf	(low ((_i2c_status| 0+17)))^(0+128)
  4316  01D2  3006               	movlw	high _returnStop
  4317  01D3  00D2               	movwf	((low ((_i2c_status| 0+17)))^(0+128)+1)
  4318                           
  4319                           ;i2c_master.c: 138: i2c_status.callbackPayload[i2c_dataNACK] = (0);
  4320  01D4  01DA               	clrf	(low ((_i2c_status| 0+26)))^(0+128)
  4321                           
  4322                           ;i2c_master.c: 139: i2c_status.callbackTable[i2c_timeOut]=returnReset;
  4323  01D5  30A5               	movlw	low _returnReset
  4324  01D6  00D3               	movwf	(low ((_i2c_status| 0+19)))^(0+128)
  4325  01D7  3006               	movlw	high _returnReset
  4326  01D8  00D4               	movwf	((low ((_i2c_status| 0+19)))^(0+128)+1)
  4327                           
  4328                           ;i2c_master.c: 140: i2c_status.callbackPayload[i2c_timeOut] = (0);
  4329  01D9  01DB               	clrf	(low ((_i2c_status| 0+27)))^(0+128)
  4330                           
  4331                           ;i2c_master.c: 142: i2c_driver_open();
  4332  01DA  3186  2605  3181   	fcall	_i2c_driver_open
  4333                           
  4334                           ;i2c_master.c: 143: mssp_clearIRQ();
  4335  01DD  3187  270C  3181   	fcall	_mssp_clearIRQ
  4336                           
  4337                           ;i2c_master.c: 145: i2c_driver_setBusCollisionISR(i2c_busCollisionISR);
  4338  01E0  3021               	movlw	low _i2c_busCollisionISR
  4339  01E1  0020               	movlb	0	; select bank0
  4340  01E2  00A0               	movwf	i2c_driver_setBusCollisionISR@f
  4341  01E3  3007               	movlw	high _i2c_busCollisionISR
  4342  01E4  00A1               	movwf	i2c_driver_setBusCollisionISR@f+1
  4343  01E5  3186  2693  3181   	fcall	_i2c_driver_setBusCollisionISR
  4344                           
  4345                           ;i2c_master.c: 146: i2c_driver_setI2cISR(i2c_ISR);
  4346  01E8  3090               	movlw	low _i2c_ISR
  4347  01E9  0020               	movlb	0	; select bank0
  4348  01EA  00A0               	movwf	i2c_driver_setI2cISR@f
  4349  01EB  3003               	movlw	high _i2c_ISR
  4350  01EC  00A1               	movwf	i2c_driver_setI2cISR@f+1
  4351  01ED  3186  268D         	fcall	_i2c_driver_setI2cISR
  4352                           
  4353                           ;i2c_master.c: 151: ret = I2C_NOERR;
  4354  01EF  0020               	movlb	0	; select bank0
  4355  01F0  01A4               	clrf	i2c_open@ret
  4356  01F1                     l334:	
  4357                           
  4358                           ;i2c_master.c: 152: }
  4359                           ;i2c_master.c: 153: return ret;
  4360  01F1  0020               	movlb	0	; select bank0
  4361  01F2  0824               	movf	i2c_open@ret,w
  4362  01F3  0008               	return
  4363  01F4                     __end_of_i2c_open:	
  4364                           
  4365                           	psect	text4
  4366  068D                     __ptext4:	
  4367 ;; *************** function _i2c_driver_setI2cISR *****************
  4368 ;; Defined at:
  4369 ;;		line 262 in file "mcc_generated_files/i2c_driver.c"
  4370 ;; Parameters:    Size  Location     Type
  4371 ;;  f               2    0[BANK0 ] PTR void 
  4372 ;;		 -> i2c_ISR(1), 
  4373 ;; Auto vars:     Size  Location     Type
  4374 ;;		None
  4375 ;; Return value:  Size  Location     Type
  4376 ;;                  1    wreg      void 
  4377 ;; Registers used:
  4378 ;;		wreg
  4379 ;; Tracked objects:
  4380 ;;		On entry : 0/0
  4381 ;;		On exit  : 0/0
  4382 ;;		Unchanged: 0/0
  4383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4384 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4385 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4386 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4387 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4388 ;;Total ram usage:        2 bytes
  4389 ;; Hardware stack levels used:    1
  4390 ;; Hardware stack levels required when called:    6
  4391 ;; This function calls:
  4392 ;;		Nothing
  4393 ;; This function is called by:
  4394 ;;		_i2c_open
  4395 ;; This function uses a non-reentrant model
  4396 ;;
  4397                           
  4398                           
  4399                           ;psect for function _i2c_driver_setI2cISR
  4400  068D                     _i2c_driver_setI2cISR:	
  4401                           
  4402                           ;i2c_driver.c: 263: i2c_driver_i2cISR = f;
  4403                           
  4404                           ;incstack = 0
  4405                           ; Regs used in _i2c_driver_setI2cISR: [wreg]
  4406  068D  0020               	movlb	0	; select bank0
  4407  068E  0821               	movf	i2c_driver_setI2cISR@f+1,w
  4408  068F  00FB               	movwf	_i2c_driver_i2cISR+1
  4409  0690  0820               	movf	i2c_driver_setI2cISR@f,w
  4410  0691  00FA               	movwf	_i2c_driver_i2cISR
  4411  0692  0008               	return
  4412  0693                     __end_of_i2c_driver_setI2cISR:	
  4413                           
  4414                           	psect	text5
  4415  0693                     __ptext5:	
  4416 ;; *************** function _i2c_driver_setBusCollisionISR *****************
  4417 ;; Defined at:
  4418 ;;		line 258 in file "mcc_generated_files/i2c_driver.c"
  4419 ;; Parameters:    Size  Location     Type
  4420 ;;  f               2    0[BANK0 ] PTR void 
  4421 ;;		 -> i2c_busCollisionISR(1), 
  4422 ;; Auto vars:     Size  Location     Type
  4423 ;;		None
  4424 ;; Return value:  Size  Location     Type
  4425 ;;                  1    wreg      void 
  4426 ;; Registers used:
  4427 ;;		wreg
  4428 ;; Tracked objects:
  4429 ;;		On entry : 0/0
  4430 ;;		On exit  : 0/0
  4431 ;;		Unchanged: 0/0
  4432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4433 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4434 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4435 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4436 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4437 ;;Total ram usage:        2 bytes
  4438 ;; Hardware stack levels used:    1
  4439 ;; Hardware stack levels required when called:    6
  4440 ;; This function calls:
  4441 ;;		Nothing
  4442 ;; This function is called by:
  4443 ;;		_i2c_open
  4444 ;; This function uses a non-reentrant model
  4445 ;;
  4446                           
  4447                           
  4448                           ;psect for function _i2c_driver_setBusCollisionISR
  4449  0693                     _i2c_driver_setBusCollisionISR:	
  4450                           
  4451                           ;i2c_driver.c: 259: i2c_driver_busCollisionISR = f;
  4452                           
  4453                           ;incstack = 0
  4454                           ; Regs used in _i2c_driver_setBusCollisionISR: [wreg]
  4455  0693  0020               	movlb	0	; select bank0
  4456  0694  0821               	movf	i2c_driver_setBusCollisionISR@f+1,w
  4457  0695  00FD               	movwf	_i2c_driver_busCollisionISR+1
  4458  0696  0820               	movf	i2c_driver_setBusCollisionISR@f,w
  4459  0697  00FC               	movwf	_i2c_driver_busCollisionISR
  4460  0698  0008               	return
  4461  0699                     __end_of_i2c_driver_setBusCollisionISR:	
  4462                           
  4463                           	psect	text6
  4464  0605                     __ptext6:	
  4465 ;; *************** function _i2c_driver_open *****************
  4466 ;; Defined at:
  4467 ;;		line 83 in file "mcc_generated_files/i2c_driver.c"
  4468 ;; Parameters:    Size  Location     Type
  4469 ;;		None
  4470 ;; Auto vars:     Size  Location     Type
  4471 ;;		None
  4472 ;; Return value:  Size  Location     Type
  4473 ;;		None               void
  4474 ;; Registers used:
  4475 ;;		wreg, status,2
  4476 ;; Tracked objects:
  4477 ;;		On entry : 0/0
  4478 ;;		On exit  : 0/0
  4479 ;;		Unchanged: 0/0
  4480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4481 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4482 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4484 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4485 ;;Total ram usage:        0 bytes
  4486 ;; Hardware stack levels used:    1
  4487 ;; Hardware stack levels required when called:    6
  4488 ;; This function calls:
  4489 ;;		Nothing
  4490 ;; This function is called by:
  4491 ;;		_i2c_open
  4492 ;; This function uses a non-reentrant model
  4493 ;;
  4494                           
  4495                           
  4496                           ;psect for function _i2c_driver_open
  4497  0605                     _i2c_driver_open:	
  4498                           
  4499                           ;i2c_driver.c: 85: if(!SSP1CON1bits.SSPEN)
  4500                           
  4501                           ;incstack = 0
  4502                           ; Regs used in _i2c_driver_open: [wreg+status,2]
  4503  0605  0024               	movlb	4	; select bank4
  4504  0606  1A95               	btfsc	21,5	;volatile
  4505  0607  0008               	return
  4506                           
  4507                           ;i2c_driver.c: 86: {
  4508                           ;i2c_driver.c: 87: SSP1STAT = 0x00;
  4509  0608  0194               	clrf	20	;volatile
  4510                           
  4511                           ;i2c_driver.c: 88: SSP1CON1 = 0x28;
  4512  0609  3028               	movlw	40
  4513  060A  0095               	movwf	21	;volatile
  4514                           
  4515                           ;i2c_driver.c: 89: SSP1CON2 = 0x00;
  4516  060B  0196               	clrf	22	;volatile
  4517                           
  4518                           ;i2c_driver.c: 90: SSP1ADD = 0x3;
  4519  060C  3003               	movlw	3
  4520  060D  0092               	movwf	18	;volatile
  4521                           
  4522                           ;i2c_driver.c: 93: else
  4523                           ;i2c_driver.c: 94: return 0;
  4524                           ;	Return value of _i2c_driver_open is never used
  4525                           
  4526                           ;i2c_driver.c: 92: }
  4527                           
  4528                           ;i2c_driver.c: 91: return 1;
  4529                           ;	Return value of _i2c_driver_open is never used
  4530  060E  0008               	return
  4531  060F                     __end_of_i2c_driver_open:	
  4532                           
  4533                           	psect	text7
  4534  06C7                     __ptext7:	
  4535 ;; *************** function _i2c_masterWrite *****************
  4536 ;; Defined at:
  4537 ;;		line 222 in file "mcc_generated_files/drivers/i2c_master.c"
  4538 ;; Parameters:    Size  Location     Type
  4539 ;;		None
  4540 ;; Auto vars:     Size  Location     Type
  4541 ;;		None
  4542 ;; Return value:  Size  Location     Type
  4543 ;;                  1    wreg      enum E12166
  4544 ;; Registers used:
  4545 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4546 ;; Tracked objects:
  4547 ;;		On entry : 0/0
  4548 ;;		On exit  : 0/0
  4549 ;;		Unchanged: 0/0
  4550 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4551 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4552 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4553 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4554 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4555 ;;Total ram usage:        0 bytes
  4556 ;; Hardware stack levels used:    1
  4557 ;; Hardware stack levels required when called:   13
  4558 ;; This function calls:
  4559 ;;		_i2c_masterOperation
  4560 ;; This function is called by:
  4561 ;;		_i2c_writeNBytes
  4562 ;;		_i2c_write1ByteRegister
  4563 ;;		_i2c_read1ByteRegister
  4564 ;;		_i2c_read2ByteRegister
  4565 ;;		_i2c_write2ByteRegister
  4566 ;;		_i2c_readDataBlock
  4567 ;; This function uses a non-reentrant model
  4568 ;;
  4569                           
  4570                           
  4571                           ;psect for function _i2c_masterWrite
  4572  06C7                     _i2c_masterWrite:	
  4573                           
  4574                           ;i2c_master.c: 224: return i2c_masterOperation(0);
  4575                           ;	Return value of _i2c_masterWrite is never used
  4576                           
  4577                           ;incstack = 0
  4578                           ; Regs used in _i2c_masterWrite: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4579  06C7  3000               	movlw	0
  4580  06C8  3183  23DA         	fcall	_i2c_masterOperation
  4581  06CA  0008               	return
  4582  06CB                     __end_of_i2c_masterWrite:	
  4583                           
  4584                           	psect	text8
  4585  03DA                     __ptext8:	
  4586 ;; *************** function _i2c_masterOperation *****************
  4587 ;; Defined at:
  4588 ;;		line 193 in file "mcc_generated_files/drivers/i2c_master.c"
  4589 ;; Parameters:    Size  Location     Type
  4590 ;;  read            1    wreg     unsigned char 
  4591 ;; Auto vars:     Size  Location     Type
  4592 ;;  read            1    6[BANK0 ] unsigned char 
  4593 ;;  ret             1    7[BANK0 ] enum E12166
  4594 ;; Return value:  Size  Location     Type
  4595 ;;                  1    wreg      enum E12166
  4596 ;; Registers used:
  4597 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4598 ;; Tracked objects:
  4599 ;;		On entry : 0/0
  4600 ;;		On exit  : 0/0
  4601 ;;		Unchanged: 0/0
  4602 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4603 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4604 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4605 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4606 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4607 ;;Total ram usage:        3 bytes
  4608 ;; Hardware stack levels used:    1
  4609 ;; Hardware stack levels required when called:   12
  4610 ;; This function calls:
  4611 ;;		_i2c_driver_start
  4612 ;;		_i2c_poller
  4613 ;;		_mssp_IRQisEnabled
  4614 ;; This function is called by:
  4615 ;;		_i2c_masterWrite
  4616 ;;		_i2c_masterRead
  4617 ;; This function uses a non-reentrant model
  4618 ;;
  4619                           
  4620                           
  4621                           ;psect for function _i2c_masterOperation
  4622  03DA                     _i2c_masterOperation:	
  4623                           
  4624                           ;incstack = 0
  4625                           ; Regs used in _i2c_masterOperation: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4626                           ;i2c_masterOperation@read stored from wreg
  4627  03DA  0020               	movlb	0	; select bank0
  4628  03DB  00A6               	movwf	i2c_masterOperation@read
  4629                           
  4630                           ;i2c_master.c: 195: i2c_error_t ret = I2C_BUSY;
  4631  03DC  01A7               	clrf	i2c_masterOperation@ret
  4632  03DD  0AA7               	incf	i2c_masterOperation@ret,f
  4633                           
  4634                           ;i2c_master.c: 196: if(!i2c_status.busy)
  4635  03DE  0021               	movlb	1	; select bank1
  4636  03DF  1840               	btfsc	_i2c_status^(0+128),0
  4637  03E0  2BFB               	goto	l4381
  4638                           
  4639                           ;i2c_master.c: 197: {
  4640                           ;i2c_master.c: 198: i2c_status.busy = 1;
  4641  03E1  1440               	bsf	_i2c_status^(0+128),0
  4642                           
  4643                           ;i2c_master.c: 199: ret = I2C_NOERR;
  4644  03E2  0020               	movlb	0	; select bank0
  4645  03E3  01A7               	clrf	i2c_masterOperation@ret
  4646                           
  4647                           ;i2c_master.c: 201: if(read)
  4648  03E4  0826               	movf	i2c_masterOperation@read,w
  4649  03E5  1903               	btfsc	3,2
  4650  03E6  2BEB               	goto	l4375
  4651                           
  4652                           ;i2c_master.c: 202: {
  4653                           ;i2c_master.c: 203: i2c_status.state = I2C_SEND_ADR_READ;
  4654  03E7  0021               	movlb	1	; select bank1
  4655  03E8  01C9               	clrf	(_i2c_status^(0+128)+9)
  4656  03E9  0AC9               	incf	(_i2c_status^(0+128)+9),f
  4657                           
  4658                           ;i2c_master.c: 204: }
  4659  03EA  2BF1               	goto	l4377
  4660  03EB                     l4375:	
  4661                           
  4662                           ;i2c_master.c: 205: else
  4663                           ;i2c_master.c: 206: {
  4664                           ;i2c_master.c: 207: i2c_status.state = I2C_SEND_ADR_WRITE;
  4665  03EB  3002               	movlw	2
  4666  03EC  0020               	movlb	0	; select bank0
  4667  03ED  00A5               	movwf	??_i2c_masterOperation
  4668  03EE  0825               	movf	??_i2c_masterOperation,w
  4669  03EF  0021               	movlb	1	; select bank1
  4670  03F0  00C9               	movwf	(_i2c_status^(0+128)+9)
  4671  03F1                     l4377:	
  4672                           
  4673                           ;i2c_master.c: 208: }
  4674                           ;i2c_master.c: 209: i2c_driver_start();
  4675  03F1  3187  2706  3183   	fcall	_i2c_driver_start
  4676                           
  4677                           ;i2c_master.c: 211: if(! mssp_IRQisEnabled())
  4678  03F4  3186  260F  3183   	fcall	_mssp_IRQisEnabled
  4679  03F7  1803               	btfsc	3,0
  4680  03F8  2BFB               	goto	l4381
  4681                           
  4682                           ;i2c_master.c: 212: i2c_poller();
  4683  03F9  3185  25D9         	fcall	_i2c_poller
  4684  03FB                     l4381:	
  4685                           
  4686                           ;i2c_master.c: 213: }
  4687                           ;i2c_master.c: 214: return ret;
  4688  03FB  0020               	movlb	0	; select bank0
  4689  03FC  0827               	movf	i2c_masterOperation@ret,w
  4690  03FD  0008               	return
  4691  03FE                     __end_of_i2c_masterOperation:	
  4692                           
  4693                           	psect	text9
  4694  060F                     __ptext9:	
  4695 ;; *************** function _mssp_IRQisEnabled *****************
  4696 ;; Defined at:
  4697 ;;		line 43 in file "mcc_generated_files/i2c_driver.c"
  4698 ;; Parameters:    Size  Location     Type
  4699 ;;		None
  4700 ;; Auto vars:     Size  Location     Type
  4701 ;;		None
  4702 ;; Return value:  Size  Location     Type
  4703 ;;		None               void
  4704 ;; Registers used:
  4705 ;;		wreg, status,2, status,0
  4706 ;; Tracked objects:
  4707 ;;		On entry : 0/0
  4708 ;;		On exit  : 0/0
  4709 ;;		Unchanged: 0/0
  4710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4711 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4712 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4713 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4714 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4715 ;;Total ram usage:        2 bytes
  4716 ;; Hardware stack levels used:    1
  4717 ;; Hardware stack levels required when called:    6
  4718 ;; This function calls:
  4719 ;;		Nothing
  4720 ;; This function is called by:
  4721 ;;		_i2c_masterOperation
  4722 ;; This function uses a non-reentrant model
  4723 ;;
  4724                           
  4725                           
  4726                           ;psect for function _mssp_IRQisEnabled
  4727  060F                     _mssp_IRQisEnabled:	
  4728                           
  4729                           ;i2c_driver.c: 45: return PIE1bits.SSP1IE;
  4730                           
  4731                           ;incstack = 0
  4732                           ; Regs used in _mssp_IRQisEnabled: [wreg+status,2+status,0]
  4733  060F  0021               	movlb	1	; select bank1
  4734  0610  0C10               	rrf	16,w	;volatile
  4735  0611  0020               	movlb	0	; select bank0
  4736  0612  00A0               	movwf	??_mssp_IRQisEnabled
  4737  0613  0CA0               	rrf	??_mssp_IRQisEnabled,f
  4738  0614  0C20               	rrf	??_mssp_IRQisEnabled,w
  4739  0615  3901               	andlw	1
  4740  0616  00A1               	movwf	??_mssp_IRQisEnabled+1
  4741  0617  0C21               	rrf	??_mssp_IRQisEnabled+1,w
  4742  0618  0008               	return
  4743  0619                     __end_of_mssp_IRQisEnabled:	
  4744                           
  4745                           	psect	text10
  4746  05D9                     __ptext10:	
  4747 ;; *************** function _i2c_poller *****************
  4748 ;; Defined at:
  4749 ;;		line 230 in file "mcc_generated_files/drivers/i2c_master.c"
  4750 ;; Parameters:    Size  Location     Type
  4751 ;;		None
  4752 ;; Auto vars:     Size  Location     Type
  4753 ;;		None
  4754 ;; Return value:  Size  Location     Type
  4755 ;;                  1    wreg      void 
  4756 ;; Registers used:
  4757 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4758 ;; Tracked objects:
  4759 ;;		On entry : 0/0
  4760 ;;		On exit  : 0/0
  4761 ;;		Unchanged: 0/0
  4762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4764 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4765 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4766 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4767 ;;Total ram usage:        0 bytes
  4768 ;; Hardware stack levels used:    1
  4769 ;; Hardware stack levels required when called:   11
  4770 ;; This function calls:
  4771 ;;		_i2c_ISR
  4772 ;;		_mssp_waitForEvent
  4773 ;; This function is called by:
  4774 ;;		_i2c_masterOperation
  4775 ;; This function uses a non-reentrant model
  4776 ;;
  4777                           
  4778                           
  4779                           ;psect for function _i2c_poller
  4780  05D9                     _i2c_poller:	
  4781  05D9                     l4363:	
  4782                           ;i2c_master.c: 232: while(i2c_status.busy)
  4783                           
  4784                           ;incstack = 0
  4785                           ; Regs used in _i2c_poller: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4786                           
  4787  05D9  0021               	movlb	1	; select bank1
  4788  05DA  1C40               	btfss	_i2c_status^(0+128),0
  4789  05DB  0008               	return
  4790                           
  4791                           ;i2c_master.c: 233: {
  4792                           ;i2c_master.c: 234: mssp_waitForEvent((0));
  4793  05DC  3000               	movlw	0
  4794  05DD  3185  25E4  3185   	fcall	_mssp_waitForEvent
  4795                           
  4796                           ;i2c_master.c: 235: i2c_ISR();
  4797  05E0  3183  2390  3185   	fcall	_i2c_ISR
  4798  05E3  2DD9               	goto	l4363
  4799  05E4                     __end_of_i2c_poller:	
  4800                           
  4801                           	psect	text11
  4802  05E4                     __ptext11:	
  4803 ;; *************** function _mssp_waitForEvent *****************
  4804 ;; Defined at:
  4805 ;;		line 68 in file "mcc_generated_files/i2c_driver.c"
  4806 ;; Parameters:    Size  Location     Type
  4807 ;;  timeout         1    wreg     PTR unsigned int 
  4808 ;;		 -> NULL(0), 
  4809 ;; Auto vars:     Size  Location     Type
  4810 ;;  timeout         1    0[BANK0 ] PTR unsigned int 
  4811 ;;		 -> NULL(0), 
  4812 ;; Return value:  Size  Location     Type
  4813 ;;                  1    wreg      void 
  4814 ;; Registers used:
  4815 ;;		wreg
  4816 ;; Tracked objects:
  4817 ;;		On entry : 0/0
  4818 ;;		On exit  : 0/0
  4819 ;;		Unchanged: 0/0
  4820 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4821 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4822 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4823 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4824 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4825 ;;Total ram usage:        1 bytes
  4826 ;; Hardware stack levels used:    1
  4827 ;; Hardware stack levels required when called:    6
  4828 ;; This function calls:
  4829 ;;		Nothing
  4830 ;; This function is called by:
  4831 ;;		_i2c_poller
  4832 ;; This function uses a non-reentrant model
  4833 ;;
  4834                           
  4835                           
  4836                           ;psect for function _mssp_waitForEvent
  4837  05E4                     _mssp_waitForEvent:	
  4838                           
  4839                           ;i2c_driver.c: 73: if(PIR1bits.SSP1IF == 0)
  4840                           
  4841                           ;incstack = 0
  4842                           ; Regs used in _mssp_waitForEvent: [wreg]
  4843  05E4  0020               	movlb	0	; select bank0
  4844  05E5  1990               	btfsc	16,3	;volatile
  4845  05E6  0008               	return
  4846  05E7                     l55:	
  4847                           ;i2c_driver.c: 74: {
  4848                           ;i2c_driver.c: 75: while(1)
  4849                           
  4850                           
  4851                           ;i2c_driver.c: 76: {
  4852                           ;i2c_driver.c: 77: if(PIR1bits.SSP1IF) break;
  4853  05E7  0020               	movlb	0	; select bank0
  4854  05E8  1990               	btfsc	16,3	;volatile
  4855  05E9  0008               	return
  4856                           
  4857                           ;i2c_driver.c: 78: _delay((unsigned long)((100)*(1000000/4000000.0)));
  4858  05EA  3008               	movlw	8
  4859  05EB                     u3087:	
  4860  05EB  0B89               	decfsz	9,f
  4861  05EC  2DEB               	goto	u3087
  4862  05ED  0000               	nop
  4863  05EE  2DE7               	goto	l55
  4864  05EF                     __end_of_mssp_waitForEvent:	
  4865                           
  4866                           	psect	text12
  4867  0390                     __ptext12:	
  4868 ;; *************** function _i2c_ISR *****************
  4869 ;; Defined at:
  4870 ;;		line 419 in file "mcc_generated_files/drivers/i2c_master.c"
  4871 ;; Parameters:    Size  Location     Type
  4872 ;;		None
  4873 ;; Auto vars:     Size  Location     Type
  4874 ;;		None
  4875 ;; Return value:  Size  Location     Type
  4876 ;;                  1    wreg      void 
  4877 ;; Registers used:
  4878 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4879 ;; Tracked objects:
  4880 ;;		On entry : 0/0
  4881 ;;		On exit  : 0/0
  4882 ;;		Unchanged: 0/0
  4883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4884 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4885 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4886 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4887 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4888 ;;Total ram usage:        1 bytes
  4889 ;; Hardware stack levels used:    1
  4890 ;; Hardware stack levels required when called:   10
  4891 ;; This function calls:
  4892 ;;		_do_I2C_DO_ACK
  4893 ;;		_do_I2C_DO_ADDRESS_NACK
  4894 ;;		_do_I2C_DO_NACK_RESTART
  4895 ;;		_do_I2C_DO_NACK_STOP
  4896 ;;		_do_I2C_IDLE
  4897 ;;		_do_I2C_RCEN
  4898 ;;		_do_I2C_RESET
  4899 ;;		_do_I2C_RX
  4900 ;;		_do_I2C_SEND_ADR_READ
  4901 ;;		_do_I2C_SEND_ADR_WRITE
  4902 ;;		_do_I2C_SEND_RESTART
  4903 ;;		_do_I2C_SEND_RESTART_READ
  4904 ;;		_do_I2C_SEND_RESTART_WRITE
  4905 ;;		_do_I2C_SEND_STOP
  4906 ;;		_do_I2C_TX
  4907 ;;		_do_I2C_TX_EMPTY
  4908 ;;		_i2c_driver_isNACK
  4909 ;;		_mssp_clearIRQ
  4910 ;; This function is called by:
  4911 ;;		_i2c_open
  4912 ;;		_i2c_poller
  4913 ;;		_INTERRUPT_InterruptManager
  4914 ;; This function uses a non-reentrant model
  4915 ;;
  4916                           
  4917                           
  4918                           ;psect for function _i2c_ISR
  4919  0390                     _i2c_ISR:	
  4920                           
  4921                           ;Skip over the trampoline to the duplicate function for level 1
  4922  0390  1C7E               	btfss	126,0
  4923  0391  2B94               	goto	l4347
  4924  0392  3184  2C65         	ljmp	i1l4533
  4925  0394                     _i2c_ISR$intlevel0:	
  4926  0394                     l4347:	
  4927                           ;incstack = 0
  4928                           ; Regs used in _i2c_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4929                           
  4930                           
  4931                           ;i2c_master.c: 421: mssp_clearIRQ();
  4932  0394  3187  270C  3183   	fcall	_mssp_clearIRQ
  4933                           
  4934                           ;i2c_master.c: 427: if(i2c_status.addressNACKCheck && i2c_driver_isNACK())
  4935  0397  0021               	movlb	1	; select bank1
  4936  0398  1DC0               	btfss	_i2c_status^(0+128),3
  4937  0399  2BA5               	goto	l4355
  4938  039A  3185  259B  3183   	fcall	_i2c_driver_isNACK
  4939  039D  1C03               	btfss	3,0
  4940  039E  2BA5               	goto	l4355
  4941                           
  4942                           ;i2c_master.c: 428: {
  4943                           ;i2c_master.c: 429: i2c_status.state = I2C_ADDRESS_NACK;
  4944  039F  300F               	movlw	15
  4945  03A0  0020               	movlb	0	; select bank0
  4946  03A1  00A4               	movwf	??_i2c_ISR
  4947  03A2  0824               	movf	??_i2c_ISR,w
  4948  03A3  0021               	movlb	1	; select bank1
  4949  03A4  00C9               	movwf	(_i2c_status^(0+128)+9)
  4950  03A5                     l4355:	
  4951                           
  4952                           ;i2c_master.c: 430: }
  4953                           ;i2c_master.c: 432: i2c_status.state = fsmStateTable[i2c_status.state]();
  4954  03A5  0021               	movlb	1	; select bank1
  4955  03A6  3549               	lslf	(_i2c_status^(0+128)+9),w
  4956  03A7  3EA0               	addlw	(low (_fsmStateTable| 0))& (0+255)
  4957  03A8  0086               	movwf	6
  4958  03A9  0187               	clrf	7
  4959  03AA  3F41               	moviw [1]fsr1
  4960  03AB  008A               	movwf	10
  4961  03AC  3F40               	moviw [0]fsr1
  4962  03AD  000A               	callw
  4963  03AE  3183               	pagesel	$
  4964  03AF  0020               	movlb	0	; select bank0
  4965  03B0  00A4               	movwf	??_i2c_ISR
  4966  03B1  0824               	movf	??_i2c_ISR,w
  4967  03B2  0021               	movlb	1	; select bank1
  4968  03B3  00C9               	movwf	(_i2c_status^(0+128)+9)
  4969  03B4  0008               	return
  4970  03B5                     __end_of_i2c_ISR:	
  4971                           
  4972                           	psect	text13
  4973  023E                     __ptext13:	
  4974 ;; *************** function _do_I2C_RX *****************
  4975 ;; Defined at:
  4976 ;;		line 357 in file "mcc_generated_files/drivers/i2c_master.c"
  4977 ;; Parameters:    Size  Location     Type
  4978 ;;		None
  4979 ;; Auto vars:     Size  Location     Type
  4980 ;;		None
  4981 ;; Return value:  Size  Location     Type
  4982 ;;                  1    wreg      enum E12337
  4983 ;; Registers used:
  4984 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4985 ;; Tracked objects:
  4986 ;;		On entry : 0/0
  4987 ;;		On exit  : 0/0
  4988 ;;		Unchanged: 0/0
  4989 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4990 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4991 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4992 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4993 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4994 ;;Total ram usage:        1 bytes
  4995 ;; Hardware stack levels used:    1
  4996 ;; Hardware stack levels required when called:    9
  4997 ;; This function calls:
  4998 ;;		Absolute function
  4999 ;;		_do_I2C_DO_NACK_RESTART
  5000 ;;		_do_I2C_DO_NACK_STOP
  5001 ;;		_i2c_driver_getRXData
  5002 ;;		_i2c_driver_sendACK
  5003 ;;		_i2c_restartWrite
  5004 ;;		_rd1RegCompleteHandler
  5005 ;;		_rd2RegCompleteHandler
  5006 ;;		_rdBlkRegCompleteHandler
  5007 ;;		_returnReset
  5008 ;;		_returnStop
  5009 ;;		_wr1RegCompleteHandler
  5010 ;;		_wr2RegCompleteHandler
  5011 ;; This function is called by:
  5012 ;;		_i2c_ISR
  5013 ;;		i1_i2c_ISR
  5014 ;; This function uses a non-reentrant model
  5015 ;;
  5016                           
  5017                           
  5018                           ;psect for function _do_I2C_RX
  5019  023E                     _do_I2C_RX:	
  5020                           
  5021                           ;Skip over the trampoline to the duplicate function for level 1
  5022  023E  1C7E               	btfss	126,0
  5023  023F  2A42               	goto	l4301
  5024  0240  3182  2A84         	ljmp	i1l4471
  5025  0242                     _do_I2C_RX$intlevel0:	
  5026  0242                     l4301:	
  5027                           ;incstack = 0
  5028                           ; Regs used in _do_I2C_RX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5029                           
  5030                           
  5031                           ;i2c_master.c: 359: *i2c_status.data_ptr++ = i2c_driver_getRXData();
  5032  0242  3186  26FA  3182   	fcall	_i2c_driver_getRXData
  5033  0245  0020               	movlb	0	; select bank0
  5034  0246  00A0               	movwf	??_do_I2C_RX
  5035  0247  0021               	movlb	1	; select bank1
  5036  0248  0842               	movf	(low ((_i2c_status| 0+2)))^(0+128),w
  5037  0249  0086               	movwf	6
  5038  024A  0187               	clrf	7
  5039  024B  0020               	movlb	0	; select bank0
  5040  024C  0820               	movf	??_do_I2C_RX,w
  5041  024D  0081               	movwf	1
  5042  024E  3001               	movlw	1
  5043  024F  00A0               	movwf	??_do_I2C_RX
  5044  0250  0820               	movf	??_do_I2C_RX,w
  5045  0251  0021               	movlb	1	; select bank1
  5046  0252  07C2               	addwf	(low ((_i2c_status| 0+2)))^(0+128),f
  5047                           
  5048                           ;i2c_master.c: 360: if(--i2c_status.data_length)
  5049  0253  3001               	movlw	1
  5050  0254  02C3               	subwf	(_i2c_status^(0+128)+3),f
  5051  0255  3000               	movlw	0
  5052  0256  3BC4               	subwfb	((_i2c_status+1)^(0+128)+3),f
  5053  0257  0843               	movf	(_i2c_status^(0+128)+3),w
  5054  0258  0444               	iorwf	((_i2c_status+1)^(0+128)+3),w
  5055  0259  1903               	btfsc	3,2
  5056  025A  2A5F               	goto	l431
  5057                           
  5058                           ;i2c_master.c: 361: {
  5059                           ;i2c_master.c: 362: i2c_driver_sendACK();
  5060  025B  3186  26CF         	fcall	_i2c_driver_sendACK
  5061                           
  5062                           ;i2c_master.c: 363: return I2C_RCEN;
  5063  025D  3005               	movlw	5
  5064                           
  5065                           ;i2c_master.c: 364: }
  5066  025E  0008               	return
  5067  025F                     l431:	
  5068                           
  5069                           ;i2c_master.c: 365: else
  5070                           ;i2c_master.c: 366: {
  5071                           ;i2c_master.c: 367: i2c_status.bufferFree = 1;
  5072  025F  1540               	bsf	_i2c_status^(0+128),2
  5073                           
  5074                           ;i2c_master.c: 368: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
  5075  0260  2A67               	goto	l4325
  5076  0261                     l4315:	
  5077                           ;i2c_master.c: 369: {
  5078                           ;i2c_master.c: 370: case i2c_restart_write:
  5079                           
  5080                           
  5081                           ;i2c_master.c: 371: case i2c_restart_read:
  5082                           ;i2c_master.c: 372: return do_I2C_DO_NACK_RESTART();
  5083  0261  3186  262C         	fcall	_do_I2C_DO_NACK_RESTART
  5084  0263  0008               	return
  5085  0264                     l4319:	
  5086                           ;i2c_master.c: 374: case i2c_continue:
  5087                           
  5088                           ;i2c_master.c: 373: default:
  5089                           
  5090                           
  5091                           ;i2c_master.c: 375: case i2c_stop:
  5092                           ;i2c_master.c: 376: return do_I2C_DO_NACK_STOP();
  5093  0264  3186  2634         	fcall	_do_I2C_DO_NACK_STOP
  5094                           
  5095                           ;i2c_master.c: 377: }
  5096  0266  0008               	return
  5097  0267                     l4325:	
  5098  0267  0021               	movlb	1	; select bank1
  5099  0268  0857               	movf	(low ((_i2c_status| 0+23)))^(0+128),w
  5100  0269  0020               	movlb	0	; select bank0
  5101  026A  00A0               	movwf	??_do_I2C_RX
  5102  026B  0820               	movf	??_do_I2C_RX,w
  5103  026C  00A9               	movwf	returnStop@p
  5104  026D  300B               	movlw	11
  5105  026E  3EC0               	addlw	(low (_i2c_status| 0))& (0+255)
  5106  026F  0086               	movwf	6
  5107  0270  0187               	clrf	7
  5108  0271  3F41               	moviw [1]fsr1
  5109  0272  008A               	movwf	10
  5110  0273  3F40               	moviw [0]fsr1
  5111  0274  000A               	callw
  5112  0275  3182               	pagesel	$
  5113                           
  5114                           ; Switch size 1, requested type "space"
  5115                           ; Number of cases is 4, Range of values is 1 to 4
  5116                           ; switch strategies available:
  5117                           ; Name         Instructions Cycles
  5118                           ; simple_byte           13     7 (average)
  5119                           ; direct_byte           17     9 (fixed)
  5120                           ; jumptable            263     9 (fixed)
  5121                           ;	Chosen strategy is simple_byte
  5122  0276  3A01               	xorlw	1	; case 1
  5123  0277  1903               	skipnz
  5124  0278  2A64               	goto	l4319
  5125  0279  3A03               	xorlw	3	; case 2
  5126  027A  1903               	skipnz
  5127  027B  2A61               	goto	l4315
  5128  027C  3A01               	xorlw	1	; case 3
  5129  027D  1903               	skipnz
  5130  027E  2A61               	goto	l4315
  5131  027F  3A07               	xorlw	7	; case 4
  5132  0280  1903               	skipnz
  5133  0281  2A64               	goto	l4319
  5134  0282  2A64               	goto	l4319
  5135  0283  0008               	return
  5136  0284                     __end_of_do_I2C_RX:	
  5137                           
  5138                           	psect	text14
  5139  0156                     __ptext14:	
  5140 ;; *************** function _do_I2C_TX *****************
  5141 ;; Defined at:
  5142 ;;		line 333 in file "mcc_generated_files/drivers/i2c_master.c"
  5143 ;; Parameters:    Size  Location     Type
  5144 ;;		None
  5145 ;; Auto vars:     Size  Location     Type
  5146 ;;		None
  5147 ;; Return value:  Size  Location     Type
  5148 ;;                  1    wreg      enum E12337
  5149 ;; Registers used:
  5150 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5151 ;; Tracked objects:
  5152 ;;		On entry : 0/0
  5153 ;;		On exit  : 0/0
  5154 ;;		Unchanged: 0/0
  5155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5156 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5157 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5158 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5159 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5160 ;;Total ram usage:        3 bytes
  5161 ;; Hardware stack levels used:    1
  5162 ;; Hardware stack levels required when called:    9
  5163 ;; This function calls:
  5164 ;;		Absolute function
  5165 ;;		_do_I2C_SEND_RESTART_READ
  5166 ;;		_do_I2C_SEND_RESTART_WRITE
  5167 ;;		_do_I2C_SEND_STOP
  5168 ;;		_i2c_driver_TXData
  5169 ;;		_i2c_driver_isNACK
  5170 ;;		_i2c_restartWrite
  5171 ;;		_rd1RegCompleteHandler
  5172 ;;		_rd2RegCompleteHandler
  5173 ;;		_rdBlkRegCompleteHandler
  5174 ;;		_returnReset
  5175 ;;		_returnStop
  5176 ;;		_wr1RegCompleteHandler
  5177 ;;		_wr2RegCompleteHandler
  5178 ;; This function is called by:
  5179 ;;		_i2c_ISR
  5180 ;;		i1_i2c_ISR
  5181 ;; This function uses a non-reentrant model
  5182 ;;
  5183                           
  5184                           
  5185                           ;psect for function _do_I2C_TX
  5186  0156                     _do_I2C_TX:	
  5187                           
  5188                           ;Skip over the trampoline to the duplicate function for level 1
  5189  0156  1C7E               	btfss	126,0
  5190  0157  295A               	goto	l4271
  5191  0158  3181  29F4         	ljmp	i1l4441
  5192  015A                     _do_I2C_TX$intlevel0:	
  5193  015A                     l4271:	
  5194                           ;incstack = 0
  5195                           ; Regs used in _do_I2C_TX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5196                           
  5197                           
  5198                           ;i2c_master.c: 335: if(i2c_driver_isNACK())
  5199  015A  3185  259B  3181   	fcall	_i2c_driver_isNACK
  5200  015D  1803               	btfsc	3,0
  5201  015E  2969               	goto	l4289
  5202  015F  2986               	goto	l415
  5203  0160                     l4275:	
  5204                           ;i2c_master.c: 338: {
  5205                           ;i2c_master.c: 339: case i2c_restart_read:
  5206                           
  5207                           ;i2c_master.c: 336: {
  5208                           ;i2c_master.c: 337: switch(i2c_status.callbackTable[i2c_dataNACK](i2c_status.callbackPay
      +                          load[i2c_dataNACK]))
  5209                           
  5210                           
  5211                           ;i2c_master.c: 340: return do_I2C_SEND_RESTART_READ();
  5212  0160  3186  265C         	fcall	_do_I2C_SEND_RESTART_READ
  5213  0162  0008               	return
  5214  0163                     l4279:	
  5215                           ;i2c_master.c: 341: case i2c_restart_write:
  5216                           
  5217                           
  5218                           ;i2c_master.c: 342: return do_I2C_SEND_RESTART_WRITE();
  5219  0163  3186  2654         	fcall	_do_I2C_SEND_RESTART_WRITE
  5220  0165  0008               	return
  5221  0166                     l4283:	
  5222                           ;i2c_master.c: 344: case i2c_continue:
  5223                           
  5224                           ;i2c_master.c: 343: default:
  5225                           
  5226                           
  5227                           ;i2c_master.c: 345: case i2c_stop:
  5228                           ;i2c_master.c: 346: return do_I2C_SEND_STOP();
  5229  0166  3186  2644         	fcall	_do_I2C_SEND_STOP
  5230                           
  5231                           ;i2c_master.c: 347: }
  5232  0168  0008               	return
  5233  0169                     l4289:	
  5234  0169  0021               	movlb	1	; select bank1
  5235  016A  085A               	movf	(low ((_i2c_status| 0+26)))^(0+128),w
  5236  016B  0020               	movlb	0	; select bank0
  5237  016C  00A1               	movwf	??_do_I2C_TX
  5238  016D  0821               	movf	??_do_I2C_TX,w
  5239  016E  00A9               	movwf	returnStop@p
  5240  016F  3011               	movlw	17
  5241  0170  3EC0               	addlw	(low (_i2c_status| 0))& (0+255)
  5242  0171  0086               	movwf	6
  5243  0172  0187               	clrf	7
  5244  0173  3F41               	moviw [1]fsr1
  5245  0174  008A               	movwf	10
  5246  0175  3F40               	moviw [0]fsr1
  5247  0176  000A               	callw
  5248  0177  3181               	pagesel	$
  5249                           
  5250                           ; Switch size 1, requested type "space"
  5251                           ; Number of cases is 4, Range of values is 1 to 4
  5252                           ; switch strategies available:
  5253                           ; Name         Instructions Cycles
  5254                           ; simple_byte           13     7 (average)
  5255                           ; direct_byte           17     9 (fixed)
  5256                           ; jumptable            263     9 (fixed)
  5257                           ;	Chosen strategy is simple_byte
  5258  0178  3A01               	xorlw	1	; case 1
  5259  0179  1903               	skipnz
  5260  017A  2966               	goto	l4283
  5261  017B  3A03               	xorlw	3	; case 2
  5262  017C  1903               	skipnz
  5263  017D  2960               	goto	l4275
  5264  017E  3A01               	xorlw	1	; case 3
  5265  017F  1903               	skipnz
  5266  0180  2963               	goto	l4279
  5267  0181  3A07               	xorlw	7	; case 4
  5268  0182  1903               	skipnz
  5269  0183  2966               	goto	l4283
  5270  0184  2966               	goto	l4283
  5271                           
  5272                           ;i2c_master.c: 348: }
  5273  0185  0008               	return
  5274  0186                     l415:	
  5275                           
  5276                           ;i2c_master.c: 349: else
  5277                           ;i2c_master.c: 350: {
  5278                           ;i2c_master.c: 351: i2c_status.addressNACKCheck = 0;
  5279  0186  0021               	movlb	1	; select bank1
  5280  0187  11C0               	bcf	_i2c_status^(0+128),3
  5281                           
  5282                           ;i2c_master.c: 352: i2c_driver_TXData(*i2c_status.data_ptr++);
  5283  0188  3002               	movlw	2
  5284  0189  3EC0               	addlw	(low (_i2c_status| 0))& (0+255)
  5285  018A  0086               	movwf	6
  5286  018B  0187               	clrf	7
  5287  018C  3F40               	moviw [0]fsr1
  5288  018D  0084               	movwf	4
  5289  018E  0185               	clrf	5
  5290  018F  0A81               	incf	1,f
  5291  0190  0800               	movf	0,w
  5292  0191  3186  2699  3181   	fcall	_i2c_driver_TXData
  5293                           
  5294                           ;i2c_master.c: 353: return (--i2c_status.data_length)?I2C_TX:I2C_TX_EMPTY;
  5295  0194  3001               	movlw	1
  5296  0195  0021               	movlb	1	; select bank1
  5297  0196  02C3               	subwf	(_i2c_status^(0+128)+3),f
  5298  0197  3000               	movlw	0
  5299  0198  3BC4               	subwfb	((_i2c_status+1)^(0+128)+3),f
  5300  0199  0843               	movf	(_i2c_status^(0+128)+3),w
  5301  019A  0444               	iorwf	((_i2c_status+1)^(0+128)+3),w
  5302  019B  1D03               	btfss	3,2
  5303  019C  299F               	goto	l4297
  5304  019D  3006               	movlw	6
  5305  019E  29A0               	goto	L1
  5306  019F                     l4297:	
  5307  019F  3003               	movlw	3
  5308  01A0                     L1:	
  5309  01A0  0020               	movlb	0	; select bank0
  5310  01A1  00A2               	movwf	_do_I2C_TX$754
  5311  01A2  3000               	movlw	0
  5312  01A3  00A3               	movwf	_do_I2C_TX$754+1
  5313  01A4  0822               	movf	_do_I2C_TX$754,w
  5314  01A5  0008               	return
  5315  01A6                     __end_of_do_I2C_TX:	
  5316                           
  5317                           	psect	text15
  5318  02F0                     __ptext15:	
  5319 ;; *************** function _do_I2C_DO_ADDRESS_NACK *****************
  5320 ;; Defined at:
  5321 ;;		line 319 in file "mcc_generated_files/drivers/i2c_master.c"
  5322 ;; Parameters:    Size  Location     Type
  5323 ;;		None
  5324 ;; Auto vars:     Size  Location     Type
  5325 ;;		None
  5326 ;; Return value:  Size  Location     Type
  5327 ;;                  1    wreg      enum E12337
  5328 ;; Registers used:
  5329 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5330 ;; Tracked objects:
  5331 ;;		On entry : 0/0
  5332 ;;		On exit  : 0/0
  5333 ;;		Unchanged: 0/0
  5334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5335 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5336 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5337 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5338 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5339 ;;Total ram usage:        1 bytes
  5340 ;; Hardware stack levels used:    1
  5341 ;; Hardware stack levels required when called:    9
  5342 ;; This function calls:
  5343 ;;		Absolute function
  5344 ;;		_do_I2C_SEND_RESTART
  5345 ;;		_do_I2C_SEND_STOP
  5346 ;;		_i2c_restartWrite
  5347 ;;		_rd1RegCompleteHandler
  5348 ;;		_rd2RegCompleteHandler
  5349 ;;		_rdBlkRegCompleteHandler
  5350 ;;		_returnReset
  5351 ;;		_returnStop
  5352 ;;		_wr1RegCompleteHandler
  5353 ;;		_wr2RegCompleteHandler
  5354 ;; This function is called by:
  5355 ;;		_i2c_ISR
  5356 ;;		i1_i2c_ISR
  5357 ;; This function uses a non-reentrant model
  5358 ;;
  5359                           
  5360                           
  5361                           ;psect for function _do_I2C_DO_ADDRESS_NACK
  5362  02F0                     _do_I2C_DO_ADDRESS_NACK:	
  5363                           
  5364                           ;Skip over the trampoline to the duplicate function for level 1
  5365  02F0  1C7E               	btfss	126,0
  5366  02F1  2AF4               	goto	l4255
  5367  02F2  3184  2C22         	ljmp	i1l4425
  5368  02F4                     _do_I2C_DO_ADDRESS_NACK$intlevel0:	
  5369  02F4                     l4255:	
  5370                           ;incstack = 0
  5371                           ; Regs used in _do_I2C_DO_ADDRESS_NACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5372                           
  5373                           
  5374                           ;i2c_master.c: 321: i2c_status.addressNACKCheck = 0;
  5375  02F4  0021               	movlb	1	; select bank1
  5376  02F5  11C0               	bcf	_i2c_status^(0+128),3
  5377                           
  5378                           ;i2c_master.c: 322: i2c_status.error = I2C_FAIL;
  5379  02F6  3002               	movlw	2
  5380  02F7  0020               	movlb	0	; select bank0
  5381  02F8  00A0               	movwf	??_do_I2C_DO_ADDRESS_NACK
  5382  02F9  0820               	movf	??_do_I2C_DO_ADDRESS_NACK,w
  5383  02FA  0021               	movlb	1	; select bank1
  5384  02FB  00CA               	movwf	(_i2c_status^(0+128)+10)
  5385                           
  5386                           ;i2c_master.c: 323: switch(i2c_status.callbackTable[i2c_addressNACK](i2c_status.callback
      +                          Payload[i2c_addressNACK]))
  5387  02FC  2B03               	goto	l4269
  5388  02FD                     l4259:	
  5389                           ;i2c_master.c: 324: {
  5390                           ;i2c_master.c: 325: case i2c_restart_read:
  5391                           
  5392                           
  5393                           ;i2c_master.c: 326: case i2c_restart_write:
  5394                           ;i2c_master.c: 327: return do_I2C_SEND_RESTART();
  5395  02FD  3186  264C         	fcall	_do_I2C_SEND_RESTART
  5396  02FF  0008               	return
  5397  0300                     l4263:	
  5398                           ;i2c_master.c: 328: default:
  5399                           
  5400                           
  5401                           ;i2c_master.c: 329: return do_I2C_SEND_STOP();
  5402  0300  3186  2644         	fcall	_do_I2C_SEND_STOP
  5403                           
  5404                           ;i2c_master.c: 330: }
  5405  0302  0008               	return
  5406  0303                     l4269:	
  5407  0303  0021               	movlb	1	; select bank1
  5408  0304  0859               	movf	(low ((_i2c_status| 0+25)))^(0+128),w
  5409  0305  0020               	movlb	0	; select bank0
  5410  0306  00A0               	movwf	??_do_I2C_DO_ADDRESS_NACK
  5411  0307  0820               	movf	??_do_I2C_DO_ADDRESS_NACK,w
  5412  0308  00A9               	movwf	returnStop@p
  5413  0309  300F               	movlw	15
  5414  030A  3EC0               	addlw	(low (_i2c_status| 0))& (0+255)
  5415  030B  0086               	movwf	6
  5416  030C  0187               	clrf	7
  5417  030D  3F41               	moviw [1]fsr1
  5418  030E  008A               	movwf	10
  5419  030F  3F40               	moviw [0]fsr1
  5420  0310  000A               	callw
  5421  0311  3182               	pagesel	$
  5422                           
  5423                           ; Switch size 1, requested type "space"
  5424                           ; Number of cases is 2, Range of values is 2 to 3
  5425                           ; switch strategies available:
  5426                           ; Name         Instructions Cycles
  5427                           ; simple_byte            7     4 (average)
  5428                           ; direct_byte           13     9 (fixed)
  5429                           ; jumptable            263     9 (fixed)
  5430                           ;	Chosen strategy is simple_byte
  5431  0312  3A02               	xorlw	2	; case 2
  5432  0313  1903               	skipnz
  5433  0314  2AFD               	goto	l4259
  5434  0315  3A01               	xorlw	1	; case 3
  5435  0316  1903               	skipnz
  5436  0317  2AFD               	goto	l4259
  5437  0318  2B00               	goto	l4263
  5438  0319  0008               	return
  5439  031A                     __end_of_do_I2C_DO_ADDRESS_NACK:	
  5440                           
  5441                           	psect	text16
  5442  062C                     __ptext16:	
  5443 ;; *************** function _do_I2C_DO_NACK_RESTART *****************
  5444 ;; Defined at:
  5445 ;;		line 311 in file "mcc_generated_files/drivers/i2c_master.c"
  5446 ;; Parameters:    Size  Location     Type
  5447 ;;		None
  5448 ;; Auto vars:     Size  Location     Type
  5449 ;;		None
  5450 ;; Return value:  Size  Location     Type
  5451 ;;                  1    wreg      enum E12337
  5452 ;; Registers used:
  5453 ;;		wreg, status,2, status,0, pclath, cstack
  5454 ;; Tracked objects:
  5455 ;;		On entry : 0/0
  5456 ;;		On exit  : 0/0
  5457 ;;		Unchanged: 0/0
  5458 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5459 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5460 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5461 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5462 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5463 ;;Total ram usage:        0 bytes
  5464 ;; Hardware stack levels used:    1
  5465 ;; Hardware stack levels required when called:    7
  5466 ;; This function calls:
  5467 ;;		_i2c_driver_sendNACK
  5468 ;; This function is called by:
  5469 ;;		_do_I2C_RX
  5470 ;;		_i2c_ISR
  5471 ;;		i1_i2c_ISR
  5472 ;; This function uses a non-reentrant model
  5473 ;;
  5474                           
  5475                           
  5476                           ;psect for function _do_I2C_DO_NACK_RESTART
  5477  062C                     _do_I2C_DO_NACK_RESTART:	
  5478                           
  5479                           ;Skip over the trampoline to the duplicate function for level 1
  5480  062C  1C7E               	btfss	126,0
  5481  062D  2E30               	goto	l2057
  5482  062E  3186  2ED3         	ljmp	i1l2389
  5483  0630                     _do_I2C_DO_NACK_RESTART$intlevel0:	
  5484  0630                     l2057:	
  5485                           ;incstack = 0
  5486                           ; Regs used in _do_I2C_DO_NACK_RESTART: [wreg+status,2+status,0+pclath+cstack]
  5487                           
  5488                           
  5489                           ;i2c_master.c: 313: i2c_driver_sendNACK();
  5490  0630  3186  26CB         	fcall	_i2c_driver_sendNACK
  5491                           
  5492                           ;i2c_master.c: 314: return I2C_SEND_RESTART;
  5493  0632  3009               	movlw	9
  5494  0633  0008               	return
  5495  0634                     __end_of_do_I2C_DO_NACK_RESTART:	
  5496                           
  5497                           	psect	text17
  5498  0634                     __ptext17:	
  5499 ;; *************** function _do_I2C_DO_NACK_STOP *****************
  5500 ;; Defined at:
  5501 ;;		line 305 in file "mcc_generated_files/drivers/i2c_master.c"
  5502 ;; Parameters:    Size  Location     Type
  5503 ;;		None
  5504 ;; Auto vars:     Size  Location     Type
  5505 ;;		None
  5506 ;; Return value:  Size  Location     Type
  5507 ;;                  1    wreg      enum E12337
  5508 ;; Registers used:
  5509 ;;		wreg, status,2, status,0, pclath, cstack
  5510 ;; Tracked objects:
  5511 ;;		On entry : 0/0
  5512 ;;		On exit  : 0/0
  5513 ;;		Unchanged: 0/0
  5514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5515 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5516 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5517 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5518 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5519 ;;Total ram usage:        0 bytes
  5520 ;; Hardware stack levels used:    1
  5521 ;; Hardware stack levels required when called:    7
  5522 ;; This function calls:
  5523 ;;		_i2c_driver_sendNACK
  5524 ;; This function is called by:
  5525 ;;		_do_I2C_RX
  5526 ;;		_i2c_ISR
  5527 ;;		i1_i2c_ISR
  5528 ;; This function uses a non-reentrant model
  5529 ;;
  5530                           
  5531                           
  5532                           ;psect for function _do_I2C_DO_NACK_STOP
  5533  0634                     _do_I2C_DO_NACK_STOP:	
  5534                           
  5535                           ;Skip over the trampoline to the duplicate function for level 1
  5536  0634  1C7E               	btfss	126,0
  5537  0635  2E38               	goto	l2051
  5538  0636  3186  2ED7         	ljmp	i1l2383
  5539  0638                     _do_I2C_DO_NACK_STOP$intlevel0:	
  5540  0638                     l2051:	
  5541                           ;incstack = 0
  5542                           ; Regs used in _do_I2C_DO_NACK_STOP: [wreg+status,2+status,0+pclath+cstack]
  5543                           
  5544                           
  5545                           ;i2c_master.c: 307: i2c_driver_sendNACK();
  5546  0638  3186  26CB         	fcall	_i2c_driver_sendNACK
  5547                           
  5548                           ;i2c_master.c: 308: return I2C_SEND_STOP;
  5549  063A  300A               	movlw	10
  5550  063B  0008               	return
  5551  063C                     __end_of_do_I2C_DO_NACK_STOP:	
  5552                           
  5553                           	psect	text18
  5554  063C                     __ptext18:	
  5555 ;; *************** function _do_I2C_DO_ACK *****************
  5556 ;; Defined at:
  5557 ;;		line 299 in file "mcc_generated_files/drivers/i2c_master.c"
  5558 ;; Parameters:    Size  Location     Type
  5559 ;;		None
  5560 ;; Auto vars:     Size  Location     Type
  5561 ;;		None
  5562 ;; Return value:  Size  Location     Type
  5563 ;;                  1    wreg      enum E12337
  5564 ;; Registers used:
  5565 ;;		wreg, status,2, status,0, pclath, cstack
  5566 ;; Tracked objects:
  5567 ;;		On entry : 0/0
  5568 ;;		On exit  : 0/0
  5569 ;;		Unchanged: 0/0
  5570 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5571 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5572 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5573 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5574 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5575 ;;Total ram usage:        0 bytes
  5576 ;; Hardware stack levels used:    1
  5577 ;; Hardware stack levels required when called:    7
  5578 ;; This function calls:
  5579 ;;		_i2c_driver_sendACK
  5580 ;; This function is called by:
  5581 ;;		_i2c_ISR
  5582 ;;		i1_i2c_ISR
  5583 ;; This function uses a non-reentrant model
  5584 ;;
  5585                           
  5586                           
  5587                           ;psect for function _do_I2C_DO_ACK
  5588  063C                     _do_I2C_DO_ACK:	
  5589                           
  5590                           ;Skip over the trampoline to the duplicate function for level 1
  5591  063C  1C7E               	btfss	126,0
  5592  063D  2E40               	goto	l2157
  5593  063E  3186  2EDB         	ljmp	i1l2573
  5594  0640                     _do_I2C_DO_ACK$intlevel0:	
  5595  0640                     l2157:	
  5596                           ;incstack = 0
  5597                           ; Regs used in _do_I2C_DO_ACK: [wreg+status,2+status,0+pclath+cstack]
  5598                           
  5599                           
  5600                           ;i2c_master.c: 301: i2c_driver_sendACK();
  5601  0640  3186  26CF         	fcall	_i2c_driver_sendACK
  5602                           
  5603                           ;i2c_master.c: 302: return I2C_RCEN;
  5604  0642  3005               	movlw	5
  5605  0643  0008               	return
  5606  0644                     __end_of_do_I2C_DO_ACK:	
  5607                           
  5608                           	psect	text19
  5609  0619                     __ptext19:	
  5610 ;; *************** function _do_I2C_RCEN *****************
  5611 ;; Defined at:
  5612 ;;		line 292 in file "mcc_generated_files/drivers/i2c_master.c"
  5613 ;; Parameters:    Size  Location     Type
  5614 ;;		None
  5615 ;; Auto vars:     Size  Location     Type
  5616 ;;		None
  5617 ;; Return value:  Size  Location     Type
  5618 ;;                  1    wreg      enum E12337
  5619 ;; Registers used:
  5620 ;;		wreg, status,2, status,0, pclath, cstack
  5621 ;; Tracked objects:
  5622 ;;		On entry : 0/0
  5623 ;;		On exit  : 0/0
  5624 ;;		Unchanged: 0/0
  5625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5626 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5627 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5628 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5629 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5630 ;;Total ram usage:        0 bytes
  5631 ;; Hardware stack levels used:    1
  5632 ;; Hardware stack levels required when called:    7
  5633 ;; This function calls:
  5634 ;;		_i2c_driver_startRX
  5635 ;; This function is called by:
  5636 ;;		_i2c_ISR
  5637 ;;		i1_i2c_ISR
  5638 ;; This function uses a non-reentrant model
  5639 ;;
  5640                           
  5641                           
  5642                           ;psect for function _do_I2C_RCEN
  5643  0619                     _do_I2C_RCEN:	
  5644                           
  5645                           ;Skip over the trampoline to the duplicate function for level 1
  5646  0619  1C7E               	btfss	126,0
  5647  061A  2E1D               	goto	l2149
  5648  061B  3186  2EB7         	ljmp	i1l2565
  5649  061D                     _do_I2C_RCEN$intlevel0:	
  5650  061D                     l2149:	
  5651                           ;incstack = 0
  5652                           ; Regs used in _do_I2C_RCEN: [wreg+status,2+status,0+pclath+cstack]
  5653                           
  5654                           
  5655                           ;i2c_master.c: 294: i2c_status.addressNACKCheck = 0;
  5656  061D  0021               	movlb	1	; select bank1
  5657  061E  11C0               	bcf	_i2c_status^(0+128),3
  5658                           
  5659                           ;i2c_master.c: 295: i2c_driver_startRX();
  5660  061F  3186  26FD         	fcall	_i2c_driver_startRX
  5661                           
  5662                           ;i2c_master.c: 296: return I2C_RX;
  5663  0621  3004               	movlw	4
  5664  0622  0008               	return
  5665  0623                     __end_of_do_I2C_RCEN:	
  5666                           
  5667                           	psect	text20
  5668  05EF                     __ptext20:	
  5669 ;; *************** function _do_I2C_SEND_ADR_WRITE *****************
  5670 ;; Defined at:
  5671 ;;		line 285 in file "mcc_generated_files/drivers/i2c_master.c"
  5672 ;; Parameters:    Size  Location     Type
  5673 ;;		None
  5674 ;; Auto vars:     Size  Location     Type
  5675 ;;		None
  5676 ;; Return value:  Size  Location     Type
  5677 ;;                  1    wreg      enum E12337
  5678 ;; Registers used:
  5679 ;;		wreg, status,2, status,0, pclath, cstack
  5680 ;; Tracked objects:
  5681 ;;		On entry : 0/0
  5682 ;;		On exit  : 0/0
  5683 ;;		Unchanged: 0/0
  5684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5685 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5686 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5687 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5688 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5689 ;;Total ram usage:        0 bytes
  5690 ;; Hardware stack levels used:    1
  5691 ;; Hardware stack levels required when called:    7
  5692 ;; This function calls:
  5693 ;;		_i2c_driver_TXData
  5694 ;; This function is called by:
  5695 ;;		_i2c_ISR
  5696 ;;		i1_i2c_ISR
  5697 ;; This function uses a non-reentrant model
  5698 ;;
  5699                           
  5700                           
  5701                           ;psect for function _do_I2C_SEND_ADR_WRITE
  5702  05EF                     _do_I2C_SEND_ADR_WRITE:	
  5703                           
  5704                           ;Skip over the trampoline to the duplicate function for level 1
  5705  05EF  1C7E               	btfss	126,0
  5706  05F0  2DF3               	goto	l2141
  5707  05F1  3186  2E73         	ljmp	i1l2557
  5708  05F3                     _do_I2C_SEND_ADR_WRITE$intlevel0:	
  5709  05F3                     l2141:	
  5710                           ;incstack = 0
  5711                           ; Regs used in _do_I2C_SEND_ADR_WRITE: [wreg+status,2+status,0+pclath+cstack]
  5712                           
  5713                           
  5714                           ;i2c_master.c: 287: i2c_status.addressNACKCheck = 1;
  5715  05F3  0021               	movlb	1	; select bank1
  5716  05F4  15C0               	bsf	_i2c_status^(0+128),3
  5717                           
  5718                           ;i2c_master.c: 288: i2c_driver_TXData(i2c_status.address << 1);
  5719  05F5  3541               	lslf	(_i2c_status^(0+128)+1),w
  5720  05F6  3186  2699         	fcall	_i2c_driver_TXData
  5721                           
  5722                           ;i2c_master.c: 289: return I2C_TX;
  5723  05F8  3003               	movlw	3
  5724  05F9  0008               	return
  5725  05FA                     __end_of_do_I2C_SEND_ADR_WRITE:	
  5726                           
  5727                           	psect	text21
  5728  05B5                     __ptext21:	
  5729 ;; *************** function _do_I2C_SEND_ADR_READ *****************
  5730 ;; Defined at:
  5731 ;;		line 278 in file "mcc_generated_files/drivers/i2c_master.c"
  5732 ;; Parameters:    Size  Location     Type
  5733 ;;		None
  5734 ;; Auto vars:     Size  Location     Type
  5735 ;;		None
  5736 ;; Return value:  Size  Location     Type
  5737 ;;                  1    wreg      enum E12337
  5738 ;; Registers used:
  5739 ;;		wreg, status,2, status,0, pclath, cstack
  5740 ;; Tracked objects:
  5741 ;;		On entry : 0/0
  5742 ;;		On exit  : 0/0
  5743 ;;		Unchanged: 0/0
  5744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5745 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5746 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5747 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5748 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5749 ;;Total ram usage:        0 bytes
  5750 ;; Hardware stack levels used:    1
  5751 ;; Hardware stack levels required when called:    7
  5752 ;; This function calls:
  5753 ;;		_i2c_driver_TXData
  5754 ;; This function is called by:
  5755 ;;		_i2c_ISR
  5756 ;;		i1_i2c_ISR
  5757 ;; This function uses a non-reentrant model
  5758 ;;
  5759                           
  5760                           
  5761                           ;psect for function _do_I2C_SEND_ADR_READ
  5762  05B5                     _do_I2C_SEND_ADR_READ:	
  5763                           
  5764                           ;Skip over the trampoline to the duplicate function for level 1
  5765  05B5  1C7E               	btfss	126,0
  5766  05B6  2DB9               	goto	l2133
  5767  05B7  3186  2E64         	ljmp	i1l2549
  5768  05B9                     _do_I2C_SEND_ADR_READ$intlevel0:	
  5769  05B9                     l2133:	
  5770                           ;incstack = 0
  5771                           ; Regs used in _do_I2C_SEND_ADR_READ: [wreg+status,2+status,0+pclath+cstack]
  5772                           
  5773                           
  5774                           ;i2c_master.c: 280: i2c_status.addressNACKCheck = 1;
  5775  05B9  0021               	movlb	1	; select bank1
  5776  05BA  15C0               	bsf	_i2c_status^(0+128),3
  5777                           
  5778                           ;i2c_master.c: 281: i2c_driver_TXData(i2c_status.address << 1 | 1);
  5779  05BB  1403               	setc
  5780  05BC  0D41               	rlf	(_i2c_status^(0+128)+1),w
  5781  05BD  3186  2699         	fcall	_i2c_driver_TXData
  5782                           
  5783                           ;i2c_master.c: 282: return I2C_RCEN;
  5784  05BF  3005               	movlw	5
  5785  05C0  0008               	return
  5786  05C1                     __end_of_do_I2C_SEND_ADR_READ:	
  5787                           
  5788                           	psect	text22
  5789  0644                     __ptext22:	
  5790 ;; *************** function _do_I2C_SEND_STOP *****************
  5791 ;; Defined at:
  5792 ;;		line 272 in file "mcc_generated_files/drivers/i2c_master.c"
  5793 ;; Parameters:    Size  Location     Type
  5794 ;;		None
  5795 ;; Auto vars:     Size  Location     Type
  5796 ;;		None
  5797 ;; Return value:  Size  Location     Type
  5798 ;;                  1    wreg      enum E12337
  5799 ;; Registers used:
  5800 ;;		wreg, status,2, status,0, pclath, cstack
  5801 ;; Tracked objects:
  5802 ;;		On entry : 0/0
  5803 ;;		On exit  : 0/0
  5804 ;;		Unchanged: 0/0
  5805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5806 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5807 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5808 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5809 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5810 ;;Total ram usage:        0 bytes
  5811 ;; Hardware stack levels used:    1
  5812 ;; Hardware stack levels required when called:    7
  5813 ;; This function calls:
  5814 ;;		_i2c_driver_stop
  5815 ;; This function is called by:
  5816 ;;		_do_I2C_DO_ADDRESS_NACK
  5817 ;;		_do_I2C_TX
  5818 ;;		_do_I2C_TX_EMPTY
  5819 ;;		_i2c_ISR
  5820 ;;		i1_i2c_ISR
  5821 ;; This function uses a non-reentrant model
  5822 ;;
  5823                           
  5824                           
  5825                           ;psect for function _do_I2C_SEND_STOP
  5826  0644                     _do_I2C_SEND_STOP:	
  5827                           
  5828                           ;Skip over the trampoline to the duplicate function for level 1
  5829  0644  1C7E               	btfss	126,0
  5830  0645  2E48               	goto	l2045
  5831  0646  3186  2EDF         	ljmp	i1l2377
  5832  0648                     _do_I2C_SEND_STOP$intlevel0:	
  5833  0648                     l2045:	
  5834                           ;incstack = 0
  5835                           ; Regs used in _do_I2C_SEND_STOP: [wreg+status,2+status,0+pclath+cstack]
  5836                           
  5837                           
  5838                           ;i2c_master.c: 274: i2c_driver_stop();
  5839  0648  3187  2700         	fcall	_i2c_driver_stop
  5840                           
  5841                           ;i2c_master.c: 275: return I2C_IDLE;
  5842  064A  3000               	movlw	0
  5843  064B  0008               	return
  5844  064C                     __end_of_do_I2C_SEND_STOP:	
  5845                           
  5846                           	psect	text23
  5847  064C                     __ptext23:	
  5848 ;; *************** function _do_I2C_SEND_RESTART *****************
  5849 ;; Defined at:
  5850 ;;		line 266 in file "mcc_generated_files/drivers/i2c_master.c"
  5851 ;; Parameters:    Size  Location     Type
  5852 ;;		None
  5853 ;; Auto vars:     Size  Location     Type
  5854 ;;		None
  5855 ;; Return value:  Size  Location     Type
  5856 ;;                  1    wreg      enum E12337
  5857 ;; Registers used:
  5858 ;;		wreg, status,2, status,0, pclath, cstack
  5859 ;; Tracked objects:
  5860 ;;		On entry : 0/0
  5861 ;;		On exit  : 0/0
  5862 ;;		Unchanged: 0/0
  5863 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5864 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5865 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5866 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5867 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5868 ;;Total ram usage:        0 bytes
  5869 ;; Hardware stack levels used:    1
  5870 ;; Hardware stack levels required when called:    7
  5871 ;; This function calls:
  5872 ;;		_i2c_driver_restart
  5873 ;; This function is called by:
  5874 ;;		_do_I2C_DO_ADDRESS_NACK
  5875 ;;		_do_I2C_TX_EMPTY
  5876 ;;		_i2c_ISR
  5877 ;;		i1_i2c_ISR
  5878 ;; This function uses a non-reentrant model
  5879 ;;
  5880                           
  5881                           
  5882                           ;psect for function _do_I2C_SEND_RESTART
  5883  064C                     _do_I2C_SEND_RESTART:	
  5884                           
  5885                           ;Skip over the trampoline to the duplicate function for level 1
  5886  064C  1C7E               	btfss	126,0
  5887  064D  2E50               	goto	l2039
  5888  064E  3186  2EE3         	ljmp	i1l2371
  5889  0650                     _do_I2C_SEND_RESTART$intlevel0:	
  5890  0650                     l2039:	
  5891                           ;incstack = 0
  5892                           ; Regs used in _do_I2C_SEND_RESTART: [wreg+status,2+status,0+pclath+cstack]
  5893                           
  5894                           
  5895                           ;i2c_master.c: 268: i2c_driver_restart();
  5896  0650  3187  2703         	fcall	_i2c_driver_restart
  5897                           
  5898                           ;i2c_master.c: 269: return I2C_SEND_ADR_READ;
  5899  0652  3001               	movlw	1
  5900  0653  0008               	return
  5901  0654                     __end_of_do_I2C_SEND_RESTART:	
  5902                           
  5903                           	psect	text24
  5904  0654                     __ptext24:	
  5905 ;; *************** function _do_I2C_SEND_RESTART_WRITE *****************
  5906 ;; Defined at:
  5907 ;;		line 260 in file "mcc_generated_files/drivers/i2c_master.c"
  5908 ;; Parameters:    Size  Location     Type
  5909 ;;		None
  5910 ;; Auto vars:     Size  Location     Type
  5911 ;;		None
  5912 ;; Return value:  Size  Location     Type
  5913 ;;                  1    wreg      enum E12337
  5914 ;; Registers used:
  5915 ;;		wreg, status,2, status,0, pclath, cstack
  5916 ;; Tracked objects:
  5917 ;;		On entry : 0/0
  5918 ;;		On exit  : 0/0
  5919 ;;		Unchanged: 0/0
  5920 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5921 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5922 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5923 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5924 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5925 ;;Total ram usage:        0 bytes
  5926 ;; Hardware stack levels used:    1
  5927 ;; Hardware stack levels required when called:    7
  5928 ;; This function calls:
  5929 ;;		_i2c_driver_restart
  5930 ;; This function is called by:
  5931 ;;		_do_I2C_TX
  5932 ;;		_i2c_ISR
  5933 ;;		i1_i2c_ISR
  5934 ;; This function uses a non-reentrant model
  5935 ;;
  5936                           
  5937                           
  5938                           ;psect for function _do_I2C_SEND_RESTART_WRITE
  5939  0654                     _do_I2C_SEND_RESTART_WRITE:	
  5940                           
  5941                           ;Skip over the trampoline to the duplicate function for level 1
  5942  0654  1C7E               	btfss	126,0
  5943  0655  2E58               	goto	l2033
  5944  0656  3186  2EE7         	ljmp	i1l2365
  5945  0658                     _do_I2C_SEND_RESTART_WRITE$intlevel0:	
  5946  0658                     l2033:	
  5947                           ;incstack = 0
  5948                           ; Regs used in _do_I2C_SEND_RESTART_WRITE: [wreg+status,2+status,0+pclath+cstack]
  5949                           
  5950                           
  5951                           ;i2c_master.c: 262: i2c_driver_restart();
  5952  0658  3187  2703         	fcall	_i2c_driver_restart
  5953                           
  5954                           ;i2c_master.c: 263: return I2C_SEND_ADR_WRITE;
  5955  065A  3002               	movlw	2
  5956  065B  0008               	return
  5957  065C                     __end_of_do_I2C_SEND_RESTART_WRITE:	
  5958                           
  5959                           	psect	text25
  5960  065C                     __ptext25:	
  5961 ;; *************** function _do_I2C_SEND_RESTART_READ *****************
  5962 ;; Defined at:
  5963 ;;		line 254 in file "mcc_generated_files/drivers/i2c_master.c"
  5964 ;; Parameters:    Size  Location     Type
  5965 ;;		None
  5966 ;; Auto vars:     Size  Location     Type
  5967 ;;		None
  5968 ;; Return value:  Size  Location     Type
  5969 ;;                  1    wreg      enum E12337
  5970 ;; Registers used:
  5971 ;;		wreg, status,2, status,0, pclath, cstack
  5972 ;; Tracked objects:
  5973 ;;		On entry : 0/0
  5974 ;;		On exit  : 0/0
  5975 ;;		Unchanged: 0/0
  5976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5977 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5978 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5979 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5980 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5981 ;;Total ram usage:        0 bytes
  5982 ;; Hardware stack levels used:    1
  5983 ;; Hardware stack levels required when called:    7
  5984 ;; This function calls:
  5985 ;;		_i2c_driver_restart
  5986 ;; This function is called by:
  5987 ;;		_do_I2C_TX
  5988 ;;		_i2c_ISR
  5989 ;;		i1_i2c_ISR
  5990 ;; This function uses a non-reentrant model
  5991 ;;
  5992                           
  5993                           
  5994                           ;psect for function _do_I2C_SEND_RESTART_READ
  5995  065C                     _do_I2C_SEND_RESTART_READ:	
  5996                           
  5997                           ;Skip over the trampoline to the duplicate function for level 1
  5998  065C  1C7E               	btfss	126,0
  5999  065D  2E60               	goto	l2027
  6000  065E  3186  2EEB         	ljmp	i1l2359
  6001  0660                     _do_I2C_SEND_RESTART_READ$intlevel0:	
  6002  0660                     l2027:	
  6003                           ;incstack = 0
  6004                           ; Regs used in _do_I2C_SEND_RESTART_READ: [wreg+status,2+status,0+pclath+cstack]
  6005                           
  6006                           
  6007                           ;i2c_master.c: 256: i2c_driver_restart();
  6008  0660  3187  2703         	fcall	_i2c_driver_restart
  6009                           
  6010                           ;i2c_master.c: 257: return I2C_SEND_ADR_READ;
  6011  0662  3001               	movlw	1
  6012  0663  0008               	return
  6013  0664                     __end_of_do_I2C_SEND_RESTART_READ:	
  6014                           
  6015                           	psect	text26
  6016  0623                     __ptext26:	
  6017 ;; *************** function _do_I2C_IDLE *****************
  6018 ;; Defined at:
  6019 ;;		line 247 in file "mcc_generated_files/drivers/i2c_master.c"
  6020 ;; Parameters:    Size  Location     Type
  6021 ;;		None
  6022 ;; Auto vars:     Size  Location     Type
  6023 ;;		None
  6024 ;; Return value:  Size  Location     Type
  6025 ;;                  1    wreg      enum E12337
  6026 ;; Registers used:
  6027 ;;		wreg, status,2
  6028 ;; Tracked objects:
  6029 ;;		On entry : 0/0
  6030 ;;		On exit  : 0/0
  6031 ;;		Unchanged: 0/0
  6032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6033 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6034 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6035 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6036 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6037 ;;Total ram usage:        0 bytes
  6038 ;; Hardware stack levels used:    1
  6039 ;; Hardware stack levels required when called:    6
  6040 ;; This function calls:
  6041 ;;		Nothing
  6042 ;; This function is called by:
  6043 ;;		_i2c_ISR
  6044 ;;		i1_i2c_ISR
  6045 ;; This function uses a non-reentrant model
  6046 ;;
  6047                           
  6048                           
  6049                           ;psect for function _do_I2C_IDLE
  6050  0623                     _do_I2C_IDLE:	
  6051                           
  6052                           ;Skip over the trampoline to the duplicate function for level 1
  6053  0623  1C7E               	btfss	126,0
  6054  0624  2E27               	goto	l2125
  6055  0625  3186  2EBD         	ljmp	i1l2541
  6056  0627                     _do_I2C_IDLE$intlevel0:	
  6057  0627                     l2125:	
  6058                           ;incstack = 0
  6059                           ; Regs used in _do_I2C_IDLE: [wreg+status,2]
  6060                           
  6061                           
  6062                           ;i2c_master.c: 249: i2c_status.busy = 0;
  6063  0627  0021               	movlb	1	; select bank1
  6064  0628  1040               	bcf	_i2c_status^(0+128),0
  6065                           
  6066                           ;i2c_master.c: 250: i2c_status.error = I2C_NOERR;
  6067  0629  01CA               	clrf	(_i2c_status^(0+128)+10)
  6068                           
  6069                           ;i2c_master.c: 251: return I2C_RESET;
  6070  062A  300E               	movlw	14
  6071  062B  0008               	return
  6072  062C                     __end_of_do_I2C_IDLE:	
  6073                           
  6074                           	psect	text27
  6075  05FA                     __ptext27:	
  6076 ;; *************** function _do_I2C_RESET *****************
  6077 ;; Defined at:
  6078 ;;		line 239 in file "mcc_generated_files/drivers/i2c_master.c"
  6079 ;; Parameters:    Size  Location     Type
  6080 ;;		None
  6081 ;; Auto vars:     Size  Location     Type
  6082 ;;		None
  6083 ;; Return value:  Size  Location     Type
  6084 ;;                  1    wreg      enum E12337
  6085 ;; Registers used:
  6086 ;;		wreg, status,2, status,0, pclath, cstack
  6087 ;; Tracked objects:
  6088 ;;		On entry : 0/0
  6089 ;;		On exit  : 0/0
  6090 ;;		Unchanged: 0/0
  6091 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6092 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6093 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6094 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6095 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6096 ;;Total ram usage:        0 bytes
  6097 ;; Hardware stack levels used:    1
  6098 ;; Hardware stack levels required when called:    7
  6099 ;; This function calls:
  6100 ;;		_i2c_driver_resetBus
  6101 ;; This function is called by:
  6102 ;;		_i2c_ISR
  6103 ;;		i1_i2c_ISR
  6104 ;; This function uses a non-reentrant model
  6105 ;;
  6106                           
  6107                           
  6108                           ;psect for function _do_I2C_RESET
  6109  05FA                     _do_I2C_RESET:	
  6110                           
  6111                           ;Skip over the trampoline to the duplicate function for level 1
  6112  05FA  1C7E               	btfss	126,0
  6113  05FB  2DFE               	goto	l2115
  6114  05FC  3186  2E7A         	ljmp	i1l2531
  6115  05FE                     _do_I2C_RESET$intlevel0:	
  6116  05FE                     l2115:	
  6117                           ;incstack = 0
  6118                           ; Regs used in _do_I2C_RESET: [wreg+status,2+status,0+pclath+cstack]
  6119                           
  6120                           
  6121                           ;i2c_master.c: 241: i2c_driver_resetBus();
  6122  05FE  3187  272D         	fcall	_i2c_driver_resetBus
  6123                           
  6124                           ;i2c_master.c: 242: i2c_status.busy = 0;
  6125  0600  0021               	movlb	1	; select bank1
  6126  0601  1040               	bcf	_i2c_status^(0+128),0
  6127                           
  6128                           ;i2c_master.c: 243: i2c_status.error = I2C_NOERR;
  6129  0602  01CA               	clrf	(_i2c_status^(0+128)+10)
  6130                           
  6131                           ;i2c_master.c: 244: return I2C_RESET;
  6132  0603  300E               	movlw	14
  6133  0604  0008               	return
  6134  0605                     __end_of_do_I2C_RESET:	
  6135                           
  6136                           	psect	text28
  6137  02C2                     __ptext28:	
  6138 ;; *************** function _do_I2C_TX_EMPTY *****************
  6139 ;; Defined at:
  6140 ;;		line 382 in file "mcc_generated_files/drivers/i2c_master.c"
  6141 ;; Parameters:    Size  Location     Type
  6142 ;;		None
  6143 ;; Auto vars:     Size  Location     Type
  6144 ;;		None
  6145 ;; Return value:  Size  Location     Type
  6146 ;;                  1    wreg      enum E12337
  6147 ;; Registers used:
  6148 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6149 ;; Tracked objects:
  6150 ;;		On entry : 0/0
  6151 ;;		On exit  : 0/0
  6152 ;;		Unchanged: 0/0
  6153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6154 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6155 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6156 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6157 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6158 ;;Total ram usage:        1 bytes
  6159 ;; Hardware stack levels used:    1
  6160 ;; Hardware stack levels required when called:    9
  6161 ;; This function calls:
  6162 ;;		Absolute function
  6163 ;;		_do_I2C_SEND_RESTART
  6164 ;;		_do_I2C_SEND_STOP
  6165 ;;		_i2c_restartWrite
  6166 ;;		_mssp_setIRQ
  6167 ;;		_rd1RegCompleteHandler
  6168 ;;		_rd2RegCompleteHandler
  6169 ;;		_rdBlkRegCompleteHandler
  6170 ;;		_returnReset
  6171 ;;		_returnStop
  6172 ;;		_wr1RegCompleteHandler
  6173 ;;		_wr2RegCompleteHandler
  6174 ;; This function is called by:
  6175 ;;		_i2c_ISR
  6176 ;;		i1_i2c_ISR
  6177 ;; This function uses a non-reentrant model
  6178 ;;
  6179                           
  6180                           
  6181                           ;psect for function _do_I2C_TX_EMPTY
  6182  02C2                     _do_I2C_TX_EMPTY:	
  6183                           
  6184                           ;Skip over the trampoline to the duplicate function for level 1
  6185  02C2  1C7E               	btfss	126,0
  6186  02C3  2AC6               	goto	l4327
  6187  02C4  3183  2B1A         	ljmp	i1l4497
  6188  02C6                     _do_I2C_TX_EMPTY$intlevel0:	
  6189  02C6                     l4327:	
  6190                           ;incstack = 0
  6191                           ; Regs used in _do_I2C_TX_EMPTY: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6192                           
  6193                           
  6194                           ;i2c_master.c: 384: i2c_status.bufferFree = 1;
  6195  02C6  0021               	movlb	1	; select bank1
  6196  02C7  1540               	bsf	_i2c_status^(0+128),2
  6197                           
  6198                           ;i2c_master.c: 385: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
  6199  02C8  2AD3               	goto	l4345
  6200  02C9                     l4329:	
  6201                           ;i2c_master.c: 386: {
  6202                           ;i2c_master.c: 387: case i2c_restart_read:
  6203                           
  6204                           
  6205                           ;i2c_master.c: 388: case i2c_restart_write:
  6206                           ;i2c_master.c: 389: return do_I2C_SEND_RESTART();
  6207  02C9  3186  264C         	fcall	_do_I2C_SEND_RESTART
  6208  02CB  0008               	return
  6209  02CC                     l4333:	
  6210                           ;i2c_master.c: 390: case i2c_continue:
  6211                           
  6212                           
  6213                           ;i2c_master.c: 391: mssp_setIRQ();
  6214  02CC  3186  26F7         	fcall	_mssp_setIRQ
  6215                           
  6216                           ;i2c_master.c: 392: return I2C_TX;
  6217  02CE  3003               	movlw	3
  6218  02CF  0008               	return
  6219  02D0                     l4339:	
  6220                           ;i2c_master.c: 394: case i2c_stop:
  6221                           
  6222                           ;i2c_master.c: 393: default:
  6223                           
  6224                           
  6225                           ;i2c_master.c: 395: return do_I2C_SEND_STOP();
  6226  02D0  3186  2644         	fcall	_do_I2C_SEND_STOP
  6227                           
  6228                           ;i2c_master.c: 396: }
  6229  02D2  0008               	return
  6230  02D3                     l4345:	
  6231  02D3  0021               	movlb	1	; select bank1
  6232  02D4  0857               	movf	(low ((_i2c_status| 0+23)))^(0+128),w
  6233  02D5  0020               	movlb	0	; select bank0
  6234  02D6  00A0               	movwf	??_do_I2C_TX_EMPTY
  6235  02D7  0820               	movf	??_do_I2C_TX_EMPTY,w
  6236  02D8  00A9               	movwf	returnStop@p
  6237  02D9  300B               	movlw	11
  6238  02DA  3EC0               	addlw	(low (_i2c_status| 0))& (0+255)
  6239  02DB  0086               	movwf	6
  6240  02DC  0187               	clrf	7
  6241  02DD  3F41               	moviw [1]fsr1
  6242  02DE  008A               	movwf	10
  6243  02DF  3F40               	moviw [0]fsr1
  6244  02E0  000A               	callw
  6245  02E1  3182               	pagesel	$
  6246                           
  6247                           ; Switch size 1, requested type "space"
  6248                           ; Number of cases is 4, Range of values is 1 to 4
  6249                           ; switch strategies available:
  6250                           ; Name         Instructions Cycles
  6251                           ; simple_byte           13     7 (average)
  6252                           ; direct_byte           17     9 (fixed)
  6253                           ; jumptable            263     9 (fixed)
  6254                           ;	Chosen strategy is simple_byte
  6255  02E2  3A01               	xorlw	1	; case 1
  6256  02E3  1903               	skipnz
  6257  02E4  2AD0               	goto	l4339
  6258  02E5  3A03               	xorlw	3	; case 2
  6259  02E6  1903               	skipnz
  6260  02E7  2AC9               	goto	l4329
  6261  02E8  3A01               	xorlw	1	; case 3
  6262  02E9  1903               	skipnz
  6263  02EA  2AC9               	goto	l4329
  6264  02EB  3A07               	xorlw	7	; case 4
  6265  02EC  1903               	skipnz
  6266  02ED  2ACC               	goto	l4333
  6267  02EE  2AD0               	goto	l4339
  6268  02EF  0008               	return
  6269  02F0                     __end_of_do_I2C_TX_EMPTY:	
  6270                           
  6271                           	psect	text29
  6272  06F7                     __ptext29:	
  6273 ;; *************** function _mssp_setIRQ *****************
  6274 ;; Defined at:
  6275 ;;		line 58 in file "mcc_generated_files/i2c_driver.c"
  6276 ;; Parameters:    Size  Location     Type
  6277 ;;		None
  6278 ;; Auto vars:     Size  Location     Type
  6279 ;;		None
  6280 ;; Return value:  Size  Location     Type
  6281 ;;                  1    wreg      void 
  6282 ;; Registers used:
  6283 ;;		None
  6284 ;; Tracked objects:
  6285 ;;		On entry : 0/0
  6286 ;;		On exit  : 0/0
  6287 ;;		Unchanged: 0/0
  6288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6289 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6290 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6291 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6292 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6293 ;;Total ram usage:        0 bytes
  6294 ;; Hardware stack levels used:    1
  6295 ;; Hardware stack levels required when called:    6
  6296 ;; This function calls:
  6297 ;;		Nothing
  6298 ;; This function is called by:
  6299 ;;		_do_I2C_TX_EMPTY
  6300 ;; This function uses a non-reentrant model
  6301 ;;
  6302                           
  6303                           
  6304                           ;psect for function _mssp_setIRQ
  6305  06F7                     _mssp_setIRQ:	
  6306                           
  6307                           ;i2c_driver.c: 60: PIR1bits.SSP1IF = 1;
  6308                           
  6309                           ;incstack = 0
  6310                           ; Regs used in _mssp_setIRQ: []
  6311  06F7  0020               	movlb	0	; select bank0
  6312  06F8  1590               	bsf	16,3	;volatile
  6313  06F9  0008               	return
  6314  06FA                     __end_of_mssp_setIRQ:	
  6315                           
  6316                           	psect	text30
  6317  059B                     __ptext30:	
  6318 ;; *************** function _i2c_driver_isNACK *****************
  6319 ;; Defined at:
  6320 ;;		line 161 in file "mcc_generated_files/i2c_driver.c"
  6321 ;; Parameters:    Size  Location     Type
  6322 ;;		None
  6323 ;; Auto vars:     Size  Location     Type
  6324 ;;		None
  6325 ;; Return value:  Size  Location     Type
  6326 ;;		None               void
  6327 ;; Registers used:
  6328 ;;		wreg, status,2, status,0
  6329 ;; Tracked objects:
  6330 ;;		On entry : 0/0
  6331 ;;		On exit  : 0/0
  6332 ;;		Unchanged: 0/0
  6333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6335 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6336 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6337 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6338 ;;Total ram usage:        1 bytes
  6339 ;; Hardware stack levels used:    1
  6340 ;; Hardware stack levels required when called:    6
  6341 ;; This function calls:
  6342 ;;		Nothing
  6343 ;; This function is called by:
  6344 ;;		_do_I2C_TX
  6345 ;;		_i2c_ISR
  6346 ;; This function uses a non-reentrant model
  6347 ;;
  6348                           
  6349                           
  6350                           ;psect for function _i2c_driver_isNACK
  6351  059B                     _i2c_driver_isNACK:	
  6352                           
  6353                           ;i2c_driver.c: 163: return SSP1CON2bits.ACKSTAT = 1;
  6354                           
  6355                           ;incstack = 0
  6356                           ; Regs used in _i2c_driver_isNACK: [wreg+status,2+status,0]
  6357  059B  0024               	movlb	4	; select bank4
  6358  059C  0816               	movf	22,w	;volatile
  6359  059D  39BF               	andlw	-65
  6360  059E  3840               	iorlw	64
  6361  059F  0096               	movwf	22	;volatile
  6362  05A0  0E16               	swapf	22,w	;volatile
  6363  05A1  0C89               	rrf	9,f
  6364  05A2  0C89               	rrf	9,f
  6365  05A3  3901               	andlw	1
  6366  05A4  0020               	movlb	0	; select bank0
  6367  05A5  00A0               	movwf	??_i2c_driver_isNACK
  6368  05A6  0C20               	rrf	??_i2c_driver_isNACK,w
  6369  05A7  0008               	return
  6370  05A8                     __end_of_i2c_driver_isNACK:	
  6371                           
  6372                           	psect	text31
  6373  0699                     __ptext31:	
  6374 ;; *************** function _i2c_driver_TXData *****************
  6375 ;; Defined at:
  6376 ;;		line 186 in file "mcc_generated_files/i2c_driver.c"
  6377 ;; Parameters:    Size  Location     Type
  6378 ;;  d               1    wreg     unsigned char 
  6379 ;; Auto vars:     Size  Location     Type
  6380 ;;  d               1    0[BANK0 ] unsigned char 
  6381 ;; Return value:  Size  Location     Type
  6382 ;;                  1    wreg      void 
  6383 ;; Registers used:
  6384 ;;		wreg
  6385 ;; Tracked objects:
  6386 ;;		On entry : 0/0
  6387 ;;		On exit  : 0/0
  6388 ;;		Unchanged: 0/0
  6389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6390 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6391 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6392 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6393 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6394 ;;Total ram usage:        1 bytes
  6395 ;; Hardware stack levels used:    1
  6396 ;; Hardware stack levels required when called:    6
  6397 ;; This function calls:
  6398 ;;		Nothing
  6399 ;; This function is called by:
  6400 ;;		_do_I2C_SEND_ADR_READ
  6401 ;;		_do_I2C_SEND_ADR_WRITE
  6402 ;;		_do_I2C_TX
  6403 ;; This function uses a non-reentrant model
  6404 ;;
  6405                           
  6406                           
  6407                           ;psect for function _i2c_driver_TXData
  6408  0699                     _i2c_driver_TXData:	
  6409                           
  6410                           ;incstack = 0
  6411                           ; Regs used in _i2c_driver_TXData: [wreg]
  6412                           ;i2c_driver_TXData@d stored from wreg
  6413  0699  0020               	movlb	0	; select bank0
  6414  069A  00A0               	movwf	i2c_driver_TXData@d
  6415                           
  6416                           ;i2c_driver.c: 188: SSP1BUF = d;
  6417  069B  0820               	movf	i2c_driver_TXData@d,w
  6418  069C  0024               	movlb	4	; select bank4
  6419  069D  0091               	movwf	17	;volatile
  6420  069E  0008               	return
  6421  069F                     __end_of_i2c_driver_TXData:	
  6422                           
  6423                           	psect	text32
  6424  06FA                     __ptext32:	
  6425 ;; *************** function _i2c_driver_getRXData *****************
  6426 ;; Defined at:
  6427 ;;		line 171 in file "mcc_generated_files/i2c_driver.c"
  6428 ;; Parameters:    Size  Location     Type
  6429 ;;		None
  6430 ;; Auto vars:     Size  Location     Type
  6431 ;;		None
  6432 ;; Return value:  Size  Location     Type
  6433 ;;                  1    wreg      unsigned char 
  6434 ;; Registers used:
  6435 ;;		wreg
  6436 ;; Tracked objects:
  6437 ;;		On entry : 0/0
  6438 ;;		On exit  : 0/0
  6439 ;;		Unchanged: 0/0
  6440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6441 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6442 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6443 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6444 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6445 ;;Total ram usage:        0 bytes
  6446 ;; Hardware stack levels used:    1
  6447 ;; Hardware stack levels required when called:    6
  6448 ;; This function calls:
  6449 ;;		Nothing
  6450 ;; This function is called by:
  6451 ;;		_do_I2C_RX
  6452 ;; This function uses a non-reentrant model
  6453 ;;
  6454                           
  6455                           
  6456                           ;psect for function _i2c_driver_getRXData
  6457  06FA                     _i2c_driver_getRXData:	
  6458                           
  6459                           ;i2c_driver.c: 173: return SSP1BUF;
  6460                           
  6461                           ;incstack = 0
  6462                           ; Regs used in _i2c_driver_getRXData: [wreg]
  6463  06FA  0024               	movlb	4	; select bank4
  6464  06FB  0811               	movf	17,w	;volatile
  6465  06FC  0008               	return
  6466  06FD                     __end_of_i2c_driver_getRXData:	
  6467                           
  6468                           	psect	text33
  6469  06CB                     __ptext33:	
  6470 ;; *************** function _i2c_driver_sendNACK *****************
  6471 ;; Defined at:
  6472 ;;		line 202 in file "mcc_generated_files/i2c_driver.c"
  6473 ;; Parameters:    Size  Location     Type
  6474 ;;		None
  6475 ;; Auto vars:     Size  Location     Type
  6476 ;;		None
  6477 ;; Return value:  Size  Location     Type
  6478 ;;                  1    wreg      void 
  6479 ;; Registers used:
  6480 ;;		None
  6481 ;; Tracked objects:
  6482 ;;		On entry : 0/0
  6483 ;;		On exit  : 0/0
  6484 ;;		Unchanged: 0/0
  6485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6486 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6487 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6488 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6489 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6490 ;;Total ram usage:        0 bytes
  6491 ;; Hardware stack levels used:    1
  6492 ;; Hardware stack levels required when called:    6
  6493 ;; This function calls:
  6494 ;;		Nothing
  6495 ;; This function is called by:
  6496 ;;		_do_I2C_DO_NACK_STOP
  6497 ;;		_do_I2C_DO_NACK_RESTART
  6498 ;; This function uses a non-reentrant model
  6499 ;;
  6500                           
  6501                           
  6502                           ;psect for function _i2c_driver_sendNACK
  6503  06CB                     _i2c_driver_sendNACK:	
  6504                           
  6505                           ;i2c_driver.c: 204: SSP1CON2bits.ACKDT = 1;
  6506                           
  6507                           ;incstack = 0
  6508                           ; Regs used in _i2c_driver_sendNACK: []
  6509  06CB  0024               	movlb	4	; select bank4
  6510  06CC  1696               	bsf	22,5	;volatile
  6511                           
  6512                           ;i2c_driver.c: 205: SSP1CON2bits.ACKEN = 1;
  6513  06CD  1616               	bsf	22,4	;volatile
  6514  06CE  0008               	return
  6515  06CF                     __end_of_i2c_driver_sendNACK:	
  6516                           
  6517                           	psect	text34
  6518  072D                     __ptext34:	
  6519 ;; *************** function _i2c_driver_resetBus *****************
  6520 ;; Defined at:
  6521 ;;		line 141 in file "mcc_generated_files/i2c_driver.c"
  6522 ;; Parameters:    Size  Location     Type
  6523 ;;		None
  6524 ;; Auto vars:     Size  Location     Type
  6525 ;;		None
  6526 ;; Return value:  Size  Location     Type
  6527 ;;                  1    wreg      void 
  6528 ;; Registers used:
  6529 ;;		None
  6530 ;; Tracked objects:
  6531 ;;		On entry : 0/0
  6532 ;;		On exit  : 0/0
  6533 ;;		Unchanged: 0/0
  6534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6535 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6536 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6537 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6538 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6539 ;;Total ram usage:        0 bytes
  6540 ;; Hardware stack levels used:    1
  6541 ;; Hardware stack levels required when called:    6
  6542 ;; This function calls:
  6543 ;;		Nothing
  6544 ;; This function is called by:
  6545 ;;		_do_I2C_RESET
  6546 ;; This function uses a non-reentrant model
  6547 ;;
  6548                           
  6549                           
  6550                           ;psect for function _i2c_driver_resetBus
  6551  072D                     _i2c_driver_resetBus:	
  6552                           
  6553                           ;incstack = 0
  6554                           ; Regs used in _i2c_driver_resetBus: []
  6555  072D  0008               	return
  6556  072E                     __end_of_i2c_driver_resetBus:	
  6557                           
  6558                           	psect	text35
  6559  06FD                     __ptext35:	
  6560 ;; *************** function _i2c_driver_startRX *****************
  6561 ;; Defined at:
  6562 ;;		line 166 in file "mcc_generated_files/i2c_driver.c"
  6563 ;; Parameters:    Size  Location     Type
  6564 ;;		None
  6565 ;; Auto vars:     Size  Location     Type
  6566 ;;		None
  6567 ;; Return value:  Size  Location     Type
  6568 ;;                  1    wreg      void 
  6569 ;; Registers used:
  6570 ;;		None
  6571 ;; Tracked objects:
  6572 ;;		On entry : 0/0
  6573 ;;		On exit  : 0/0
  6574 ;;		Unchanged: 0/0
  6575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6576 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6577 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6578 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6579 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6580 ;;Total ram usage:        0 bytes
  6581 ;; Hardware stack levels used:    1
  6582 ;; Hardware stack levels required when called:    6
  6583 ;; This function calls:
  6584 ;;		Nothing
  6585 ;; This function is called by:
  6586 ;;		_do_I2C_RCEN
  6587 ;; This function uses a non-reentrant model
  6588 ;;
  6589                           
  6590                           
  6591                           ;psect for function _i2c_driver_startRX
  6592  06FD                     _i2c_driver_startRX:	
  6593                           
  6594                           ;i2c_driver.c: 168: SSP1CON2bits.RCEN = 1;
  6595                           
  6596                           ;incstack = 0
  6597                           ; Regs used in _i2c_driver_startRX: []
  6598  06FD  0024               	movlb	4	; select bank4
  6599  06FE  1596               	bsf	22,3	;volatile
  6600  06FF  0008               	return
  6601  0700                     __end_of_i2c_driver_startRX:	
  6602                           
  6603                           	psect	text36
  6604  0484                     __ptext36:	
  6605 ;; *************** function _rdBlkRegCompleteHandler *****************
  6606 ;; Defined at:
  6607 ;;		line 134 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  6608 ;; Parameters:    Size  Location     Type
  6609 ;;  p               1    9[BANK0 ] PTR void 
  6610 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  6611 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  6612 ;; Auto vars:     Size  Location     Type
  6613 ;;		None
  6614 ;; Return value:  Size  Location     Type
  6615 ;;                  1    wreg      enum E97
  6616 ;; Registers used:
  6617 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6618 ;; Tracked objects:
  6619 ;;		On entry : 0/0
  6620 ;;		On exit  : 0/0
  6621 ;;		Unchanged: 0/0
  6622 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6623 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6624 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6625 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6626 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6627 ;;Total ram usage:        1 bytes
  6628 ;; Hardware stack levels used:    1
  6629 ;; Hardware stack levels required when called:    8
  6630 ;; This function calls:
  6631 ;;		_i2c_setBuffer
  6632 ;;		_i2c_setDataCompleteCallback
  6633 ;; This function is called by:
  6634 ;;		_i2c_readDataBlock
  6635 ;;		_do_I2C_DO_ADDRESS_NACK
  6636 ;;		_do_I2C_TX
  6637 ;;		_do_I2C_RX
  6638 ;;		_do_I2C_TX_EMPTY
  6639 ;;		i1_do_I2C_DO_ADDRESS_NACK
  6640 ;;		i1_do_I2C_TX
  6641 ;;		i1_do_I2C_RX
  6642 ;;		i1_do_I2C_TX_EMPTY
  6643 ;; This function uses a non-reentrant model
  6644 ;;
  6645                           
  6646                           
  6647                           ;psect for function _rdBlkRegCompleteHandler
  6648  0484                     _rdBlkRegCompleteHandler:	
  6649                           
  6650                           ;Skip over the trampoline to the duplicate function for level 1
  6651  0484  1C7E               	btfss	126,0
  6652  0485  2C88               	goto	l2107
  6653  0486  3184  2CBC         	ljmp	i1l2439
  6654  0488                     _rdBlkRegCompleteHandler$intlevel0:	
  6655  0488                     l2107:	
  6656                           ;incstack = 0
  6657                           ; Regs used in _rdBlkRegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  6658                           
  6659                           
  6660                           ;i2c_simple_master.c: 136: i2c_setBuffer(((buf_t *)p)->data,((buf_t*)p)->len);
  6661  0488  0020               	movlb	0	; select bank0
  6662  0489  0829               	movf	rdBlkRegCompleteHandler@p,w
  6663  048A  0086               	movwf	6
  6664  048B  0187               	clrf	7
  6665  048C  3F40               	moviw [0]fsr1
  6666  048D  00A0               	movwf	i2c_setBuffer@bufferSize
  6667  048E  3F41               	moviw [1]fsr1
  6668  048F  00A1               	movwf	i2c_setBuffer@bufferSize+1
  6669  0490  0829               	movf	rdBlkRegCompleteHandler@p,w
  6670  0491  3E02               	addlw	2
  6671  0492  0086               	movwf	6
  6672  0493  0187               	clrf	7
  6673  0494  0801               	movf	1,w
  6674  0495  3185  252B  3184   	fcall	_i2c_setBuffer
  6675                           
  6676                           ;i2c_simple_master.c: 137: i2c_setDataCompleteCallback((0),(0));
  6677  0498  3000               	movlw	0
  6678  0499  0020               	movlb	0	; select bank0
  6679  049A  00A5               	movwf	i2c_setDataCompleteCallback@cb
  6680  049B  00A6               	movwf	i2c_setDataCompleteCallback@cb+1
  6681  049C  01A7               	clrf	i2c_setDataCompleteCallback@p
  6682  049D  3185  25A8         	fcall	_i2c_setDataCompleteCallback
  6683                           
  6684                           ;i2c_simple_master.c: 138: return i2c_restart_read;
  6685  049F  3002               	movlw	2
  6686  04A0  0008               	return
  6687  04A1                     __end_of_rdBlkRegCompleteHandler:	
  6688                           
  6689                           	psect	text37
  6690  04D3                     __ptext37:	
  6691 ;; *************** function _rd2RegCompleteHandler *****************
  6692 ;; Defined at:
  6693 ;;		line 87 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  6694 ;; Parameters:    Size  Location     Type
  6695 ;;  p               1    9[BANK0 ] PTR void 
  6696 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  6697 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  6698 ;; Auto vars:     Size  Location     Type
  6699 ;;		None
  6700 ;; Return value:  Size  Location     Type
  6701 ;;                  1    wreg      enum E97
  6702 ;; Registers used:
  6703 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6704 ;; Tracked objects:
  6705 ;;		On entry : 0/0
  6706 ;;		On exit  : 0/0
  6707 ;;		Unchanged: 0/0
  6708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6709 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6710 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6711 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6712 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6713 ;;Total ram usage:        1 bytes
  6714 ;; Hardware stack levels used:    1
  6715 ;; Hardware stack levels required when called:    8
  6716 ;; This function calls:
  6717 ;;		_i2c_setBuffer
  6718 ;;		_i2c_setDataCompleteCallback
  6719 ;; This function is called by:
  6720 ;;		_i2c_read2ByteRegister
  6721 ;;		_do_I2C_DO_ADDRESS_NACK
  6722 ;;		_do_I2C_TX
  6723 ;;		_do_I2C_RX
  6724 ;;		_do_I2C_TX_EMPTY
  6725 ;;		i1_do_I2C_DO_ADDRESS_NACK
  6726 ;;		i1_do_I2C_TX
  6727 ;;		i1_do_I2C_RX
  6728 ;;		i1_do_I2C_TX_EMPTY
  6729 ;; This function uses a non-reentrant model
  6730 ;;
  6731                           
  6732                           
  6733                           ;psect for function _rd2RegCompleteHandler
  6734  04D3                     _rd2RegCompleteHandler:	
  6735                           
  6736                           ;Skip over the trampoline to the duplicate function for level 1
  6737  04D3  1C7E               	btfss	126,0
  6738  04D4  2CD7               	goto	l2091
  6739  04D5  3185  2D40         	ljmp	i1l2423
  6740  04D7                     _rd2RegCompleteHandler$intlevel0:	
  6741  04D7                     l2091:	
  6742                           ;incstack = 0
  6743                           ; Regs used in _rd2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6744                           
  6745                           
  6746                           ;i2c_simple_master.c: 89: i2c_setBuffer(p,2);
  6747  04D7  3002               	movlw	2
  6748  04D8  0020               	movlb	0	; select bank0
  6749  04D9  00A0               	movwf	i2c_setBuffer@bufferSize
  6750  04DA  3000               	movlw	0
  6751  04DB  00A1               	movwf	i2c_setBuffer@bufferSize+1
  6752  04DC  0829               	movf	rd2RegCompleteHandler@p,w
  6753  04DD  3185  252B  3184   	fcall	_i2c_setBuffer
  6754                           
  6755                           ;i2c_simple_master.c: 90: i2c_setDataCompleteCallback((0),(0));
  6756  04E0  3000               	movlw	0
  6757  04E1  0020               	movlb	0	; select bank0
  6758  04E2  00A5               	movwf	i2c_setDataCompleteCallback@cb
  6759  04E3  00A6               	movwf	i2c_setDataCompleteCallback@cb+1
  6760  04E4  01A7               	clrf	i2c_setDataCompleteCallback@p
  6761  04E5  3185  25A8         	fcall	_i2c_setDataCompleteCallback
  6762                           
  6763                           ;i2c_simple_master.c: 91: return i2c_restart_read;
  6764  04E7  3002               	movlw	2
  6765  04E8  0008               	return
  6766  04E9                     __end_of_rd2RegCompleteHandler:	
  6767                           
  6768                           	psect	text38
  6769  04E9                     __ptext38:	
  6770 ;; *************** function _rd1RegCompleteHandler *****************
  6771 ;; Defined at:
  6772 ;;		line 58 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  6773 ;; Parameters:    Size  Location     Type
  6774 ;;  p               1    9[BANK0 ] PTR void 
  6775 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  6776 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  6777 ;; Auto vars:     Size  Location     Type
  6778 ;;		None
  6779 ;; Return value:  Size  Location     Type
  6780 ;;                  1    wreg      enum E97
  6781 ;; Registers used:
  6782 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6783 ;; Tracked objects:
  6784 ;;		On entry : 0/0
  6785 ;;		On exit  : 0/0
  6786 ;;		Unchanged: 0/0
  6787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6788 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6789 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6790 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6791 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6792 ;;Total ram usage:        1 bytes
  6793 ;; Hardware stack levels used:    1
  6794 ;; Hardware stack levels required when called:    8
  6795 ;; This function calls:
  6796 ;;		_i2c_setBuffer
  6797 ;;		_i2c_setDataCompleteCallback
  6798 ;; This function is called by:
  6799 ;;		_i2c_read1ByteRegister
  6800 ;;		_do_I2C_DO_ADDRESS_NACK
  6801 ;;		_do_I2C_TX
  6802 ;;		_do_I2C_RX
  6803 ;;		_do_I2C_TX_EMPTY
  6804 ;;		i1_do_I2C_DO_ADDRESS_NACK
  6805 ;;		i1_do_I2C_TX
  6806 ;;		i1_do_I2C_RX
  6807 ;;		i1_do_I2C_TX_EMPTY
  6808 ;; This function uses a non-reentrant model
  6809 ;;
  6810                           
  6811                           
  6812                           ;psect for function _rd1RegCompleteHandler
  6813  04E9                     _rd1RegCompleteHandler:	
  6814                           
  6815                           ;Skip over the trampoline to the duplicate function for level 1
  6816  04E9  1C7E               	btfss	126,0
  6817  04EA  2CED               	goto	l2083
  6818  04EB  3185  2D50         	ljmp	i1l2415
  6819  04ED                     _rd1RegCompleteHandler$intlevel0:	
  6820  04ED                     l2083:	
  6821                           ;incstack = 0
  6822                           ; Regs used in _rd1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6823                           
  6824                           
  6825                           ;i2c_simple_master.c: 60: i2c_setBuffer(p,1);
  6826  04ED  3001               	movlw	1
  6827  04EE  0020               	movlb	0	; select bank0
  6828  04EF  00A0               	movwf	i2c_setBuffer@bufferSize
  6829  04F0  3000               	movlw	0
  6830  04F1  00A1               	movwf	i2c_setBuffer@bufferSize+1
  6831  04F2  0829               	movf	rd1RegCompleteHandler@p,w
  6832  04F3  3185  252B  3184   	fcall	_i2c_setBuffer
  6833                           
  6834                           ;i2c_simple_master.c: 61: i2c_setDataCompleteCallback((0),(0));
  6835  04F6  3000               	movlw	0
  6836  04F7  0020               	movlb	0	; select bank0
  6837  04F8  00A5               	movwf	i2c_setDataCompleteCallback@cb
  6838  04F9  00A6               	movwf	i2c_setDataCompleteCallback@cb+1
  6839  04FA  01A7               	clrf	i2c_setDataCompleteCallback@p
  6840  04FB  3185  25A8         	fcall	_i2c_setDataCompleteCallback
  6841                           
  6842                           ;i2c_simple_master.c: 62: return i2c_restart_read;
  6843  04FD  3002               	movlw	2
  6844  04FE  0008               	return
  6845  04FF                     __end_of_rd1RegCompleteHandler:	
  6846                           
  6847                           	psect	text39
  6848  04FF                     __ptext39:	
  6849 ;; *************** function _wr1RegCompleteHandler *****************
  6850 ;; Defined at:
  6851 ;;		line 31 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  6852 ;; Parameters:    Size  Location     Type
  6853 ;;  p               1    9[BANK0 ] PTR void 
  6854 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  6855 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  6856 ;; Auto vars:     Size  Location     Type
  6857 ;;		None
  6858 ;; Return value:  Size  Location     Type
  6859 ;;                  1    wreg      enum E97
  6860 ;; Registers used:
  6861 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6862 ;; Tracked objects:
  6863 ;;		On entry : 0/0
  6864 ;;		On exit  : 0/0
  6865 ;;		Unchanged: 0/0
  6866 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6867 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6868 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6869 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6870 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6871 ;;Total ram usage:        1 bytes
  6872 ;; Hardware stack levels used:    1
  6873 ;; Hardware stack levels required when called:    8
  6874 ;; This function calls:
  6875 ;;		_i2c_setBuffer
  6876 ;;		_i2c_setDataCompleteCallback
  6877 ;; This function is called by:
  6878 ;;		_i2c_write1ByteRegister
  6879 ;;		_do_I2C_DO_ADDRESS_NACK
  6880 ;;		_do_I2C_TX
  6881 ;;		_do_I2C_RX
  6882 ;;		_do_I2C_TX_EMPTY
  6883 ;;		i1_do_I2C_DO_ADDRESS_NACK
  6884 ;;		i1_do_I2C_TX
  6885 ;;		i1_do_I2C_RX
  6886 ;;		i1_do_I2C_TX_EMPTY
  6887 ;; This function uses a non-reentrant model
  6888 ;;
  6889                           
  6890                           
  6891                           ;psect for function _wr1RegCompleteHandler
  6892  04FF                     _wr1RegCompleteHandler:	
  6893                           
  6894                           ;Skip over the trampoline to the duplicate function for level 1
  6895  04FF  1C7E               	btfss	126,0
  6896  0500  2D03               	goto	l2075
  6897  0501  3185  2D60         	ljmp	i1l2407
  6898  0503                     _wr1RegCompleteHandler$intlevel0:	
  6899  0503                     l2075:	
  6900                           ;incstack = 0
  6901                           ; Regs used in _wr1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6902                           
  6903                           
  6904                           ;i2c_simple_master.c: 33: i2c_setBuffer(p,1);
  6905  0503  3001               	movlw	1
  6906  0504  0020               	movlb	0	; select bank0
  6907  0505  00A0               	movwf	i2c_setBuffer@bufferSize
  6908  0506  3000               	movlw	0
  6909  0507  00A1               	movwf	i2c_setBuffer@bufferSize+1
  6910  0508  0829               	movf	wr1RegCompleteHandler@p,w
  6911  0509  3185  252B  3184   	fcall	_i2c_setBuffer
  6912                           
  6913                           ;i2c_simple_master.c: 34: i2c_setDataCompleteCallback((0),(0));
  6914  050C  3000               	movlw	0
  6915  050D  0020               	movlb	0	; select bank0
  6916  050E  00A5               	movwf	i2c_setDataCompleteCallback@cb
  6917  050F  00A6               	movwf	i2c_setDataCompleteCallback@cb+1
  6918  0510  01A7               	clrf	i2c_setDataCompleteCallback@p
  6919  0511  3185  25A8         	fcall	_i2c_setDataCompleteCallback
  6920                           
  6921                           ;i2c_simple_master.c: 35: return i2c_continue;
  6922  0513  3004               	movlw	4
  6923  0514  0008               	return
  6924  0515                     __end_of_wr1RegCompleteHandler:	
  6925                           
  6926                           	psect	text40
  6927  069F                     __ptext40:	
  6928 ;; *************** function _i2c_restartWrite *****************
  6929 ;; Defined at:
  6930 ;;		line 35 in file "mcc_generated_files/drivers/i2c_types.c"
  6931 ;; Parameters:    Size  Location     Type
  6932 ;;  p               1    9[BANK0 ] PTR void 
  6933 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  6934 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  6935 ;; Auto vars:     Size  Location     Type
  6936 ;;		None
  6937 ;; Return value:  Size  Location     Type
  6938 ;;                  1    wreg      enum E96
  6939 ;; Registers used:
  6940 ;;		wreg
  6941 ;; Tracked objects:
  6942 ;;		On entry : 0/0
  6943 ;;		On exit  : 0/0
  6944 ;;		Unchanged: 0/0
  6945 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6946 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6947 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6948 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6949 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6950 ;;Total ram usage:        1 bytes
  6951 ;; Hardware stack levels used:    1
  6952 ;; Hardware stack levels required when called:    6
  6953 ;; This function calls:
  6954 ;;		Nothing
  6955 ;; This function is called by:
  6956 ;;		_i2c_writeNBytes
  6957 ;;		_i2c_write1ByteRegister
  6958 ;;		_i2c_read1ByteRegister
  6959 ;;		_i2c_read2ByteRegister
  6960 ;;		_i2c_write2ByteRegister
  6961 ;;		_i2c_readDataBlock
  6962 ;;		_do_I2C_DO_ADDRESS_NACK
  6963 ;;		_do_I2C_TX
  6964 ;;		_do_I2C_RX
  6965 ;;		_do_I2C_TX_EMPTY
  6966 ;;		i1_do_I2C_DO_ADDRESS_NACK
  6967 ;;		i1_do_I2C_TX
  6968 ;;		i1_do_I2C_RX
  6969 ;;		i1_do_I2C_TX_EMPTY
  6970 ;; This function uses a non-reentrant model
  6971 ;;
  6972                           
  6973                           
  6974                           ;psect for function _i2c_restartWrite
  6975  069F                     _i2c_restartWrite:	
  6976                           
  6977                           ;Skip over the trampoline to the duplicate function for level 1
  6978  069F  1C7E               	btfss	126,0
  6979  06A0  2EA3               	goto	l2071
  6980  06A1  3187  2F27         	ljmp	i1l2403
  6981  06A3                     _i2c_restartWrite$intlevel0:	
  6982  06A3                     l2071:	
  6983                           ;incstack = 0
  6984                           ; Regs used in _i2c_restartWrite: [wreg]
  6985                           
  6986                           
  6987                           ;i2c_types.c: 37: return i2c_restart_write;
  6988  06A3  3003               	movlw	3
  6989  06A4  0008               	return
  6990  06A5                     __end_of_i2c_restartWrite:	
  6991                           
  6992                           	psect	text41
  6993  06A5                     __ptext41:	
  6994 ;; *************** function _returnReset *****************
  6995 ;; Defined at:
  6996 ;;		line 448 in file "mcc_generated_files/drivers/i2c_master.c"
  6997 ;; Parameters:    Size  Location     Type
  6998 ;;  p               1    9[BANK0 ] PTR void 
  6999 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  7000 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  7001 ;; Auto vars:     Size  Location     Type
  7002 ;;		None
  7003 ;; Return value:  Size  Location     Type
  7004 ;;                  1    wreg      enum E12171
  7005 ;; Registers used:
  7006 ;;		wreg
  7007 ;; Tracked objects:
  7008 ;;		On entry : 0/0
  7009 ;;		On exit  : 0/0
  7010 ;;		Unchanged: 0/0
  7011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7012 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7013 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7014 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7015 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7016 ;;Total ram usage:        1 bytes
  7017 ;; Hardware stack levels used:    1
  7018 ;; Hardware stack levels required when called:    6
  7019 ;; This function calls:
  7020 ;;		Nothing
  7021 ;; This function is called by:
  7022 ;;		_i2c_open
  7023 ;;		_do_I2C_DO_ADDRESS_NACK
  7024 ;;		_do_I2C_TX
  7025 ;;		_do_I2C_RX
  7026 ;;		_do_I2C_TX_EMPTY
  7027 ;;		i1_do_I2C_DO_ADDRESS_NACK
  7028 ;;		i1_do_I2C_TX
  7029 ;;		i1_do_I2C_RX
  7030 ;;		i1_do_I2C_TX_EMPTY
  7031 ;; This function uses a non-reentrant model
  7032 ;;
  7033                           
  7034                           
  7035                           ;psect for function _returnReset
  7036  06A5                     _returnReset:	
  7037                           
  7038                           ;Skip over the trampoline to the duplicate function for level 1
  7039  06A5  1C7E               	btfss	126,0
  7040  06A6  2EA9               	goto	l2067
  7041  06A7  3187  2F29         	ljmp	i1l2399
  7042  06A9                     _returnReset$intlevel0:	
  7043  06A9                     l2067:	
  7044                           ;incstack = 0
  7045                           ; Regs used in _returnReset: [wreg]
  7046                           
  7047                           
  7048                           ;i2c_master.c: 450: return i2c_reset_link;
  7049  06A9  3005               	movlw	5
  7050  06AA  0008               	return
  7051  06AB                     __end_of_returnReset:	
  7052                           
  7053                           	psect	text42
  7054  06AB                     __ptext42:	
  7055 ;; *************** function _returnStop *****************
  7056 ;; Defined at:
  7057 ;;		line 443 in file "mcc_generated_files/drivers/i2c_master.c"
  7058 ;; Parameters:    Size  Location     Type
  7059 ;;  p               1    9[BANK0 ] PTR void 
  7060 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  7061 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  7062 ;; Auto vars:     Size  Location     Type
  7063 ;;		None
  7064 ;; Return value:  Size  Location     Type
  7065 ;;                  1    wreg      enum E12171
  7066 ;; Registers used:
  7067 ;;		wreg
  7068 ;; Tracked objects:
  7069 ;;		On entry : 0/0
  7070 ;;		On exit  : 0/0
  7071 ;;		Unchanged: 0/0
  7072 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7073 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7074 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7075 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7076 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7077 ;;Total ram usage:        1 bytes
  7078 ;; Hardware stack levels used:    1
  7079 ;; Hardware stack levels required when called:    6
  7080 ;; This function calls:
  7081 ;;		Nothing
  7082 ;; This function is called by:
  7083 ;;		_i2c_open
  7084 ;;		_setCallBack
  7085 ;;		_do_I2C_DO_ADDRESS_NACK
  7086 ;;		_do_I2C_TX
  7087 ;;		_do_I2C_RX
  7088 ;;		_do_I2C_TX_EMPTY
  7089 ;;		i1_do_I2C_DO_ADDRESS_NACK
  7090 ;;		i1_do_I2C_TX
  7091 ;;		i1_do_I2C_RX
  7092 ;;		i1_do_I2C_TX_EMPTY
  7093 ;; This function uses a non-reentrant model
  7094 ;;
  7095                           
  7096                           
  7097                           ;psect for function _returnStop
  7098  06AB                     _returnStop:	
  7099                           
  7100                           ;Skip over the trampoline to the duplicate function for level 1
  7101  06AB  1C7E               	btfss	126,0
  7102  06AC  2EAF               	goto	l2063
  7103  06AD  3187  2F2B         	ljmp	i1l2395
  7104  06AF                     _returnStop$intlevel0:	
  7105  06AF                     l2063:	
  7106                           ;incstack = 0
  7107                           ; Regs used in _returnStop: [wreg]
  7108                           
  7109                           
  7110                           ;i2c_master.c: 445: return i2c_stop;
  7111  06AF  3001               	movlw	1
  7112  06B0  0008               	return
  7113  06B1                     __end_of_returnStop:	
  7114                           
  7115                           	psect	text43
  7116  0515                     __ptext43:	
  7117 ;; *************** function _wr2RegCompleteHandler *****************
  7118 ;; Defined at:
  7119 ;;		line 110 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  7120 ;; Parameters:    Size  Location     Type
  7121 ;;  p               1    9[BANK0 ] PTR void 
  7122 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  7123 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  7124 ;; Auto vars:     Size  Location     Type
  7125 ;;		None
  7126 ;; Return value:  Size  Location     Type
  7127 ;;                  1    wreg      enum E97
  7128 ;; Registers used:
  7129 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7130 ;; Tracked objects:
  7131 ;;		On entry : 0/0
  7132 ;;		On exit  : 0/0
  7133 ;;		Unchanged: 0/0
  7134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7135 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7136 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7137 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7138 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7139 ;;Total ram usage:        1 bytes
  7140 ;; Hardware stack levels used:    1
  7141 ;; Hardware stack levels required when called:    8
  7142 ;; This function calls:
  7143 ;;		_i2c_setBuffer
  7144 ;;		_i2c_setDataCompleteCallback
  7145 ;; This function is called by:
  7146 ;;		_i2c_write2ByteRegister
  7147 ;;		_do_I2C_DO_ADDRESS_NACK
  7148 ;;		_do_I2C_TX
  7149 ;;		_do_I2C_RX
  7150 ;;		_do_I2C_TX_EMPTY
  7151 ;;		i1_do_I2C_DO_ADDRESS_NACK
  7152 ;;		i1_do_I2C_TX
  7153 ;;		i1_do_I2C_RX
  7154 ;;		i1_do_I2C_TX_EMPTY
  7155 ;; This function uses a non-reentrant model
  7156 ;;
  7157                           
  7158                           
  7159                           ;psect for function _wr2RegCompleteHandler
  7160  0515                     _wr2RegCompleteHandler:	
  7161                           
  7162                           ;Skip over the trampoline to the duplicate function for level 1
  7163  0515  1C7E               	btfss	126,0
  7164  0516  2D19               	goto	l2099
  7165  0517  3185  2D70         	ljmp	i1l2431
  7166  0519                     _wr2RegCompleteHandler$intlevel0:	
  7167  0519                     l2099:	
  7168                           ;incstack = 0
  7169                           ; Regs used in _wr2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  7170                           
  7171                           
  7172                           ;i2c_simple_master.c: 112: i2c_setBuffer(p,2);
  7173  0519  3002               	movlw	2
  7174  051A  0020               	movlb	0	; select bank0
  7175  051B  00A0               	movwf	i2c_setBuffer@bufferSize
  7176  051C  3000               	movlw	0
  7177  051D  00A1               	movwf	i2c_setBuffer@bufferSize+1
  7178  051E  0829               	movf	wr2RegCompleteHandler@p,w
  7179  051F  3185  252B  3185   	fcall	_i2c_setBuffer
  7180                           
  7181                           ;i2c_simple_master.c: 113: i2c_setDataCompleteCallback((0),(0));
  7182  0522  3000               	movlw	0
  7183  0523  0020               	movlb	0	; select bank0
  7184  0524  00A5               	movwf	i2c_setDataCompleteCallback@cb
  7185  0525  00A6               	movwf	i2c_setDataCompleteCallback@cb+1
  7186  0526  01A7               	clrf	i2c_setDataCompleteCallback@p
  7187  0527  3185  25A8         	fcall	_i2c_setDataCompleteCallback
  7188                           
  7189                           ;i2c_simple_master.c: 114: return i2c_continue;
  7190  0529  3004               	movlw	4
  7191  052A  0008               	return
  7192  052B                     __end_of_wr2RegCompleteHandler:	
  7193                           
  7194                           	psect	text44
  7195  05A8                     __ptext44:	
  7196 ;; *************** function _i2c_setDataCompleteCallback *****************
  7197 ;; Defined at:
  7198 ;;		line 89 in file "mcc_generated_files/drivers/i2c_master.c"
  7199 ;; Parameters:    Size  Location     Type
  7200 ;;  cb              2    5[BANK0 ] PTR FTN(PTR void ,)enum 
  7201 ;;		 -> rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), rd2RegCompleteHandler(1), rd1RegCompleteHandler(1), 
  7202 ;;		 -> wr1RegCompleteHandler(1), Absolute function(1), 
  7203 ;;  p               1    7[BANK0 ] PTR void 
  7204 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  7205 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  7206 ;; Auto vars:     Size  Location     Type
  7207 ;;		None
  7208 ;; Return value:  Size  Location     Type
  7209 ;;                  1    wreg      void 
  7210 ;; Registers used:
  7211 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7212 ;; Tracked objects:
  7213 ;;		On entry : 0/0
  7214 ;;		On exit  : 0/0
  7215 ;;		Unchanged: 0/0
  7216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7217 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7218 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7219 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7220 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7221 ;;Total ram usage:        4 bytes
  7222 ;; Hardware stack levels used:    1
  7223 ;; Hardware stack levels required when called:    7
  7224 ;; This function calls:
  7225 ;;		_setCallBack
  7226 ;; This function is called by:
  7227 ;;		_wr1RegCompleteHandler
  7228 ;;		_rd1RegCompleteHandler
  7229 ;;		_rd2RegCompleteHandler
  7230 ;;		_wr2RegCompleteHandler
  7231 ;;		_rdBlkRegCompleteHandler
  7232 ;;		_i2c_write1ByteRegister
  7233 ;;		_i2c_read1ByteRegister
  7234 ;;		_i2c_read2ByteRegister
  7235 ;;		_i2c_write2ByteRegister
  7236 ;;		_i2c_readDataBlock
  7237 ;; This function uses a non-reentrant model
  7238 ;;
  7239                           
  7240                           
  7241                           ;psect for function _i2c_setDataCompleteCallback
  7242  05A8                     _i2c_setDataCompleteCallback:	
  7243                           
  7244                           ;i2c_master.c: 91: setCallBack(i2c_dataComplete,cb,p);
  7245                           
  7246                           ;incstack = 0
  7247                           ; Regs used in _i2c_setDataCompleteCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  7248  05A8  0020               	movlb	0	; select bank0
  7249  05A9  0826               	movf	i2c_setDataCompleteCallback@cb+1,w
  7250  05AA  00A1               	movwf	setCallBack@cb+1
  7251  05AB  0825               	movf	i2c_setDataCompleteCallback@cb,w
  7252  05AC  00A0               	movwf	setCallBack@cb
  7253  05AD  0827               	movf	i2c_setDataCompleteCallback@p,w
  7254  05AE  00A8               	movwf	??_i2c_setDataCompleteCallback
  7255  05AF  0828               	movf	??_i2c_setDataCompleteCallback,w
  7256  05B0  00A2               	movwf	setCallBack@p
  7257  05B1  3000               	movlw	0
  7258  05B2  3183  23B5         	fcall	_setCallBack
  7259  05B4  0008               	return
  7260  05B5                     __end_of_i2c_setDataCompleteCallback:	
  7261                           
  7262                           	psect	text45
  7263  03B5                     __ptext45:	
  7264 ;; *************** function _setCallBack *****************
  7265 ;; Defined at:
  7266 ;;		line 453 in file "mcc_generated_files/drivers/i2c_master.c"
  7267 ;; Parameters:    Size  Location     Type
  7268 ;;  idx             1    wreg     enum E12355
  7269 ;;  cb              2    0[BANK0 ] PTR FTN(PTR void ,)enum 
  7270 ;;		 -> rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), rd2RegCompleteHandler(1), rd1RegCompleteHandler(1), 
  7271 ;;		 -> wr1RegCompleteHandler(1), i2c_restartWrite(1), Absolute function(1), 
  7272 ;;  p               1    2[BANK0 ] PTR void 
  7273 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  7274 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  7275 ;; Auto vars:     Size  Location     Type
  7276 ;;  idx             1    4[BANK0 ] enum E12355
  7277 ;; Return value:  Size  Location     Type
  7278 ;;                  1    wreg      void 
  7279 ;; Registers used:
  7280 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7281 ;; Tracked objects:
  7282 ;;		On entry : 0/0
  7283 ;;		On exit  : 0/0
  7284 ;;		Unchanged: 0/0
  7285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7286 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7287 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7288 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7289 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7290 ;;Total ram usage:        5 bytes
  7291 ;; Hardware stack levels used:    1
  7292 ;; Hardware stack levels required when called:    6
  7293 ;; This function calls:
  7294 ;;		Nothing
  7295 ;; This function is called by:
  7296 ;;		_i2c_setDataCompleteCallback
  7297 ;;		_i2c_setAddressNACKCallback
  7298 ;;		_i2c_setWriteCollisionCallback
  7299 ;;		_i2c_setDataNACKCallback
  7300 ;;		_i2c_setTimeOutCallback
  7301 ;; This function uses a non-reentrant model
  7302 ;;
  7303                           
  7304                           
  7305                           ;psect for function _setCallBack
  7306  03B5                     _setCallBack:	
  7307                           
  7308                           ;incstack = 0
  7309                           ; Regs used in _setCallBack: [wreg+fsr1l+fsr1h+status,2+status,0]
  7310                           ;setCallBack@idx stored from wreg
  7311  03B5  0020               	movlb	0	; select bank0
  7312  03B6  00A4               	movwf	setCallBack@idx
  7313                           
  7314                           ;i2c_master.c: 455: if(cb)
  7315  03B7  0820               	movf	setCallBack@cb,w
  7316  03B8  0421               	iorwf	setCallBack@cb+1,w
  7317  03B9  1903               	btfsc	3,2
  7318  03BA  2BCC               	goto	l1995
  7319                           
  7320                           ;i2c_master.c: 456: {
  7321                           ;i2c_master.c: 457: i2c_status.callbackTable[idx] = cb;
  7322  03BB  3524               	lslf	setCallBack@idx,w
  7323  03BC  3ECB               	addlw	(low ((_i2c_status| 0+11)))& (0+255)
  7324  03BD  0086               	movwf	6
  7325  03BE  0187               	clrf	7
  7326  03BF  0820               	movf	setCallBack@cb,w
  7327  03C0  3FC0               	movwi [0]fsr1
  7328  03C1  0821               	movf	setCallBack@cb+1,w
  7329  03C2  3FC1               	movwi [1]fsr1
  7330                           
  7331                           ;i2c_master.c: 458: i2c_status.callbackPayload[idx] = p;
  7332  03C3  0822               	movf	setCallBack@p,w
  7333  03C4  00A3               	movwf	??_setCallBack
  7334  03C5  0824               	movf	setCallBack@idx,w
  7335  03C6  3ED7               	addlw	(low ((_i2c_status| 0+23)))& (0+255)
  7336  03C7  0086               	movwf	6
  7337  03C8  0187               	clrf	7
  7338  03C9  0823               	movf	??_setCallBack,w
  7339  03CA  0081               	movwf	1
  7340                           
  7341                           ;i2c_master.c: 459: }
  7342  03CB  0008               	return
  7343  03CC                     l1995:	
  7344                           
  7345                           ;i2c_master.c: 460: else
  7346                           ;i2c_master.c: 461: {
  7347                           ;i2c_master.c: 462: i2c_status.callbackTable[idx] = returnStop;
  7348  03CC  3524               	lslf	setCallBack@idx,w
  7349  03CD  3ECB               	addlw	(low ((_i2c_status| 0+11)))& (0+255)
  7350  03CE  0086               	movwf	6
  7351  03CF  0187               	clrf	7
  7352  03D0  30AB               	movlw	low _returnStop
  7353  03D1  3FC0               	movwi [0]fsr1
  7354  03D2  3006               	movlw	high _returnStop
  7355  03D3  3FC1               	movwi [1]fsr1
  7356                           
  7357                           ;i2c_master.c: 463: i2c_status.callbackPayload[idx] = (0);
  7358  03D4  0824               	movf	setCallBack@idx,w
  7359  03D5  3ED7               	addlw	(low ((_i2c_status| 0+23)))& (0+255)
  7360  03D6  0086               	movwf	6
  7361  03D7  0187               	clrf	7
  7362  03D8  0181               	clrf	1
  7363  03D9  0008               	return
  7364  03DA                     __end_of_setCallBack:	
  7365                           
  7366                           	psect	text46
  7367  052B                     __ptext46:	
  7368 ;; *************** function _i2c_setBuffer *****************
  7369 ;; Defined at:
  7370 ;;		line 184 in file "mcc_generated_files/drivers/i2c_master.c"
  7371 ;; Parameters:    Size  Location     Type
  7372 ;;  buffer          1    wreg     PTR void 
  7373 ;;		 -> i2c_readDataBlock@reg(1), i2c_readDataBlock@d(3), i2c_write2ByteRegister@reg(1), i2c_write2ByteRegister@data(2),
      + 
  7374 ;;		 -> i2c_read2ByteRegister@reg(1), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@reg(1), i2c_read1ByteRegist
      +er@d2(1), 
  7375 ;;		 -> i2c_write1ByteRegister@reg(1), i2c_write1ByteRegister@data(1), NULL(0), main@writebuffer(17), 
  7376 ;;  bufferSize      2    0[BANK0 ] unsigned int 
  7377 ;; Auto vars:     Size  Location     Type
  7378 ;;  buffer          1    3[BANK0 ] PTR void 
  7379 ;;		 -> i2c_readDataBlock@reg(1), i2c_readDataBlock@d(3), i2c_write2ByteRegister@reg(1), i2c_write2ByteRegister@data(2),
      + 
  7380 ;;		 -> i2c_read2ByteRegister@reg(1), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@reg(1), i2c_read1ByteRegist
      +er@d2(1), 
  7381 ;;		 -> i2c_write1ByteRegister@reg(1), i2c_write1ByteRegister@data(1), NULL(0), main@writebuffer(17), 
  7382 ;; Return value:  Size  Location     Type
  7383 ;;                  1    wreg      void 
  7384 ;; Registers used:
  7385 ;;		wreg
  7386 ;; Tracked objects:
  7387 ;;		On entry : 0/0
  7388 ;;		On exit  : 0/0
  7389 ;;		Unchanged: 0/0
  7390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7391 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7392 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7393 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7394 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7395 ;;Total ram usage:        4 bytes
  7396 ;; Hardware stack levels used:    1
  7397 ;; Hardware stack levels required when called:    6
  7398 ;; This function calls:
  7399 ;;		Nothing
  7400 ;; This function is called by:
  7401 ;;		_wr1RegCompleteHandler
  7402 ;;		_i2c_writeNBytes
  7403 ;;		_rd1RegCompleteHandler
  7404 ;;		_rd2RegCompleteHandler
  7405 ;;		_wr2RegCompleteHandler
  7406 ;;		_rdBlkRegCompleteHandler
  7407 ;;		_i2c_write1ByteRegister
  7408 ;;		_i2c_read1ByteRegister
  7409 ;;		_i2c_read2ByteRegister
  7410 ;;		_i2c_write2ByteRegister
  7411 ;;		_i2c_readDataBlock
  7412 ;;		_i2c_readNBytes
  7413 ;; This function uses a non-reentrant model
  7414 ;;
  7415                           
  7416                           
  7417                           ;psect for function _i2c_setBuffer
  7418  052B                     _i2c_setBuffer:	
  7419                           
  7420                           ;incstack = 0
  7421                           ; Regs used in _i2c_setBuffer: [wreg]
  7422                           ;i2c_setBuffer@buffer stored from wreg
  7423  052B  0020               	movlb	0	; select bank0
  7424  052C  00A3               	movwf	i2c_setBuffer@buffer
  7425                           
  7426                           ;i2c_master.c: 186: if(i2c_status.bufferFree)
  7427  052D  0021               	movlb	1	; select bank1
  7428  052E  1D40               	btfss	_i2c_status^(0+128),2
  7429  052F  0008               	return
  7430                           
  7431                           ;i2c_master.c: 187: {
  7432                           ;i2c_master.c: 188: i2c_status.data_ptr = buffer;
  7433  0530  0020               	movlb	0	; select bank0
  7434  0531  0823               	movf	i2c_setBuffer@buffer,w
  7435  0532  00A2               	movwf	??_i2c_setBuffer
  7436  0533  0822               	movf	??_i2c_setBuffer,w
  7437  0534  0021               	movlb	1	; select bank1
  7438  0535  00C2               	movwf	(low ((_i2c_status| 0+2)))^(0+128)
  7439                           
  7440                           ;i2c_master.c: 189: i2c_status.data_length = bufferSize;
  7441  0536  0020               	movlb	0	; select bank0
  7442  0537  0821               	movf	i2c_setBuffer@bufferSize+1,w
  7443  0538  0021               	movlb	1	; select bank1
  7444  0539  00C4               	movwf	((_i2c_status+1)^(0+128)+3)
  7445  053A  0020               	movlb	0	; select bank0
  7446  053B  0820               	movf	i2c_setBuffer@bufferSize,w
  7447  053C  0021               	movlb	1	; select bank1
  7448  053D  00C3               	movwf	(_i2c_status^(0+128)+3)
  7449                           
  7450                           ;i2c_master.c: 190: i2c_status.bufferFree = 0;
  7451  053E  1140               	bcf	_i2c_status^(0+128),2
  7452  053F  0008               	return
  7453  0540                     __end_of_i2c_setBuffer:	
  7454                           
  7455                           	psect	text47
  7456  0700                     __ptext47:	
  7457 ;; *************** function _i2c_driver_stop *****************
  7458 ;; Defined at:
  7459 ;;		line 156 in file "mcc_generated_files/i2c_driver.c"
  7460 ;; Parameters:    Size  Location     Type
  7461 ;;		None
  7462 ;; Auto vars:     Size  Location     Type
  7463 ;;		None
  7464 ;; Return value:  Size  Location     Type
  7465 ;;                  1    wreg      void 
  7466 ;; Registers used:
  7467 ;;		None
  7468 ;; Tracked objects:
  7469 ;;		On entry : 0/0
  7470 ;;		On exit  : 0/0
  7471 ;;		Unchanged: 0/0
  7472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7473 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7474 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7475 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7476 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7477 ;;Total ram usage:        0 bytes
  7478 ;; Hardware stack levels used:    1
  7479 ;; Hardware stack levels required when called:    6
  7480 ;; This function calls:
  7481 ;;		Nothing
  7482 ;; This function is called by:
  7483 ;;		_do_I2C_SEND_STOP
  7484 ;; This function uses a non-reentrant model
  7485 ;;
  7486                           
  7487                           
  7488                           ;psect for function _i2c_driver_stop
  7489  0700                     _i2c_driver_stop:	
  7490                           
  7491                           ;i2c_driver.c: 158: SSP1CON2bits.PEN = 1;
  7492                           
  7493                           ;incstack = 0
  7494                           ; Regs used in _i2c_driver_stop: []
  7495  0700  0024               	movlb	4	; select bank4
  7496  0701  1516               	bsf	22,2	;volatile
  7497  0702  0008               	return
  7498  0703                     __end_of_i2c_driver_stop:	
  7499                           
  7500                           	psect	text48
  7501  0703                     __ptext48:	
  7502 ;; *************** function _i2c_driver_restart *****************
  7503 ;; Defined at:
  7504 ;;		line 151 in file "mcc_generated_files/i2c_driver.c"
  7505 ;; Parameters:    Size  Location     Type
  7506 ;;		None
  7507 ;; Auto vars:     Size  Location     Type
  7508 ;;		None
  7509 ;; Return value:  Size  Location     Type
  7510 ;;                  1    wreg      void 
  7511 ;; Registers used:
  7512 ;;		None
  7513 ;; Tracked objects:
  7514 ;;		On entry : 0/0
  7515 ;;		On exit  : 0/0
  7516 ;;		Unchanged: 0/0
  7517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7518 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7519 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7521 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7522 ;;Total ram usage:        0 bytes
  7523 ;; Hardware stack levels used:    1
  7524 ;; Hardware stack levels required when called:    6
  7525 ;; This function calls:
  7526 ;;		Nothing
  7527 ;; This function is called by:
  7528 ;;		_do_I2C_SEND_RESTART_READ
  7529 ;;		_do_I2C_SEND_RESTART_WRITE
  7530 ;;		_do_I2C_SEND_RESTART
  7531 ;; This function uses a non-reentrant model
  7532 ;;
  7533                           
  7534                           
  7535                           ;psect for function _i2c_driver_restart
  7536  0703                     _i2c_driver_restart:	
  7537                           
  7538                           ;i2c_driver.c: 153: SSP1CON2bits.RSEN = 1;
  7539                           
  7540                           ;incstack = 0
  7541                           ; Regs used in _i2c_driver_restart: []
  7542  0703  0024               	movlb	4	; select bank4
  7543  0704  1496               	bsf	22,1	;volatile
  7544  0705  0008               	return
  7545  0706                     __end_of_i2c_driver_restart:	
  7546                           
  7547                           	psect	text49
  7548  06CF                     __ptext49:	
  7549 ;; *************** function _i2c_driver_sendACK *****************
  7550 ;; Defined at:
  7551 ;;		line 196 in file "mcc_generated_files/i2c_driver.c"
  7552 ;; Parameters:    Size  Location     Type
  7553 ;;		None
  7554 ;; Auto vars:     Size  Location     Type
  7555 ;;		None
  7556 ;; Return value:  Size  Location     Type
  7557 ;;                  1    wreg      void 
  7558 ;; Registers used:
  7559 ;;		None
  7560 ;; Tracked objects:
  7561 ;;		On entry : 0/0
  7562 ;;		On exit  : 0/0
  7563 ;;		Unchanged: 0/0
  7564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7565 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7566 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7567 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7568 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7569 ;;Total ram usage:        0 bytes
  7570 ;; Hardware stack levels used:    1
  7571 ;; Hardware stack levels required when called:    6
  7572 ;; This function calls:
  7573 ;;		Nothing
  7574 ;; This function is called by:
  7575 ;;		_do_I2C_DO_ACK
  7576 ;;		_do_I2C_RX
  7577 ;; This function uses a non-reentrant model
  7578 ;;
  7579                           
  7580                           
  7581                           ;psect for function _i2c_driver_sendACK
  7582  06CF                     _i2c_driver_sendACK:	
  7583                           
  7584                           ;i2c_driver.c: 198: SSP1CON2bits.ACKDT = 0;
  7585                           
  7586                           ;incstack = 0
  7587                           ; Regs used in _i2c_driver_sendACK: []
  7588  06CF  0024               	movlb	4	; select bank4
  7589  06D0  1296               	bcf	22,5	;volatile
  7590                           
  7591                           ;i2c_driver.c: 199: SSP1CON2bits.ACKEN = 1;
  7592  06D1  1616               	bsf	22,4	;volatile
  7593  06D2  0008               	return
  7594  06D3                     __end_of_i2c_driver_sendACK:	
  7595                           
  7596                           	psect	text50
  7597  0706                     __ptext50:	
  7598 ;; *************** function _i2c_driver_start *****************
  7599 ;; Defined at:
  7600 ;;		line 146 in file "mcc_generated_files/i2c_driver.c"
  7601 ;; Parameters:    Size  Location     Type
  7602 ;;		None
  7603 ;; Auto vars:     Size  Location     Type
  7604 ;;		None
  7605 ;; Return value:  Size  Location     Type
  7606 ;;                  1    wreg      void 
  7607 ;; Registers used:
  7608 ;;		None
  7609 ;; Tracked objects:
  7610 ;;		On entry : 0/0
  7611 ;;		On exit  : 0/0
  7612 ;;		Unchanged: 0/0
  7613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7614 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7615 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7616 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7617 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7618 ;;Total ram usage:        0 bytes
  7619 ;; Hardware stack levels used:    1
  7620 ;; Hardware stack levels required when called:    6
  7621 ;; This function calls:
  7622 ;;		Nothing
  7623 ;; This function is called by:
  7624 ;;		_i2c_masterOperation
  7625 ;; This function uses a non-reentrant model
  7626 ;;
  7627                           
  7628                           
  7629                           ;psect for function _i2c_driver_start
  7630  0706                     _i2c_driver_start:	
  7631                           
  7632                           ;i2c_driver.c: 148: SSP1CON2bits.SEN = 1;
  7633                           
  7634                           ;incstack = 0
  7635                           ; Regs used in _i2c_driver_start: []
  7636  0706  0024               	movlb	4	; select bank4
  7637  0707  1416               	bsf	22,0	;volatile
  7638  0708  0008               	return
  7639  0709                     __end_of_i2c_driver_start:	
  7640                           
  7641                           	psect	text51
  7642  04A1                     __ptext51:	
  7643 ;; *************** function _i2c_close *****************
  7644 ;; Defined at:
  7645 ;;		line 162 in file "mcc_generated_files/drivers/i2c_master.c"
  7646 ;; Parameters:    Size  Location     Type
  7647 ;;		None
  7648 ;; Auto vars:     Size  Location     Type
  7649 ;;  ret             1    1[BANK0 ] enum E12166
  7650 ;; Return value:  Size  Location     Type
  7651 ;;                  1    wreg      enum E12166
  7652 ;; Registers used:
  7653 ;;		wreg, status,2, status,0, pclath, cstack
  7654 ;; Tracked objects:
  7655 ;;		On entry : 0/0
  7656 ;;		On exit  : 0/0
  7657 ;;		Unchanged: 0/0
  7658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7659 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7660 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7661 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7662 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7663 ;;Total ram usage:        2 bytes
  7664 ;; Hardware stack levels used:    1
  7665 ;; Hardware stack levels required when called:    7
  7666 ;; This function calls:
  7667 ;;		_mssp_clearIRQ
  7668 ;;		_mssp_disableIRQ
  7669 ;; This function is called by:
  7670 ;;		_i2c_writeNBytes
  7671 ;;		_i2c_write1ByteRegister
  7672 ;;		_i2c_read1ByteRegister
  7673 ;;		_i2c_read2ByteRegister
  7674 ;;		_i2c_write2ByteRegister
  7675 ;;		_i2c_readDataBlock
  7676 ;;		_i2c_readNBytes
  7677 ;; This function uses a non-reentrant model
  7678 ;;
  7679                           
  7680                           
  7681                           ;psect for function _i2c_close
  7682  04A1                     _i2c_close:	
  7683                           
  7684                           ;i2c_master.c: 164: i2c_error_t ret = I2C_BUSY;
  7685                           
  7686                           ;incstack = 0
  7687                           ; Regs used in _i2c_close: [wreg+status,2+status,0+pclath+cstack]
  7688  04A1  0020               	movlb	0	; select bank0
  7689  04A2  01A1               	clrf	i2c_close@ret
  7690  04A3  0AA1               	incf	i2c_close@ret,f
  7691                           
  7692                           ;i2c_master.c: 165: if(!i2c_status.busy)
  7693  04A4  0021               	movlb	1	; select bank1
  7694  04A5  1840               	btfsc	_i2c_status^(0+128),0
  7695  04A6  2CB9               	goto	l341
  7696                           
  7697                           ;i2c_master.c: 166: {
  7698                           ;i2c_master.c: 167: i2c_status.inUse = 0;
  7699  04A7  10C0               	bcf	_i2c_status^(0+128),1
  7700                           
  7701                           ;i2c_master.c: 169: i2c_status.address = 0xff;
  7702  04A8  30FF               	movlw	255
  7703  04A9  0020               	movlb	0	; select bank0
  7704  04AA  00A0               	movwf	??_i2c_close
  7705  04AB  0820               	movf	??_i2c_close,w
  7706  04AC  0021               	movlb	1	; select bank1
  7707  04AD  00C1               	movwf	(_i2c_status^(0+128)+1)
  7708                           
  7709                           ;i2c_master.c: 170: mssp_clearIRQ();
  7710  04AE  3187  270C  3184   	fcall	_mssp_clearIRQ
  7711                           
  7712                           ;i2c_master.c: 171: mssp_disableIRQ();
  7713  04B1  3187  2709         	fcall	_mssp_disableIRQ
  7714                           
  7715                           ;i2c_master.c: 172: ret = i2c_status.error;
  7716  04B3  0021               	movlb	1	; select bank1
  7717  04B4  084A               	movf	(_i2c_status^(0+128)+10),w
  7718  04B5  0020               	movlb	0	; select bank0
  7719  04B6  00A0               	movwf	??_i2c_close
  7720  04B7  0820               	movf	??_i2c_close,w
  7721  04B8  00A1               	movwf	i2c_close@ret
  7722  04B9                     l341:	
  7723                           
  7724                           ;i2c_master.c: 173: }
  7725                           ;i2c_master.c: 174: return ret;
  7726  04B9  0020               	movlb	0	; select bank0
  7727  04BA  0821               	movf	i2c_close@ret,w
  7728  04BB  0008               	return
  7729  04BC                     __end_of_i2c_close:	
  7730                           
  7731                           	psect	text52
  7732  0709                     __ptext52:	
  7733 ;; *************** function _mssp_disableIRQ *****************
  7734 ;; Defined at:
  7735 ;;		line 48 in file "mcc_generated_files/i2c_driver.c"
  7736 ;; Parameters:    Size  Location     Type
  7737 ;;		None
  7738 ;; Auto vars:     Size  Location     Type
  7739 ;;		None
  7740 ;; Return value:  Size  Location     Type
  7741 ;;                  1    wreg      void 
  7742 ;; Registers used:
  7743 ;;		None
  7744 ;; Tracked objects:
  7745 ;;		On entry : 0/0
  7746 ;;		On exit  : 0/0
  7747 ;;		Unchanged: 0/0
  7748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7749 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7750 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7751 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7752 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7753 ;;Total ram usage:        0 bytes
  7754 ;; Hardware stack levels used:    1
  7755 ;; Hardware stack levels required when called:    6
  7756 ;; This function calls:
  7757 ;;		Nothing
  7758 ;; This function is called by:
  7759 ;;		_i2c_close
  7760 ;;		_i2c_setTimeOut
  7761 ;; This function uses a non-reentrant model
  7762 ;;
  7763                           
  7764                           
  7765                           ;psect for function _mssp_disableIRQ
  7766  0709                     _mssp_disableIRQ:	
  7767                           
  7768                           ;i2c_driver.c: 50: PIE1bits.SSP1IE = 0;
  7769                           
  7770                           ;incstack = 0
  7771                           ; Regs used in _mssp_disableIRQ: []
  7772  0709  0021               	movlb	1	; select bank1
  7773  070A  1190               	bcf	16,3	;volatile
  7774  070B  0008               	return
  7775  070C                     __end_of_mssp_disableIRQ:	
  7776                           
  7777                           	psect	text53
  7778  070C                     __ptext53:	
  7779 ;; *************** function _mssp_clearIRQ *****************
  7780 ;; Defined at:
  7781 ;;		line 53 in file "mcc_generated_files/i2c_driver.c"
  7782 ;; Parameters:    Size  Location     Type
  7783 ;;		None
  7784 ;; Auto vars:     Size  Location     Type
  7785 ;;		None
  7786 ;; Return value:  Size  Location     Type
  7787 ;;                  1    wreg      void 
  7788 ;; Registers used:
  7789 ;;		None
  7790 ;; Tracked objects:
  7791 ;;		On entry : 0/0
  7792 ;;		On exit  : 0/0
  7793 ;;		Unchanged: 0/0
  7794 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7795 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7796 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7797 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7798 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7799 ;;Total ram usage:        0 bytes
  7800 ;; Hardware stack levels used:    1
  7801 ;; Hardware stack levels required when called:    6
  7802 ;; This function calls:
  7803 ;;		Nothing
  7804 ;; This function is called by:
  7805 ;;		_i2c_open
  7806 ;;		_i2c_close
  7807 ;;		_i2c_ISR
  7808 ;; This function uses a non-reentrant model
  7809 ;;
  7810                           
  7811                           
  7812                           ;psect for function _mssp_clearIRQ
  7813  070C                     _mssp_clearIRQ:	
  7814                           
  7815                           ;i2c_driver.c: 55: PIR1bits.SSP1IF = 0;
  7816                           
  7817                           ;incstack = 0
  7818                           ; Regs used in _mssp_clearIRQ: []
  7819  070C  0020               	movlb	0	; select bank0
  7820  070D  1190               	bcf	16,3	;volatile
  7821  070E  0008               	return
  7822  070F                     __end_of_mssp_clearIRQ:	
  7823                           
  7824                           	psect	text54
  7825  0104                     __ptext54:	
  7826 ;; *************** function ___awdiv *****************
  7827 ;; Defined at:
  7828 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  7829 ;; Parameters:    Size  Location     Type
  7830 ;;  divisor         2    0[BANK0 ] int 
  7831 ;;  dividend        2    2[BANK0 ] int 
  7832 ;; Auto vars:     Size  Location     Type
  7833 ;;  quotient        2    7[BANK0 ] int 
  7834 ;;  sign            1    6[BANK0 ] unsigned char 
  7835 ;;  counter         1    5[BANK0 ] unsigned char 
  7836 ;; Return value:  Size  Location     Type
  7837 ;;                  2    0[BANK0 ] int 
  7838 ;; Registers used:
  7839 ;;		wreg, status,2, status,0
  7840 ;; Tracked objects:
  7841 ;;		On entry : 0/0
  7842 ;;		On exit  : 0/0
  7843 ;;		Unchanged: 0/0
  7844 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7845 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7846 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7847 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7848 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7849 ;;Total ram usage:        9 bytes
  7850 ;; Hardware stack levels used:    1
  7851 ;; Hardware stack levels required when called:    6
  7852 ;; This function calls:
  7853 ;;		Nothing
  7854 ;; This function is called by:
  7855 ;;		_main
  7856 ;; This function uses a non-reentrant model
  7857 ;;
  7858                           
  7859                           
  7860                           ;psect for function ___awdiv
  7861  0104                     ___awdiv:	
  7862                           
  7863                           ;incstack = 0
  7864                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  7865  0104  0020               	movlb	0	; select bank0
  7866  0105  01A6               	clrf	___awdiv@sign
  7867  0106  1FA1               	btfss	___awdiv@divisor+1,7
  7868  0107  290F               	goto	l2699
  7869  0108  09A0               	comf	___awdiv@divisor,f
  7870  0109  09A1               	comf	___awdiv@divisor+1,f
  7871  010A  0AA0               	incf	___awdiv@divisor,f
  7872  010B  1903               	skipnz
  7873  010C  0AA1               	incf	___awdiv@divisor+1,f
  7874  010D  01A6               	clrf	___awdiv@sign
  7875  010E  0AA6               	incf	___awdiv@sign,f
  7876  010F                     l2699:	
  7877  010F  1FA3               	btfss	___awdiv@dividend+1,7
  7878  0110  291A               	goto	l2705
  7879  0111  09A2               	comf	___awdiv@dividend,f
  7880  0112  09A3               	comf	___awdiv@dividend+1,f
  7881  0113  0AA2               	incf	___awdiv@dividend,f
  7882  0114  1903               	skipnz
  7883  0115  0AA3               	incf	___awdiv@dividend+1,f
  7884  0116  3001               	movlw	1
  7885  0117  00A4               	movwf	??___awdiv
  7886  0118  0824               	movf	??___awdiv,w
  7887  0119  06A6               	xorwf	___awdiv@sign,f
  7888  011A                     l2705:	
  7889  011A  01A7               	clrf	___awdiv@quotient
  7890  011B  01A8               	clrf	___awdiv@quotient+1
  7891  011C  0820               	movf	___awdiv@divisor,w
  7892  011D  0421               	iorwf	___awdiv@divisor+1,w
  7893  011E  1903               	btfsc	3,2
  7894  011F  2949               	goto	l2727
  7895  0120  01A5               	clrf	___awdiv@counter
  7896  0121  0AA5               	incf	___awdiv@counter,f
  7897  0122                     l2715:	
  7898  0122  1BA1               	btfsc	___awdiv@divisor+1,7
  7899  0123  292E               	goto	l2717
  7900  0124  3001               	movlw	1
  7901  0125                     u915:	
  7902  0125  35A0               	lslf	___awdiv@divisor,f
  7903  0126  0DA1               	rlf	___awdiv@divisor+1,f
  7904  0127  0B89               	decfsz	9,f
  7905  0128  2925               	goto	u915
  7906  0129  3001               	movlw	1
  7907  012A  00A4               	movwf	??___awdiv
  7908  012B  0824               	movf	??___awdiv,w
  7909  012C  07A5               	addwf	___awdiv@counter,f
  7910  012D  2922               	goto	l2715
  7911  012E                     l2717:	
  7912  012E  3001               	movlw	1
  7913  012F                     u935:	
  7914  012F  35A7               	lslf	___awdiv@quotient,f
  7915  0130  0DA8               	rlf	___awdiv@quotient+1,f
  7916  0131  0B89               	decfsz	9,f
  7917  0132  292F               	goto	u935
  7918  0133  0821               	movf	___awdiv@divisor+1,w
  7919  0134  0223               	subwf	___awdiv@dividend+1,w
  7920  0135  1D03               	skipz
  7921  0136  2939               	goto	u945
  7922  0137  0820               	movf	___awdiv@divisor,w
  7923  0138  0222               	subwf	___awdiv@dividend,w
  7924  0139                     u945:	
  7925  0139  1C03               	skipc
  7926  013A  2940               	goto	l2723
  7927  013B  0820               	movf	___awdiv@divisor,w
  7928  013C  02A2               	subwf	___awdiv@dividend,f
  7929  013D  0821               	movf	___awdiv@divisor+1,w
  7930  013E  3BA3               	subwfb	___awdiv@dividend+1,f
  7931  013F  1427               	bsf	___awdiv@quotient,0
  7932  0140                     l2723:	
  7933  0140  3001               	movlw	1
  7934  0141                     u955:	
  7935  0141  36A1               	lsrf	___awdiv@divisor+1,f
  7936  0142  0CA0               	rrf	___awdiv@divisor,f
  7937  0143  0B89               	decfsz	9,f
  7938  0144  2941               	goto	u955
  7939  0145  3001               	movlw	1
  7940  0146  02A5               	subwf	___awdiv@counter,f
  7941  0147  1D03               	btfss	3,2
  7942  0148  292E               	goto	l2717
  7943  0149                     l2727:	
  7944  0149  0826               	movf	___awdiv@sign,w
  7945  014A  1903               	btfsc	3,2
  7946  014B  2951               	goto	l2731
  7947  014C  09A7               	comf	___awdiv@quotient,f
  7948  014D  09A8               	comf	___awdiv@quotient+1,f
  7949  014E  0AA7               	incf	___awdiv@quotient,f
  7950  014F  1903               	skipnz
  7951  0150  0AA8               	incf	___awdiv@quotient+1,f
  7952  0151                     l2731:	
  7953  0151  0828               	movf	___awdiv@quotient+1,w
  7954  0152  00A1               	movwf	?___awdiv+1
  7955  0153  0827               	movf	___awdiv@quotient,w
  7956  0154  00A0               	movwf	?___awdiv
  7957  0155  0008               	return
  7958  0156                     __end_of___awdiv:	
  7959                           
  7960                           	psect	text55
  7961  06B1                     __ptext55:	
  7962 ;; *************** function _SYSTEM_Initialize *****************
  7963 ;; Defined at:
  7964 ;;		line 77 in file "mcc_generated_files/mcc.c"
  7965 ;; Parameters:    Size  Location     Type
  7966 ;;		None
  7967 ;; Auto vars:     Size  Location     Type
  7968 ;;		None
  7969 ;; Return value:  Size  Location     Type
  7970 ;;                  1    wreg      void 
  7971 ;; Registers used:
  7972 ;;		wreg, status,2, status,0, pclath, cstack
  7973 ;; Tracked objects:
  7974 ;;		On entry : 0/0
  7975 ;;		On exit  : 0/0
  7976 ;;		Unchanged: 0/0
  7977 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7978 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7979 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7980 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7981 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7982 ;;Total ram usage:        0 bytes
  7983 ;; Hardware stack levels used:    1
  7984 ;; Hardware stack levels required when called:    7
  7985 ;; This function calls:
  7986 ;;		_OSCILLATOR_Initialize
  7987 ;;		_PIN_MANAGER_Initialize
  7988 ;; This function is called by:
  7989 ;;		_main
  7990 ;; This function uses a non-reentrant model
  7991 ;;
  7992                           
  7993                           
  7994                           ;psect for function _SYSTEM_Initialize
  7995  06B1                     _SYSTEM_Initialize:	
  7996                           
  7997                           ;mcc.c: 79: PIN_MANAGER_Initialize();
  7998                           
  7999                           ;incstack = 0
  8000                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  8001  06B1  3183  2343  3186   	fcall	_PIN_MANAGER_Initialize
  8002                           
  8003                           ;mcc.c: 80: OSCILLATOR_Initialize();
  8004  06B4  3186  266C         	fcall	_OSCILLATOR_Initialize
  8005  06B6  0008               	return
  8006  06B7                     __end_of_SYSTEM_Initialize:	
  8007                           
  8008                           	psect	text56
  8009  0343                     __ptext56:	
  8010 ;; *************** function _PIN_MANAGER_Initialize *****************
  8011 ;; Defined at:
  8012 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  8013 ;; Parameters:    Size  Location     Type
  8014 ;;		None
  8015 ;; Auto vars:     Size  Location     Type
  8016 ;;		None
  8017 ;; Return value:  Size  Location     Type
  8018 ;;                  1    wreg      void 
  8019 ;; Registers used:
  8020 ;;		wreg, status,2
  8021 ;; Tracked objects:
  8022 ;;		On entry : 0/0
  8023 ;;		On exit  : 0/0
  8024 ;;		Unchanged: 0/0
  8025 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8026 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8027 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8028 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8029 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8030 ;;Total ram usage:        0 bytes
  8031 ;; Hardware stack levels used:    1
  8032 ;; Hardware stack levels required when called:    6
  8033 ;; This function calls:
  8034 ;;		Nothing
  8035 ;; This function is called by:
  8036 ;;		_SYSTEM_Initialize
  8037 ;; This function uses a non-reentrant model
  8038 ;;
  8039                           
  8040                           
  8041                           ;psect for function _PIN_MANAGER_Initialize
  8042  0343                     _PIN_MANAGER_Initialize:	
  8043                           
  8044                           ;pin_manager.c: 57: LATA = 0x00;
  8045                           
  8046                           ;incstack = 0
  8047                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  8048  0343  0022               	movlb	2	; select bank2
  8049  0344  018C               	clrf	12	;volatile
  8050                           
  8051                           ;pin_manager.c: 58: LATB = 0x00;
  8052  0345  018D               	clrf	13	;volatile
  8053                           
  8054                           ;pin_manager.c: 59: LATC = 0x00;
  8055  0346  018E               	clrf	14	;volatile
  8056                           
  8057                           ;pin_manager.c: 64: TRISA = 0x37;
  8058  0347  3037               	movlw	55
  8059  0348  0021               	movlb	1	; select bank1
  8060  0349  008C               	movwf	12	;volatile
  8061                           
  8062                           ;pin_manager.c: 65: TRISB = 0xF0;
  8063  034A  30F0               	movlw	240
  8064  034B  008D               	movwf	13	;volatile
  8065                           
  8066                           ;pin_manager.c: 66: TRISC = 0xFF;
  8067  034C  30FF               	movlw	255
  8068  034D  008E               	movwf	14	;volatile
  8069                           
  8070                           ;pin_manager.c: 71: ANSELC = 0xCF;
  8071  034E  30CF               	movlw	207
  8072  034F  0023               	movlb	3	; select bank3
  8073  0350  008E               	movwf	14	;volatile
  8074                           
  8075                           ;pin_manager.c: 72: ANSELB = 0xA0;
  8076  0351  30A0               	movlw	160
  8077  0352  008D               	movwf	13	;volatile
  8078                           
  8079                           ;pin_manager.c: 73: ANSELA = 0x17;
  8080  0353  3017               	movlw	23
  8081  0354  008C               	movwf	12	;volatile
  8082                           
  8083                           ;pin_manager.c: 78: WPUB = 0x00;
  8084  0355  0024               	movlb	4	; select bank4
  8085  0356  018D               	clrf	13	;volatile
  8086                           
  8087                           ;pin_manager.c: 79: WPUA = 0x00;
  8088  0357  018C               	clrf	12	;volatile
  8089                           
  8090                           ;pin_manager.c: 80: WPUC = 0x00;
  8091  0358  018E               	clrf	14	;volatile
  8092                           
  8093                           ;pin_manager.c: 81: OPTION_REGbits.nWPUEN = 1;
  8094  0359  0021               	movlb	1	; select bank1
  8095  035A  1795               	bsf	21,7	;volatile
  8096                           
  8097                           ;pin_manager.c: 86: ODCONA = 0x00;
  8098  035B  0025               	movlb	5	; select bank5
  8099  035C  018C               	clrf	12	;volatile
  8100                           
  8101                           ;pin_manager.c: 87: ODCONB = 0x00;
  8102  035D  018D               	clrf	13	;volatile
  8103                           
  8104                           ;pin_manager.c: 88: ODCONC = 0x00;
  8105  035E  018E               	clrf	14	;volatile
  8106                           
  8107                           ;pin_manager.c: 95: SSPCLKPPS = 0x0E;
  8108  035F  300E               	movlw	14
  8109  0360  003C               	movlb	28	; select bank28
  8110  0361  00A0               	movwf	32	;volatile
  8111                           
  8112                           ;pin_manager.c: 96: SSPDATPPS = 0x0C;
  8113  0362  300C               	movlw	12
  8114  0363  00A1               	movwf	33	;volatile
  8115                           
  8116                           ;pin_manager.c: 97: RB6PPS = 0x10;
  8117  0364  3010               	movlw	16
  8118  0365  003D               	movlb	29	; select bank29
  8119  0366  009E               	movwf	30	;volatile
  8120                           
  8121                           ;pin_manager.c: 98: RB4PPS = 0x11;
  8122  0367  3011               	movlw	17
  8123  0368  009C               	movwf	28	;volatile
  8124  0369  0008               	return
  8125  036A                     __end_of_PIN_MANAGER_Initialize:	
  8126                           
  8127                           	psect	text57
  8128  066C                     __ptext57:	
  8129 ;; *************** function _OSCILLATOR_Initialize *****************
  8130 ;; Defined at:
  8131 ;;		line 83 in file "mcc_generated_files/mcc.c"
  8132 ;; Parameters:    Size  Location     Type
  8133 ;;		None
  8134 ;; Auto vars:     Size  Location     Type
  8135 ;;		None
  8136 ;; Return value:  Size  Location     Type
  8137 ;;                  1    wreg      void 
  8138 ;; Registers used:
  8139 ;;		wreg, status,2
  8140 ;; Tracked objects:
  8141 ;;		On entry : 0/0
  8142 ;;		On exit  : 0/0
  8143 ;;		Unchanged: 0/0
  8144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8145 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8146 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8147 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8148 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8149 ;;Total ram usage:        0 bytes
  8150 ;; Hardware stack levels used:    1
  8151 ;; Hardware stack levels required when called:    6
  8152 ;; This function calls:
  8153 ;;		Nothing
  8154 ;; This function is called by:
  8155 ;;		_SYSTEM_Initialize
  8156 ;; This function uses a non-reentrant model
  8157 ;;
  8158                           
  8159                           
  8160                           ;psect for function _OSCILLATOR_Initialize
  8161  066C                     _OSCILLATOR_Initialize:	
  8162                           
  8163                           ;mcc.c: 86: OSCCON = 0x58;
  8164                           
  8165                           ;incstack = 0
  8166                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  8167  066C  3058               	movlw	88
  8168  066D  0021               	movlb	1	; select bank1
  8169  066E  0099               	movwf	25	;volatile
  8170                           
  8171                           ;mcc.c: 88: OSCTUNE = 0x00;
  8172  066F  0198               	clrf	24	;volatile
  8173                           
  8174                           ;mcc.c: 90: BORCON = 0x00;
  8175  0670  0022               	movlb	2	; select bank2
  8176  0671  0196               	clrf	22	;volatile
  8177  0672  0008               	return
  8178  0673                     __end_of_OSCILLATOR_Initialize:	
  8179                           
  8180                           	psect	intentry
  8181  0004                     __pintentry:	
  8182 ;; *************** function _INTERRUPT_InterruptManager *****************
  8183 ;; Defined at:
  8184 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  8185 ;; Parameters:    Size  Location     Type
  8186 ;;		None
  8187 ;; Auto vars:     Size  Location     Type
  8188 ;;		None
  8189 ;; Return value:  Size  Location     Type
  8190 ;;                  1    wreg      void 
  8191 ;; Registers used:
  8192 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8193 ;; Tracked objects:
  8194 ;;		On entry : 0/0
  8195 ;;		On exit  : 0/0
  8196 ;;		Unchanged: 0/0
  8197 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8198 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8199 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8200 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8201 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8202 ;;Total ram usage:        1 bytes
  8203 ;; Hardware stack levels used:    1
  8204 ;; Hardware stack levels required when called:    5
  8205 ;; This function calls:
  8206 ;;		Absolute function
  8207 ;;		_i2c_busCollisionISR
  8208 ;;		i1_i2c_ISR
  8209 ;; This function is called by:
  8210 ;;		Interrupt level 1
  8211 ;; This function uses a non-reentrant model
  8212 ;;
  8213                           
  8214  0004                     _INTERRUPT_InterruptManager:	
  8215                           
  8216                           ;incstack = 0
  8217  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  8218                           
  8219                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8220  0005  3180               	pagesel	$
  8221  0006  0020               	movlb	0	; select bank0
  8222  0007  087F               	movf	127,w
  8223  0008  00F5               	movwf	??_INTERRUPT_InterruptManager
  8224                           
  8225                           ;interrupt_manager.c: 54: if(INTCONbits.PEIE == 1)
  8226  0009  1F0B               	btfss	11,6	;volatile
  8227  000A  2822               	goto	i1l168
  8228                           
  8229                           ;interrupt_manager.c: 55: {
  8230                           ;interrupt_manager.c: 56: if(PIE2bits.BCL1IE == 1 && PIR2bits.BCL1IF == 1)
  8231  000B  0021               	movlb	1	; select bank1
  8232  000C  1D91               	btfss	17,3	;volatile
  8233  000D  2817               	goto	i1l163
  8234  000E  0020               	movlb	0	; select bank0
  8235  000F  1D91               	btfss	17,3	;volatile
  8236  0010  2817               	goto	i1l163
  8237                           
  8238                           ;interrupt_manager.c: 57: {
  8239                           ;interrupt_manager.c: 58: i2c_driver_busCollisionISR();
  8240  0011  087D               	movf	_i2c_driver_busCollisionISR+1,w
  8241  0012  008A               	movwf	10
  8242  0013  087C               	movf	_i2c_driver_busCollisionISR,w
  8243  0014  000A               	callw
  8244  0015  3180               	pagesel	$
  8245                           
  8246                           ;interrupt_manager.c: 59: }
  8247  0016  2822               	goto	i1l168
  8248  0017                     i1l163:	
  8249                           
  8250                           ;interrupt_manager.c: 60: else if(PIE1bits.SSP1IE == 1 && PIR1bits.SSP1IF == 1)
  8251  0017  0021               	movlb	1	; select bank1
  8252  0018  1D90               	btfss	16,3	;volatile
  8253  0019  2822               	goto	i1l168
  8254  001A  0020               	movlb	0	; select bank0
  8255  001B  1D90               	btfss	16,3	;volatile
  8256  001C  2822               	goto	i1l168
  8257                           
  8258                           ;interrupt_manager.c: 61: {
  8259                           ;interrupt_manager.c: 62: i2c_driver_i2cISR();
  8260  001D  087B               	movf	_i2c_driver_i2cISR+1,w
  8261  001E  008A               	movwf	10
  8262  001F  087A               	movf	_i2c_driver_i2cISR,w
  8263  0020  000A               	callw
  8264  0021  3180               	pagesel	$
  8265  0022                     i1l168:	
  8266                           ;interrupt_manager.c: 69: else
  8267                           ;interrupt_manager.c: 70: {
  8268                           
  8269                           ;interrupt_manager.c: 67: }
  8270                           ;interrupt_manager.c: 68: }
  8271                           
  8272                           ;interrupt_manager.c: 64: else
  8273                           ;interrupt_manager.c: 65: {
  8274                           
  8275                           ;interrupt_manager.c: 63: }
  8276                           
  8277  0022  0875               	movf	??_INTERRUPT_InterruptManager,w
  8278  0023  0020               	movlb	0	; select bank0
  8279  0024  00FF               	movwf	127
  8280  0025  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  8281  0026  0009               	retfie
  8282  0027                     __end_of_INTERRUPT_InterruptManager:	
  8283                           
  8284                           	psect	text59
  8285  0465                     __ptext59:	
  8286 ;; *************** function i1_i2c_ISR *****************
  8287 ;; Defined at:
  8288 ;;		line 419 in file "mcc_generated_files/drivers/i2c_master.c"
  8289 ;; Parameters:    Size  Location     Type
  8290 ;;		None
  8291 ;; Auto vars:     Size  Location     Type
  8292 ;;		None
  8293 ;; Return value:  Size  Location     Type
  8294 ;;                  1    wreg      void 
  8295 ;; Registers used:
  8296 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8297 ;; Tracked objects:
  8298 ;;		On entry : 0/0
  8299 ;;		On exit  : 0/0
  8300 ;;		Unchanged: 0/0
  8301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8302 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8303 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8304 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8305 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8306 ;;Total ram usage:        1 bytes
  8307 ;; Hardware stack levels used:    1
  8308 ;; Hardware stack levels required when called:    4
  8309 ;; This function calls:
  8310 ;;		i1_do_I2C_DO_ACK
  8311 ;;		i1_do_I2C_DO_ADDRESS_NACK
  8312 ;;		i1_do_I2C_DO_NACK_RESTART
  8313 ;;		i1_do_I2C_DO_NACK_STOP
  8314 ;;		i1_do_I2C_IDLE
  8315 ;;		i1_do_I2C_RCEN
  8316 ;;		i1_do_I2C_RESET
  8317 ;;		i1_do_I2C_RX
  8318 ;;		i1_do_I2C_SEND_ADR_READ
  8319 ;;		i1_do_I2C_SEND_ADR_WRITE
  8320 ;;		i1_do_I2C_SEND_RESTART
  8321 ;;		i1_do_I2C_SEND_RESTART_READ
  8322 ;;		i1_do_I2C_SEND_RESTART_WRITE
  8323 ;;		i1_do_I2C_SEND_STOP
  8324 ;;		i1_do_I2C_TX
  8325 ;;		i1_do_I2C_TX_EMPTY
  8326 ;;		i1_i2c_driver_isNACK
  8327 ;;		i1_mssp_clearIRQ
  8328 ;; This function is called by:
  8329 ;; This function uses a non-reentrant model
  8330 ;;
  8331                           
  8332                           
  8333                           ;psect for function i1_i2c_ISR
  8334  0465                     i1_i2c_ISR:	
  8335  0465                     i1l4533:	
  8336                           ;incstack = 0
  8337                           ; Regs used in i1_i2c_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8338                           
  8339                           
  8340                           ;i2c_master.c: 421: mssp_clearIRQ();
  8341  0465  3187  270F  3184   	fcall	i1_mssp_clearIRQ
  8342                           
  8343                           ;i2c_master.c: 427: if(i2c_status.addressNACKCheck && i2c_driver_isNACK())
  8344  0468  0021               	movlb	1	; select bank1
  8345  0469  1DC0               	btfss	_i2c_status^(0+128),3
  8346  046A  2C75               	goto	i1l4541
  8347  046B  3185  25C1  3184   	fcall	i1_i2c_driver_isNACK
  8348  046E  1C03               	btfss	3,0
  8349  046F  2C75               	goto	i1l4541
  8350                           
  8351                           ;i2c_master.c: 428: {
  8352                           ;i2c_master.c: 429: i2c_status.state = I2C_ADDRESS_NACK;
  8353  0470  300F               	movlw	15
  8354  0471  00F4               	movwf	??i1_i2c_ISR
  8355  0472  0874               	movf	??i1_i2c_ISR,w
  8356  0473  0021               	movlb	1	; select bank1
  8357  0474  00C9               	movwf	(_i2c_status^(0+128)+9)
  8358  0475                     i1l4541:	
  8359                           
  8360                           ;i2c_master.c: 430: }
  8361                           ;i2c_master.c: 432: i2c_status.state = fsmStateTable[i2c_status.state]();
  8362  0475  0021               	movlb	1	; select bank1
  8363  0476  3549               	lslf	(_i2c_status^(0+128)+9),w
  8364  0477  3EA0               	addlw	(low (_fsmStateTable| 0))& (0+255)
  8365  0478  0086               	movwf	6
  8366  0479  0187               	clrf	7
  8367  047A  3F41               	moviw [1]fsr1
  8368  047B  008A               	movwf	10
  8369  047C  3F40               	moviw [0]fsr1
  8370  047D  000A               	callw
  8371  047E  3184               	pagesel	$
  8372  047F  00F4               	movwf	??i1_i2c_ISR
  8373  0480  0874               	movf	??i1_i2c_ISR,w
  8374  0481  0021               	movlb	1	; select bank1
  8375  0482  00C9               	movwf	(_i2c_status^(0+128)+9)
  8376  0483  0008               	return
  8377  0484                     __end_ofi1_i2c_ISR:	
  8378                           
  8379                           	psect	text60
  8380  070F                     __ptext60:	
  8381 ;; *************** function i1_mssp_clearIRQ *****************
  8382 ;; Defined at:
  8383 ;;		line 53 in file "mcc_generated_files/i2c_driver.c"
  8384 ;; Parameters:    Size  Location     Type
  8385 ;;		None
  8386 ;; Auto vars:     Size  Location     Type
  8387 ;;		None
  8388 ;; Return value:  Size  Location     Type
  8389 ;;                  1    wreg      void 
  8390 ;; Registers used:
  8391 ;;		None
  8392 ;; Tracked objects:
  8393 ;;		On entry : 0/0
  8394 ;;		On exit  : 0/0
  8395 ;;		Unchanged: 0/0
  8396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8397 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8398 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8399 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8400 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8401 ;;Total ram usage:        0 bytes
  8402 ;; Hardware stack levels used:    1
  8403 ;; This function calls:
  8404 ;;		Nothing
  8405 ;; This function is called by:
  8406 ;;		i1_i2c_ISR
  8407 ;; This function uses a non-reentrant model
  8408 ;;
  8409                           
  8410                           
  8411                           ;psect for function i1_mssp_clearIRQ
  8412  070F                     i1_mssp_clearIRQ:	
  8413                           
  8414                           ;i2c_driver.c: 55: PIR1bits.SSP1IF = 0;
  8415                           
  8416                           ;incstack = 0
  8417                           ; Regs used in i1_mssp_clearIRQ: []
  8418  070F  0020               	movlb	0	; select bank0
  8419  0710  1190               	bcf	16,3	;volatile
  8420  0711  0008               	return
  8421  0712                     __end_ofi1_mssp_clearIRQ:	
  8422                           
  8423                           	psect	text61
  8424  0284                     __ptext61:	
  8425 ;; *************** function i1_do_I2C_RX *****************
  8426 ;; Defined at:
  8427 ;;		line 357 in file "mcc_generated_files/drivers/i2c_master.c"
  8428 ;; Parameters:    Size  Location     Type
  8429 ;;		None
  8430 ;; Auto vars:     Size  Location     Type
  8431 ;;		None
  8432 ;; Return value:  Size  Location     Type
  8433 ;;                  1    wreg      enum E12337
  8434 ;; Registers used:
  8435 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8436 ;; Tracked objects:
  8437 ;;		On entry : 0/0
  8438 ;;		On exit  : 0/0
  8439 ;;		Unchanged: 0/0
  8440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8441 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8442 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8443 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8444 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8445 ;;Total ram usage:        1 bytes
  8446 ;; Hardware stack levels used:    1
  8447 ;; Hardware stack levels required when called:    3
  8448 ;; This function calls:
  8449 ;;		Absolute function
  8450 ;;		i1_do_I2C_DO_NACK_RESTART
  8451 ;;		i1_do_I2C_DO_NACK_STOP
  8452 ;;		i1_i2c_driver_getRXData
  8453 ;;		i1_i2c_driver_sendACK
  8454 ;;		i1_i2c_restartWrite
  8455 ;;		i1_rd1RegCompleteHandler
  8456 ;;		i1_rd2RegCompleteHandler
  8457 ;;		i1_rdBlkRegCompleteHandler
  8458 ;;		i1_returnReset
  8459 ;;		i1_returnStop
  8460 ;;		i1_wr1RegCompleteHandler
  8461 ;;		i1_wr2RegCompleteHandler
  8462 ;; This function is called by:
  8463 ;; This function uses a non-reentrant model
  8464 ;;
  8465                           
  8466                           
  8467                           ;psect for function i1_do_I2C_RX
  8468  0284                     i1_do_I2C_RX:	
  8469  0284                     i1l4471:	
  8470                           ;incstack = 0
  8471                           ; Regs used in i1_do_I2C_RX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8472                           
  8473                           
  8474                           ;i2c_master.c: 359: *i2c_status.data_ptr++ = i2c_driver_getRXData();
  8475  0284  3187  2715  3182   	fcall	i1_i2c_driver_getRXData
  8476  0287  00F0               	movwf	??i1_do_I2C_RX
  8477  0288  0021               	movlb	1	; select bank1
  8478  0289  0842               	movf	(low ((_i2c_status| 0+2)))^(0+128),w
  8479  028A  0086               	movwf	6
  8480  028B  0187               	clrf	7
  8481  028C  0870               	movf	??i1_do_I2C_RX,w
  8482  028D  0081               	movwf	1
  8483  028E  3001               	movlw	1
  8484  028F  00F0               	movwf	??i1_do_I2C_RX
  8485  0290  0870               	movf	??i1_do_I2C_RX,w
  8486  0291  07C2               	addwf	(low ((_i2c_status| 0+2)))^(0+128),f
  8487                           
  8488                           ;i2c_master.c: 360: if(--i2c_status.data_length)
  8489  0292  3001               	movlw	1
  8490  0293  02C3               	subwf	(_i2c_status^(0+128)+3),f
  8491  0294  3000               	movlw	0
  8492  0295  3BC4               	subwfb	((_i2c_status+1)^(0+128)+3),f
  8493  0296  0843               	movf	(_i2c_status^(0+128)+3),w
  8494  0297  0444               	iorwf	((_i2c_status+1)^(0+128)+3),w
  8495  0298  1903               	btfsc	3,2
  8496  0299  2A9E               	goto	i1l431
  8497                           
  8498                           ;i2c_master.c: 361: {
  8499                           ;i2c_master.c: 362: i2c_driver_sendACK();
  8500  029A  3186  26F3         	fcall	i1_i2c_driver_sendACK
  8501                           
  8502                           ;i2c_master.c: 363: return I2C_RCEN;
  8503  029C  3005               	movlw	5
  8504                           
  8505                           ;i2c_master.c: 364: }
  8506  029D  0008               	return
  8507  029E                     i1l431:	
  8508                           
  8509                           ;i2c_master.c: 365: else
  8510                           ;i2c_master.c: 366: {
  8511                           ;i2c_master.c: 367: i2c_status.bufferFree = 1;
  8512  029E  1540               	bsf	_i2c_status^(0+128),2
  8513                           
  8514                           ;i2c_master.c: 368: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
  8515  029F  2AA6               	goto	i1l4495
  8516  02A0                     i1l4485:	
  8517                           ;i2c_master.c: 369: {
  8518                           ;i2c_master.c: 370: case i2c_restart_write:
  8519                           
  8520                           
  8521                           ;i2c_master.c: 371: case i2c_restart_read:
  8522                           ;i2c_master.c: 372: return do_I2C_DO_NACK_RESTART();
  8523  02A0  3186  26D3         	fcall	i1_do_I2C_DO_NACK_RESTART
  8524  02A2  0008               	return
  8525  02A3                     i1l4489:	
  8526                           ;i2c_master.c: 374: case i2c_continue:
  8527                           
  8528                           ;i2c_master.c: 373: default:
  8529                           
  8530                           
  8531                           ;i2c_master.c: 375: case i2c_stop:
  8532                           ;i2c_master.c: 376: return do_I2C_DO_NACK_STOP();
  8533  02A3  3186  26D7         	fcall	i1_do_I2C_DO_NACK_STOP
  8534                           
  8535                           ;i2c_master.c: 377: }
  8536  02A5  0008               	return
  8537  02A6                     i1l4495:	
  8538  02A6  0021               	movlb	1	; select bank1
  8539  02A7  0857               	movf	(low ((_i2c_status| 0+23)))^(0+128),w
  8540  02A8  00F0               	movwf	??i1_do_I2C_RX
  8541  02A9  0870               	movf	??i1_do_I2C_RX,w
  8542  02AA  00F9               	movwf	i1returnStop@p
  8543  02AB  300B               	movlw	11
  8544  02AC  3EC0               	addlw	(low (_i2c_status| 0))& (0+255)
  8545  02AD  0086               	movwf	6
  8546  02AE  0187               	clrf	7
  8547  02AF  3F41               	moviw [1]fsr1
  8548  02B0  008A               	movwf	10
  8549  02B1  3F40               	moviw [0]fsr1
  8550  02B2  000A               	callw
  8551  02B3  3182               	pagesel	$
  8552                           
  8553                           ; Switch size 1, requested type "space"
  8554                           ; Number of cases is 4, Range of values is 1 to 4
  8555                           ; switch strategies available:
  8556                           ; Name         Instructions Cycles
  8557                           ; simple_byte           13     7 (average)
  8558                           ; direct_byte           17     9 (fixed)
  8559                           ; jumptable            263     9 (fixed)
  8560                           ;	Chosen strategy is simple_byte
  8561  02B4  3A01               	xorlw	1	; case 1
  8562  02B5  1903               	skipnz
  8563  02B6  2AA3               	goto	i1l4489
  8564  02B7  3A03               	xorlw	3	; case 2
  8565  02B8  1903               	skipnz
  8566  02B9  2AA0               	goto	i1l4485
  8567  02BA  3A01               	xorlw	1	; case 3
  8568  02BB  1903               	skipnz
  8569  02BC  2AA0               	goto	i1l4485
  8570  02BD  3A07               	xorlw	7	; case 4
  8571  02BE  1903               	skipnz
  8572  02BF  2AA3               	goto	i1l4489
  8573  02C0  2AA3               	goto	i1l4489
  8574  02C1  0008               	return
  8575  02C2                     __end_ofi1_do_I2C_RX:	
  8576                           
  8577                           	psect	text62
  8578  01F4                     __ptext62:	
  8579 ;; *************** function i1_do_I2C_TX *****************
  8580 ;; Defined at:
  8581 ;;		line 333 in file "mcc_generated_files/drivers/i2c_master.c"
  8582 ;; Parameters:    Size  Location     Type
  8583 ;;		None
  8584 ;; Auto vars:     Size  Location     Type
  8585 ;;		None
  8586 ;; Return value:  Size  Location     Type
  8587 ;;                  1    wreg      enum E12337
  8588 ;; Registers used:
  8589 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8590 ;; Tracked objects:
  8591 ;;		On entry : 0/0
  8592 ;;		On exit  : 0/0
  8593 ;;		Unchanged: 0/0
  8594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8595 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8596 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8597 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8598 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8599 ;;Total ram usage:        3 bytes
  8600 ;; Hardware stack levels used:    1
  8601 ;; Hardware stack levels required when called:    3
  8602 ;; This function calls:
  8603 ;;		Absolute function
  8604 ;;		i1_do_I2C_SEND_RESTART_READ
  8605 ;;		i1_do_I2C_SEND_RESTART_WRITE
  8606 ;;		i1_do_I2C_SEND_STOP
  8607 ;;		i1_i2c_driver_TXData
  8608 ;;		i1_i2c_driver_isNACK
  8609 ;;		i1_i2c_restartWrite
  8610 ;;		i1_rd1RegCompleteHandler
  8611 ;;		i1_rd2RegCompleteHandler
  8612 ;;		i1_rdBlkRegCompleteHandler
  8613 ;;		i1_returnReset
  8614 ;;		i1_returnStop
  8615 ;;		i1_wr1RegCompleteHandler
  8616 ;;		i1_wr2RegCompleteHandler
  8617 ;; This function is called by:
  8618 ;; This function uses a non-reentrant model
  8619 ;;
  8620                           
  8621                           
  8622                           ;psect for function i1_do_I2C_TX
  8623  01F4                     i1_do_I2C_TX:	
  8624  01F4                     i1l4441:	
  8625                           ;incstack = 0
  8626                           ; Regs used in i1_do_I2C_TX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8627                           
  8628                           
  8629                           ;i2c_master.c: 335: if(i2c_driver_isNACK())
  8630  01F4  3185  25C1  3181   	fcall	i1_i2c_driver_isNACK
  8631  01F7  1803               	btfsc	3,0
  8632  01F8  2A03               	goto	i1l4459
  8633  01F9  2A1F               	goto	i1l415
  8634  01FA                     i1l4445:	
  8635                           ;i2c_master.c: 338: {
  8636                           ;i2c_master.c: 339: case i2c_restart_read:
  8637                           
  8638                           ;i2c_master.c: 336: {
  8639                           ;i2c_master.c: 337: switch(i2c_status.callbackTable[i2c_dataNACK](i2c_status.callbackPay
      +                          load[i2c_dataNACK]))
  8640                           
  8641                           
  8642                           ;i2c_master.c: 340: return do_I2C_SEND_RESTART_READ();
  8643  01FA  3186  26EB         	fcall	i1_do_I2C_SEND_RESTART_READ
  8644  01FC  0008               	return
  8645  01FD                     i1l4449:	
  8646                           ;i2c_master.c: 341: case i2c_restart_write:
  8647                           
  8648                           
  8649                           ;i2c_master.c: 342: return do_I2C_SEND_RESTART_WRITE();
  8650  01FD  3186  26E7         	fcall	i1_do_I2C_SEND_RESTART_WRITE
  8651  01FF  0008               	return
  8652  0200                     i1l4453:	
  8653                           ;i2c_master.c: 344: case i2c_continue:
  8654                           
  8655                           ;i2c_master.c: 343: default:
  8656                           
  8657                           
  8658                           ;i2c_master.c: 345: case i2c_stop:
  8659                           ;i2c_master.c: 346: return do_I2C_SEND_STOP();
  8660  0200  3186  26DF         	fcall	i1_do_I2C_SEND_STOP
  8661                           
  8662                           ;i2c_master.c: 347: }
  8663  0202  0008               	return
  8664  0203                     i1l4459:	
  8665  0203  0021               	movlb	1	; select bank1
  8666  0204  085A               	movf	(low ((_i2c_status| 0+26)))^(0+128),w
  8667  0205  00F1               	movwf	??i1_do_I2C_TX
  8668  0206  0871               	movf	??i1_do_I2C_TX,w
  8669  0207  00F9               	movwf	i1returnStop@p
  8670  0208  3011               	movlw	17
  8671  0209  3EC0               	addlw	(low (_i2c_status| 0))& (0+255)
  8672  020A  0086               	movwf	6
  8673  020B  0187               	clrf	7
  8674  020C  3F41               	moviw [1]fsr1
  8675  020D  008A               	movwf	10
  8676  020E  3F40               	moviw [0]fsr1
  8677  020F  000A               	callw
  8678  0210  3181               	pagesel	$
  8679                           
  8680                           ; Switch size 1, requested type "space"
  8681                           ; Number of cases is 4, Range of values is 1 to 4
  8682                           ; switch strategies available:
  8683                           ; Name         Instructions Cycles
  8684                           ; simple_byte           13     7 (average)
  8685                           ; direct_byte           17     9 (fixed)
  8686                           ; jumptable            263     9 (fixed)
  8687                           ;	Chosen strategy is simple_byte
  8688  0211  3A01               	xorlw	1	; case 1
  8689  0212  1903               	skipnz
  8690  0213  2A00               	goto	i1l4453
  8691  0214  3A03               	xorlw	3	; case 2
  8692  0215  1903               	skipnz
  8693  0216  29FA               	goto	i1l4445
  8694  0217  3A01               	xorlw	1	; case 3
  8695  0218  1903               	skipnz
  8696  0219  29FD               	goto	i1l4449
  8697  021A  3A07               	xorlw	7	; case 4
  8698  021B  1903               	skipnz
  8699  021C  2A00               	goto	i1l4453
  8700  021D  2A00               	goto	i1l4453
  8701                           
  8702                           ;i2c_master.c: 348: }
  8703  021E  0008               	return
  8704  021F                     i1l415:	
  8705                           
  8706                           ;i2c_master.c: 349: else
  8707                           ;i2c_master.c: 350: {
  8708                           ;i2c_master.c: 351: i2c_status.addressNACKCheck = 0;
  8709  021F  0021               	movlb	1	; select bank1
  8710  0220  11C0               	bcf	_i2c_status^(0+128),3
  8711                           
  8712                           ;i2c_master.c: 352: i2c_driver_TXData(*i2c_status.data_ptr++);
  8713  0221  3002               	movlw	2
  8714  0222  3EC0               	addlw	(low (_i2c_status| 0))& (0+255)
  8715  0223  0086               	movwf	6
  8716  0224  0187               	clrf	7
  8717  0225  3F40               	moviw [0]fsr1
  8718  0226  0084               	movwf	4
  8719  0227  0185               	clrf	5
  8720  0228  0A81               	incf	1,f
  8721  0229  0800               	movf	0,w
  8722  022A  3186  26C2  3181   	fcall	i1_i2c_driver_TXData
  8723                           
  8724                           ;i2c_master.c: 353: return (--i2c_status.data_length)?I2C_TX:I2C_TX_EMPTY;
  8725  022D  3001               	movlw	1
  8726  022E  0021               	movlb	1	; select bank1
  8727  022F  02C3               	subwf	(_i2c_status^(0+128)+3),f
  8728  0230  3000               	movlw	0
  8729  0231  3BC4               	subwfb	((_i2c_status+1)^(0+128)+3),f
  8730  0232  0843               	movf	(_i2c_status^(0+128)+3),w
  8731  0233  0444               	iorwf	((_i2c_status+1)^(0+128)+3),w
  8732  0234  1D03               	btfss	3,2
  8733  0235  2A38               	goto	i1l4467
  8734  0236  3006               	movlw	6
  8735  0237  2A39               	goto	L2
  8736  0238                     i1l4467:	
  8737  0238  3003               	movlw	3
  8738  0239                     L2:	
  8739  0239  00F2               	movwf	i1_do_I2C_TX$754
  8740  023A  3000               	movlw	0
  8741  023B  00F3               	movwf	i1_do_I2C_TX$754+1
  8742  023C  0872               	movf	i1_do_I2C_TX$754,w
  8743  023D  0008               	return
  8744  023E                     __end_ofi1_do_I2C_TX:	
  8745                           
  8746                           	psect	text63
  8747  0422                     __ptext63:	
  8748 ;; *************** function i1_do_I2C_DO_ADDRESS_NACK *****************
  8749 ;; Defined at:
  8750 ;;		line 319 in file "mcc_generated_files/drivers/i2c_master.c"
  8751 ;; Parameters:    Size  Location     Type
  8752 ;;		None
  8753 ;; Auto vars:     Size  Location     Type
  8754 ;;		None
  8755 ;; Return value:  Size  Location     Type
  8756 ;;                  1    wreg      enum E12337
  8757 ;; Registers used:
  8758 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8759 ;; Tracked objects:
  8760 ;;		On entry : 0/0
  8761 ;;		On exit  : 0/0
  8762 ;;		Unchanged: 0/0
  8763 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8764 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8765 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8766 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8767 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8768 ;;Total ram usage:        1 bytes
  8769 ;; Hardware stack levels used:    1
  8770 ;; Hardware stack levels required when called:    3
  8771 ;; This function calls:
  8772 ;;		Absolute function
  8773 ;;		i1_do_I2C_SEND_RESTART
  8774 ;;		i1_do_I2C_SEND_STOP
  8775 ;;		i1_i2c_restartWrite
  8776 ;;		i1_rd1RegCompleteHandler
  8777 ;;		i1_rd2RegCompleteHandler
  8778 ;;		i1_rdBlkRegCompleteHandler
  8779 ;;		i1_returnReset
  8780 ;;		i1_returnStop
  8781 ;;		i1_wr1RegCompleteHandler
  8782 ;;		i1_wr2RegCompleteHandler
  8783 ;; This function is called by:
  8784 ;; This function uses a non-reentrant model
  8785 ;;
  8786                           
  8787                           
  8788                           ;psect for function i1_do_I2C_DO_ADDRESS_NACK
  8789  0422                     i1_do_I2C_DO_ADDRESS_NACK:	
  8790  0422                     i1l4425:	
  8791                           ;incstack = 0
  8792                           ; Regs used in i1_do_I2C_DO_ADDRESS_NACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8793                           
  8794                           
  8795                           ;i2c_master.c: 321: i2c_status.addressNACKCheck = 0;
  8796  0422  0021               	movlb	1	; select bank1
  8797  0423  11C0               	bcf	_i2c_status^(0+128),3
  8798                           
  8799                           ;i2c_master.c: 322: i2c_status.error = I2C_FAIL;
  8800  0424  3002               	movlw	2
  8801  0425  00F0               	movwf	??i1_do_I2C_DO_ADDRESS_NACK
  8802  0426  0870               	movf	??i1_do_I2C_DO_ADDRESS_NACK,w
  8803  0427  00CA               	movwf	(_i2c_status^(0+128)+10)
  8804                           
  8805                           ;i2c_master.c: 323: switch(i2c_status.callbackTable[i2c_addressNACK](i2c_status.callback
      +                          Payload[i2c_addressNACK]))
  8806  0428  2C2F               	goto	i1l4439
  8807  0429                     i1l4429:	
  8808                           ;i2c_master.c: 324: {
  8809                           ;i2c_master.c: 325: case i2c_restart_read:
  8810                           
  8811                           
  8812                           ;i2c_master.c: 326: case i2c_restart_write:
  8813                           ;i2c_master.c: 327: return do_I2C_SEND_RESTART();
  8814  0429  3186  26E3         	fcall	i1_do_I2C_SEND_RESTART
  8815  042B  0008               	return
  8816  042C                     i1l4433:	
  8817                           ;i2c_master.c: 328: default:
  8818                           
  8819                           
  8820                           ;i2c_master.c: 329: return do_I2C_SEND_STOP();
  8821  042C  3186  26DF         	fcall	i1_do_I2C_SEND_STOP
  8822                           
  8823                           ;i2c_master.c: 330: }
  8824  042E  0008               	return
  8825  042F                     i1l4439:	
  8826  042F  0021               	movlb	1	; select bank1
  8827  0430  0859               	movf	(low ((_i2c_status| 0+25)))^(0+128),w
  8828  0431  00F0               	movwf	??i1_do_I2C_DO_ADDRESS_NACK
  8829  0432  0870               	movf	??i1_do_I2C_DO_ADDRESS_NACK,w
  8830  0433  00F9               	movwf	i1returnStop@p
  8831  0434  300F               	movlw	15
  8832  0435  3EC0               	addlw	(low (_i2c_status| 0))& (0+255)
  8833  0436  0086               	movwf	6
  8834  0437  0187               	clrf	7
  8835  0438  3F41               	moviw [1]fsr1
  8836  0439  008A               	movwf	10
  8837  043A  3F40               	moviw [0]fsr1
  8838  043B  000A               	callw
  8839  043C  3184               	pagesel	$
  8840                           
  8841                           ; Switch size 1, requested type "space"
  8842                           ; Number of cases is 2, Range of values is 2 to 3
  8843                           ; switch strategies available:
  8844                           ; Name         Instructions Cycles
  8845                           ; simple_byte            7     4 (average)
  8846                           ; direct_byte           13     9 (fixed)
  8847                           ; jumptable            263     9 (fixed)
  8848                           ;	Chosen strategy is simple_byte
  8849  043D  3A02               	xorlw	2	; case 2
  8850  043E  1903               	skipnz
  8851  043F  2C29               	goto	i1l4429
  8852  0440  3A01               	xorlw	1	; case 3
  8853  0441  1903               	skipnz
  8854  0442  2C29               	goto	i1l4429
  8855  0443  2C2C               	goto	i1l4433
  8856  0444  0008               	return
  8857  0445                     __end_ofi1_do_I2C_DO_ADDRESS_NACK:	
  8858                           
  8859                           	psect	text64
  8860  06D3                     __ptext64:	
  8861 ;; *************** function i1_do_I2C_DO_NACK_RESTART *****************
  8862 ;; Defined at:
  8863 ;;		line 311 in file "mcc_generated_files/drivers/i2c_master.c"
  8864 ;; Parameters:    Size  Location     Type
  8865 ;;		None
  8866 ;; Auto vars:     Size  Location     Type
  8867 ;;		None
  8868 ;; Return value:  Size  Location     Type
  8869 ;;                  1    wreg      enum E12337
  8870 ;; Registers used:
  8871 ;;		wreg, status,2, status,0, pclath, cstack
  8872 ;; Tracked objects:
  8873 ;;		On entry : 0/0
  8874 ;;		On exit  : 0/0
  8875 ;;		Unchanged: 0/0
  8876 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8877 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8878 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8879 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8880 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8881 ;;Total ram usage:        0 bytes
  8882 ;; Hardware stack levels used:    1
  8883 ;; Hardware stack levels required when called:    1
  8884 ;; This function calls:
  8885 ;;		i1_i2c_driver_sendNACK
  8886 ;; This function is called by:
  8887 ;;		i1_do_I2C_RX
  8888 ;; This function uses a non-reentrant model
  8889 ;;
  8890                           
  8891                           
  8892                           ;psect for function i1_do_I2C_DO_NACK_RESTART
  8893  06D3                     i1_do_I2C_DO_NACK_RESTART:	
  8894  06D3                     i1l2389:	
  8895                           ;incstack = 0
  8896                           ; Regs used in i1_do_I2C_DO_NACK_RESTART: [wreg+status,2+status,0+pclath+cstack]
  8897                           
  8898                           
  8899                           ;i2c_master.c: 313: i2c_driver_sendNACK();
  8900  06D3  3186  26EF         	fcall	i1_i2c_driver_sendNACK
  8901                           
  8902                           ;i2c_master.c: 314: return I2C_SEND_RESTART;
  8903  06D5  3009               	movlw	9
  8904  06D6  0008               	return
  8905  06D7                     __end_ofi1_do_I2C_DO_NACK_RESTART:	
  8906                           
  8907                           	psect	text65
  8908  06D7                     __ptext65:	
  8909 ;; *************** function i1_do_I2C_DO_NACK_STOP *****************
  8910 ;; Defined at:
  8911 ;;		line 305 in file "mcc_generated_files/drivers/i2c_master.c"
  8912 ;; Parameters:    Size  Location     Type
  8913 ;;		None
  8914 ;; Auto vars:     Size  Location     Type
  8915 ;;		None
  8916 ;; Return value:  Size  Location     Type
  8917 ;;                  1    wreg      enum E12337
  8918 ;; Registers used:
  8919 ;;		wreg, status,2, status,0, pclath, cstack
  8920 ;; Tracked objects:
  8921 ;;		On entry : 0/0
  8922 ;;		On exit  : 0/0
  8923 ;;		Unchanged: 0/0
  8924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8925 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8926 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8927 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8928 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8929 ;;Total ram usage:        0 bytes
  8930 ;; Hardware stack levels used:    1
  8931 ;; Hardware stack levels required when called:    1
  8932 ;; This function calls:
  8933 ;;		i1_i2c_driver_sendNACK
  8934 ;; This function is called by:
  8935 ;;		i1_do_I2C_RX
  8936 ;; This function uses a non-reentrant model
  8937 ;;
  8938                           
  8939                           
  8940                           ;psect for function i1_do_I2C_DO_NACK_STOP
  8941  06D7                     i1_do_I2C_DO_NACK_STOP:	
  8942  06D7                     i1l2383:	
  8943                           ;incstack = 0
  8944                           ; Regs used in i1_do_I2C_DO_NACK_STOP: [wreg+status,2+status,0+pclath+cstack]
  8945                           
  8946                           
  8947                           ;i2c_master.c: 307: i2c_driver_sendNACK();
  8948  06D7  3186  26EF         	fcall	i1_i2c_driver_sendNACK
  8949                           
  8950                           ;i2c_master.c: 308: return I2C_SEND_STOP;
  8951  06D9  300A               	movlw	10
  8952  06DA  0008               	return
  8953  06DB                     __end_ofi1_do_I2C_DO_NACK_STOP:	
  8954                           
  8955                           	psect	text66
  8956  06DB                     __ptext66:	
  8957 ;; *************** function i1_do_I2C_DO_ACK *****************
  8958 ;; Defined at:
  8959 ;;		line 299 in file "mcc_generated_files/drivers/i2c_master.c"
  8960 ;; Parameters:    Size  Location     Type
  8961 ;;		None
  8962 ;; Auto vars:     Size  Location     Type
  8963 ;;		None
  8964 ;; Return value:  Size  Location     Type
  8965 ;;                  1    wreg      enum E12337
  8966 ;; Registers used:
  8967 ;;		wreg, status,2, status,0, pclath, cstack
  8968 ;; Tracked objects:
  8969 ;;		On entry : 0/0
  8970 ;;		On exit  : 0/0
  8971 ;;		Unchanged: 0/0
  8972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8973 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8974 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8975 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8976 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8977 ;;Total ram usage:        0 bytes
  8978 ;; Hardware stack levels used:    1
  8979 ;; Hardware stack levels required when called:    1
  8980 ;; This function calls:
  8981 ;;		i1_i2c_driver_sendACK
  8982 ;; This function is called by:
  8983 ;; This function uses a non-reentrant model
  8984 ;;
  8985                           
  8986                           
  8987                           ;psect for function i1_do_I2C_DO_ACK
  8988  06DB                     i1_do_I2C_DO_ACK:	
  8989  06DB                     i1l2573:	
  8990                           ;incstack = 0
  8991                           ; Regs used in i1_do_I2C_DO_ACK: [wreg+status,2+status,0+pclath+cstack]
  8992                           
  8993                           
  8994                           ;i2c_master.c: 301: i2c_driver_sendACK();
  8995  06DB  3186  26F3         	fcall	i1_i2c_driver_sendACK
  8996                           
  8997                           ;i2c_master.c: 302: return I2C_RCEN;
  8998  06DD  3005               	movlw	5
  8999  06DE  0008               	return
  9000  06DF                     __end_ofi1_do_I2C_DO_ACK:	
  9001                           
  9002                           	psect	text67
  9003  06B7                     __ptext67:	
  9004 ;; *************** function i1_do_I2C_RCEN *****************
  9005 ;; Defined at:
  9006 ;;		line 292 in file "mcc_generated_files/drivers/i2c_master.c"
  9007 ;; Parameters:    Size  Location     Type
  9008 ;;		None
  9009 ;; Auto vars:     Size  Location     Type
  9010 ;;		None
  9011 ;; Return value:  Size  Location     Type
  9012 ;;                  1    wreg      enum E12337
  9013 ;; Registers used:
  9014 ;;		wreg, status,2, status,0, pclath, cstack
  9015 ;; Tracked objects:
  9016 ;;		On entry : 0/0
  9017 ;;		On exit  : 0/0
  9018 ;;		Unchanged: 0/0
  9019 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9020 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9021 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9022 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9023 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9024 ;;Total ram usage:        0 bytes
  9025 ;; Hardware stack levels used:    1
  9026 ;; Hardware stack levels required when called:    1
  9027 ;; This function calls:
  9028 ;;		i1_i2c_driver_startRX
  9029 ;; This function is called by:
  9030 ;; This function uses a non-reentrant model
  9031 ;;
  9032                           
  9033                           
  9034                           ;psect for function i1_do_I2C_RCEN
  9035  06B7                     i1_do_I2C_RCEN:	
  9036  06B7                     i1l2565:	
  9037                           ;incstack = 0
  9038                           ; Regs used in i1_do_I2C_RCEN: [wreg+status,2+status,0+pclath+cstack]
  9039                           
  9040                           
  9041                           ;i2c_master.c: 294: i2c_status.addressNACKCheck = 0;
  9042  06B7  0021               	movlb	1	; select bank1
  9043  06B8  11C0               	bcf	_i2c_status^(0+128),3
  9044                           
  9045                           ;i2c_master.c: 295: i2c_driver_startRX();
  9046  06B9  3187  2718         	fcall	i1_i2c_driver_startRX
  9047                           
  9048                           ;i2c_master.c: 296: return I2C_RX;
  9049  06BB  3004               	movlw	4
  9050  06BC  0008               	return
  9051  06BD                     __end_ofi1_do_I2C_RCEN:	
  9052                           
  9053                           	psect	text68
  9054  0673                     __ptext68:	
  9055 ;; *************** function i1_do_I2C_SEND_ADR_WRITE *****************
  9056 ;; Defined at:
  9057 ;;		line 285 in file "mcc_generated_files/drivers/i2c_master.c"
  9058 ;; Parameters:    Size  Location     Type
  9059 ;;		None
  9060 ;; Auto vars:     Size  Location     Type
  9061 ;;		None
  9062 ;; Return value:  Size  Location     Type
  9063 ;;                  1    wreg      enum E12337
  9064 ;; Registers used:
  9065 ;;		wreg, status,2, status,0, pclath, cstack
  9066 ;; Tracked objects:
  9067 ;;		On entry : 0/0
  9068 ;;		On exit  : 0/0
  9069 ;;		Unchanged: 0/0
  9070 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9071 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9072 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9073 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9074 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9075 ;;Total ram usage:        0 bytes
  9076 ;; Hardware stack levels used:    1
  9077 ;; Hardware stack levels required when called:    1
  9078 ;; This function calls:
  9079 ;;		i1_i2c_driver_TXData
  9080 ;; This function is called by:
  9081 ;; This function uses a non-reentrant model
  9082 ;;
  9083                           
  9084                           
  9085                           ;psect for function i1_do_I2C_SEND_ADR_WRITE
  9086  0673                     i1_do_I2C_SEND_ADR_WRITE:	
  9087  0673                     i1l2557:	
  9088                           ;incstack = 0
  9089                           ; Regs used in i1_do_I2C_SEND_ADR_WRITE: [wreg+status,2+status,0+pclath+cstack]
  9090                           
  9091                           
  9092                           ;i2c_master.c: 287: i2c_status.addressNACKCheck = 1;
  9093  0673  0021               	movlb	1	; select bank1
  9094  0674  15C0               	bsf	_i2c_status^(0+128),3
  9095                           
  9096                           ;i2c_master.c: 288: i2c_driver_TXData(i2c_status.address << 1);
  9097  0675  3541               	lslf	(_i2c_status^(0+128)+1),w
  9098  0676  3186  26C2         	fcall	i1_i2c_driver_TXData
  9099                           
  9100                           ;i2c_master.c: 289: return I2C_TX;
  9101  0678  3003               	movlw	3
  9102  0679  0008               	return
  9103  067A                     __end_ofi1_do_I2C_SEND_ADR_WRITE:	
  9104                           
  9105                           	psect	text69
  9106  0664                     __ptext69:	
  9107 ;; *************** function i1_do_I2C_SEND_ADR_READ *****************
  9108 ;; Defined at:
  9109 ;;		line 278 in file "mcc_generated_files/drivers/i2c_master.c"
  9110 ;; Parameters:    Size  Location     Type
  9111 ;;		None
  9112 ;; Auto vars:     Size  Location     Type
  9113 ;;		None
  9114 ;; Return value:  Size  Location     Type
  9115 ;;                  1    wreg      enum E12337
  9116 ;; Registers used:
  9117 ;;		wreg, status,2, status,0, pclath, cstack
  9118 ;; Tracked objects:
  9119 ;;		On entry : 0/0
  9120 ;;		On exit  : 0/0
  9121 ;;		Unchanged: 0/0
  9122 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9123 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9124 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9125 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9126 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9127 ;;Total ram usage:        0 bytes
  9128 ;; Hardware stack levels used:    1
  9129 ;; Hardware stack levels required when called:    1
  9130 ;; This function calls:
  9131 ;;		i1_i2c_driver_TXData
  9132 ;; This function is called by:
  9133 ;; This function uses a non-reentrant model
  9134 ;;
  9135                           
  9136                           
  9137                           ;psect for function i1_do_I2C_SEND_ADR_READ
  9138  0664                     i1_do_I2C_SEND_ADR_READ:	
  9139  0664                     i1l2549:	
  9140                           ;incstack = 0
  9141                           ; Regs used in i1_do_I2C_SEND_ADR_READ: [wreg+status,2+status,0+pclath+cstack]
  9142                           
  9143                           
  9144                           ;i2c_master.c: 280: i2c_status.addressNACKCheck = 1;
  9145  0664  0021               	movlb	1	; select bank1
  9146  0665  15C0               	bsf	_i2c_status^(0+128),3
  9147                           
  9148                           ;i2c_master.c: 281: i2c_driver_TXData(i2c_status.address << 1 | 1);
  9149  0666  1403               	setc
  9150  0667  0D41               	rlf	(_i2c_status^(0+128)+1),w
  9151  0668  3186  26C2         	fcall	i1_i2c_driver_TXData
  9152                           
  9153                           ;i2c_master.c: 282: return I2C_RCEN;
  9154  066A  3005               	movlw	5
  9155  066B  0008               	return
  9156  066C                     __end_ofi1_do_I2C_SEND_ADR_READ:	
  9157                           
  9158                           	psect	text70
  9159  06DF                     __ptext70:	
  9160 ;; *************** function i1_do_I2C_SEND_STOP *****************
  9161 ;; Defined at:
  9162 ;;		line 272 in file "mcc_generated_files/drivers/i2c_master.c"
  9163 ;; Parameters:    Size  Location     Type
  9164 ;;		None
  9165 ;; Auto vars:     Size  Location     Type
  9166 ;;		None
  9167 ;; Return value:  Size  Location     Type
  9168 ;;                  1    wreg      enum E12337
  9169 ;; Registers used:
  9170 ;;		wreg, status,2, status,0, pclath, cstack
  9171 ;; Tracked objects:
  9172 ;;		On entry : 0/0
  9173 ;;		On exit  : 0/0
  9174 ;;		Unchanged: 0/0
  9175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9176 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9177 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9178 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9179 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9180 ;;Total ram usage:        0 bytes
  9181 ;; Hardware stack levels used:    1
  9182 ;; Hardware stack levels required when called:    1
  9183 ;; This function calls:
  9184 ;;		i1_i2c_driver_stop
  9185 ;; This function is called by:
  9186 ;;		i1_do_I2C_DO_ADDRESS_NACK
  9187 ;;		i1_do_I2C_TX
  9188 ;;		i1_do_I2C_TX_EMPTY
  9189 ;; This function uses a non-reentrant model
  9190 ;;
  9191                           
  9192                           
  9193                           ;psect for function i1_do_I2C_SEND_STOP
  9194  06DF                     i1_do_I2C_SEND_STOP:	
  9195  06DF                     i1l2377:	
  9196                           ;incstack = 0
  9197                           ; Regs used in i1_do_I2C_SEND_STOP: [wreg+status,2+status,0+pclath+cstack]
  9198                           
  9199                           
  9200                           ;i2c_master.c: 274: i2c_driver_stop();
  9201  06DF  3187  271B         	fcall	i1_i2c_driver_stop
  9202                           
  9203                           ;i2c_master.c: 275: return I2C_IDLE;
  9204  06E1  3000               	movlw	0
  9205  06E2  0008               	return
  9206  06E3                     __end_ofi1_do_I2C_SEND_STOP:	
  9207                           
  9208                           	psect	text71
  9209  06E3                     __ptext71:	
  9210 ;; *************** function i1_do_I2C_SEND_RESTART *****************
  9211 ;; Defined at:
  9212 ;;		line 266 in file "mcc_generated_files/drivers/i2c_master.c"
  9213 ;; Parameters:    Size  Location     Type
  9214 ;;		None
  9215 ;; Auto vars:     Size  Location     Type
  9216 ;;		None
  9217 ;; Return value:  Size  Location     Type
  9218 ;;                  1    wreg      enum E12337
  9219 ;; Registers used:
  9220 ;;		wreg, status,2, status,0, pclath, cstack
  9221 ;; Tracked objects:
  9222 ;;		On entry : 0/0
  9223 ;;		On exit  : 0/0
  9224 ;;		Unchanged: 0/0
  9225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9226 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9227 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9228 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9229 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9230 ;;Total ram usage:        0 bytes
  9231 ;; Hardware stack levels used:    1
  9232 ;; Hardware stack levels required when called:    1
  9233 ;; This function calls:
  9234 ;;		i1_i2c_driver_restart
  9235 ;; This function is called by:
  9236 ;;		i1_do_I2C_DO_ADDRESS_NACK
  9237 ;;		i1_do_I2C_TX_EMPTY
  9238 ;; This function uses a non-reentrant model
  9239 ;;
  9240                           
  9241                           
  9242                           ;psect for function i1_do_I2C_SEND_RESTART
  9243  06E3                     i1_do_I2C_SEND_RESTART:	
  9244  06E3                     i1l2371:	
  9245                           ;incstack = 0
  9246                           ; Regs used in i1_do_I2C_SEND_RESTART: [wreg+status,2+status,0+pclath+cstack]
  9247                           
  9248                           
  9249                           ;i2c_master.c: 268: i2c_driver_restart();
  9250  06E3  3187  271E         	fcall	i1_i2c_driver_restart
  9251                           
  9252                           ;i2c_master.c: 269: return I2C_SEND_ADR_READ;
  9253  06E5  3001               	movlw	1
  9254  06E6  0008               	return
  9255  06E7                     __end_ofi1_do_I2C_SEND_RESTART:	
  9256                           
  9257                           	psect	text72
  9258  06E7                     __ptext72:	
  9259 ;; *************** function i1_do_I2C_SEND_RESTART_WRITE *****************
  9260 ;; Defined at:
  9261 ;;		line 260 in file "mcc_generated_files/drivers/i2c_master.c"
  9262 ;; Parameters:    Size  Location     Type
  9263 ;;		None
  9264 ;; Auto vars:     Size  Location     Type
  9265 ;;		None
  9266 ;; Return value:  Size  Location     Type
  9267 ;;                  1    wreg      enum E12337
  9268 ;; Registers used:
  9269 ;;		wreg, status,2, status,0, pclath, cstack
  9270 ;; Tracked objects:
  9271 ;;		On entry : 0/0
  9272 ;;		On exit  : 0/0
  9273 ;;		Unchanged: 0/0
  9274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9275 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9276 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9277 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9278 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9279 ;;Total ram usage:        0 bytes
  9280 ;; Hardware stack levels used:    1
  9281 ;; Hardware stack levels required when called:    1
  9282 ;; This function calls:
  9283 ;;		i1_i2c_driver_restart
  9284 ;; This function is called by:
  9285 ;;		i1_do_I2C_TX
  9286 ;; This function uses a non-reentrant model
  9287 ;;
  9288                           
  9289                           
  9290                           ;psect for function i1_do_I2C_SEND_RESTART_WRITE
  9291  06E7                     i1_do_I2C_SEND_RESTART_WRITE:	
  9292  06E7                     i1l2365:	
  9293                           ;incstack = 0
  9294                           ; Regs used in i1_do_I2C_SEND_RESTART_WRITE: [wreg+status,2+status,0+pclath+cstack]
  9295                           
  9296                           
  9297                           ;i2c_master.c: 262: i2c_driver_restart();
  9298  06E7  3187  271E         	fcall	i1_i2c_driver_restart
  9299                           
  9300                           ;i2c_master.c: 263: return I2C_SEND_ADR_WRITE;
  9301  06E9  3002               	movlw	2
  9302  06EA  0008               	return
  9303  06EB                     __end_ofi1_do_I2C_SEND_RESTART_WRITE:	
  9304                           
  9305                           	psect	text73
  9306  06EB                     __ptext73:	
  9307 ;; *************** function i1_do_I2C_SEND_RESTART_READ *****************
  9308 ;; Defined at:
  9309 ;;		line 254 in file "mcc_generated_files/drivers/i2c_master.c"
  9310 ;; Parameters:    Size  Location     Type
  9311 ;;		None
  9312 ;; Auto vars:     Size  Location     Type
  9313 ;;		None
  9314 ;; Return value:  Size  Location     Type
  9315 ;;                  1    wreg      enum E12337
  9316 ;; Registers used:
  9317 ;;		wreg, status,2, status,0, pclath, cstack
  9318 ;; Tracked objects:
  9319 ;;		On entry : 0/0
  9320 ;;		On exit  : 0/0
  9321 ;;		Unchanged: 0/0
  9322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9323 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9324 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9325 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9326 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9327 ;;Total ram usage:        0 bytes
  9328 ;; Hardware stack levels used:    1
  9329 ;; Hardware stack levels required when called:    1
  9330 ;; This function calls:
  9331 ;;		i1_i2c_driver_restart
  9332 ;; This function is called by:
  9333 ;;		i1_do_I2C_TX
  9334 ;; This function uses a non-reentrant model
  9335 ;;
  9336                           
  9337                           
  9338                           ;psect for function i1_do_I2C_SEND_RESTART_READ
  9339  06EB                     i1_do_I2C_SEND_RESTART_READ:	
  9340  06EB                     i1l2359:	
  9341                           ;incstack = 0
  9342                           ; Regs used in i1_do_I2C_SEND_RESTART_READ: [wreg+status,2+status,0+pclath+cstack]
  9343                           
  9344                           
  9345                           ;i2c_master.c: 256: i2c_driver_restart();
  9346  06EB  3187  271E         	fcall	i1_i2c_driver_restart
  9347                           
  9348                           ;i2c_master.c: 257: return I2C_SEND_ADR_READ;
  9349  06ED  3001               	movlw	1
  9350  06EE  0008               	return
  9351  06EF                     __end_ofi1_do_I2C_SEND_RESTART_READ:	
  9352                           
  9353                           	psect	text74
  9354  06BD                     __ptext74:	
  9355 ;; *************** function i1_do_I2C_IDLE *****************
  9356 ;; Defined at:
  9357 ;;		line 247 in file "mcc_generated_files/drivers/i2c_master.c"
  9358 ;; Parameters:    Size  Location     Type
  9359 ;;		None
  9360 ;; Auto vars:     Size  Location     Type
  9361 ;;		None
  9362 ;; Return value:  Size  Location     Type
  9363 ;;                  1    wreg      enum E12337
  9364 ;; Registers used:
  9365 ;;		wreg, status,2
  9366 ;; Tracked objects:
  9367 ;;		On entry : 0/0
  9368 ;;		On exit  : 0/0
  9369 ;;		Unchanged: 0/0
  9370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9371 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9372 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9373 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9374 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9375 ;;Total ram usage:        0 bytes
  9376 ;; Hardware stack levels used:    1
  9377 ;; This function calls:
  9378 ;;		Nothing
  9379 ;; This function is called by:
  9380 ;; This function uses a non-reentrant model
  9381 ;;
  9382                           
  9383                           
  9384                           ;psect for function i1_do_I2C_IDLE
  9385  06BD                     i1_do_I2C_IDLE:	
  9386  06BD                     i1l2541:	
  9387                           ;incstack = 0
  9388                           ; Regs used in i1_do_I2C_IDLE: [wreg+status,2]
  9389                           
  9390                           
  9391                           ;i2c_master.c: 249: i2c_status.busy = 0;
  9392  06BD  0021               	movlb	1	; select bank1
  9393  06BE  1040               	bcf	_i2c_status^(0+128),0
  9394                           
  9395                           ;i2c_master.c: 250: i2c_status.error = I2C_NOERR;
  9396  06BF  01CA               	clrf	(_i2c_status^(0+128)+10)
  9397                           
  9398                           ;i2c_master.c: 251: return I2C_RESET;
  9399  06C0  300E               	movlw	14
  9400  06C1  0008               	return
  9401  06C2                     __end_ofi1_do_I2C_IDLE:	
  9402                           
  9403                           	psect	text75
  9404  067A                     __ptext75:	
  9405 ;; *************** function i1_do_I2C_RESET *****************
  9406 ;; Defined at:
  9407 ;;		line 239 in file "mcc_generated_files/drivers/i2c_master.c"
  9408 ;; Parameters:    Size  Location     Type
  9409 ;;		None
  9410 ;; Auto vars:     Size  Location     Type
  9411 ;;		None
  9412 ;; Return value:  Size  Location     Type
  9413 ;;                  1    wreg      enum E12337
  9414 ;; Registers used:
  9415 ;;		wreg, status,2, status,0, pclath, cstack
  9416 ;; Tracked objects:
  9417 ;;		On entry : 0/0
  9418 ;;		On exit  : 0/0
  9419 ;;		Unchanged: 0/0
  9420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9421 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9422 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9423 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9424 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9425 ;;Total ram usage:        0 bytes
  9426 ;; Hardware stack levels used:    1
  9427 ;; Hardware stack levels required when called:    1
  9428 ;; This function calls:
  9429 ;;		i1_i2c_driver_resetBus
  9430 ;; This function is called by:
  9431 ;; This function uses a non-reentrant model
  9432 ;;
  9433                           
  9434                           
  9435                           ;psect for function i1_do_I2C_RESET
  9436  067A                     i1_do_I2C_RESET:	
  9437  067A                     i1l2531:	
  9438                           ;incstack = 0
  9439                           ; Regs used in i1_do_I2C_RESET: [wreg+status,2+status,0+pclath+cstack]
  9440                           
  9441                           
  9442                           ;i2c_master.c: 241: i2c_driver_resetBus();
  9443  067A  3187  272E         	fcall	i1_i2c_driver_resetBus
  9444                           
  9445                           ;i2c_master.c: 242: i2c_status.busy = 0;
  9446  067C  0021               	movlb	1	; select bank1
  9447  067D  1040               	bcf	_i2c_status^(0+128),0
  9448                           
  9449                           ;i2c_master.c: 243: i2c_status.error = I2C_NOERR;
  9450  067E  01CA               	clrf	(_i2c_status^(0+128)+10)
  9451                           
  9452                           ;i2c_master.c: 244: return I2C_RESET;
  9453  067F  300E               	movlw	14
  9454  0680  0008               	return
  9455  0681                     __end_ofi1_do_I2C_RESET:	
  9456                           
  9457                           	psect	text76
  9458  031A                     __ptext76:	
  9459 ;; *************** function i1_do_I2C_TX_EMPTY *****************
  9460 ;; Defined at:
  9461 ;;		line 382 in file "mcc_generated_files/drivers/i2c_master.c"
  9462 ;; Parameters:    Size  Location     Type
  9463 ;;		None
  9464 ;; Auto vars:     Size  Location     Type
  9465 ;;		None
  9466 ;; Return value:  Size  Location     Type
  9467 ;;                  1    wreg      enum E12337
  9468 ;; Registers used:
  9469 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9470 ;; Tracked objects:
  9471 ;;		On entry : 0/0
  9472 ;;		On exit  : 0/0
  9473 ;;		Unchanged: 0/0
  9474 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9475 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9476 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9477 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9478 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9479 ;;Total ram usage:        1 bytes
  9480 ;; Hardware stack levels used:    1
  9481 ;; Hardware stack levels required when called:    3
  9482 ;; This function calls:
  9483 ;;		Absolute function
  9484 ;;		i1_do_I2C_SEND_RESTART
  9485 ;;		i1_do_I2C_SEND_STOP
  9486 ;;		i1_i2c_restartWrite
  9487 ;;		i1_mssp_setIRQ
  9488 ;;		i1_rd1RegCompleteHandler
  9489 ;;		i1_rd2RegCompleteHandler
  9490 ;;		i1_rdBlkRegCompleteHandler
  9491 ;;		i1_returnReset
  9492 ;;		i1_returnStop
  9493 ;;		i1_wr1RegCompleteHandler
  9494 ;;		i1_wr2RegCompleteHandler
  9495 ;; This function is called by:
  9496 ;; This function uses a non-reentrant model
  9497 ;;
  9498                           
  9499                           
  9500                           ;psect for function i1_do_I2C_TX_EMPTY
  9501  031A                     i1_do_I2C_TX_EMPTY:	
  9502  031A                     i1l4497:	
  9503                           ;incstack = 0
  9504                           ; Regs used in i1_do_I2C_TX_EMPTY: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9505                           
  9506                           
  9507                           ;i2c_master.c: 384: i2c_status.bufferFree = 1;
  9508  031A  0021               	movlb	1	; select bank1
  9509  031B  1540               	bsf	_i2c_status^(0+128),2
  9510                           
  9511                           ;i2c_master.c: 385: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
  9512  031C  2B27               	goto	i1l4515
  9513  031D                     i1l4499:	
  9514                           ;i2c_master.c: 386: {
  9515                           ;i2c_master.c: 387: case i2c_restart_read:
  9516                           
  9517                           
  9518                           ;i2c_master.c: 388: case i2c_restart_write:
  9519                           ;i2c_master.c: 389: return do_I2C_SEND_RESTART();
  9520  031D  3186  26E3         	fcall	i1_do_I2C_SEND_RESTART
  9521  031F  0008               	return
  9522  0320                     i1l4503:	
  9523                           ;i2c_master.c: 390: case i2c_continue:
  9524                           
  9525                           
  9526                           ;i2c_master.c: 391: mssp_setIRQ();
  9527  0320  3187  2712         	fcall	i1_mssp_setIRQ
  9528                           
  9529                           ;i2c_master.c: 392: return I2C_TX;
  9530  0322  3003               	movlw	3
  9531  0323  0008               	return
  9532  0324                     i1l4509:	
  9533                           ;i2c_master.c: 394: case i2c_stop:
  9534                           
  9535                           ;i2c_master.c: 393: default:
  9536                           
  9537                           
  9538                           ;i2c_master.c: 395: return do_I2C_SEND_STOP();
  9539  0324  3186  26DF         	fcall	i1_do_I2C_SEND_STOP
  9540                           
  9541                           ;i2c_master.c: 396: }
  9542  0326  0008               	return
  9543  0327                     i1l4515:	
  9544  0327  0021               	movlb	1	; select bank1
  9545  0328  0857               	movf	(low ((_i2c_status| 0+23)))^(0+128),w
  9546  0329  00F0               	movwf	??i1_do_I2C_TX_EMPTY
  9547  032A  0870               	movf	??i1_do_I2C_TX_EMPTY,w
  9548  032B  00F9               	movwf	i1returnStop@p
  9549  032C  300B               	movlw	11
  9550  032D  3EC0               	addlw	(low (_i2c_status| 0))& (0+255)
  9551  032E  0086               	movwf	6
  9552  032F  0187               	clrf	7
  9553  0330  3F41               	moviw [1]fsr1
  9554  0331  008A               	movwf	10
  9555  0332  3F40               	moviw [0]fsr1
  9556  0333  000A               	callw
  9557  0334  3183               	pagesel	$
  9558                           
  9559                           ; Switch size 1, requested type "space"
  9560                           ; Number of cases is 4, Range of values is 1 to 4
  9561                           ; switch strategies available:
  9562                           ; Name         Instructions Cycles
  9563                           ; simple_byte           13     7 (average)
  9564                           ; direct_byte           17     9 (fixed)
  9565                           ; jumptable            263     9 (fixed)
  9566                           ;	Chosen strategy is simple_byte
  9567  0335  3A01               	xorlw	1	; case 1
  9568  0336  1903               	skipnz
  9569  0337  2B24               	goto	i1l4509
  9570  0338  3A03               	xorlw	3	; case 2
  9571  0339  1903               	skipnz
  9572  033A  2B1D               	goto	i1l4499
  9573  033B  3A01               	xorlw	1	; case 3
  9574  033C  1903               	skipnz
  9575  033D  2B1D               	goto	i1l4499
  9576  033E  3A07               	xorlw	7	; case 4
  9577  033F  1903               	skipnz
  9578  0340  2B20               	goto	i1l4503
  9579  0341  2B24               	goto	i1l4509
  9580  0342  0008               	return
  9581  0343                     __end_ofi1_do_I2C_TX_EMPTY:	
  9582                           
  9583                           	psect	text77
  9584  0712                     __ptext77:	
  9585 ;; *************** function i1_mssp_setIRQ *****************
  9586 ;; Defined at:
  9587 ;;		line 58 in file "mcc_generated_files/i2c_driver.c"
  9588 ;; Parameters:    Size  Location     Type
  9589 ;;		None
  9590 ;; Auto vars:     Size  Location     Type
  9591 ;;		None
  9592 ;; Return value:  Size  Location     Type
  9593 ;;                  1    wreg      void 
  9594 ;; Registers used:
  9595 ;;		None
  9596 ;; Tracked objects:
  9597 ;;		On entry : 0/0
  9598 ;;		On exit  : 0/0
  9599 ;;		Unchanged: 0/0
  9600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9601 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9602 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9603 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9604 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9605 ;;Total ram usage:        0 bytes
  9606 ;; Hardware stack levels used:    1
  9607 ;; This function calls:
  9608 ;;		Nothing
  9609 ;; This function is called by:
  9610 ;;		i1_do_I2C_TX_EMPTY
  9611 ;; This function uses a non-reentrant model
  9612 ;;
  9613                           
  9614                           
  9615                           ;psect for function i1_mssp_setIRQ
  9616  0712                     i1_mssp_setIRQ:	
  9617                           
  9618                           ;i2c_driver.c: 60: PIR1bits.SSP1IF = 1;
  9619                           
  9620                           ;incstack = 0
  9621                           ; Regs used in i1_mssp_setIRQ: []
  9622  0712  0020               	movlb	0	; select bank0
  9623  0713  1590               	bsf	16,3	;volatile
  9624  0714  0008               	return
  9625  0715                     __end_ofi1_mssp_setIRQ:	
  9626                           
  9627                           	psect	text78
  9628  05C1                     __ptext78:	
  9629 ;; *************** function i1_i2c_driver_isNACK *****************
  9630 ;; Defined at:
  9631 ;;		line 161 in file "mcc_generated_files/i2c_driver.c"
  9632 ;; Parameters:    Size  Location     Type
  9633 ;;		None
  9634 ;; Auto vars:     Size  Location     Type
  9635 ;;		None
  9636 ;; Return value:  Size  Location     Type
  9637 ;;		None               void
  9638 ;; Registers used:
  9639 ;;		wreg, status,2, status,0
  9640 ;; Tracked objects:
  9641 ;;		On entry : 0/0
  9642 ;;		On exit  : 0/0
  9643 ;;		Unchanged: 0/0
  9644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9645 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9646 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9647 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9648 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9649 ;;Total ram usage:        1 bytes
  9650 ;; Hardware stack levels used:    1
  9651 ;; This function calls:
  9652 ;;		Nothing
  9653 ;; This function is called by:
  9654 ;;		i1_do_I2C_TX
  9655 ;;		i1_i2c_ISR
  9656 ;; This function uses a non-reentrant model
  9657 ;;
  9658                           
  9659                           
  9660                           ;psect for function i1_i2c_driver_isNACK
  9661  05C1                     i1_i2c_driver_isNACK:	
  9662                           
  9663                           ;i2c_driver.c: 163: return SSP1CON2bits.ACKSTAT = 1;
  9664                           
  9665                           ;incstack = 0
  9666                           ; Regs used in i1_i2c_driver_isNACK: [wreg+status,2+status,0]
  9667  05C1  0024               	movlb	4	; select bank4
  9668  05C2  0816               	movf	22,w	;volatile
  9669  05C3  39BF               	andlw	-65
  9670  05C4  3840               	iorlw	64
  9671  05C5  0096               	movwf	22	;volatile
  9672  05C6  0E16               	swapf	22,w	;volatile
  9673  05C7  0C89               	rrf	9,f
  9674  05C8  0C89               	rrf	9,f
  9675  05C9  3901               	andlw	1
  9676  05CA  00F0               	movwf	??i1_i2c_driver_isNACK
  9677  05CB  0C70               	rrf	??i1_i2c_driver_isNACK,w
  9678  05CC  0008               	return
  9679  05CD                     __end_ofi1_i2c_driver_isNACK:	
  9680                           
  9681                           	psect	text79
  9682  06C2                     __ptext79:	
  9683 ;; *************** function i1_i2c_driver_TXData *****************
  9684 ;; Defined at:
  9685 ;;		line 186 in file "mcc_generated_files/i2c_driver.c"
  9686 ;; Parameters:    Size  Location     Type
  9687 ;;  d               1    wreg     unsigned char 
  9688 ;; Auto vars:     Size  Location     Type
  9689 ;;  d               1    0[COMMON] unsigned char 
  9690 ;; Return value:  Size  Location     Type
  9691 ;;                  1    wreg      void 
  9692 ;; Registers used:
  9693 ;;		wreg
  9694 ;; Tracked objects:
  9695 ;;		On entry : 0/0
  9696 ;;		On exit  : 0/0
  9697 ;;		Unchanged: 0/0
  9698 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9699 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9700 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9701 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9702 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9703 ;;Total ram usage:        1 bytes
  9704 ;; Hardware stack levels used:    1
  9705 ;; This function calls:
  9706 ;;		Nothing
  9707 ;; This function is called by:
  9708 ;;		i1_do_I2C_SEND_ADR_READ
  9709 ;;		i1_do_I2C_SEND_ADR_WRITE
  9710 ;;		i1_do_I2C_TX
  9711 ;; This function uses a non-reentrant model
  9712 ;;
  9713                           
  9714                           
  9715                           ;psect for function i1_i2c_driver_TXData
  9716  06C2                     i1_i2c_driver_TXData:	
  9717                           
  9718                           ;incstack = 0
  9719                           ; Regs used in i1_i2c_driver_TXData: [wreg]
  9720                           ;i1i2c_driver_TXData@d stored from wreg
  9721  06C2  00F0               	movwf	i1i2c_driver_TXData@d
  9722                           
  9723                           ;i2c_driver.c: 188: SSP1BUF = d;
  9724  06C3  0870               	movf	i1i2c_driver_TXData@d,w
  9725  06C4  0024               	movlb	4	; select bank4
  9726  06C5  0091               	movwf	17	;volatile
  9727  06C6  0008               	return
  9728  06C7                     __end_ofi1_i2c_driver_TXData:	
  9729                           
  9730                           	psect	text80
  9731  0715                     __ptext80:	
  9732 ;; *************** function i1_i2c_driver_getRXData *****************
  9733 ;; Defined at:
  9734 ;;		line 171 in file "mcc_generated_files/i2c_driver.c"
  9735 ;; Parameters:    Size  Location     Type
  9736 ;;		None
  9737 ;; Auto vars:     Size  Location     Type
  9738 ;;		None
  9739 ;; Return value:  Size  Location     Type
  9740 ;;                  1    wreg      unsigned char 
  9741 ;; Registers used:
  9742 ;;		wreg
  9743 ;; Tracked objects:
  9744 ;;		On entry : 0/0
  9745 ;;		On exit  : 0/0
  9746 ;;		Unchanged: 0/0
  9747 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9748 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9749 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9750 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9751 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9752 ;;Total ram usage:        0 bytes
  9753 ;; Hardware stack levels used:    1
  9754 ;; This function calls:
  9755 ;;		Nothing
  9756 ;; This function is called by:
  9757 ;;		i1_do_I2C_RX
  9758 ;; This function uses a non-reentrant model
  9759 ;;
  9760                           
  9761                           
  9762                           ;psect for function i1_i2c_driver_getRXData
  9763  0715                     i1_i2c_driver_getRXData:	
  9764                           
  9765                           ;i2c_driver.c: 173: return SSP1BUF;
  9766                           
  9767                           ;incstack = 0
  9768                           ; Regs used in i1_i2c_driver_getRXData: [wreg]
  9769  0715  0024               	movlb	4	; select bank4
  9770  0716  0811               	movf	17,w	;volatile
  9771  0717  0008               	return
  9772  0718                     __end_ofi1_i2c_driver_getRXData:	
  9773                           
  9774                           	psect	text81
  9775  06EF                     __ptext81:	
  9776 ;; *************** function i1_i2c_driver_sendNACK *****************
  9777 ;; Defined at:
  9778 ;;		line 202 in file "mcc_generated_files/i2c_driver.c"
  9779 ;; Parameters:    Size  Location     Type
  9780 ;;		None
  9781 ;; Auto vars:     Size  Location     Type
  9782 ;;		None
  9783 ;; Return value:  Size  Location     Type
  9784 ;;                  1    wreg      void 
  9785 ;; Registers used:
  9786 ;;		None
  9787 ;; Tracked objects:
  9788 ;;		On entry : 0/0
  9789 ;;		On exit  : 0/0
  9790 ;;		Unchanged: 0/0
  9791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9792 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9793 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9794 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9795 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9796 ;;Total ram usage:        0 bytes
  9797 ;; Hardware stack levels used:    1
  9798 ;; This function calls:
  9799 ;;		Nothing
  9800 ;; This function is called by:
  9801 ;;		i1_do_I2C_DO_NACK_STOP
  9802 ;;		i1_do_I2C_DO_NACK_RESTART
  9803 ;; This function uses a non-reentrant model
  9804 ;;
  9805                           
  9806                           
  9807                           ;psect for function i1_i2c_driver_sendNACK
  9808  06EF                     i1_i2c_driver_sendNACK:	
  9809                           
  9810                           ;i2c_driver.c: 204: SSP1CON2bits.ACKDT = 1;
  9811                           
  9812                           ;incstack = 0
  9813                           ; Regs used in i1_i2c_driver_sendNACK: []
  9814  06EF  0024               	movlb	4	; select bank4
  9815  06F0  1696               	bsf	22,5	;volatile
  9816                           
  9817                           ;i2c_driver.c: 205: SSP1CON2bits.ACKEN = 1;
  9818  06F1  1616               	bsf	22,4	;volatile
  9819  06F2  0008               	return
  9820  06F3                     __end_ofi1_i2c_driver_sendNACK:	
  9821                           
  9822                           	psect	text82
  9823  072E                     __ptext82:	
  9824 ;; *************** function i1_i2c_driver_resetBus *****************
  9825 ;; Defined at:
  9826 ;;		line 141 in file "mcc_generated_files/i2c_driver.c"
  9827 ;; Parameters:    Size  Location     Type
  9828 ;;		None
  9829 ;; Auto vars:     Size  Location     Type
  9830 ;;		None
  9831 ;; Return value:  Size  Location     Type
  9832 ;;                  1    wreg      void 
  9833 ;; Registers used:
  9834 ;;		None
  9835 ;; Tracked objects:
  9836 ;;		On entry : 0/0
  9837 ;;		On exit  : 0/0
  9838 ;;		Unchanged: 0/0
  9839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9840 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9841 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9842 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9843 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9844 ;;Total ram usage:        0 bytes
  9845 ;; Hardware stack levels used:    1
  9846 ;; This function calls:
  9847 ;;		Nothing
  9848 ;; This function is called by:
  9849 ;;		i1_do_I2C_RESET
  9850 ;; This function uses a non-reentrant model
  9851 ;;
  9852                           
  9853                           
  9854                           ;psect for function i1_i2c_driver_resetBus
  9855  072E                     i1_i2c_driver_resetBus:	
  9856                           
  9857                           ;incstack = 0
  9858                           ; Regs used in i1_i2c_driver_resetBus: []
  9859  072E  0008               	return
  9860  072F                     __end_ofi1_i2c_driver_resetBus:	
  9861                           
  9862                           	psect	text83
  9863  0718                     __ptext83:	
  9864 ;; *************** function i1_i2c_driver_startRX *****************
  9865 ;; Defined at:
  9866 ;;		line 166 in file "mcc_generated_files/i2c_driver.c"
  9867 ;; Parameters:    Size  Location     Type
  9868 ;;		None
  9869 ;; Auto vars:     Size  Location     Type
  9870 ;;		None
  9871 ;; Return value:  Size  Location     Type
  9872 ;;                  1    wreg      void 
  9873 ;; Registers used:
  9874 ;;		None
  9875 ;; Tracked objects:
  9876 ;;		On entry : 0/0
  9877 ;;		On exit  : 0/0
  9878 ;;		Unchanged: 0/0
  9879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9880 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9881 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9882 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9883 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9884 ;;Total ram usage:        0 bytes
  9885 ;; Hardware stack levels used:    1
  9886 ;; This function calls:
  9887 ;;		Nothing
  9888 ;; This function is called by:
  9889 ;;		i1_do_I2C_RCEN
  9890 ;; This function uses a non-reentrant model
  9891 ;;
  9892                           
  9893                           
  9894                           ;psect for function i1_i2c_driver_startRX
  9895  0718                     i1_i2c_driver_startRX:	
  9896                           
  9897                           ;i2c_driver.c: 168: SSP1CON2bits.RCEN = 1;
  9898                           
  9899                           ;incstack = 0
  9900                           ; Regs used in i1_i2c_driver_startRX: []
  9901  0718  0024               	movlb	4	; select bank4
  9902  0719  1596               	bsf	22,3	;volatile
  9903  071A  0008               	return
  9904  071B                     __end_ofi1_i2c_driver_startRX:	
  9905                           
  9906                           	psect	text84
  9907  04BC                     __ptext84:	
  9908 ;; *************** function i1_rdBlkRegCompleteHandler *****************
  9909 ;; Defined at:
  9910 ;;		line 134 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  9911 ;; Parameters:    Size  Location     Type
  9912 ;;  p               1    9[COMMON] PTR void 
  9913 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  9914 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  9915 ;; Auto vars:     Size  Location     Type
  9916 ;;		None
  9917 ;; Return value:  Size  Location     Type
  9918 ;;                  1    wreg      enum E97
  9919 ;; Registers used:
  9920 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9921 ;; Tracked objects:
  9922 ;;		On entry : 0/0
  9923 ;;		On exit  : 0/0
  9924 ;;		Unchanged: 0/0
  9925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9926 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9927 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9928 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9929 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9930 ;;Total ram usage:        1 bytes
  9931 ;; Hardware stack levels used:    1
  9932 ;; Hardware stack levels required when called:    2
  9933 ;; This function calls:
  9934 ;;		i1_i2c_setBuffer
  9935 ;;		i1_i2c_setDataCompleteCallback
  9936 ;; This function is called by:
  9937 ;; This function uses a non-reentrant model
  9938 ;;
  9939                           
  9940                           
  9941                           ;psect for function i1_rdBlkRegCompleteHandler
  9942  04BC                     i1_rdBlkRegCompleteHandler:	
  9943  04BC                     i1l2439:	
  9944                           ;incstack = 0
  9945                           ; Regs used in i1_rdBlkRegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  9946                           
  9947                           
  9948                           ;i2c_simple_master.c: 136: i2c_setBuffer(((buf_t *)p)->data,((buf_t*)p)->len);
  9949  04BC  0879               	movf	i1rdBlkRegCompleteHandler@p,w
  9950  04BD  0086               	movwf	6
  9951  04BE  0187               	clrf	7
  9952  04BF  3F40               	moviw [0]fsr1
  9953  04C0  00F0               	movwf	i1i2c_setBuffer@bufferSize
  9954  04C1  3F41               	moviw [1]fsr1
  9955  04C2  00F1               	movwf	i1i2c_setBuffer@bufferSize+1
  9956  04C3  0879               	movf	i1rdBlkRegCompleteHandler@p,w
  9957  04C4  3E02               	addlw	2
  9958  04C5  0086               	movwf	6
  9959  04C6  0187               	clrf	7
  9960  04C7  0801               	movf	1,w
  9961  04C8  3185  2580  3184   	fcall	i1_i2c_setBuffer
  9962                           
  9963                           ;i2c_simple_master.c: 137: i2c_setDataCompleteCallback((0),(0));
  9964  04CB  3000               	movlw	0
  9965  04CC  00F5               	movwf	i1i2c_setDataCompleteCallback@cb
  9966  04CD  00F6               	movwf	i1i2c_setDataCompleteCallback@cb+1
  9967  04CE  01F7               	clrf	i1i2c_setDataCompleteCallback@p
  9968  04CF  3185  25CD         	fcall	i1_i2c_setDataCompleteCallback
  9969                           
  9970                           ;i2c_simple_master.c: 138: return i2c_restart_read;
  9971  04D1  3002               	movlw	2
  9972  04D2  0008               	return
  9973  04D3                     __end_ofi1_rdBlkRegCompleteHandler:	
  9974                           
  9975                           	psect	text85
  9976  0540                     __ptext85:	
  9977 ;; *************** function i1_rd2RegCompleteHandler *****************
  9978 ;; Defined at:
  9979 ;;		line 87 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  9980 ;; Parameters:    Size  Location     Type
  9981 ;;  p               1    9[COMMON] PTR void 
  9982 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  9983 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  9984 ;; Auto vars:     Size  Location     Type
  9985 ;;		None
  9986 ;; Return value:  Size  Location     Type
  9987 ;;                  1    wreg      enum E97
  9988 ;; Registers used:
  9989 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9990 ;; Tracked objects:
  9991 ;;		On entry : 0/0
  9992 ;;		On exit  : 0/0
  9993 ;;		Unchanged: 0/0
  9994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9995 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9996 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9997 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9998 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9999 ;;Total ram usage:        1 bytes
 10000 ;; Hardware stack levels used:    1
 10001 ;; Hardware stack levels required when called:    2
 10002 ;; This function calls:
 10003 ;;		i1_i2c_setBuffer
 10004 ;;		i1_i2c_setDataCompleteCallback
 10005 ;; This function is called by:
 10006 ;; This function uses a non-reentrant model
 10007 ;;
 10008                           
 10009                           
 10010                           ;psect for function i1_rd2RegCompleteHandler
 10011  0540                     i1_rd2RegCompleteHandler:	
 10012  0540                     i1l2423:	
 10013                           ;incstack = 0
 10014                           ; Regs used in i1_rd2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 10015                           
 10016                           
 10017                           ;i2c_simple_master.c: 89: i2c_setBuffer(p,2);
 10018  0540  3002               	movlw	2
 10019  0541  00F0               	movwf	i1i2c_setBuffer@bufferSize
 10020  0542  3000               	movlw	0
 10021  0543  00F1               	movwf	i1i2c_setBuffer@bufferSize+1
 10022  0544  0879               	movf	i1rd2RegCompleteHandler@p,w
 10023  0545  3185  2580  3185   	fcall	i1_i2c_setBuffer
 10024                           
 10025                           ;i2c_simple_master.c: 90: i2c_setDataCompleteCallback((0),(0));
 10026  0548  3000               	movlw	0
 10027  0549  00F5               	movwf	i1i2c_setDataCompleteCallback@cb
 10028  054A  00F6               	movwf	i1i2c_setDataCompleteCallback@cb+1
 10029  054B  01F7               	clrf	i1i2c_setDataCompleteCallback@p
 10030  054C  3185  25CD         	fcall	i1_i2c_setDataCompleteCallback
 10031                           
 10032                           ;i2c_simple_master.c: 91: return i2c_restart_read;
 10033  054E  3002               	movlw	2
 10034  054F  0008               	return
 10035  0550                     __end_ofi1_rd2RegCompleteHandler:	
 10036                           
 10037                           	psect	text86
 10038  0550                     __ptext86:	
 10039 ;; *************** function i1_rd1RegCompleteHandler *****************
 10040 ;; Defined at:
 10041 ;;		line 58 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 10042 ;; Parameters:    Size  Location     Type
 10043 ;;  p               1    9[COMMON] PTR void 
 10044 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 10045 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 10046 ;; Auto vars:     Size  Location     Type
 10047 ;;		None
 10048 ;; Return value:  Size  Location     Type
 10049 ;;                  1    wreg      enum E97
 10050 ;; Registers used:
 10051 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10052 ;; Tracked objects:
 10053 ;;		On entry : 0/0
 10054 ;;		On exit  : 0/0
 10055 ;;		Unchanged: 0/0
 10056 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10057 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10058 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10059 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10060 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10061 ;;Total ram usage:        1 bytes
 10062 ;; Hardware stack levels used:    1
 10063 ;; Hardware stack levels required when called:    2
 10064 ;; This function calls:
 10065 ;;		i1_i2c_setBuffer
 10066 ;;		i1_i2c_setDataCompleteCallback
 10067 ;; This function is called by:
 10068 ;; This function uses a non-reentrant model
 10069 ;;
 10070                           
 10071                           
 10072                           ;psect for function i1_rd1RegCompleteHandler
 10073  0550                     i1_rd1RegCompleteHandler:	
 10074  0550                     i1l2415:	
 10075                           ;incstack = 0
 10076                           ; Regs used in i1_rd1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 10077                           
 10078                           
 10079                           ;i2c_simple_master.c: 60: i2c_setBuffer(p,1);
 10080  0550  3001               	movlw	1
 10081  0551  00F0               	movwf	i1i2c_setBuffer@bufferSize
 10082  0552  3000               	movlw	0
 10083  0553  00F1               	movwf	i1i2c_setBuffer@bufferSize+1
 10084  0554  0879               	movf	i1rd1RegCompleteHandler@p,w
 10085  0555  3185  2580  3185   	fcall	i1_i2c_setBuffer
 10086                           
 10087                           ;i2c_simple_master.c: 61: i2c_setDataCompleteCallback((0),(0));
 10088  0558  3000               	movlw	0
 10089  0559  00F5               	movwf	i1i2c_setDataCompleteCallback@cb
 10090  055A  00F6               	movwf	i1i2c_setDataCompleteCallback@cb+1
 10091  055B  01F7               	clrf	i1i2c_setDataCompleteCallback@p
 10092  055C  3185  25CD         	fcall	i1_i2c_setDataCompleteCallback
 10093                           
 10094                           ;i2c_simple_master.c: 62: return i2c_restart_read;
 10095  055E  3002               	movlw	2
 10096  055F  0008               	return
 10097  0560                     __end_ofi1_rd1RegCompleteHandler:	
 10098                           
 10099                           	psect	text87
 10100  0560                     __ptext87:	
 10101 ;; *************** function i1_wr1RegCompleteHandler *****************
 10102 ;; Defined at:
 10103 ;;		line 31 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 10104 ;; Parameters:    Size  Location     Type
 10105 ;;  p               1    9[COMMON] PTR void 
 10106 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 10107 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 10108 ;; Auto vars:     Size  Location     Type
 10109 ;;		None
 10110 ;; Return value:  Size  Location     Type
 10111 ;;                  1    wreg      enum E97
 10112 ;; Registers used:
 10113 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10114 ;; Tracked objects:
 10115 ;;		On entry : 0/0
 10116 ;;		On exit  : 0/0
 10117 ;;		Unchanged: 0/0
 10118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10119 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10120 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10121 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10122 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10123 ;;Total ram usage:        1 bytes
 10124 ;; Hardware stack levels used:    1
 10125 ;; Hardware stack levels required when called:    2
 10126 ;; This function calls:
 10127 ;;		i1_i2c_setBuffer
 10128 ;;		i1_i2c_setDataCompleteCallback
 10129 ;; This function is called by:
 10130 ;; This function uses a non-reentrant model
 10131 ;;
 10132                           
 10133                           
 10134                           ;psect for function i1_wr1RegCompleteHandler
 10135  0560                     i1_wr1RegCompleteHandler:	
 10136  0560                     i1l2407:	
 10137                           ;incstack = 0
 10138                           ; Regs used in i1_wr1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 10139                           
 10140                           
 10141                           ;i2c_simple_master.c: 33: i2c_setBuffer(p,1);
 10142  0560  3001               	movlw	1
 10143  0561  00F0               	movwf	i1i2c_setBuffer@bufferSize
 10144  0562  3000               	movlw	0
 10145  0563  00F1               	movwf	i1i2c_setBuffer@bufferSize+1
 10146  0564  0879               	movf	i1wr1RegCompleteHandler@p,w
 10147  0565  3185  2580  3185   	fcall	i1_i2c_setBuffer
 10148                           
 10149                           ;i2c_simple_master.c: 34: i2c_setDataCompleteCallback((0),(0));
 10150  0568  3000               	movlw	0
 10151  0569  00F5               	movwf	i1i2c_setDataCompleteCallback@cb
 10152  056A  00F6               	movwf	i1i2c_setDataCompleteCallback@cb+1
 10153  056B  01F7               	clrf	i1i2c_setDataCompleteCallback@p
 10154  056C  3185  25CD         	fcall	i1_i2c_setDataCompleteCallback
 10155                           
 10156                           ;i2c_simple_master.c: 35: return i2c_continue;
 10157  056E  3004               	movlw	4
 10158  056F  0008               	return
 10159  0570                     __end_ofi1_wr1RegCompleteHandler:	
 10160                           
 10161                           	psect	text88
 10162  0727                     __ptext88:	
 10163 ;; *************** function i1_i2c_restartWrite *****************
 10164 ;; Defined at:
 10165 ;;		line 35 in file "mcc_generated_files/drivers/i2c_types.c"
 10166 ;; Parameters:    Size  Location     Type
 10167 ;;  p               1    9[COMMON] PTR void 
 10168 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 10169 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 10170 ;; Auto vars:     Size  Location     Type
 10171 ;;		None
 10172 ;; Return value:  Size  Location     Type
 10173 ;;                  1    wreg      enum E96
 10174 ;; Registers used:
 10175 ;;		wreg
 10176 ;; Tracked objects:
 10177 ;;		On entry : 0/0
 10178 ;;		On exit  : 0/0
 10179 ;;		Unchanged: 0/0
 10180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10181 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10182 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10183 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10184 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10185 ;;Total ram usage:        1 bytes
 10186 ;; Hardware stack levels used:    1
 10187 ;; This function calls:
 10188 ;;		Nothing
 10189 ;; This function is called by:
 10190 ;; This function uses a non-reentrant model
 10191 ;;
 10192                           
 10193                           
 10194                           ;psect for function i1_i2c_restartWrite
 10195  0727                     i1_i2c_restartWrite:	
 10196  0727                     i1l2403:	
 10197                           ;incstack = 0
 10198                           ; Regs used in i1_i2c_restartWrite: [wreg]
 10199                           
 10200                           
 10201                           ;i2c_types.c: 37: return i2c_restart_write;
 10202  0727  3003               	movlw	3
 10203  0728  0008               	return
 10204  0729                     __end_ofi1_i2c_restartWrite:	
 10205                           
 10206                           	psect	text89
 10207  0729                     __ptext89:	
 10208 ;; *************** function i1_returnReset *****************
 10209 ;; Defined at:
 10210 ;;		line 448 in file "mcc_generated_files/drivers/i2c_master.c"
 10211 ;; Parameters:    Size  Location     Type
 10212 ;;  p               1    9[COMMON] PTR void 
 10213 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 10214 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 10215 ;; Auto vars:     Size  Location     Type
 10216 ;;		None
 10217 ;; Return value:  Size  Location     Type
 10218 ;;                  1    wreg      enum E12171
 10219 ;; Registers used:
 10220 ;;		wreg
 10221 ;; Tracked objects:
 10222 ;;		On entry : 0/0
 10223 ;;		On exit  : 0/0
 10224 ;;		Unchanged: 0/0
 10225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10226 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10227 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10228 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10229 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10230 ;;Total ram usage:        1 bytes
 10231 ;; Hardware stack levels used:    1
 10232 ;; This function calls:
 10233 ;;		Nothing
 10234 ;; This function is called by:
 10235 ;; This function uses a non-reentrant model
 10236 ;;
 10237                           
 10238                           
 10239                           ;psect for function i1_returnReset
 10240  0729                     i1_returnReset:	
 10241  0729                     i1l2399:	
 10242                           ;incstack = 0
 10243                           ; Regs used in i1_returnReset: [wreg]
 10244                           
 10245                           
 10246                           ;i2c_master.c: 450: return i2c_reset_link;
 10247  0729  3005               	movlw	5
 10248  072A  0008               	return
 10249  072B                     __end_ofi1_returnReset:	
 10250                           
 10251                           	psect	text90
 10252  072B                     __ptext90:	
 10253 ;; *************** function i1_returnStop *****************
 10254 ;; Defined at:
 10255 ;;		line 443 in file "mcc_generated_files/drivers/i2c_master.c"
 10256 ;; Parameters:    Size  Location     Type
 10257 ;;  p               1    9[COMMON] PTR void 
 10258 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 10259 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 10260 ;; Auto vars:     Size  Location     Type
 10261 ;;		None
 10262 ;; Return value:  Size  Location     Type
 10263 ;;                  1    wreg      enum E12171
 10264 ;; Registers used:
 10265 ;;		wreg
 10266 ;; Tracked objects:
 10267 ;;		On entry : 0/0
 10268 ;;		On exit  : 0/0
 10269 ;;		Unchanged: 0/0
 10270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10271 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10272 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10273 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10274 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10275 ;;Total ram usage:        1 bytes
 10276 ;; Hardware stack levels used:    1
 10277 ;; This function calls:
 10278 ;;		Nothing
 10279 ;; This function is called by:
 10280 ;;		i1_setCallBack
 10281 ;;		_do_I2C_DO_ADDRESS_NACK
 10282 ;;		_do_I2C_TX
 10283 ;;		_do_I2C_RX
 10284 ;;		_do_I2C_TX_EMPTY
 10285 ;;		i1_do_I2C_DO_ADDRESS_NACK
 10286 ;;		i1_do_I2C_TX
 10287 ;;		i1_do_I2C_RX
 10288 ;;		i1_do_I2C_TX_EMPTY
 10289 ;; This function uses a non-reentrant model
 10290 ;;
 10291                           
 10292                           
 10293                           ;psect for function i1_returnStop
 10294  072B                     i1_returnStop:	
 10295  072B                     i1l2395:	
 10296                           ;incstack = 0
 10297                           ; Regs used in i1_returnStop: [wreg]
 10298                           
 10299                           
 10300                           ;i2c_master.c: 445: return i2c_stop;
 10301  072B  3001               	movlw	1
 10302  072C  0008               	return
 10303  072D                     __end_ofi1_returnStop:	
 10304                           
 10305                           	psect	text91
 10306  0570                     __ptext91:	
 10307 ;; *************** function i1_wr2RegCompleteHandler *****************
 10308 ;; Defined at:
 10309 ;;		line 110 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 10310 ;; Parameters:    Size  Location     Type
 10311 ;;  p               1    9[COMMON] PTR void 
 10312 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 10313 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 10314 ;; Auto vars:     Size  Location     Type
 10315 ;;		None
 10316 ;; Return value:  Size  Location     Type
 10317 ;;                  1    wreg      enum E97
 10318 ;; Registers used:
 10319 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10320 ;; Tracked objects:
 10321 ;;		On entry : 0/0
 10322 ;;		On exit  : 0/0
 10323 ;;		Unchanged: 0/0
 10324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10325 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10326 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10327 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10328 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10329 ;;Total ram usage:        1 bytes
 10330 ;; Hardware stack levels used:    1
 10331 ;; Hardware stack levels required when called:    2
 10332 ;; This function calls:
 10333 ;;		i1_i2c_setBuffer
 10334 ;;		i1_i2c_setDataCompleteCallback
 10335 ;; This function is called by:
 10336 ;; This function uses a non-reentrant model
 10337 ;;
 10338                           
 10339                           
 10340                           ;psect for function i1_wr2RegCompleteHandler
 10341  0570                     i1_wr2RegCompleteHandler:	
 10342  0570                     i1l2431:	
 10343                           ;incstack = 0
 10344                           ; Regs used in i1_wr2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 10345                           
 10346                           
 10347                           ;i2c_simple_master.c: 112: i2c_setBuffer(p,2);
 10348  0570  3002               	movlw	2
 10349  0571  00F0               	movwf	i1i2c_setBuffer@bufferSize
 10350  0572  3000               	movlw	0
 10351  0573  00F1               	movwf	i1i2c_setBuffer@bufferSize+1
 10352  0574  0879               	movf	i1wr2RegCompleteHandler@p,w
 10353  0575  3185  2580  3185   	fcall	i1_i2c_setBuffer
 10354                           
 10355                           ;i2c_simple_master.c: 113: i2c_setDataCompleteCallback((0),(0));
 10356  0578  3000               	movlw	0
 10357  0579  00F5               	movwf	i1i2c_setDataCompleteCallback@cb
 10358  057A  00F6               	movwf	i1i2c_setDataCompleteCallback@cb+1
 10359  057B  01F7               	clrf	i1i2c_setDataCompleteCallback@p
 10360  057C  3185  25CD         	fcall	i1_i2c_setDataCompleteCallback
 10361                           
 10362                           ;i2c_simple_master.c: 114: return i2c_continue;
 10363  057E  3004               	movlw	4
 10364  057F  0008               	return
 10365  0580                     __end_ofi1_wr2RegCompleteHandler:	
 10366                           
 10367                           	psect	text92
 10368  05CD                     __ptext92:	
 10369 ;; *************** function i1_i2c_setDataCompleteCallback *****************
 10370 ;; Defined at:
 10371 ;;		line 89 in file "mcc_generated_files/drivers/i2c_master.c"
 10372 ;; Parameters:    Size  Location     Type
 10373 ;;  cb              2    5[COMMON] PTR FTN(PTR void ,)enum 
 10374 ;;		 -> rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), rd2RegCompleteHandler(1), rd1RegCompleteHandler(1), 
 10375 ;;		 -> wr1RegCompleteHandler(1), Absolute function(1), 
 10376 ;;  p               1    7[COMMON] PTR void 
 10377 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 10378 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 10379 ;; Auto vars:     Size  Location     Type
 10380 ;;		None
 10381 ;; Return value:  Size  Location     Type
 10382 ;;                  1    wreg      void 
 10383 ;; Registers used:
 10384 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10385 ;; Tracked objects:
 10386 ;;		On entry : 0/0
 10387 ;;		On exit  : 0/0
 10388 ;;		Unchanged: 0/0
 10389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10390 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10391 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10392 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10393 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10394 ;;Total ram usage:        4 bytes
 10395 ;; Hardware stack levels used:    1
 10396 ;; Hardware stack levels required when called:    1
 10397 ;; This function calls:
 10398 ;;		i1_setCallBack
 10399 ;; This function is called by:
 10400 ;;		i1_wr1RegCompleteHandler
 10401 ;;		i1_rd1RegCompleteHandler
 10402 ;;		i1_rd2RegCompleteHandler
 10403 ;;		i1_wr2RegCompleteHandler
 10404 ;;		i1_rdBlkRegCompleteHandler
 10405 ;; This function uses a non-reentrant model
 10406 ;;
 10407                           
 10408                           
 10409                           ;psect for function i1_i2c_setDataCompleteCallback
 10410  05CD                     i1_i2c_setDataCompleteCallback:	
 10411                           
 10412                           ;i2c_master.c: 91: setCallBack(i2c_dataComplete,cb,p);
 10413                           
 10414                           ;incstack = 0
 10415                           ; Regs used in i1_i2c_setDataCompleteCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclat
      +                          h+cstack]
 10416  05CD  0876               	movf	i1i2c_setDataCompleteCallback@cb+1,w
 10417  05CE  00F1               	movwf	i1setCallBack@cb+1
 10418  05CF  0875               	movf	i1i2c_setDataCompleteCallback@cb,w
 10419  05D0  00F0               	movwf	i1setCallBack@cb
 10420  05D1  0877               	movf	i1i2c_setDataCompleteCallback@p,w
 10421  05D2  00F8               	movwf	??i1_i2c_setDataCompleteCallback
 10422  05D3  0878               	movf	??i1_i2c_setDataCompleteCallback,w
 10423  05D4  00F2               	movwf	i1setCallBack@p
 10424  05D5  3000               	movlw	0
 10425  05D6  3183  23FE         	fcall	i1_setCallBack
 10426  05D8  0008               	return
 10427  05D9                     __end_ofi1_i2c_setDataCompleteCallback:	
 10428                           
 10429                           	psect	text93
 10430  03FE                     __ptext93:	
 10431 ;; *************** function i1_setCallBack *****************
 10432 ;; Defined at:
 10433 ;;		line 453 in file "mcc_generated_files/drivers/i2c_master.c"
 10434 ;; Parameters:    Size  Location     Type
 10435 ;;  idx             1    wreg     enum E12355
 10436 ;;  cb              2    0[COMMON] PTR FTN(PTR void ,)enum 
 10437 ;;		 -> rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), rd2RegCompleteHandler(1), rd1RegCompleteHandler(1), 
 10438 ;;		 -> wr1RegCompleteHandler(1), i2c_restartWrite(1), Absolute function(1), 
 10439 ;;  p               1    2[COMMON] PTR void 
 10440 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 10441 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 10442 ;; Auto vars:     Size  Location     Type
 10443 ;;  idx             1    4[COMMON] enum E12355
 10444 ;; Return value:  Size  Location     Type
 10445 ;;                  1    wreg      void 
 10446 ;; Registers used:
 10447 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10448 ;; Tracked objects:
 10449 ;;		On entry : 0/0
 10450 ;;		On exit  : 0/0
 10451 ;;		Unchanged: 0/0
 10452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10453 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10454 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10455 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10456 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10457 ;;Total ram usage:        5 bytes
 10458 ;; Hardware stack levels used:    1
 10459 ;; This function calls:
 10460 ;;		Nothing
 10461 ;; This function is called by:
 10462 ;;		i1_i2c_setDataCompleteCallback
 10463 ;; This function uses a non-reentrant model
 10464 ;;
 10465                           
 10466                           
 10467                           ;psect for function i1_setCallBack
 10468  03FE                     i1_setCallBack:	
 10469                           
 10470                           ;incstack = 0
 10471                           ; Regs used in i1_setCallBack: [wreg+fsr1l+fsr1h+status,2+status,0]
 10472                           ;i1setCallBack@idx stored from wreg
 10473  03FE  00F4               	movwf	i1setCallBack@idx
 10474                           
 10475                           ;i2c_master.c: 455: if(cb)
 10476  03FF  0870               	movf	i1setCallBack@cb,w
 10477  0400  0471               	iorwf	i1setCallBack@cb+1,w
 10478  0401  1903               	btfsc	3,2
 10479  0402  2C14               	goto	i1l2275
 10480                           
 10481                           ;i2c_master.c: 456: {
 10482                           ;i2c_master.c: 457: i2c_status.callbackTable[idx] = cb;
 10483  0403  3574               	lslf	i1setCallBack@idx,w
 10484  0404  3ECB               	addlw	(low ((_i2c_status| 0+11)))& (0+255)
 10485  0405  0086               	movwf	6
 10486  0406  0187               	clrf	7
 10487  0407  0870               	movf	i1setCallBack@cb,w
 10488  0408  3FC0               	movwi [0]fsr1
 10489  0409  0871               	movf	i1setCallBack@cb+1,w
 10490  040A  3FC1               	movwi [1]fsr1
 10491                           
 10492                           ;i2c_master.c: 458: i2c_status.callbackPayload[idx] = p;
 10493  040B  0872               	movf	i1setCallBack@p,w
 10494  040C  00F3               	movwf	??i1_setCallBack
 10495  040D  0874               	movf	i1setCallBack@idx,w
 10496  040E  3ED7               	addlw	(low ((_i2c_status| 0+23)))& (0+255)
 10497  040F  0086               	movwf	6
 10498  0410  0187               	clrf	7
 10499  0411  0873               	movf	??i1_setCallBack,w
 10500  0412  0081               	movwf	1
 10501                           
 10502                           ;i2c_master.c: 459: }
 10503  0413  0008               	return
 10504  0414                     i1l2275:	
 10505                           
 10506                           ;i2c_master.c: 460: else
 10507                           ;i2c_master.c: 461: {
 10508                           ;i2c_master.c: 462: i2c_status.callbackTable[idx] = returnStop;
 10509  0414  3574               	lslf	i1setCallBack@idx,w
 10510  0415  3ECB               	addlw	(low ((_i2c_status| 0+11)))& (0+255)
 10511  0416  0086               	movwf	6
 10512  0417  0187               	clrf	7
 10513  0418  30AB               	movlw	low _returnStop
 10514  0419  3FC0               	movwi [0]fsr1
 10515  041A  3006               	movlw	high _returnStop
 10516  041B  3FC1               	movwi [1]fsr1
 10517                           
 10518                           ;i2c_master.c: 463: i2c_status.callbackPayload[idx] = (0);
 10519  041C  0874               	movf	i1setCallBack@idx,w
 10520  041D  3ED7               	addlw	(low ((_i2c_status| 0+23)))& (0+255)
 10521  041E  0086               	movwf	6
 10522  041F  0187               	clrf	7
 10523  0420  0181               	clrf	1
 10524  0421  0008               	return
 10525  0422                     __end_ofi1_setCallBack:	
 10526                           
 10527                           	psect	text94
 10528  0580                     __ptext94:	
 10529 ;; *************** function i1_i2c_setBuffer *****************
 10530 ;; Defined at:
 10531 ;;		line 184 in file "mcc_generated_files/drivers/i2c_master.c"
 10532 ;; Parameters:    Size  Location     Type
 10533 ;;  buffer          1    wreg     PTR void 
 10534 ;;		 -> i2c_readDataBlock@reg(1), i2c_readDataBlock@d(3), i2c_write2ByteRegister@reg(1), i2c_write2ByteRegister@data(2),
      + 
 10535 ;;		 -> i2c_read2ByteRegister@reg(1), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@reg(1), i2c_read1ByteRegist
      +er@d2(1), 
 10536 ;;		 -> i2c_write1ByteRegister@reg(1), i2c_write1ByteRegister@data(1), NULL(0), main@writebuffer(17), 
 10537 ;;  bufferSize      2    0[COMMON] unsigned int 
 10538 ;; Auto vars:     Size  Location     Type
 10539 ;;  buffer          1    3[COMMON] PTR void 
 10540 ;;		 -> i2c_readDataBlock@reg(1), i2c_readDataBlock@d(3), i2c_write2ByteRegister@reg(1), i2c_write2ByteRegister@data(2),
      + 
 10541 ;;		 -> i2c_read2ByteRegister@reg(1), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@reg(1), i2c_read1ByteRegist
      +er@d2(1), 
 10542 ;;		 -> i2c_write1ByteRegister@reg(1), i2c_write1ByteRegister@data(1), NULL(0), main@writebuffer(17), 
 10543 ;; Return value:  Size  Location     Type
 10544 ;;                  1    wreg      void 
 10545 ;; Registers used:
 10546 ;;		wreg
 10547 ;; Tracked objects:
 10548 ;;		On entry : 0/0
 10549 ;;		On exit  : 0/0
 10550 ;;		Unchanged: 0/0
 10551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10552 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10553 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10554 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10555 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10556 ;;Total ram usage:        4 bytes
 10557 ;; Hardware stack levels used:    1
 10558 ;; This function calls:
 10559 ;;		Nothing
 10560 ;; This function is called by:
 10561 ;;		i1_wr1RegCompleteHandler
 10562 ;;		i1_rd1RegCompleteHandler
 10563 ;;		i1_rd2RegCompleteHandler
 10564 ;;		i1_wr2RegCompleteHandler
 10565 ;;		i1_rdBlkRegCompleteHandler
 10566 ;; This function uses a non-reentrant model
 10567 ;;
 10568                           
 10569                           
 10570                           ;psect for function i1_i2c_setBuffer
 10571  0580                     i1_i2c_setBuffer:	
 10572                           
 10573                           ;incstack = 0
 10574                           ; Regs used in i1_i2c_setBuffer: [wreg]
 10575                           ;i1i2c_setBuffer@buffer stored from wreg
 10576  0580  00F3               	movwf	i1i2c_setBuffer@buffer
 10577                           
 10578                           ;i2c_master.c: 186: if(i2c_status.bufferFree)
 10579  0581  0021               	movlb	1	; select bank1
 10580  0582  1D40               	btfss	_i2c_status^(0+128),2
 10581  0583  0008               	return
 10582                           
 10583                           ;i2c_master.c: 187: {
 10584                           ;i2c_master.c: 188: i2c_status.data_ptr = buffer;
 10585  0584  0873               	movf	i1i2c_setBuffer@buffer,w
 10586  0585  00F2               	movwf	??i1_i2c_setBuffer
 10587  0586  0872               	movf	??i1_i2c_setBuffer,w
 10588  0587  00C2               	movwf	(low ((_i2c_status| 0+2)))^(0+128)
 10589                           
 10590                           ;i2c_master.c: 189: i2c_status.data_length = bufferSize;
 10591  0588  0871               	movf	i1i2c_setBuffer@bufferSize+1,w
 10592  0589  00C4               	movwf	((_i2c_status+1)^(0+128)+3)
 10593  058A  0870               	movf	i1i2c_setBuffer@bufferSize,w
 10594  058B  00C3               	movwf	(_i2c_status^(0+128)+3)
 10595                           
 10596                           ;i2c_master.c: 190: i2c_status.bufferFree = 0;
 10597  058C  1140               	bcf	_i2c_status^(0+128),2
 10598  058D  0008               	return
 10599  058E                     __end_ofi1_i2c_setBuffer:	
 10600                           
 10601                           	psect	text95
 10602  071B                     __ptext95:	
 10603 ;; *************** function i1_i2c_driver_stop *****************
 10604 ;; Defined at:
 10605 ;;		line 156 in file "mcc_generated_files/i2c_driver.c"
 10606 ;; Parameters:    Size  Location     Type
 10607 ;;		None
 10608 ;; Auto vars:     Size  Location     Type
 10609 ;;		None
 10610 ;; Return value:  Size  Location     Type
 10611 ;;                  1    wreg      void 
 10612 ;; Registers used:
 10613 ;;		None
 10614 ;; Tracked objects:
 10615 ;;		On entry : 0/0
 10616 ;;		On exit  : 0/0
 10617 ;;		Unchanged: 0/0
 10618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10619 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10620 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10621 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10622 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10623 ;;Total ram usage:        0 bytes
 10624 ;; Hardware stack levels used:    1
 10625 ;; This function calls:
 10626 ;;		Nothing
 10627 ;; This function is called by:
 10628 ;;		i1_do_I2C_SEND_STOP
 10629 ;; This function uses a non-reentrant model
 10630 ;;
 10631                           
 10632                           
 10633                           ;psect for function i1_i2c_driver_stop
 10634  071B                     i1_i2c_driver_stop:	
 10635                           
 10636                           ;i2c_driver.c: 158: SSP1CON2bits.PEN = 1;
 10637                           
 10638                           ;incstack = 0
 10639                           ; Regs used in i1_i2c_driver_stop: []
 10640  071B  0024               	movlb	4	; select bank4
 10641  071C  1516               	bsf	22,2	;volatile
 10642  071D  0008               	return
 10643  071E                     __end_ofi1_i2c_driver_stop:	
 10644                           
 10645                           	psect	text96
 10646  071E                     __ptext96:	
 10647 ;; *************** function i1_i2c_driver_restart *****************
 10648 ;; Defined at:
 10649 ;;		line 151 in file "mcc_generated_files/i2c_driver.c"
 10650 ;; Parameters:    Size  Location     Type
 10651 ;;		None
 10652 ;; Auto vars:     Size  Location     Type
 10653 ;;		None
 10654 ;; Return value:  Size  Location     Type
 10655 ;;                  1    wreg      void 
 10656 ;; Registers used:
 10657 ;;		None
 10658 ;; Tracked objects:
 10659 ;;		On entry : 0/0
 10660 ;;		On exit  : 0/0
 10661 ;;		Unchanged: 0/0
 10662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10663 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10664 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10665 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10666 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10667 ;;Total ram usage:        0 bytes
 10668 ;; Hardware stack levels used:    1
 10669 ;; This function calls:
 10670 ;;		Nothing
 10671 ;; This function is called by:
 10672 ;;		i1_do_I2C_SEND_RESTART_READ
 10673 ;;		i1_do_I2C_SEND_RESTART_WRITE
 10674 ;;		i1_do_I2C_SEND_RESTART
 10675 ;; This function uses a non-reentrant model
 10676 ;;
 10677                           
 10678                           
 10679                           ;psect for function i1_i2c_driver_restart
 10680  071E                     i1_i2c_driver_restart:	
 10681                           
 10682                           ;i2c_driver.c: 153: SSP1CON2bits.RSEN = 1;
 10683                           
 10684                           ;incstack = 0
 10685                           ; Regs used in i1_i2c_driver_restart: []
 10686  071E  0024               	movlb	4	; select bank4
 10687  071F  1496               	bsf	22,1	;volatile
 10688  0720  0008               	return
 10689  0721                     __end_ofi1_i2c_driver_restart:	
 10690                           
 10691                           	psect	text97
 10692  06F3                     __ptext97:	
 10693 ;; *************** function i1_i2c_driver_sendACK *****************
 10694 ;; Defined at:
 10695 ;;		line 196 in file "mcc_generated_files/i2c_driver.c"
 10696 ;; Parameters:    Size  Location     Type
 10697 ;;		None
 10698 ;; Auto vars:     Size  Location     Type
 10699 ;;		None
 10700 ;; Return value:  Size  Location     Type
 10701 ;;                  1    wreg      void 
 10702 ;; Registers used:
 10703 ;;		None
 10704 ;; Tracked objects:
 10705 ;;		On entry : 0/0
 10706 ;;		On exit  : 0/0
 10707 ;;		Unchanged: 0/0
 10708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10709 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10710 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10711 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10712 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10713 ;;Total ram usage:        0 bytes
 10714 ;; Hardware stack levels used:    1
 10715 ;; This function calls:
 10716 ;;		Nothing
 10717 ;; This function is called by:
 10718 ;;		i1_do_I2C_DO_ACK
 10719 ;;		i1_do_I2C_RX
 10720 ;; This function uses a non-reentrant model
 10721 ;;
 10722                           
 10723                           
 10724                           ;psect for function i1_i2c_driver_sendACK
 10725  06F3                     i1_i2c_driver_sendACK:	
 10726                           
 10727                           ;i2c_driver.c: 198: SSP1CON2bits.ACKDT = 0;
 10728                           
 10729                           ;incstack = 0
 10730                           ; Regs used in i1_i2c_driver_sendACK: []
 10731  06F3  0024               	movlb	4	; select bank4
 10732  06F4  1296               	bcf	22,5	;volatile
 10733                           
 10734                           ;i2c_driver.c: 199: SSP1CON2bits.ACKEN = 1;
 10735  06F5  1616               	bsf	22,4	;volatile
 10736  06F6  0008               	return
 10737  06F7                     __end_ofi1_i2c_driver_sendACK:	
 10738                           
 10739                           	psect	text98
 10740  0721                     __ptext98:	
 10741 ;; *************** function _i2c_busCollisionISR *****************
 10742 ;; Defined at:
 10743 ;;		line 435 in file "mcc_generated_files/drivers/i2c_master.c"
 10744 ;; Parameters:    Size  Location     Type
 10745 ;;		None
 10746 ;; Auto vars:     Size  Location     Type
 10747 ;;		None
 10748 ;; Return value:  Size  Location     Type
 10749 ;;                  1    wreg      void 
 10750 ;; Registers used:
 10751 ;;		status,2, status,0, pclath, cstack
 10752 ;; Tracked objects:
 10753 ;;		On entry : 0/0
 10754 ;;		On exit  : 0/0
 10755 ;;		Unchanged: 0/0
 10756 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10757 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10758 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10759 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10760 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10761 ;;Total ram usage:        0 bytes
 10762 ;; Hardware stack levels used:    1
 10763 ;; Hardware stack levels required when called:    1
 10764 ;; This function calls:
 10765 ;;		_i2c_driver_clearBusCollision
 10766 ;; This function is called by:
 10767 ;;		_i2c_open
 10768 ;;		_INTERRUPT_InterruptManager
 10769 ;; This function uses a non-reentrant model
 10770 ;;
 10771                           
 10772                           
 10773                           ;psect for function _i2c_busCollisionISR
 10774  0721                     _i2c_busCollisionISR:	
 10775                           
 10776                           ;i2c_master.c: 437: i2c_driver_clearBusCollision();
 10777                           
 10778                           ;incstack = 0
 10779                           ; Regs used in _i2c_busCollisionISR: [status,2+status,0+pclath+cstack]
 10780  0721  3187  2724         	fcall	_i2c_driver_clearBusCollision
 10781  0723  0008               	return
 10782  0724                     __end_of_i2c_busCollisionISR:	
 10783                           
 10784                           	psect	text99
 10785  0724                     __ptext99:	
 10786 ;; *************** function _i2c_driver_clearBusCollision *****************
 10787 ;; Defined at:
 10788 ;;		line 253 in file "mcc_generated_files/i2c_driver.c"
 10789 ;; Parameters:    Size  Location     Type
 10790 ;;		None
 10791 ;; Auto vars:     Size  Location     Type
 10792 ;;		None
 10793 ;; Return value:  Size  Location     Type
 10794 ;;                  1    wreg      void 
 10795 ;; Registers used:
 10796 ;;		None
 10797 ;; Tracked objects:
 10798 ;;		On entry : 0/0
 10799 ;;		On exit  : 0/0
 10800 ;;		Unchanged: 0/0
 10801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10802 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10803 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10804 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10805 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10806 ;;Total ram usage:        0 bytes
 10807 ;; Hardware stack levels used:    1
 10808 ;; This function calls:
 10809 ;;		Nothing
 10810 ;; This function is called by:
 10811 ;;		_i2c_busCollisionISR
 10812 ;; This function uses a non-reentrant model
 10813 ;;
 10814                           
 10815                           
 10816                           ;psect for function _i2c_driver_clearBusCollision
 10817  0724                     _i2c_driver_clearBusCollision:	
 10818                           
 10819                           ;i2c_driver.c: 255: PIR2bits.BCL1IF = 0;
 10820                           
 10821                           ;incstack = 0
 10822                           ; Regs used in _i2c_driver_clearBusCollision: []
 10823  0724  0020               	movlb	0	; select bank0
 10824  0725  1191               	bcf	17,3	;volatile
 10825  0726  0008               	return
 10826  0727                     __end_of_i2c_driver_clearBusCollision:	
 10827  007E                     btemp	set	126	;btemp
 10828  007E                     int$flags	set	126
 10829  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        32
    BSS         33
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     59      59
    BANK1            80      0      61
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    i2c_write1ByteRegister@data.data	PTR unsigned char  size(1) Largest target is 0

    i2c_read1ByteRegister@d2.data	PTR unsigned char  size(1) Largest target is 0

    i2c_read2ByteRegister@result.data	PTR unsigned char  size(1) Largest target is 0

    i2c_write2ByteRegister@data.data	PTR unsigned char  size(1) Largest target is 0

    do_I2C_TX$1367$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    do_I2C_RX$1373$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    do_I2C_TX_EMPTY$1379$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    i2c_ISR$1385	PTR const FTN()enum E12337 size(2) Largest target is 1
		 -> do_I2C_TX_EMPTY(), do_I2C_RX(), do_I2C_TX(), do_I2C_DO_ADDRESS_NACK(), 
		 -> do_I2C_DO_NACK_RESTART(), do_I2C_DO_NACK_STOP(), do_I2C_DO_ACK(), do_I2C_RCEN(), 
		 -> do_I2C_SEND_ADR_WRITE(), do_I2C_SEND_ADR_READ(), do_I2C_SEND_STOP(), do_I2C_SEND_RESTART(), 
		 -> do_I2C_SEND_RESTART_WRITE(), do_I2C_SEND_RESTART_READ(), do_I2C_IDLE(), do_I2C_RESET(), 

    do_I2C_TX_EMPTY$1384	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    do_I2C_TX_EMPTY$1379	PTR FTN(PTR void ,)enum E12171 size(2) Largest target is 1
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), i2c_restartWrite(), Absolute function(), returnReset(), 
		 -> returnStop(), 

    do_I2C_RX$1378	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    do_I2C_RX$1373	PTR FTN(PTR void ,)enum E12171 size(2) Largest target is 1
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), i2c_restartWrite(), Absolute function(), returnReset(), 
		 -> returnStop(), 

    do_I2C_TX$1372	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    do_I2C_TX$1367	PTR FTN(PTR void ,)enum E12171 size(2) Largest target is 1
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), i2c_restartWrite(), Absolute function(), returnReset(), 
		 -> returnStop(), 

    returnStop@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    returnReset@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    cb$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    cb$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    Absolute function$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    i2c_restartWrite@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    cb$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    S551$11$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    mssp_waitForEvent@timeout	PTR unsigned int  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    d.data	PTR unsigned char  size(1) Largest target is 0

    S816$data	PTR unsigned char  size(1) Largest target is 0

    rdBlkRegCompleteHandler@p.data	PTR unsigned char  size(1) Largest target is 0

    rdBlkRegCompleteHandler@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    wr2RegCompleteHandler@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    rd2RegCompleteHandler@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    rd1RegCompleteHandler@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    i2c_writeNBytes@data	PTR void  size(1) Largest target is 17
		 -> main@writebuffer(BANK0[17]), 

    wr1RegCompleteHandler@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    setCallBack@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    setCallBack@cb	PTR FTN(PTR void ,)enum E12171 size(2) Largest target is 1
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), i2c_restartWrite(), Absolute function(), 

    fsmStateTable	PTR const FTN()enum E12337[16] size(2) Largest target is 1
		 -> do_I2C_TX_EMPTY(), do_I2C_RX(), do_I2C_TX(), do_I2C_DO_ADDRESS_NACK(), 
		 -> do_I2C_DO_NACK_RESTART(), do_I2C_DO_NACK_STOP(), do_I2C_DO_ACK(), do_I2C_RCEN(), 
		 -> do_I2C_SEND_ADR_WRITE(), do_I2C_SEND_ADR_READ(), do_I2C_SEND_STOP(), do_I2C_SEND_RESTART(), 
		 -> do_I2C_SEND_RESTART_WRITE(), do_I2C_SEND_RESTART_READ(), do_I2C_IDLE(), do_I2C_RESET(), 

    i2c_setBuffer@buffer	PTR void  size(1) Largest target is 17
		 -> i2c_readDataBlock@reg(COMMON[1]), i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@reg(COMMON[1]), i2c_write2ByteRegister@data(COMMON[2]), 
		 -> i2c_read2ByteRegister@reg(COMMON[1]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@reg(COMMON[1]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@reg(COMMON[1]), i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), main@writebuffer(BANK0[17]), 

    i2c_setAddressNACKCallback@p	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    i2c_setAddressNACKCallback@cb	PTR FTN(PTR void ,)enum E12171 size(2) Largest target is 1
		 -> i2c_restartWrite(), 

    i2c_setDataCompleteCallback@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    i2c_setDataCompleteCallback@cb	PTR FTN(PTR void ,)enum E12171 size(2) Largest target is 1
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), Absolute function(), 

    S551$callbackPayload	PTR void [6] size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    i2c_status.callbackPayload	PTR void [6] size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    S551$callbackTable	PTR FTN(PTR void ,)enum E12171[6] size(2) Largest target is 1
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), i2c_restartWrite(), Absolute function(), returnReset(), 
		 -> returnStop(), 

    i2c_status.callbackTable	PTR FTN(PTR void ,)enum E12171[6] size(2) Largest target is 1
		 -> i1_returnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), rd2RegCompleteHandler(), 
		 -> rd1RegCompleteHandler(), wr1RegCompleteHandler(), i2c_restartWrite(), Absolute function(), 
		 -> returnReset(), returnStop(), 

    S551$data_ptr	PTR unsigned char  size(1) Largest target is 17
		 -> i2c_readDataBlock@reg(COMMON[1]), i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@reg(COMMON[1]), i2c_write2ByteRegister@data(COMMON[2]), 
		 -> i2c_read2ByteRegister@reg(COMMON[1]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@reg(COMMON[1]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@reg(COMMON[1]), i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), main@writebuffer(BANK0[17]), 

    i2c_status.data_ptr	PTR unsigned char  size(1) Largest target is 17
		 -> i2c_readDataBlock@reg(COMMON[1]), i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@reg(COMMON[1]), i2c_write2ByteRegister@data(COMMON[2]), 
		 -> i2c_read2ByteRegister@reg(COMMON[1]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@reg(COMMON[1]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@reg(COMMON[1]), i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), main@writebuffer(BANK0[17]), 

    i2c_driver_setI2cISR@f	PTR void  size(2) Largest target is 1
		 -> i2c_ISR(), 

    i2c_driver_i2cISR	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), i2c_ISR(), 

    i2c_driver_setBusCollisionISR@f	PTR void  size(2) Largest target is 1
		 -> i2c_busCollisionISR(), 

    i2c_driver_busCollisionISR	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), i2c_busCollisionISR(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->i1_i2c_ISR
    i1_i2c_ISR->i1_do_I2C_TX
    i1_do_I2C_TX->i1_i2c_driver_TXData
    i1_do_I2C_TX->i1_i2c_driver_isNACK
    i1_do_I2C_SEND_ADR_WRITE->i1_i2c_driver_TXData
    i1_do_I2C_SEND_ADR_READ->i1_i2c_driver_TXData
    i1_wr2RegCompleteHandler->i1_i2c_setDataCompleteCallback
    i1_wr1RegCompleteHandler->i1_i2c_setDataCompleteCallback
    i1_rdBlkRegCompleteHandler->i1_i2c_setDataCompleteCallback
    i1_rd2RegCompleteHandler->i1_i2c_setDataCompleteCallback
    i1_rd1RegCompleteHandler->i1_i2c_setDataCompleteCallback
    i1_i2c_setDataCompleteCallback->i1_setCallBack

Critical Paths under _main in BANK0

    _main->_i2c_writeNBytes
    _i2c_writeNBytes->_i2c_setAddressNACKCallback
    _i2c_setAddressNACKCallback->_setCallBack
    _i2c_open->_i2c_driver_setBusCollisionISR
    _i2c_open->_i2c_driver_setI2cISR
    _i2c_masterWrite->_i2c_masterOperation
    _i2c_poller->_i2c_ISR
    _i2c_ISR->_do_I2C_TX
    _do_I2C_TX->_i2c_driver_TXData
    _do_I2C_TX->_i2c_driver_isNACK
    _do_I2C_SEND_ADR_WRITE->_i2c_driver_TXData
    _do_I2C_SEND_ADR_READ->_i2c_driver_TXData
    _wr2RegCompleteHandler->_i2c_setDataCompleteCallback
    _wr1RegCompleteHandler->_i2c_setDataCompleteCallback
    _rdBlkRegCompleteHandler->_i2c_setDataCompleteCallback
    _rd2RegCompleteHandler->_i2c_setDataCompleteCallback
    _rd1RegCompleteHandler->_i2c_setDataCompleteCallback
    _i2c_setDataCompleteCallback->_setCallBack

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                46    46      0   85464
                                             13 BANK0     46    46      0
                  _SYSTEM_Initialize
                            ___awdiv
                    _i2c_writeNBytes
 ---------------------------------------------------------------------------------
 (1) _i2c_writeNBytes                                      4     1      3   82760
                                              9 BANK0      4     1      3
                          _i2c_close
                    _i2c_masterWrite
                           _i2c_open
         _i2c_setAddressNACKCallback
                      _i2c_setBuffer
 ---------------------------------------------------------------------------------
 (2) _i2c_setAddressNACKCallback                           4     1      3    1870
                                              5 BANK0      4     1      3
                        _setCallBack
 ---------------------------------------------------------------------------------
 (2) _i2c_open                                             3     3      0     366
                                              2 BANK0      3     3      0
                    _i2c_driver_open
      _i2c_driver_setBusCollisionISR
               _i2c_driver_setI2cISR
                      _mssp_clearIRQ
 ---------------------------------------------------------------------------------
 (3) _i2c_driver_setI2cISR                                 2     0      2      98
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _i2c_driver_setBusCollisionISR                        2     0      2      98
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _i2c_driver_open                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _i2c_masterWrite                                      0     0      0   78362
                _i2c_masterOperation
 ---------------------------------------------------------------------------------
 (3) _i2c_masterOperation                                  3     3      0   78362
                                              5 BANK0      3     3      0
                   _i2c_driver_start
                         _i2c_poller
                  _mssp_IRQisEnabled
 ---------------------------------------------------------------------------------
 (4) _mssp_IRQisEnabled                                    2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _i2c_poller                                           0     0      0   78192
                            _i2c_ISR
                  _mssp_waitForEvent
 ---------------------------------------------------------------------------------
 (5) _mssp_waitForEvent                                    1     1      0      50
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _i2c_ISR                                              1     1      0   78142
                                              4 BANK0      1     1      0
                      _do_I2C_DO_ACK *
             _do_I2C_DO_ADDRESS_NACK *
             _do_I2C_DO_NACK_RESTART *
                _do_I2C_DO_NACK_STOP *
                        _do_I2C_IDLE *
                        _do_I2C_RCEN *
                       _do_I2C_RESET *
                          _do_I2C_RX *
               _do_I2C_SEND_ADR_READ *
              _do_I2C_SEND_ADR_WRITE *
                _do_I2C_SEND_RESTART *
           _do_I2C_SEND_RESTART_READ *
          _do_I2C_SEND_RESTART_WRITE *
                   _do_I2C_SEND_STOP *
                          _do_I2C_TX *
                    _do_I2C_TX_EMPTY *
                  _i2c_driver_isNACK
                      _mssp_clearIRQ
 ---------------------------------------------------------------------------------
 (6) _do_I2C_TX_EMPTY                                      1     1      0   19494
                                              0 BANK0      1     1      0
                   Absolute function *
                _do_I2C_SEND_RESTART
                   _do_I2C_SEND_STOP
                   _i2c_restartWrite *
                        _mssp_setIRQ
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
                        _returnReset *
                         _returnStop *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (7) _mssp_setIRQ                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _do_I2C_TX                                            3     3      0   19616
                                              1 BANK0      3     3      0
                   Absolute function *
           _do_I2C_SEND_RESTART_READ
          _do_I2C_SEND_RESTART_WRITE
                   _do_I2C_SEND_STOP
                  _i2c_driver_TXData
                  _i2c_driver_isNACK
                   _i2c_restartWrite *
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
                        _returnReset *
                         _returnStop *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (6) _i2c_driver_isNACK                                    1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_SEND_RESTART_WRITE                            0     0      0       0
                 _i2c_driver_restart
 ---------------------------------------------------------------------------------
 (7) _do_I2C_SEND_RESTART_READ                             0     0      0       0
                 _i2c_driver_restart
 ---------------------------------------------------------------------------------
 (6) _do_I2C_SEND_ADR_WRITE                                0     0      0      22
                  _i2c_driver_TXData
 ---------------------------------------------------------------------------------
 (6) _do_I2C_SEND_ADR_READ                                 0     0      0      22
                  _i2c_driver_TXData
 ---------------------------------------------------------------------------------
 (7) _i2c_driver_TXData                                    1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _do_I2C_RX                                            1     1      0   19494
                                              0 BANK0      1     1      0
                   Absolute function *
             _do_I2C_DO_NACK_RESTART
                _do_I2C_DO_NACK_STOP
               _i2c_driver_getRXData
                 _i2c_driver_sendACK
                   _i2c_restartWrite *
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
                        _returnReset *
                         _returnStop *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (7) _i2c_driver_getRXData                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_DO_NACK_STOP                                  0     0      0       0
                _i2c_driver_sendNACK
 ---------------------------------------------------------------------------------
 (7) _do_I2C_DO_NACK_RESTART                               0     0      0       0
                _i2c_driver_sendNACK
 ---------------------------------------------------------------------------------
 (8) _i2c_driver_sendNACK                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _do_I2C_RESET                                         0     0      0       0
                _i2c_driver_resetBus
 ---------------------------------------------------------------------------------
 (7) _i2c_driver_resetBus                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _do_I2C_RCEN                                          0     0      0       0
                 _i2c_driver_startRX
 ---------------------------------------------------------------------------------
 (7) _i2c_driver_startRX                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _do_I2C_IDLE                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _do_I2C_DO_ADDRESS_NACK                               1     1      0   19494
                                              0 BANK0      1     1      0
                   Absolute function *
                _do_I2C_SEND_RESTART
                   _do_I2C_SEND_STOP
                   _i2c_restartWrite *
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
                        _returnReset *
                         _returnStop *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (7) _wr2RegCompleteHandler                                1     0      1    3852
                                              9 BANK0      1     0      1
                      _i2c_setBuffer
        _i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (7) _wr1RegCompleteHandler                                1     0      1    3852
                                              9 BANK0      1     0      1
                      _i2c_setBuffer
        _i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (7) _returnStop                                           1     0      1      76
                                              9 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (7) _returnReset                                          1     0      1       0
                                              9 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (7) _rdBlkRegCompleteHandler                              1     0      1    4010
                                              9 BANK0      1     0      1
                      _i2c_setBuffer
        _i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (7) _rd2RegCompleteHandler                                1     0      1    3852
                                              9 BANK0      1     0      1
                      _i2c_setBuffer
        _i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (7) _rd1RegCompleteHandler                                1     0      1    3852
                                              9 BANK0      1     0      1
                      _i2c_setBuffer
        _i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (8) _i2c_setDataCompleteCallback                          4     1      3    2478
                                              5 BANK0      4     1      3
                        _setCallBack
 ---------------------------------------------------------------------------------
 (3) _setCallBack                                          5     2      3     914
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (2) _i2c_setBuffer                                        4     2      2    1352
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (7) _i2c_restartWrite                                     1     0      1       0
                                              9 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (7) _do_I2C_SEND_STOP                                     0     0      0       0
                    _i2c_driver_stop
 ---------------------------------------------------------------------------------
 (8) _i2c_driver_stop                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_SEND_RESTART                                  0     0      0       0
                 _i2c_driver_restart
 ---------------------------------------------------------------------------------
 (8) _i2c_driver_restart                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (13) Absolute function(Fake)                              1     0      1       0
 ---------------------------------------------------------------------------------
 (6) _do_I2C_DO_ACK                                        0     0      0       0
                 _i2c_driver_sendACK
 ---------------------------------------------------------------------------------
 (7) _i2c_driver_sendACK                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _i2c_driver_start                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _i2c_close                                            2     2      0      24
                                              0 BANK0      2     2      0
                      _mssp_clearIRQ
                    _mssp_disableIRQ
 ---------------------------------------------------------------------------------
 (3) _mssp_disableIRQ                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _mssp_clearIRQ                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              9     5      4     604
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _INTERRUPT_InterruptManager                          1     1      0   14790
                                              5 COMMON     1     1      0
                   Absolute function *
                _i2c_busCollisionISR *
                          i1_i2c_ISR *
 ---------------------------------------------------------------------------------
 (11) i1_i2c_ISR                                           1     1      0   14790
                                              4 COMMON     1     1      0
                    i1_do_I2C_DO_ACK *
           i1_do_I2C_DO_ADDRESS_NACK *
           i1_do_I2C_DO_NACK_RESTART *
              i1_do_I2C_DO_NACK_STOP *
                      i1_do_I2C_IDLE *
                      i1_do_I2C_RCEN *
                     i1_do_I2C_RESET *
                        i1_do_I2C_RX *
             i1_do_I2C_SEND_ADR_READ *
            i1_do_I2C_SEND_ADR_WRITE *
              i1_do_I2C_SEND_RESTART *
         i1_do_I2C_SEND_RESTART_READ *
        i1_do_I2C_SEND_RESTART_WRITE *
                 i1_do_I2C_SEND_STOP *
                        i1_do_I2C_TX *
                  i1_do_I2C_TX_EMPTY *
                i1_i2c_driver_isNACK
                    i1_mssp_clearIRQ
 ---------------------------------------------------------------------------------
 (12) i1_mssp_clearIRQ                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i1_do_I2C_TX_EMPTY                                   1     1      0    3656
                                              0 COMMON     1     1      0
                   Absolute function *
              i1_do_I2C_SEND_RESTART
                 i1_do_I2C_SEND_STOP
                 i1_i2c_restartWrite *
                      i1_mssp_setIRQ
            i1_rd1RegCompleteHandler *
            i1_rd2RegCompleteHandler *
          i1_rdBlkRegCompleteHandler *
                      i1_returnReset *
                       i1_returnStop *
            i1_wr1RegCompleteHandler *
            i1_wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (13) i1_mssp_setIRQ                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i1_do_I2C_TX                                         3     3      0    3778
                                              1 COMMON     3     3      0
                   Absolute function *
         i1_do_I2C_SEND_RESTART_READ
        i1_do_I2C_SEND_RESTART_WRITE
                 i1_do_I2C_SEND_STOP
                i1_i2c_driver_TXData
                i1_i2c_driver_isNACK
                 i1_i2c_restartWrite *
            i1_rd1RegCompleteHandler *
            i1_rd2RegCompleteHandler *
          i1_rdBlkRegCompleteHandler *
                      i1_returnReset *
                       i1_returnStop *
            i1_wr1RegCompleteHandler *
            i1_wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (12) i1_i2c_driver_isNACK                                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_SEND_RESTART_WRITE                         0     0      0       0
               i1_i2c_driver_restart
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_SEND_RESTART_READ                          0     0      0       0
               i1_i2c_driver_restart
 ---------------------------------------------------------------------------------
 (12) i1_do_I2C_SEND_ADR_WRITE                             0     0      0      22
                i1_i2c_driver_TXData
 ---------------------------------------------------------------------------------
 (12) i1_do_I2C_SEND_ADR_READ                              0     0      0      22
                i1_i2c_driver_TXData
 ---------------------------------------------------------------------------------
 (13) i1_i2c_driver_TXData                                 1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) i1_do_I2C_RX                                         1     1      0    3656
                                              0 COMMON     1     1      0
                   Absolute function *
           i1_do_I2C_DO_NACK_RESTART
              i1_do_I2C_DO_NACK_STOP
             i1_i2c_driver_getRXData
               i1_i2c_driver_sendACK
                 i1_i2c_restartWrite *
            i1_rd1RegCompleteHandler *
            i1_rd2RegCompleteHandler *
          i1_rdBlkRegCompleteHandler *
                      i1_returnReset *
                       i1_returnStop *
            i1_wr1RegCompleteHandler *
            i1_wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (13) i1_i2c_driver_getRXData                              0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_DO_NACK_STOP                               0     0      0       0
              i1_i2c_driver_sendNACK
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_DO_NACK_RESTART                            0     0      0       0
              i1_i2c_driver_sendNACK
 ---------------------------------------------------------------------------------
 (14) i1_i2c_driver_sendNACK                               0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i1_do_I2C_RESET                                      0     0      0       0
              i1_i2c_driver_resetBus
 ---------------------------------------------------------------------------------
 (13) i1_i2c_driver_resetBus                               0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i1_do_I2C_RCEN                                       0     0      0       0
               i1_i2c_driver_startRX
 ---------------------------------------------------------------------------------
 (13) i1_i2c_driver_startRX                                0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i1_do_I2C_IDLE                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i1_do_I2C_DO_ADDRESS_NACK                            1     1      0    3656
                                              0 COMMON     1     1      0
                   Absolute function *
              i1_do_I2C_SEND_RESTART
                 i1_do_I2C_SEND_STOP
                 i1_i2c_restartWrite *
            i1_rd1RegCompleteHandler *
            i1_rd2RegCompleteHandler *
          i1_rdBlkRegCompleteHandler *
                      i1_returnReset *
                       i1_returnStop *
            i1_wr1RegCompleteHandler *
            i1_wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (13) i1_wr2RegCompleteHandler                             1     0      1     706
                                              9 COMMON     1     0      1
                    i1_i2c_setBuffer
      i1_i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (13) i1_wr1RegCompleteHandler                             1     0      1     706
                                              9 COMMON     1     0      1
                    i1_i2c_setBuffer
      i1_i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (13) i1_returnStop                                        1     0      1      76
                                              9 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (13) i1_returnReset                                       1     0      1       0
                                              9 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (13) i1_rdBlkRegCompleteHandler                           1     0      1     756
                                              9 COMMON     1     0      1
                    i1_i2c_setBuffer
      i1_i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (13) i1_rd2RegCompleteHandler                             1     0      1     706
                                              9 COMMON     1     0      1
                    i1_i2c_setBuffer
      i1_i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (13) i1_rd1RegCompleteHandler                             1     0      1     706
                                              9 COMMON     1     0      1
                    i1_i2c_setBuffer
      i1_i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (14) i1_i2c_setDataCompleteCallback                       4     1      3     510
                                              5 COMMON     4     1      3
                      i1_setCallBack
 ---------------------------------------------------------------------------------
 (15) i1_setCallBack                                       5     2      3     206
                                              0 COMMON     5     2      3
 ---------------------------------------------------------------------------------
 (14) i1_i2c_setBuffer                                     4     2      2     174
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (13) i1_i2c_restartWrite                                  1     0      1       0
                                              9 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_SEND_STOP                                  0     0      0       0
                  i1_i2c_driver_stop
 ---------------------------------------------------------------------------------
 (14) i1_i2c_driver_stop                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_SEND_RESTART                               0     0      0       0
               i1_i2c_driver_restart
 ---------------------------------------------------------------------------------
 (14) i1_i2c_driver_restart                                0     0      0       0
 ---------------------------------------------------------------------------------
 (13) Absolute function(Fake)                              1     0      1       0
 ---------------------------------------------------------------------------------
 (12) i1_do_I2C_DO_ACK                                     0     0      0       0
               i1_i2c_driver_sendACK
 ---------------------------------------------------------------------------------
 (13) i1_i2c_driver_sendACK                                0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _i2c_busCollisionISR                                 0     0      0       0
       _i2c_driver_clearBusCollision
 ---------------------------------------------------------------------------------
 (12) _i2c_driver_clearBusCollision                        0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SYSTEM_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
   ___awdiv
   _i2c_writeNBytes
     _i2c_close
       _mssp_clearIRQ
       _mssp_disableIRQ
     _i2c_masterWrite
       _i2c_masterOperation
         _i2c_driver_start
         _i2c_poller
           _i2c_ISR
             _do_I2C_DO_ACK *
               _i2c_driver_sendACK
             _do_I2C_DO_ADDRESS_NACK *
               Absolute function(Fake) *
               _do_I2C_SEND_RESTART *
                 _i2c_driver_restart
               _do_I2C_SEND_STOP *
                 _i2c_driver_stop
               _i2c_restartWrite *
               _rd1RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _rd2RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _rdBlkRegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _returnReset *
               _returnStop *
               _wr1RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _wr2RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
             _do_I2C_DO_NACK_RESTART *
               _i2c_driver_sendNACK
             _do_I2C_DO_NACK_STOP *
               _i2c_driver_sendNACK
             _do_I2C_IDLE *
             _do_I2C_RCEN *
               _i2c_driver_startRX
             _do_I2C_RESET *
               _i2c_driver_resetBus
             _do_I2C_RX *
               Absolute function(Fake) *
               _do_I2C_DO_NACK_RESTART *
                 _i2c_driver_sendNACK
               _do_I2C_DO_NACK_STOP *
                 _i2c_driver_sendNACK
               _i2c_driver_getRXData *
               _i2c_driver_sendACK *
               _i2c_restartWrite *
               _rd1RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _rd2RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _rdBlkRegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _returnReset *
               _returnStop *
               _wr1RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _wr2RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
             _do_I2C_SEND_ADR_READ *
               _i2c_driver_TXData
             _do_I2C_SEND_ADR_WRITE *
               _i2c_driver_TXData
             _do_I2C_SEND_RESTART *
               _i2c_driver_restart
             _do_I2C_SEND_RESTART_READ *
               _i2c_driver_restart
             _do_I2C_SEND_RESTART_WRITE *
               _i2c_driver_restart
             _do_I2C_SEND_STOP *
               _i2c_driver_stop
             _do_I2C_TX *
               Absolute function(Fake) *
               _do_I2C_SEND_RESTART_READ *
                 _i2c_driver_restart
               _do_I2C_SEND_RESTART_WRITE *
                 _i2c_driver_restart
               _do_I2C_SEND_STOP *
                 _i2c_driver_stop
               _i2c_driver_TXData *
               _i2c_driver_isNACK *
               _i2c_restartWrite *
               _rd1RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _rd2RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _rdBlkRegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _returnReset *
               _returnStop *
               _wr1RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _wr2RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
             _do_I2C_TX_EMPTY *
               Absolute function(Fake) *
               _do_I2C_SEND_RESTART *
                 _i2c_driver_restart
               _do_I2C_SEND_STOP *
                 _i2c_driver_stop
               _i2c_restartWrite *
               _mssp_setIRQ *
               _rd1RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _rd2RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _rdBlkRegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _returnReset *
               _returnStop *
               _wr1RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _wr2RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
             _i2c_driver_isNACK *
             _mssp_clearIRQ *
           _mssp_waitForEvent
         _mssp_IRQisEnabled
     _i2c_open
       _i2c_driver_open
       _i2c_driver_setBusCollisionISR
       _i2c_driver_setI2cISR
       _mssp_clearIRQ
     _i2c_setAddressNACKCallback
       _setCallBack
     _i2c_setBuffer

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _i2c_busCollisionISR *
     _i2c_driver_clearBusCollision
   i1_i2c_ISR *
     i1_do_I2C_DO_ACK *
       i1_i2c_driver_sendACK
     i1_do_I2C_DO_ADDRESS_NACK *
       Absolute function(Fake) *
       i1_do_I2C_SEND_RESTART *
         i1_i2c_driver_restart
       i1_do_I2C_SEND_STOP *
         i1_i2c_driver_stop
       i1_i2c_restartWrite *
       i1_rd1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rd2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rdBlkRegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_returnReset *
       i1_returnStop *
       i1_wr1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_wr2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
     i1_do_I2C_DO_NACK_RESTART *
       i1_i2c_driver_sendNACK
     i1_do_I2C_DO_NACK_STOP *
       i1_i2c_driver_sendNACK
     i1_do_I2C_IDLE *
     i1_do_I2C_RCEN *
       i1_i2c_driver_startRX
     i1_do_I2C_RESET *
       i1_i2c_driver_resetBus
     i1_do_I2C_RX *
       Absolute function(Fake) *
       i1_do_I2C_DO_NACK_RESTART *
         i1_i2c_driver_sendNACK
       i1_do_I2C_DO_NACK_STOP *
         i1_i2c_driver_sendNACK
       i1_i2c_driver_getRXData *
       i1_i2c_driver_sendACK *
       i1_i2c_restartWrite *
       i1_rd1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rd2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rdBlkRegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_returnReset *
       i1_returnStop *
       i1_wr1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_wr2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
     i1_do_I2C_SEND_ADR_READ *
       i1_i2c_driver_TXData
     i1_do_I2C_SEND_ADR_WRITE *
       i1_i2c_driver_TXData
     i1_do_I2C_SEND_RESTART *
       i1_i2c_driver_restart
     i1_do_I2C_SEND_RESTART_READ *
       i1_i2c_driver_restart
     i1_do_I2C_SEND_RESTART_WRITE *
       i1_i2c_driver_restart
     i1_do_I2C_SEND_STOP *
       i1_i2c_driver_stop
     i1_do_I2C_TX *
       Absolute function(Fake) *
       i1_do_I2C_SEND_RESTART_READ *
         i1_i2c_driver_restart
       i1_do_I2C_SEND_RESTART_WRITE *
         i1_i2c_driver_restart
       i1_do_I2C_SEND_STOP *
         i1_i2c_driver_stop
       i1_i2c_driver_TXData *
       i1_i2c_driver_isNACK *
       i1_i2c_restartWrite *
       i1_rd1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rd2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rdBlkRegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_returnReset *
       i1_returnStop *
       i1_wr1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_wr2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
     i1_do_I2C_TX_EMPTY *
       Absolute function(Fake) *
       i1_do_I2C_SEND_RESTART *
         i1_i2c_driver_restart
       i1_do_I2C_SEND_STOP *
         i1_i2c_driver_stop
       i1_i2c_restartWrite *
       i1_mssp_setIRQ *
       i1_rd1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rd2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rdBlkRegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_returnReset *
       i1_returnStop *
       i1_wr1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_wr2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
     i1_i2c_driver_isNACK *
     i1_mssp_clearIRQ *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     3B      3B       5       73.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      3D       7       76.3%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      82      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      82      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Apr 10 16:12:30 2018

            __end_of_i2c_driver_restart 0706                     i1_i2c_driver_isNACK 05C1  
                          returnReset@p 0029              __end_of_i2c_driver_startRX 0700  
         _do_I2C_SEND_RESTART$intlevel0 0650                             __CFG_CP$OFF 0000  
                                    l55 05E7                         i1_mssp_clearIRQ 070F  
                          ___awdiv@sign 0026                    __size_of_do_I2C_IDLE 0009  
                   _do_I2C_SEND_RESTART 064C                    __size_of_do_I2C_RCEN 000A  
                  __end_ofi1_returnStop 072D                    ?i1_i2c_driver_TXData 0070  
                           i1_do_I2C_RX 0284                             i1_do_I2C_TX 01F4  
                           __CFG_LVP$ON 0000                    i1_i2c_driver_sendACK 06F3  
                                   l341 04B9                                     l334 01F1  
                                   l415 0186                                     l431 025F  
              i1_do_I2C_DO_NACK_RESTART 06D3                                     u915 0125  
                                   u935 012F                                     u945 0139  
                                   u955 0141            __size_of_i2c_masterOperation 0024  
                  _returnStop$intlevel0 06AF                    i1_i2c_driver_restart 071E  
         i2c_setDataCompleteCallback@cb 0025                ?i1_rd2RegCompleteHandler 0079  
                 __size_of_do_I2C_RESET 000B                            __CFG_BORV$LO 0000  
                                   wreg 0009                            __CFG_IESO$ON 0000  
                  i1_i2c_driver_startRX 0718                   __end_ofi1_returnReset 072B  
                  ?i1_i2c_driver_isNACK 0070                ?i1_wr2RegCompleteHandler 0079  
                       main@writebuffer 0033         ??i1_i2c_setDataCompleteCallback 0078  
                i1_i2c_driver_getRXData 0715                   __end_ofi1_mssp_setIRQ 0715  
                          __CFG_ZCD$OFF 0000                 ??_rd2RegCompleteHandler 002A  
                                  l2033 0658                   i1_i2c_driver_sendNACK 06EF  
                                  l2107 0488                                    l2115 05FE  
                                  l2027 0660                                    l2051 0638  
                                  l2125 0627                                    l2045 0648  
                                  l2133 05B9                                    l2141 05F3  
                                  l2063 06AF                                    l2071 06A3  
                                  l2039 0650                                    l2057 0630  
                                  l2067 06A9                                    l2075 0503  
                                  l2083 04ED                                    l2091 04D7  
                                  l2149 061D                                    l2157 0640  
                                  l2099 0519                                    l4301 0242  
                                  l2705 011A                                    l2731 0151  
                                  l2723 0140                                    l2715 0122  
                                  l4315 0261                           i1returnStop@p 0079  
                                  l2717 012E                                    l4333 02CC  
                                  l4325 0267                                    l2727 0149  
                                  l4327 02C6                                    l4263 0300  
                                  l4255 02F4                                    l4271 015A  
                                  l4319 0264                                    l4329 02C9  
                                  l4345 02D3                                    l4601 00B2  
                                  l4339 02D0                                    l4259 02FD  
                                  l4283 0166                                    l4275 0160  
                                  l4355 03A5                                    l4347 0394  
                                  l4363 05D9                                    l4269 0303  
                                  l4381 03FB                                    l4279 0163  
                                  l4375 03EB                                    l4527 0389  
                                  l4519 036C                                    l4607 00F7  
                                  l4297 019F                                    l4289 0169  
                                  l4377 03F1                                    l2699 010F  
                                  l1995 03CC                                    l4573 005C  
                                  l4583 0072                                    l4567 004F  
                                  l4593 00AA                                    l4589 0081  
                                  _LATA 010C                                    _LATB 010D  
                                  _LATC 010E                                    u3087 05EB  
                                  u2904 0099                                    u2905 0097  
                                  u2894 008D                                    u2895 008B  
                  ?_do_I2C_SEND_RESTART 0070                                    _WPUA 020C  
                                  _WPUB 020D                                    _WPUC 020E  
               ??_wr2RegCompleteHandler 002A                            __CFG_WRT$OFF 0000  
                         __CFG_FCMEN$ON 0000                   i1_i2c_driver_resetBus 072E  
     __size_of_do_I2C_SEND_RESTART_READ 0008               ?_do_I2C_SEND_RESTART_READ 0070  
                       ??_mssp_clearIRQ 0020                                    _main 0044  
             __size_of_do_I2C_SEND_STOP 0008                  __size_of_do_I2C_DO_ACK 0008  
                                  fsr0h 0005                                    fsr1h 0007  
                                  indf0 0000                                    fsr0l 0004  
                                  indf1 0001                                    fsr1l 0006  
                                  btemp 007E                       ??i1_do_I2C_DO_ACK 0070  
                         __CFG_BOREN$ON 0000                   ?_do_I2C_SEND_ADR_READ 0070  
              __size_of_i2c_writeNBytes 0026                                    start 0027  
                         _i2c_setBuffer 052B                           __CFG_MCLRE$ON 0000  
                       __end_of_i2c_ISR 03B5        __size_of_rdBlkRegCompleteHandler 001D  
              ??_do_I2C_DO_NACK_RESTART 0020                           i1_do_I2C_IDLE 06BD  
                         i1_do_I2C_RCEN 06B7                            _do_I2C_RESET 05FA  
                        i1returnReset@p 0079                           __CFG_PLLEN$ON 0000  
        __size_of_OSCILLATOR_Initialize 0007             i2c_setAddressNACKCallback@p 0027  
                 ??i1_i2c_driver_TXData 0070           __end_of_OSCILLATOR_Initialize 0673  
                 ?i1_i2c_driver_sendACK 0070                                   ?_main 0070  
                       __end_of___awdiv 0156                           __CFG_WDTE$OFF 0000  
              __size_of_mssp_disableIRQ 0003                         ___awdiv@divisor 0020  
                                 i1l163 0017                                   i1l415 021F  
                                 i1l431 029E                                   i1l168 0022  
                       ___awdiv@counter 0025                   ?i1_i2c_driver_restart 0070  
                                 _TRISA 008C                                   _TRISB 008D  
                                 _TRISC 008E                   ?i1_i2c_driver_startRX 0070  
                 ??i1_i2c_driver_isNACK 0070                             i2c_open@ret 0024  
                    __size_ofi1_i2c_ISR 001F                    _i2c_driver_getRXData 06FA  
          ?i1_do_I2C_SEND_RESTART_WRITE 0070              ?_do_I2C_SEND_RESTART_WRITE 0070  
                 ??_do_I2C_SEND_RESTART 0020                                   main@i 0058  
                                 main@x 0056                                   main@y 0054  
                                 pclath 000A              _i2c_driver_busCollisionISR 007C  
                ?_do_I2C_SEND_ADR_WRITE 0070                                   status 0003  
                                 wtemp0 007E                      i2c_driver_TXData@d 0020  
             __size_of_i2c_driver_start 0003                          ?_i2c_setBuffer 0020  
                          ?_setCallBack 0020                 __end_ofi1_mssp_clearIRQ 0712  
                         _fsmStateTable 00A0                         __initialization 0029  
        __size_ofi1_do_I2C_SEND_RESTART 0004                              _i2c_poller 05D9  
         __end_ofi1_do_I2C_SEND_RESTART 06E7                              _i2c_status 00C0  
                        ?i1_do_I2C_IDLE 0070                            __end_of_main 0104  
                        ?i1_do_I2C_RCEN 0070              __end_ofi1_do_I2C_SEND_STOP 06E3  
                      __end_of_i2c_open 01F4                    _i2c_driver_setI2cISR 068D  
                        __CFG_LPBOR$OFF 0000             ?_INTERRUPT_InterruptManager 0070  
       __end_ofi1_rd2RegCompleteHandler 0550                           setCallBack@cb 0020  
                        i1_do_I2C_RESET 067A                           _do_I2C_DO_ACK 063C  
                                ??_main 002D                           _do_I2C_TX$754 0022  
                     ?_i2c_restartWrite 0029         __end_ofi1_wr2RegCompleteHandler 0580  
                          i2c_close@ret 0021                         _i2c_driver_open 0605  
                    ??_i2c_restartWrite 002A                         _i2c_driver_stop 0700  
               ?_do_I2C_DO_ADDRESS_NACK 0070                  ?i1_i2c_driver_sendNACK 0070  
                 ?_i2c_driver_getRXData 0070                        ___awdiv@dividend 0022  
       i1i2c_setDataCompleteCallback@cb 0075                                  _ANSELA 018C  
                                _ANSELB 018D                                  _ANSELC 018E  
                                _BORCON 0116                 ?i1_do_I2C_SEND_ADR_READ 0070  
                ?i1_i2c_driver_resetBus 0070                                  _RB4PPS 0E9C  
                                _RB6PPS 0E9E                                  _ODCONA 028C  
                                _ODCONB 028D                                  i1l2403 0727  
                                _ODCONC 028E                                  i1l2431 0570  
                                i1l2407 0560                                  i1l2415 0550  
                                i1l2423 0540                                  i1l2275 0414  
                                i1l2531 067A                                  i1l2371 06E3  
                                i1l2541 06BD                                  i1l2365 06E7  
                                i1l2439 04BC                                  i1l2359 06EB  
                                i1l2383 06D7                                  i1l2377 06DF  
                                i1l2395 072B                                  i1l2549 0664  
                                i1l2557 0673                                  i1l2565 06B7  
                                i1l2573 06DB                                  i1l2389 06D3  
                                i1l2399 0729                                  i1l4503 0320  
                                i1l4433 042C                                  i1l4425 0422  
                                i1l4441 01F4                                  i1l4515 0327  
                                i1l4509 0324                                  i1l4429 0429  
                                i1l4453 0200                                  i1l4445 01FA  
                                i1l4541 0475                                  i1l4533 0465  
                                i1l4439 042F                                  i1l4471 0284  
                                i1l4449 01FD                                  i1l4467 0238  
                                i1l4459 0203                                  i1l4485 02A0  
                                i1l4495 02A6                                  i1l4497 031A  
                                i1l4489 02A3                                  i1l4499 031D  
         ??i1_do_I2C_SEND_RESTART_WRITE 0070                      __size_of_i2c_close 001B  
                                _OSCCON 0099                 i1_rd1RegCompleteHandler 0550  
                ??_do_I2C_SEND_ADR_READ 0021                rdBlkRegCompleteHandler@p 0029  
                             ??_i2c_ISR 0024                 i1_wr1RegCompleteHandler 0560  
           ??i1_rdBlkRegCompleteHandler 007A                          __CFG_PWRTE$OFF 0000  
                   _do_I2C_RX$intlevel0 0242                   __size_ofi1_returnStop 0002  
           __end_of_do_I2C_DO_NACK_STOP 063C                       __end_ofi1_i2c_ISR 0484  
   __end_of_i2c_setDataCompleteCallback 05B5             _i2c_setDataCompleteCallback 05A8  
                       _i2c_masterWrite 06C7                               ??___awdiv 0024  
                        __CFG_STVREN$ON 0000         __size_of_do_I2C_DO_NACK_RESTART 0008  
                 ?_i2c_driver_setI2cISR 0020                       ??_i2c_writeNBytes 002C  
                __end_ofi1_do_I2C_RESET 0681                         i1_i2c_setBuffer 0580  
                ??i1_i2c_driver_sendACK 0070                        ___awdiv@quotient 0027  
                        ?_do_I2C_DO_ACK 0070             __size_ofi1_i2c_restartWrite 0002  
                ??i1_i2c_driver_restart 0070                  ??i1_i2c_driver_startRX 0070  
        __end_of_do_I2C_DO_ADDRESS_NACK 031A             ?_i2c_setAddressNACKCallback 0025  
                          ?_returnReset 0029           _do_I2C_DO_NACK_STOP$intlevel0 0638  
            i1rdBlkRegCompleteHandler@p 0079       __size_ofi1_do_I2C_DO_ADDRESS_NACK 0023  
                          ?_mssp_setIRQ 0070          __end_ofi1_do_I2C_SEND_ADR_READ 066C  
                     ??_mssp_disableIRQ 0020               ?i1_do_I2C_DO_ADDRESS_NACK 0070  
                     i1_do_I2C_TX_EMPTY 031A                       _SYSTEM_Initialize 06B1  
               __end_of__initialization 0040                         ??_i2c_setBuffer 0022  
        _do_I2C_SEND_ADR_READ$intlevel0 05B9                        _do_I2C_SEND_STOP 0644  
                          i1_returnStop 072B                   i1_do_I2C_DO_NACK_STOP 06D7  
                    __size_of_do_I2C_RX 0046                      __size_of_do_I2C_TX 0050  
                    ?i1_do_I2C_TX_EMPTY 0070                      ?_SYSTEM_Initialize 0070  
     _rdBlkRegCompleteHandler$intlevel0 0488                     _i2c_masterOperation 03DA  
              __size_of_do_I2C_TX_EMPTY 002E                        ?i1_mssp_clearIRQ 0070  
                       ??i1_do_I2C_IDLE 0070                         ??i1_do_I2C_RCEN 0070  
               _rdBlkRegCompleteHandler 0484                             ?_i2c_poller 0070  
                        __pcstackCOMMON 0070              ??i1_do_I2C_DO_NACK_RESTART 0070  
                   _do_I2C_TX$intlevel0 015A                     ??i1_do_I2C_TX_EMPTY 0070  
                          __pidataBANK1 0445                     ??_SYSTEM_Initialize 0020  
                       ?i1_do_I2C_RESET 0070                 __end_of_i2c_driver_open 060F  
               __end_of_i2c_driver_stop 0703                       __end_of_i2c_close 04BC  
                          ?i1_do_I2C_RX 0070                            ?i1_do_I2C_TX 0070  
                   i1i2c_restartWrite@p 0079                      _i2c_driver_sendACK 06CF  
             i1_rdBlkRegCompleteHandler 04BC                    ?_i2c_masterOperation 0070  
        i1i2c_setDataCompleteCallback@p 0077                 ?i1_i2c_driver_getRXData 0070  
                        _OPTION_REGbits 0095            ??i1_do_I2C_SEND_RESTART_READ 0070  
                    _i2c_driver_restart 0703                  __size_ofi1_setCallBack 0024  
                    _i2c_driver_startRX 06FD                  ??_i2c_driver_getRXData 0020  
                       i1setCallBack@cb 0070                i1rd1RegCompleteHandler@p 0079  
                       i1_do_I2C_DO_ACK 06DB                         i1_do_I2C_TX$754 0072  
                   ?_i2c_driver_sendACK 0070                          setCallBack@idx 0024  
             __end_ofi1_do_I2C_TX_EMPTY 0343                  _do_I2C_DO_NACK_RESTART 062C  
             __end_of_SYSTEM_Initialize 06B7               ??i1_rd1RegCompleteHandler 007A  
                   ?_i2c_driver_restart 0070                              __pbssBANK1 00C0  
             ??i1_wr1RegCompleteHandler 007A                     ?_i2c_driver_startRX 0070  
        __size_of_rd2RegCompleteHandler 0016                               ?_i2c_open 0070  
         __end_of_rd2RegCompleteHandler 04E9          __size_of_wr2RegCompleteHandler 0016  
      __size_ofi1_rd2RegCompleteHandler 0010           __end_of_wr2RegCompleteHandler 052B  
               __end_of_i2c_masterWrite 06CB                i1wr1RegCompleteHandler@p 0079  
                      _i2c_driver_start 0706                   _rd1RegCompleteHandler 04E9  
               __end_ofi1_i2c_setBuffer 058E        __size_ofi1_wr2RegCompleteHandler 0010  
                 _do_I2C_IDLE$intlevel0 0627                   _wr1RegCompleteHandler 04FF  
          __size_of_i2c_busCollisionISR 0003         _wr1RegCompleteHandler$intlevel0 0503  
       _rd1RegCompleteHandler$intlevel0 04ED                              __pmaintext 0044  
                         ??_do_I2C_IDLE 0020                    __size_of_setCallBack 0025  
                         ??_do_I2C_RCEN 0020                    ??_i2c_driver_sendACK 0020  
                ??_i2c_driver_setI2cISR 0022                         __CFG_PPS1WAY$ON 0000  
                       ??_do_I2C_DO_ACK 0020                              __pintentry 0004  
                  ??_i2c_driver_restart 0020            __size_of_i2c_driver_sendNACK 0004  
                  ??_i2c_driver_startRX 0020                     i2c_setBuffer@buffer 0023  
          __size_of_i2c_driver_resetBus 0001          __end_ofi1_i2c_driver_getRXData 0718  
        ?_i2c_driver_setBusCollisionISR 0020                   ??_i2c_masterOperation 0025  
                     __end_of_do_I2C_RX 0284                       __end_of_do_I2C_TX 01A6  
              ?i1_do_I2C_SEND_ADR_WRITE 0070                         __CFG_WDTCCS$SWC 0000  
                               _OSCTUNE 0098                                 _SSP1ADD 0212  
                               _SSP1BUF 0211                                 _SSP1MSK 0213  
                   __size_of_i2c_poller 000B                 ??_do_I2C_SEND_ADR_WRITE 0021  
   _do_I2C_SEND_RESTART_WRITE$intlevel0 0658             ??_do_I2C_SEND_RESTART_WRITE 0020  
                ?i1_do_I2C_DO_NACK_STOP 0070                       _mssp_IRQisEnabled 060F  
                            ??_i2c_open 0022                                 _i2c_ISR 0390  
             ??_rdBlkRegCompleteHandler 002A                       _mssp_waitForEvent 05E4  
                    ?_mssp_IRQisEnabled 0070                   __end_of_mssp_clearIRQ 070F  
                 _returnReset$intlevel0 06A9                   _do_I2C_RCEN$intlevel0 061D  
                         i1_setCallBack 03FE                      ?_mssp_waitForEvent 0070  
      _do_I2C_DO_ADDRESS_NACK$intlevel0 02F4             __end_ofi1_i2c_driver_TXData 06C7  
   __size_of_i2c_setAddressNACKCallback 000D                  __size_ofi1_returnReset 0002  
                   ??_mssp_IRQisEnabled 0020                                 ___awdiv 0104  
                __size_ofi1_mssp_setIRQ 0003                       ??_do_I2C_TX_EMPTY 0020  
                      ?_i2c_driver_open 0070                     ??_mssp_waitForEvent 0020  
                      ?_i2c_driver_stop 0070                  i2c_writeNBytes@address 002C  
           __end_ofi1_i2c_driver_isNACK 05CD                 __end_ofi1_do_I2C_DO_ACK 06DF  
                               __ptext1 036A                                 __ptext2 058E  
                               __ptext3 01A6                                 __ptext4 068D  
                               __ptext5 0693                                 __ptext6 0605  
                               __ptext7 06C7                                 __ptext8 03DA  
                               __ptext9 060F                     __end_of_do_I2C_IDLE 062C  
                   __end_of_do_I2C_RCEN 0623                   _OSCILLATOR_Initialize 066C  
               ??i1_i2c_driver_sendNACK 0070             __end_of_do_I2C_SEND_RESTART 0654  
              ??_PIN_MANAGER_Initialize 0020                  i2c_masterOperation@ret 0027  
               ??i1_i2c_driver_resetBus 0070                      i1_do_I2C_SEND_STOP 06DF  
            _do_I2C_SEND_STOP$intlevel0 0648              __size_ofi1_do_I2C_TX_EMPTY 0029  
              _do_I2C_SEND_RESTART_READ 065C              __size_of_SYSTEM_Initialize 0006  
                               clrloop0 0688               __end_of_mssp_IRQisEnabled 0619  
                  __size_of_returnReset 0006                    end_of_initialization 0040  
                  __size_of_mssp_setIRQ 0003               __end_of_mssp_waitForEvent 05EF  
             __size_of_i2c_restartWrite 0006                                 init_ram 0681  
                   ?i1_do_I2C_SEND_STOP 0070                  ?_rd1RegCompleteHandler 0029  
                               initloop 0682                         _i2c_writeNBytes 036A  
                      ?_i2c_masterWrite 0070                  ?_wr1RegCompleteHandler 0029  
                        ?i1_setCallBack 0070                        ?i1_i2c_setBuffer 0070  
             _do_I2C_SEND_RESTART_WRITE 0654                   i1_do_I2C_SEND_RESTART 06E3  
      __end_ofi1_do_I2C_DO_ADDRESS_NACK 0445         __end_ofi1_do_I2C_SEND_ADR_WRITE 067A  
                       _mssp_disableIRQ 0709                               i1_i2c_ISR 0465  
                  ??i1_do_I2C_SEND_STOP 0070                              _returnStop 06AB  
       __end_of_rdBlkRegCompleteHandler 04A1                __end_of_do_I2C_SEND_STOP 064C  
    __end_ofi1_do_I2C_SEND_RESTART_READ 06EF              i1_do_I2C_SEND_RESTART_READ 06EB  
                             _SSPDATPPS 0E21                               _SSPCLKPPS 0E20  
                      __CFG_FOSC$INTOSC 0000                    __size_ofi1_do_I2C_RX 003E  
                  __size_ofi1_do_I2C_TX 004A    __size_of_i2c_setDataCompleteCallback 000D  
                         i1_returnReset 0729                             returnStop@p 0029  
                         i1_mssp_setIRQ 0712      __size_ofi1_rdBlkRegCompleteHandler 0017  
          i2c_setDataCompleteCallback@p 0027                 i1_rd2RegCompleteHandler 0540  
               i1_wr2RegCompleteHandler 0570           __size_of_do_I2C_SEND_ADR_READ 000C  
                      ??i1_do_I2C_RESET 0070                            ??_i2c_poller 0025  
                           _do_I2C_IDLE 0623                             _do_I2C_RCEN 0619  
            __end_ofi1_i2c_restartWrite 0729    __end_of_i2c_driver_clearBusCollision 0727  
 __size_of_i2c_driver_clearBusCollision 0003            _i2c_driver_clearBusCollision 0724  
                            ?i1_i2c_ISR 0070                        ?i1_do_I2C_DO_ACK 0070  
                ?_OSCILLATOR_Initialize 0070           __size_ofi1_i2c_driver_sendACK 0004  
          __size_of_do_I2C_DO_NACK_STOP 0008                __end_of_i2c_driver_start 0709  
         __size_ofi1_i2c_driver_restart 0003                 ?_do_I2C_DO_NACK_RESTART 0070  
                   start_initialization 0029                               _i2c_close 04A1  
         __size_ofi1_i2c_driver_startRX 0003                     _i2c_busCollisionISR 0721  
       __size_of_PIN_MANAGER_Initialize 0027                          ?i1_returnReset 0079  
               __end_of_i2c_writeNBytes 0390     __end_ofi1_do_I2C_SEND_RESTART_WRITE 06EB  
           i1_do_I2C_SEND_RESTART_WRITE 06E7                          ?i1_mssp_setIRQ 0070  
            __size_of_mssp_IRQisEnabled 000A                            setCallBack@p 0022  
                    __end_of_i2c_poller 05E4                     _i2c_driver_sendNACK 06CB  
                       i2c_open@address 0023                 i2c_setBuffer@bufferSize 0020  
            __size_of_mssp_waitForEvent 000B                  rd1RegCompleteHandler@p 0029  
                   _i2c_driver_resetBus 072D                         ??i1_setCallBack 0073  
                 __end_of_i2c_setBuffer 0540                       __size_of_i2c_open 004E  
 __end_ofi1_i2c_setDataCompleteCallback 05D9  __size_ofi1_i2c_setDataCompleteCallback 000C  
         i1_i2c_setDataCompleteCallback 05CD                    ?_i2c_busCollisionISR 0070  
               __end_of_mssp_disableIRQ 070C                        i1setCallBack@idx 0074  
                 __end_ofi1_do_I2C_IDLE 06C2                   __end_ofi1_do_I2C_RCEN 06BD  
             i1i2c_setBuffer@bufferSize 0070                  ?i1_do_I2C_SEND_RESTART 0070  
                wr1RegCompleteHandler@p 0029                    ?_i2c_driver_sendNACK 0070  
                         ?_do_I2C_RESET 0070                             __pdataBANK1 00A0  
             _do_I2C_TX_EMPTY$intlevel0 02C6                __size_ofi1_mssp_clearIRQ 0003  
                           ?_returnStop 0029                    ?_i2c_driver_resetBus 0070  
                     _i2c_driver_TXData 0699          __end_of_do_I2C_DO_NACK_RESTART 0634  
         ?_i2c_driver_clearBusCollision 0070                       _i2c_driver_i2cISR 007A  
              i1_do_I2C_DO_ADDRESS_NACK 0422                      ?_i2c_driver_TXData 0070  
                           __pbssCOMMON 007A                              ?_i2c_close 0070  
                             ___latbits 0002                           __pcstackBANK0 0020  
     __size_ofi1_do_I2C_DO_NACK_RESTART 0004                i1rd2RegCompleteHandler@p 0079  
                             _do_I2C_RX 023E               ?i1_do_I2C_DO_NACK_RESTART 0070  
                             _do_I2C_TX 0156                       _i2c_driver_isNACK 059B  
               ??i1_do_I2C_DO_NACK_STOP 0070               ??i1_rd2RegCompleteHandler 007A  
         __size_of_i2c_driver_getRXData 0003                      ?_i2c_driver_isNACK 0070  
                   ??_i2c_driver_TXData 0020          __size_of_do_I2C_SEND_ADR_WRITE 000B  
             ??i1_wr2RegCompleteHandler 007A           __end_of_do_I2C_SEND_ADR_WRITE 05FA  
       ??_i2c_driver_setBusCollisionISR 0022                          i1setCallBack@p 0072  
                      _i2c_restartWrite 069F              _i2c_restartWrite$intlevel0 06A3  
                              ?_i2c_ISR 0070         _do_I2C_SEND_ADR_WRITE$intlevel0 05F3  
      __size_ofi1_do_I2C_SEND_ADR_WRITE 0007                         _do_I2C_TX_EMPTY 02C2  
                         ??_setCallBack 0023                i1wr2RegCompleteHandler@p 0079  
                 _rd2RegCompleteHandler 04D3                     ??_i2c_driver_isNACK 0020  
                 ??_i2c_busCollisionISR 0070                  _PIN_MANAGER_Initialize 0343  
                 _wr2RegCompleteHandler 0515             __size_of_i2c_driver_sendACK 0004  
                        ??_do_I2C_RESET 0020                                ?___awdiv 0020  
                 ??_i2c_driver_sendNACK 0020             __end_of_i2c_masterOperation 03FE  
              ??_do_I2C_DO_ADDRESS_NACK 0020           __size_of_i2c_driver_setI2cISR 0006  
           __size_of_i2c_driver_restart 0003               __end_of_i2c_driver_TXData 069F  
                 __end_of_do_I2C_DO_ACK 0644                   ??_i2c_driver_resetBus 0020  
           __size_of_i2c_driver_startRX 0003                             ??i1_i2c_ISR 0074  
          ??_INTERRUPT_InterruptManager 0075              ??_do_I2C_SEND_RESTART_READ 0020  
              ??i1_do_I2C_SEND_ADR_READ 0071                         ??i1_returnReset 007A  
             __end_of_i2c_driver_isNACK 05A8                ?i1_rd1RegCompleteHandler 0079  
    __size_of_do_I2C_SEND_RESTART_WRITE 0008                         ??i1_mssp_setIRQ 0070  
        __size_ofi1_i2c_driver_sendNACK 0004           __end_ofi1_i2c_driver_sendNACK 06F3  
              ?i1_wr1RegCompleteHandler 0079                              ?_do_I2C_RX 0070  
                            ?_do_I2C_TX 0070                        ?_i2c_writeNBytes 0029  
        __size_ofi1_i2c_driver_resetBus 0001           __end_ofi1_i2c_driver_resetBus 072F  
               ??_rd1RegCompleteHandler 002A                       _i2c_ISR$intlevel0 0394  
               ??_wr1RegCompleteHandler 002A                       main@displaybuffer 0044  
                 i2c_driver_setI2cISR@f 0020                     __size_of_returnStop 0006  
                             clear_ram0 0687                                _PIE1bits 0090  
                              _PIE2bits 0091     __size_of_INTERRUPT_InterruptManager 0023  
                              _PIR1bits 0010                                _PIR2bits 0011  
                      ?_mssp_disableIRQ 0070                    __CFG_WDTCPS$WDTCPS1F 0000  
                              _SSP1CON1 0215                                _SSP1CON2 0216  
          ?_i2c_setDataCompleteCallback 0025          ?i1_i2c_setDataCompleteCallback 0075  
                              _SSP1STAT 0214                     __end_of_setCallBack 03DA  
                             main@i_461 005A                               main@i_458 0059  
          __size_ofi1_i2c_driver_TXData 0005                       i1_i2c_driver_stop 071B  
          i2c_setAddressNACKCallback@cb 0025                       ?_do_I2C_SEND_STOP 0070  
           ?i1_do_I2C_SEND_RESTART_READ 0070                      ?i1_i2c_driver_stop 0070  
                           ??_i2c_close 0020                           ??_returnReset 002A  
                    ??_do_I2C_SEND_STOP 0020                  __size_of_mssp_clearIRQ 0003  
              __size_of_i2c_driver_open 000A                       ??i1_mssp_clearIRQ 0070  
          ??_i2c_setAddressNACKCallback 0028                __size_of_i2c_driver_stop 0003  
     __end_of_do_I2C_SEND_RESTART_WRITE 065C            __size_ofi1_i2c_driver_isNACK 000C  
                         ??_mssp_setIRQ 0020          ??_i2c_driver_clearBusCollision 0070  
               __end_of_do_I2C_TX_EMPTY 02F0                ?_rdBlkRegCompleteHandler 0029  
                   ??i1_i2c_driver_stop 0070            __size_of_do_I2C_SEND_RESTART 0008  
               _do_I2C_DO_ACK$intlevel0 0640                                _i2c_open 01A6  
                         ?i1_returnStop 0079                  ?_rd2RegCompleteHandler 0029  
                   _do_I2C_DO_NACK_STOP 0634                        __size_of_i2c_ISR 0025  
                ?_wr2RegCompleteHandler 0029         _wr2RegCompleteHandler$intlevel0 0519  
       _rd2RegCompleteHandler$intlevel0 04D7   __end_of_i2c_driver_setBusCollisionISR 0699  
__size_of_i2c_driver_setBusCollisionISR 0006           _i2c_driver_setBusCollisionISR 0693  
                   i2c_writeNBytes@data 0029                            ?_do_I2C_IDLE 0070  
              ??i1_i2c_driver_getRXData 0070                            ?_do_I2C_RCEN 0070  
               ??_OSCILLATOR_Initialize 0020                        __size_of___awdiv 0052  
              __size_of_i2c_masterWrite 0004              __size_of_i2c_driver_TXData 0006  
       __size_of_do_I2C_DO_ADDRESS_NACK 002A               __end_ofi1_i2c_driver_stop 071E  
                 i1i2c_setBuffer@buffer 0073           ??_i2c_setDataCompleteCallback 0028  
       __end_ofi1_rd1RegCompleteHandler 0560                __size_ofi1_i2c_setBuffer 000E  
                         ??i1_do_I2C_RX 0070                           ??i1_do_I2C_TX 0071  
    _do_I2C_SEND_RESTART_READ$intlevel0 0660             __size_ofi1_do_I2C_SEND_STOP 0004  
       __end_ofi1_wr1RegCompleteHandler 0570                    ?_do_I2C_DO_NACK_STOP 0070  
          __end_of_do_I2C_SEND_ADR_READ 05C1         __size_ofi1_do_I2C_SEND_ADR_READ 0008  
            __size_of_i2c_driver_isNACK 000D                       ?_i2c_driver_start 0070  
                    i1_i2c_restartWrite 0727                             ??_do_I2C_RX 0020  
                           ??_do_I2C_TX 0021                      ??_i2c_driver_start 0020  
                              __ptext10 05D9                                __ptext11 05E4  
                              __ptext20 05EF                                __ptext12 0390  
                              __ptext21 05B5                                __ptext13 023E  
                              __ptext30 059B                                __ptext22 0644  
                              __ptext14 0156                                __ptext31 0699  
                              __ptext23 064C                                __ptext15 02F0  
                              __ptext40 069F                                __ptext32 06FA  
                              __ptext24 0654                                __ptext16 062C  
                              __ptext41 06A5                                __ptext33 06CB  
                              __ptext25 065C                                __ptext17 0634  
                              __ptext50 0706                                __ptext42 06AB  
                              __ptext34 072D                                __ptext26 0623  
                              __ptext18 063C                                __ptext51 04A1  
                              __ptext43 0515                                __ptext35 06FD  
                              __ptext27 05FA                                __ptext19 0619  
                              __ptext60 070F                                __ptext52 0709  
                              __ptext44 05A8                                __ptext36 0484  
                              __ptext28 02C2                                __ptext61 0284  
                              __ptext53 070C                                __ptext45 03B5  
                              __ptext37 04D3                                __ptext29 06F7  
                              __ptext70 06DF                                __ptext62 01F4  
                              __ptext54 0104                                __ptext46 052B  
                              __ptext38 04E9                                __ptext71 06E3  
                              __ptext63 0422                                __ptext55 06B1  
                              __ptext47 0700                                __ptext39 04FF  
                              __ptext80 0715                                __ptext72 06E7  
                              __ptext64 06D3                                __ptext56 0343  
                              __ptext48 0703                                __ptext81 06EF  
                              __ptext73 06EB                                __ptext65 06D7  
                              __ptext57 066C                                __ptext49 06CF  
                              __ptext90 072B                                __ptext82 072E  
                              __ptext74 06BD                                __ptext66 06DB  
                              __ptext91 0570                                __ptext83 0718  
                              __ptext75 067A                                __ptext67 06B7  
                              __ptext59 0465                                __ptext92 05CD  
                              __ptext84 04BC                                __ptext76 031A  
                              __ptext68 0673                                __ptext93 03FE  
                              __ptext85 0540                                __ptext77 0712  
                              __ptext69 0664                                __ptext94 0580  
                              __ptext86 0550                                __ptext78 05C1  
                              __ptext95 071B                                __ptext87 0560  
                              __ptext79 06C2                                __ptext96 071E  
                              __ptext88 0727                                __ptext97 06F3  
                              __ptext89 0729                                __ptext98 0721  
                              __ptext99 0724                            _SSP1CON1bits 0215  
                          _SSP1CON2bits 0216                    __end_of_do_I2C_RESET 0605  
                        ??i1_returnStop 007A                 i1_do_I2C_SEND_ADR_WRITE 0673  
                   ?i1_i2c_restartWrite 0079            __end_ofi1_i2c_driver_sendACK 06F7  
                   __end_of_returnReset 06AB                           __size_of_main 00C0  
                   __end_of_mssp_setIRQ 06FA            __end_ofi1_i2c_driver_restart 0721  
                  i1i2c_driver_TXData@d 0070            __end_ofi1_i2c_driver_startRX 071B  
                  __CFG_WDTCWS$WDTCWSSW 0000                             _setCallBack 03B5  
               ??i1_do_I2C_SEND_RESTART 0070                           _mssp_clearIRQ 070C  
               i2c_masterOperation@read 0026    __size_ofi1_do_I2C_SEND_RESTART_WRITE 0004  
                              int$flags 007E              ??i1_do_I2C_DO_ADDRESS_NACK 0070  
      __end_ofi1_do_I2C_DO_NACK_RESTART 06D7      __end_of_INTERRUPT_InterruptManager 0027  
            _INTERRUPT_InterruptManager 0004                            _SSP1STATbits 0214  
                  ??i1_i2c_restartWrite 007A        __end_of_do_I2C_SEND_RESTART_READ 0664  
                          ??_returnStop 002A                __end_of_i2c_restartWrite 06A5  
                 ??_do_I2C_DO_NACK_STOP 0020                mssp_waitForEvent@timeout 0020  
        i2c_driver_setBusCollisionISR@f 0020                              _INTCONbits 000B  
                    i2c_writeNBytes@len 002A                     __end_ofi1_do_I2C_RX 02C2  
                   __end_ofi1_do_I2C_TX 023E                __size_ofi1_do_I2C_DO_ACK 0004  
                      ?_do_I2C_TX_EMPTY 0070                  _do_I2C_DO_ADDRESS_NACK 02F0  
        __size_ofi1_do_I2C_DO_NACK_STOP 0004                                intlevel1 0000  
         __end_ofi1_do_I2C_DO_NACK_STOP 06DB                  _do_I2C_RESET$intlevel0 05FE  
                rd2RegCompleteHandler@p 0029                       ??_i2c_driver_open 0020  
                     ??_i2c_driver_stop 0020                 ?_PIN_MANAGER_Initialize 0070  
                     i2c_restartWrite@p 0029                  i1_do_I2C_SEND_ADR_READ 0664  
                     __CFG_CLKOUTEN$OFF 0000              ?i1_rdBlkRegCompleteHandler 0079  
                    __end_of_returnStop 06B1                          ?_mssp_clearIRQ 0070  
                 __end_ofi1_setCallBack 0422     __size_ofi1_do_I2C_SEND_RESTART_READ 0004  
          __end_of_i2c_driver_getRXData 06FD         __size_ofi1_i2c_driver_getRXData 0003  
                wr2RegCompleteHandler@p 0029              __size_ofi1_i2c_driver_stop 0003  
               __size_ofi1_do_I2C_RESET 0007                       ??_i2c_masterWrite 0028  
    __end_of_i2c_setAddressNACKCallback 059B              _i2c_setAddressNACKCallback 058E  
                __size_of_i2c_setBuffer 0015                       ??i1_i2c_setBuffer 0072  
                           _returnReset 06A5        _do_I2C_DO_NACK_RESTART$intlevel0 0630  
                           _mssp_setIRQ 06F7               ??i1_do_I2C_SEND_ADR_WRITE 0071  
          __end_of_i2c_driver_setI2cISR 0693                  __size_ofi1_do_I2C_IDLE 0005  
                __size_ofi1_do_I2C_RCEN 0006          __end_of_PIN_MANAGER_Initialize 036A  
           __end_of_i2c_busCollisionISR 0724          __size_of_rd1RegCompleteHandler 0016  
         __end_of_rd1RegCompleteHandler 04FF                     i1_i2c_driver_TXData 06C2  
        __size_of_wr1RegCompleteHandler 0016        __size_ofi1_rd1RegCompleteHandler 0010  
         __end_of_wr1RegCompleteHandler 0515                   _do_I2C_SEND_ADR_WRITE 05EF  
           __end_of_i2c_driver_sendNACK 06CF                    _do_I2C_SEND_ADR_READ 05B5  
     __end_ofi1_rdBlkRegCompleteHandler 04D3        __size_ofi1_wr1RegCompleteHandler 0010  
            __end_of_i2c_driver_sendACK 06D3             __end_of_i2c_driver_resetBus 072E  
