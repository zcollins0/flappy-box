

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Wed Apr 11 11:31:17 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F1619
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	inittext,global,class=CODE,delta=2
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2
    23                           	psect	text8,local,class=CODE,merge=1,delta=2
    24                           	psect	text9,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text11,local,class=CODE,merge=1,delta=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2
    28                           	psect	text13,local,class=CODE,merge=1,delta=2
    29                           	psect	text14,local,class=CODE,merge=1,inline,delta=2
    30                           	psect	text15,local,class=CODE,merge=1,inline,delta=2
    31                           	psect	text16,local,class=CODE,merge=1,inline,delta=2
    32                           	psect	text17,local,class=CODE,merge=1,delta=2
    33                           	psect	text18,local,class=CODE,merge=1,delta=2
    34                           	psect	text19,local,class=CODE,merge=1,delta=2
    35                           	psect	text20,local,class=CODE,merge=1,delta=2
    36                           	psect	text21,local,class=CODE,merge=1,delta=2
    37                           	psect	text22,local,class=CODE,merge=1,delta=2
    38                           	psect	text23,local,class=CODE,merge=1,delta=2
    39                           	psect	text24,local,class=CODE,merge=1,delta=2
    40                           	psect	text25,local,class=CODE,merge=1,delta=2
    41                           	psect	text26,local,class=CODE,merge=1,delta=2
    42                           	psect	text27,local,class=CODE,merge=1,delta=2
    43                           	psect	text28,local,class=CODE,merge=1,delta=2
    44                           	psect	text29,local,class=CODE,merge=1,delta=2
    45                           	psect	text30,local,class=CODE,merge=1,delta=2
    46                           	psect	text31,local,class=CODE,merge=1,delta=2
    47                           	psect	text32,local,class=CODE,merge=1,delta=2
    48                           	psect	text33,local,class=CODE,merge=1,delta=2
    49                           	psect	text34,local,class=CODE,merge=1,inline,delta=2
    50                           	psect	text35,local,class=CODE,merge=1,inline,delta=2
    51                           	psect	text36,local,class=CODE,merge=1,inline,delta=2
    52                           	psect	text37,local,class=CODE,merge=1,inline,delta=2
    53                           	psect	text38,local,class=CODE,merge=1,inline,delta=2
    54                           	psect	text39,local,class=CODE,merge=1,inline,delta=2
    55                           	psect	text40,local,class=CODE,merge=1,inline,delta=2
    56                           	psect	text41,local,class=CODE,merge=1,delta=2
    57                           	psect	text42,local,class=CODE,merge=1,delta=2
    58                           	psect	text43,local,class=CODE,merge=1,delta=2
    59                           	psect	text44,local,class=CODE,merge=1,delta=2
    60                           	psect	text45,local,class=CODE,merge=1,delta=2
    61                           	psect	text46,local,class=CODE,merge=1,delta=2
    62                           	psect	text47,local,class=CODE,merge=1,delta=2
    63                           	psect	text48,local,class=CODE,merge=1,delta=2
    64                           	psect	text49,local,class=CODE,merge=1,delta=2
    65                           	psect	text50,local,class=CODE,merge=1,delta=2
    66                           	psect	text51,local,class=CODE,merge=1,delta=2
    67                           	psect	text52,local,class=CODE,merge=1,inline,delta=2
    68                           	psect	text53,local,class=CODE,merge=1,inline,delta=2
    69                           	psect	text54,local,class=CODE,merge=1,inline,delta=2
    70                           	psect	text55,local,class=CODE,merge=1,inline,delta=2
    71                           	psect	text56,local,class=CODE,merge=1,delta=2
    72                           	psect	text57,local,class=CODE,merge=1,inline,delta=2
    73                           	psect	text58,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text59,local,class=CODE,merge=1,delta=2
    75                           	psect	text60,local,class=CODE,merge=1,delta=2
    76                           	psect	text61,local,class=CODE,merge=1,delta=2
    77                           	psect	text62,local,class=CODE,merge=1,delta=2
    78                           	psect	text63,local,class=CODE,merge=1,delta=2
    79                           	psect	text64,local,class=CODE,merge=1,delta=2
    80                           	psect	text65,local,class=CODE,merge=1,delta=2
    81                           	psect	intentry,global,class=CODE,delta=2
    82                           	psect	text67,local,class=CODE,merge=1,delta=2
    83                           	psect	text68,local,class=CODE,merge=1,inline,delta=2
    84                           	psect	text69,local,class=CODE,merge=1,delta=2
    85                           	psect	text70,local,class=CODE,merge=1,delta=2
    86                           	psect	text71,local,class=CODE,merge=1,delta=2
    87                           	psect	text72,local,class=CODE,merge=1,delta=2
    88                           	psect	text73,local,class=CODE,merge=1,delta=2
    89                           	psect	text74,local,class=CODE,merge=1,delta=2
    90                           	psect	text75,local,class=CODE,merge=1,delta=2
    91                           	psect	text76,local,class=CODE,merge=1,delta=2
    92                           	psect	text77,local,class=CODE,merge=1,delta=2
    93                           	psect	text78,local,class=CODE,merge=1,delta=2
    94                           	psect	text79,local,class=CODE,merge=1,delta=2
    95                           	psect	text80,local,class=CODE,merge=1,delta=2
    96                           	psect	text81,local,class=CODE,merge=1,delta=2
    97                           	psect	text82,local,class=CODE,merge=1,delta=2
    98                           	psect	text83,local,class=CODE,merge=1,delta=2
    99                           	psect	text84,local,class=CODE,merge=1,delta=2
   100                           	psect	text85,local,class=CODE,merge=1,inline,delta=2
   101                           	psect	text86,local,class=CODE,merge=1,inline,delta=2
   102                           	psect	text87,local,class=CODE,merge=1,inline,delta=2
   103                           	psect	text88,local,class=CODE,merge=1,inline,delta=2
   104                           	psect	text89,local,class=CODE,merge=1,inline,delta=2
   105                           	psect	text90,local,class=CODE,merge=1,inline,delta=2
   106                           	psect	text91,local,class=CODE,merge=1,inline,delta=2
   107                           	psect	text92,local,class=CODE,merge=1,delta=2
   108                           	psect	text93,local,class=CODE,merge=1,delta=2
   109                           	psect	text94,local,class=CODE,merge=1,delta=2
   110                           	psect	text95,local,class=CODE,merge=1,delta=2
   111                           	psect	text96,local,class=CODE,merge=1,delta=2
   112                           	psect	text97,local,class=CODE,merge=1,delta=2
   113                           	psect	text98,local,class=CODE,merge=1,delta=2
   114                           	psect	text99,local,class=CODE,merge=1,delta=2
   115                           	psect	text100,local,class=CODE,merge=1,delta=2
   116                           	psect	text101,local,class=CODE,merge=1,delta=2
   117                           	psect	text102,local,class=CODE,merge=1,delta=2
   118                           	psect	text103,local,class=CODE,merge=1,inline,delta=2
   119                           	psect	text104,local,class=CODE,merge=1,inline,delta=2
   120                           	psect	text105,local,class=CODE,merge=1,inline,delta=2
   121                           	psect	text106,local,class=CODE,merge=1,delta=2
   122                           	psect	text107,local,class=CODE,merge=1,inline,delta=2
   123                           	dabs	1,0x7E,2
   124  0000                     
   125                           ; Version 1.45
   126                           ; Generated 16/11/2017 GMT
   127                           ; 
   128                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   129                           ; All rights reserved.
   130                           ; 
   131                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   132                           ; 
   133                           ; Redistribution and use in source and binary forms, with or without modification, are
   134                           ; permitted provided that the following conditions are met:
   135                           ; 
   136                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   137                           ;        conditions and the following disclaimer.
   138                           ; 
   139                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   140                           ;        of conditions and the following disclaimer in the documentation and/or other
   141                           ;        materials provided with the distribution.
   142                           ; 
   143                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   144                           ;        software without specific prior written permission.
   145                           ; 
   146                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   147                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   148                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   149                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   150                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   151                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   152                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   153                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   154                           ; 
   155                           ; 
   156                           ; Code-generator required, PIC16F1619 Definitions
   157                           ; 
   158                           ; SFR Addresses
   159  0000                     	;# 
   160  0001                     	;# 
   161  0002                     	;# 
   162  0003                     	;# 
   163  0004                     	;# 
   164  0005                     	;# 
   165  0006                     	;# 
   166  0007                     	;# 
   167  0008                     	;# 
   168  0009                     	;# 
   169  000A                     	;# 
   170  000B                     	;# 
   171  000C                     	;# 
   172  000D                     	;# 
   173  000E                     	;# 
   174  0010                     	;# 
   175  0011                     	;# 
   176  0012                     	;# 
   177  0013                     	;# 
   178  0014                     	;# 
   179  0015                     	;# 
   180  0016                     	;# 
   181  0016                     	;# 
   182  0017                     	;# 
   183  0018                     	;# 
   184  0019                     	;# 
   185  001A                     	;# 
   186  001A                     	;# 
   187  001B                     	;# 
   188  001B                     	;# 
   189  001C                     	;# 
   190  001D                     	;# 
   191  001E                     	;# 
   192  001F                     	;# 
   193  008C                     	;# 
   194  008D                     	;# 
   195  008E                     	;# 
   196  0090                     	;# 
   197  0091                     	;# 
   198  0092                     	;# 
   199  0093                     	;# 
   200  0094                     	;# 
   201  0095                     	;# 
   202  0096                     	;# 
   203  0098                     	;# 
   204  0099                     	;# 
   205  009A                     	;# 
   206  009B                     	;# 
   207  009B                     	;# 
   208  009C                     	;# 
   209  009D                     	;# 
   210  009E                     	;# 
   211  009F                     	;# 
   212  010C                     	;# 
   213  010D                     	;# 
   214  010E                     	;# 
   215  0111                     	;# 
   216  0112                     	;# 
   217  0113                     	;# 
   218  0114                     	;# 
   219  0115                     	;# 
   220  0116                     	;# 
   221  0117                     	;# 
   222  0118                     	;# 
   223  0119                     	;# 
   224  011C                     	;# 
   225  018C                     	;# 
   226  018D                     	;# 
   227  018E                     	;# 
   228  0191                     	;# 
   229  0191                     	;# 
   230  0192                     	;# 
   231  0193                     	;# 
   232  0193                     	;# 
   233  0194                     	;# 
   234  0195                     	;# 
   235  0196                     	;# 
   236  0197                     	;# 
   237  0199                     	;# 
   238  0199                     	;# 
   239  0199                     	;# 
   240  019A                     	;# 
   241  019A                     	;# 
   242  019A                     	;# 
   243  019B                     	;# 
   244  019B                     	;# 
   245  019B                     	;# 
   246  019B                     	;# 
   247  019B                     	;# 
   248  019C                     	;# 
   249  019C                     	;# 
   250  019C                     	;# 
   251  019D                     	;# 
   252  019D                     	;# 
   253  019D                     	;# 
   254  019E                     	;# 
   255  019E                     	;# 
   256  019E                     	;# 
   257  019F                     	;# 
   258  019F                     	;# 
   259  019F                     	;# 
   260  019F                     	;# 
   261  019F                     	;# 
   262  020C                     	;# 
   263  020D                     	;# 
   264  020E                     	;# 
   265  0211                     	;# 
   266  0211                     	;# 
   267  0212                     	;# 
   268  0212                     	;# 
   269  0213                     	;# 
   270  0213                     	;# 
   271  0214                     	;# 
   272  0214                     	;# 
   273  0215                     	;# 
   274  0215                     	;# 
   275  0215                     	;# 
   276  0215                     	;# 
   277  0216                     	;# 
   278  0216                     	;# 
   279  0217                     	;# 
   280  0217                     	;# 
   281  028C                     	;# 
   282  028D                     	;# 
   283  028E                     	;# 
   284  0291                     	;# 
   285  0291                     	;# 
   286  0292                     	;# 
   287  0293                     	;# 
   288  0294                     	;# 
   289  0298                     	;# 
   290  0298                     	;# 
   291  0299                     	;# 
   292  029A                     	;# 
   293  029B                     	;# 
   294  029E                     	;# 
   295  030C                     	;# 
   296  030D                     	;# 
   297  030E                     	;# 
   298  038C                     	;# 
   299  038D                     	;# 
   300  038E                     	;# 
   301  0391                     	;# 
   302  0392                     	;# 
   303  0393                     	;# 
   304  0394                     	;# 
   305  0395                     	;# 
   306  0396                     	;# 
   307  0397                     	;# 
   308  0398                     	;# 
   309  0399                     	;# 
   310  040E                     	;# 
   311  0413                     	;# 
   312  0413                     	;# 
   313  0414                     	;# 
   314  0414                     	;# 
   315  0415                     	;# 
   316  0416                     	;# 
   317  0417                     	;# 
   318  0418                     	;# 
   319  041A                     	;# 
   320  041A                     	;# 
   321  041B                     	;# 
   322  041B                     	;# 
   323  041C                     	;# 
   324  041D                     	;# 
   325  041E                     	;# 
   326  041F                     	;# 
   327  0493                     	;# 
   328  0494                     	;# 
   329  0495                     	;# 
   330  0496                     	;# 
   331  049A                     	;# 
   332  049B                     	;# 
   333  049C                     	;# 
   334  049D                     	;# 
   335  058C                     	;# 
   336  058C                     	;# 
   337  058D                     	;# 
   338  058E                     	;# 
   339  058E                     	;# 
   340  058F                     	;# 
   341  0590                     	;# 
   342  0590                     	;# 
   343  0591                     	;# 
   344  0592                     	;# 
   345  0592                     	;# 
   346  0593                     	;# 
   347  0594                     	;# 
   348  0594                     	;# 
   349  0595                     	;# 
   350  0596                     	;# 
   351  0596                     	;# 
   352  0597                     	;# 
   353  0598                     	;# 
   354  0599                     	;# 
   355  059A                     	;# 
   356  059B                     	;# 
   357  059B                     	;# 
   358  059C                     	;# 
   359  059D                     	;# 
   360  060C                     	;# 
   361  060C                     	;# 
   362  060D                     	;# 
   363  060E                     	;# 
   364  060F                     	;# 
   365  060F                     	;# 
   366  0610                     	;# 
   367  0611                     	;# 
   368  0612                     	;# 
   369  0613                     	;# 
   370  0614                     	;# 
   371  0617                     	;# 
   372  0618                     	;# 
   373  0619                     	;# 
   374  061A                     	;# 
   375  061B                     	;# 
   376  061C                     	;# 
   377  0691                     	;# 
   378  0692                     	;# 
   379  0693                     	;# 
   380  0694                     	;# 
   381  0695                     	;# 
   382  0696                     	;# 
   383  0697                     	;# 
   384  0699                     	;# 
   385  069A                     	;# 
   386  0711                     	;# 
   387  0712                     	;# 
   388  0713                     	;# 
   389  0714                     	;# 
   390  0715                     	;# 
   391  0718                     	;# 
   392  0718                     	;# 
   393  0719                     	;# 
   394  071A                     	;# 
   395  071A                     	;# 
   396  071B                     	;# 
   397  071C                     	;# 
   398  071D                     	;# 
   399  0791                     	;# 
   400  0791                     	;# 
   401  0792                     	;# 
   402  0793                     	;# 
   403  0793                     	;# 
   404  0794                     	;# 
   405  0795                     	;# 
   406  0795                     	;# 
   407  0796                     	;# 
   408  0797                     	;# 
   409  0797                     	;# 
   410  0798                     	;# 
   411  0799                     	;# 
   412  079A                     	;# 
   413  080C                     	;# 
   414  080C                     	;# 
   415  080D                     	;# 
   416  080E                     	;# 
   417  080E                     	;# 
   418  080F                     	;# 
   419  0810                     	;# 
   420  0810                     	;# 
   421  0811                     	;# 
   422  0812                     	;# 
   423  0812                     	;# 
   424  0813                     	;# 
   425  0814                     	;# 
   426  0815                     	;# 
   427  0816                     	;# 
   428  0817                     	;# 
   429  0818                     	;# 
   430  0819                     	;# 
   431  081A                     	;# 
   432  081A                     	;# 
   433  081B                     	;# 
   434  081C                     	;# 
   435  081C                     	;# 
   436  081D                     	;# 
   437  088C                     	;# 
   438  088D                     	;# 
   439  088E                     	;# 
   440  088F                     	;# 
   441  088F                     	;# 
   442  0890                     	;# 
   443  0891                     	;# 
   444  0892                     	;# 
   445  0893                     	;# 
   446  0893                     	;# 
   447  0894                     	;# 
   448  0895                     	;# 
   449  0896                     	;# 
   450  0897                     	;# 
   451  0897                     	;# 
   452  0898                     	;# 
   453  0899                     	;# 
   454  0D8C                     	;# 
   455  0D8C                     	;# 
   456  0D8D                     	;# 
   457  0D8E                     	;# 
   458  0D8F                     	;# 
   459  0D8F                     	;# 
   460  0D90                     	;# 
   461  0D91                     	;# 
   462  0D92                     	;# 
   463  0D92                     	;# 
   464  0D93                     	;# 
   465  0D94                     	;# 
   466  0D95                     	;# 
   467  0D95                     	;# 
   468  0D96                     	;# 
   469  0D97                     	;# 
   470  0D98                     	;# 
   471  0D99                     	;# 
   472  0D9A                     	;# 
   473  0D9B                     	;# 
   474  0D9C                     	;# 
   475  0D9D                     	;# 
   476  0D9E                     	;# 
   477  0D9E                     	;# 
   478  0D9F                     	;# 
   479  0DA0                     	;# 
   480  0DA1                     	;# 
   481  0DA1                     	;# 
   482  0DA2                     	;# 
   483  0DA3                     	;# 
   484  0DA4                     	;# 
   485  0DA4                     	;# 
   486  0DA5                     	;# 
   487  0DA6                     	;# 
   488  0DA7                     	;# 
   489  0DA7                     	;# 
   490  0DA8                     	;# 
   491  0DA9                     	;# 
   492  0DAA                     	;# 
   493  0DAB                     	;# 
   494  0DAC                     	;# 
   495  0DAD                     	;# 
   496  0DAE                     	;# 
   497  0DAF                     	;# 
   498  0E0F                     	;# 
   499  0E10                     	;# 
   500  0E11                     	;# 
   501  0E12                     	;# 
   502  0E13                     	;# 
   503  0E14                     	;# 
   504  0E15                     	;# 
   505  0E16                     	;# 
   506  0E17                     	;# 
   507  0E18                     	;# 
   508  0E19                     	;# 
   509  0E1A                     	;# 
   510  0E1B                     	;# 
   511  0E1C                     	;# 
   512  0E1D                     	;# 
   513  0E1E                     	;# 
   514  0E1F                     	;# 
   515  0E20                     	;# 
   516  0E21                     	;# 
   517  0E22                     	;# 
   518  0E23                     	;# 
   519  0E24                     	;# 
   520  0E25                     	;# 
   521  0E26                     	;# 
   522  0E27                     	;# 
   523  0E28                     	;# 
   524  0E29                     	;# 
   525  0E2A                     	;# 
   526  0E2B                     	;# 
   527  0E2C                     	;# 
   528  0E2D                     	;# 
   529  0E2E                     	;# 
   530  0E90                     	;# 
   531  0E91                     	;# 
   532  0E92                     	;# 
   533  0E94                     	;# 
   534  0E95                     	;# 
   535  0E9C                     	;# 
   536  0E9D                     	;# 
   537  0E9E                     	;# 
   538  0E9F                     	;# 
   539  0EA0                     	;# 
   540  0EA1                     	;# 
   541  0EA2                     	;# 
   542  0EA3                     	;# 
   543  0EA4                     	;# 
   544  0EA5                     	;# 
   545  0EA6                     	;# 
   546  0EA7                     	;# 
   547  0F0F                     	;# 
   548  0F10                     	;# 
   549  0F11                     	;# 
   550  0F12                     	;# 
   551  0F13                     	;# 
   552  0F14                     	;# 
   553  0F15                     	;# 
   554  0F16                     	;# 
   555  0F17                     	;# 
   556  0F18                     	;# 
   557  0F19                     	;# 
   558  0F1A                     	;# 
   559  0F1B                     	;# 
   560  0F1C                     	;# 
   561  0F1D                     	;# 
   562  0F1E                     	;# 
   563  0F1F                     	;# 
   564  0F20                     	;# 
   565  0F21                     	;# 
   566  0F22                     	;# 
   567  0F23                     	;# 
   568  0F24                     	;# 
   569  0F25                     	;# 
   570  0F26                     	;# 
   571  0F27                     	;# 
   572  0F28                     	;# 
   573  0F29                     	;# 
   574  0F2A                     	;# 
   575  0F2B                     	;# 
   576  0F2C                     	;# 
   577  0F2D                     	;# 
   578  0F2E                     	;# 
   579  0F2F                     	;# 
   580  0F30                     	;# 
   581  0F31                     	;# 
   582  0F32                     	;# 
   583  0F33                     	;# 
   584  0F34                     	;# 
   585  0F35                     	;# 
   586  0F36                     	;# 
   587  0F37                     	;# 
   588  0FE4                     	;# 
   589  0FE5                     	;# 
   590  0FE6                     	;# 
   591  0FE7                     	;# 
   592  0FE8                     	;# 
   593  0FE9                     	;# 
   594  0FEA                     	;# 
   595  0FEB                     	;# 
   596  0FED                     	;# 
   597  0FEE                     	;# 
   598  0FEF                     	;# 
   599  0000                     	;# 
   600  0001                     	;# 
   601  0002                     	;# 
   602  0003                     	;# 
   603  0004                     	;# 
   604  0005                     	;# 
   605  0006                     	;# 
   606  0007                     	;# 
   607  0008                     	;# 
   608  0009                     	;# 
   609  000A                     	;# 
   610  000B                     	;# 
   611  000C                     	;# 
   612  000D                     	;# 
   613  000E                     	;# 
   614  0010                     	;# 
   615  0011                     	;# 
   616  0012                     	;# 
   617  0013                     	;# 
   618  0014                     	;# 
   619  0015                     	;# 
   620  0016                     	;# 
   621  0016                     	;# 
   622  0017                     	;# 
   623  0018                     	;# 
   624  0019                     	;# 
   625  001A                     	;# 
   626  001A                     	;# 
   627  001B                     	;# 
   628  001B                     	;# 
   629  001C                     	;# 
   630  001D                     	;# 
   631  001E                     	;# 
   632  001F                     	;# 
   633  008C                     	;# 
   634  008D                     	;# 
   635  008E                     	;# 
   636  0090                     	;# 
   637  0091                     	;# 
   638  0092                     	;# 
   639  0093                     	;# 
   640  0094                     	;# 
   641  0095                     	;# 
   642  0096                     	;# 
   643  0098                     	;# 
   644  0099                     	;# 
   645  009A                     	;# 
   646  009B                     	;# 
   647  009B                     	;# 
   648  009C                     	;# 
   649  009D                     	;# 
   650  009E                     	;# 
   651  009F                     	;# 
   652  010C                     	;# 
   653  010D                     	;# 
   654  010E                     	;# 
   655  0111                     	;# 
   656  0112                     	;# 
   657  0113                     	;# 
   658  0114                     	;# 
   659  0115                     	;# 
   660  0116                     	;# 
   661  0117                     	;# 
   662  0118                     	;# 
   663  0119                     	;# 
   664  011C                     	;# 
   665  018C                     	;# 
   666  018D                     	;# 
   667  018E                     	;# 
   668  0191                     	;# 
   669  0191                     	;# 
   670  0192                     	;# 
   671  0193                     	;# 
   672  0193                     	;# 
   673  0194                     	;# 
   674  0195                     	;# 
   675  0196                     	;# 
   676  0197                     	;# 
   677  0199                     	;# 
   678  0199                     	;# 
   679  0199                     	;# 
   680  019A                     	;# 
   681  019A                     	;# 
   682  019A                     	;# 
   683  019B                     	;# 
   684  019B                     	;# 
   685  019B                     	;# 
   686  019B                     	;# 
   687  019B                     	;# 
   688  019C                     	;# 
   689  019C                     	;# 
   690  019C                     	;# 
   691  019D                     	;# 
   692  019D                     	;# 
   693  019D                     	;# 
   694  019E                     	;# 
   695  019E                     	;# 
   696  019E                     	;# 
   697  019F                     	;# 
   698  019F                     	;# 
   699  019F                     	;# 
   700  019F                     	;# 
   701  019F                     	;# 
   702  020C                     	;# 
   703  020D                     	;# 
   704  020E                     	;# 
   705  0211                     	;# 
   706  0211                     	;# 
   707  0212                     	;# 
   708  0212                     	;# 
   709  0213                     	;# 
   710  0213                     	;# 
   711  0214                     	;# 
   712  0214                     	;# 
   713  0215                     	;# 
   714  0215                     	;# 
   715  0215                     	;# 
   716  0215                     	;# 
   717  0216                     	;# 
   718  0216                     	;# 
   719  0217                     	;# 
   720  0217                     	;# 
   721  028C                     	;# 
   722  028D                     	;# 
   723  028E                     	;# 
   724  0291                     	;# 
   725  0291                     	;# 
   726  0292                     	;# 
   727  0293                     	;# 
   728  0294                     	;# 
   729  0298                     	;# 
   730  0298                     	;# 
   731  0299                     	;# 
   732  029A                     	;# 
   733  029B                     	;# 
   734  029E                     	;# 
   735  030C                     	;# 
   736  030D                     	;# 
   737  030E                     	;# 
   738  038C                     	;# 
   739  038D                     	;# 
   740  038E                     	;# 
   741  0391                     	;# 
   742  0392                     	;# 
   743  0393                     	;# 
   744  0394                     	;# 
   745  0395                     	;# 
   746  0396                     	;# 
   747  0397                     	;# 
   748  0398                     	;# 
   749  0399                     	;# 
   750  040E                     	;# 
   751  0413                     	;# 
   752  0413                     	;# 
   753  0414                     	;# 
   754  0414                     	;# 
   755  0415                     	;# 
   756  0416                     	;# 
   757  0417                     	;# 
   758  0418                     	;# 
   759  041A                     	;# 
   760  041A                     	;# 
   761  041B                     	;# 
   762  041B                     	;# 
   763  041C                     	;# 
   764  041D                     	;# 
   765  041E                     	;# 
   766  041F                     	;# 
   767  0493                     	;# 
   768  0494                     	;# 
   769  0495                     	;# 
   770  0496                     	;# 
   771  049A                     	;# 
   772  049B                     	;# 
   773  049C                     	;# 
   774  049D                     	;# 
   775  058C                     	;# 
   776  058C                     	;# 
   777  058D                     	;# 
   778  058E                     	;# 
   779  058E                     	;# 
   780  058F                     	;# 
   781  0590                     	;# 
   782  0590                     	;# 
   783  0591                     	;# 
   784  0592                     	;# 
   785  0592                     	;# 
   786  0593                     	;# 
   787  0594                     	;# 
   788  0594                     	;# 
   789  0595                     	;# 
   790  0596                     	;# 
   791  0596                     	;# 
   792  0597                     	;# 
   793  0598                     	;# 
   794  0599                     	;# 
   795  059A                     	;# 
   796  059B                     	;# 
   797  059B                     	;# 
   798  059C                     	;# 
   799  059D                     	;# 
   800  060C                     	;# 
   801  060C                     	;# 
   802  060D                     	;# 
   803  060E                     	;# 
   804  060F                     	;# 
   805  060F                     	;# 
   806  0610                     	;# 
   807  0611                     	;# 
   808  0612                     	;# 
   809  0613                     	;# 
   810  0614                     	;# 
   811  0617                     	;# 
   812  0618                     	;# 
   813  0619                     	;# 
   814  061A                     	;# 
   815  061B                     	;# 
   816  061C                     	;# 
   817  0691                     	;# 
   818  0692                     	;# 
   819  0693                     	;# 
   820  0694                     	;# 
   821  0695                     	;# 
   822  0696                     	;# 
   823  0697                     	;# 
   824  0699                     	;# 
   825  069A                     	;# 
   826  0711                     	;# 
   827  0712                     	;# 
   828  0713                     	;# 
   829  0714                     	;# 
   830  0715                     	;# 
   831  0718                     	;# 
   832  0718                     	;# 
   833  0719                     	;# 
   834  071A                     	;# 
   835  071A                     	;# 
   836  071B                     	;# 
   837  071C                     	;# 
   838  071D                     	;# 
   839  0791                     	;# 
   840  0791                     	;# 
   841  0792                     	;# 
   842  0793                     	;# 
   843  0793                     	;# 
   844  0794                     	;# 
   845  0795                     	;# 
   846  0795                     	;# 
   847  0796                     	;# 
   848  0797                     	;# 
   849  0797                     	;# 
   850  0798                     	;# 
   851  0799                     	;# 
   852  079A                     	;# 
   853  080C                     	;# 
   854  080C                     	;# 
   855  080D                     	;# 
   856  080E                     	;# 
   857  080E                     	;# 
   858  080F                     	;# 
   859  0810                     	;# 
   860  0810                     	;# 
   861  0811                     	;# 
   862  0812                     	;# 
   863  0812                     	;# 
   864  0813                     	;# 
   865  0814                     	;# 
   866  0815                     	;# 
   867  0816                     	;# 
   868  0817                     	;# 
   869  0818                     	;# 
   870  0819                     	;# 
   871  081A                     	;# 
   872  081A                     	;# 
   873  081B                     	;# 
   874  081C                     	;# 
   875  081C                     	;# 
   876  081D                     	;# 
   877  088C                     	;# 
   878  088D                     	;# 
   879  088E                     	;# 
   880  088F                     	;# 
   881  088F                     	;# 
   882  0890                     	;# 
   883  0891                     	;# 
   884  0892                     	;# 
   885  0893                     	;# 
   886  0893                     	;# 
   887  0894                     	;# 
   888  0895                     	;# 
   889  0896                     	;# 
   890  0897                     	;# 
   891  0897                     	;# 
   892  0898                     	;# 
   893  0899                     	;# 
   894  0D8C                     	;# 
   895  0D8C                     	;# 
   896  0D8D                     	;# 
   897  0D8E                     	;# 
   898  0D8F                     	;# 
   899  0D8F                     	;# 
   900  0D90                     	;# 
   901  0D91                     	;# 
   902  0D92                     	;# 
   903  0D92                     	;# 
   904  0D93                     	;# 
   905  0D94                     	;# 
   906  0D95                     	;# 
   907  0D95                     	;# 
   908  0D96                     	;# 
   909  0D97                     	;# 
   910  0D98                     	;# 
   911  0D99                     	;# 
   912  0D9A                     	;# 
   913  0D9B                     	;# 
   914  0D9C                     	;# 
   915  0D9D                     	;# 
   916  0D9E                     	;# 
   917  0D9E                     	;# 
   918  0D9F                     	;# 
   919  0DA0                     	;# 
   920  0DA1                     	;# 
   921  0DA1                     	;# 
   922  0DA2                     	;# 
   923  0DA3                     	;# 
   924  0DA4                     	;# 
   925  0DA4                     	;# 
   926  0DA5                     	;# 
   927  0DA6                     	;# 
   928  0DA7                     	;# 
   929  0DA7                     	;# 
   930  0DA8                     	;# 
   931  0DA9                     	;# 
   932  0DAA                     	;# 
   933  0DAB                     	;# 
   934  0DAC                     	;# 
   935  0DAD                     	;# 
   936  0DAE                     	;# 
   937  0DAF                     	;# 
   938  0E0F                     	;# 
   939  0E10                     	;# 
   940  0E11                     	;# 
   941  0E12                     	;# 
   942  0E13                     	;# 
   943  0E14                     	;# 
   944  0E15                     	;# 
   945  0E16                     	;# 
   946  0E17                     	;# 
   947  0E18                     	;# 
   948  0E19                     	;# 
   949  0E1A                     	;# 
   950  0E1B                     	;# 
   951  0E1C                     	;# 
   952  0E1D                     	;# 
   953  0E1E                     	;# 
   954  0E1F                     	;# 
   955  0E20                     	;# 
   956  0E21                     	;# 
   957  0E22                     	;# 
   958  0E23                     	;# 
   959  0E24                     	;# 
   960  0E25                     	;# 
   961  0E26                     	;# 
   962  0E27                     	;# 
   963  0E28                     	;# 
   964  0E29                     	;# 
   965  0E2A                     	;# 
   966  0E2B                     	;# 
   967  0E2C                     	;# 
   968  0E2D                     	;# 
   969  0E2E                     	;# 
   970  0E90                     	;# 
   971  0E91                     	;# 
   972  0E92                     	;# 
   973  0E94                     	;# 
   974  0E95                     	;# 
   975  0E9C                     	;# 
   976  0E9D                     	;# 
   977  0E9E                     	;# 
   978  0E9F                     	;# 
   979  0EA0                     	;# 
   980  0EA1                     	;# 
   981  0EA2                     	;# 
   982  0EA3                     	;# 
   983  0EA4                     	;# 
   984  0EA5                     	;# 
   985  0EA6                     	;# 
   986  0EA7                     	;# 
   987  0F0F                     	;# 
   988  0F10                     	;# 
   989  0F11                     	;# 
   990  0F12                     	;# 
   991  0F13                     	;# 
   992  0F14                     	;# 
   993  0F15                     	;# 
   994  0F16                     	;# 
   995  0F17                     	;# 
   996  0F18                     	;# 
   997  0F19                     	;# 
   998  0F1A                     	;# 
   999  0F1B                     	;# 
  1000  0F1C                     	;# 
  1001  0F1D                     	;# 
  1002  0F1E                     	;# 
  1003  0F1F                     	;# 
  1004  0F20                     	;# 
  1005  0F21                     	;# 
  1006  0F22                     	;# 
  1007  0F23                     	;# 
  1008  0F24                     	;# 
  1009  0F25                     	;# 
  1010  0F26                     	;# 
  1011  0F27                     	;# 
  1012  0F28                     	;# 
  1013  0F29                     	;# 
  1014  0F2A                     	;# 
  1015  0F2B                     	;# 
  1016  0F2C                     	;# 
  1017  0F2D                     	;# 
  1018  0F2E                     	;# 
  1019  0F2F                     	;# 
  1020  0F30                     	;# 
  1021  0F31                     	;# 
  1022  0F32                     	;# 
  1023  0F33                     	;# 
  1024  0F34                     	;# 
  1025  0F35                     	;# 
  1026  0F36                     	;# 
  1027  0F37                     	;# 
  1028  0FE4                     	;# 
  1029  0FE5                     	;# 
  1030  0FE6                     	;# 
  1031  0FE7                     	;# 
  1032  0FE8                     	;# 
  1033  0FE9                     	;# 
  1034  0FEA                     	;# 
  1035  0FEB                     	;# 
  1036  0FED                     	;# 
  1037  0FEE                     	;# 
  1038  0FEF                     	;# 
  1039  0000                     	;# 
  1040  0001                     	;# 
  1041  0002                     	;# 
  1042  0003                     	;# 
  1043  0004                     	;# 
  1044  0005                     	;# 
  1045  0006                     	;# 
  1046  0007                     	;# 
  1047  0008                     	;# 
  1048  0009                     	;# 
  1049  000A                     	;# 
  1050  000B                     	;# 
  1051  000C                     	;# 
  1052  000D                     	;# 
  1053  000E                     	;# 
  1054  0010                     	;# 
  1055  0011                     	;# 
  1056  0012                     	;# 
  1057  0013                     	;# 
  1058  0014                     	;# 
  1059  0015                     	;# 
  1060  0016                     	;# 
  1061  0016                     	;# 
  1062  0017                     	;# 
  1063  0018                     	;# 
  1064  0019                     	;# 
  1065  001A                     	;# 
  1066  001A                     	;# 
  1067  001B                     	;# 
  1068  001B                     	;# 
  1069  001C                     	;# 
  1070  001D                     	;# 
  1071  001E                     	;# 
  1072  001F                     	;# 
  1073  008C                     	;# 
  1074  008D                     	;# 
  1075  008E                     	;# 
  1076  0090                     	;# 
  1077  0091                     	;# 
  1078  0092                     	;# 
  1079  0093                     	;# 
  1080  0094                     	;# 
  1081  0095                     	;# 
  1082  0096                     	;# 
  1083  0098                     	;# 
  1084  0099                     	;# 
  1085  009A                     	;# 
  1086  009B                     	;# 
  1087  009B                     	;# 
  1088  009C                     	;# 
  1089  009D                     	;# 
  1090  009E                     	;# 
  1091  009F                     	;# 
  1092  010C                     	;# 
  1093  010D                     	;# 
  1094  010E                     	;# 
  1095  0111                     	;# 
  1096  0112                     	;# 
  1097  0113                     	;# 
  1098  0114                     	;# 
  1099  0115                     	;# 
  1100  0116                     	;# 
  1101  0117                     	;# 
  1102  0118                     	;# 
  1103  0119                     	;# 
  1104  011C                     	;# 
  1105  018C                     	;# 
  1106  018D                     	;# 
  1107  018E                     	;# 
  1108  0191                     	;# 
  1109  0191                     	;# 
  1110  0192                     	;# 
  1111  0193                     	;# 
  1112  0193                     	;# 
  1113  0194                     	;# 
  1114  0195                     	;# 
  1115  0196                     	;# 
  1116  0197                     	;# 
  1117  0199                     	;# 
  1118  0199                     	;# 
  1119  0199                     	;# 
  1120  019A                     	;# 
  1121  019A                     	;# 
  1122  019A                     	;# 
  1123  019B                     	;# 
  1124  019B                     	;# 
  1125  019B                     	;# 
  1126  019B                     	;# 
  1127  019B                     	;# 
  1128  019C                     	;# 
  1129  019C                     	;# 
  1130  019C                     	;# 
  1131  019D                     	;# 
  1132  019D                     	;# 
  1133  019D                     	;# 
  1134  019E                     	;# 
  1135  019E                     	;# 
  1136  019E                     	;# 
  1137  019F                     	;# 
  1138  019F                     	;# 
  1139  019F                     	;# 
  1140  019F                     	;# 
  1141  019F                     	;# 
  1142  020C                     	;# 
  1143  020D                     	;# 
  1144  020E                     	;# 
  1145  0211                     	;# 
  1146  0211                     	;# 
  1147  0212                     	;# 
  1148  0212                     	;# 
  1149  0213                     	;# 
  1150  0213                     	;# 
  1151  0214                     	;# 
  1152  0214                     	;# 
  1153  0215                     	;# 
  1154  0215                     	;# 
  1155  0215                     	;# 
  1156  0215                     	;# 
  1157  0216                     	;# 
  1158  0216                     	;# 
  1159  0217                     	;# 
  1160  0217                     	;# 
  1161  028C                     	;# 
  1162  028D                     	;# 
  1163  028E                     	;# 
  1164  0291                     	;# 
  1165  0291                     	;# 
  1166  0292                     	;# 
  1167  0293                     	;# 
  1168  0294                     	;# 
  1169  0298                     	;# 
  1170  0298                     	;# 
  1171  0299                     	;# 
  1172  029A                     	;# 
  1173  029B                     	;# 
  1174  029E                     	;# 
  1175  030C                     	;# 
  1176  030D                     	;# 
  1177  030E                     	;# 
  1178  038C                     	;# 
  1179  038D                     	;# 
  1180  038E                     	;# 
  1181  0391                     	;# 
  1182  0392                     	;# 
  1183  0393                     	;# 
  1184  0394                     	;# 
  1185  0395                     	;# 
  1186  0396                     	;# 
  1187  0397                     	;# 
  1188  0398                     	;# 
  1189  0399                     	;# 
  1190  040E                     	;# 
  1191  0413                     	;# 
  1192  0413                     	;# 
  1193  0414                     	;# 
  1194  0414                     	;# 
  1195  0415                     	;# 
  1196  0416                     	;# 
  1197  0417                     	;# 
  1198  0418                     	;# 
  1199  041A                     	;# 
  1200  041A                     	;# 
  1201  041B                     	;# 
  1202  041B                     	;# 
  1203  041C                     	;# 
  1204  041D                     	;# 
  1205  041E                     	;# 
  1206  041F                     	;# 
  1207  0493                     	;# 
  1208  0494                     	;# 
  1209  0495                     	;# 
  1210  0496                     	;# 
  1211  049A                     	;# 
  1212  049B                     	;# 
  1213  049C                     	;# 
  1214  049D                     	;# 
  1215  058C                     	;# 
  1216  058C                     	;# 
  1217  058D                     	;# 
  1218  058E                     	;# 
  1219  058E                     	;# 
  1220  058F                     	;# 
  1221  0590                     	;# 
  1222  0590                     	;# 
  1223  0591                     	;# 
  1224  0592                     	;# 
  1225  0592                     	;# 
  1226  0593                     	;# 
  1227  0594                     	;# 
  1228  0594                     	;# 
  1229  0595                     	;# 
  1230  0596                     	;# 
  1231  0596                     	;# 
  1232  0597                     	;# 
  1233  0598                     	;# 
  1234  0599                     	;# 
  1235  059A                     	;# 
  1236  059B                     	;# 
  1237  059B                     	;# 
  1238  059C                     	;# 
  1239  059D                     	;# 
  1240  060C                     	;# 
  1241  060C                     	;# 
  1242  060D                     	;# 
  1243  060E                     	;# 
  1244  060F                     	;# 
  1245  060F                     	;# 
  1246  0610                     	;# 
  1247  0611                     	;# 
  1248  0612                     	;# 
  1249  0613                     	;# 
  1250  0614                     	;# 
  1251  0617                     	;# 
  1252  0618                     	;# 
  1253  0619                     	;# 
  1254  061A                     	;# 
  1255  061B                     	;# 
  1256  061C                     	;# 
  1257  0691                     	;# 
  1258  0692                     	;# 
  1259  0693                     	;# 
  1260  0694                     	;# 
  1261  0695                     	;# 
  1262  0696                     	;# 
  1263  0697                     	;# 
  1264  0699                     	;# 
  1265  069A                     	;# 
  1266  0711                     	;# 
  1267  0712                     	;# 
  1268  0713                     	;# 
  1269  0714                     	;# 
  1270  0715                     	;# 
  1271  0718                     	;# 
  1272  0718                     	;# 
  1273  0719                     	;# 
  1274  071A                     	;# 
  1275  071A                     	;# 
  1276  071B                     	;# 
  1277  071C                     	;# 
  1278  071D                     	;# 
  1279  0791                     	;# 
  1280  0791                     	;# 
  1281  0792                     	;# 
  1282  0793                     	;# 
  1283  0793                     	;# 
  1284  0794                     	;# 
  1285  0795                     	;# 
  1286  0795                     	;# 
  1287  0796                     	;# 
  1288  0797                     	;# 
  1289  0797                     	;# 
  1290  0798                     	;# 
  1291  0799                     	;# 
  1292  079A                     	;# 
  1293  080C                     	;# 
  1294  080C                     	;# 
  1295  080D                     	;# 
  1296  080E                     	;# 
  1297  080E                     	;# 
  1298  080F                     	;# 
  1299  0810                     	;# 
  1300  0810                     	;# 
  1301  0811                     	;# 
  1302  0812                     	;# 
  1303  0812                     	;# 
  1304  0813                     	;# 
  1305  0814                     	;# 
  1306  0815                     	;# 
  1307  0816                     	;# 
  1308  0817                     	;# 
  1309  0818                     	;# 
  1310  0819                     	;# 
  1311  081A                     	;# 
  1312  081A                     	;# 
  1313  081B                     	;# 
  1314  081C                     	;# 
  1315  081C                     	;# 
  1316  081D                     	;# 
  1317  088C                     	;# 
  1318  088D                     	;# 
  1319  088E                     	;# 
  1320  088F                     	;# 
  1321  088F                     	;# 
  1322  0890                     	;# 
  1323  0891                     	;# 
  1324  0892                     	;# 
  1325  0893                     	;# 
  1326  0893                     	;# 
  1327  0894                     	;# 
  1328  0895                     	;# 
  1329  0896                     	;# 
  1330  0897                     	;# 
  1331  0897                     	;# 
  1332  0898                     	;# 
  1333  0899                     	;# 
  1334  0D8C                     	;# 
  1335  0D8C                     	;# 
  1336  0D8D                     	;# 
  1337  0D8E                     	;# 
  1338  0D8F                     	;# 
  1339  0D8F                     	;# 
  1340  0D90                     	;# 
  1341  0D91                     	;# 
  1342  0D92                     	;# 
  1343  0D92                     	;# 
  1344  0D93                     	;# 
  1345  0D94                     	;# 
  1346  0D95                     	;# 
  1347  0D95                     	;# 
  1348  0D96                     	;# 
  1349  0D97                     	;# 
  1350  0D98                     	;# 
  1351  0D99                     	;# 
  1352  0D9A                     	;# 
  1353  0D9B                     	;# 
  1354  0D9C                     	;# 
  1355  0D9D                     	;# 
  1356  0D9E                     	;# 
  1357  0D9E                     	;# 
  1358  0D9F                     	;# 
  1359  0DA0                     	;# 
  1360  0DA1                     	;# 
  1361  0DA1                     	;# 
  1362  0DA2                     	;# 
  1363  0DA3                     	;# 
  1364  0DA4                     	;# 
  1365  0DA4                     	;# 
  1366  0DA5                     	;# 
  1367  0DA6                     	;# 
  1368  0DA7                     	;# 
  1369  0DA7                     	;# 
  1370  0DA8                     	;# 
  1371  0DA9                     	;# 
  1372  0DAA                     	;# 
  1373  0DAB                     	;# 
  1374  0DAC                     	;# 
  1375  0DAD                     	;# 
  1376  0DAE                     	;# 
  1377  0DAF                     	;# 
  1378  0E0F                     	;# 
  1379  0E10                     	;# 
  1380  0E11                     	;# 
  1381  0E12                     	;# 
  1382  0E13                     	;# 
  1383  0E14                     	;# 
  1384  0E15                     	;# 
  1385  0E16                     	;# 
  1386  0E17                     	;# 
  1387  0E18                     	;# 
  1388  0E19                     	;# 
  1389  0E1A                     	;# 
  1390  0E1B                     	;# 
  1391  0E1C                     	;# 
  1392  0E1D                     	;# 
  1393  0E1E                     	;# 
  1394  0E1F                     	;# 
  1395  0E20                     	;# 
  1396  0E21                     	;# 
  1397  0E22                     	;# 
  1398  0E23                     	;# 
  1399  0E24                     	;# 
  1400  0E25                     	;# 
  1401  0E26                     	;# 
  1402  0E27                     	;# 
  1403  0E28                     	;# 
  1404  0E29                     	;# 
  1405  0E2A                     	;# 
  1406  0E2B                     	;# 
  1407  0E2C                     	;# 
  1408  0E2D                     	;# 
  1409  0E2E                     	;# 
  1410  0E90                     	;# 
  1411  0E91                     	;# 
  1412  0E92                     	;# 
  1413  0E94                     	;# 
  1414  0E95                     	;# 
  1415  0E9C                     	;# 
  1416  0E9D                     	;# 
  1417  0E9E                     	;# 
  1418  0E9F                     	;# 
  1419  0EA0                     	;# 
  1420  0EA1                     	;# 
  1421  0EA2                     	;# 
  1422  0EA3                     	;# 
  1423  0EA4                     	;# 
  1424  0EA5                     	;# 
  1425  0EA6                     	;# 
  1426  0EA7                     	;# 
  1427  0F0F                     	;# 
  1428  0F10                     	;# 
  1429  0F11                     	;# 
  1430  0F12                     	;# 
  1431  0F13                     	;# 
  1432  0F14                     	;# 
  1433  0F15                     	;# 
  1434  0F16                     	;# 
  1435  0F17                     	;# 
  1436  0F18                     	;# 
  1437  0F19                     	;# 
  1438  0F1A                     	;# 
  1439  0F1B                     	;# 
  1440  0F1C                     	;# 
  1441  0F1D                     	;# 
  1442  0F1E                     	;# 
  1443  0F1F                     	;# 
  1444  0F20                     	;# 
  1445  0F21                     	;# 
  1446  0F22                     	;# 
  1447  0F23                     	;# 
  1448  0F24                     	;# 
  1449  0F25                     	;# 
  1450  0F26                     	;# 
  1451  0F27                     	;# 
  1452  0F28                     	;# 
  1453  0F29                     	;# 
  1454  0F2A                     	;# 
  1455  0F2B                     	;# 
  1456  0F2C                     	;# 
  1457  0F2D                     	;# 
  1458  0F2E                     	;# 
  1459  0F2F                     	;# 
  1460  0F30                     	;# 
  1461  0F31                     	;# 
  1462  0F32                     	;# 
  1463  0F33                     	;# 
  1464  0F34                     	;# 
  1465  0F35                     	;# 
  1466  0F36                     	;# 
  1467  0F37                     	;# 
  1468  0FE4                     	;# 
  1469  0FE5                     	;# 
  1470  0FE6                     	;# 
  1471  0FE7                     	;# 
  1472  0FE8                     	;# 
  1473  0FE9                     	;# 
  1474  0FEA                     	;# 
  1475  0FEB                     	;# 
  1476  0FED                     	;# 
  1477  0FEE                     	;# 
  1478  0FEF                     	;# 
  1479  0000                     	;# 
  1480  0001                     	;# 
  1481  0002                     	;# 
  1482  0003                     	;# 
  1483  0004                     	;# 
  1484  0005                     	;# 
  1485  0006                     	;# 
  1486  0007                     	;# 
  1487  0008                     	;# 
  1488  0009                     	;# 
  1489  000A                     	;# 
  1490  000B                     	;# 
  1491  000C                     	;# 
  1492  000D                     	;# 
  1493  000E                     	;# 
  1494  0010                     	;# 
  1495  0011                     	;# 
  1496  0012                     	;# 
  1497  0013                     	;# 
  1498  0014                     	;# 
  1499  0015                     	;# 
  1500  0016                     	;# 
  1501  0016                     	;# 
  1502  0017                     	;# 
  1503  0018                     	;# 
  1504  0019                     	;# 
  1505  001A                     	;# 
  1506  001A                     	;# 
  1507  001B                     	;# 
  1508  001B                     	;# 
  1509  001C                     	;# 
  1510  001D                     	;# 
  1511  001E                     	;# 
  1512  001F                     	;# 
  1513  008C                     	;# 
  1514  008D                     	;# 
  1515  008E                     	;# 
  1516  0090                     	;# 
  1517  0091                     	;# 
  1518  0092                     	;# 
  1519  0093                     	;# 
  1520  0094                     	;# 
  1521  0095                     	;# 
  1522  0096                     	;# 
  1523  0098                     	;# 
  1524  0099                     	;# 
  1525  009A                     	;# 
  1526  009B                     	;# 
  1527  009B                     	;# 
  1528  009C                     	;# 
  1529  009D                     	;# 
  1530  009E                     	;# 
  1531  009F                     	;# 
  1532  010C                     	;# 
  1533  010D                     	;# 
  1534  010E                     	;# 
  1535  0111                     	;# 
  1536  0112                     	;# 
  1537  0113                     	;# 
  1538  0114                     	;# 
  1539  0115                     	;# 
  1540  0116                     	;# 
  1541  0117                     	;# 
  1542  0118                     	;# 
  1543  0119                     	;# 
  1544  011C                     	;# 
  1545  018C                     	;# 
  1546  018D                     	;# 
  1547  018E                     	;# 
  1548  0191                     	;# 
  1549  0191                     	;# 
  1550  0192                     	;# 
  1551  0193                     	;# 
  1552  0193                     	;# 
  1553  0194                     	;# 
  1554  0195                     	;# 
  1555  0196                     	;# 
  1556  0197                     	;# 
  1557  0199                     	;# 
  1558  0199                     	;# 
  1559  0199                     	;# 
  1560  019A                     	;# 
  1561  019A                     	;# 
  1562  019A                     	;# 
  1563  019B                     	;# 
  1564  019B                     	;# 
  1565  019B                     	;# 
  1566  019B                     	;# 
  1567  019B                     	;# 
  1568  019C                     	;# 
  1569  019C                     	;# 
  1570  019C                     	;# 
  1571  019D                     	;# 
  1572  019D                     	;# 
  1573  019D                     	;# 
  1574  019E                     	;# 
  1575  019E                     	;# 
  1576  019E                     	;# 
  1577  019F                     	;# 
  1578  019F                     	;# 
  1579  019F                     	;# 
  1580  019F                     	;# 
  1581  019F                     	;# 
  1582  020C                     	;# 
  1583  020D                     	;# 
  1584  020E                     	;# 
  1585  0211                     	;# 
  1586  0211                     	;# 
  1587  0212                     	;# 
  1588  0212                     	;# 
  1589  0213                     	;# 
  1590  0213                     	;# 
  1591  0214                     	;# 
  1592  0214                     	;# 
  1593  0215                     	;# 
  1594  0215                     	;# 
  1595  0215                     	;# 
  1596  0215                     	;# 
  1597  0216                     	;# 
  1598  0216                     	;# 
  1599  0217                     	;# 
  1600  0217                     	;# 
  1601  028C                     	;# 
  1602  028D                     	;# 
  1603  028E                     	;# 
  1604  0291                     	;# 
  1605  0291                     	;# 
  1606  0292                     	;# 
  1607  0293                     	;# 
  1608  0294                     	;# 
  1609  0298                     	;# 
  1610  0298                     	;# 
  1611  0299                     	;# 
  1612  029A                     	;# 
  1613  029B                     	;# 
  1614  029E                     	;# 
  1615  030C                     	;# 
  1616  030D                     	;# 
  1617  030E                     	;# 
  1618  038C                     	;# 
  1619  038D                     	;# 
  1620  038E                     	;# 
  1621  0391                     	;# 
  1622  0392                     	;# 
  1623  0393                     	;# 
  1624  0394                     	;# 
  1625  0395                     	;# 
  1626  0396                     	;# 
  1627  0397                     	;# 
  1628  0398                     	;# 
  1629  0399                     	;# 
  1630  040E                     	;# 
  1631  0413                     	;# 
  1632  0413                     	;# 
  1633  0414                     	;# 
  1634  0414                     	;# 
  1635  0415                     	;# 
  1636  0416                     	;# 
  1637  0417                     	;# 
  1638  0418                     	;# 
  1639  041A                     	;# 
  1640  041A                     	;# 
  1641  041B                     	;# 
  1642  041B                     	;# 
  1643  041C                     	;# 
  1644  041D                     	;# 
  1645  041E                     	;# 
  1646  041F                     	;# 
  1647  0493                     	;# 
  1648  0494                     	;# 
  1649  0495                     	;# 
  1650  0496                     	;# 
  1651  049A                     	;# 
  1652  049B                     	;# 
  1653  049C                     	;# 
  1654  049D                     	;# 
  1655  058C                     	;# 
  1656  058C                     	;# 
  1657  058D                     	;# 
  1658  058E                     	;# 
  1659  058E                     	;# 
  1660  058F                     	;# 
  1661  0590                     	;# 
  1662  0590                     	;# 
  1663  0591                     	;# 
  1664  0592                     	;# 
  1665  0592                     	;# 
  1666  0593                     	;# 
  1667  0594                     	;# 
  1668  0594                     	;# 
  1669  0595                     	;# 
  1670  0596                     	;# 
  1671  0596                     	;# 
  1672  0597                     	;# 
  1673  0598                     	;# 
  1674  0599                     	;# 
  1675  059A                     	;# 
  1676  059B                     	;# 
  1677  059B                     	;# 
  1678  059C                     	;# 
  1679  059D                     	;# 
  1680  060C                     	;# 
  1681  060C                     	;# 
  1682  060D                     	;# 
  1683  060E                     	;# 
  1684  060F                     	;# 
  1685  060F                     	;# 
  1686  0610                     	;# 
  1687  0611                     	;# 
  1688  0612                     	;# 
  1689  0613                     	;# 
  1690  0614                     	;# 
  1691  0617                     	;# 
  1692  0618                     	;# 
  1693  0619                     	;# 
  1694  061A                     	;# 
  1695  061B                     	;# 
  1696  061C                     	;# 
  1697  0691                     	;# 
  1698  0692                     	;# 
  1699  0693                     	;# 
  1700  0694                     	;# 
  1701  0695                     	;# 
  1702  0696                     	;# 
  1703  0697                     	;# 
  1704  0699                     	;# 
  1705  069A                     	;# 
  1706  0711                     	;# 
  1707  0712                     	;# 
  1708  0713                     	;# 
  1709  0714                     	;# 
  1710  0715                     	;# 
  1711  0718                     	;# 
  1712  0718                     	;# 
  1713  0719                     	;# 
  1714  071A                     	;# 
  1715  071A                     	;# 
  1716  071B                     	;# 
  1717  071C                     	;# 
  1718  071D                     	;# 
  1719  0791                     	;# 
  1720  0791                     	;# 
  1721  0792                     	;# 
  1722  0793                     	;# 
  1723  0793                     	;# 
  1724  0794                     	;# 
  1725  0795                     	;# 
  1726  0795                     	;# 
  1727  0796                     	;# 
  1728  0797                     	;# 
  1729  0797                     	;# 
  1730  0798                     	;# 
  1731  0799                     	;# 
  1732  079A                     	;# 
  1733  080C                     	;# 
  1734  080C                     	;# 
  1735  080D                     	;# 
  1736  080E                     	;# 
  1737  080E                     	;# 
  1738  080F                     	;# 
  1739  0810                     	;# 
  1740  0810                     	;# 
  1741  0811                     	;# 
  1742  0812                     	;# 
  1743  0812                     	;# 
  1744  0813                     	;# 
  1745  0814                     	;# 
  1746  0815                     	;# 
  1747  0816                     	;# 
  1748  0817                     	;# 
  1749  0818                     	;# 
  1750  0819                     	;# 
  1751  081A                     	;# 
  1752  081A                     	;# 
  1753  081B                     	;# 
  1754  081C                     	;# 
  1755  081C                     	;# 
  1756  081D                     	;# 
  1757  088C                     	;# 
  1758  088D                     	;# 
  1759  088E                     	;# 
  1760  088F                     	;# 
  1761  088F                     	;# 
  1762  0890                     	;# 
  1763  0891                     	;# 
  1764  0892                     	;# 
  1765  0893                     	;# 
  1766  0893                     	;# 
  1767  0894                     	;# 
  1768  0895                     	;# 
  1769  0896                     	;# 
  1770  0897                     	;# 
  1771  0897                     	;# 
  1772  0898                     	;# 
  1773  0899                     	;# 
  1774  0D8C                     	;# 
  1775  0D8C                     	;# 
  1776  0D8D                     	;# 
  1777  0D8E                     	;# 
  1778  0D8F                     	;# 
  1779  0D8F                     	;# 
  1780  0D90                     	;# 
  1781  0D91                     	;# 
  1782  0D92                     	;# 
  1783  0D92                     	;# 
  1784  0D93                     	;# 
  1785  0D94                     	;# 
  1786  0D95                     	;# 
  1787  0D95                     	;# 
  1788  0D96                     	;# 
  1789  0D97                     	;# 
  1790  0D98                     	;# 
  1791  0D99                     	;# 
  1792  0D9A                     	;# 
  1793  0D9B                     	;# 
  1794  0D9C                     	;# 
  1795  0D9D                     	;# 
  1796  0D9E                     	;# 
  1797  0D9E                     	;# 
  1798  0D9F                     	;# 
  1799  0DA0                     	;# 
  1800  0DA1                     	;# 
  1801  0DA1                     	;# 
  1802  0DA2                     	;# 
  1803  0DA3                     	;# 
  1804  0DA4                     	;# 
  1805  0DA4                     	;# 
  1806  0DA5                     	;# 
  1807  0DA6                     	;# 
  1808  0DA7                     	;# 
  1809  0DA7                     	;# 
  1810  0DA8                     	;# 
  1811  0DA9                     	;# 
  1812  0DAA                     	;# 
  1813  0DAB                     	;# 
  1814  0DAC                     	;# 
  1815  0DAD                     	;# 
  1816  0DAE                     	;# 
  1817  0DAF                     	;# 
  1818  0E0F                     	;# 
  1819  0E10                     	;# 
  1820  0E11                     	;# 
  1821  0E12                     	;# 
  1822  0E13                     	;# 
  1823  0E14                     	;# 
  1824  0E15                     	;# 
  1825  0E16                     	;# 
  1826  0E17                     	;# 
  1827  0E18                     	;# 
  1828  0E19                     	;# 
  1829  0E1A                     	;# 
  1830  0E1B                     	;# 
  1831  0E1C                     	;# 
  1832  0E1D                     	;# 
  1833  0E1E                     	;# 
  1834  0E1F                     	;# 
  1835  0E20                     	;# 
  1836  0E21                     	;# 
  1837  0E22                     	;# 
  1838  0E23                     	;# 
  1839  0E24                     	;# 
  1840  0E25                     	;# 
  1841  0E26                     	;# 
  1842  0E27                     	;# 
  1843  0E28                     	;# 
  1844  0E29                     	;# 
  1845  0E2A                     	;# 
  1846  0E2B                     	;# 
  1847  0E2C                     	;# 
  1848  0E2D                     	;# 
  1849  0E2E                     	;# 
  1850  0E90                     	;# 
  1851  0E91                     	;# 
  1852  0E92                     	;# 
  1853  0E94                     	;# 
  1854  0E95                     	;# 
  1855  0E9C                     	;# 
  1856  0E9D                     	;# 
  1857  0E9E                     	;# 
  1858  0E9F                     	;# 
  1859  0EA0                     	;# 
  1860  0EA1                     	;# 
  1861  0EA2                     	;# 
  1862  0EA3                     	;# 
  1863  0EA4                     	;# 
  1864  0EA5                     	;# 
  1865  0EA6                     	;# 
  1866  0EA7                     	;# 
  1867  0F0F                     	;# 
  1868  0F10                     	;# 
  1869  0F11                     	;# 
  1870  0F12                     	;# 
  1871  0F13                     	;# 
  1872  0F14                     	;# 
  1873  0F15                     	;# 
  1874  0F16                     	;# 
  1875  0F17                     	;# 
  1876  0F18                     	;# 
  1877  0F19                     	;# 
  1878  0F1A                     	;# 
  1879  0F1B                     	;# 
  1880  0F1C                     	;# 
  1881  0F1D                     	;# 
  1882  0F1E                     	;# 
  1883  0F1F                     	;# 
  1884  0F20                     	;# 
  1885  0F21                     	;# 
  1886  0F22                     	;# 
  1887  0F23                     	;# 
  1888  0F24                     	;# 
  1889  0F25                     	;# 
  1890  0F26                     	;# 
  1891  0F27                     	;# 
  1892  0F28                     	;# 
  1893  0F29                     	;# 
  1894  0F2A                     	;# 
  1895  0F2B                     	;# 
  1896  0F2C                     	;# 
  1897  0F2D                     	;# 
  1898  0F2E                     	;# 
  1899  0F2F                     	;# 
  1900  0F30                     	;# 
  1901  0F31                     	;# 
  1902  0F32                     	;# 
  1903  0F33                     	;# 
  1904  0F34                     	;# 
  1905  0F35                     	;# 
  1906  0F36                     	;# 
  1907  0F37                     	;# 
  1908  0FE4                     	;# 
  1909  0FE5                     	;# 
  1910  0FE6                     	;# 
  1911  0FE7                     	;# 
  1912  0FE8                     	;# 
  1913  0FE9                     	;# 
  1914  0FEA                     	;# 
  1915  0FEB                     	;# 
  1916  0FED                     	;# 
  1917  0FEE                     	;# 
  1918  0FEF                     	;# 
  1919  0000                     	;# 
  1920  0001                     	;# 
  1921  0002                     	;# 
  1922  0003                     	;# 
  1923  0004                     	;# 
  1924  0005                     	;# 
  1925  0006                     	;# 
  1926  0007                     	;# 
  1927  0008                     	;# 
  1928  0009                     	;# 
  1929  000A                     	;# 
  1930  000B                     	;# 
  1931  000C                     	;# 
  1932  000D                     	;# 
  1933  000E                     	;# 
  1934  0010                     	;# 
  1935  0011                     	;# 
  1936  0012                     	;# 
  1937  0013                     	;# 
  1938  0014                     	;# 
  1939  0015                     	;# 
  1940  0016                     	;# 
  1941  0016                     	;# 
  1942  0017                     	;# 
  1943  0018                     	;# 
  1944  0019                     	;# 
  1945  001A                     	;# 
  1946  001A                     	;# 
  1947  001B                     	;# 
  1948  001B                     	;# 
  1949  001C                     	;# 
  1950  001D                     	;# 
  1951  001E                     	;# 
  1952  001F                     	;# 
  1953  008C                     	;# 
  1954  008D                     	;# 
  1955  008E                     	;# 
  1956  0090                     	;# 
  1957  0091                     	;# 
  1958  0092                     	;# 
  1959  0093                     	;# 
  1960  0094                     	;# 
  1961  0095                     	;# 
  1962  0096                     	;# 
  1963  0098                     	;# 
  1964  0099                     	;# 
  1965  009A                     	;# 
  1966  009B                     	;# 
  1967  009B                     	;# 
  1968  009C                     	;# 
  1969  009D                     	;# 
  1970  009E                     	;# 
  1971  009F                     	;# 
  1972  010C                     	;# 
  1973  010D                     	;# 
  1974  010E                     	;# 
  1975  0111                     	;# 
  1976  0112                     	;# 
  1977  0113                     	;# 
  1978  0114                     	;# 
  1979  0115                     	;# 
  1980  0116                     	;# 
  1981  0117                     	;# 
  1982  0118                     	;# 
  1983  0119                     	;# 
  1984  011C                     	;# 
  1985  018C                     	;# 
  1986  018D                     	;# 
  1987  018E                     	;# 
  1988  0191                     	;# 
  1989  0191                     	;# 
  1990  0192                     	;# 
  1991  0193                     	;# 
  1992  0193                     	;# 
  1993  0194                     	;# 
  1994  0195                     	;# 
  1995  0196                     	;# 
  1996  0197                     	;# 
  1997  0199                     	;# 
  1998  0199                     	;# 
  1999  0199                     	;# 
  2000  019A                     	;# 
  2001  019A                     	;# 
  2002  019A                     	;# 
  2003  019B                     	;# 
  2004  019B                     	;# 
  2005  019B                     	;# 
  2006  019B                     	;# 
  2007  019B                     	;# 
  2008  019C                     	;# 
  2009  019C                     	;# 
  2010  019C                     	;# 
  2011  019D                     	;# 
  2012  019D                     	;# 
  2013  019D                     	;# 
  2014  019E                     	;# 
  2015  019E                     	;# 
  2016  019E                     	;# 
  2017  019F                     	;# 
  2018  019F                     	;# 
  2019  019F                     	;# 
  2020  019F                     	;# 
  2021  019F                     	;# 
  2022  020C                     	;# 
  2023  020D                     	;# 
  2024  020E                     	;# 
  2025  0211                     	;# 
  2026  0211                     	;# 
  2027  0212                     	;# 
  2028  0212                     	;# 
  2029  0213                     	;# 
  2030  0213                     	;# 
  2031  0214                     	;# 
  2032  0214                     	;# 
  2033  0215                     	;# 
  2034  0215                     	;# 
  2035  0215                     	;# 
  2036  0215                     	;# 
  2037  0216                     	;# 
  2038  0216                     	;# 
  2039  0217                     	;# 
  2040  0217                     	;# 
  2041  028C                     	;# 
  2042  028D                     	;# 
  2043  028E                     	;# 
  2044  0291                     	;# 
  2045  0291                     	;# 
  2046  0292                     	;# 
  2047  0293                     	;# 
  2048  0294                     	;# 
  2049  0298                     	;# 
  2050  0298                     	;# 
  2051  0299                     	;# 
  2052  029A                     	;# 
  2053  029B                     	;# 
  2054  029E                     	;# 
  2055  030C                     	;# 
  2056  030D                     	;# 
  2057  030E                     	;# 
  2058  038C                     	;# 
  2059  038D                     	;# 
  2060  038E                     	;# 
  2061  0391                     	;# 
  2062  0392                     	;# 
  2063  0393                     	;# 
  2064  0394                     	;# 
  2065  0395                     	;# 
  2066  0396                     	;# 
  2067  0397                     	;# 
  2068  0398                     	;# 
  2069  0399                     	;# 
  2070  040E                     	;# 
  2071  0413                     	;# 
  2072  0413                     	;# 
  2073  0414                     	;# 
  2074  0414                     	;# 
  2075  0415                     	;# 
  2076  0416                     	;# 
  2077  0417                     	;# 
  2078  0418                     	;# 
  2079  041A                     	;# 
  2080  041A                     	;# 
  2081  041B                     	;# 
  2082  041B                     	;# 
  2083  041C                     	;# 
  2084  041D                     	;# 
  2085  041E                     	;# 
  2086  041F                     	;# 
  2087  0493                     	;# 
  2088  0494                     	;# 
  2089  0495                     	;# 
  2090  0496                     	;# 
  2091  049A                     	;# 
  2092  049B                     	;# 
  2093  049C                     	;# 
  2094  049D                     	;# 
  2095  058C                     	;# 
  2096  058C                     	;# 
  2097  058D                     	;# 
  2098  058E                     	;# 
  2099  058E                     	;# 
  2100  058F                     	;# 
  2101  0590                     	;# 
  2102  0590                     	;# 
  2103  0591                     	;# 
  2104  0592                     	;# 
  2105  0592                     	;# 
  2106  0593                     	;# 
  2107  0594                     	;# 
  2108  0594                     	;# 
  2109  0595                     	;# 
  2110  0596                     	;# 
  2111  0596                     	;# 
  2112  0597                     	;# 
  2113  0598                     	;# 
  2114  0599                     	;# 
  2115  059A                     	;# 
  2116  059B                     	;# 
  2117  059B                     	;# 
  2118  059C                     	;# 
  2119  059D                     	;# 
  2120  060C                     	;# 
  2121  060C                     	;# 
  2122  060D                     	;# 
  2123  060E                     	;# 
  2124  060F                     	;# 
  2125  060F                     	;# 
  2126  0610                     	;# 
  2127  0611                     	;# 
  2128  0612                     	;# 
  2129  0613                     	;# 
  2130  0614                     	;# 
  2131  0617                     	;# 
  2132  0618                     	;# 
  2133  0619                     	;# 
  2134  061A                     	;# 
  2135  061B                     	;# 
  2136  061C                     	;# 
  2137  0691                     	;# 
  2138  0692                     	;# 
  2139  0693                     	;# 
  2140  0694                     	;# 
  2141  0695                     	;# 
  2142  0696                     	;# 
  2143  0697                     	;# 
  2144  0699                     	;# 
  2145  069A                     	;# 
  2146  0711                     	;# 
  2147  0712                     	;# 
  2148  0713                     	;# 
  2149  0714                     	;# 
  2150  0715                     	;# 
  2151  0718                     	;# 
  2152  0718                     	;# 
  2153  0719                     	;# 
  2154  071A                     	;# 
  2155  071A                     	;# 
  2156  071B                     	;# 
  2157  071C                     	;# 
  2158  071D                     	;# 
  2159  0791                     	;# 
  2160  0791                     	;# 
  2161  0792                     	;# 
  2162  0793                     	;# 
  2163  0793                     	;# 
  2164  0794                     	;# 
  2165  0795                     	;# 
  2166  0795                     	;# 
  2167  0796                     	;# 
  2168  0797                     	;# 
  2169  0797                     	;# 
  2170  0798                     	;# 
  2171  0799                     	;# 
  2172  079A                     	;# 
  2173  080C                     	;# 
  2174  080C                     	;# 
  2175  080D                     	;# 
  2176  080E                     	;# 
  2177  080E                     	;# 
  2178  080F                     	;# 
  2179  0810                     	;# 
  2180  0810                     	;# 
  2181  0811                     	;# 
  2182  0812                     	;# 
  2183  0812                     	;# 
  2184  0813                     	;# 
  2185  0814                     	;# 
  2186  0815                     	;# 
  2187  0816                     	;# 
  2188  0817                     	;# 
  2189  0818                     	;# 
  2190  0819                     	;# 
  2191  081A                     	;# 
  2192  081A                     	;# 
  2193  081B                     	;# 
  2194  081C                     	;# 
  2195  081C                     	;# 
  2196  081D                     	;# 
  2197  088C                     	;# 
  2198  088D                     	;# 
  2199  088E                     	;# 
  2200  088F                     	;# 
  2201  088F                     	;# 
  2202  0890                     	;# 
  2203  0891                     	;# 
  2204  0892                     	;# 
  2205  0893                     	;# 
  2206  0893                     	;# 
  2207  0894                     	;# 
  2208  0895                     	;# 
  2209  0896                     	;# 
  2210  0897                     	;# 
  2211  0897                     	;# 
  2212  0898                     	;# 
  2213  0899                     	;# 
  2214  0D8C                     	;# 
  2215  0D8C                     	;# 
  2216  0D8D                     	;# 
  2217  0D8E                     	;# 
  2218  0D8F                     	;# 
  2219  0D8F                     	;# 
  2220  0D90                     	;# 
  2221  0D91                     	;# 
  2222  0D92                     	;# 
  2223  0D92                     	;# 
  2224  0D93                     	;# 
  2225  0D94                     	;# 
  2226  0D95                     	;# 
  2227  0D95                     	;# 
  2228  0D96                     	;# 
  2229  0D97                     	;# 
  2230  0D98                     	;# 
  2231  0D99                     	;# 
  2232  0D9A                     	;# 
  2233  0D9B                     	;# 
  2234  0D9C                     	;# 
  2235  0D9D                     	;# 
  2236  0D9E                     	;# 
  2237  0D9E                     	;# 
  2238  0D9F                     	;# 
  2239  0DA0                     	;# 
  2240  0DA1                     	;# 
  2241  0DA1                     	;# 
  2242  0DA2                     	;# 
  2243  0DA3                     	;# 
  2244  0DA4                     	;# 
  2245  0DA4                     	;# 
  2246  0DA5                     	;# 
  2247  0DA6                     	;# 
  2248  0DA7                     	;# 
  2249  0DA7                     	;# 
  2250  0DA8                     	;# 
  2251  0DA9                     	;# 
  2252  0DAA                     	;# 
  2253  0DAB                     	;# 
  2254  0DAC                     	;# 
  2255  0DAD                     	;# 
  2256  0DAE                     	;# 
  2257  0DAF                     	;# 
  2258  0E0F                     	;# 
  2259  0E10                     	;# 
  2260  0E11                     	;# 
  2261  0E12                     	;# 
  2262  0E13                     	;# 
  2263  0E14                     	;# 
  2264  0E15                     	;# 
  2265  0E16                     	;# 
  2266  0E17                     	;# 
  2267  0E18                     	;# 
  2268  0E19                     	;# 
  2269  0E1A                     	;# 
  2270  0E1B                     	;# 
  2271  0E1C                     	;# 
  2272  0E1D                     	;# 
  2273  0E1E                     	;# 
  2274  0E1F                     	;# 
  2275  0E20                     	;# 
  2276  0E21                     	;# 
  2277  0E22                     	;# 
  2278  0E23                     	;# 
  2279  0E24                     	;# 
  2280  0E25                     	;# 
  2281  0E26                     	;# 
  2282  0E27                     	;# 
  2283  0E28                     	;# 
  2284  0E29                     	;# 
  2285  0E2A                     	;# 
  2286  0E2B                     	;# 
  2287  0E2C                     	;# 
  2288  0E2D                     	;# 
  2289  0E2E                     	;# 
  2290  0E90                     	;# 
  2291  0E91                     	;# 
  2292  0E92                     	;# 
  2293  0E94                     	;# 
  2294  0E95                     	;# 
  2295  0E9C                     	;# 
  2296  0E9D                     	;# 
  2297  0E9E                     	;# 
  2298  0E9F                     	;# 
  2299  0EA0                     	;# 
  2300  0EA1                     	;# 
  2301  0EA2                     	;# 
  2302  0EA3                     	;# 
  2303  0EA4                     	;# 
  2304  0EA5                     	;# 
  2305  0EA6                     	;# 
  2306  0EA7                     	;# 
  2307  0F0F                     	;# 
  2308  0F10                     	;# 
  2309  0F11                     	;# 
  2310  0F12                     	;# 
  2311  0F13                     	;# 
  2312  0F14                     	;# 
  2313  0F15                     	;# 
  2314  0F16                     	;# 
  2315  0F17                     	;# 
  2316  0F18                     	;# 
  2317  0F19                     	;# 
  2318  0F1A                     	;# 
  2319  0F1B                     	;# 
  2320  0F1C                     	;# 
  2321  0F1D                     	;# 
  2322  0F1E                     	;# 
  2323  0F1F                     	;# 
  2324  0F20                     	;# 
  2325  0F21                     	;# 
  2326  0F22                     	;# 
  2327  0F23                     	;# 
  2328  0F24                     	;# 
  2329  0F25                     	;# 
  2330  0F26                     	;# 
  2331  0F27                     	;# 
  2332  0F28                     	;# 
  2333  0F29                     	;# 
  2334  0F2A                     	;# 
  2335  0F2B                     	;# 
  2336  0F2C                     	;# 
  2337  0F2D                     	;# 
  2338  0F2E                     	;# 
  2339  0F2F                     	;# 
  2340  0F30                     	;# 
  2341  0F31                     	;# 
  2342  0F32                     	;# 
  2343  0F33                     	;# 
  2344  0F34                     	;# 
  2345  0F35                     	;# 
  2346  0F36                     	;# 
  2347  0F37                     	;# 
  2348  0FE4                     	;# 
  2349  0FE5                     	;# 
  2350  0FE6                     	;# 
  2351  0FE7                     	;# 
  2352  0FE8                     	;# 
  2353  0FE9                     	;# 
  2354  0FEA                     	;# 
  2355  0FEB                     	;# 
  2356  0FED                     	;# 
  2357  0FEE                     	;# 
  2358  0FEF                     	;# 
  2359  0000                     	;# 
  2360  0001                     	;# 
  2361  0002                     	;# 
  2362  0003                     	;# 
  2363  0004                     	;# 
  2364  0005                     	;# 
  2365  0006                     	;# 
  2366  0007                     	;# 
  2367  0008                     	;# 
  2368  0009                     	;# 
  2369  000A                     	;# 
  2370  000B                     	;# 
  2371  000C                     	;# 
  2372  000D                     	;# 
  2373  000E                     	;# 
  2374  0010                     	;# 
  2375  0011                     	;# 
  2376  0012                     	;# 
  2377  0013                     	;# 
  2378  0014                     	;# 
  2379  0015                     	;# 
  2380  0016                     	;# 
  2381  0016                     	;# 
  2382  0017                     	;# 
  2383  0018                     	;# 
  2384  0019                     	;# 
  2385  001A                     	;# 
  2386  001A                     	;# 
  2387  001B                     	;# 
  2388  001B                     	;# 
  2389  001C                     	;# 
  2390  001D                     	;# 
  2391  001E                     	;# 
  2392  001F                     	;# 
  2393  008C                     	;# 
  2394  008D                     	;# 
  2395  008E                     	;# 
  2396  0090                     	;# 
  2397  0091                     	;# 
  2398  0092                     	;# 
  2399  0093                     	;# 
  2400  0094                     	;# 
  2401  0095                     	;# 
  2402  0096                     	;# 
  2403  0098                     	;# 
  2404  0099                     	;# 
  2405  009A                     	;# 
  2406  009B                     	;# 
  2407  009B                     	;# 
  2408  009C                     	;# 
  2409  009D                     	;# 
  2410  009E                     	;# 
  2411  009F                     	;# 
  2412  010C                     	;# 
  2413  010D                     	;# 
  2414  010E                     	;# 
  2415  0111                     	;# 
  2416  0112                     	;# 
  2417  0113                     	;# 
  2418  0114                     	;# 
  2419  0115                     	;# 
  2420  0116                     	;# 
  2421  0117                     	;# 
  2422  0118                     	;# 
  2423  0119                     	;# 
  2424  011C                     	;# 
  2425  018C                     	;# 
  2426  018D                     	;# 
  2427  018E                     	;# 
  2428  0191                     	;# 
  2429  0191                     	;# 
  2430  0192                     	;# 
  2431  0193                     	;# 
  2432  0193                     	;# 
  2433  0194                     	;# 
  2434  0195                     	;# 
  2435  0196                     	;# 
  2436  0197                     	;# 
  2437  0199                     	;# 
  2438  0199                     	;# 
  2439  0199                     	;# 
  2440  019A                     	;# 
  2441  019A                     	;# 
  2442  019A                     	;# 
  2443  019B                     	;# 
  2444  019B                     	;# 
  2445  019B                     	;# 
  2446  019B                     	;# 
  2447  019B                     	;# 
  2448  019C                     	;# 
  2449  019C                     	;# 
  2450  019C                     	;# 
  2451  019D                     	;# 
  2452  019D                     	;# 
  2453  019D                     	;# 
  2454  019E                     	;# 
  2455  019E                     	;# 
  2456  019E                     	;# 
  2457  019F                     	;# 
  2458  019F                     	;# 
  2459  019F                     	;# 
  2460  019F                     	;# 
  2461  019F                     	;# 
  2462  020C                     	;# 
  2463  020D                     	;# 
  2464  020E                     	;# 
  2465  0211                     	;# 
  2466  0211                     	;# 
  2467  0212                     	;# 
  2468  0212                     	;# 
  2469  0213                     	;# 
  2470  0213                     	;# 
  2471  0214                     	;# 
  2472  0214                     	;# 
  2473  0215                     	;# 
  2474  0215                     	;# 
  2475  0215                     	;# 
  2476  0215                     	;# 
  2477  0216                     	;# 
  2478  0216                     	;# 
  2479  0217                     	;# 
  2480  0217                     	;# 
  2481  028C                     	;# 
  2482  028D                     	;# 
  2483  028E                     	;# 
  2484  0291                     	;# 
  2485  0291                     	;# 
  2486  0292                     	;# 
  2487  0293                     	;# 
  2488  0294                     	;# 
  2489  0298                     	;# 
  2490  0298                     	;# 
  2491  0299                     	;# 
  2492  029A                     	;# 
  2493  029B                     	;# 
  2494  029E                     	;# 
  2495  030C                     	;# 
  2496  030D                     	;# 
  2497  030E                     	;# 
  2498  038C                     	;# 
  2499  038D                     	;# 
  2500  038E                     	;# 
  2501  0391                     	;# 
  2502  0392                     	;# 
  2503  0393                     	;# 
  2504  0394                     	;# 
  2505  0395                     	;# 
  2506  0396                     	;# 
  2507  0397                     	;# 
  2508  0398                     	;# 
  2509  0399                     	;# 
  2510  040E                     	;# 
  2511  0413                     	;# 
  2512  0413                     	;# 
  2513  0414                     	;# 
  2514  0414                     	;# 
  2515  0415                     	;# 
  2516  0416                     	;# 
  2517  0417                     	;# 
  2518  0418                     	;# 
  2519  041A                     	;# 
  2520  041A                     	;# 
  2521  041B                     	;# 
  2522  041B                     	;# 
  2523  041C                     	;# 
  2524  041D                     	;# 
  2525  041E                     	;# 
  2526  041F                     	;# 
  2527  0493                     	;# 
  2528  0494                     	;# 
  2529  0495                     	;# 
  2530  0496                     	;# 
  2531  049A                     	;# 
  2532  049B                     	;# 
  2533  049C                     	;# 
  2534  049D                     	;# 
  2535  058C                     	;# 
  2536  058C                     	;# 
  2537  058D                     	;# 
  2538  058E                     	;# 
  2539  058E                     	;# 
  2540  058F                     	;# 
  2541  0590                     	;# 
  2542  0590                     	;# 
  2543  0591                     	;# 
  2544  0592                     	;# 
  2545  0592                     	;# 
  2546  0593                     	;# 
  2547  0594                     	;# 
  2548  0594                     	;# 
  2549  0595                     	;# 
  2550  0596                     	;# 
  2551  0596                     	;# 
  2552  0597                     	;# 
  2553  0598                     	;# 
  2554  0599                     	;# 
  2555  059A                     	;# 
  2556  059B                     	;# 
  2557  059B                     	;# 
  2558  059C                     	;# 
  2559  059D                     	;# 
  2560  060C                     	;# 
  2561  060C                     	;# 
  2562  060D                     	;# 
  2563  060E                     	;# 
  2564  060F                     	;# 
  2565  060F                     	;# 
  2566  0610                     	;# 
  2567  0611                     	;# 
  2568  0612                     	;# 
  2569  0613                     	;# 
  2570  0614                     	;# 
  2571  0617                     	;# 
  2572  0618                     	;# 
  2573  0619                     	;# 
  2574  061A                     	;# 
  2575  061B                     	;# 
  2576  061C                     	;# 
  2577  0691                     	;# 
  2578  0692                     	;# 
  2579  0693                     	;# 
  2580  0694                     	;# 
  2581  0695                     	;# 
  2582  0696                     	;# 
  2583  0697                     	;# 
  2584  0699                     	;# 
  2585  069A                     	;# 
  2586  0711                     	;# 
  2587  0712                     	;# 
  2588  0713                     	;# 
  2589  0714                     	;# 
  2590  0715                     	;# 
  2591  0718                     	;# 
  2592  0718                     	;# 
  2593  0719                     	;# 
  2594  071A                     	;# 
  2595  071A                     	;# 
  2596  071B                     	;# 
  2597  071C                     	;# 
  2598  071D                     	;# 
  2599  0791                     	;# 
  2600  0791                     	;# 
  2601  0792                     	;# 
  2602  0793                     	;# 
  2603  0793                     	;# 
  2604  0794                     	;# 
  2605  0795                     	;# 
  2606  0795                     	;# 
  2607  0796                     	;# 
  2608  0797                     	;# 
  2609  0797                     	;# 
  2610  0798                     	;# 
  2611  0799                     	;# 
  2612  079A                     	;# 
  2613  080C                     	;# 
  2614  080C                     	;# 
  2615  080D                     	;# 
  2616  080E                     	;# 
  2617  080E                     	;# 
  2618  080F                     	;# 
  2619  0810                     	;# 
  2620  0810                     	;# 
  2621  0811                     	;# 
  2622  0812                     	;# 
  2623  0812                     	;# 
  2624  0813                     	;# 
  2625  0814                     	;# 
  2626  0815                     	;# 
  2627  0816                     	;# 
  2628  0817                     	;# 
  2629  0818                     	;# 
  2630  0819                     	;# 
  2631  081A                     	;# 
  2632  081A                     	;# 
  2633  081B                     	;# 
  2634  081C                     	;# 
  2635  081C                     	;# 
  2636  081D                     	;# 
  2637  088C                     	;# 
  2638  088D                     	;# 
  2639  088E                     	;# 
  2640  088F                     	;# 
  2641  088F                     	;# 
  2642  0890                     	;# 
  2643  0891                     	;# 
  2644  0892                     	;# 
  2645  0893                     	;# 
  2646  0893                     	;# 
  2647  0894                     	;# 
  2648  0895                     	;# 
  2649  0896                     	;# 
  2650  0897                     	;# 
  2651  0897                     	;# 
  2652  0898                     	;# 
  2653  0899                     	;# 
  2654  0D8C                     	;# 
  2655  0D8C                     	;# 
  2656  0D8D                     	;# 
  2657  0D8E                     	;# 
  2658  0D8F                     	;# 
  2659  0D8F                     	;# 
  2660  0D90                     	;# 
  2661  0D91                     	;# 
  2662  0D92                     	;# 
  2663  0D92                     	;# 
  2664  0D93                     	;# 
  2665  0D94                     	;# 
  2666  0D95                     	;# 
  2667  0D95                     	;# 
  2668  0D96                     	;# 
  2669  0D97                     	;# 
  2670  0D98                     	;# 
  2671  0D99                     	;# 
  2672  0D9A                     	;# 
  2673  0D9B                     	;# 
  2674  0D9C                     	;# 
  2675  0D9D                     	;# 
  2676  0D9E                     	;# 
  2677  0D9E                     	;# 
  2678  0D9F                     	;# 
  2679  0DA0                     	;# 
  2680  0DA1                     	;# 
  2681  0DA1                     	;# 
  2682  0DA2                     	;# 
  2683  0DA3                     	;# 
  2684  0DA4                     	;# 
  2685  0DA4                     	;# 
  2686  0DA5                     	;# 
  2687  0DA6                     	;# 
  2688  0DA7                     	;# 
  2689  0DA7                     	;# 
  2690  0DA8                     	;# 
  2691  0DA9                     	;# 
  2692  0DAA                     	;# 
  2693  0DAB                     	;# 
  2694  0DAC                     	;# 
  2695  0DAD                     	;# 
  2696  0DAE                     	;# 
  2697  0DAF                     	;# 
  2698  0E0F                     	;# 
  2699  0E10                     	;# 
  2700  0E11                     	;# 
  2701  0E12                     	;# 
  2702  0E13                     	;# 
  2703  0E14                     	;# 
  2704  0E15                     	;# 
  2705  0E16                     	;# 
  2706  0E17                     	;# 
  2707  0E18                     	;# 
  2708  0E19                     	;# 
  2709  0E1A                     	;# 
  2710  0E1B                     	;# 
  2711  0E1C                     	;# 
  2712  0E1D                     	;# 
  2713  0E1E                     	;# 
  2714  0E1F                     	;# 
  2715  0E20                     	;# 
  2716  0E21                     	;# 
  2717  0E22                     	;# 
  2718  0E23                     	;# 
  2719  0E24                     	;# 
  2720  0E25                     	;# 
  2721  0E26                     	;# 
  2722  0E27                     	;# 
  2723  0E28                     	;# 
  2724  0E29                     	;# 
  2725  0E2A                     	;# 
  2726  0E2B                     	;# 
  2727  0E2C                     	;# 
  2728  0E2D                     	;# 
  2729  0E2E                     	;# 
  2730  0E90                     	;# 
  2731  0E91                     	;# 
  2732  0E92                     	;# 
  2733  0E94                     	;# 
  2734  0E95                     	;# 
  2735  0E9C                     	;# 
  2736  0E9D                     	;# 
  2737  0E9E                     	;# 
  2738  0E9F                     	;# 
  2739  0EA0                     	;# 
  2740  0EA1                     	;# 
  2741  0EA2                     	;# 
  2742  0EA3                     	;# 
  2743  0EA4                     	;# 
  2744  0EA5                     	;# 
  2745  0EA6                     	;# 
  2746  0EA7                     	;# 
  2747  0F0F                     	;# 
  2748  0F10                     	;# 
  2749  0F11                     	;# 
  2750  0F12                     	;# 
  2751  0F13                     	;# 
  2752  0F14                     	;# 
  2753  0F15                     	;# 
  2754  0F16                     	;# 
  2755  0F17                     	;# 
  2756  0F18                     	;# 
  2757  0F19                     	;# 
  2758  0F1A                     	;# 
  2759  0F1B                     	;# 
  2760  0F1C                     	;# 
  2761  0F1D                     	;# 
  2762  0F1E                     	;# 
  2763  0F1F                     	;# 
  2764  0F20                     	;# 
  2765  0F21                     	;# 
  2766  0F22                     	;# 
  2767  0F23                     	;# 
  2768  0F24                     	;# 
  2769  0F25                     	;# 
  2770  0F26                     	;# 
  2771  0F27                     	;# 
  2772  0F28                     	;# 
  2773  0F29                     	;# 
  2774  0F2A                     	;# 
  2775  0F2B                     	;# 
  2776  0F2C                     	;# 
  2777  0F2D                     	;# 
  2778  0F2E                     	;# 
  2779  0F2F                     	;# 
  2780  0F30                     	;# 
  2781  0F31                     	;# 
  2782  0F32                     	;# 
  2783  0F33                     	;# 
  2784  0F34                     	;# 
  2785  0F35                     	;# 
  2786  0F36                     	;# 
  2787  0F37                     	;# 
  2788  0FE4                     	;# 
  2789  0FE5                     	;# 
  2790  0FE6                     	;# 
  2791  0FE7                     	;# 
  2792  0FE8                     	;# 
  2793  0FE9                     	;# 
  2794  0FEA                     	;# 
  2795  0FEB                     	;# 
  2796  0FED                     	;# 
  2797  0FEE                     	;# 
  2798  0FEF                     	;# 
  2799                           
  2800                           	psect	idataBANK0
  2801  0003                     __pidataBANK0:	
  2802                           
  2803                           ;initializer for _fall
  2804  0003  3401               	retlw	1
  2805                           
  2806                           	psect	idataBANK1
  2807  05CB                     __pidataBANK1:	
  2808                           
  2809                           ;initializer for _fsmStateTable
  2810  05CB  34F7               	retlw	low _do_I2C_IDLE
  2811  05CC  3407               	retlw	high _do_I2C_IDLE
  2812  05CD  347F               	retlw	low _do_I2C_SEND_ADR_READ
  2813  05CE  3407               	retlw	high _do_I2C_SEND_ADR_READ
  2814  05CF  34B9               	retlw	low _do_I2C_SEND_ADR_WRITE
  2815  05D0  3407               	retlw	high _do_I2C_SEND_ADR_WRITE
  2816  05D1  348F               	retlw	low _do_I2C_TX
  2817  05D2  3402               	retlw	high _do_I2C_TX
  2818  05D3  34BB               	retlw	low _do_I2C_RX
  2819  05D4  3403               	retlw	high _do_I2C_RX
  2820  05D5  34E3               	retlw	low _do_I2C_RCEN
  2821  05D6  3407               	retlw	high _do_I2C_RCEN
  2822  05D7  3472               	retlw	low _do_I2C_TX_EMPTY
  2823  05D8  3404               	retlw	high _do_I2C_TX_EMPTY
  2824  05D9  34C8               	retlw	low _do_I2C_SEND_RESTART_READ
  2825  05DA  340F               	retlw	high _do_I2C_SEND_RESTART_READ
  2826  05DB  34D0               	retlw	low _do_I2C_SEND_RESTART_WRITE
  2827  05DC  340F               	retlw	high _do_I2C_SEND_RESTART_WRITE
  2828  05DD  34D8               	retlw	low _do_I2C_SEND_RESTART
  2829  05DE  340F               	retlw	high _do_I2C_SEND_RESTART
  2830  05DF  34E0               	retlw	low _do_I2C_SEND_STOP
  2831  05E0  340F               	retlw	high _do_I2C_SEND_STOP
  2832  05E1  34E8               	retlw	low _do_I2C_DO_ACK
  2833  05E2  340F               	retlw	high _do_I2C_DO_ACK
  2834  05E3  34F0               	retlw	low _do_I2C_DO_NACK_STOP
  2835  05E4  340F               	retlw	high _do_I2C_DO_NACK_STOP
  2836  05E5  34F8               	retlw	low _do_I2C_DO_NACK_RESTART
  2837  05E6  340F               	retlw	high _do_I2C_DO_NACK_RESTART
  2838  05E7  34C4               	retlw	low _do_I2C_RESET
  2839  05E8  3407               	retlw	high _do_I2C_RESET
  2840  05E9  34C8               	retlw	low _do_I2C_DO_ADDRESS_NACK
  2841  05EA  3404               	retlw	high _do_I2C_DO_ADDRESS_NACK
  2842  0011                     _PIR2bits	set	17
  2843  0010                     _PIR1bits	set	16
  2844  000B                     _INTCONbits	set	11
  2845  0091                     _PIE2bits	set	145
  2846  0090                     _PIE1bits	set	144
  2847  0098                     _OSCTUNE	set	152
  2848  0099                     _OSCCON	set	153
  2849  0095                     _OPTION_REGbits	set	149
  2850  008E                     _TRISC	set	142
  2851  008D                     _TRISB	set	141
  2852  008C                     _TRISA	set	140
  2853  04D6                     _PLLR	set	1238
  2854  0116                     _BORCON	set	278
  2855  010E                     _LATC	set	270
  2856  010D                     _LATB	set	269
  2857  010C                     _LATA	set	268
  2858  018C                     _ANSELA	set	396
  2859  018D                     _ANSELB	set	397
  2860  018E                     _ANSELC	set	398
  2861  0214                     _SSP1STATbits	set	532
  2862  0213                     _SSP1MSK	set	531
  2863  0211                     _SSP1BUF	set	529
  2864  0216                     _SSP1CON2bits	set	534
  2865  0212                     _SSP1ADD	set	530
  2866  0216                     _SSP1CON2	set	534
  2867  0215                     _SSP1CON1	set	533
  2868  0214                     _SSP1STAT	set	532
  2869  0215                     _SSP1CON1bits	set	533
  2870  020E                     _WPUC	set	526
  2871  020C                     _WPUA	set	524
  2872  020D                     _WPUB	set	525
  2873  028E                     _ODCONC	set	654
  2874  028D                     _ODCONB	set	653
  2875  028C                     _ODCONA	set	652
  2876  0E21                     _SSPDATPPS	set	3617
  2877  0E20                     _SSPCLKPPS	set	3616
  2878  0E9C                     _RB4PPS	set	3740
  2879  0E9E                     _RB6PPS	set	3742
  2880                           
  2881                           ; #config settings
  2882  0000                     
  2883                           	psect	cinit
  2884  0029                     start_initialization:	
  2885  0029                     __initialization:	
  2886                           
  2887                           ; Initialize objects allocated to BANK0
  2888  0029  3180  2003  3180   	fcall	__pidataBANK0	;fetch initializer
  2889  002C  00E7               	movwf	__pdataBANK0& (0+127)
  2890                           
  2891                           ; Initialize objects allocated to BANK1
  2892  002D  30CB               	movlw	low __pidataBANK1
  2893  002E  0084               	movwf	4
  2894  002F  3085               	movlw	(high __pidataBANK1)| (0+128)
  2895  0030  0085               	movwf	5
  2896  0031  30CD               	movlw	low __pdataBANK1
  2897  0032  0086               	movwf	6
  2898  0033  3000               	movlw	high __pdataBANK1
  2899  0034  0087               	movwf	7
  2900  0035  3020               	movlw	32
  2901  0036  318F  27AC  3180   	fcall	init_ram
  2902                           
  2903                           ; Clear objects allocated to BANK0
  2904  0039  3020               	movlw	low __pbssBANK0
  2905  003A  0084               	movwf	4
  2906  003B  3000               	movlw	high __pbssBANK0
  2907  003C  0085               	movwf	5
  2908  003D  302A               	movlw	42
  2909  003E  318F  27A6  3180   	fcall	clear_ram0
  2910                           
  2911                           ; Clear objects allocated to BANK1
  2912  0041  30A0               	movlw	low __pbssBANK1
  2913  0042  0084               	movwf	4
  2914  0043  3000               	movlw	high __pbssBANK1
  2915  0044  0085               	movwf	5
  2916  0045  302D               	movlw	45
  2917  0046  318F  27A6         	fcall	clear_ram0
  2918  0048                     end_of_initialization:	
  2919                           ;End of C runtime variable initialization code
  2920                           
  2921  0048                     __end_of__initialization:	
  2922  0048  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2923  0049  0020               	movlb	0
  2924  004A  3182  2ADD         	ljmp	_main	;jump to C main() function
  2925                           
  2926                           	psect	bssBANK0
  2927  0020                     __pbssBANK0:	
  2928  0020                     _i2c_status:	
  2929  0020                     	ds	29
  2930  003D                     _shiftCounter:	
  2931  003D                     	ds	2
  2932  003F                     _i2c_driver_i2cISR:	
  2933  003F                     	ds	2
  2934  0041                     _i2c_driver_busCollisionISR:	
  2935  0041                     	ds	2
  2936  0043                     _topHalf:	
  2937  0043                     	ds	1
  2938  0044                     _wallHeight:	
  2939  0044                     	ds	1
  2940  0045                     _i:	
  2941  0045                     	ds	1
  2942  0046                     _gravityCounter:	
  2943  0046                     	ds	1
  2944  0047                     _start:	
  2945  0047                     	ds	1
  2946  0048                     _elevation:	
  2947  0048                     	ds	1
  2948  0049                     _createWall:	
  2949  0049                     	ds	1
  2950                           
  2951                           	psect	dataBANK0
  2952  0067                     __pdataBANK0:	
  2953  0067                     _fall:	
  2954  0067                     	ds	1
  2955                           
  2956                           	psect	bssBANK1
  2957  00A0                     __pbssBANK1:	
  2958  00A0                     _pixelbuffer:	
  2959  00A0                     	ds	16
  2960  00B0                     _walls:	
  2961  00B0                     	ds	8
  2962  00B8                     _hiscore:	
  2963  00B8                     	ds	2
  2964  00BA                     _score:	
  2965  00BA                     	ds	2
  2966  00BC                     _writebuffer:	
  2967  00BC                     	ds	17
  2968                           
  2969                           	psect	dataBANK1
  2970  00CD                     __pdataBANK1:	
  2971  00CD                     _fsmStateTable:	
  2972  00CD                     	ds	32
  2973                           
  2974                           	psect	inittext
  2975  0FAC                     init_ram:	
  2976  0FAC  00FE               	movwf	126
  2977  0FAD                     initloop:	
  2978  0FAD  0012               	moviw fsr0++
  2979  0FAE  001E               	movwi fsr1++
  2980  0FAF  0BFE               	decfsz	126,f
  2981  0FB0  2FAD               	goto	initloop
  2982  0FB1  3400               	retlw	0
  2983                           
  2984                           	psect	clrtext
  2985  0FA6                     clear_ram0:	
  2986                           ;	Called with FSR0 containing the base address, and
  2987                           ;	WREG with the size to clear
  2988                           
  2989  0FA6  0064               	clrwdt	;clear the watchdog before getting into this loop
  2990  0FA7                     clrloop0:	
  2991  0FA7  0180               	clrf	0	;clear RAM location pointed to by FSR
  2992  0FA8  3101               	addfsr 0,1
  2993  0FA9  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2994  0FAA  2FA7               	goto	clrloop0	;have we reached the end yet?
  2995  0FAB  3400               	retlw	0	;all done for this memory range, return
  2996                           
  2997                           	psect	cstackCOMMON
  2998  0070                     __pcstackCOMMON:	
  2999  0070                     ?_mssp_IRQisEnabled:	
  3000  0070                     ?_i2c_driver_open:	
  3001                           ; 1 bit 
  3002                           
  3003  0070                     ?_i2c_driver_isNACK:	
  3004                           ; 1 bit 
  3005                           
  3006  0070                     ?i1_i2c_driver_isNACK:	
  3007                           ; 1 bit 
  3008                           
  3009  0070                     ?_OSCILLATOR_Initialize:	
  3010                           ; 1 bit 
  3011                           
  3012  0070                     ?_i2c_open:	
  3013                           ; 1 bytes @ 0x0
  3014                           
  3015  0070                     ?_i2c_masterWrite:	
  3016                           ; 1 bytes @ 0x0
  3017                           
  3018  0070                     ?_i2c_close:	
  3019                           ; 1 bytes @ 0x0
  3020                           
  3021  0070                     ?_i2c_busCollisionISR:	
  3022                           ; 1 bytes @ 0x0
  3023                           
  3024  0070                     ??_i2c_busCollisionISR:	
  3025                           ; 1 bytes @ 0x0
  3026                           
  3027  0070                     ?_i2c_ISR:	
  3028                           ; 1 bytes @ 0x0
  3029                           
  3030  0070                     ?_i2c_poller:	
  3031                           ; 1 bytes @ 0x0
  3032                           
  3033  0070                     ?_PIN_MANAGER_Initialize:	
  3034                           ; 1 bytes @ 0x0
  3035                           
  3036  0070                     ?_SYSTEM_Initialize:	
  3037                           ; 1 bytes @ 0x0
  3038                           
  3039  0070                     ?_writeDisplay:	
  3040                           ; 1 bytes @ 0x0
  3041                           
  3042  0070                     ?_clearPixels:	
  3043                           ; 1 bytes @ 0x0
  3044                           
  3045  0070                     ?_initializeDisplay:	
  3046                           ; 1 bytes @ 0x0
  3047                           
  3048  0070                     ?_reverse:	
  3049                           ; 1 bytes @ 0x0
  3050                           
  3051  0070                     ?_drawWalls:	
  3052                           ; 1 bytes @ 0x0
  3053                           
  3054  0070                     ?_shiftWalls:	
  3055                           ; 1 bytes @ 0x0
  3056                           
  3057  0070                     ?_main:	
  3058                           ; 1 bytes @ 0x0
  3059                           
  3060  0070                     ?_mssp_disableIRQ:	
  3061                           ; 1 bytes @ 0x0
  3062                           
  3063  0070                     ?_mssp_clearIRQ:	
  3064                           ; 1 bytes @ 0x0
  3065                           
  3066  0070                     ?_mssp_setIRQ:	
  3067                           ; 1 bytes @ 0x0
  3068                           
  3069  0070                     ?_mssp_waitForEvent:	
  3070                           ; 1 bytes @ 0x0
  3071                           
  3072  0070                     ?_i2c_driver_resetBus:	
  3073                           ; 1 bytes @ 0x0
  3074                           
  3075  0070                     ?_i2c_driver_start:	
  3076                           ; 1 bytes @ 0x0
  3077                           
  3078  0070                     ?_i2c_driver_restart:	
  3079                           ; 1 bytes @ 0x0
  3080                           
  3081  0070                     ?_i2c_driver_stop:	
  3082                           ; 1 bytes @ 0x0
  3083                           
  3084  0070                     ?_i2c_driver_startRX:	
  3085                           ; 1 bytes @ 0x0
  3086                           
  3087  0070                     ?_i2c_driver_getRXData:	
  3088                           ; 1 bytes @ 0x0
  3089                           
  3090  0070                     ?_i2c_driver_TXData:	
  3091                           ; 1 bytes @ 0x0
  3092                           
  3093  0070                     ?_i2c_driver_sendACK:	
  3094                           ; 1 bytes @ 0x0
  3095                           
  3096  0070                     ?_i2c_driver_sendNACK:	
  3097                           ; 1 bytes @ 0x0
  3098                           
  3099  0070                     ?_i2c_driver_clearBusCollision:	
  3100                           ; 1 bytes @ 0x0
  3101                           
  3102  0070                     ??_i2c_driver_clearBusCollision:	
  3103                           ; 1 bytes @ 0x0
  3104                           
  3105  0070                     ?_INTERRUPT_InterruptManager:	
  3106                           ; 1 bytes @ 0x0
  3107                           
  3108  0070                     ?_i2c_masterOperation:	
  3109                           ; 1 bytes @ 0x0
  3110                           
  3111  0070                     ?_do_I2C_RESET:	
  3112                           ; 1 bytes @ 0x0
  3113                           
  3114  0070                     ?_do_I2C_IDLE:	
  3115                           ; 1 bytes @ 0x0
  3116                           
  3117  0070                     ?_do_I2C_SEND_RESTART_READ:	
  3118                           ; 1 bytes @ 0x0
  3119                           
  3120  0070                     ?_do_I2C_SEND_RESTART_WRITE:	
  3121                           ; 1 bytes @ 0x0
  3122                           
  3123  0070                     ?_do_I2C_SEND_RESTART:	
  3124                           ; 1 bytes @ 0x0
  3125                           
  3126  0070                     ?_do_I2C_SEND_STOP:	
  3127                           ; 1 bytes @ 0x0
  3128                           
  3129  0070                     ?_do_I2C_SEND_ADR_READ:	
  3130                           ; 1 bytes @ 0x0
  3131                           
  3132  0070                     ?_do_I2C_SEND_ADR_WRITE:	
  3133                           ; 1 bytes @ 0x0
  3134                           
  3135  0070                     ?_do_I2C_RCEN:	
  3136                           ; 1 bytes @ 0x0
  3137                           
  3138  0070                     ?_do_I2C_DO_ACK:	
  3139                           ; 1 bytes @ 0x0
  3140                           
  3141  0070                     ?_do_I2C_DO_NACK_STOP:	
  3142                           ; 1 bytes @ 0x0
  3143                           
  3144  0070                     ?_do_I2C_DO_NACK_RESTART:	
  3145                           ; 1 bytes @ 0x0
  3146                           
  3147  0070                     ?_do_I2C_DO_ADDRESS_NACK:	
  3148                           ; 1 bytes @ 0x0
  3149                           
  3150  0070                     ?_do_I2C_TX:	
  3151                           ; 1 bytes @ 0x0
  3152                           
  3153  0070                     ?_do_I2C_RX:	
  3154                           ; 1 bytes @ 0x0
  3155                           
  3156  0070                     ?_do_I2C_TX_EMPTY:	
  3157                           ; 1 bytes @ 0x0
  3158                           
  3159  0070                     ?i1_mssp_clearIRQ:	
  3160                           ; 1 bytes @ 0x0
  3161                           
  3162  0070                     ??i1_mssp_clearIRQ:	
  3163                           ; 1 bytes @ 0x0
  3164                           
  3165  0070                     ?i1_mssp_setIRQ:	
  3166                           ; 1 bytes @ 0x0
  3167                           
  3168  0070                     ??i1_mssp_setIRQ:	
  3169                           ; 1 bytes @ 0x0
  3170                           
  3171  0070                     ?i1_i2c_driver_resetBus:	
  3172                           ; 1 bytes @ 0x0
  3173                           
  3174  0070                     ??i1_i2c_driver_resetBus:	
  3175                           ; 1 bytes @ 0x0
  3176                           
  3177  0070                     ?i1_i2c_driver_restart:	
  3178                           ; 1 bytes @ 0x0
  3179                           
  3180  0070                     ??i1_i2c_driver_restart:	
  3181                           ; 1 bytes @ 0x0
  3182                           
  3183  0070                     ?i1_i2c_driver_stop:	
  3184                           ; 1 bytes @ 0x0
  3185                           
  3186  0070                     ??i1_i2c_driver_stop:	
  3187                           ; 1 bytes @ 0x0
  3188                           
  3189  0070                     ??i1_i2c_driver_isNACK:	
  3190                           ; 1 bytes @ 0x0
  3191                           
  3192  0070                     ?i1_i2c_driver_startRX:	
  3193                           ; 1 bytes @ 0x0
  3194                           
  3195  0070                     ??i1_i2c_driver_startRX:	
  3196                           ; 1 bytes @ 0x0
  3197                           
  3198  0070                     ?i1_i2c_driver_getRXData:	
  3199                           ; 1 bytes @ 0x0
  3200                           
  3201  0070                     ??i1_i2c_driver_getRXData:	
  3202                           ; 1 bytes @ 0x0
  3203                           
  3204  0070                     ?i1_i2c_driver_TXData:	
  3205                           ; 1 bytes @ 0x0
  3206                           
  3207  0070                     ??i1_i2c_driver_TXData:	
  3208                           ; 1 bytes @ 0x0
  3209                           
  3210  0070                     ?i1_i2c_driver_sendACK:	
  3211                           ; 1 bytes @ 0x0
  3212                           
  3213  0070                     ??i1_i2c_driver_sendACK:	
  3214                           ; 1 bytes @ 0x0
  3215                           
  3216  0070                     ?i1_i2c_driver_sendNACK:	
  3217                           ; 1 bytes @ 0x0
  3218                           
  3219  0070                     ??i1_i2c_driver_sendNACK:	
  3220                           ; 1 bytes @ 0x0
  3221                           
  3222  0070                     ?i1_i2c_setBuffer:	
  3223                           ; 1 bytes @ 0x0
  3224                           
  3225  0070                     ?i1_do_I2C_RESET:	
  3226                           ; 1 bytes @ 0x0
  3227                           
  3228  0070                     ??i1_do_I2C_RESET:	
  3229                           ; 1 bytes @ 0x0
  3230                           
  3231  0070                     ?i1_do_I2C_IDLE:	
  3232                           ; 1 bytes @ 0x0
  3233                           
  3234  0070                     ??i1_do_I2C_IDLE:	
  3235                           ; 1 bytes @ 0x0
  3236                           
  3237  0070                     ?i1_do_I2C_SEND_RESTART_READ:	
  3238                           ; 1 bytes @ 0x0
  3239                           
  3240  0070                     ??i1_do_I2C_SEND_RESTART_READ:	
  3241                           ; 1 bytes @ 0x0
  3242                           
  3243  0070                     ?i1_do_I2C_SEND_RESTART_WRITE:	
  3244                           ; 1 bytes @ 0x0
  3245                           
  3246  0070                     ??i1_do_I2C_SEND_RESTART_WRITE:	
  3247                           ; 1 bytes @ 0x0
  3248                           
  3249  0070                     ?i1_do_I2C_SEND_RESTART:	
  3250                           ; 1 bytes @ 0x0
  3251                           
  3252  0070                     ??i1_do_I2C_SEND_RESTART:	
  3253                           ; 1 bytes @ 0x0
  3254                           
  3255  0070                     ?i1_do_I2C_SEND_STOP:	
  3256                           ; 1 bytes @ 0x0
  3257                           
  3258  0070                     ??i1_do_I2C_SEND_STOP:	
  3259                           ; 1 bytes @ 0x0
  3260                           
  3261  0070                     ?i1_do_I2C_SEND_ADR_READ:	
  3262                           ; 1 bytes @ 0x0
  3263                           
  3264  0070                     ?i1_do_I2C_SEND_ADR_WRITE:	
  3265                           ; 1 bytes @ 0x0
  3266                           
  3267  0070                     ?i1_do_I2C_RCEN:	
  3268                           ; 1 bytes @ 0x0
  3269                           
  3270  0070                     ??i1_do_I2C_RCEN:	
  3271                           ; 1 bytes @ 0x0
  3272                           
  3273  0070                     ?i1_do_I2C_DO_ACK:	
  3274                           ; 1 bytes @ 0x0
  3275                           
  3276  0070                     ??i1_do_I2C_DO_ACK:	
  3277                           ; 1 bytes @ 0x0
  3278                           
  3279  0070                     ?i1_do_I2C_DO_NACK_STOP:	
  3280                           ; 1 bytes @ 0x0
  3281                           
  3282  0070                     ??i1_do_I2C_DO_NACK_STOP:	
  3283                           ; 1 bytes @ 0x0
  3284                           
  3285  0070                     ?i1_do_I2C_DO_NACK_RESTART:	
  3286                           ; 1 bytes @ 0x0
  3287                           
  3288  0070                     ??i1_do_I2C_DO_NACK_RESTART:	
  3289                           ; 1 bytes @ 0x0
  3290                           
  3291  0070                     ?i1_do_I2C_DO_ADDRESS_NACK:	
  3292                           ; 1 bytes @ 0x0
  3293                           
  3294  0070                     ?i1_do_I2C_TX:	
  3295                           ; 1 bytes @ 0x0
  3296                           
  3297  0070                     ?i1_do_I2C_RX:	
  3298                           ; 1 bytes @ 0x0
  3299                           
  3300  0070                     ?i1_do_I2C_TX_EMPTY:	
  3301                           ; 1 bytes @ 0x0
  3302                           
  3303  0070                     ?i1_i2c_ISR:	
  3304                           ; 1 bytes @ 0x0
  3305                           
  3306  0070                     ?i1_setCallBack:	
  3307                           ; 1 bytes @ 0x0
  3308                           
  3309  0070                     random@lower:	
  3310                           ; 1 bytes @ 0x0
  3311                           
  3312  0070                     i1i2c_driver_TXData@d:	
  3313                           ; 1 bytes @ 0x0
  3314                           
  3315  0070                     i1i2c_setBuffer@bufferSize:	
  3316                           ; 1 bytes @ 0x0
  3317                           
  3318  0070                     i1setCallBack@cb:	
  3319                           ; 2 bytes @ 0x0
  3320                           
  3321                           
  3322                           ; 2 bytes @ 0x0
  3323  0070                     	ds	1
  3324  0071                     ??i1_do_I2C_SEND_ADR_READ:	
  3325  0071                     ??i1_do_I2C_SEND_ADR_WRITE:	
  3326                           ; 1 bytes @ 0x1
  3327                           
  3328                           
  3329                           ; 1 bytes @ 0x1
  3330  0071                     	ds	1
  3331  0072                     ??i1_i2c_setBuffer:	
  3332  0072                     i1setCallBack@p:	
  3333                           ; 1 bytes @ 0x2
  3334                           
  3335                           
  3336                           ; 1 bytes @ 0x2
  3337  0072                     	ds	1
  3338  0073                     ??i1_setCallBack:	
  3339  0073                     i1i2c_setBuffer@buffer:	
  3340                           ; 1 bytes @ 0x3
  3341                           
  3342                           
  3343                           ; 1 bytes @ 0x3
  3344  0073                     	ds	1
  3345  0074                     i1setCallBack@idx:	
  3346                           
  3347                           ; 1 bytes @ 0x4
  3348  0074                     	ds	1
  3349  0075                     ?i1_i2c_setDataCompleteCallback:	
  3350  0075                     i1i2c_setDataCompleteCallback@cb:	
  3351                           ; 1 bytes @ 0x5
  3352                           
  3353                           
  3354                           ; 2 bytes @ 0x5
  3355  0075                     	ds	2
  3356  0077                     i1i2c_setDataCompleteCallback@p:	
  3357                           
  3358                           ; 1 bytes @ 0x7
  3359  0077                     	ds	1
  3360  0078                     ??i1_i2c_setDataCompleteCallback:	
  3361                           
  3362                           ; 1 bytes @ 0x8
  3363  0078                     	ds	1
  3364  0079                     ?i1_wr1RegCompleteHandler:	
  3365  0079                     ?i1_rd1RegCompleteHandler:	
  3366                           ; 1 bytes @ 0x9
  3367                           
  3368  0079                     ?i1_rd2RegCompleteHandler:	
  3369                           ; 1 bytes @ 0x9
  3370                           
  3371  0079                     ?i1_wr2RegCompleteHandler:	
  3372                           ; 1 bytes @ 0x9
  3373                           
  3374  0079                     ?i1_rdBlkRegCompleteHandler:	
  3375                           ; 1 bytes @ 0x9
  3376                           
  3377  0079                     ?i1_returnStop:	
  3378                           ; 1 bytes @ 0x9
  3379                           
  3380  0079                     ?i1_returnReset:	
  3381                           ; 1 bytes @ 0x9
  3382                           
  3383  0079                     ?i1_i2c_restartWrite:	
  3384                           ; 1 bytes @ 0x9
  3385                           
  3386  0079                     i1wr1RegCompleteHandler@p:	
  3387                           ; 1 bytes @ 0x9
  3388                           
  3389  0079                     i1rd1RegCompleteHandler@p:	
  3390                           ; 1 bytes @ 0x9
  3391                           
  3392  0079                     i1rd2RegCompleteHandler@p:	
  3393                           ; 1 bytes @ 0x9
  3394                           
  3395  0079                     i1wr2RegCompleteHandler@p:	
  3396                           ; 1 bytes @ 0x9
  3397                           
  3398  0079                     i1rdBlkRegCompleteHandler@p:	
  3399                           ; 1 bytes @ 0x9
  3400                           
  3401  0079                     i1returnStop@p:	
  3402                           ; 1 bytes @ 0x9
  3403                           
  3404  0079                     i1returnReset@p:	
  3405                           ; 1 bytes @ 0x9
  3406                           
  3407  0079                     i1i2c_restartWrite@p:	
  3408                           ; 1 bytes @ 0x9
  3409                           
  3410                           
  3411                           ; 1 bytes @ 0x9
  3412  0079                     	ds	1
  3413  007A                     ??i1_wr1RegCompleteHandler:	
  3414  007A                     ??i1_rd1RegCompleteHandler:	
  3415                           ; 1 bytes @ 0xA
  3416                           
  3417  007A                     ??i1_rd2RegCompleteHandler:	
  3418                           ; 1 bytes @ 0xA
  3419                           
  3420  007A                     ??i1_wr2RegCompleteHandler:	
  3421                           ; 1 bytes @ 0xA
  3422                           
  3423  007A                     ??i1_rdBlkRegCompleteHandler:	
  3424                           ; 1 bytes @ 0xA
  3425                           
  3426  007A                     ??i1_do_I2C_DO_ADDRESS_NACK:	
  3427                           ; 1 bytes @ 0xA
  3428                           
  3429  007A                     ??i1_do_I2C_TX:	
  3430                           ; 1 bytes @ 0xA
  3431                           
  3432  007A                     ??i1_do_I2C_RX:	
  3433                           ; 1 bytes @ 0xA
  3434                           
  3435  007A                     ??i1_do_I2C_TX_EMPTY:	
  3436                           ; 1 bytes @ 0xA
  3437                           
  3438  007A                     ??i1_returnStop:	
  3439                           ; 1 bytes @ 0xA
  3440                           
  3441  007A                     ??i1_returnReset:	
  3442                           ; 1 bytes @ 0xA
  3443                           
  3444  007A                     ??i1_i2c_restartWrite:	
  3445                           ; 1 bytes @ 0xA
  3446                           
  3447                           
  3448                           ; 1 bytes @ 0xA
  3449  007A                     	ds	1
  3450  007B                     i1_do_I2C_TX$887:	
  3451                           
  3452                           ; 2 bytes @ 0xB
  3453  007B                     	ds	2
  3454  007D                     ??i1_i2c_ISR:	
  3455                           
  3456                           ; 1 bytes @ 0xD
  3457  007D                     	ds	1
  3458                           
  3459                           	psect	cstackBANK0
  3460  004A                     __pcstackBANK0:	
  3461  004A                     ??_INTERRUPT_InterruptManager:	
  3462                           
  3463                           ; 1 bytes @ 0x0
  3464  004A                     	ds	1
  3465  004B                     ??_OSCILLATOR_Initialize:	
  3466  004B                     ?_i2c_setBuffer:	
  3467                           ; 1 bytes @ 0x1
  3468                           
  3469  004B                     ??_i2c_close:	
  3470                           ; 1 bytes @ 0x1
  3471                           
  3472  004B                     ?_setCallBack:	
  3473                           ; 1 bytes @ 0x1
  3474                           
  3475  004B                     ??_PIN_MANAGER_Initialize:	
  3476                           ; 1 bytes @ 0x1
  3477                           
  3478  004B                     ??_SYSTEM_Initialize:	
  3479                           ; 1 bytes @ 0x1
  3480                           
  3481  004B                     ?_drawPixel:	
  3482                           ; 1 bytes @ 0x1
  3483                           
  3484  004B                     ??_clearPixels:	
  3485                           ; 1 bytes @ 0x1
  3486                           
  3487  004B                     ?_random:	
  3488                           ; 1 bytes @ 0x1
  3489                           
  3490  004B                     ??_reverse:	
  3491                           ; 1 bytes @ 0x1
  3492                           
  3493  004B                     ??_mssp_IRQisEnabled:	
  3494                           ; 1 bytes @ 0x1
  3495                           
  3496  004B                     ??_mssp_disableIRQ:	
  3497                           ; 1 bytes @ 0x1
  3498                           
  3499  004B                     ??_mssp_clearIRQ:	
  3500                           ; 1 bytes @ 0x1
  3501                           
  3502  004B                     ??_mssp_setIRQ:	
  3503                           ; 1 bytes @ 0x1
  3504                           
  3505  004B                     ??_mssp_waitForEvent:	
  3506                           ; 1 bytes @ 0x1
  3507                           
  3508  004B                     ??_i2c_driver_open:	
  3509                           ; 1 bytes @ 0x1
  3510                           
  3511  004B                     ??_i2c_driver_resetBus:	
  3512                           ; 1 bytes @ 0x1
  3513                           
  3514  004B                     ??_i2c_driver_start:	
  3515                           ; 1 bytes @ 0x1
  3516                           
  3517  004B                     ??_i2c_driver_restart:	
  3518                           ; 1 bytes @ 0x1
  3519                           
  3520  004B                     ??_i2c_driver_stop:	
  3521                           ; 1 bytes @ 0x1
  3522                           
  3523  004B                     ??_i2c_driver_isNACK:	
  3524                           ; 1 bytes @ 0x1
  3525                           
  3526  004B                     ??_i2c_driver_startRX:	
  3527                           ; 1 bytes @ 0x1
  3528                           
  3529  004B                     ??_i2c_driver_getRXData:	
  3530                           ; 1 bytes @ 0x1
  3531                           
  3532  004B                     ??_i2c_driver_TXData:	
  3533                           ; 1 bytes @ 0x1
  3534                           
  3535  004B                     ??_i2c_driver_sendACK:	
  3536                           ; 1 bytes @ 0x1
  3537                           
  3538  004B                     ??_i2c_driver_sendNACK:	
  3539                           ; 1 bytes @ 0x1
  3540                           
  3541  004B                     ?_i2c_driver_setBusCollisionISR:	
  3542                           ; 1 bytes @ 0x1
  3543                           
  3544  004B                     ?_i2c_driver_setI2cISR:	
  3545                           ; 1 bytes @ 0x1
  3546                           
  3547  004B                     ??_do_I2C_RESET:	
  3548                           ; 1 bytes @ 0x1
  3549                           
  3550  004B                     ??_do_I2C_IDLE:	
  3551                           ; 1 bytes @ 0x1
  3552                           
  3553  004B                     ??_do_I2C_SEND_RESTART_READ:	
  3554                           ; 1 bytes @ 0x1
  3555                           
  3556  004B                     ??_do_I2C_SEND_RESTART_WRITE:	
  3557                           ; 1 bytes @ 0x1
  3558                           
  3559  004B                     ??_do_I2C_SEND_RESTART:	
  3560                           ; 1 bytes @ 0x1
  3561                           
  3562  004B                     ??_do_I2C_SEND_STOP:	
  3563                           ; 1 bytes @ 0x1
  3564                           
  3565  004B                     ??_do_I2C_RCEN:	
  3566                           ; 1 bytes @ 0x1
  3567                           
  3568  004B                     ??_do_I2C_DO_ACK:	
  3569                           ; 1 bytes @ 0x1
  3570                           
  3571  004B                     ??_do_I2C_DO_NACK_STOP:	
  3572                           ; 1 bytes @ 0x1
  3573                           
  3574  004B                     ??_do_I2C_DO_NACK_RESTART:	
  3575                           ; 1 bytes @ 0x1
  3576                           
  3577  004B                     ?___awdiv:	
  3578                           ; 1 bytes @ 0x1
  3579                           
  3580  004B                     drawPixel@y:	
  3581                           ; 2 bytes @ 0x1
  3582                           
  3583  004B                     random@upper:	
  3584                           ; 1 bytes @ 0x1
  3585                           
  3586  004B                     mssp_waitForEvent@timeout:	
  3587                           ; 1 bytes @ 0x1
  3588                           
  3589  004B                     i2c_driver_TXData@d:	
  3590                           ; 1 bytes @ 0x1
  3591                           
  3592  004B                     i2c_driver_setBusCollisionISR@f:	
  3593                           ; 1 bytes @ 0x1
  3594                           
  3595  004B                     i2c_driver_setI2cISR@f:	
  3596                           ; 2 bytes @ 0x1
  3597                           
  3598  004B                     i2c_setBuffer@bufferSize:	
  3599                           ; 2 bytes @ 0x1
  3600                           
  3601  004B                     setCallBack@cb:	
  3602                           ; 2 bytes @ 0x1
  3603                           
  3604  004B                     ___awdiv@divisor:	
  3605                           ; 2 bytes @ 0x1
  3606                           
  3607                           
  3608                           ; 2 bytes @ 0x1
  3609  004B                     	ds	1
  3610  004C                     ??_random:	
  3611  004C                     ??_shiftWalls:	
  3612                           ; 1 bytes @ 0x2
  3613                           
  3614  004C                     ??_do_I2C_SEND_ADR_READ:	
  3615                           ; 1 bytes @ 0x2
  3616                           
  3617  004C                     ??_do_I2C_SEND_ADR_WRITE:	
  3618                           ; 1 bytes @ 0x2
  3619                           
  3620  004C                     drawPixel@color:	
  3621                           ; 1 bytes @ 0x2
  3622                           
  3623  004C                     i2c_close@ret:	
  3624                           ; 1 bytes @ 0x2
  3625                           
  3626                           
  3627                           ; 1 bytes @ 0x2
  3628  004C                     	ds	1
  3629  004D                     ??_i2c_setBuffer:	
  3630  004D                     ??_i2c_open:	
  3631                           ; 1 bytes @ 0x3
  3632                           
  3633  004D                     ??_drawPixel:	
  3634                           ; 1 bytes @ 0x3
  3635                           
  3636  004D                     ??_i2c_driver_setBusCollisionISR:	
  3637                           ; 1 bytes @ 0x3
  3638                           
  3639  004D                     ??_i2c_driver_setI2cISR:	
  3640                           ; 1 bytes @ 0x3
  3641                           
  3642  004D                     setCallBack@p:	
  3643                           ; 1 bytes @ 0x3
  3644                           
  3645  004D                     ___awdiv@dividend:	
  3646                           ; 1 bytes @ 0x3
  3647                           
  3648                           
  3649                           ; 2 bytes @ 0x3
  3650  004D                     	ds	1
  3651  004E                     ??_setCallBack:	
  3652  004E                     reverse@b:	
  3653                           ; 1 bytes @ 0x4
  3654                           
  3655  004E                     i2c_open@address:	
  3656                           ; 1 bytes @ 0x4
  3657                           
  3658  004E                     i2c_setBuffer@buffer:	
  3659                           ; 1 bytes @ 0x4
  3660                           
  3661                           
  3662                           ; 1 bytes @ 0x4
  3663  004E                     	ds	1
  3664  004F                     ??_drawWalls:	
  3665  004F                     ??___awdiv:	
  3666                           ; 1 bytes @ 0x5
  3667                           
  3668  004F                     i2c_open@ret:	
  3669                           ; 1 bytes @ 0x5
  3670                           
  3671  004F                     setCallBack@idx:	
  3672                           ; 1 bytes @ 0x5
  3673                           
  3674                           
  3675                           ; 1 bytes @ 0x5
  3676  004F                     	ds	1
  3677  0050                     ?_i2c_setDataCompleteCallback:	
  3678  0050                     ?_i2c_setAddressNACKCallback:	
  3679                           ; 1 bytes @ 0x6
  3680                           
  3681  0050                     ___awdiv@counter:	
  3682                           ; 1 bytes @ 0x6
  3683                           
  3684  0050                     i2c_setDataCompleteCallback@cb:	
  3685                           ; 1 bytes @ 0x6
  3686                           
  3687  0050                     i2c_setAddressNACKCallback@cb:	
  3688                           ; 2 bytes @ 0x6
  3689                           
  3690                           
  3691                           ; 2 bytes @ 0x6
  3692  0050                     	ds	1
  3693  0051                     ___awdiv@sign:	
  3694                           
  3695                           ; 1 bytes @ 0x7
  3696  0051                     	ds	1
  3697  0052                     i2c_setDataCompleteCallback@p:	
  3698  0052                     i2c_setAddressNACKCallback@p:	
  3699                           ; 1 bytes @ 0x8
  3700                           
  3701  0052                     ___awdiv@quotient:	
  3702                           ; 1 bytes @ 0x8
  3703                           
  3704                           
  3705                           ; 2 bytes @ 0x8
  3706  0052                     	ds	1
  3707  0053                     ??_i2c_setDataCompleteCallback:	
  3708  0053                     ??_i2c_setAddressNACKCallback:	
  3709                           ; 1 bytes @ 0x9
  3710                           
  3711  0053                     drawPixel@x:	
  3712                           ; 1 bytes @ 0x9
  3713                           
  3714                           
  3715                           ; 1 bytes @ 0x9
  3716  0053                     	ds	1
  3717  0054                     ?_i2c_restartWrite:	
  3718  0054                     ?_returnStop:	
  3719                           ; 1 bytes @ 0xA
  3720                           
  3721  0054                     ?_returnReset:	
  3722                           ; 1 bytes @ 0xA
  3723                           
  3724  0054                     ?_wr1RegCompleteHandler:	
  3725                           ; 1 bytes @ 0xA
  3726                           
  3727  0054                     ?_rd1RegCompleteHandler:	
  3728                           ; 1 bytes @ 0xA
  3729                           
  3730  0054                     ?_rd2RegCompleteHandler:	
  3731                           ; 1 bytes @ 0xA
  3732                           
  3733  0054                     ?_wr2RegCompleteHandler:	
  3734                           ; 1 bytes @ 0xA
  3735                           
  3736  0054                     ?_rdBlkRegCompleteHandler:	
  3737                           ; 1 bytes @ 0xA
  3738                           
  3739  0054                     wr1RegCompleteHandler@p:	
  3740                           ; 1 bytes @ 0xA
  3741                           
  3742  0054                     rd1RegCompleteHandler@p:	
  3743                           ; 1 bytes @ 0xA
  3744                           
  3745  0054                     rd2RegCompleteHandler@p:	
  3746                           ; 1 bytes @ 0xA
  3747                           
  3748  0054                     wr2RegCompleteHandler@p:	
  3749                           ; 1 bytes @ 0xA
  3750                           
  3751  0054                     rdBlkRegCompleteHandler@p:	
  3752                           ; 1 bytes @ 0xA
  3753                           
  3754  0054                     returnStop@p:	
  3755                           ; 1 bytes @ 0xA
  3756                           
  3757  0054                     returnReset@p:	
  3758                           ; 1 bytes @ 0xA
  3759                           
  3760  0054                     i2c_restartWrite@p:	
  3761                           ; 1 bytes @ 0xA
  3762                           
  3763                           
  3764                           ; 1 bytes @ 0xA
  3765  0054                     	ds	1
  3766  0055                     ??_i2c_restartWrite:	
  3767  0055                     ??_returnStop:	
  3768                           ; 1 bytes @ 0xB
  3769                           
  3770  0055                     ??_returnReset:	
  3771                           ; 1 bytes @ 0xB
  3772                           
  3773  0055                     ??_wr1RegCompleteHandler:	
  3774                           ; 1 bytes @ 0xB
  3775                           
  3776  0055                     ??_rd1RegCompleteHandler:	
  3777                           ; 1 bytes @ 0xB
  3778                           
  3779  0055                     ??_rd2RegCompleteHandler:	
  3780                           ; 1 bytes @ 0xB
  3781                           
  3782  0055                     ??_wr2RegCompleteHandler:	
  3783                           ; 1 bytes @ 0xB
  3784                           
  3785  0055                     ??_rdBlkRegCompleteHandler:	
  3786                           ; 1 bytes @ 0xB
  3787                           
  3788  0055                     ??_do_I2C_DO_ADDRESS_NACK:	
  3789                           ; 1 bytes @ 0xB
  3790                           
  3791  0055                     ??_do_I2C_TX:	
  3792                           ; 1 bytes @ 0xB
  3793                           
  3794  0055                     ??_do_I2C_RX:	
  3795                           ; 1 bytes @ 0xB
  3796                           
  3797  0055                     ??_do_I2C_TX_EMPTY:	
  3798                           ; 1 bytes @ 0xB
  3799                           
  3800                           
  3801                           ; 1 bytes @ 0xB
  3802  0055                     	ds	1
  3803  0056                     _do_I2C_TX$887:	
  3804                           
  3805                           ; 2 bytes @ 0xC
  3806  0056                     	ds	2
  3807  0058                     ??_i2c_ISR:	
  3808                           
  3809                           ; 1 bytes @ 0xE
  3810  0058                     	ds	1
  3811  0059                     ??_i2c_poller:	
  3812  0059                     ??_i2c_masterOperation:	
  3813                           ; 1 bytes @ 0xF
  3814                           
  3815                           
  3816                           ; 1 bytes @ 0xF
  3817  0059                     	ds	1
  3818  005A                     i2c_masterOperation@read:	
  3819                           
  3820                           ; 1 bytes @ 0x10
  3821  005A                     	ds	1
  3822  005B                     i2c_masterOperation@ret:	
  3823                           
  3824                           ; 1 bytes @ 0x11
  3825  005B                     	ds	1
  3826  005C                     ?_i2c_writeNBytes:	
  3827  005C                     ??_i2c_masterWrite:	
  3828                           ; 1 bytes @ 0x12
  3829                           
  3830  005C                     i2c_writeNBytes@data:	
  3831                           ; 1 bytes @ 0x12
  3832                           
  3833                           
  3834                           ; 1 bytes @ 0x12
  3835  005C                     	ds	1
  3836  005D                     i2c_writeNBytes@len:	
  3837                           
  3838                           ; 2 bytes @ 0x13
  3839  005D                     	ds	2
  3840  005F                     ??_i2c_writeNBytes:	
  3841  005F                     i2c_writeNBytes@address:	
  3842                           ; 1 bytes @ 0x15
  3843                           
  3844                           
  3845                           ; 1 bytes @ 0x15
  3846  005F                     	ds	1
  3847  0060                     ??_writeDisplay:	
  3848  0060                     ??_initializeDisplay:	
  3849                           ; 1 bytes @ 0x16
  3850                           
  3851                           
  3852                           ; 1 bytes @ 0x16
  3853  0060                     	ds	5
  3854  0065                     ??_main:	
  3855                           
  3856                           ; 1 bytes @ 0x1B
  3857  0065                     	ds	2
  3858                           
  3859                           	psect	maintext
  3860  02DD                     __pmaintext:	
  3861 ;;
  3862 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  3863 ;;
  3864 ;; *************** function _main *****************
  3865 ;; Defined at:
  3866 ;;		line 158 in file "main.c"
  3867 ;; Parameters:    Size  Location     Type
  3868 ;;		None
  3869 ;; Auto vars:     Size  Location     Type
  3870 ;;		None
  3871 ;; Return value:  Size  Location     Type
  3872 ;;                  1    wreg      void 
  3873 ;; Registers used:
  3874 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3875 ;; Tracked objects:
  3876 ;;		On entry : B1F/0
  3877 ;;		On exit  : 0/0
  3878 ;;		Unchanged: 0/0
  3879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3880 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3881 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3882 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3883 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3884 ;;Total ram usage:        2 bytes
  3885 ;; Hardware stack levels required when called:   16
  3886 ;; This function calls:
  3887 ;;		_SYSTEM_Initialize
  3888 ;;		_clearPixels
  3889 ;;		_drawPixel
  3890 ;;		_drawWalls
  3891 ;;		_initializeDisplay
  3892 ;;		_shiftWalls
  3893 ;;		_writeDisplay
  3894 ;; This function is called by:
  3895 ;;		Startup code after reset
  3896 ;; This function uses a non-reentrant model
  3897 ;;
  3898                           
  3899                           
  3900                           ;psect for function _main
  3901  02DD                     _main:	
  3902                           
  3903                           ;main.c: 160: SYSTEM_Initialize();
  3904                           
  3905                           ;incstack = 0
  3906                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3907  02DD  318F  277C  3182   	fcall	_SYSTEM_Initialize
  3908                           
  3909                           ;main.c: 161: (INTCONbits.GIE = 1);
  3910  02E0  178B               	bsf	11,7	;volatile
  3911                           
  3912                           ;main.c: 162: (INTCONbits.PEIE = 1);
  3913  02E1  170B               	bsf	11,6	;volatile
  3914                           
  3915                           ;main.c: 164: initializeDisplay();
  3916  02E2  3181  2185  3182   	fcall	_initializeDisplay
  3917                           
  3918                           ;main.c: 166: elevation = 3;
  3919  02E5  3003               	movlw	3
  3920  02E6  0020               	movlb	0	; select bank0
  3921  02E7  00E5               	movwf	??_main
  3922  02E8  0865               	movf	??_main,w
  3923  02E9  00C8               	movwf	_elevation
  3924  02EA                     l5089:	
  3925                           ;main.c: 170: while (1)
  3926                           
  3927                           
  3928                           ;main.c: 171: {
  3929                           ;main.c: 172: drawPixel(1, elevation, 3);
  3930  02EA  0848               	movf	_elevation,w
  3931  02EB  00E5               	movwf	??_main
  3932  02EC  0865               	movf	??_main,w
  3933  02ED  00CB               	movwf	drawPixel@y
  3934  02EE  3003               	movlw	3
  3935  02EF  00E6               	movwf	??_main+1
  3936  02F0  0866               	movf	??_main+1,w
  3937  02F1  00CC               	movwf	drawPixel@color
  3938  02F2  3001               	movlw	1
  3939  02F3  3180  204C  3182   	fcall	_drawPixel
  3940                           
  3941                           ;main.c: 173: drawWalls();
  3942  02F6  3186  260A  3182   	fcall	_drawWalls
  3943                           
  3944                           ;main.c: 174: writeDisplay();
  3945  02F9  3181  21E3  3182   	fcall	_writeDisplay
  3946                           
  3947                           ;main.c: 175: clearPixels();
  3948  02FC  3186  26EA  3182   	fcall	_clearPixels
  3949                           
  3950                           ;main.c: 176: if (gravityCounter >= 80) {
  3951  02FF  3050               	movlw	80
  3952  0300  0020               	movlb	0	; select bank0
  3953  0301  0246               	subwf	_gravityCounter,w
  3954  0302  1C03               	skipc
  3955  0303  2B12               	goto	l5109
  3956                           
  3957                           ;main.c: 177: if (fall) {
  3958  0304  0867               	movf	_fall,w
  3959  0305  1903               	btfsc	3,2
  3960  0306  2B0C               	goto	l5103
  3961                           
  3962                           ;main.c: 178: elevation += 1;
  3963  0307  3001               	movlw	1
  3964  0308  00E5               	movwf	??_main
  3965  0309  0865               	movf	??_main,w
  3966  030A  07C8               	addwf	_elevation,f
  3967                           
  3968                           ;main.c: 179: } else {
  3969  030B  2B10               	goto	l5107
  3970  030C                     l5103:	
  3971                           
  3972                           ;main.c: 180: elevation -= 1;
  3973  030C  3001               	movlw	1
  3974  030D  02C8               	subwf	_elevation,f
  3975                           
  3976                           ;main.c: 181: fall = 1;
  3977  030E  01E7               	clrf	_fall
  3978  030F  0AE7               	incf	_fall,f
  3979  0310                     l5107:	
  3980                           
  3981                           ;main.c: 182: }
  3982                           ;main.c: 183: gravityCounter = 0;
  3983  0310  01C6               	clrf	_gravityCounter
  3984                           
  3985                           ;main.c: 184: } else {
  3986  0311  2B16               	goto	l5111
  3987  0312                     l5109:	
  3988                           
  3989                           ;main.c: 185: gravityCounter++;
  3990  0312  3001               	movlw	1
  3991  0313  00E5               	movwf	??_main
  3992  0314  0865               	movf	??_main,w
  3993  0315  07C6               	addwf	_gravityCounter,f
  3994  0316                     l5111:	
  3995                           
  3996                           ;main.c: 186: }
  3997                           ;main.c: 187: if (shiftCounter >= 100) {
  3998  0316  3000               	movlw	0
  3999  0317  023E               	subwf	_shiftCounter+1,w
  4000  0318  3064               	movlw	100
  4001  0319  1903               	skipnz
  4002  031A  023D               	subwf	_shiftCounter,w
  4003  031B  1C03               	skipc
  4004  031C  2B24               	goto	l5117
  4005                           
  4006                           ;main.c: 188: shiftWalls();
  4007  031D  3181  2102  3182   	fcall	_shiftWalls
  4008                           
  4009                           ;main.c: 189: shiftCounter = 0;
  4010  0320  0020               	movlb	0	; select bank0
  4011  0321  01BD               	clrf	_shiftCounter
  4012  0322  01BE               	clrf	_shiftCounter+1
  4013                           
  4014                           ;main.c: 190: } else {
  4015  0323  2AEA               	goto	l5089
  4016  0324                     l5117:	
  4017                           
  4018                           ;main.c: 191: shiftCounter++;
  4019  0324  3001               	movlw	1
  4020  0325  07BD               	addwf	_shiftCounter,f
  4021  0326  3000               	movlw	0
  4022  0327  3DBE               	addwfc	_shiftCounter+1,f
  4023  0328  2AEA               	goto	l5089
  4024  0329                     __end_of_main:	
  4025                           
  4026                           	psect	text1
  4027  01E3                     __ptext1:	
  4028 ;; *************** function _writeDisplay *****************
  4029 ;; Defined at:
  4030 ;;		line 70 in file "main.c"
  4031 ;; Parameters:    Size  Location     Type
  4032 ;;		None
  4033 ;; Auto vars:     Size  Location     Type
  4034 ;;		None
  4035 ;; Return value:  Size  Location     Type
  4036 ;;                  1    wreg      void 
  4037 ;; Registers used:
  4038 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4039 ;; Tracked objects:
  4040 ;;		On entry : 0/0
  4041 ;;		On exit  : 0/0
  4042 ;;		Unchanged: 0/0
  4043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4044 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4045 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4046 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4047 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4048 ;;Total ram usage:        5 bytes
  4049 ;; Hardware stack levels used:    1
  4050 ;; Hardware stack levels required when called:   15
  4051 ;; This function calls:
  4052 ;;		___awdiv
  4053 ;;		_i2c_writeNBytes
  4054 ;; This function is called by:
  4055 ;;		_main
  4056 ;; This function uses a non-reentrant model
  4057 ;;
  4058                           
  4059                           
  4060                           ;psect for function _writeDisplay
  4061  01E3                     _writeDisplay:	
  4062                           
  4063                           ;main.c: 71: writebuffer[0] = 0;
  4064                           
  4065                           ;incstack = 0
  4066                           ; Regs used in _writeDisplay: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4067  01E3  0021               	movlb	1	; select bank1
  4068  01E4  01BC               	clrf	_writebuffer^(0+128)
  4069                           
  4070                           ;main.c: 72: for (i = 1; i < 17; i += 2) {
  4071  01E5  0020               	movlb	0	; select bank0
  4072  01E6  01C5               	clrf	_i
  4073  01E7  0AC5               	incf	_i,f
  4074  01E8  3011               	movlw	17
  4075  01E9  0245               	subwf	_i,w
  4076  01EA  1803               	btfsc	3,0
  4077  01EB  2A31               	goto	l5025
  4078  01EC                     l5019:	
  4079                           
  4080                           ;main.c: 73: writebuffer[i] = pixelbuffer[i/2] & 0xFF;
  4081  01EC  3002               	movlw	2
  4082  01ED  00CB               	movwf	___awdiv@divisor
  4083  01EE  3000               	movlw	0
  4084  01EF  00CC               	movwf	___awdiv@divisor+1
  4085  01F0  0845               	movf	_i,w
  4086  01F1  00E0               	movwf	??_writeDisplay
  4087  01F2  01E1               	clrf	??_writeDisplay+1
  4088  01F3  0860               	movf	??_writeDisplay,w
  4089  01F4  00CD               	movwf	___awdiv@dividend
  4090  01F5  0861               	movf	??_writeDisplay+1,w
  4091  01F6  00CE               	movwf	___awdiv@dividend+1
  4092  01F7  3182  223D  3181   	fcall	___awdiv
  4093  01FA  0020               	movlb	0	; select bank0
  4094  01FB  084B               	movf	?___awdiv,w
  4095  01FC  0709               	addwf	9,w
  4096  01FD  3EA0               	addlw	(low (_pixelbuffer| 0))& (0+255)
  4097  01FE  0086               	movwf	6
  4098  01FF  0187               	clrf	7
  4099  0200  0801               	movf	1,w
  4100  0201  00E2               	movwf	??_writeDisplay+2
  4101  0202  0845               	movf	_i,w
  4102  0203  3EBC               	addlw	(low (_writebuffer| 0))& (0+255)
  4103  0204  0086               	movwf	6
  4104  0205  0187               	clrf	7
  4105  0206  0862               	movf	??_writeDisplay+2,w
  4106  0207  0081               	movwf	1
  4107                           
  4108                           ;main.c: 74: writebuffer[i + 1] = pixelbuffer[i/2] >> 8;
  4109  0208  3002               	movlw	2
  4110  0209  00CB               	movwf	___awdiv@divisor
  4111  020A  3000               	movlw	0
  4112  020B  00CC               	movwf	___awdiv@divisor+1
  4113  020C  0845               	movf	_i,w
  4114  020D  00E0               	movwf	??_writeDisplay
  4115  020E  01E1               	clrf	??_writeDisplay+1
  4116  020F  0860               	movf	??_writeDisplay,w
  4117  0210  00CD               	movwf	___awdiv@dividend
  4118  0211  0861               	movf	??_writeDisplay+1,w
  4119  0212  00CE               	movwf	___awdiv@dividend+1
  4120  0213  3182  223D  3181   	fcall	___awdiv
  4121  0216  0020               	movlb	0	; select bank0
  4122  0217  084B               	movf	?___awdiv,w
  4123  0218  0709               	addwf	9,w
  4124  0219  3EA0               	addlw	(low (_pixelbuffer| 0))& (0+255)
  4125  021A  0086               	movwf	6
  4126  021B  0187               	clrf	7
  4127  021C  3F40               	moviw [0]fsr1
  4128  021D  00E2               	movwf	??_writeDisplay+2
  4129  021E  3F41               	moviw [1]fsr1
  4130  021F  00E3               	movwf	??_writeDisplay+3
  4131  0220  0863               	movf	??_writeDisplay+3,w
  4132  0221  00E4               	movwf	??_writeDisplay+4
  4133  0222  0845               	movf	_i,w
  4134  0223  3E01               	addlw	1
  4135  0224  3EBC               	addlw	(low (_writebuffer| 0))& (0+255)
  4136  0225  0086               	movwf	6
  4137  0226  0187               	clrf	7
  4138  0227  0864               	movf	??_writeDisplay+4,w
  4139  0228  0081               	movwf	1
  4140  0229  3002               	movlw	2
  4141  022A  00E0               	movwf	??_writeDisplay
  4142  022B  0860               	movf	??_writeDisplay,w
  4143  022C  07C5               	addwf	_i,f
  4144  022D  3011               	movlw	17
  4145  022E  0245               	subwf	_i,w
  4146  022F  1C03               	skipc
  4147  0230  29EC               	goto	l5019
  4148  0231                     l5025:	
  4149                           
  4150                           ;main.c: 75: }
  4151                           ;main.c: 76: i2c_writeNBytes(0x70, writebuffer, 17);
  4152  0231  30BC               	movlw	(low (_writebuffer| 0))& (0+255)
  4153  0232  00E0               	movwf	??_writeDisplay
  4154  0233  0860               	movf	??_writeDisplay,w
  4155  0234  00DC               	movwf	i2c_writeNBytes@data
  4156  0235  3011               	movlw	17
  4157  0236  00DD               	movwf	i2c_writeNBytes@len
  4158  0237  3000               	movlw	0
  4159  0238  00DE               	movwf	i2c_writeNBytes@len+1
  4160  0239  3070               	movlw	112
  4161  023A  3185  2516         	fcall	_i2c_writeNBytes
  4162  023C  0008               	return
  4163  023D                     __end_of_writeDisplay:	
  4164                           
  4165                           	psect	text2
  4166  023D                     __ptext2:	
  4167 ;; *************** function ___awdiv *****************
  4168 ;; Defined at:
  4169 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  4170 ;; Parameters:    Size  Location     Type
  4171 ;;  divisor         2    1[BANK0 ] int 
  4172 ;;  dividend        2    3[BANK0 ] int 
  4173 ;; Auto vars:     Size  Location     Type
  4174 ;;  quotient        2    8[BANK0 ] int 
  4175 ;;  sign            1    7[BANK0 ] unsigned char 
  4176 ;;  counter         1    6[BANK0 ] unsigned char 
  4177 ;; Return value:  Size  Location     Type
  4178 ;;                  2    1[BANK0 ] int 
  4179 ;; Registers used:
  4180 ;;		wreg, status,2, status,0
  4181 ;; Tracked objects:
  4182 ;;		On entry : 0/0
  4183 ;;		On exit  : 0/0
  4184 ;;		Unchanged: 0/0
  4185 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4186 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4187 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4188 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4189 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4190 ;;Total ram usage:        9 bytes
  4191 ;; Hardware stack levels used:    1
  4192 ;; Hardware stack levels required when called:    6
  4193 ;; This function calls:
  4194 ;;		Nothing
  4195 ;; This function is called by:
  4196 ;;		_writeDisplay
  4197 ;; This function uses a non-reentrant model
  4198 ;;
  4199                           
  4200                           
  4201                           ;psect for function ___awdiv
  4202  023D                     ___awdiv:	
  4203                           
  4204                           ;incstack = 0
  4205                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  4206  023D  0020               	movlb	0	; select bank0
  4207  023E  01D1               	clrf	___awdiv@sign
  4208  023F  1FCC               	btfss	___awdiv@divisor+1,7
  4209  0240  2A48               	goto	l2779
  4210  0241  09CB               	comf	___awdiv@divisor,f
  4211  0242  09CC               	comf	___awdiv@divisor+1,f
  4212  0243  0ACB               	incf	___awdiv@divisor,f
  4213  0244  1903               	skipnz
  4214  0245  0ACC               	incf	___awdiv@divisor+1,f
  4215  0246  01D1               	clrf	___awdiv@sign
  4216  0247  0AD1               	incf	___awdiv@sign,f
  4217  0248                     l2779:	
  4218  0248  1FCE               	btfss	___awdiv@dividend+1,7
  4219  0249  2A53               	goto	l2785
  4220  024A  09CD               	comf	___awdiv@dividend,f
  4221  024B  09CE               	comf	___awdiv@dividend+1,f
  4222  024C  0ACD               	incf	___awdiv@dividend,f
  4223  024D  1903               	skipnz
  4224  024E  0ACE               	incf	___awdiv@dividend+1,f
  4225  024F  3001               	movlw	1
  4226  0250  00CF               	movwf	??___awdiv
  4227  0251  084F               	movf	??___awdiv,w
  4228  0252  06D1               	xorwf	___awdiv@sign,f
  4229  0253                     l2785:	
  4230  0253  01D2               	clrf	___awdiv@quotient
  4231  0254  01D3               	clrf	___awdiv@quotient+1
  4232  0255  084B               	movf	___awdiv@divisor,w
  4233  0256  044C               	iorwf	___awdiv@divisor+1,w
  4234  0257  1903               	btfsc	3,2
  4235  0258  2A82               	goto	l2807
  4236  0259  01D0               	clrf	___awdiv@counter
  4237  025A  0AD0               	incf	___awdiv@counter,f
  4238  025B                     l2795:	
  4239  025B  1BCC               	btfsc	___awdiv@divisor+1,7
  4240  025C  2A67               	goto	l2797
  4241  025D  3001               	movlw	1
  4242  025E                     u1245:	
  4243  025E  35CB               	lslf	___awdiv@divisor,f
  4244  025F  0DCC               	rlf	___awdiv@divisor+1,f
  4245  0260  0B89               	decfsz	9,f
  4246  0261  2A5E               	goto	u1245
  4247  0262  3001               	movlw	1
  4248  0263  00CF               	movwf	??___awdiv
  4249  0264  084F               	movf	??___awdiv,w
  4250  0265  07D0               	addwf	___awdiv@counter,f
  4251  0266  2A5B               	goto	l2795
  4252  0267                     l2797:	
  4253  0267  3001               	movlw	1
  4254  0268                     u1265:	
  4255  0268  35D2               	lslf	___awdiv@quotient,f
  4256  0269  0DD3               	rlf	___awdiv@quotient+1,f
  4257  026A  0B89               	decfsz	9,f
  4258  026B  2A68               	goto	u1265
  4259  026C  084C               	movf	___awdiv@divisor+1,w
  4260  026D  024E               	subwf	___awdiv@dividend+1,w
  4261  026E  1D03               	skipz
  4262  026F  2A72               	goto	u1275
  4263  0270  084B               	movf	___awdiv@divisor,w
  4264  0271  024D               	subwf	___awdiv@dividend,w
  4265  0272                     u1275:	
  4266  0272  1C03               	skipc
  4267  0273  2A79               	goto	l2803
  4268  0274  084B               	movf	___awdiv@divisor,w
  4269  0275  02CD               	subwf	___awdiv@dividend,f
  4270  0276  084C               	movf	___awdiv@divisor+1,w
  4271  0277  3BCE               	subwfb	___awdiv@dividend+1,f
  4272  0278  1452               	bsf	___awdiv@quotient,0
  4273  0279                     l2803:	
  4274  0279  3001               	movlw	1
  4275  027A                     u1285:	
  4276  027A  36CC               	lsrf	___awdiv@divisor+1,f
  4277  027B  0CCB               	rrf	___awdiv@divisor,f
  4278  027C  0B89               	decfsz	9,f
  4279  027D  2A7A               	goto	u1285
  4280  027E  3001               	movlw	1
  4281  027F  02D0               	subwf	___awdiv@counter,f
  4282  0280  1D03               	btfss	3,2
  4283  0281  2A67               	goto	l2797
  4284  0282                     l2807:	
  4285  0282  0851               	movf	___awdiv@sign,w
  4286  0283  1903               	btfsc	3,2
  4287  0284  2A8A               	goto	l2811
  4288  0285  09D2               	comf	___awdiv@quotient,f
  4289  0286  09D3               	comf	___awdiv@quotient+1,f
  4290  0287  0AD2               	incf	___awdiv@quotient,f
  4291  0288  1903               	skipnz
  4292  0289  0AD3               	incf	___awdiv@quotient+1,f
  4293  028A                     l2811:	
  4294  028A  0853               	movf	___awdiv@quotient+1,w
  4295  028B  00CC               	movwf	?___awdiv+1
  4296  028C  0852               	movf	___awdiv@quotient,w
  4297  028D  00CB               	movwf	?___awdiv
  4298  028E  0008               	return
  4299  028F                     __end_of___awdiv:	
  4300                           
  4301                           	psect	text3
  4302  0102                     __ptext3:	
  4303 ;; *************** function _shiftWalls *****************
  4304 ;; Defined at:
  4305 ;;		line 138 in file "main.c"
  4306 ;; Parameters:    Size  Location     Type
  4307 ;;		None
  4308 ;; Auto vars:     Size  Location     Type
  4309 ;;		None
  4310 ;; Return value:  Size  Location     Type
  4311 ;;                  1    wreg      void 
  4312 ;; Registers used:
  4313 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4314 ;; Tracked objects:
  4315 ;;		On entry : 0/0
  4316 ;;		On exit  : 0/0
  4317 ;;		Unchanged: 0/0
  4318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4319 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4320 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4321 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4322 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4323 ;;Total ram usage:        6 bytes
  4324 ;; Hardware stack levels used:    1
  4325 ;; Hardware stack levels required when called:    7
  4326 ;; This function calls:
  4327 ;;		_random
  4328 ;; This function is called by:
  4329 ;;		_main
  4330 ;; This function uses a non-reentrant model
  4331 ;;
  4332                           
  4333                           
  4334                           ;psect for function _shiftWalls
  4335  0102                     _shiftWalls:	
  4336                           
  4337                           ;main.c: 139: for (i = 0; i < 8; i++) {
  4338                           
  4339                           ;incstack = 0
  4340                           ; Regs used in _shiftWalls: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4341  0102  0020               	movlb	0	; select bank0
  4342  0103  01C5               	clrf	_i
  4343  0104  3008               	movlw	8
  4344  0105  0245               	subwf	_i,w
  4345  0106  1803               	btfsc	3,0
  4346  0107  291C               	goto	l3069
  4347  0108                     l3063:	
  4348                           
  4349                           ;main.c: 140: walls[i] = walls[i] << 1;
  4350  0108  0845               	movf	_i,w
  4351  0109  3EB0               	addlw	(low (_walls| 0))& (0+255)
  4352  010A  0086               	movwf	6
  4353  010B  0187               	clrf	7
  4354  010C  3501               	lslf	1,w
  4355  010D  00CC               	movwf	??_shiftWalls
  4356  010E  0845               	movf	_i,w
  4357  010F  3EB0               	addlw	(low (_walls| 0))& (0+255)
  4358  0110  0086               	movwf	6
  4359  0111  0187               	clrf	7
  4360  0112  084C               	movf	??_shiftWalls,w
  4361  0113  0081               	movwf	1
  4362  0114  3001               	movlw	1
  4363  0115  00CC               	movwf	??_shiftWalls
  4364  0116  084C               	movf	??_shiftWalls,w
  4365  0117  07C5               	addwf	_i,f
  4366  0118  3008               	movlw	8
  4367  0119  0245               	subwf	_i,w
  4368  011A  1C03               	skipc
  4369  011B  2908               	goto	l3063
  4370  011C                     l3069:	
  4371                           
  4372                           ;main.c: 141: }
  4373                           ;main.c: 142: if (createWall == 3) {
  4374  011C  3003               	movlw	3
  4375  011D  0649               	xorwf	_createWall,w
  4376  011E  1D03               	btfss	3,2
  4377  011F  297F               	goto	l3093
  4378                           
  4379                           ;main.c: 143: wallHeight = random(4, 7);
  4380  0120  3007               	movlw	7
  4381  0121  00CC               	movwf	??_shiftWalls
  4382  0122  084C               	movf	??_shiftWalls,w
  4383  0123  00CB               	movwf	random@upper
  4384  0124  3004               	movlw	4
  4385  0125  318F  2768  3181   	fcall	_random
  4386  0128  0020               	movlb	0	; select bank0
  4387  0129  00CD               	movwf	??_shiftWalls+1
  4388  012A  084D               	movf	??_shiftWalls+1,w
  4389  012B  00C4               	movwf	_wallHeight
  4390                           
  4391                           ;main.c: 144: topHalf = random(1, wallHeight);
  4392  012C  0844               	movf	_wallHeight,w
  4393  012D  00CC               	movwf	??_shiftWalls
  4394  012E  084C               	movf	??_shiftWalls,w
  4395  012F  00CB               	movwf	random@upper
  4396  0130  3001               	movlw	1
  4397  0131  318F  2768  3181   	fcall	_random
  4398  0134  0020               	movlb	0	; select bank0
  4399  0135  00CD               	movwf	??_shiftWalls+1
  4400  0136  084D               	movf	??_shiftWalls+1,w
  4401  0137  00C3               	movwf	_topHalf
  4402                           
  4403                           ;main.c: 145: for (i = 0; i < topHalf; i++) {
  4404  0138  01C5               	clrf	_i
  4405  0139                     l3079:	
  4406  0139  0843               	movf	_topHalf,w
  4407  013A  0245               	subwf	_i,w
  4408  013B  1803               	btfsc	3,0
  4409  013C  2947               	goto	l3081
  4410                           
  4411                           ;main.c: 146: walls[i] |= 1;
  4412  013D  0845               	movf	_i,w
  4413  013E  3EB0               	addlw	(low (_walls| 0))& (0+255)
  4414  013F  0086               	movwf	6
  4415  0140  0187               	clrf	7
  4416  0141  1401               	bsf	1,0
  4417  0142  3001               	movlw	1
  4418  0143  00CC               	movwf	??_shiftWalls
  4419  0144  084C               	movf	??_shiftWalls,w
  4420  0145  07C5               	addwf	_i,f
  4421  0146  2939               	goto	l3079
  4422  0147                     l3081:	
  4423                           
  4424                           ;main.c: 147: }
  4425                           ;main.c: 148: for (i = 7; i >= 8 - (wallHeight - topHalf); i--) {
  4426  0147  3007               	movlw	7
  4427  0148  00CC               	movwf	??_shiftWalls
  4428  0149  084C               	movf	??_shiftWalls,w
  4429  014A  00C5               	movwf	_i
  4430  014B                     l3087:	
  4431  014B  0843               	movf	_topHalf,w
  4432  014C  00CC               	movwf	??_shiftWalls
  4433  014D  01CD               	clrf	??_shiftWalls+1
  4434  014E  09CC               	comf	??_shiftWalls,f
  4435  014F  09CD               	comf	??_shiftWalls+1,f
  4436  0150  0ACC               	incf	??_shiftWalls,f
  4437  0151  1903               	skipnz
  4438  0152  0ACD               	incf	??_shiftWalls+1,f
  4439  0153  0844               	movf	_wallHeight,w
  4440  0154  074C               	addwf	??_shiftWalls,w
  4441  0155  00CE               	movwf	??_shiftWalls+2
  4442  0156  084D               	movf	??_shiftWalls+1,w
  4443  0157  1803               	skipnc
  4444  0158  0A4D               	incf	??_shiftWalls+1,w
  4445  0159  00CF               	movwf	??_shiftWalls+3
  4446  015A  09CE               	comf	??_shiftWalls+2,f
  4447  015B  09CF               	comf	??_shiftWalls+3,f
  4448  015C  0ACE               	incf	??_shiftWalls+2,f
  4449  015D  1903               	skipnz
  4450  015E  0ACF               	incf	??_shiftWalls+3,f
  4451  015F  084E               	movf	??_shiftWalls+2,w
  4452  0160  3E08               	addlw	8
  4453  0161  00D0               	movwf	??_shiftWalls+4
  4454  0162  3000               	movlw	0
  4455  0163  3D4F               	addwfc	??_shiftWalls+3,w
  4456  0164  00D1               	movwf	??_shiftWalls+5
  4457  0165  0851               	movf	??_shiftWalls+5,w
  4458  0166  3A80               	xorlw	128
  4459  0167  3C80               	sublw	128
  4460  0168  1D03               	skipz
  4461  0169  296C               	goto	u1625
  4462  016A  0850               	movf	??_shiftWalls+4,w
  4463  016B  0245               	subwf	_i,w
  4464  016C                     u1625:	
  4465  016C  1C03               	btfss	3,0
  4466  016D  2977               	goto	l3089
  4467                           
  4468                           ;main.c: 149: walls[i] |= 1;
  4469  016E  0020               	movlb	0	; select bank0
  4470  016F  0845               	movf	_i,w
  4471  0170  3EB0               	addlw	(low (_walls| 0))& (0+255)
  4472  0171  0086               	movwf	6
  4473  0172  0187               	clrf	7
  4474  0173  1401               	bsf	1,0
  4475  0174  3001               	movlw	1
  4476  0175  02C5               	subwf	_i,f
  4477  0176  294B               	goto	l3087
  4478  0177                     l3089:	
  4479                           
  4480                           ;main.c: 150: }
  4481                           ;main.c: 151: createWall = 0;
  4482  0177  0020               	movlb	0	; select bank0
  4483  0178  01C9               	clrf	_createWall
  4484                           
  4485                           ;main.c: 152: score++;
  4486  0179  3001               	movlw	1
  4487  017A  0021               	movlb	1	; select bank1
  4488  017B  07BA               	addwf	_score^(0+128),f
  4489  017C  3000               	movlw	0
  4490  017D  3DBB               	addwfc	(_score+1)^(0+128),f
  4491                           
  4492                           ;main.c: 153: } else {
  4493  017E  0008               	return
  4494  017F                     l3093:	
  4495                           
  4496                           ;main.c: 154: createWall++;
  4497  017F  3001               	movlw	1
  4498  0180  0020               	movlb	0	; select bank0
  4499  0181  00CC               	movwf	??_shiftWalls
  4500  0182  084C               	movf	??_shiftWalls,w
  4501  0183  07C9               	addwf	_createWall,f
  4502  0184  0008               	return
  4503  0185                     __end_of_shiftWalls:	
  4504                           
  4505                           	psect	text4
  4506  0F68                     __ptext4:	
  4507 ;; *************** function _random *****************
  4508 ;; Defined at:
  4509 ;;		line 118 in file "main.c"
  4510 ;; Parameters:    Size  Location     Type
  4511 ;;  lower           1    wreg     unsigned char 
  4512 ;;  upper           1    1[BANK0 ] unsigned char 
  4513 ;; Auto vars:     Size  Location     Type
  4514 ;;  lower           1    0[COMMON] unsigned char 
  4515 ;; Return value:  Size  Location     Type
  4516 ;;                  1    wreg      unsigned char 
  4517 ;; Registers used:
  4518 ;;		wreg, status,2, status,0
  4519 ;; Tracked objects:
  4520 ;;		On entry : 0/0
  4521 ;;		On exit  : 0/0
  4522 ;;		Unchanged: 0/0
  4523 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4524 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4525 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4526 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4527 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4528 ;;Total ram usage:        1 bytes
  4529 ;; Hardware stack levels used:    1
  4530 ;; Hardware stack levels required when called:    6
  4531 ;; This function calls:
  4532 ;;		Nothing
  4533 ;; This function is called by:
  4534 ;;		_shiftWalls
  4535 ;; This function uses a non-reentrant model
  4536 ;;
  4537                           
  4538                           
  4539                           ;psect for function _random
  4540  0F68                     _random:	
  4541                           
  4542                           ;main.c: 119: return upper - 1;
  4543                           
  4544                           ;incstack = 0
  4545                           ; Regs used in _random: [wreg+status,2+status,0]
  4546  0F68  0020               	movlb	0	; select bank0
  4547  0F69  084B               	movf	random@upper,w
  4548  0F6A  3EFF               	addlw	255
  4549  0F6B  0008               	return
  4550  0F6C                     __end_of_random:	
  4551                           
  4552                           	psect	text5
  4553  0185                     __ptext5:	
  4554 ;; *************** function _initializeDisplay *****************
  4555 ;; Defined at:
  4556 ;;		line 99 in file "main.c"
  4557 ;; Parameters:    Size  Location     Type
  4558 ;;		None
  4559 ;; Auto vars:     Size  Location     Type
  4560 ;;		None
  4561 ;; Return value:  Size  Location     Type
  4562 ;;                  1    wreg      void 
  4563 ;; Registers used:
  4564 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4565 ;; Tracked objects:
  4566 ;;		On entry : 0/0
  4567 ;;		On exit  : 0/0
  4568 ;;		Unchanged: 0/0
  4569 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4570 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4571 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4572 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4573 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4574 ;;Total ram usage:        1 bytes
  4575 ;; Hardware stack levels used:    1
  4576 ;; Hardware stack levels required when called:   15
  4577 ;; This function calls:
  4578 ;;		_i2c_writeNBytes
  4579 ;; This function is called by:
  4580 ;;		_main
  4581 ;; This function uses a non-reentrant model
  4582 ;;
  4583                           
  4584                           
  4585                           ;psect for function _initializeDisplay
  4586  0185                     _initializeDisplay:	
  4587                           
  4588                           ;main.c: 100: for (i = 0; i < 8; i++) {
  4589                           
  4590                           ;incstack = 0
  4591                           ; Regs used in _initializeDisplay: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4592  0185  0020               	movlb	0	; select bank0
  4593  0186  01C5               	clrf	_i
  4594  0187  3008               	movlw	8
  4595  0188  0245               	subwf	_i,w
  4596  0189  1803               	btfsc	3,0
  4597  018A  299A               	goto	l5039
  4598  018B                     l5033:	
  4599                           
  4600                           ;main.c: 101: pixelbuffer[i] = 0;
  4601  018B  3545               	lslf	_i,w
  4602  018C  3EA0               	addlw	(low (_pixelbuffer| 0))& (0+255)
  4603  018D  0086               	movwf	6
  4604  018E  0187               	clrf	7
  4605  018F  3000               	movlw	0
  4606  0190  3FC0               	movwi [0]fsr1
  4607  0191  3FC1               	movwi [1]fsr1
  4608  0192  3001               	movlw	1
  4609  0193  00E0               	movwf	??_initializeDisplay
  4610  0194  0860               	movf	??_initializeDisplay,w
  4611  0195  07C5               	addwf	_i,f
  4612  0196  3008               	movlw	8
  4613  0197  0245               	subwf	_i,w
  4614  0198  1C03               	skipc
  4615  0199  298B               	goto	l5033
  4616  019A                     l5039:	
  4617                           
  4618                           ;main.c: 102: }
  4619                           ;main.c: 103: for (i = 0; i < 8; i++) {
  4620  019A  01C5               	clrf	_i
  4621  019B  3008               	movlw	8
  4622  019C  0245               	subwf	_i,w
  4623  019D  1803               	btfsc	3,0
  4624  019E  29AC               	goto	l5051
  4625  019F                     l5045:	
  4626                           
  4627                           ;main.c: 104: writebuffer[i] = 0;
  4628  019F  0845               	movf	_i,w
  4629  01A0  3EBC               	addlw	(low (_writebuffer| 0))& (0+255)
  4630  01A1  0086               	movwf	6
  4631  01A2  0187               	clrf	7
  4632  01A3  0181               	clrf	1
  4633  01A4  3001               	movlw	1
  4634  01A5  00E0               	movwf	??_initializeDisplay
  4635  01A6  0860               	movf	??_initializeDisplay,w
  4636  01A7  07C5               	addwf	_i,f
  4637  01A8  3008               	movlw	8
  4638  01A9  0245               	subwf	_i,w
  4639  01AA  1C03               	skipc
  4640  01AB  299F               	goto	l5045
  4641  01AC                     l5051:	
  4642                           
  4643                           ;main.c: 105: }
  4644                           ;main.c: 106: for (i = 0; i < 8; i++) {
  4645  01AC  01C5               	clrf	_i
  4646  01AD  3008               	movlw	8
  4647  01AE  0245               	subwf	_i,w
  4648  01AF  1803               	btfsc	3,0
  4649  01B0  29BE               	goto	l5063
  4650  01B1                     l5057:	
  4651                           
  4652                           ;main.c: 107: walls[i] = 0;
  4653  01B1  0845               	movf	_i,w
  4654  01B2  3EB0               	addlw	(low (_walls| 0))& (0+255)
  4655  01B3  0086               	movwf	6
  4656  01B4  0187               	clrf	7
  4657  01B5  0181               	clrf	1
  4658  01B6  3001               	movlw	1
  4659  01B7  00E0               	movwf	??_initializeDisplay
  4660  01B8  0860               	movf	??_initializeDisplay,w
  4661  01B9  07C5               	addwf	_i,f
  4662  01BA  3008               	movlw	8
  4663  01BB  0245               	subwf	_i,w
  4664  01BC  1C03               	skipc
  4665  01BD  29B1               	goto	l5057
  4666  01BE                     l5063:	
  4667                           
  4668                           ;main.c: 108: }
  4669                           ;main.c: 110: writebuffer[0] = 0x21;
  4670  01BE  3021               	movlw	33
  4671  01BF  00E0               	movwf	??_initializeDisplay
  4672  01C0  0860               	movf	??_initializeDisplay,w
  4673  01C1  0021               	movlb	1	; select bank1
  4674  01C2  00BC               	movwf	_writebuffer^(0+128)
  4675                           
  4676                           ;main.c: 111: i2c_writeNBytes(0x70, writebuffer, 1);
  4677  01C3  30BC               	movlw	(low (_writebuffer| 0))& (0+255)
  4678  01C4  0020               	movlb	0	; select bank0
  4679  01C5  00E0               	movwf	??_initializeDisplay
  4680  01C6  0860               	movf	??_initializeDisplay,w
  4681  01C7  00DC               	movwf	i2c_writeNBytes@data
  4682  01C8  3001               	movlw	1
  4683  01C9  00DD               	movwf	i2c_writeNBytes@len
  4684  01CA  3000               	movlw	0
  4685  01CB  00DE               	movwf	i2c_writeNBytes@len+1
  4686  01CC  3070               	movlw	112
  4687  01CD  3185  2516  3181   	fcall	_i2c_writeNBytes
  4688                           
  4689                           ;main.c: 114: writebuffer[0] = 0x80 | 0x01;
  4690  01D0  3081               	movlw	129
  4691  01D1  0020               	movlb	0	; select bank0
  4692  01D2  00E0               	movwf	??_initializeDisplay
  4693  01D3  0860               	movf	??_initializeDisplay,w
  4694  01D4  0021               	movlb	1	; select bank1
  4695  01D5  00BC               	movwf	_writebuffer^(0+128)
  4696                           
  4697                           ;main.c: 115: i2c_writeNBytes(0x70, writebuffer, 1);
  4698  01D6  30BC               	movlw	(low (_writebuffer| 0))& (0+255)
  4699  01D7  0020               	movlb	0	; select bank0
  4700  01D8  00E0               	movwf	??_initializeDisplay
  4701  01D9  0860               	movf	??_initializeDisplay,w
  4702  01DA  00DC               	movwf	i2c_writeNBytes@data
  4703  01DB  3001               	movlw	1
  4704  01DC  00DD               	movwf	i2c_writeNBytes@len
  4705  01DD  3000               	movlw	0
  4706  01DE  00DE               	movwf	i2c_writeNBytes@len+1
  4707  01DF  3070               	movlw	112
  4708  01E0  3185  2516         	fcall	_i2c_writeNBytes
  4709  01E2  0008               	return
  4710  01E3                     __end_of_initializeDisplay:	
  4711                           
  4712                           	psect	text6
  4713  0516                     __ptext6:	
  4714 ;; *************** function _i2c_writeNBytes *****************
  4715 ;; Defined at:
  4716 ;;		line 48 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  4717 ;; Parameters:    Size  Location     Type
  4718 ;;  address         1    wreg     unsigned char 
  4719 ;;  data            1   18[BANK0 ] PTR void 
  4720 ;;		 -> writebuffer(17), 
  4721 ;;  len             2   19[BANK0 ] unsigned int 
  4722 ;; Auto vars:     Size  Location     Type
  4723 ;;  address         1   21[BANK0 ] unsigned char 
  4724 ;; Return value:  Size  Location     Type
  4725 ;;                  1    wreg      void 
  4726 ;; Registers used:
  4727 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4728 ;; Tracked objects:
  4729 ;;		On entry : 0/0
  4730 ;;		On exit  : 0/0
  4731 ;;		Unchanged: 0/0
  4732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4733 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4734 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4735 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4736 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4737 ;;Total ram usage:        4 bytes
  4738 ;; Hardware stack levels used:    1
  4739 ;; Hardware stack levels required when called:   14
  4740 ;; This function calls:
  4741 ;;		_i2c_close
  4742 ;;		_i2c_masterWrite
  4743 ;;		_i2c_open
  4744 ;;		_i2c_setAddressNACKCallback
  4745 ;;		_i2c_setBuffer
  4746 ;; This function is called by:
  4747 ;;		_writeDisplay
  4748 ;;		_initializeDisplay
  4749 ;; This function uses a non-reentrant model
  4750 ;;
  4751                           
  4752                           
  4753                           ;psect for function _i2c_writeNBytes
  4754  0516                     _i2c_writeNBytes:	
  4755                           
  4756                           ;incstack = 0
  4757                           ; Regs used in _i2c_writeNBytes: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4758                           ;i2c_writeNBytes@address stored from wreg
  4759  0516  0020               	movlb	0	; select bank0
  4760  0517  00DF               	movwf	i2c_writeNBytes@address
  4761  0518                     l4909:	
  4762                           ;i2c_simple_master.c: 50: while(!i2c_open(address));
  4763                           
  4764  0518  0020               	movlb	0	; select bank0
  4765  0519  085F               	movf	i2c_writeNBytes@address,w
  4766  051A  3183  2373  3185   	fcall	_i2c_open
  4767  051D  3A00               	xorlw	0
  4768  051E  1903               	skipnz
  4769  051F  2D18               	goto	l4909
  4770                           
  4771                           ;i2c_simple_master.c: 51: i2c_setBuffer(data,len);
  4772  0520  0020               	movlb	0	; select bank0
  4773  0521  085E               	movf	i2c_writeNBytes@len+1,w
  4774  0522  00CC               	movwf	i2c_setBuffer@bufferSize+1
  4775  0523  085D               	movf	i2c_writeNBytes@len,w
  4776  0524  00CB               	movwf	i2c_setBuffer@bufferSize
  4777  0525  085C               	movf	i2c_writeNBytes@data,w
  4778  0526  3187  273C  3185   	fcall	_i2c_setBuffer
  4779                           
  4780                           ;i2c_simple_master.c: 52: i2c_setAddressNACKCallback(i2c_restartWrite,(0));
  4781  0529  3082               	movlw	low _i2c_restartWrite
  4782  052A  0020               	movlb	0	; select bank0
  4783  052B  00D0               	movwf	i2c_setAddressNACKCallback@cb
  4784  052C  300F               	movlw	high _i2c_restartWrite
  4785  052D  00D1               	movwf	i2c_setAddressNACKCallback@cb+1
  4786  052E  01D2               	clrf	i2c_setAddressNACKCallback@p
  4787  052F  3187  2758  3185   	fcall	_i2c_setAddressNACKCallback
  4788                           
  4789                           ;i2c_simple_master.c: 53: i2c_masterWrite();
  4790  0532  318F  2764  3185   	fcall	_i2c_masterWrite
  4791  0535                     l4917:	
  4792                           ;i2c_simple_master.c: 54: while(I2C_BUSY == i2c_close());
  4793                           
  4794  0535  3186  26D4  3185   	fcall	_i2c_close
  4795  0538  3A01               	xorlw	1
  4796  0539  1D03               	btfss	3,2
  4797  053A  0008               	return
  4798  053B  2D35               	goto	l4917
  4799  053C                     __end_of_i2c_writeNBytes:	
  4800                           
  4801                           	psect	text7
  4802  0758                     __ptext7:	
  4803 ;; *************** function _i2c_setAddressNACKCallback *****************
  4804 ;; Defined at:
  4805 ;;		line 99 in file "mcc_generated_files/drivers/i2c_master.c"
  4806 ;; Parameters:    Size  Location     Type
  4807 ;;  cb              2    6[BANK0 ] PTR FTN(PTR void ,)enum 
  4808 ;;		 -> i2c_restartWrite(1), 
  4809 ;;  p               1    8[BANK0 ] PTR void 
  4810 ;;		 -> NULL(0), 
  4811 ;; Auto vars:     Size  Location     Type
  4812 ;;		None
  4813 ;; Return value:  Size  Location     Type
  4814 ;;                  1    wreg      void 
  4815 ;; Registers used:
  4816 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4817 ;; Tracked objects:
  4818 ;;		On entry : 0/0
  4819 ;;		On exit  : 0/0
  4820 ;;		Unchanged: 0/0
  4821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4822 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4823 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4824 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4825 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4826 ;;Total ram usage:        4 bytes
  4827 ;; Hardware stack levels used:    1
  4828 ;; Hardware stack levels required when called:    7
  4829 ;; This function calls:
  4830 ;;		_setCallBack
  4831 ;; This function is called by:
  4832 ;;		_i2c_writeNBytes
  4833 ;;		_i2c_write1ByteRegister
  4834 ;;		_i2c_read1ByteRegister
  4835 ;;		_i2c_read2ByteRegister
  4836 ;;		_i2c_write2ByteRegister
  4837 ;;		_i2c_readDataBlock
  4838 ;; This function uses a non-reentrant model
  4839 ;;
  4840                           
  4841                           
  4842                           ;psect for function _i2c_setAddressNACKCallback
  4843  0758                     _i2c_setAddressNACKCallback:	
  4844                           
  4845                           ;i2c_master.c: 101: setCallBack(i2c_addressNACK,cb,p);
  4846                           
  4847                           ;incstack = 0
  4848                           ; Regs used in _i2c_setAddressNACKCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  4849  0758  0020               	movlb	0	; select bank0
  4850  0759  0851               	movf	i2c_setAddressNACKCallback@cb+1,w
  4851  075A  00CC               	movwf	setCallBack@cb+1
  4852  075B  0850               	movf	i2c_setAddressNACKCallback@cb,w
  4853  075C  00CB               	movwf	setCallBack@cb
  4854  075D  0852               	movf	i2c_setAddressNACKCallback@p,w
  4855  075E  00D3               	movwf	??_i2c_setAddressNACKCallback
  4856  075F  0853               	movf	??_i2c_setAddressNACKCallback,w
  4857  0760  00CD               	movwf	setCallBack@p
  4858  0761  3002               	movlw	2
  4859  0762  3185  253C         	fcall	_setCallBack
  4860  0764  0008               	return
  4861  0765                     __end_of_i2c_setAddressNACKCallback:	
  4862                           
  4863                           	psect	text8
  4864  0373                     __ptext8:	
  4865 ;; *************** function _i2c_open *****************
  4866 ;; Defined at:
  4867 ;;		line 116 in file "mcc_generated_files/drivers/i2c_master.c"
  4868 ;; Parameters:    Size  Location     Type
  4869 ;;  address         1    wreg     unsigned char 
  4870 ;; Auto vars:     Size  Location     Type
  4871 ;;  address         1    4[BANK0 ] unsigned char 
  4872 ;;  ret             1    5[BANK0 ] enum E12166
  4873 ;; Return value:  Size  Location     Type
  4874 ;;                  1    wreg      enum E92
  4875 ;; Registers used:
  4876 ;;		wreg, status,2, status,0, pclath, cstack
  4877 ;; Tracked objects:
  4878 ;;		On entry : 0/0
  4879 ;;		On exit  : 0/0
  4880 ;;		Unchanged: 0/0
  4881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4882 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4883 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4884 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4885 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4886 ;;Total ram usage:        3 bytes
  4887 ;; Hardware stack levels used:    1
  4888 ;; Hardware stack levels required when called:    7
  4889 ;; This function calls:
  4890 ;;		_i2c_driver_open
  4891 ;;		_i2c_driver_setBusCollisionISR
  4892 ;;		_i2c_driver_setI2cISR
  4893 ;;		_mssp_clearIRQ
  4894 ;; This function is called by:
  4895 ;;		_i2c_writeNBytes
  4896 ;;		_i2c_write1ByteRegister
  4897 ;;		_i2c_read1ByteRegister
  4898 ;;		_i2c_read2ByteRegister
  4899 ;;		_i2c_write2ByteRegister
  4900 ;;		_i2c_readDataBlock
  4901 ;;		_i2c_readNBytes
  4902 ;; This function uses a non-reentrant model
  4903 ;;
  4904                           
  4905                           
  4906                           ;psect for function _i2c_open
  4907  0373                     _i2c_open:	
  4908                           
  4909                           ;incstack = 0
  4910                           ; Regs used in _i2c_open: [wreg+status,2+status,0+pclath+cstack]
  4911                           ;i2c_open@address stored from wreg
  4912  0373  0020               	movlb	0	; select bank0
  4913  0374  00CE               	movwf	i2c_open@address
  4914                           
  4915                           ;i2c_master.c: 118: i2c_error_t ret = I2C_BUSY;
  4916  0375  01CF               	clrf	i2c_open@ret
  4917  0376  0ACF               	incf	i2c_open@ret,f
  4918                           
  4919                           ;i2c_master.c: 120: if(!i2c_status.inUse)
  4920  0377  18A0               	btfsc	_i2c_status,1
  4921  0378  2BB9               	goto	l517
  4922                           
  4923                           ;i2c_master.c: 121: {
  4924                           ;i2c_master.c: 122: i2c_status.address = address;
  4925  0379  084E               	movf	i2c_open@address,w
  4926  037A  00CD               	movwf	??_i2c_open
  4927  037B  084D               	movf	??_i2c_open,w
  4928  037C  00A1               	movwf	_i2c_status+1
  4929                           
  4930                           ;i2c_master.c: 123: i2c_status.busy = 0;
  4931  037D  1020               	bcf	_i2c_status,0
  4932                           
  4933                           ;i2c_master.c: 124: i2c_status.inUse = 1;
  4934  037E  14A0               	bsf	_i2c_status,1
  4935                           
  4936                           ;i2c_master.c: 125: i2c_status.addressNACKCheck = 0;
  4937  037F  11A0               	bcf	_i2c_status,3
  4938                           
  4939                           ;i2c_master.c: 126: i2c_status.state = I2C_RESET;
  4940  0380  300E               	movlw	14
  4941  0381  00CD               	movwf	??_i2c_open
  4942  0382  084D               	movf	??_i2c_open,w
  4943  0383  00A9               	movwf	_i2c_status+9
  4944                           
  4945                           ;i2c_master.c: 127: i2c_status.time_out_value = 500;
  4946  0384  30F4               	movlw	244
  4947  0385  00A7               	movwf	_i2c_status+7
  4948  0386  3001               	movlw	1
  4949  0387  00A8               	movwf	_i2c_status+8
  4950                           
  4951                           ;i2c_master.c: 128: i2c_status.bufferFree = 1;
  4952  0388  1520               	bsf	_i2c_status,2
  4953                           
  4954                           ;i2c_master.c: 131: i2c_status.callbackTable[i2c_dataComplete]=returnStop;
  4955  0389  3088               	movlw	low _returnStop
  4956  038A  00AB               	movwf	low ((_i2c_status| 0+11))
  4957  038B  300F               	movlw	high _returnStop
  4958  038C  00AC               	movwf	(low ((_i2c_status| 0+11))+1)
  4959                           
  4960                           ;i2c_master.c: 132: i2c_status.callbackPayload[i2c_dataComplete] = (0);
  4961  038D  01B7               	clrf	low ((_i2c_status| 0+23))
  4962                           
  4963                           ;i2c_master.c: 133: i2c_status.callbackTable[i2c_writeCollision]=returnStop;
  4964  038E  3088               	movlw	low _returnStop
  4965  038F  00AD               	movwf	low ((_i2c_status| 0+13))
  4966  0390  300F               	movlw	high _returnStop
  4967  0391  00AE               	movwf	(low ((_i2c_status| 0+13))+1)
  4968                           
  4969                           ;i2c_master.c: 134: i2c_status.callbackPayload[i2c_writeCollision] = (0);
  4970  0392  01B8               	clrf	low ((_i2c_status| 0+24))
  4971                           
  4972                           ;i2c_master.c: 135: i2c_status.callbackTable[i2c_addressNACK]=returnStop;
  4973  0393  3088               	movlw	low _returnStop
  4974  0394  00AF               	movwf	low ((_i2c_status| 0+15))
  4975  0395  300F               	movlw	high _returnStop
  4976  0396  00B0               	movwf	(low ((_i2c_status| 0+15))+1)
  4977                           
  4978                           ;i2c_master.c: 136: i2c_status.callbackPayload[i2c_addressNACK] = (0);
  4979  0397  01B9               	clrf	low ((_i2c_status| 0+25))
  4980                           
  4981                           ;i2c_master.c: 137: i2c_status.callbackTable[i2c_dataNACK]=returnStop;
  4982  0398  3088               	movlw	low _returnStop
  4983  0399  00B1               	movwf	low ((_i2c_status| 0+17))
  4984  039A  300F               	movlw	high _returnStop
  4985  039B  00B2               	movwf	(low ((_i2c_status| 0+17))+1)
  4986                           
  4987                           ;i2c_master.c: 138: i2c_status.callbackPayload[i2c_dataNACK] = (0);
  4988  039C  01BA               	clrf	low ((_i2c_status| 0+26))
  4989                           
  4990                           ;i2c_master.c: 139: i2c_status.callbackTable[i2c_timeOut]=returnReset;
  4991  039D  308E               	movlw	low _returnReset
  4992  039E  00B3               	movwf	low ((_i2c_status| 0+19))
  4993  039F  300F               	movlw	high _returnReset
  4994  03A0  00B4               	movwf	(low ((_i2c_status| 0+19))+1)
  4995                           
  4996                           ;i2c_master.c: 140: i2c_status.callbackPayload[i2c_timeOut] = (0);
  4997  03A1  01BB               	clrf	low ((_i2c_status| 0+27))
  4998                           
  4999                           ;i2c_master.c: 142: i2c_driver_open();
  5000  03A2  3187  27CF  3183   	fcall	_i2c_driver_open
  5001                           
  5002                           ;i2c_master.c: 143: mssp_clearIRQ();
  5003  03A5  318F  2720  3183   	fcall	_mssp_clearIRQ
  5004                           
  5005                           ;i2c_master.c: 145: i2c_driver_setBusCollisionISR(i2c_busCollisionISR);
  5006  03A8  300B               	movlw	low _i2c_busCollisionISR
  5007  03A9  0020               	movlb	0	; select bank0
  5008  03AA  00CB               	movwf	i2c_driver_setBusCollisionISR@f
  5009  03AB  300F               	movlw	high _i2c_busCollisionISR
  5010  03AC  00CC               	movwf	i2c_driver_setBusCollisionISR@f+1
  5011  03AD  318F  279A  3183   	fcall	_i2c_driver_setBusCollisionISR
  5012                           
  5013                           ;i2c_master.c: 146: i2c_driver_setI2cISR(i2c_ISR);
  5014  03B0  3085               	movlw	low _i2c_ISR
  5015  03B1  0020               	movlb	0	; select bank0
  5016  03B2  00CB               	movwf	i2c_driver_setI2cISR@f
  5017  03B3  3005               	movlw	high _i2c_ISR
  5018  03B4  00CC               	movwf	i2c_driver_setI2cISR@f+1
  5019  03B5  318F  27A0         	fcall	_i2c_driver_setI2cISR
  5020                           
  5021                           ;i2c_master.c: 151: ret = I2C_NOERR;
  5022  03B7  0020               	movlb	0	; select bank0
  5023  03B8  01CF               	clrf	i2c_open@ret
  5024  03B9                     l517:	
  5025                           
  5026                           ;i2c_master.c: 152: }
  5027                           ;i2c_master.c: 153: return ret;
  5028  03B9  084F               	movf	i2c_open@ret,w
  5029  03BA  0008               	return
  5030  03BB                     __end_of_i2c_open:	
  5031                           
  5032                           	psect	text9
  5033  0FA0                     __ptext9:	
  5034 ;; *************** function _i2c_driver_setI2cISR *****************
  5035 ;; Defined at:
  5036 ;;		line 262 in file "mcc_generated_files/i2c_driver.c"
  5037 ;; Parameters:    Size  Location     Type
  5038 ;;  f               2    1[BANK0 ] PTR void 
  5039 ;;		 -> i2c_ISR(1), 
  5040 ;; Auto vars:     Size  Location     Type
  5041 ;;		None
  5042 ;; Return value:  Size  Location     Type
  5043 ;;                  1    wreg      void 
  5044 ;; Registers used:
  5045 ;;		wreg
  5046 ;; Tracked objects:
  5047 ;;		On entry : 0/0
  5048 ;;		On exit  : 0/0
  5049 ;;		Unchanged: 0/0
  5050 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5051 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5052 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5053 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5054 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5055 ;;Total ram usage:        2 bytes
  5056 ;; Hardware stack levels used:    1
  5057 ;; Hardware stack levels required when called:    6
  5058 ;; This function calls:
  5059 ;;		Nothing
  5060 ;; This function is called by:
  5061 ;;		_i2c_open
  5062 ;; This function uses a non-reentrant model
  5063 ;;
  5064                           
  5065                           
  5066                           ;psect for function _i2c_driver_setI2cISR
  5067  0FA0                     _i2c_driver_setI2cISR:	
  5068                           
  5069                           ;i2c_driver.c: 263: i2c_driver_i2cISR = f;
  5070                           
  5071                           ;incstack = 0
  5072                           ; Regs used in _i2c_driver_setI2cISR: [wreg]
  5073  0FA0  0020               	movlb	0	; select bank0
  5074  0FA1  084C               	movf	i2c_driver_setI2cISR@f+1,w
  5075  0FA2  00C0               	movwf	_i2c_driver_i2cISR+1
  5076  0FA3  084B               	movf	i2c_driver_setI2cISR@f,w
  5077  0FA4  00BF               	movwf	_i2c_driver_i2cISR
  5078  0FA5  0008               	return
  5079  0FA6                     __end_of_i2c_driver_setI2cISR:	
  5080                           
  5081                           	psect	text10
  5082  0F9A                     __ptext10:	
  5083 ;; *************** function _i2c_driver_setBusCollisionISR *****************
  5084 ;; Defined at:
  5085 ;;		line 258 in file "mcc_generated_files/i2c_driver.c"
  5086 ;; Parameters:    Size  Location     Type
  5087 ;;  f               2    1[BANK0 ] PTR void 
  5088 ;;		 -> i2c_busCollisionISR(1), 
  5089 ;; Auto vars:     Size  Location     Type
  5090 ;;		None
  5091 ;; Return value:  Size  Location     Type
  5092 ;;                  1    wreg      void 
  5093 ;; Registers used:
  5094 ;;		wreg
  5095 ;; Tracked objects:
  5096 ;;		On entry : 0/0
  5097 ;;		On exit  : 0/0
  5098 ;;		Unchanged: 0/0
  5099 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5100 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5101 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5102 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5103 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5104 ;;Total ram usage:        2 bytes
  5105 ;; Hardware stack levels used:    1
  5106 ;; Hardware stack levels required when called:    6
  5107 ;; This function calls:
  5108 ;;		Nothing
  5109 ;; This function is called by:
  5110 ;;		_i2c_open
  5111 ;; This function uses a non-reentrant model
  5112 ;;
  5113                           
  5114                           
  5115                           ;psect for function _i2c_driver_setBusCollisionISR
  5116  0F9A                     _i2c_driver_setBusCollisionISR:	
  5117                           
  5118                           ;i2c_driver.c: 259: i2c_driver_busCollisionISR = f;
  5119                           
  5120                           ;incstack = 0
  5121                           ; Regs used in _i2c_driver_setBusCollisionISR: [wreg]
  5122  0F9A  0020               	movlb	0	; select bank0
  5123  0F9B  084C               	movf	i2c_driver_setBusCollisionISR@f+1,w
  5124  0F9C  00C2               	movwf	_i2c_driver_busCollisionISR+1
  5125  0F9D  084B               	movf	i2c_driver_setBusCollisionISR@f,w
  5126  0F9E  00C1               	movwf	_i2c_driver_busCollisionISR
  5127  0F9F  0008               	return
  5128  0FA0                     __end_of_i2c_driver_setBusCollisionISR:	
  5129                           
  5130                           	psect	text11
  5131  07CF                     __ptext11:	
  5132 ;; *************** function _i2c_driver_open *****************
  5133 ;; Defined at:
  5134 ;;		line 83 in file "mcc_generated_files/i2c_driver.c"
  5135 ;; Parameters:    Size  Location     Type
  5136 ;;		None
  5137 ;; Auto vars:     Size  Location     Type
  5138 ;;		None
  5139 ;; Return value:  Size  Location     Type
  5140 ;;		None               void
  5141 ;; Registers used:
  5142 ;;		wreg, status,2
  5143 ;; Tracked objects:
  5144 ;;		On entry : 0/0
  5145 ;;		On exit  : 0/0
  5146 ;;		Unchanged: 0/0
  5147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5148 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5149 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5150 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5151 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5152 ;;Total ram usage:        0 bytes
  5153 ;; Hardware stack levels used:    1
  5154 ;; Hardware stack levels required when called:    6
  5155 ;; This function calls:
  5156 ;;		Nothing
  5157 ;; This function is called by:
  5158 ;;		_i2c_open
  5159 ;; This function uses a non-reentrant model
  5160 ;;
  5161                           
  5162                           
  5163                           ;psect for function _i2c_driver_open
  5164  07CF                     _i2c_driver_open:	
  5165                           
  5166                           ;i2c_driver.c: 85: if(!SSP1CON1bits.SSPEN)
  5167                           
  5168                           ;incstack = 0
  5169                           ; Regs used in _i2c_driver_open: [wreg+status,2]
  5170  07CF  0024               	movlb	4	; select bank4
  5171  07D0  1A95               	btfsc	21,5	;volatile
  5172  07D1  0008               	return
  5173                           
  5174                           ;i2c_driver.c: 86: {
  5175                           ;i2c_driver.c: 87: SSP1STAT = 0x00;
  5176  07D2  0194               	clrf	20	;volatile
  5177                           
  5178                           ;i2c_driver.c: 88: SSP1CON1 = 0x28;
  5179  07D3  3028               	movlw	40
  5180  07D4  0095               	movwf	21	;volatile
  5181                           
  5182                           ;i2c_driver.c: 89: SSP1CON2 = 0x00;
  5183  07D5  0196               	clrf	22	;volatile
  5184                           
  5185                           ;i2c_driver.c: 90: SSP1ADD = 0x4f;
  5186  07D6  304F               	movlw	79
  5187  07D7  0092               	movwf	18	;volatile
  5188                           
  5189                           ;i2c_driver.c: 93: else
  5190                           ;i2c_driver.c: 94: return 0;
  5191                           ;	Return value of _i2c_driver_open is never used
  5192                           
  5193                           ;i2c_driver.c: 92: }
  5194                           
  5195                           ;i2c_driver.c: 91: return 1;
  5196                           ;	Return value of _i2c_driver_open is never used
  5197  07D8  0008               	return
  5198  07D9                     __end_of_i2c_driver_open:	
  5199                           
  5200                           	psect	text12
  5201  0F64                     __ptext12:	
  5202 ;; *************** function _i2c_masterWrite *****************
  5203 ;; Defined at:
  5204 ;;		line 222 in file "mcc_generated_files/drivers/i2c_master.c"
  5205 ;; Parameters:    Size  Location     Type
  5206 ;;		None
  5207 ;; Auto vars:     Size  Location     Type
  5208 ;;		None
  5209 ;; Return value:  Size  Location     Type
  5210 ;;                  1    wreg      enum E92
  5211 ;; Registers used:
  5212 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5213 ;; Tracked objects:
  5214 ;;		On entry : 0/0
  5215 ;;		On exit  : 0/0
  5216 ;;		Unchanged: 0/0
  5217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5219 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5220 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5221 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5222 ;;Total ram usage:        0 bytes
  5223 ;; Hardware stack levels used:    1
  5224 ;; Hardware stack levels required when called:   13
  5225 ;; This function calls:
  5226 ;;		_i2c_masterOperation
  5227 ;; This function is called by:
  5228 ;;		_i2c_writeNBytes
  5229 ;;		_i2c_write1ByteRegister
  5230 ;;		_i2c_read1ByteRegister
  5231 ;;		_i2c_read2ByteRegister
  5232 ;;		_i2c_write2ByteRegister
  5233 ;;		_i2c_readDataBlock
  5234 ;; This function uses a non-reentrant model
  5235 ;;
  5236                           
  5237                           
  5238                           ;psect for function _i2c_masterWrite
  5239  0F64                     _i2c_masterWrite:	
  5240                           
  5241                           ;i2c_master.c: 224: return i2c_masterOperation(0);
  5242                           ;	Return value of _i2c_masterWrite is never used
  5243                           
  5244                           ;incstack = 0
  5245                           ; Regs used in _i2c_masterWrite: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5246  0F64  3000               	movlw	0
  5247  0F65  3185  25EB         	fcall	_i2c_masterOperation
  5248  0F67  0008               	return
  5249  0F68                     __end_of_i2c_masterWrite:	
  5250                           
  5251                           	psect	text13
  5252  05EB                     __ptext13:	
  5253 ;; *************** function _i2c_masterOperation *****************
  5254 ;; Defined at:
  5255 ;;		line 193 in file "mcc_generated_files/drivers/i2c_master.c"
  5256 ;; Parameters:    Size  Location     Type
  5257 ;;  read            1    wreg     unsigned char 
  5258 ;; Auto vars:     Size  Location     Type
  5259 ;;  read            1   16[BANK0 ] unsigned char 
  5260 ;;  ret             1   17[BANK0 ] enum E12166
  5261 ;; Return value:  Size  Location     Type
  5262 ;;                  1    wreg      enum E12166
  5263 ;; Registers used:
  5264 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5265 ;; Tracked objects:
  5266 ;;		On entry : 0/0
  5267 ;;		On exit  : 0/0
  5268 ;;		Unchanged: 0/0
  5269 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5270 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5271 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5272 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5273 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5274 ;;Total ram usage:        3 bytes
  5275 ;; Hardware stack levels used:    1
  5276 ;; Hardware stack levels required when called:   12
  5277 ;; This function calls:
  5278 ;;		_i2c_driver_start
  5279 ;;		_i2c_poller
  5280 ;;		_mssp_IRQisEnabled
  5281 ;; This function is called by:
  5282 ;;		_i2c_masterWrite
  5283 ;;		_i2c_masterRead
  5284 ;; This function uses a non-reentrant model
  5285 ;;
  5286                           
  5287                           
  5288                           ;psect for function _i2c_masterOperation
  5289  05EB                     _i2c_masterOperation:	
  5290                           
  5291                           ;incstack = 0
  5292                           ; Regs used in _i2c_masterOperation: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5293                           ;i2c_masterOperation@read stored from wreg
  5294  05EB  0020               	movlb	0	; select bank0
  5295  05EC  00DA               	movwf	i2c_masterOperation@read
  5296                           
  5297                           ;i2c_master.c: 195: i2c_error_t ret = I2C_BUSY;
  5298  05ED  01DB               	clrf	i2c_masterOperation@ret
  5299  05EE  0ADB               	incf	i2c_masterOperation@ret,f
  5300                           
  5301                           ;i2c_master.c: 196: if(!i2c_status.busy)
  5302  05EF  1820               	btfsc	_i2c_status,0
  5303  05F0  2E07               	goto	l4863
  5304                           
  5305                           ;i2c_master.c: 197: {
  5306                           ;i2c_master.c: 198: i2c_status.busy = 1;
  5307  05F1  1420               	bsf	_i2c_status,0
  5308                           
  5309                           ;i2c_master.c: 199: ret = I2C_NOERR;
  5310  05F2  01DB               	clrf	i2c_masterOperation@ret
  5311                           
  5312                           ;i2c_master.c: 201: if(read)
  5313  05F3  085A               	movf	i2c_masterOperation@read,w
  5314  05F4  1903               	btfsc	3,2
  5315  05F5  2DF9               	goto	l4857
  5316                           
  5317                           ;i2c_master.c: 202: {
  5318                           ;i2c_master.c: 203: i2c_status.state = I2C_SEND_ADR_READ;
  5319  05F6  01A9               	clrf	_i2c_status+9
  5320  05F7  0AA9               	incf	_i2c_status+9,f
  5321                           
  5322                           ;i2c_master.c: 204: }
  5323  05F8  2DFD               	goto	l4859
  5324  05F9                     l4857:	
  5325                           
  5326                           ;i2c_master.c: 205: else
  5327                           ;i2c_master.c: 206: {
  5328                           ;i2c_master.c: 207: i2c_status.state = I2C_SEND_ADR_WRITE;
  5329  05F9  3002               	movlw	2
  5330  05FA  00D9               	movwf	??_i2c_masterOperation
  5331  05FB  0859               	movf	??_i2c_masterOperation,w
  5332  05FC  00A9               	movwf	_i2c_status+9
  5333  05FD                     l4859:	
  5334                           
  5335                           ;i2c_master.c: 208: }
  5336                           ;i2c_master.c: 209: i2c_driver_start();
  5337  05FD  318F  2726  3185   	fcall	_i2c_driver_start
  5338                           
  5339                           ;i2c_master.c: 211: if(! mssp_IRQisEnabled())
  5340  0600  3187  27D9  3185   	fcall	_mssp_IRQisEnabled
  5341  0603  1803               	btfsc	3,0
  5342  0604  2E07               	goto	l4863
  5343                           
  5344                           ;i2c_master.c: 212: i2c_poller();
  5345  0605  3187  27A3         	fcall	_i2c_poller
  5346  0607                     l4863:	
  5347                           
  5348                           ;i2c_master.c: 213: }
  5349                           ;i2c_master.c: 214: return ret;
  5350  0607  0020               	movlb	0	; select bank0
  5351  0608  085B               	movf	i2c_masterOperation@ret,w
  5352  0609  0008               	return
  5353  060A                     __end_of_i2c_masterOperation:	
  5354                           
  5355                           	psect	text14
  5356  07D9                     __ptext14:	
  5357 ;; *************** function _mssp_IRQisEnabled *****************
  5358 ;; Defined at:
  5359 ;;		line 43 in file "mcc_generated_files/i2c_driver.c"
  5360 ;; Parameters:    Size  Location     Type
  5361 ;;		None
  5362 ;; Auto vars:     Size  Location     Type
  5363 ;;		None
  5364 ;; Return value:  Size  Location     Type
  5365 ;;		None               void
  5366 ;; Registers used:
  5367 ;;		wreg, status,2, status,0
  5368 ;; Tracked objects:
  5369 ;;		On entry : 0/0
  5370 ;;		On exit  : 0/0
  5371 ;;		Unchanged: 0/0
  5372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5373 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5374 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5375 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5376 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5377 ;;Total ram usage:        2 bytes
  5378 ;; Hardware stack levels used:    1
  5379 ;; Hardware stack levels required when called:    6
  5380 ;; This function calls:
  5381 ;;		Nothing
  5382 ;; This function is called by:
  5383 ;;		_i2c_masterOperation
  5384 ;; This function uses a non-reentrant model
  5385 ;;
  5386                           
  5387                           
  5388                           ;psect for function _mssp_IRQisEnabled
  5389  07D9                     _mssp_IRQisEnabled:	
  5390                           
  5391                           ;i2c_driver.c: 45: return PIE1bits.SSP1IE;
  5392                           
  5393                           ;incstack = 0
  5394                           ; Regs used in _mssp_IRQisEnabled: [wreg+status,2+status,0]
  5395  07D9  0021               	movlb	1	; select bank1
  5396  07DA  0C10               	rrf	16,w	;volatile
  5397  07DB  0020               	movlb	0	; select bank0
  5398  07DC  00CB               	movwf	??_mssp_IRQisEnabled
  5399  07DD  0CCB               	rrf	??_mssp_IRQisEnabled,f
  5400  07DE  0C4B               	rrf	??_mssp_IRQisEnabled,w
  5401  07DF  3901               	andlw	1
  5402  07E0  00CC               	movwf	??_mssp_IRQisEnabled+1
  5403  07E1  0C4C               	rrf	??_mssp_IRQisEnabled+1,w
  5404  07E2  0008               	return
  5405  07E3                     __end_of_mssp_IRQisEnabled:	
  5406                           
  5407                           	psect	text15
  5408  07A3                     __ptext15:	
  5409 ;; *************** function _i2c_poller *****************
  5410 ;; Defined at:
  5411 ;;		line 230 in file "mcc_generated_files/drivers/i2c_master.c"
  5412 ;; Parameters:    Size  Location     Type
  5413 ;;		None
  5414 ;; Auto vars:     Size  Location     Type
  5415 ;;		None
  5416 ;; Return value:  Size  Location     Type
  5417 ;;                  1    wreg      void 
  5418 ;; Registers used:
  5419 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5420 ;; Tracked objects:
  5421 ;;		On entry : 0/0
  5422 ;;		On exit  : 0/0
  5423 ;;		Unchanged: 0/0
  5424 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5425 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5426 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5427 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5428 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5429 ;;Total ram usage:        0 bytes
  5430 ;; Hardware stack levels used:    1
  5431 ;; Hardware stack levels required when called:   11
  5432 ;; This function calls:
  5433 ;;		_i2c_ISR
  5434 ;;		_mssp_waitForEvent
  5435 ;; This function is called by:
  5436 ;;		_i2c_masterOperation
  5437 ;; This function uses a non-reentrant model
  5438 ;;
  5439                           
  5440                           
  5441                           ;psect for function _i2c_poller
  5442  07A3                     _i2c_poller:	
  5443  07A3                     l4845:	
  5444                           ;i2c_master.c: 232: while(i2c_status.busy)
  5445                           
  5446                           ;incstack = 0
  5447                           ; Regs used in _i2c_poller: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5448                           
  5449  07A3  0020               	movlb	0	; select bank0
  5450  07A4  1C20               	btfss	_i2c_status,0
  5451  07A5  0008               	return
  5452                           
  5453                           ;i2c_master.c: 233: {
  5454                           ;i2c_master.c: 234: mssp_waitForEvent((0));
  5455  07A6  3000               	movlw	0
  5456  07A7  3187  27AE  3187   	fcall	_mssp_waitForEvent
  5457                           
  5458                           ;i2c_master.c: 235: i2c_ISR();
  5459  07AA  3185  2585  3187   	fcall	_i2c_ISR
  5460  07AD  2FA3               	goto	l4845
  5461  07AE                     __end_of_i2c_poller:	
  5462                           
  5463                           	psect	text16
  5464  07AE                     __ptext16:	
  5465 ;; *************** function _mssp_waitForEvent *****************
  5466 ;; Defined at:
  5467 ;;		line 68 in file "mcc_generated_files/i2c_driver.c"
  5468 ;; Parameters:    Size  Location     Type
  5469 ;;  timeout         1    wreg     PTR unsigned int 
  5470 ;;		 -> NULL(0), 
  5471 ;; Auto vars:     Size  Location     Type
  5472 ;;  timeout         1    1[BANK0 ] PTR unsigned int 
  5473 ;;		 -> NULL(0), 
  5474 ;; Return value:  Size  Location     Type
  5475 ;;                  1    wreg      void 
  5476 ;; Registers used:
  5477 ;;		wreg
  5478 ;; Tracked objects:
  5479 ;;		On entry : 0/0
  5480 ;;		On exit  : 0/0
  5481 ;;		Unchanged: 0/0
  5482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5483 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5484 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5485 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5486 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5487 ;;Total ram usage:        1 bytes
  5488 ;; Hardware stack levels used:    1
  5489 ;; Hardware stack levels required when called:    6
  5490 ;; This function calls:
  5491 ;;		Nothing
  5492 ;; This function is called by:
  5493 ;;		_i2c_poller
  5494 ;; This function uses a non-reentrant model
  5495 ;;
  5496                           
  5497                           
  5498                           ;psect for function _mssp_waitForEvent
  5499  07AE                     _mssp_waitForEvent:	
  5500                           
  5501                           ;i2c_driver.c: 73: if(PIR1bits.SSP1IF == 0)
  5502                           
  5503                           ;incstack = 0
  5504                           ; Regs used in _mssp_waitForEvent: [wreg]
  5505  07AE  0020               	movlb	0	; select bank0
  5506  07AF  1990               	btfsc	16,3	;volatile
  5507  07B0  0008               	return
  5508  07B1                     l231:	
  5509                           ;i2c_driver.c: 74: {
  5510                           ;i2c_driver.c: 75: while(1)
  5511                           
  5512                           
  5513                           ;i2c_driver.c: 76: {
  5514                           ;i2c_driver.c: 77: if(PIR1bits.SSP1IF) break;
  5515  07B1  0020               	movlb	0	; select bank0
  5516  07B2  1990               	btfsc	16,3	;volatile
  5517  07B3  0008               	return
  5518                           
  5519                           ;i2c_driver.c: 78: _delay((unsigned long)((100)*(32000000/4000000.0)));
  5520  07B4  30A0               	movlw	160
  5521  07B5                     u3807:	
  5522  07B5  3200               	nop2
  5523  07B6  0B89               	decfsz	9,f
  5524  07B7  2FB5               	goto	u3807
  5525  07B8  2FB1               	goto	l231
  5526  07B9                     __end_of_mssp_waitForEvent:	
  5527                           
  5528                           	psect	text17
  5529  0585                     __ptext17:	
  5530 ;; *************** function _i2c_ISR *****************
  5531 ;; Defined at:
  5532 ;;		line 419 in file "mcc_generated_files/drivers/i2c_master.c"
  5533 ;; Parameters:    Size  Location     Type
  5534 ;;		None
  5535 ;; Auto vars:     Size  Location     Type
  5536 ;;		None
  5537 ;; Return value:  Size  Location     Type
  5538 ;;                  1    wreg      void 
  5539 ;; Registers used:
  5540 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5541 ;; Tracked objects:
  5542 ;;		On entry : 0/0
  5543 ;;		On exit  : 0/0
  5544 ;;		Unchanged: 0/0
  5545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5546 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5547 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5548 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5549 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5550 ;;Total ram usage:        1 bytes
  5551 ;; Hardware stack levels used:    1
  5552 ;; Hardware stack levels required when called:   10
  5553 ;; This function calls:
  5554 ;;		_do_I2C_DO_ACK
  5555 ;;		_do_I2C_DO_ADDRESS_NACK
  5556 ;;		_do_I2C_DO_NACK_RESTART
  5557 ;;		_do_I2C_DO_NACK_STOP
  5558 ;;		_do_I2C_IDLE
  5559 ;;		_do_I2C_RCEN
  5560 ;;		_do_I2C_RESET
  5561 ;;		_do_I2C_RX
  5562 ;;		_do_I2C_SEND_ADR_READ
  5563 ;;		_do_I2C_SEND_ADR_WRITE
  5564 ;;		_do_I2C_SEND_RESTART
  5565 ;;		_do_I2C_SEND_RESTART_READ
  5566 ;;		_do_I2C_SEND_RESTART_WRITE
  5567 ;;		_do_I2C_SEND_STOP
  5568 ;;		_do_I2C_TX
  5569 ;;		_do_I2C_TX_EMPTY
  5570 ;;		_i2c_driver_isNACK
  5571 ;;		_mssp_clearIRQ
  5572 ;; This function is called by:
  5573 ;;		_i2c_open
  5574 ;;		_i2c_poller
  5575 ;;		_INTERRUPT_InterruptManager
  5576 ;; This function uses a non-reentrant model
  5577 ;;
  5578                           
  5579                           
  5580                           ;psect for function _i2c_ISR
  5581  0585                     _i2c_ISR:	
  5582                           
  5583                           ;Skip over the trampoline to the duplicate function for level 1
  5584  0585  1C7E               	btfss	126,0
  5585  0586  2D89               	goto	l4829
  5586  0587  3186  2E29         	ljmp	i1l5069
  5587  0589                     _i2c_ISR$intlevel0:	
  5588  0589                     l4829:	
  5589                           ;incstack = 0
  5590                           ; Regs used in _i2c_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5591                           
  5592                           
  5593                           ;i2c_master.c: 421: mssp_clearIRQ();
  5594  0589  318F  2720  3185   	fcall	_mssp_clearIRQ
  5595                           
  5596                           ;i2c_master.c: 427: if(i2c_status.addressNACKCheck && i2c_driver_isNACK())
  5597  058C  0020               	movlb	0	; select bank0
  5598  058D  1DA0               	btfss	_i2c_status,3
  5599  058E  2D99               	goto	l4837
  5600  058F  3187  2765  3185   	fcall	_i2c_driver_isNACK
  5601  0592  1C03               	btfss	3,0
  5602  0593  2D99               	goto	l4837
  5603                           
  5604                           ;i2c_master.c: 428: {
  5605                           ;i2c_master.c: 429: i2c_status.state = I2C_ADDRESS_NACK;
  5606  0594  300F               	movlw	15
  5607  0595  0020               	movlb	0	; select bank0
  5608  0596  00D8               	movwf	??_i2c_ISR
  5609  0597  0858               	movf	??_i2c_ISR,w
  5610  0598  00A9               	movwf	_i2c_status+9
  5611  0599                     l4837:	
  5612                           
  5613                           ;i2c_master.c: 430: }
  5614                           ;i2c_master.c: 432: i2c_status.state = fsmStateTable[i2c_status.state]();
  5615  0599  0020               	movlb	0	; select bank0
  5616  059A  3529               	lslf	_i2c_status+9,w
  5617  059B  3ECD               	addlw	(low (_fsmStateTable| 0))& (0+255)
  5618  059C  0086               	movwf	6
  5619  059D  0187               	clrf	7
  5620  059E  3F41               	moviw [1]fsr1
  5621  059F  008A               	movwf	10
  5622  05A0  3F40               	moviw [0]fsr1
  5623  05A1  000A               	callw
  5624  05A2  3185               	pagesel	$
  5625  05A3  0020               	movlb	0	; select bank0
  5626  05A4  00D8               	movwf	??_i2c_ISR
  5627  05A5  0858               	movf	??_i2c_ISR,w
  5628  05A6  00A9               	movwf	_i2c_status+9
  5629  05A7  0008               	return
  5630  05A8                     __end_of_i2c_ISR:	
  5631                           
  5632                           	psect	text18
  5633  03BB                     __ptext18:	
  5634 ;; *************** function _do_I2C_RX *****************
  5635 ;; Defined at:
  5636 ;;		line 357 in file "mcc_generated_files/drivers/i2c_master.c"
  5637 ;; Parameters:    Size  Location     Type
  5638 ;;		None
  5639 ;; Auto vars:     Size  Location     Type
  5640 ;;		None
  5641 ;; Return value:  Size  Location     Type
  5642 ;;                  1    wreg      enum E12337
  5643 ;; Registers used:
  5644 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5645 ;; Tracked objects:
  5646 ;;		On entry : 0/0
  5647 ;;		On exit  : 0/0
  5648 ;;		Unchanged: 0/0
  5649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5650 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5651 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5652 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5653 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5654 ;;Total ram usage:        1 bytes
  5655 ;; Hardware stack levels used:    1
  5656 ;; Hardware stack levels required when called:    9
  5657 ;; This function calls:
  5658 ;;		Absolute function
  5659 ;;		_do_I2C_DO_NACK_RESTART
  5660 ;;		_do_I2C_DO_NACK_STOP
  5661 ;;		_i2c_driver_getRXData
  5662 ;;		_i2c_driver_sendACK
  5663 ;;		_i2c_restartWrite
  5664 ;;		_rd1RegCompleteHandler
  5665 ;;		_rd2RegCompleteHandler
  5666 ;;		_rdBlkRegCompleteHandler
  5667 ;;		_returnReset
  5668 ;;		_returnStop
  5669 ;;		_wr1RegCompleteHandler
  5670 ;;		_wr2RegCompleteHandler
  5671 ;; This function is called by:
  5672 ;;		_i2c_ISR
  5673 ;;		i1_i2c_ISR
  5674 ;; This function uses a non-reentrant model
  5675 ;;
  5676                           
  5677                           
  5678                           ;psect for function _do_I2C_RX
  5679  03BB                     _do_I2C_RX:	
  5680                           
  5681                           ;Skip over the trampoline to the duplicate function for level 1
  5682  03BB  1C7E               	btfss	126,0
  5683  03BC  2BBF               	goto	l4783
  5684  03BD  3183  2BFD         	ljmp	i1l4965
  5685  03BF                     _do_I2C_RX$intlevel0:	
  5686  03BF                     l4783:	
  5687                           ;incstack = 0
  5688                           ; Regs used in _do_I2C_RX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5689                           
  5690                           
  5691                           ;i2c_master.c: 359: *i2c_status.data_ptr++ = i2c_driver_getRXData();
  5692  03BF  318F  2732  3183   	fcall	_i2c_driver_getRXData
  5693  03C2  0020               	movlb	0	; select bank0
  5694  03C3  00D5               	movwf	??_do_I2C_RX
  5695  03C4  0822               	movf	low ((_i2c_status| 0+2)),w
  5696  03C5  0086               	movwf	6
  5697  03C6  0187               	clrf	7
  5698  03C7  0855               	movf	??_do_I2C_RX,w
  5699  03C8  0081               	movwf	1
  5700  03C9  3001               	movlw	1
  5701  03CA  00D5               	movwf	??_do_I2C_RX
  5702  03CB  0855               	movf	??_do_I2C_RX,w
  5703  03CC  07A2               	addwf	low ((_i2c_status| 0+2)),f
  5704                           
  5705                           ;i2c_master.c: 360: if(--i2c_status.data_length)
  5706  03CD  3001               	movlw	1
  5707  03CE  02A3               	subwf	_i2c_status+3,f
  5708  03CF  3000               	movlw	0
  5709  03D0  3BA4               	subwfb	_i2c_status+4,f
  5710  03D1  0823               	movf	_i2c_status+3,w
  5711  03D2  0424               	iorwf	_i2c_status+4,w
  5712  03D3  1903               	btfsc	3,2
  5713  03D4  2BD9               	goto	l614
  5714                           
  5715                           ;i2c_master.c: 361: {
  5716                           ;i2c_master.c: 362: i2c_driver_sendACK();
  5717  03D5  318F  275C         	fcall	_i2c_driver_sendACK
  5718                           
  5719                           ;i2c_master.c: 363: return I2C_RCEN;
  5720  03D7  3005               	movlw	5
  5721                           
  5722                           ;i2c_master.c: 364: }
  5723  03D8  0008               	return
  5724  03D9                     l614:	
  5725                           
  5726                           ;i2c_master.c: 365: else
  5727                           ;i2c_master.c: 366: {
  5728                           ;i2c_master.c: 367: i2c_status.bufferFree = 1;
  5729  03D9  1520               	bsf	_i2c_status,2
  5730                           
  5731                           ;i2c_master.c: 368: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
  5732  03DA  2BE1               	goto	l4807
  5733  03DB                     l4797:	
  5734                           ;i2c_master.c: 369: {
  5735                           ;i2c_master.c: 370: case i2c_restart_write:
  5736                           
  5737                           
  5738                           ;i2c_master.c: 371: case i2c_restart_read:
  5739                           ;i2c_master.c: 372: return do_I2C_DO_NACK_RESTART();
  5740  03DB  318F  27F8         	fcall	_do_I2C_DO_NACK_RESTART
  5741  03DD  0008               	return
  5742  03DE                     l4801:	
  5743                           ;i2c_master.c: 374: case i2c_continue:
  5744                           
  5745                           ;i2c_master.c: 373: default:
  5746                           
  5747                           
  5748                           ;i2c_master.c: 375: case i2c_stop:
  5749                           ;i2c_master.c: 376: return do_I2C_DO_NACK_STOP();
  5750  03DE  318F  27F0         	fcall	_do_I2C_DO_NACK_STOP
  5751                           
  5752                           ;i2c_master.c: 377: }
  5753  03E0  0008               	return
  5754  03E1                     l4807:	
  5755  03E1  0020               	movlb	0	; select bank0
  5756  03E2  0837               	movf	low ((_i2c_status| 0+23)),w
  5757  03E3  00D5               	movwf	??_do_I2C_RX
  5758  03E4  0855               	movf	??_do_I2C_RX,w
  5759  03E5  00D4               	movwf	returnStop@p
  5760  03E6  300B               	movlw	11
  5761  03E7  3E20               	addlw	(low (_i2c_status| 0))& (0+255)
  5762  03E8  0086               	movwf	6
  5763  03E9  0187               	clrf	7
  5764  03EA  3F41               	moviw [1]fsr1
  5765  03EB  008A               	movwf	10
  5766  03EC  3F40               	moviw [0]fsr1
  5767  03ED  000A               	callw
  5768  03EE  3183               	pagesel	$
  5769                           
  5770                           ; Switch size 1, requested type "space"
  5771                           ; Number of cases is 4, Range of values is 1 to 4
  5772                           ; switch strategies available:
  5773                           ; Name         Instructions Cycles
  5774                           ; simple_byte           13     7 (average)
  5775                           ; direct_byte           17     9 (fixed)
  5776                           ; jumptable            263     9 (fixed)
  5777                           ;	Chosen strategy is simple_byte
  5778  03EF  3A01               	xorlw	1	; case 1
  5779  03F0  1903               	skipnz
  5780  03F1  2BDE               	goto	l4801
  5781  03F2  3A03               	xorlw	3	; case 2
  5782  03F3  1903               	skipnz
  5783  03F4  2BDB               	goto	l4797
  5784  03F5  3A01               	xorlw	1	; case 3
  5785  03F6  1903               	skipnz
  5786  03F7  2BDB               	goto	l4797
  5787  03F8  3A07               	xorlw	7	; case 4
  5788  03F9  1903               	skipnz
  5789  03FA  2BDE               	goto	l4801
  5790  03FB  2BDE               	goto	l4801
  5791  03FC  0008               	return
  5792  03FD                     __end_of_do_I2C_RX:	
  5793                           
  5794                           	psect	text19
  5795  028F                     __ptext19:	
  5796 ;; *************** function _do_I2C_TX *****************
  5797 ;; Defined at:
  5798 ;;		line 333 in file "mcc_generated_files/drivers/i2c_master.c"
  5799 ;; Parameters:    Size  Location     Type
  5800 ;;		None
  5801 ;; Auto vars:     Size  Location     Type
  5802 ;;		None
  5803 ;; Return value:  Size  Location     Type
  5804 ;;                  1    wreg      enum E12337
  5805 ;; Registers used:
  5806 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5807 ;; Tracked objects:
  5808 ;;		On entry : 0/0
  5809 ;;		On exit  : 0/0
  5810 ;;		Unchanged: 0/0
  5811 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5812 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5813 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5814 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5815 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5816 ;;Total ram usage:        3 bytes
  5817 ;; Hardware stack levels used:    1
  5818 ;; Hardware stack levels required when called:    9
  5819 ;; This function calls:
  5820 ;;		Absolute function
  5821 ;;		_do_I2C_SEND_RESTART_READ
  5822 ;;		_do_I2C_SEND_RESTART_WRITE
  5823 ;;		_do_I2C_SEND_STOP
  5824 ;;		_i2c_driver_TXData
  5825 ;;		_i2c_driver_isNACK
  5826 ;;		_i2c_restartWrite
  5827 ;;		_rd1RegCompleteHandler
  5828 ;;		_rd2RegCompleteHandler
  5829 ;;		_rdBlkRegCompleteHandler
  5830 ;;		_returnReset
  5831 ;;		_returnStop
  5832 ;;		_wr1RegCompleteHandler
  5833 ;;		_wr2RegCompleteHandler
  5834 ;; This function is called by:
  5835 ;;		_i2c_ISR
  5836 ;;		i1_i2c_ISR
  5837 ;; This function uses a non-reentrant model
  5838 ;;
  5839                           
  5840                           
  5841                           ;psect for function _do_I2C_TX
  5842  028F                     _do_I2C_TX:	
  5843                           
  5844                           ;Skip over the trampoline to the duplicate function for level 1
  5845  028F  1C7E               	btfss	126,0
  5846  0290  2A93               	goto	l4753
  5847  0291  3183  2B29         	ljmp	i1l4935
  5848  0293                     _do_I2C_TX$intlevel0:	
  5849  0293                     l4753:	
  5850                           ;incstack = 0
  5851                           ; Regs used in _do_I2C_TX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5852                           
  5853                           
  5854                           ;i2c_master.c: 335: if(i2c_driver_isNACK())
  5855  0293  3187  2765  3182   	fcall	_i2c_driver_isNACK
  5856  0296  1803               	btfsc	3,0
  5857  0297  2AA2               	goto	l4771
  5858  0298  2ABE               	goto	l598
  5859  0299                     l4757:	
  5860                           ;i2c_master.c: 338: {
  5861                           ;i2c_master.c: 339: case i2c_restart_read:
  5862                           
  5863                           ;i2c_master.c: 336: {
  5864                           ;i2c_master.c: 337: switch(i2c_status.callbackTable[i2c_dataNACK](i2c_status.callbackPay
      +                          load[i2c_dataNACK]))
  5865                           
  5866                           
  5867                           ;i2c_master.c: 340: return do_I2C_SEND_RESTART_READ();
  5868  0299  318F  27C8         	fcall	_do_I2C_SEND_RESTART_READ
  5869  029B  0008               	return
  5870  029C                     l4761:	
  5871                           ;i2c_master.c: 341: case i2c_restart_write:
  5872                           
  5873                           
  5874                           ;i2c_master.c: 342: return do_I2C_SEND_RESTART_WRITE();
  5875  029C  318F  27D0         	fcall	_do_I2C_SEND_RESTART_WRITE
  5876  029E  0008               	return
  5877  029F                     l4765:	
  5878                           ;i2c_master.c: 344: case i2c_continue:
  5879                           
  5880                           ;i2c_master.c: 343: default:
  5881                           
  5882                           
  5883                           ;i2c_master.c: 345: case i2c_stop:
  5884                           ;i2c_master.c: 346: return do_I2C_SEND_STOP();
  5885  029F  318F  27E0         	fcall	_do_I2C_SEND_STOP
  5886                           
  5887                           ;i2c_master.c: 347: }
  5888  02A1  0008               	return
  5889  02A2                     l4771:	
  5890  02A2  0020               	movlb	0	; select bank0
  5891  02A3  083A               	movf	low ((_i2c_status| 0+26)),w
  5892  02A4  00D5               	movwf	??_do_I2C_TX
  5893  02A5  0855               	movf	??_do_I2C_TX,w
  5894  02A6  00D4               	movwf	returnStop@p
  5895  02A7  3011               	movlw	17
  5896  02A8  3E20               	addlw	(low (_i2c_status| 0))& (0+255)
  5897  02A9  0086               	movwf	6
  5898  02AA  0187               	clrf	7
  5899  02AB  3F41               	moviw [1]fsr1
  5900  02AC  008A               	movwf	10
  5901  02AD  3F40               	moviw [0]fsr1
  5902  02AE  000A               	callw
  5903  02AF  3182               	pagesel	$
  5904                           
  5905                           ; Switch size 1, requested type "space"
  5906                           ; Number of cases is 4, Range of values is 1 to 4
  5907                           ; switch strategies available:
  5908                           ; Name         Instructions Cycles
  5909                           ; simple_byte           13     7 (average)
  5910                           ; direct_byte           17     9 (fixed)
  5911                           ; jumptable            263     9 (fixed)
  5912                           ;	Chosen strategy is simple_byte
  5913  02B0  3A01               	xorlw	1	; case 1
  5914  02B1  1903               	skipnz
  5915  02B2  2A9F               	goto	l4765
  5916  02B3  3A03               	xorlw	3	; case 2
  5917  02B4  1903               	skipnz
  5918  02B5  2A99               	goto	l4757
  5919  02B6  3A01               	xorlw	1	; case 3
  5920  02B7  1903               	skipnz
  5921  02B8  2A9C               	goto	l4761
  5922  02B9  3A07               	xorlw	7	; case 4
  5923  02BA  1903               	skipnz
  5924  02BB  2A9F               	goto	l4765
  5925  02BC  2A9F               	goto	l4765
  5926                           
  5927                           ;i2c_master.c: 348: }
  5928  02BD  0008               	return
  5929  02BE                     l598:	
  5930                           
  5931                           ;i2c_master.c: 349: else
  5932                           ;i2c_master.c: 350: {
  5933                           ;i2c_master.c: 351: i2c_status.addressNACKCheck = 0;
  5934  02BE  0020               	movlb	0	; select bank0
  5935  02BF  11A0               	bcf	_i2c_status,3
  5936                           
  5937                           ;i2c_master.c: 352: i2c_driver_TXData(*i2c_status.data_ptr++);
  5938  02C0  3002               	movlw	2
  5939  02C1  3E20               	addlw	(low (_i2c_status| 0))& (0+255)
  5940  02C2  0086               	movwf	6
  5941  02C3  0187               	clrf	7
  5942  02C4  3F40               	moviw [0]fsr1
  5943  02C5  0084               	movwf	4
  5944  02C6  0185               	clrf	5
  5945  02C7  0A81               	incf	1,f
  5946  02C8  0800               	movf	0,w
  5947  02C9  318F  2794  3182   	fcall	_i2c_driver_TXData
  5948                           
  5949                           ;i2c_master.c: 353: return (--i2c_status.data_length)?I2C_TX:I2C_TX_EMPTY;
  5950  02CC  3001               	movlw	1
  5951  02CD  0020               	movlb	0	; select bank0
  5952  02CE  02A3               	subwf	_i2c_status+3,f
  5953  02CF  3000               	movlw	0
  5954  02D0  3BA4               	subwfb	_i2c_status+4,f
  5955  02D1  0823               	movf	_i2c_status+3,w
  5956  02D2  0424               	iorwf	_i2c_status+4,w
  5957  02D3  1D03               	btfss	3,2
  5958  02D4  2AD7               	goto	l4779
  5959  02D5  3006               	movlw	6
  5960  02D6  2AD8               	goto	L1
  5961  02D7                     l4779:	
  5962  02D7  3003               	movlw	3
  5963  02D8                     L1:	
  5964  02D8  00D6               	movwf	_do_I2C_TX$887
  5965  02D9  3000               	movlw	0
  5966  02DA  00D7               	movwf	_do_I2C_TX$887+1
  5967  02DB  0856               	movf	_do_I2C_TX$887,w
  5968  02DC  0008               	return
  5969  02DD                     __end_of_do_I2C_TX:	
  5970                           
  5971                           	psect	text20
  5972  04C8                     __ptext20:	
  5973 ;; *************** function _do_I2C_DO_ADDRESS_NACK *****************
  5974 ;; Defined at:
  5975 ;;		line 319 in file "mcc_generated_files/drivers/i2c_master.c"
  5976 ;; Parameters:    Size  Location     Type
  5977 ;;		None
  5978 ;; Auto vars:     Size  Location     Type
  5979 ;;		None
  5980 ;; Return value:  Size  Location     Type
  5981 ;;                  1    wreg      enum E12337
  5982 ;; Registers used:
  5983 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5984 ;; Tracked objects:
  5985 ;;		On entry : 0/0
  5986 ;;		On exit  : 0/0
  5987 ;;		Unchanged: 0/0
  5988 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5989 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5990 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5991 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5992 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5993 ;;Total ram usage:        1 bytes
  5994 ;; Hardware stack levels used:    1
  5995 ;; Hardware stack levels required when called:    9
  5996 ;; This function calls:
  5997 ;;		Absolute function
  5998 ;;		_do_I2C_SEND_RESTART
  5999 ;;		_do_I2C_SEND_STOP
  6000 ;;		_i2c_restartWrite
  6001 ;;		_rd1RegCompleteHandler
  6002 ;;		_rd2RegCompleteHandler
  6003 ;;		_rdBlkRegCompleteHandler
  6004 ;;		_returnReset
  6005 ;;		_returnStop
  6006 ;;		_wr1RegCompleteHandler
  6007 ;;		_wr2RegCompleteHandler
  6008 ;; This function is called by:
  6009 ;;		_i2c_ISR
  6010 ;;		i1_i2c_ISR
  6011 ;; This function uses a non-reentrant model
  6012 ;;
  6013                           
  6014                           
  6015                           ;psect for function _do_I2C_DO_ADDRESS_NACK
  6016  04C8                     _do_I2C_DO_ADDRESS_NACK:	
  6017                           
  6018                           ;Skip over the trampoline to the duplicate function for level 1
  6019  04C8  1C7E               	btfss	126,0
  6020  04C9  2CCC               	goto	l4737
  6021  04CA  3185  2DA8         	ljmp	i1l4919
  6022  04CC                     _do_I2C_DO_ADDRESS_NACK$intlevel0:	
  6023  04CC                     l4737:	
  6024                           ;incstack = 0
  6025                           ; Regs used in _do_I2C_DO_ADDRESS_NACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6026                           
  6027                           
  6028                           ;i2c_master.c: 321: i2c_status.addressNACKCheck = 0;
  6029  04CC  0020               	movlb	0	; select bank0
  6030  04CD  11A0               	bcf	_i2c_status,3
  6031                           
  6032                           ;i2c_master.c: 322: i2c_status.error = I2C_FAIL;
  6033  04CE  3002               	movlw	2
  6034  04CF  00D5               	movwf	??_do_I2C_DO_ADDRESS_NACK
  6035  04D0  0855               	movf	??_do_I2C_DO_ADDRESS_NACK,w
  6036  04D1  00AA               	movwf	_i2c_status+10
  6037                           
  6038                           ;i2c_master.c: 323: switch(i2c_status.callbackTable[i2c_addressNACK](i2c_status.callback
      +                          Payload[i2c_addressNACK]))
  6039  04D2  2CD9               	goto	l4751
  6040  04D3                     l4741:	
  6041                           ;i2c_master.c: 324: {
  6042                           ;i2c_master.c: 325: case i2c_restart_read:
  6043                           
  6044                           
  6045                           ;i2c_master.c: 326: case i2c_restart_write:
  6046                           ;i2c_master.c: 327: return do_I2C_SEND_RESTART();
  6047  04D3  318F  27D8         	fcall	_do_I2C_SEND_RESTART
  6048  04D5  0008               	return
  6049  04D6                     l4745:	
  6050                           ;i2c_master.c: 328: default:
  6051                           
  6052                           
  6053                           ;i2c_master.c: 329: return do_I2C_SEND_STOP();
  6054  04D6  318F  27E0         	fcall	_do_I2C_SEND_STOP
  6055                           
  6056                           ;i2c_master.c: 330: }
  6057  04D8  0008               	return
  6058  04D9                     l4751:	
  6059  04D9  0020               	movlb	0	; select bank0
  6060  04DA  0839               	movf	low ((_i2c_status| 0+25)),w
  6061  04DB  00D5               	movwf	??_do_I2C_DO_ADDRESS_NACK
  6062  04DC  0855               	movf	??_do_I2C_DO_ADDRESS_NACK,w
  6063  04DD  00D4               	movwf	returnStop@p
  6064  04DE  300F               	movlw	15
  6065  04DF  3E20               	addlw	(low (_i2c_status| 0))& (0+255)
  6066  04E0  0086               	movwf	6
  6067  04E1  0187               	clrf	7
  6068  04E2  3F41               	moviw [1]fsr1
  6069  04E3  008A               	movwf	10
  6070  04E4  3F40               	moviw [0]fsr1
  6071  04E5  000A               	callw
  6072  04E6  3184               	pagesel	$
  6073                           
  6074                           ; Switch size 1, requested type "space"
  6075                           ; Number of cases is 2, Range of values is 2 to 3
  6076                           ; switch strategies available:
  6077                           ; Name         Instructions Cycles
  6078                           ; simple_byte            7     4 (average)
  6079                           ; direct_byte           13     9 (fixed)
  6080                           ; jumptable            263     9 (fixed)
  6081                           ;	Chosen strategy is simple_byte
  6082  04E7  3A02               	xorlw	2	; case 2
  6083  04E8  1903               	skipnz
  6084  04E9  2CD3               	goto	l4741
  6085  04EA  3A01               	xorlw	1	; case 3
  6086  04EB  1903               	skipnz
  6087  04EC  2CD3               	goto	l4741
  6088  04ED  2CD6               	goto	l4745
  6089  04EE  0008               	return
  6090  04EF                     __end_of_do_I2C_DO_ADDRESS_NACK:	
  6091                           
  6092                           	psect	text21
  6093  0FF8                     __ptext21:	
  6094 ;; *************** function _do_I2C_DO_NACK_RESTART *****************
  6095 ;; Defined at:
  6096 ;;		line 311 in file "mcc_generated_files/drivers/i2c_master.c"
  6097 ;; Parameters:    Size  Location     Type
  6098 ;;		None
  6099 ;; Auto vars:     Size  Location     Type
  6100 ;;		None
  6101 ;; Return value:  Size  Location     Type
  6102 ;;                  1    wreg      enum E12337
  6103 ;; Registers used:
  6104 ;;		wreg, status,2, status,0, pclath, cstack
  6105 ;; Tracked objects:
  6106 ;;		On entry : 0/0
  6107 ;;		On exit  : 0/0
  6108 ;;		Unchanged: 0/0
  6109 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6110 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6111 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6112 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6113 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6114 ;;Total ram usage:        0 bytes
  6115 ;; Hardware stack levels used:    1
  6116 ;; Hardware stack levels required when called:    7
  6117 ;; This function calls:
  6118 ;;		_i2c_driver_sendNACK
  6119 ;; This function is called by:
  6120 ;;		_do_I2C_RX
  6121 ;;		_i2c_ISR
  6122 ;;		i1_i2c_ISR
  6123 ;; This function uses a non-reentrant model
  6124 ;;
  6125                           
  6126                           
  6127                           ;psect for function _do_I2C_DO_NACK_RESTART
  6128  0FF8                     _do_I2C_DO_NACK_RESTART:	
  6129                           
  6130                           ;Skip over the trampoline to the duplicate function for level 1
  6131  0FF8  1C7E               	btfss	126,0
  6132  0FF9  2FFC               	goto	l2313
  6133  0FFA  318F  2F58         	ljmp	i1l2699
  6134  0FFC                     _do_I2C_DO_NACK_RESTART$intlevel0:	
  6135  0FFC                     l2313:	
  6136                           ;incstack = 0
  6137                           ; Regs used in _do_I2C_DO_NACK_RESTART: [wreg+status,2+status,0+pclath+cstack]
  6138                           
  6139                           
  6140                           ;i2c_master.c: 313: i2c_driver_sendNACK();
  6141  0FFC  318F  2760         	fcall	_i2c_driver_sendNACK
  6142                           
  6143                           ;i2c_master.c: 314: return I2C_SEND_RESTART;
  6144  0FFE  3009               	movlw	9
  6145  0FFF  0008               	return
  6146  1000                     __end_of_do_I2C_DO_NACK_RESTART:	
  6147                           
  6148                           	psect	text22
  6149  0FF0                     __ptext22:	
  6150 ;; *************** function _do_I2C_DO_NACK_STOP *****************
  6151 ;; Defined at:
  6152 ;;		line 305 in file "mcc_generated_files/drivers/i2c_master.c"
  6153 ;; Parameters:    Size  Location     Type
  6154 ;;		None
  6155 ;; Auto vars:     Size  Location     Type
  6156 ;;		None
  6157 ;; Return value:  Size  Location     Type
  6158 ;;                  1    wreg      enum E12337
  6159 ;; Registers used:
  6160 ;;		wreg, status,2, status,0, pclath, cstack
  6161 ;; Tracked objects:
  6162 ;;		On entry : 0/0
  6163 ;;		On exit  : 0/0
  6164 ;;		Unchanged: 0/0
  6165 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6166 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6167 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6168 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6169 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6170 ;;Total ram usage:        0 bytes
  6171 ;; Hardware stack levels used:    1
  6172 ;; Hardware stack levels required when called:    7
  6173 ;; This function calls:
  6174 ;;		_i2c_driver_sendNACK
  6175 ;; This function is called by:
  6176 ;;		_do_I2C_RX
  6177 ;;		_i2c_ISR
  6178 ;;		i1_i2c_ISR
  6179 ;; This function uses a non-reentrant model
  6180 ;;
  6181                           
  6182                           
  6183                           ;psect for function _do_I2C_DO_NACK_STOP
  6184  0FF0                     _do_I2C_DO_NACK_STOP:	
  6185                           
  6186                           ;Skip over the trampoline to the duplicate function for level 1
  6187  0FF0  1C7E               	btfss	126,0
  6188  0FF1  2FF4               	goto	l2307
  6189  0FF2  318F  2F54         	ljmp	i1l2693
  6190  0FF4                     _do_I2C_DO_NACK_STOP$intlevel0:	
  6191  0FF4                     l2307:	
  6192                           ;incstack = 0
  6193                           ; Regs used in _do_I2C_DO_NACK_STOP: [wreg+status,2+status,0+pclath+cstack]
  6194                           
  6195                           
  6196                           ;i2c_master.c: 307: i2c_driver_sendNACK();
  6197  0FF4  318F  2760         	fcall	_i2c_driver_sendNACK
  6198                           
  6199                           ;i2c_master.c: 308: return I2C_SEND_STOP;
  6200  0FF6  300A               	movlw	10
  6201  0FF7  0008               	return
  6202  0FF8                     __end_of_do_I2C_DO_NACK_STOP:	
  6203                           
  6204                           	psect	text23
  6205  0FE8                     __ptext23:	
  6206 ;; *************** function _do_I2C_DO_ACK *****************
  6207 ;; Defined at:
  6208 ;;		line 299 in file "mcc_generated_files/drivers/i2c_master.c"
  6209 ;; Parameters:    Size  Location     Type
  6210 ;;		None
  6211 ;; Auto vars:     Size  Location     Type
  6212 ;;		None
  6213 ;; Return value:  Size  Location     Type
  6214 ;;                  1    wreg      enum E12337
  6215 ;; Registers used:
  6216 ;;		wreg, status,2, status,0, pclath, cstack
  6217 ;; Tracked objects:
  6218 ;;		On entry : 0/0
  6219 ;;		On exit  : 0/0
  6220 ;;		Unchanged: 0/0
  6221 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6222 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6223 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6224 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6225 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6226 ;;Total ram usage:        0 bytes
  6227 ;; Hardware stack levels used:    1
  6228 ;; Hardware stack levels required when called:    7
  6229 ;; This function calls:
  6230 ;;		_i2c_driver_sendACK
  6231 ;; This function is called by:
  6232 ;;		_i2c_ISR
  6233 ;;		i1_i2c_ISR
  6234 ;; This function uses a non-reentrant model
  6235 ;;
  6236                           
  6237                           
  6238                           ;psect for function _do_I2C_DO_ACK
  6239  0FE8                     _do_I2C_DO_ACK:	
  6240                           
  6241                           ;Skip over the trampoline to the duplicate function for level 1
  6242  0FE8  1C7E               	btfss	126,0
  6243  0FE9  2FEC               	goto	l2375
  6244  0FEA  318F  2F50         	ljmp	i1l2859
  6245  0FEC                     _do_I2C_DO_ACK$intlevel0:	
  6246  0FEC                     l2375:	
  6247                           ;incstack = 0
  6248                           ; Regs used in _do_I2C_DO_ACK: [wreg+status,2+status,0+pclath+cstack]
  6249                           
  6250                           
  6251                           ;i2c_master.c: 301: i2c_driver_sendACK();
  6252  0FEC  318F  275C         	fcall	_i2c_driver_sendACK
  6253                           
  6254                           ;i2c_master.c: 302: return I2C_RCEN;
  6255  0FEE  3005               	movlw	5
  6256  0FEF  0008               	return
  6257  0FF0                     __end_of_do_I2C_DO_ACK:	
  6258                           
  6259                           	psect	text24
  6260  07E3                     __ptext24:	
  6261 ;; *************** function _do_I2C_RCEN *****************
  6262 ;; Defined at:
  6263 ;;		line 292 in file "mcc_generated_files/drivers/i2c_master.c"
  6264 ;; Parameters:    Size  Location     Type
  6265 ;;		None
  6266 ;; Auto vars:     Size  Location     Type
  6267 ;;		None
  6268 ;; Return value:  Size  Location     Type
  6269 ;;                  1    wreg      enum E12337
  6270 ;; Registers used:
  6271 ;;		wreg, status,2, status,0, pclath, cstack
  6272 ;; Tracked objects:
  6273 ;;		On entry : 0/0
  6274 ;;		On exit  : 0/0
  6275 ;;		Unchanged: 0/0
  6276 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6277 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6278 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6279 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6280 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6281 ;;Total ram usage:        0 bytes
  6282 ;; Hardware stack levels used:    1
  6283 ;; Hardware stack levels required when called:    7
  6284 ;; This function calls:
  6285 ;;		_i2c_driver_startRX
  6286 ;; This function is called by:
  6287 ;;		_i2c_ISR
  6288 ;;		i1_i2c_ISR
  6289 ;; This function uses a non-reentrant model
  6290 ;;
  6291                           
  6292                           
  6293                           ;psect for function _do_I2C_RCEN
  6294  07E3                     _do_I2C_RCEN:	
  6295                           
  6296                           ;Skip over the trampoline to the duplicate function for level 1
  6297  07E3  1C7E               	btfss	126,0
  6298  07E4  2FE7               	goto	l2367
  6299  07E5  318F  2F76         	ljmp	i1l2851
  6300  07E7                     _do_I2C_RCEN$intlevel0:	
  6301  07E7                     l2367:	
  6302                           ;incstack = 0
  6303                           ; Regs used in _do_I2C_RCEN: [wreg+status,2+status,0+pclath+cstack]
  6304                           
  6305                           
  6306                           ;i2c_master.c: 294: i2c_status.addressNACKCheck = 0;
  6307  07E7  0020               	movlb	0	; select bank0
  6308  07E8  11A0               	bcf	_i2c_status,3
  6309                           
  6310                           ;i2c_master.c: 295: i2c_driver_startRX();
  6311  07E9  318F  272F         	fcall	_i2c_driver_startRX
  6312                           
  6313                           ;i2c_master.c: 296: return I2C_RX;
  6314  07EB  3004               	movlw	4
  6315  07EC  0008               	return
  6316  07ED                     __end_of_do_I2C_RCEN:	
  6317                           
  6318                           	psect	text25
  6319  07B9                     __ptext25:	
  6320 ;; *************** function _do_I2C_SEND_ADR_WRITE *****************
  6321 ;; Defined at:
  6322 ;;		line 285 in file "mcc_generated_files/drivers/i2c_master.c"
  6323 ;; Parameters:    Size  Location     Type
  6324 ;;		None
  6325 ;; Auto vars:     Size  Location     Type
  6326 ;;		None
  6327 ;; Return value:  Size  Location     Type
  6328 ;;                  1    wreg      enum E12337
  6329 ;; Registers used:
  6330 ;;		wreg, status,2, status,0, pclath, cstack
  6331 ;; Tracked objects:
  6332 ;;		On entry : 0/0
  6333 ;;		On exit  : 0/0
  6334 ;;		Unchanged: 0/0
  6335 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6336 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6337 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6338 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6339 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6340 ;;Total ram usage:        0 bytes
  6341 ;; Hardware stack levels used:    1
  6342 ;; Hardware stack levels required when called:    7
  6343 ;; This function calls:
  6344 ;;		_i2c_driver_TXData
  6345 ;; This function is called by:
  6346 ;;		_i2c_ISR
  6347 ;;		i1_i2c_ISR
  6348 ;; This function uses a non-reentrant model
  6349 ;;
  6350                           
  6351                           
  6352                           ;psect for function _do_I2C_SEND_ADR_WRITE
  6353  07B9                     _do_I2C_SEND_ADR_WRITE:	
  6354                           
  6355                           ;Skip over the trampoline to the duplicate function for level 1
  6356  07B9  1C7E               	btfss	126,0
  6357  07BA  2FBD               	goto	l2359
  6358  07BB  318F  2FB9         	ljmp	i1l2843
  6359  07BD                     _do_I2C_SEND_ADR_WRITE$intlevel0:	
  6360  07BD                     l2359:	
  6361                           ;incstack = 0
  6362                           ; Regs used in _do_I2C_SEND_ADR_WRITE: [wreg+status,2+status,0+pclath+cstack]
  6363                           
  6364                           
  6365                           ;i2c_master.c: 287: i2c_status.addressNACKCheck = 1;
  6366  07BD  0020               	movlb	0	; select bank0
  6367  07BE  15A0               	bsf	_i2c_status,3
  6368                           
  6369                           ;i2c_master.c: 288: i2c_driver_TXData(i2c_status.address << 1);
  6370  07BF  3521               	lslf	_i2c_status+1,w
  6371  07C0  318F  2794         	fcall	_i2c_driver_TXData
  6372                           
  6373                           ;i2c_master.c: 289: return I2C_TX;
  6374  07C2  3003               	movlw	3
  6375  07C3  0008               	return
  6376  07C4                     __end_of_do_I2C_SEND_ADR_WRITE:	
  6377                           
  6378                           	psect	text26
  6379  077F                     __ptext26:	
  6380 ;; *************** function _do_I2C_SEND_ADR_READ *****************
  6381 ;; Defined at:
  6382 ;;		line 278 in file "mcc_generated_files/drivers/i2c_master.c"
  6383 ;; Parameters:    Size  Location     Type
  6384 ;;		None
  6385 ;; Auto vars:     Size  Location     Type
  6386 ;;		None
  6387 ;; Return value:  Size  Location     Type
  6388 ;;                  1    wreg      enum E12337
  6389 ;; Registers used:
  6390 ;;		wreg, status,2, status,0, pclath, cstack
  6391 ;; Tracked objects:
  6392 ;;		On entry : 0/0
  6393 ;;		On exit  : 0/0
  6394 ;;		Unchanged: 0/0
  6395 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6396 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6397 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6398 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6399 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6400 ;;Total ram usage:        0 bytes
  6401 ;; Hardware stack levels used:    1
  6402 ;; Hardware stack levels required when called:    7
  6403 ;; This function calls:
  6404 ;;		_i2c_driver_TXData
  6405 ;; This function is called by:
  6406 ;;		_i2c_ISR
  6407 ;;		i1_i2c_ISR
  6408 ;; This function uses a non-reentrant model
  6409 ;;
  6410                           
  6411                           
  6412                           ;psect for function _do_I2C_SEND_ADR_READ
  6413  077F                     _do_I2C_SEND_ADR_READ:	
  6414                           
  6415                           ;Skip over the trampoline to the duplicate function for level 1
  6416  077F  1C7E               	btfss	126,0
  6417  0780  2F83               	goto	l2351
  6418  0781  318F  2FC0         	ljmp	i1l2835
  6419  0783                     _do_I2C_SEND_ADR_READ$intlevel0:	
  6420  0783                     l2351:	
  6421                           ;incstack = 0
  6422                           ; Regs used in _do_I2C_SEND_ADR_READ: [wreg+status,2+status,0+pclath+cstack]
  6423                           
  6424                           
  6425                           ;i2c_master.c: 280: i2c_status.addressNACKCheck = 1;
  6426  0783  0020               	movlb	0	; select bank0
  6427  0784  15A0               	bsf	_i2c_status,3
  6428                           
  6429                           ;i2c_master.c: 281: i2c_driver_TXData(i2c_status.address << 1 | 1);
  6430  0785  1403               	setc
  6431  0786  0D21               	rlf	_i2c_status+1,w
  6432  0787  318F  2794         	fcall	_i2c_driver_TXData
  6433                           
  6434                           ;i2c_master.c: 282: return I2C_RCEN;
  6435  0789  3005               	movlw	5
  6436  078A  0008               	return
  6437  078B                     __end_of_do_I2C_SEND_ADR_READ:	
  6438                           
  6439                           	psect	text27
  6440  0FE0                     __ptext27:	
  6441 ;; *************** function _do_I2C_SEND_STOP *****************
  6442 ;; Defined at:
  6443 ;;		line 272 in file "mcc_generated_files/drivers/i2c_master.c"
  6444 ;; Parameters:    Size  Location     Type
  6445 ;;		None
  6446 ;; Auto vars:     Size  Location     Type
  6447 ;;		None
  6448 ;; Return value:  Size  Location     Type
  6449 ;;                  1    wreg      enum E12337
  6450 ;; Registers used:
  6451 ;;		wreg, status,2, status,0, pclath, cstack
  6452 ;; Tracked objects:
  6453 ;;		On entry : 0/0
  6454 ;;		On exit  : 0/0
  6455 ;;		Unchanged: 0/0
  6456 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6457 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6458 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6459 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6460 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6461 ;;Total ram usage:        0 bytes
  6462 ;; Hardware stack levels used:    1
  6463 ;; Hardware stack levels required when called:    7
  6464 ;; This function calls:
  6465 ;;		_i2c_driver_stop
  6466 ;; This function is called by:
  6467 ;;		_do_I2C_DO_ADDRESS_NACK
  6468 ;;		_do_I2C_TX
  6469 ;;		_do_I2C_TX_EMPTY
  6470 ;;		_i2c_ISR
  6471 ;;		i1_i2c_ISR
  6472 ;; This function uses a non-reentrant model
  6473 ;;
  6474                           
  6475                           
  6476                           ;psect for function _do_I2C_SEND_STOP
  6477  0FE0                     _do_I2C_SEND_STOP:	
  6478                           
  6479                           ;Skip over the trampoline to the duplicate function for level 1
  6480  0FE0  1C7E               	btfss	126,0
  6481  0FE1  2FE4               	goto	l2301
  6482  0FE2  318F  2F4C         	ljmp	i1l2687
  6483  0FE4                     _do_I2C_SEND_STOP$intlevel0:	
  6484  0FE4                     l2301:	
  6485                           ;incstack = 0
  6486                           ; Regs used in _do_I2C_SEND_STOP: [wreg+status,2+status,0+pclath+cstack]
  6487                           
  6488                           
  6489                           ;i2c_master.c: 274: i2c_driver_stop();
  6490  0FE4  318F  272C         	fcall	_i2c_driver_stop
  6491                           
  6492                           ;i2c_master.c: 275: return I2C_IDLE;
  6493  0FE6  3000               	movlw	0
  6494  0FE7  0008               	return
  6495  0FE8                     __end_of_do_I2C_SEND_STOP:	
  6496                           
  6497                           	psect	text28
  6498  0FD8                     __ptext28:	
  6499 ;; *************** function _do_I2C_SEND_RESTART *****************
  6500 ;; Defined at:
  6501 ;;		line 266 in file "mcc_generated_files/drivers/i2c_master.c"
  6502 ;; Parameters:    Size  Location     Type
  6503 ;;		None
  6504 ;; Auto vars:     Size  Location     Type
  6505 ;;		None
  6506 ;; Return value:  Size  Location     Type
  6507 ;;                  1    wreg      enum E12337
  6508 ;; Registers used:
  6509 ;;		wreg, status,2, status,0, pclath, cstack
  6510 ;; Tracked objects:
  6511 ;;		On entry : 0/0
  6512 ;;		On exit  : 0/0
  6513 ;;		Unchanged: 0/0
  6514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6515 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6516 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6517 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6518 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6519 ;;Total ram usage:        0 bytes
  6520 ;; Hardware stack levels used:    1
  6521 ;; Hardware stack levels required when called:    7
  6522 ;; This function calls:
  6523 ;;		_i2c_driver_restart
  6524 ;; This function is called by:
  6525 ;;		_do_I2C_DO_ADDRESS_NACK
  6526 ;;		_do_I2C_TX_EMPTY
  6527 ;;		_i2c_ISR
  6528 ;;		i1_i2c_ISR
  6529 ;; This function uses a non-reentrant model
  6530 ;;
  6531                           
  6532                           
  6533                           ;psect for function _do_I2C_SEND_RESTART
  6534  0FD8                     _do_I2C_SEND_RESTART:	
  6535                           
  6536                           ;Skip over the trampoline to the duplicate function for level 1
  6537  0FD8  1C7E               	btfss	126,0
  6538  0FD9  2FDC               	goto	l2295
  6539  0FDA  318F  2F48         	ljmp	i1l2681
  6540  0FDC                     _do_I2C_SEND_RESTART$intlevel0:	
  6541  0FDC                     l2295:	
  6542                           ;incstack = 0
  6543                           ; Regs used in _do_I2C_SEND_RESTART: [wreg+status,2+status,0+pclath+cstack]
  6544                           
  6545                           
  6546                           ;i2c_master.c: 268: i2c_driver_restart();
  6547  0FDC  318F  2729         	fcall	_i2c_driver_restart
  6548                           
  6549                           ;i2c_master.c: 269: return I2C_SEND_ADR_READ;
  6550  0FDE  3001               	movlw	1
  6551  0FDF  0008               	return
  6552  0FE0                     __end_of_do_I2C_SEND_RESTART:	
  6553                           
  6554                           	psect	text29
  6555  0FD0                     __ptext29:	
  6556 ;; *************** function _do_I2C_SEND_RESTART_WRITE *****************
  6557 ;; Defined at:
  6558 ;;		line 260 in file "mcc_generated_files/drivers/i2c_master.c"
  6559 ;; Parameters:    Size  Location     Type
  6560 ;;		None
  6561 ;; Auto vars:     Size  Location     Type
  6562 ;;		None
  6563 ;; Return value:  Size  Location     Type
  6564 ;;                  1    wreg      enum E12337
  6565 ;; Registers used:
  6566 ;;		wreg, status,2, status,0, pclath, cstack
  6567 ;; Tracked objects:
  6568 ;;		On entry : 0/0
  6569 ;;		On exit  : 0/0
  6570 ;;		Unchanged: 0/0
  6571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6572 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6573 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6574 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6575 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6576 ;;Total ram usage:        0 bytes
  6577 ;; Hardware stack levels used:    1
  6578 ;; Hardware stack levels required when called:    7
  6579 ;; This function calls:
  6580 ;;		_i2c_driver_restart
  6581 ;; This function is called by:
  6582 ;;		_do_I2C_TX
  6583 ;;		_i2c_ISR
  6584 ;;		i1_i2c_ISR
  6585 ;; This function uses a non-reentrant model
  6586 ;;
  6587                           
  6588                           
  6589                           ;psect for function _do_I2C_SEND_RESTART_WRITE
  6590  0FD0                     _do_I2C_SEND_RESTART_WRITE:	
  6591                           
  6592                           ;Skip over the trampoline to the duplicate function for level 1
  6593  0FD0  1C7E               	btfss	126,0
  6594  0FD1  2FD4               	goto	l2289
  6595  0FD2  318F  2F44         	ljmp	i1l2675
  6596  0FD4                     _do_I2C_SEND_RESTART_WRITE$intlevel0:	
  6597  0FD4                     l2289:	
  6598                           ;incstack = 0
  6599                           ; Regs used in _do_I2C_SEND_RESTART_WRITE: [wreg+status,2+status,0+pclath+cstack]
  6600                           
  6601                           
  6602                           ;i2c_master.c: 262: i2c_driver_restart();
  6603  0FD4  318F  2729         	fcall	_i2c_driver_restart
  6604                           
  6605                           ;i2c_master.c: 263: return I2C_SEND_ADR_WRITE;
  6606  0FD6  3002               	movlw	2
  6607  0FD7  0008               	return
  6608  0FD8                     __end_of_do_I2C_SEND_RESTART_WRITE:	
  6609                           
  6610                           	psect	text30
  6611  0FC8                     __ptext30:	
  6612 ;; *************** function _do_I2C_SEND_RESTART_READ *****************
  6613 ;; Defined at:
  6614 ;;		line 254 in file "mcc_generated_files/drivers/i2c_master.c"
  6615 ;; Parameters:    Size  Location     Type
  6616 ;;		None
  6617 ;; Auto vars:     Size  Location     Type
  6618 ;;		None
  6619 ;; Return value:  Size  Location     Type
  6620 ;;                  1    wreg      enum E12337
  6621 ;; Registers used:
  6622 ;;		wreg, status,2, status,0, pclath, cstack
  6623 ;; Tracked objects:
  6624 ;;		On entry : 0/0
  6625 ;;		On exit  : 0/0
  6626 ;;		Unchanged: 0/0
  6627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6628 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6629 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6630 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6631 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6632 ;;Total ram usage:        0 bytes
  6633 ;; Hardware stack levels used:    1
  6634 ;; Hardware stack levels required when called:    7
  6635 ;; This function calls:
  6636 ;;		_i2c_driver_restart
  6637 ;; This function is called by:
  6638 ;;		_do_I2C_TX
  6639 ;;		_i2c_ISR
  6640 ;;		i1_i2c_ISR
  6641 ;; This function uses a non-reentrant model
  6642 ;;
  6643                           
  6644                           
  6645                           ;psect for function _do_I2C_SEND_RESTART_READ
  6646  0FC8                     _do_I2C_SEND_RESTART_READ:	
  6647                           
  6648                           ;Skip over the trampoline to the duplicate function for level 1
  6649  0FC8  1C7E               	btfss	126,0
  6650  0FC9  2FCC               	goto	l2283
  6651  0FCA  318F  2F40         	ljmp	i1l2669
  6652  0FCC                     _do_I2C_SEND_RESTART_READ$intlevel0:	
  6653  0FCC                     l2283:	
  6654                           ;incstack = 0
  6655                           ; Regs used in _do_I2C_SEND_RESTART_READ: [wreg+status,2+status,0+pclath+cstack]
  6656                           
  6657                           
  6658                           ;i2c_master.c: 256: i2c_driver_restart();
  6659  0FCC  318F  2729         	fcall	_i2c_driver_restart
  6660                           
  6661                           ;i2c_master.c: 257: return I2C_SEND_ADR_READ;
  6662  0FCE  3001               	movlw	1
  6663  0FCF  0008               	return
  6664  0FD0                     __end_of_do_I2C_SEND_RESTART_READ:	
  6665                           
  6666                           	psect	text31
  6667  07F7                     __ptext31:	
  6668 ;; *************** function _do_I2C_IDLE *****************
  6669 ;; Defined at:
  6670 ;;		line 247 in file "mcc_generated_files/drivers/i2c_master.c"
  6671 ;; Parameters:    Size  Location     Type
  6672 ;;		None
  6673 ;; Auto vars:     Size  Location     Type
  6674 ;;		None
  6675 ;; Return value:  Size  Location     Type
  6676 ;;                  1    wreg      enum E12337
  6677 ;; Registers used:
  6678 ;;		wreg, status,2
  6679 ;; Tracked objects:
  6680 ;;		On entry : 0/0
  6681 ;;		On exit  : 0/0
  6682 ;;		Unchanged: 0/0
  6683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6684 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6685 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6686 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6687 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6688 ;;Total ram usage:        0 bytes
  6689 ;; Hardware stack levels used:    1
  6690 ;; Hardware stack levels required when called:    6
  6691 ;; This function calls:
  6692 ;;		Nothing
  6693 ;; This function is called by:
  6694 ;;		_i2c_ISR
  6695 ;;		i1_i2c_ISR
  6696 ;; This function uses a non-reentrant model
  6697 ;;
  6698                           
  6699                           
  6700                           ;psect for function _do_I2C_IDLE
  6701  07F7                     _do_I2C_IDLE:	
  6702                           
  6703                           ;Skip over the trampoline to the duplicate function for level 1
  6704  07F7  1C7E               	btfss	126,0
  6705  07F8  2FFB               	goto	l2343
  6706  07F9  318F  2F71         	ljmp	i1l2827
  6707  07FB                     _do_I2C_IDLE$intlevel0:	
  6708  07FB                     l2343:	
  6709                           ;incstack = 0
  6710                           ; Regs used in _do_I2C_IDLE: [wreg+status,2]
  6711                           
  6712                           
  6713                           ;i2c_master.c: 249: i2c_status.busy = 0;
  6714  07FB  0020               	movlb	0	; select bank0
  6715  07FC  1020               	bcf	_i2c_status,0
  6716                           
  6717                           ;i2c_master.c: 250: i2c_status.error = I2C_NOERR;
  6718  07FD  01AA               	clrf	_i2c_status+10
  6719                           
  6720                           ;i2c_master.c: 251: return I2C_RESET;
  6721  07FE  300E               	movlw	14
  6722  07FF  0008               	return
  6723  0800                     __end_of_do_I2C_IDLE:	
  6724                           
  6725                           	psect	text32
  6726  07C4                     __ptext32:	
  6727 ;; *************** function _do_I2C_RESET *****************
  6728 ;; Defined at:
  6729 ;;		line 239 in file "mcc_generated_files/drivers/i2c_master.c"
  6730 ;; Parameters:    Size  Location     Type
  6731 ;;		None
  6732 ;; Auto vars:     Size  Location     Type
  6733 ;;		None
  6734 ;; Return value:  Size  Location     Type
  6735 ;;                  1    wreg      enum E12337
  6736 ;; Registers used:
  6737 ;;		wreg, status,2, status,0, pclath, cstack
  6738 ;; Tracked objects:
  6739 ;;		On entry : 0/0
  6740 ;;		On exit  : 0/0
  6741 ;;		Unchanged: 0/0
  6742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6743 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6744 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6745 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6746 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6747 ;;Total ram usage:        0 bytes
  6748 ;; Hardware stack levels used:    1
  6749 ;; Hardware stack levels required when called:    7
  6750 ;; This function calls:
  6751 ;;		_i2c_driver_resetBus
  6752 ;; This function is called by:
  6753 ;;		_i2c_ISR
  6754 ;;		i1_i2c_ISR
  6755 ;; This function uses a non-reentrant model
  6756 ;;
  6757                           
  6758                           
  6759                           ;psect for function _do_I2C_RESET
  6760  07C4                     _do_I2C_RESET:	
  6761                           
  6762                           ;Skip over the trampoline to the duplicate function for level 1
  6763  07C4  1C7E               	btfss	126,0
  6764  07C5  2FC8               	goto	l2333
  6765  07C6  318F  2FB2         	ljmp	i1l2817
  6766  07C8                     _do_I2C_RESET$intlevel0:	
  6767  07C8                     l2333:	
  6768                           ;incstack = 0
  6769                           ; Regs used in _do_I2C_RESET: [wreg+status,2+status,0+pclath+cstack]
  6770                           
  6771                           
  6772                           ;i2c_master.c: 241: i2c_driver_resetBus();
  6773  07C8  318F  2701         	fcall	_i2c_driver_resetBus
  6774                           
  6775                           ;i2c_master.c: 242: i2c_status.busy = 0;
  6776  07CA  0020               	movlb	0	; select bank0
  6777  07CB  1020               	bcf	_i2c_status,0
  6778                           
  6779                           ;i2c_master.c: 243: i2c_status.error = I2C_NOERR;
  6780  07CC  01AA               	clrf	_i2c_status+10
  6781                           
  6782                           ;i2c_master.c: 244: return I2C_RESET;
  6783  07CD  300E               	movlw	14
  6784  07CE  0008               	return
  6785  07CF                     __end_of_do_I2C_RESET:	
  6786                           
  6787                           	psect	text33
  6788  0472                     __ptext33:	
  6789 ;; *************** function _do_I2C_TX_EMPTY *****************
  6790 ;; Defined at:
  6791 ;;		line 382 in file "mcc_generated_files/drivers/i2c_master.c"
  6792 ;; Parameters:    Size  Location     Type
  6793 ;;		None
  6794 ;; Auto vars:     Size  Location     Type
  6795 ;;		None
  6796 ;; Return value:  Size  Location     Type
  6797 ;;                  1    wreg      enum E12337
  6798 ;; Registers used:
  6799 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6800 ;; Tracked objects:
  6801 ;;		On entry : 0/0
  6802 ;;		On exit  : 0/0
  6803 ;;		Unchanged: 0/0
  6804 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6805 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6806 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6807 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6808 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6809 ;;Total ram usage:        1 bytes
  6810 ;; Hardware stack levels used:    1
  6811 ;; Hardware stack levels required when called:    9
  6812 ;; This function calls:
  6813 ;;		Absolute function
  6814 ;;		_do_I2C_SEND_RESTART
  6815 ;;		_do_I2C_SEND_STOP
  6816 ;;		_i2c_restartWrite
  6817 ;;		_mssp_setIRQ
  6818 ;;		_rd1RegCompleteHandler
  6819 ;;		_rd2RegCompleteHandler
  6820 ;;		_rdBlkRegCompleteHandler
  6821 ;;		_returnReset
  6822 ;;		_returnStop
  6823 ;;		_wr1RegCompleteHandler
  6824 ;;		_wr2RegCompleteHandler
  6825 ;; This function is called by:
  6826 ;;		_i2c_ISR
  6827 ;;		i1_i2c_ISR
  6828 ;; This function uses a non-reentrant model
  6829 ;;
  6830                           
  6831                           
  6832                           ;psect for function _do_I2C_TX_EMPTY
  6833  0472                     _do_I2C_TX_EMPTY:	
  6834                           
  6835                           ;Skip over the trampoline to the duplicate function for level 1
  6836  0472  1C7E               	btfss	126,0
  6837  0473  2C76               	goto	l4809
  6838  0474  3184  2C9F         	ljmp	i1l4991
  6839  0476                     _do_I2C_TX_EMPTY$intlevel0:	
  6840  0476                     l4809:	
  6841                           ;incstack = 0
  6842                           ; Regs used in _do_I2C_TX_EMPTY: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6843                           
  6844                           
  6845                           ;i2c_master.c: 384: i2c_status.bufferFree = 1;
  6846  0476  0020               	movlb	0	; select bank0
  6847  0477  1520               	bsf	_i2c_status,2
  6848                           
  6849                           ;i2c_master.c: 385: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
  6850  0478  2C83               	goto	l4827
  6851  0479                     l4811:	
  6852                           ;i2c_master.c: 386: {
  6853                           ;i2c_master.c: 387: case i2c_restart_read:
  6854                           
  6855                           
  6856                           ;i2c_master.c: 388: case i2c_restart_write:
  6857                           ;i2c_master.c: 389: return do_I2C_SEND_RESTART();
  6858  0479  318F  27D8         	fcall	_do_I2C_SEND_RESTART
  6859  047B  0008               	return
  6860  047C                     l4815:	
  6861                           ;i2c_master.c: 390: case i2c_continue:
  6862                           
  6863                           
  6864                           ;i2c_master.c: 391: mssp_setIRQ();
  6865  047C  318F  2735         	fcall	_mssp_setIRQ
  6866                           
  6867                           ;i2c_master.c: 392: return I2C_TX;
  6868  047E  3003               	movlw	3
  6869  047F  0008               	return
  6870  0480                     l4821:	
  6871                           ;i2c_master.c: 394: case i2c_stop:
  6872                           
  6873                           ;i2c_master.c: 393: default:
  6874                           
  6875                           
  6876                           ;i2c_master.c: 395: return do_I2C_SEND_STOP();
  6877  0480  318F  27E0         	fcall	_do_I2C_SEND_STOP
  6878                           
  6879                           ;i2c_master.c: 396: }
  6880  0482  0008               	return
  6881  0483                     l4827:	
  6882  0483  0020               	movlb	0	; select bank0
  6883  0484  0837               	movf	low ((_i2c_status| 0+23)),w
  6884  0485  00D5               	movwf	??_do_I2C_TX_EMPTY
  6885  0486  0855               	movf	??_do_I2C_TX_EMPTY,w
  6886  0487  00D4               	movwf	returnStop@p
  6887  0488  300B               	movlw	11
  6888  0489  3E20               	addlw	(low (_i2c_status| 0))& (0+255)
  6889  048A  0086               	movwf	6
  6890  048B  0187               	clrf	7
  6891  048C  3F41               	moviw [1]fsr1
  6892  048D  008A               	movwf	10
  6893  048E  3F40               	moviw [0]fsr1
  6894  048F  000A               	callw
  6895  0490  3184               	pagesel	$
  6896                           
  6897                           ; Switch size 1, requested type "space"
  6898                           ; Number of cases is 4, Range of values is 1 to 4
  6899                           ; switch strategies available:
  6900                           ; Name         Instructions Cycles
  6901                           ; simple_byte           13     7 (average)
  6902                           ; direct_byte           17     9 (fixed)
  6903                           ; jumptable            263     9 (fixed)
  6904                           ;	Chosen strategy is simple_byte
  6905  0491  3A01               	xorlw	1	; case 1
  6906  0492  1903               	skipnz
  6907  0493  2C80               	goto	l4821
  6908  0494  3A03               	xorlw	3	; case 2
  6909  0495  1903               	skipnz
  6910  0496  2C79               	goto	l4811
  6911  0497  3A01               	xorlw	1	; case 3
  6912  0498  1903               	skipnz
  6913  0499  2C79               	goto	l4811
  6914  049A  3A07               	xorlw	7	; case 4
  6915  049B  1903               	skipnz
  6916  049C  2C7C               	goto	l4815
  6917  049D  2C80               	goto	l4821
  6918  049E  0008               	return
  6919  049F                     __end_of_do_I2C_TX_EMPTY:	
  6920                           
  6921                           	psect	text34
  6922  0F35                     __ptext34:	
  6923 ;; *************** function _mssp_setIRQ *****************
  6924 ;; Defined at:
  6925 ;;		line 58 in file "mcc_generated_files/i2c_driver.c"
  6926 ;; Parameters:    Size  Location     Type
  6927 ;;		None
  6928 ;; Auto vars:     Size  Location     Type
  6929 ;;		None
  6930 ;; Return value:  Size  Location     Type
  6931 ;;                  1    wreg      void 
  6932 ;; Registers used:
  6933 ;;		None
  6934 ;; Tracked objects:
  6935 ;;		On entry : 0/0
  6936 ;;		On exit  : 0/0
  6937 ;;		Unchanged: 0/0
  6938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6939 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6940 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6941 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6942 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6943 ;;Total ram usage:        0 bytes
  6944 ;; Hardware stack levels used:    1
  6945 ;; Hardware stack levels required when called:    6
  6946 ;; This function calls:
  6947 ;;		Nothing
  6948 ;; This function is called by:
  6949 ;;		_do_I2C_TX_EMPTY
  6950 ;; This function uses a non-reentrant model
  6951 ;;
  6952                           
  6953                           
  6954                           ;psect for function _mssp_setIRQ
  6955  0F35                     _mssp_setIRQ:	
  6956                           
  6957                           ;i2c_driver.c: 60: PIR1bits.SSP1IF = 1;
  6958                           
  6959                           ;incstack = 0
  6960                           ; Regs used in _mssp_setIRQ: []
  6961  0F35  0020               	movlb	0	; select bank0
  6962  0F36  1590               	bsf	16,3	;volatile
  6963  0F37  0008               	return
  6964  0F38                     __end_of_mssp_setIRQ:	
  6965                           
  6966                           	psect	text35
  6967  0765                     __ptext35:	
  6968 ;; *************** function _i2c_driver_isNACK *****************
  6969 ;; Defined at:
  6970 ;;		line 161 in file "mcc_generated_files/i2c_driver.c"
  6971 ;; Parameters:    Size  Location     Type
  6972 ;;		None
  6973 ;; Auto vars:     Size  Location     Type
  6974 ;;		None
  6975 ;; Return value:  Size  Location     Type
  6976 ;;		None               void
  6977 ;; Registers used:
  6978 ;;		wreg, status,2, status,0
  6979 ;; Tracked objects:
  6980 ;;		On entry : 0/0
  6981 ;;		On exit  : 0/0
  6982 ;;		Unchanged: 0/0
  6983 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6984 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6985 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6986 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6987 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6988 ;;Total ram usage:        1 bytes
  6989 ;; Hardware stack levels used:    1
  6990 ;; Hardware stack levels required when called:    6
  6991 ;; This function calls:
  6992 ;;		Nothing
  6993 ;; This function is called by:
  6994 ;;		_do_I2C_TX
  6995 ;;		_i2c_ISR
  6996 ;; This function uses a non-reentrant model
  6997 ;;
  6998                           
  6999                           
  7000                           ;psect for function _i2c_driver_isNACK
  7001  0765                     _i2c_driver_isNACK:	
  7002                           
  7003                           ;i2c_driver.c: 163: return SSP1CON2bits.ACKSTAT = 1;
  7004                           
  7005                           ;incstack = 0
  7006                           ; Regs used in _i2c_driver_isNACK: [wreg+status,2+status,0]
  7007  0765  0024               	movlb	4	; select bank4
  7008  0766  0816               	movf	22,w	;volatile
  7009  0767  39BF               	andlw	-65
  7010  0768  3840               	iorlw	64
  7011  0769  0096               	movwf	22	;volatile
  7012  076A  0E16               	swapf	22,w	;volatile
  7013  076B  0C89               	rrf	9,f
  7014  076C  0C89               	rrf	9,f
  7015  076D  3901               	andlw	1
  7016  076E  0020               	movlb	0	; select bank0
  7017  076F  00CB               	movwf	??_i2c_driver_isNACK
  7018  0770  0C4B               	rrf	??_i2c_driver_isNACK,w
  7019  0771  0008               	return
  7020  0772                     __end_of_i2c_driver_isNACK:	
  7021                           
  7022                           	psect	text36
  7023  0F94                     __ptext36:	
  7024 ;; *************** function _i2c_driver_TXData *****************
  7025 ;; Defined at:
  7026 ;;		line 186 in file "mcc_generated_files/i2c_driver.c"
  7027 ;; Parameters:    Size  Location     Type
  7028 ;;  d               1    wreg     unsigned char 
  7029 ;; Auto vars:     Size  Location     Type
  7030 ;;  d               1    1[BANK0 ] unsigned char 
  7031 ;; Return value:  Size  Location     Type
  7032 ;;                  1    wreg      void 
  7033 ;; Registers used:
  7034 ;;		wreg
  7035 ;; Tracked objects:
  7036 ;;		On entry : 0/0
  7037 ;;		On exit  : 0/0
  7038 ;;		Unchanged: 0/0
  7039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7040 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7041 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7042 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7043 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7044 ;;Total ram usage:        1 bytes
  7045 ;; Hardware stack levels used:    1
  7046 ;; Hardware stack levels required when called:    6
  7047 ;; This function calls:
  7048 ;;		Nothing
  7049 ;; This function is called by:
  7050 ;;		_do_I2C_SEND_ADR_READ
  7051 ;;		_do_I2C_SEND_ADR_WRITE
  7052 ;;		_do_I2C_TX
  7053 ;; This function uses a non-reentrant model
  7054 ;;
  7055                           
  7056                           
  7057                           ;psect for function _i2c_driver_TXData
  7058  0F94                     _i2c_driver_TXData:	
  7059                           
  7060                           ;incstack = 0
  7061                           ; Regs used in _i2c_driver_TXData: [wreg]
  7062                           ;i2c_driver_TXData@d stored from wreg
  7063  0F94  0020               	movlb	0	; select bank0
  7064  0F95  00CB               	movwf	i2c_driver_TXData@d
  7065                           
  7066                           ;i2c_driver.c: 188: SSP1BUF = d;
  7067  0F96  084B               	movf	i2c_driver_TXData@d,w
  7068  0F97  0024               	movlb	4	; select bank4
  7069  0F98  0091               	movwf	17	;volatile
  7070  0F99  0008               	return
  7071  0F9A                     __end_of_i2c_driver_TXData:	
  7072                           
  7073                           	psect	text37
  7074  0F32                     __ptext37:	
  7075 ;; *************** function _i2c_driver_getRXData *****************
  7076 ;; Defined at:
  7077 ;;		line 171 in file "mcc_generated_files/i2c_driver.c"
  7078 ;; Parameters:    Size  Location     Type
  7079 ;;		None
  7080 ;; Auto vars:     Size  Location     Type
  7081 ;;		None
  7082 ;; Return value:  Size  Location     Type
  7083 ;;                  1    wreg      unsigned char 
  7084 ;; Registers used:
  7085 ;;		wreg
  7086 ;; Tracked objects:
  7087 ;;		On entry : 0/0
  7088 ;;		On exit  : 0/0
  7089 ;;		Unchanged: 0/0
  7090 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7091 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7092 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7093 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7094 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7095 ;;Total ram usage:        0 bytes
  7096 ;; Hardware stack levels used:    1
  7097 ;; Hardware stack levels required when called:    6
  7098 ;; This function calls:
  7099 ;;		Nothing
  7100 ;; This function is called by:
  7101 ;;		_do_I2C_RX
  7102 ;; This function uses a non-reentrant model
  7103 ;;
  7104                           
  7105                           
  7106                           ;psect for function _i2c_driver_getRXData
  7107  0F32                     _i2c_driver_getRXData:	
  7108                           
  7109                           ;i2c_driver.c: 173: return SSP1BUF;
  7110                           
  7111                           ;incstack = 0
  7112                           ; Regs used in _i2c_driver_getRXData: [wreg]
  7113  0F32  0024               	movlb	4	; select bank4
  7114  0F33  0811               	movf	17,w	;volatile
  7115  0F34  0008               	return
  7116  0F35                     __end_of_i2c_driver_getRXData:	
  7117                           
  7118                           	psect	text38
  7119  0F60                     __ptext38:	
  7120 ;; *************** function _i2c_driver_sendNACK *****************
  7121 ;; Defined at:
  7122 ;;		line 202 in file "mcc_generated_files/i2c_driver.c"
  7123 ;; Parameters:    Size  Location     Type
  7124 ;;		None
  7125 ;; Auto vars:     Size  Location     Type
  7126 ;;		None
  7127 ;; Return value:  Size  Location     Type
  7128 ;;                  1    wreg      void 
  7129 ;; Registers used:
  7130 ;;		None
  7131 ;; Tracked objects:
  7132 ;;		On entry : 0/0
  7133 ;;		On exit  : 0/0
  7134 ;;		Unchanged: 0/0
  7135 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7136 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7137 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7138 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7139 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7140 ;;Total ram usage:        0 bytes
  7141 ;; Hardware stack levels used:    1
  7142 ;; Hardware stack levels required when called:    6
  7143 ;; This function calls:
  7144 ;;		Nothing
  7145 ;; This function is called by:
  7146 ;;		_do_I2C_DO_NACK_STOP
  7147 ;;		_do_I2C_DO_NACK_RESTART
  7148 ;; This function uses a non-reentrant model
  7149 ;;
  7150                           
  7151                           
  7152                           ;psect for function _i2c_driver_sendNACK
  7153  0F60                     _i2c_driver_sendNACK:	
  7154                           
  7155                           ;i2c_driver.c: 204: SSP1CON2bits.ACKDT = 1;
  7156                           
  7157                           ;incstack = 0
  7158                           ; Regs used in _i2c_driver_sendNACK: []
  7159  0F60  0024               	movlb	4	; select bank4
  7160  0F61  1696               	bsf	22,5	;volatile
  7161                           
  7162                           ;i2c_driver.c: 205: SSP1CON2bits.ACKEN = 1;
  7163  0F62  1616               	bsf	22,4	;volatile
  7164  0F63  0008               	return
  7165  0F64                     __end_of_i2c_driver_sendNACK:	
  7166                           
  7167                           	psect	text39
  7168  0F01                     __ptext39:	
  7169 ;; *************** function _i2c_driver_resetBus *****************
  7170 ;; Defined at:
  7171 ;;		line 141 in file "mcc_generated_files/i2c_driver.c"
  7172 ;; Parameters:    Size  Location     Type
  7173 ;;		None
  7174 ;; Auto vars:     Size  Location     Type
  7175 ;;		None
  7176 ;; Return value:  Size  Location     Type
  7177 ;;                  1    wreg      void 
  7178 ;; Registers used:
  7179 ;;		None
  7180 ;; Tracked objects:
  7181 ;;		On entry : 0/0
  7182 ;;		On exit  : 0/0
  7183 ;;		Unchanged: 0/0
  7184 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7185 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7186 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7187 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7188 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7189 ;;Total ram usage:        0 bytes
  7190 ;; Hardware stack levels used:    1
  7191 ;; Hardware stack levels required when called:    6
  7192 ;; This function calls:
  7193 ;;		Nothing
  7194 ;; This function is called by:
  7195 ;;		_do_I2C_RESET
  7196 ;; This function uses a non-reentrant model
  7197 ;;
  7198                           
  7199                           
  7200                           ;psect for function _i2c_driver_resetBus
  7201  0F01                     _i2c_driver_resetBus:	
  7202                           
  7203                           ;incstack = 0
  7204                           ; Regs used in _i2c_driver_resetBus: []
  7205  0F01  0008               	return
  7206  0F02                     __end_of_i2c_driver_resetBus:	
  7207                           
  7208                           	psect	text40
  7209  0F2F                     __ptext40:	
  7210 ;; *************** function _i2c_driver_startRX *****************
  7211 ;; Defined at:
  7212 ;;		line 166 in file "mcc_generated_files/i2c_driver.c"
  7213 ;; Parameters:    Size  Location     Type
  7214 ;;		None
  7215 ;; Auto vars:     Size  Location     Type
  7216 ;;		None
  7217 ;; Return value:  Size  Location     Type
  7218 ;;                  1    wreg      void 
  7219 ;; Registers used:
  7220 ;;		None
  7221 ;; Tracked objects:
  7222 ;;		On entry : 0/0
  7223 ;;		On exit  : 0/0
  7224 ;;		Unchanged: 0/0
  7225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7226 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7227 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7228 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7229 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7230 ;;Total ram usage:        0 bytes
  7231 ;; Hardware stack levels used:    1
  7232 ;; Hardware stack levels required when called:    6
  7233 ;; This function calls:
  7234 ;;		Nothing
  7235 ;; This function is called by:
  7236 ;;		_do_I2C_RCEN
  7237 ;; This function uses a non-reentrant model
  7238 ;;
  7239                           
  7240                           
  7241                           ;psect for function _i2c_driver_startRX
  7242  0F2F                     _i2c_driver_startRX:	
  7243                           
  7244                           ;i2c_driver.c: 168: SSP1CON2bits.RCEN = 1;
  7245                           
  7246                           ;incstack = 0
  7247                           ; Regs used in _i2c_driver_startRX: []
  7248  0F2F  0024               	movlb	4	; select bank4
  7249  0F30  1596               	bsf	22,3	;volatile
  7250  0F31  0008               	return
  7251  0F32                     __end_of_i2c_driver_startRX:	
  7252                           
  7253                           	psect	text41
  7254  0F8E                     __ptext41:	
  7255 ;; *************** function _returnReset *****************
  7256 ;; Defined at:
  7257 ;;		line 448 in file "mcc_generated_files/drivers/i2c_master.c"
  7258 ;; Parameters:    Size  Location     Type
  7259 ;;  p               1   10[BANK0 ] PTR void 
  7260 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  7261 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  7262 ;; Auto vars:     Size  Location     Type
  7263 ;;		None
  7264 ;; Return value:  Size  Location     Type
  7265 ;;                  1    wreg      enum E12171
  7266 ;; Registers used:
  7267 ;;		wreg
  7268 ;; Tracked objects:
  7269 ;;		On entry : 0/0
  7270 ;;		On exit  : 0/0
  7271 ;;		Unchanged: 0/0
  7272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7273 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7274 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7275 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7276 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7277 ;;Total ram usage:        1 bytes
  7278 ;; Hardware stack levels used:    1
  7279 ;; Hardware stack levels required when called:    6
  7280 ;; This function calls:
  7281 ;;		Nothing
  7282 ;; This function is called by:
  7283 ;;		_i2c_open
  7284 ;;		_do_I2C_DO_ADDRESS_NACK
  7285 ;;		_do_I2C_TX
  7286 ;;		_do_I2C_RX
  7287 ;;		_do_I2C_TX_EMPTY
  7288 ;;		i1_do_I2C_DO_ADDRESS_NACK
  7289 ;;		i1_do_I2C_TX
  7290 ;;		i1_do_I2C_RX
  7291 ;;		i1_do_I2C_TX_EMPTY
  7292 ;; This function uses a non-reentrant model
  7293 ;;
  7294                           
  7295                           
  7296                           ;psect for function _returnReset
  7297  0F8E                     _returnReset:	
  7298                           
  7299                           ;Skip over the trampoline to the duplicate function for level 1
  7300  0F8E  1C7E               	btfss	126,0
  7301  0F8F  2F92               	goto	l2323
  7302  0F90  318F  2F04         	ljmp	i1l2709
  7303  0F92                     _returnReset$intlevel0:	
  7304  0F92                     l2323:	
  7305                           ;incstack = 0
  7306                           ; Regs used in _returnReset: [wreg]
  7307                           
  7308                           
  7309                           ;i2c_master.c: 450: return i2c_reset_link;
  7310  0F92  3005               	movlw	5
  7311  0F93  0008               	return
  7312  0F94                     __end_of_returnReset:	
  7313                           
  7314                           	psect	text42
  7315  0F88                     __ptext42:	
  7316 ;; *************** function _returnStop *****************
  7317 ;; Defined at:
  7318 ;;		line 443 in file "mcc_generated_files/drivers/i2c_master.c"
  7319 ;; Parameters:    Size  Location     Type
  7320 ;;  p               1   10[BANK0 ] PTR void 
  7321 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  7322 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  7323 ;; Auto vars:     Size  Location     Type
  7324 ;;		None
  7325 ;; Return value:  Size  Location     Type
  7326 ;;                  1    wreg      enum E12171
  7327 ;; Registers used:
  7328 ;;		wreg
  7329 ;; Tracked objects:
  7330 ;;		On entry : 0/0
  7331 ;;		On exit  : 0/0
  7332 ;;		Unchanged: 0/0
  7333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7334 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7335 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7336 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7337 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7338 ;;Total ram usage:        1 bytes
  7339 ;; Hardware stack levels used:    1
  7340 ;; Hardware stack levels required when called:    6
  7341 ;; This function calls:
  7342 ;;		Nothing
  7343 ;; This function is called by:
  7344 ;;		_i2c_open
  7345 ;;		_setCallBack
  7346 ;;		_do_I2C_DO_ADDRESS_NACK
  7347 ;;		_do_I2C_TX
  7348 ;;		_do_I2C_RX
  7349 ;;		_do_I2C_TX_EMPTY
  7350 ;;		i1_do_I2C_DO_ADDRESS_NACK
  7351 ;;		i1_do_I2C_TX
  7352 ;;		i1_do_I2C_RX
  7353 ;;		i1_do_I2C_TX_EMPTY
  7354 ;; This function uses a non-reentrant model
  7355 ;;
  7356                           
  7357                           
  7358                           ;psect for function _returnStop
  7359  0F88                     _returnStop:	
  7360                           
  7361                           ;Skip over the trampoline to the duplicate function for level 1
  7362  0F88  1C7E               	btfss	126,0
  7363  0F89  2F8C               	goto	l2319
  7364  0F8A  318F  2F02         	ljmp	i1l2705
  7365  0F8C                     _returnStop$intlevel0:	
  7366  0F8C                     l2319:	
  7367                           ;incstack = 0
  7368                           ; Regs used in _returnStop: [wreg]
  7369                           
  7370                           
  7371                           ;i2c_master.c: 445: return i2c_stop;
  7372  0F8C  3001               	movlw	1
  7373  0F8D  0008               	return
  7374  0F8E                     __end_of_returnStop:	
  7375                           
  7376                           	psect	text43
  7377  0648                     __ptext43:	
  7378 ;; *************** function _rdBlkRegCompleteHandler *****************
  7379 ;; Defined at:
  7380 ;;		line 134 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  7381 ;; Parameters:    Size  Location     Type
  7382 ;;  p               1   10[BANK0 ] PTR void 
  7383 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  7384 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  7385 ;; Auto vars:     Size  Location     Type
  7386 ;;		None
  7387 ;; Return value:  Size  Location     Type
  7388 ;;                  1    wreg      enum E97
  7389 ;; Registers used:
  7390 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7391 ;; Tracked objects:
  7392 ;;		On entry : 0/0
  7393 ;;		On exit  : 0/0
  7394 ;;		Unchanged: 0/0
  7395 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7396 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7397 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7398 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7399 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7400 ;;Total ram usage:        1 bytes
  7401 ;; Hardware stack levels used:    1
  7402 ;; Hardware stack levels required when called:    8
  7403 ;; This function calls:
  7404 ;;		_i2c_setBuffer
  7405 ;;		_i2c_setDataCompleteCallback
  7406 ;; This function is called by:
  7407 ;;		_i2c_readDataBlock
  7408 ;;		_do_I2C_DO_ADDRESS_NACK
  7409 ;;		_do_I2C_TX
  7410 ;;		_do_I2C_RX
  7411 ;;		_do_I2C_TX_EMPTY
  7412 ;;		i1_do_I2C_DO_ADDRESS_NACK
  7413 ;;		i1_do_I2C_TX
  7414 ;;		i1_do_I2C_RX
  7415 ;;		i1_do_I2C_TX_EMPTY
  7416 ;; This function uses a non-reentrant model
  7417 ;;
  7418                           
  7419                           
  7420                           ;psect for function _rdBlkRegCompleteHandler
  7421  0648                     _rdBlkRegCompleteHandler:	
  7422                           
  7423                           ;Skip over the trampoline to the duplicate function for level 1
  7424  0648  1C7E               	btfss	126,0
  7425  0649  2E4C               	goto	l2277
  7426  064A  3186  2E65         	ljmp	i1l2663
  7427  064C                     _rdBlkRegCompleteHandler$intlevel0:	
  7428  064C                     l2277:	
  7429                           ;incstack = 0
  7430                           ; Regs used in _rdBlkRegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  7431                           
  7432                           
  7433                           ;i2c_simple_master.c: 136: i2c_setBuffer(((buf_t *)p)->data,((buf_t*)p)->len);
  7434  064C  0020               	movlb	0	; select bank0
  7435  064D  0854               	movf	rdBlkRegCompleteHandler@p,w
  7436  064E  0086               	movwf	6
  7437  064F  0187               	clrf	7
  7438  0650  3F40               	moviw [0]fsr1
  7439  0651  00CB               	movwf	i2c_setBuffer@bufferSize
  7440  0652  3F41               	moviw [1]fsr1
  7441  0653  00CC               	movwf	i2c_setBuffer@bufferSize+1
  7442  0654  0854               	movf	rdBlkRegCompleteHandler@p,w
  7443  0655  3E02               	addlw	2
  7444  0656  0086               	movwf	6
  7445  0657  0187               	clrf	7
  7446  0658  0801               	movf	1,w
  7447  0659  3187  273C  3186   	fcall	_i2c_setBuffer
  7448                           
  7449                           ;i2c_simple_master.c: 137: i2c_setDataCompleteCallback((0),(0));
  7450  065C  3000               	movlw	0
  7451  065D  0020               	movlb	0	; select bank0
  7452  065E  00D0               	movwf	i2c_setDataCompleteCallback@cb
  7453  065F  00D1               	movwf	i2c_setDataCompleteCallback@cb+1
  7454  0660  01D2               	clrf	i2c_setDataCompleteCallback@p
  7455  0661  3187  2772         	fcall	_i2c_setDataCompleteCallback
  7456                           
  7457                           ;i2c_simple_master.c: 138: return i2c_restart_read;
  7458  0663  3002               	movlw	2
  7459  0664  0008               	return
  7460  0665                     __end_of_rdBlkRegCompleteHandler:	
  7461                           
  7462                           	psect	text44
  7463  067C                     __ptext44:	
  7464 ;; *************** function _rd2RegCompleteHandler *****************
  7465 ;; Defined at:
  7466 ;;		line 87 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  7467 ;; Parameters:    Size  Location     Type
  7468 ;;  p               1   10[BANK0 ] PTR void 
  7469 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  7470 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  7471 ;; Auto vars:     Size  Location     Type
  7472 ;;		None
  7473 ;; Return value:  Size  Location     Type
  7474 ;;                  1    wreg      enum E97
  7475 ;; Registers used:
  7476 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7477 ;; Tracked objects:
  7478 ;;		On entry : 0/0
  7479 ;;		On exit  : 0/0
  7480 ;;		Unchanged: 0/0
  7481 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7482 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7483 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7484 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7485 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7486 ;;Total ram usage:        1 bytes
  7487 ;; Hardware stack levels used:    1
  7488 ;; Hardware stack levels required when called:    8
  7489 ;; This function calls:
  7490 ;;		_i2c_setBuffer
  7491 ;;		_i2c_setDataCompleteCallback
  7492 ;; This function is called by:
  7493 ;;		_i2c_read2ByteRegister
  7494 ;;		_do_I2C_DO_ADDRESS_NACK
  7495 ;;		_do_I2C_TX
  7496 ;;		_do_I2C_RX
  7497 ;;		_do_I2C_TX_EMPTY
  7498 ;;		i1_do_I2C_DO_ADDRESS_NACK
  7499 ;;		i1_do_I2C_TX
  7500 ;;		i1_do_I2C_RX
  7501 ;;		i1_do_I2C_TX_EMPTY
  7502 ;; This function uses a non-reentrant model
  7503 ;;
  7504                           
  7505                           
  7506                           ;psect for function _rd2RegCompleteHandler
  7507  067C                     _rd2RegCompleteHandler:	
  7508                           
  7509                           ;Skip over the trampoline to the duplicate function for level 1
  7510  067C  1C7E               	btfss	126,0
  7511  067D  2E80               	goto	l2261
  7512  067E  3186  2EFC         	ljmp	i1l2647
  7513  0680                     _rd2RegCompleteHandler$intlevel0:	
  7514  0680                     l2261:	
  7515                           ;incstack = 0
  7516                           ; Regs used in _rd2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  7517                           
  7518                           
  7519                           ;i2c_simple_master.c: 89: i2c_setBuffer(p,2);
  7520  0680  3002               	movlw	2
  7521  0681  0020               	movlb	0	; select bank0
  7522  0682  00CB               	movwf	i2c_setBuffer@bufferSize
  7523  0683  3000               	movlw	0
  7524  0684  00CC               	movwf	i2c_setBuffer@bufferSize+1
  7525  0685  0854               	movf	rd2RegCompleteHandler@p,w
  7526  0686  3187  273C  3186   	fcall	_i2c_setBuffer
  7527                           
  7528                           ;i2c_simple_master.c: 90: i2c_setDataCompleteCallback((0),(0));
  7529  0689  3000               	movlw	0
  7530  068A  0020               	movlb	0	; select bank0
  7531  068B  00D0               	movwf	i2c_setDataCompleteCallback@cb
  7532  068C  00D1               	movwf	i2c_setDataCompleteCallback@cb+1
  7533  068D  01D2               	clrf	i2c_setDataCompleteCallback@p
  7534  068E  3187  2772         	fcall	_i2c_setDataCompleteCallback
  7535                           
  7536                           ;i2c_simple_master.c: 91: return i2c_restart_read;
  7537  0690  3002               	movlw	2
  7538  0691  0008               	return
  7539  0692                     __end_of_rd2RegCompleteHandler:	
  7540                           
  7541                           	psect	text45
  7542  0692                     __ptext45:	
  7543 ;; *************** function _rd1RegCompleteHandler *****************
  7544 ;; Defined at:
  7545 ;;		line 58 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  7546 ;; Parameters:    Size  Location     Type
  7547 ;;  p               1   10[BANK0 ] PTR void 
  7548 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  7549 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  7550 ;; Auto vars:     Size  Location     Type
  7551 ;;		None
  7552 ;; Return value:  Size  Location     Type
  7553 ;;                  1    wreg      enum E97
  7554 ;; Registers used:
  7555 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7556 ;; Tracked objects:
  7557 ;;		On entry : 0/0
  7558 ;;		On exit  : 0/0
  7559 ;;		Unchanged: 0/0
  7560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7561 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7562 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7563 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7564 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7565 ;;Total ram usage:        1 bytes
  7566 ;; Hardware stack levels used:    1
  7567 ;; Hardware stack levels required when called:    8
  7568 ;; This function calls:
  7569 ;;		_i2c_setBuffer
  7570 ;;		_i2c_setDataCompleteCallback
  7571 ;; This function is called by:
  7572 ;;		_i2c_read1ByteRegister
  7573 ;;		_do_I2C_DO_ADDRESS_NACK
  7574 ;;		_do_I2C_TX
  7575 ;;		_do_I2C_RX
  7576 ;;		_do_I2C_TX_EMPTY
  7577 ;;		i1_do_I2C_DO_ADDRESS_NACK
  7578 ;;		i1_do_I2C_TX
  7579 ;;		i1_do_I2C_RX
  7580 ;;		i1_do_I2C_TX_EMPTY
  7581 ;; This function uses a non-reentrant model
  7582 ;;
  7583                           
  7584                           
  7585                           ;psect for function _rd1RegCompleteHandler
  7586  0692                     _rd1RegCompleteHandler:	
  7587                           
  7588                           ;Skip over the trampoline to the duplicate function for level 1
  7589  0692  1C7E               	btfss	126,0
  7590  0693  2E96               	goto	l2253
  7591  0694  3187  2F0C         	ljmp	i1l2639
  7592  0696                     _rd1RegCompleteHandler$intlevel0:	
  7593  0696                     l2253:	
  7594                           ;incstack = 0
  7595                           ; Regs used in _rd1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  7596                           
  7597                           
  7598                           ;i2c_simple_master.c: 60: i2c_setBuffer(p,1);
  7599  0696  3001               	movlw	1
  7600  0697  0020               	movlb	0	; select bank0
  7601  0698  00CB               	movwf	i2c_setBuffer@bufferSize
  7602  0699  3000               	movlw	0
  7603  069A  00CC               	movwf	i2c_setBuffer@bufferSize+1
  7604  069B  0854               	movf	rd1RegCompleteHandler@p,w
  7605  069C  3187  273C  3186   	fcall	_i2c_setBuffer
  7606                           
  7607                           ;i2c_simple_master.c: 61: i2c_setDataCompleteCallback((0),(0));
  7608  069F  3000               	movlw	0
  7609  06A0  0020               	movlb	0	; select bank0
  7610  06A1  00D0               	movwf	i2c_setDataCompleteCallback@cb
  7611  06A2  00D1               	movwf	i2c_setDataCompleteCallback@cb+1
  7612  06A3  01D2               	clrf	i2c_setDataCompleteCallback@p
  7613  06A4  3187  2772         	fcall	_i2c_setDataCompleteCallback
  7614                           
  7615                           ;i2c_simple_master.c: 62: return i2c_restart_read;
  7616  06A6  3002               	movlw	2
  7617  06A7  0008               	return
  7618  06A8                     __end_of_rd1RegCompleteHandler:	
  7619                           
  7620                           	psect	text46
  7621  06A8                     __ptext46:	
  7622 ;; *************** function _wr1RegCompleteHandler *****************
  7623 ;; Defined at:
  7624 ;;		line 31 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  7625 ;; Parameters:    Size  Location     Type
  7626 ;;  p               1   10[BANK0 ] PTR void 
  7627 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  7628 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  7629 ;; Auto vars:     Size  Location     Type
  7630 ;;		None
  7631 ;; Return value:  Size  Location     Type
  7632 ;;                  1    wreg      enum E97
  7633 ;; Registers used:
  7634 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7635 ;; Tracked objects:
  7636 ;;		On entry : 0/0
  7637 ;;		On exit  : 0/0
  7638 ;;		Unchanged: 0/0
  7639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7640 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7641 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7642 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7643 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7644 ;;Total ram usage:        1 bytes
  7645 ;; Hardware stack levels used:    1
  7646 ;; Hardware stack levels required when called:    8
  7647 ;; This function calls:
  7648 ;;		_i2c_setBuffer
  7649 ;;		_i2c_setDataCompleteCallback
  7650 ;; This function is called by:
  7651 ;;		_i2c_write1ByteRegister
  7652 ;;		_do_I2C_DO_ADDRESS_NACK
  7653 ;;		_do_I2C_TX
  7654 ;;		_do_I2C_RX
  7655 ;;		_do_I2C_TX_EMPTY
  7656 ;;		i1_do_I2C_DO_ADDRESS_NACK
  7657 ;;		i1_do_I2C_TX
  7658 ;;		i1_do_I2C_RX
  7659 ;;		i1_do_I2C_TX_EMPTY
  7660 ;; This function uses a non-reentrant model
  7661 ;;
  7662                           
  7663                           
  7664                           ;psect for function _wr1RegCompleteHandler
  7665  06A8                     _wr1RegCompleteHandler:	
  7666                           
  7667                           ;Skip over the trampoline to the duplicate function for level 1
  7668  06A8  1C7E               	btfss	126,0
  7669  06A9  2EAC               	goto	l2245
  7670  06AA  3187  2F1C         	ljmp	i1l2631
  7671  06AC                     _wr1RegCompleteHandler$intlevel0:	
  7672  06AC                     l2245:	
  7673                           ;incstack = 0
  7674                           ; Regs used in _wr1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  7675                           
  7676                           
  7677                           ;i2c_simple_master.c: 33: i2c_setBuffer(p,1);
  7678  06AC  3001               	movlw	1
  7679  06AD  0020               	movlb	0	; select bank0
  7680  06AE  00CB               	movwf	i2c_setBuffer@bufferSize
  7681  06AF  3000               	movlw	0
  7682  06B0  00CC               	movwf	i2c_setBuffer@bufferSize+1
  7683  06B1  0854               	movf	wr1RegCompleteHandler@p,w
  7684  06B2  3187  273C  3186   	fcall	_i2c_setBuffer
  7685                           
  7686                           ;i2c_simple_master.c: 34: i2c_setDataCompleteCallback((0),(0));
  7687  06B5  3000               	movlw	0
  7688  06B6  0020               	movlb	0	; select bank0
  7689  06B7  00D0               	movwf	i2c_setDataCompleteCallback@cb
  7690  06B8  00D1               	movwf	i2c_setDataCompleteCallback@cb+1
  7691  06B9  01D2               	clrf	i2c_setDataCompleteCallback@p
  7692  06BA  3187  2772         	fcall	_i2c_setDataCompleteCallback
  7693                           
  7694                           ;i2c_simple_master.c: 35: return i2c_continue;
  7695  06BC  3004               	movlw	4
  7696  06BD  0008               	return
  7697  06BE                     __end_of_wr1RegCompleteHandler:	
  7698                           
  7699                           	psect	text47
  7700  0F82                     __ptext47:	
  7701 ;; *************** function _i2c_restartWrite *****************
  7702 ;; Defined at:
  7703 ;;		line 35 in file "mcc_generated_files/drivers/i2c_types.c"
  7704 ;; Parameters:    Size  Location     Type
  7705 ;;  p               1   10[BANK0 ] PTR void 
  7706 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  7707 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  7708 ;; Auto vars:     Size  Location     Type
  7709 ;;		None
  7710 ;; Return value:  Size  Location     Type
  7711 ;;                  1    wreg      enum E97
  7712 ;; Registers used:
  7713 ;;		wreg
  7714 ;; Tracked objects:
  7715 ;;		On entry : 0/0
  7716 ;;		On exit  : 0/0
  7717 ;;		Unchanged: 0/0
  7718 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7719 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7720 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7721 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7722 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7723 ;;Total ram usage:        1 bytes
  7724 ;; Hardware stack levels used:    1
  7725 ;; Hardware stack levels required when called:    6
  7726 ;; This function calls:
  7727 ;;		Nothing
  7728 ;; This function is called by:
  7729 ;;		_i2c_writeNBytes
  7730 ;;		_i2c_write1ByteRegister
  7731 ;;		_i2c_read1ByteRegister
  7732 ;;		_i2c_read2ByteRegister
  7733 ;;		_i2c_write2ByteRegister
  7734 ;;		_i2c_readDataBlock
  7735 ;;		_do_I2C_DO_ADDRESS_NACK
  7736 ;;		_do_I2C_TX
  7737 ;;		_do_I2C_RX
  7738 ;;		_do_I2C_TX_EMPTY
  7739 ;;		i1_do_I2C_DO_ADDRESS_NACK
  7740 ;;		i1_do_I2C_TX
  7741 ;;		i1_do_I2C_RX
  7742 ;;		i1_do_I2C_TX_EMPTY
  7743 ;; This function uses a non-reentrant model
  7744 ;;
  7745                           
  7746                           
  7747                           ;psect for function _i2c_restartWrite
  7748  0F82                     _i2c_restartWrite:	
  7749                           
  7750                           ;Skip over the trampoline to the duplicate function for level 1
  7751  0F82  1C7E               	btfss	126,0
  7752  0F83  2F86               	goto	l2327
  7753  0F84  318F  2F06         	ljmp	i1l2713
  7754  0F86                     _i2c_restartWrite$intlevel0:	
  7755  0F86                     l2327:	
  7756                           ;incstack = 0
  7757                           ; Regs used in _i2c_restartWrite: [wreg]
  7758                           
  7759                           
  7760                           ;i2c_types.c: 37: return i2c_restart_write;
  7761  0F86  3003               	movlw	3
  7762  0F87  0008               	return
  7763  0F88                     __end_of_i2c_restartWrite:	
  7764                           
  7765                           	psect	text48
  7766  06BE                     __ptext48:	
  7767 ;; *************** function _wr2RegCompleteHandler *****************
  7768 ;; Defined at:
  7769 ;;		line 110 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  7770 ;; Parameters:    Size  Location     Type
  7771 ;;  p               1   10[BANK0 ] PTR void 
  7772 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  7773 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  7774 ;; Auto vars:     Size  Location     Type
  7775 ;;		None
  7776 ;; Return value:  Size  Location     Type
  7777 ;;                  1    wreg      enum E97
  7778 ;; Registers used:
  7779 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7780 ;; Tracked objects:
  7781 ;;		On entry : 0/0
  7782 ;;		On exit  : 0/0
  7783 ;;		Unchanged: 0/0
  7784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7785 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7786 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7787 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7788 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7789 ;;Total ram usage:        1 bytes
  7790 ;; Hardware stack levels used:    1
  7791 ;; Hardware stack levels required when called:    8
  7792 ;; This function calls:
  7793 ;;		_i2c_setBuffer
  7794 ;;		_i2c_setDataCompleteCallback
  7795 ;; This function is called by:
  7796 ;;		_i2c_write2ByteRegister
  7797 ;;		_do_I2C_DO_ADDRESS_NACK
  7798 ;;		_do_I2C_TX
  7799 ;;		_do_I2C_RX
  7800 ;;		_do_I2C_TX_EMPTY
  7801 ;;		i1_do_I2C_DO_ADDRESS_NACK
  7802 ;;		i1_do_I2C_TX
  7803 ;;		i1_do_I2C_RX
  7804 ;;		i1_do_I2C_TX_EMPTY
  7805 ;; This function uses a non-reentrant model
  7806 ;;
  7807                           
  7808                           
  7809                           ;psect for function _wr2RegCompleteHandler
  7810  06BE                     _wr2RegCompleteHandler:	
  7811                           
  7812                           ;Skip over the trampoline to the duplicate function for level 1
  7813  06BE  1C7E               	btfss	126,0
  7814  06BF  2EC2               	goto	l2269
  7815  06C0  3187  2F2C         	ljmp	i1l2655
  7816  06C2                     _wr2RegCompleteHandler$intlevel0:	
  7817  06C2                     l2269:	
  7818                           ;incstack = 0
  7819                           ; Regs used in _wr2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  7820                           
  7821                           
  7822                           ;i2c_simple_master.c: 112: i2c_setBuffer(p,2);
  7823  06C2  3002               	movlw	2
  7824  06C3  0020               	movlb	0	; select bank0
  7825  06C4  00CB               	movwf	i2c_setBuffer@bufferSize
  7826  06C5  3000               	movlw	0
  7827  06C6  00CC               	movwf	i2c_setBuffer@bufferSize+1
  7828  06C7  0854               	movf	wr2RegCompleteHandler@p,w
  7829  06C8  3187  273C  3186   	fcall	_i2c_setBuffer
  7830                           
  7831                           ;i2c_simple_master.c: 113: i2c_setDataCompleteCallback((0),(0));
  7832  06CB  3000               	movlw	0
  7833  06CC  0020               	movlb	0	; select bank0
  7834  06CD  00D0               	movwf	i2c_setDataCompleteCallback@cb
  7835  06CE  00D1               	movwf	i2c_setDataCompleteCallback@cb+1
  7836  06CF  01D2               	clrf	i2c_setDataCompleteCallback@p
  7837  06D0  3187  2772         	fcall	_i2c_setDataCompleteCallback
  7838                           
  7839                           ;i2c_simple_master.c: 114: return i2c_continue;
  7840  06D2  3004               	movlw	4
  7841  06D3  0008               	return
  7842  06D4                     __end_of_wr2RegCompleteHandler:	
  7843                           
  7844                           	psect	text49
  7845  0772                     __ptext49:	
  7846 ;; *************** function _i2c_setDataCompleteCallback *****************
  7847 ;; Defined at:
  7848 ;;		line 89 in file "mcc_generated_files/drivers/i2c_master.c"
  7849 ;; Parameters:    Size  Location     Type
  7850 ;;  cb              2    6[BANK0 ] PTR FTN(PTR void ,)enum 
  7851 ;;		 -> rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), rd2RegCompleteHandler(1), rd1RegCompleteHandler(1), 
  7852 ;;		 -> Absolute function(1), wr1RegCompleteHandler(1), 
  7853 ;;  p               1    8[BANK0 ] PTR void 
  7854 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  7855 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  7856 ;; Auto vars:     Size  Location     Type
  7857 ;;		None
  7858 ;; Return value:  Size  Location     Type
  7859 ;;                  1    wreg      void 
  7860 ;; Registers used:
  7861 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7862 ;; Tracked objects:
  7863 ;;		On entry : 0/0
  7864 ;;		On exit  : 0/0
  7865 ;;		Unchanged: 0/0
  7866 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7867 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7868 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7869 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7870 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7871 ;;Total ram usage:        4 bytes
  7872 ;; Hardware stack levels used:    1
  7873 ;; Hardware stack levels required when called:    7
  7874 ;; This function calls:
  7875 ;;		_setCallBack
  7876 ;; This function is called by:
  7877 ;;		_wr1RegCompleteHandler
  7878 ;;		_rd1RegCompleteHandler
  7879 ;;		_rd2RegCompleteHandler
  7880 ;;		_wr2RegCompleteHandler
  7881 ;;		_rdBlkRegCompleteHandler
  7882 ;;		_i2c_write1ByteRegister
  7883 ;;		_i2c_read1ByteRegister
  7884 ;;		_i2c_read2ByteRegister
  7885 ;;		_i2c_write2ByteRegister
  7886 ;;		_i2c_readDataBlock
  7887 ;; This function uses a non-reentrant model
  7888 ;;
  7889                           
  7890                           
  7891                           ;psect for function _i2c_setDataCompleteCallback
  7892  0772                     _i2c_setDataCompleteCallback:	
  7893                           
  7894                           ;i2c_master.c: 91: setCallBack(i2c_dataComplete,cb,p);
  7895                           
  7896                           ;incstack = 0
  7897                           ; Regs used in _i2c_setDataCompleteCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  7898  0772  0020               	movlb	0	; select bank0
  7899  0773  0851               	movf	i2c_setDataCompleteCallback@cb+1,w
  7900  0774  00CC               	movwf	setCallBack@cb+1
  7901  0775  0850               	movf	i2c_setDataCompleteCallback@cb,w
  7902  0776  00CB               	movwf	setCallBack@cb
  7903  0777  0852               	movf	i2c_setDataCompleteCallback@p,w
  7904  0778  00D3               	movwf	??_i2c_setDataCompleteCallback
  7905  0779  0853               	movf	??_i2c_setDataCompleteCallback,w
  7906  077A  00CD               	movwf	setCallBack@p
  7907  077B  3000               	movlw	0
  7908  077C  3185  253C         	fcall	_setCallBack
  7909  077E  0008               	return
  7910  077F                     __end_of_i2c_setDataCompleteCallback:	
  7911                           
  7912                           	psect	text50
  7913  053C                     __ptext50:	
  7914 ;; *************** function _setCallBack *****************
  7915 ;; Defined at:
  7916 ;;		line 453 in file "mcc_generated_files/drivers/i2c_master.c"
  7917 ;; Parameters:    Size  Location     Type
  7918 ;;  idx             1    wreg     enum E12355
  7919 ;;  cb              2    1[BANK0 ] PTR FTN(PTR void ,)enum 
  7920 ;;		 -> rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), rd2RegCompleteHandler(1), rd1RegCompleteHandler(1), 
  7921 ;;		 -> i2c_restartWrite(1), Absolute function(1), wr1RegCompleteHandler(1), 
  7922 ;;  p               1    3[BANK0 ] PTR void 
  7923 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  7924 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  7925 ;; Auto vars:     Size  Location     Type
  7926 ;;  idx             1    5[BANK0 ] enum E12355
  7927 ;; Return value:  Size  Location     Type
  7928 ;;                  1    wreg      void 
  7929 ;; Registers used:
  7930 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7931 ;; Tracked objects:
  7932 ;;		On entry : 0/0
  7933 ;;		On exit  : 0/0
  7934 ;;		Unchanged: 0/0
  7935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7936 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7937 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7938 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7939 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7940 ;;Total ram usage:        5 bytes
  7941 ;; Hardware stack levels used:    1
  7942 ;; Hardware stack levels required when called:    6
  7943 ;; This function calls:
  7944 ;;		Nothing
  7945 ;; This function is called by:
  7946 ;;		_i2c_setDataCompleteCallback
  7947 ;;		_i2c_setAddressNACKCallback
  7948 ;;		_i2c_setWriteCollisionCallback
  7949 ;;		_i2c_setDataNACKCallback
  7950 ;;		_i2c_setTimeOutCallback
  7951 ;; This function uses a non-reentrant model
  7952 ;;
  7953                           
  7954                           
  7955                           ;psect for function _setCallBack
  7956  053C                     _setCallBack:	
  7957                           
  7958                           ;incstack = 0
  7959                           ; Regs used in _setCallBack: [wreg+fsr1l+fsr1h+status,2+status,0]
  7960                           ;setCallBack@idx stored from wreg
  7961  053C  0020               	movlb	0	; select bank0
  7962  053D  00CF               	movwf	setCallBack@idx
  7963                           
  7964                           ;i2c_master.c: 455: if(cb)
  7965  053E  084B               	movf	setCallBack@cb,w
  7966  053F  044C               	iorwf	setCallBack@cb+1,w
  7967  0540  1903               	btfsc	3,2
  7968  0541  2D53               	goto	l2213
  7969                           
  7970                           ;i2c_master.c: 456: {
  7971                           ;i2c_master.c: 457: i2c_status.callbackTable[idx] = cb;
  7972  0542  354F               	lslf	setCallBack@idx,w
  7973  0543  3E2B               	addlw	(low ((_i2c_status| 0+11)))& (0+255)
  7974  0544  0086               	movwf	6
  7975  0545  0187               	clrf	7
  7976  0546  084B               	movf	setCallBack@cb,w
  7977  0547  3FC0               	movwi [0]fsr1
  7978  0548  084C               	movf	setCallBack@cb+1,w
  7979  0549  3FC1               	movwi [1]fsr1
  7980                           
  7981                           ;i2c_master.c: 458: i2c_status.callbackPayload[idx] = p;
  7982  054A  084D               	movf	setCallBack@p,w
  7983  054B  00CE               	movwf	??_setCallBack
  7984  054C  084F               	movf	setCallBack@idx,w
  7985  054D  3E37               	addlw	(low ((_i2c_status| 0+23)))& (0+255)
  7986  054E  0086               	movwf	6
  7987  054F  0187               	clrf	7
  7988  0550  084E               	movf	??_setCallBack,w
  7989  0551  0081               	movwf	1
  7990                           
  7991                           ;i2c_master.c: 459: }
  7992  0552  0008               	return
  7993  0553                     l2213:	
  7994                           
  7995                           ;i2c_master.c: 460: else
  7996                           ;i2c_master.c: 461: {
  7997                           ;i2c_master.c: 462: i2c_status.callbackTable[idx] = returnStop;
  7998  0553  354F               	lslf	setCallBack@idx,w
  7999  0554  3E2B               	addlw	(low ((_i2c_status| 0+11)))& (0+255)
  8000  0555  0086               	movwf	6
  8001  0556  0187               	clrf	7
  8002  0557  3088               	movlw	low _returnStop
  8003  0558  3FC0               	movwi [0]fsr1
  8004  0559  300F               	movlw	high _returnStop
  8005  055A  3FC1               	movwi [1]fsr1
  8006                           
  8007                           ;i2c_master.c: 463: i2c_status.callbackPayload[idx] = (0);
  8008  055B  084F               	movf	setCallBack@idx,w
  8009  055C  3E37               	addlw	(low ((_i2c_status| 0+23)))& (0+255)
  8010  055D  0086               	movwf	6
  8011  055E  0187               	clrf	7
  8012  055F  0181               	clrf	1
  8013  0560  0008               	return
  8014  0561                     __end_of_setCallBack:	
  8015                           
  8016                           	psect	text51
  8017  073C                     __ptext51:	
  8018 ;; *************** function _i2c_setBuffer *****************
  8019 ;; Defined at:
  8020 ;;		line 184 in file "mcc_generated_files/drivers/i2c_master.c"
  8021 ;; Parameters:    Size  Location     Type
  8022 ;;  buffer          1    wreg     PTR void 
  8023 ;;		 -> i2c_readDataBlock@reg(1), i2c_readDataBlock@d(3), i2c_write2ByteRegister@reg(1), i2c_write2ByteRegister@data(2),
      + 
  8024 ;;		 -> i2c_read2ByteRegister@reg(1), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@reg(1), i2c_read1ByteRegist
      +er@d2(1), 
  8025 ;;		 -> i2c_write1ByteRegister@reg(1), i2c_write1ByteRegister@data(1), NULL(0), writebuffer(17), 
  8026 ;;  bufferSize      2    1[BANK0 ] unsigned int 
  8027 ;; Auto vars:     Size  Location     Type
  8028 ;;  buffer          1    4[BANK0 ] PTR void 
  8029 ;;		 -> i2c_readDataBlock@reg(1), i2c_readDataBlock@d(3), i2c_write2ByteRegister@reg(1), i2c_write2ByteRegister@data(2),
      + 
  8030 ;;		 -> i2c_read2ByteRegister@reg(1), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@reg(1), i2c_read1ByteRegist
      +er@d2(1), 
  8031 ;;		 -> i2c_write1ByteRegister@reg(1), i2c_write1ByteRegister@data(1), NULL(0), writebuffer(17), 
  8032 ;; Return value:  Size  Location     Type
  8033 ;;                  1    wreg      void 
  8034 ;; Registers used:
  8035 ;;		wreg
  8036 ;; Tracked objects:
  8037 ;;		On entry : 0/0
  8038 ;;		On exit  : 0/0
  8039 ;;		Unchanged: 0/0
  8040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8041 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8042 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8043 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8044 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8045 ;;Total ram usage:        4 bytes
  8046 ;; Hardware stack levels used:    1
  8047 ;; Hardware stack levels required when called:    6
  8048 ;; This function calls:
  8049 ;;		Nothing
  8050 ;; This function is called by:
  8051 ;;		_wr1RegCompleteHandler
  8052 ;;		_i2c_writeNBytes
  8053 ;;		_rd1RegCompleteHandler
  8054 ;;		_rd2RegCompleteHandler
  8055 ;;		_wr2RegCompleteHandler
  8056 ;;		_rdBlkRegCompleteHandler
  8057 ;;		_i2c_write1ByteRegister
  8058 ;;		_i2c_read1ByteRegister
  8059 ;;		_i2c_read2ByteRegister
  8060 ;;		_i2c_write2ByteRegister
  8061 ;;		_i2c_readDataBlock
  8062 ;;		_i2c_readNBytes
  8063 ;; This function uses a non-reentrant model
  8064 ;;
  8065                           
  8066                           
  8067                           ;psect for function _i2c_setBuffer
  8068  073C                     _i2c_setBuffer:	
  8069                           
  8070                           ;incstack = 0
  8071                           ; Regs used in _i2c_setBuffer: [wreg]
  8072                           ;i2c_setBuffer@buffer stored from wreg
  8073  073C  0020               	movlb	0	; select bank0
  8074  073D  00CE               	movwf	i2c_setBuffer@buffer
  8075                           
  8076                           ;i2c_master.c: 186: if(i2c_status.bufferFree)
  8077  073E  1D20               	btfss	_i2c_status,2
  8078  073F  0008               	return
  8079                           
  8080                           ;i2c_master.c: 187: {
  8081                           ;i2c_master.c: 188: i2c_status.data_ptr = buffer;
  8082  0740  084E               	movf	i2c_setBuffer@buffer,w
  8083  0741  00CD               	movwf	??_i2c_setBuffer
  8084  0742  084D               	movf	??_i2c_setBuffer,w
  8085  0743  00A2               	movwf	low ((_i2c_status| 0+2))
  8086                           
  8087                           ;i2c_master.c: 189: i2c_status.data_length = bufferSize;
  8088  0744  084C               	movf	i2c_setBuffer@bufferSize+1,w
  8089  0745  00A4               	movwf	_i2c_status+4
  8090  0746  084B               	movf	i2c_setBuffer@bufferSize,w
  8091  0747  00A3               	movwf	_i2c_status+3
  8092                           
  8093                           ;i2c_master.c: 190: i2c_status.bufferFree = 0;
  8094  0748  1120               	bcf	_i2c_status,2
  8095  0749  0008               	return
  8096  074A                     __end_of_i2c_setBuffer:	
  8097                           
  8098                           	psect	text52
  8099  0F2C                     __ptext52:	
  8100 ;; *************** function _i2c_driver_stop *****************
  8101 ;; Defined at:
  8102 ;;		line 156 in file "mcc_generated_files/i2c_driver.c"
  8103 ;; Parameters:    Size  Location     Type
  8104 ;;		None
  8105 ;; Auto vars:     Size  Location     Type
  8106 ;;		None
  8107 ;; Return value:  Size  Location     Type
  8108 ;;                  1    wreg      void 
  8109 ;; Registers used:
  8110 ;;		None
  8111 ;; Tracked objects:
  8112 ;;		On entry : 0/0
  8113 ;;		On exit  : 0/0
  8114 ;;		Unchanged: 0/0
  8115 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8116 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8117 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8118 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8119 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8120 ;;Total ram usage:        0 bytes
  8121 ;; Hardware stack levels used:    1
  8122 ;; Hardware stack levels required when called:    6
  8123 ;; This function calls:
  8124 ;;		Nothing
  8125 ;; This function is called by:
  8126 ;;		_do_I2C_SEND_STOP
  8127 ;; This function uses a non-reentrant model
  8128 ;;
  8129                           
  8130                           
  8131                           ;psect for function _i2c_driver_stop
  8132  0F2C                     _i2c_driver_stop:	
  8133                           
  8134                           ;i2c_driver.c: 158: SSP1CON2bits.PEN = 1;
  8135                           
  8136                           ;incstack = 0
  8137                           ; Regs used in _i2c_driver_stop: []
  8138  0F2C  0024               	movlb	4	; select bank4
  8139  0F2D  1516               	bsf	22,2	;volatile
  8140  0F2E  0008               	return
  8141  0F2F                     __end_of_i2c_driver_stop:	
  8142                           
  8143                           	psect	text53
  8144  0F29                     __ptext53:	
  8145 ;; *************** function _i2c_driver_restart *****************
  8146 ;; Defined at:
  8147 ;;		line 151 in file "mcc_generated_files/i2c_driver.c"
  8148 ;; Parameters:    Size  Location     Type
  8149 ;;		None
  8150 ;; Auto vars:     Size  Location     Type
  8151 ;;		None
  8152 ;; Return value:  Size  Location     Type
  8153 ;;                  1    wreg      void 
  8154 ;; Registers used:
  8155 ;;		None
  8156 ;; Tracked objects:
  8157 ;;		On entry : 0/0
  8158 ;;		On exit  : 0/0
  8159 ;;		Unchanged: 0/0
  8160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8161 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8162 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8163 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8164 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8165 ;;Total ram usage:        0 bytes
  8166 ;; Hardware stack levels used:    1
  8167 ;; Hardware stack levels required when called:    6
  8168 ;; This function calls:
  8169 ;;		Nothing
  8170 ;; This function is called by:
  8171 ;;		_do_I2C_SEND_RESTART_READ
  8172 ;;		_do_I2C_SEND_RESTART_WRITE
  8173 ;;		_do_I2C_SEND_RESTART
  8174 ;; This function uses a non-reentrant model
  8175 ;;
  8176                           
  8177                           
  8178                           ;psect for function _i2c_driver_restart
  8179  0F29                     _i2c_driver_restart:	
  8180                           
  8181                           ;i2c_driver.c: 153: SSP1CON2bits.RSEN = 1;
  8182                           
  8183                           ;incstack = 0
  8184                           ; Regs used in _i2c_driver_restart: []
  8185  0F29  0024               	movlb	4	; select bank4
  8186  0F2A  1496               	bsf	22,1	;volatile
  8187  0F2B  0008               	return
  8188  0F2C                     __end_of_i2c_driver_restart:	
  8189                           
  8190                           	psect	text54
  8191  0F5C                     __ptext54:	
  8192 ;; *************** function _i2c_driver_sendACK *****************
  8193 ;; Defined at:
  8194 ;;		line 196 in file "mcc_generated_files/i2c_driver.c"
  8195 ;; Parameters:    Size  Location     Type
  8196 ;;		None
  8197 ;; Auto vars:     Size  Location     Type
  8198 ;;		None
  8199 ;; Return value:  Size  Location     Type
  8200 ;;                  1    wreg      void 
  8201 ;; Registers used:
  8202 ;;		None
  8203 ;; Tracked objects:
  8204 ;;		On entry : 0/0
  8205 ;;		On exit  : 0/0
  8206 ;;		Unchanged: 0/0
  8207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8208 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8209 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8210 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8211 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8212 ;;Total ram usage:        0 bytes
  8213 ;; Hardware stack levels used:    1
  8214 ;; Hardware stack levels required when called:    6
  8215 ;; This function calls:
  8216 ;;		Nothing
  8217 ;; This function is called by:
  8218 ;;		_do_I2C_DO_ACK
  8219 ;;		_do_I2C_RX
  8220 ;; This function uses a non-reentrant model
  8221 ;;
  8222                           
  8223                           
  8224                           ;psect for function _i2c_driver_sendACK
  8225  0F5C                     _i2c_driver_sendACK:	
  8226                           
  8227                           ;i2c_driver.c: 198: SSP1CON2bits.ACKDT = 0;
  8228                           
  8229                           ;incstack = 0
  8230                           ; Regs used in _i2c_driver_sendACK: []
  8231  0F5C  0024               	movlb	4	; select bank4
  8232  0F5D  1296               	bcf	22,5	;volatile
  8233                           
  8234                           ;i2c_driver.c: 199: SSP1CON2bits.ACKEN = 1;
  8235  0F5E  1616               	bsf	22,4	;volatile
  8236  0F5F  0008               	return
  8237  0F60                     __end_of_i2c_driver_sendACK:	
  8238                           
  8239                           	psect	text55
  8240  0F26                     __ptext55:	
  8241 ;; *************** function _i2c_driver_start *****************
  8242 ;; Defined at:
  8243 ;;		line 146 in file "mcc_generated_files/i2c_driver.c"
  8244 ;; Parameters:    Size  Location     Type
  8245 ;;		None
  8246 ;; Auto vars:     Size  Location     Type
  8247 ;;		None
  8248 ;; Return value:  Size  Location     Type
  8249 ;;                  1    wreg      void 
  8250 ;; Registers used:
  8251 ;;		None
  8252 ;; Tracked objects:
  8253 ;;		On entry : 0/0
  8254 ;;		On exit  : 0/0
  8255 ;;		Unchanged: 0/0
  8256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8257 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8258 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8259 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8260 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8261 ;;Total ram usage:        0 bytes
  8262 ;; Hardware stack levels used:    1
  8263 ;; Hardware stack levels required when called:    6
  8264 ;; This function calls:
  8265 ;;		Nothing
  8266 ;; This function is called by:
  8267 ;;		_i2c_masterOperation
  8268 ;; This function uses a non-reentrant model
  8269 ;;
  8270                           
  8271                           
  8272                           ;psect for function _i2c_driver_start
  8273  0F26                     _i2c_driver_start:	
  8274                           
  8275                           ;i2c_driver.c: 148: SSP1CON2bits.SEN = 1;
  8276                           
  8277                           ;incstack = 0
  8278                           ; Regs used in _i2c_driver_start: []
  8279  0F26  0024               	movlb	4	; select bank4
  8280  0F27  1416               	bsf	22,0	;volatile
  8281  0F28  0008               	return
  8282  0F29                     __end_of_i2c_driver_start:	
  8283                           
  8284                           	psect	text56
  8285  06D4                     __ptext56:	
  8286 ;; *************** function _i2c_close *****************
  8287 ;; Defined at:
  8288 ;;		line 162 in file "mcc_generated_files/drivers/i2c_master.c"
  8289 ;; Parameters:    Size  Location     Type
  8290 ;;		None
  8291 ;; Auto vars:     Size  Location     Type
  8292 ;;  ret             1    2[BANK0 ] enum E12166
  8293 ;; Return value:  Size  Location     Type
  8294 ;;                  1    wreg      enum E92
  8295 ;; Registers used:
  8296 ;;		wreg, status,2, status,0, pclath, cstack
  8297 ;; Tracked objects:
  8298 ;;		On entry : 0/0
  8299 ;;		On exit  : 0/0
  8300 ;;		Unchanged: 0/0
  8301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8302 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8303 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8304 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8305 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8306 ;;Total ram usage:        2 bytes
  8307 ;; Hardware stack levels used:    1
  8308 ;; Hardware stack levels required when called:    7
  8309 ;; This function calls:
  8310 ;;		_mssp_clearIRQ
  8311 ;;		_mssp_disableIRQ
  8312 ;; This function is called by:
  8313 ;;		_i2c_writeNBytes
  8314 ;;		_i2c_write1ByteRegister
  8315 ;;		_i2c_read1ByteRegister
  8316 ;;		_i2c_read2ByteRegister
  8317 ;;		_i2c_write2ByteRegister
  8318 ;;		_i2c_readDataBlock
  8319 ;;		_i2c_readNBytes
  8320 ;; This function uses a non-reentrant model
  8321 ;;
  8322                           
  8323                           
  8324                           ;psect for function _i2c_close
  8325  06D4                     _i2c_close:	
  8326                           
  8327                           ;i2c_master.c: 164: i2c_error_t ret = I2C_BUSY;
  8328                           
  8329                           ;incstack = 0
  8330                           ; Regs used in _i2c_close: [wreg+status,2+status,0+pclath+cstack]
  8331  06D4  0020               	movlb	0	; select bank0
  8332  06D5  01CC               	clrf	i2c_close@ret
  8333  06D6  0ACC               	incf	i2c_close@ret,f
  8334                           
  8335                           ;i2c_master.c: 165: if(!i2c_status.busy)
  8336  06D7  1820               	btfsc	_i2c_status,0
  8337  06D8  2EE8               	goto	l524
  8338                           
  8339                           ;i2c_master.c: 166: {
  8340                           ;i2c_master.c: 167: i2c_status.inUse = 0;
  8341  06D9  10A0               	bcf	_i2c_status,1
  8342                           
  8343                           ;i2c_master.c: 169: i2c_status.address = 0xff;
  8344  06DA  30FF               	movlw	255
  8345  06DB  00CB               	movwf	??_i2c_close
  8346  06DC  084B               	movf	??_i2c_close,w
  8347  06DD  00A1               	movwf	_i2c_status+1
  8348                           
  8349                           ;i2c_master.c: 170: mssp_clearIRQ();
  8350  06DE  318F  2720  3186   	fcall	_mssp_clearIRQ
  8351                           
  8352                           ;i2c_master.c: 171: mssp_disableIRQ();
  8353  06E1  318F  2723         	fcall	_mssp_disableIRQ
  8354                           
  8355                           ;i2c_master.c: 172: ret = i2c_status.error;
  8356  06E3  0020               	movlb	0	; select bank0
  8357  06E4  082A               	movf	_i2c_status+10,w
  8358  06E5  00CB               	movwf	??_i2c_close
  8359  06E6  084B               	movf	??_i2c_close,w
  8360  06E7  00CC               	movwf	i2c_close@ret
  8361  06E8                     l524:	
  8362                           
  8363                           ;i2c_master.c: 173: }
  8364                           ;i2c_master.c: 174: return ret;
  8365  06E8  084C               	movf	i2c_close@ret,w
  8366  06E9  0008               	return
  8367  06EA                     __end_of_i2c_close:	
  8368                           
  8369                           	psect	text57
  8370  0F23                     __ptext57:	
  8371 ;; *************** function _mssp_disableIRQ *****************
  8372 ;; Defined at:
  8373 ;;		line 48 in file "mcc_generated_files/i2c_driver.c"
  8374 ;; Parameters:    Size  Location     Type
  8375 ;;		None
  8376 ;; Auto vars:     Size  Location     Type
  8377 ;;		None
  8378 ;; Return value:  Size  Location     Type
  8379 ;;                  1    wreg      void 
  8380 ;; Registers used:
  8381 ;;		None
  8382 ;; Tracked objects:
  8383 ;;		On entry : 0/0
  8384 ;;		On exit  : 0/0
  8385 ;;		Unchanged: 0/0
  8386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8387 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8388 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8390 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8391 ;;Total ram usage:        0 bytes
  8392 ;; Hardware stack levels used:    1
  8393 ;; Hardware stack levels required when called:    6
  8394 ;; This function calls:
  8395 ;;		Nothing
  8396 ;; This function is called by:
  8397 ;;		_i2c_close
  8398 ;;		_i2c_setTimeOut
  8399 ;; This function uses a non-reentrant model
  8400 ;;
  8401                           
  8402                           
  8403                           ;psect for function _mssp_disableIRQ
  8404  0F23                     _mssp_disableIRQ:	
  8405                           
  8406                           ;i2c_driver.c: 50: PIE1bits.SSP1IE = 0;
  8407                           
  8408                           ;incstack = 0
  8409                           ; Regs used in _mssp_disableIRQ: []
  8410  0F23  0021               	movlb	1	; select bank1
  8411  0F24  1190               	bcf	16,3	;volatile
  8412  0F25  0008               	return
  8413  0F26                     __end_of_mssp_disableIRQ:	
  8414                           
  8415                           	psect	text58
  8416  0F20                     __ptext58:	
  8417 ;; *************** function _mssp_clearIRQ *****************
  8418 ;; Defined at:
  8419 ;;		line 53 in file "mcc_generated_files/i2c_driver.c"
  8420 ;; Parameters:    Size  Location     Type
  8421 ;;		None
  8422 ;; Auto vars:     Size  Location     Type
  8423 ;;		None
  8424 ;; Return value:  Size  Location     Type
  8425 ;;                  1    wreg      void 
  8426 ;; Registers used:
  8427 ;;		None
  8428 ;; Tracked objects:
  8429 ;;		On entry : 0/0
  8430 ;;		On exit  : 0/0
  8431 ;;		Unchanged: 0/0
  8432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8433 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8434 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8435 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8436 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8437 ;;Total ram usage:        0 bytes
  8438 ;; Hardware stack levels used:    1
  8439 ;; Hardware stack levels required when called:    6
  8440 ;; This function calls:
  8441 ;;		Nothing
  8442 ;; This function is called by:
  8443 ;;		_i2c_open
  8444 ;;		_i2c_close
  8445 ;;		_i2c_ISR
  8446 ;; This function uses a non-reentrant model
  8447 ;;
  8448                           
  8449                           
  8450                           ;psect for function _mssp_clearIRQ
  8451  0F20                     _mssp_clearIRQ:	
  8452                           
  8453                           ;i2c_driver.c: 55: PIR1bits.SSP1IF = 0;
  8454                           
  8455                           ;incstack = 0
  8456                           ; Regs used in _mssp_clearIRQ: []
  8457  0F20  0020               	movlb	0	; select bank0
  8458  0F21  1190               	bcf	16,3	;volatile
  8459  0F22  0008               	return
  8460  0F23                     __end_of_mssp_clearIRQ:	
  8461                           
  8462                           	psect	text59
  8463  060A                     __ptext59:	
  8464 ;; *************** function _drawWalls *****************
  8465 ;; Defined at:
  8466 ;;		line 129 in file "main.c"
  8467 ;; Parameters:    Size  Location     Type
  8468 ;;		None
  8469 ;; Auto vars:     Size  Location     Type
  8470 ;;		None
  8471 ;; Return value:  Size  Location     Type
  8472 ;;                  1    wreg      void 
  8473 ;; Registers used:
  8474 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8475 ;; Tracked objects:
  8476 ;;		On entry : 0/0
  8477 ;;		On exit  : 0/0
  8478 ;;		Unchanged: 0/0
  8479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8480 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8481 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8482 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8483 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8484 ;;Total ram usage:        2 bytes
  8485 ;; Hardware stack levels used:    1
  8486 ;; Hardware stack levels required when called:    7
  8487 ;; This function calls:
  8488 ;;		_reverse
  8489 ;; This function is called by:
  8490 ;;		_main
  8491 ;; This function uses a non-reentrant model
  8492 ;;
  8493                           
  8494                           
  8495                           ;psect for function _drawWalls
  8496  060A                     _drawWalls:	
  8497                           
  8498                           ;main.c: 130: for (i = 0; i < 8; i++) {
  8499                           
  8500                           ;incstack = 0
  8501                           ; Regs used in _drawWalls: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8502  060A  0020               	movlb	0	; select bank0
  8503  060B  01C5               	clrf	_i
  8504  060C                     L2:	
  8505  060C  3008               	movlw	8
  8506  060D  0245               	subwf	_i,w
  8507  060E  1803               	btfsc	3,0
  8508  060F  0008               	return
  8509                           
  8510                           ;main.c: 131: pixelbuffer[i] |= reverse(walls[i]);
  8511  0610  0845               	movf	_i,w
  8512  0611  3EB0               	addlw	(low (_walls| 0))& (0+255)
  8513  0612  0086               	movwf	6
  8514  0613  0187               	clrf	7
  8515  0614  0801               	movf	1,w
  8516  0615  3184  243B  3186   	fcall	_reverse
  8517  0618  0020               	movlb	0	; select bank0
  8518  0619  00CF               	movwf	??_drawWalls
  8519  061A  01D0               	clrf	??_drawWalls+1
  8520  061B  3545               	lslf	_i,w
  8521  061C  3EA0               	addlw	(low (_pixelbuffer| 0))& (0+255)
  8522  061D  0086               	movwf	6
  8523  061E  0187               	clrf	7
  8524  061F  084F               	movf	??_drawWalls,w
  8525  0620  0481               	iorwf	1,f
  8526  0621  3141               	addfsr 1,1
  8527  0622  0850               	movf	??_drawWalls+1,w
  8528  0623  0481               	iorwf	1,f
  8529  0624  3001               	movlw	1
  8530  0625  00CF               	movwf	??_drawWalls
  8531  0626  084F               	movf	??_drawWalls,w
  8532  0627  07C5               	addwf	_i,f
  8533  0628  2E0C               	goto	L2
  8534  0629                     __end_of_drawWalls:	
  8535                           
  8536                           	psect	text60
  8537  043B                     __ptext60:	
  8538 ;; *************** function _reverse *****************
  8539 ;; Defined at:
  8540 ;;		line 122 in file "main.c"
  8541 ;; Parameters:    Size  Location     Type
  8542 ;;  b               1    wreg     unsigned char 
  8543 ;; Auto vars:     Size  Location     Type
  8544 ;;  b               1    4[BANK0 ] unsigned char 
  8545 ;; Return value:  Size  Location     Type
  8546 ;;                  1    wreg      unsigned char 
  8547 ;; Registers used:
  8548 ;;		wreg, status,2, status,0
  8549 ;; Tracked objects:
  8550 ;;		On entry : 0/0
  8551 ;;		On exit  : 0/0
  8552 ;;		Unchanged: 0/0
  8553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8554 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8555 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8556 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8557 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8558 ;;Total ram usage:        4 bytes
  8559 ;; Hardware stack levels used:    1
  8560 ;; Hardware stack levels required when called:    6
  8561 ;; This function calls:
  8562 ;;		Nothing
  8563 ;; This function is called by:
  8564 ;;		_drawWalls
  8565 ;; This function uses a non-reentrant model
  8566 ;;
  8567                           
  8568                           
  8569                           ;psect for function _reverse
  8570  043B                     _reverse:	
  8571                           
  8572                           ;incstack = 0
  8573                           ; Regs used in _reverse: [wreg+status,2+status,0]
  8574                           ;reverse@b stored from wreg
  8575  043B  0020               	movlb	0	; select bank0
  8576  043C  00CE               	movwf	reverse@b
  8577                           
  8578                           ;main.c: 123: b = (b & 0xF0) >> 4 | (b & 0x0F) << 4;
  8579  043D  084E               	movf	reverse@b,w
  8580  043E  390F               	andlw	15
  8581  043F  00CB               	movwf	??_reverse
  8582  0440  3004               	movlw	4
  8583  0441                     u1165:	
  8584  0441  35CB               	lslf	??_reverse,f
  8585  0442  0B89               	decfsz	9,f
  8586  0443  2C41               	goto	u1165
  8587  0444  084E               	movf	reverse@b,w
  8588  0445  00CC               	movwf	??_reverse+1
  8589  0446  3004               	movlw	4
  8590  0447                     u1175:	
  8591  0447  36CC               	lsrf	??_reverse+1,f
  8592  0448  0B89               	decfsz	9,f
  8593  0449  2C47               	goto	u1175
  8594  044A  084C               	movf	??_reverse+1,w
  8595  044B  390F               	andlw	15
  8596  044C  044B               	iorwf	??_reverse,w
  8597  044D  00CD               	movwf	??_reverse+2
  8598  044E  084D               	movf	??_reverse+2,w
  8599  044F  00CE               	movwf	reverse@b
  8600                           
  8601                           ;main.c: 124: b = (b & 0xCC) >> 2 | (b & 0x33) << 2;
  8602  0450  084E               	movf	reverse@b,w
  8603  0451  3933               	andlw	51
  8604  0452  00CB               	movwf	??_reverse
  8605  0453  3002               	movlw	2
  8606  0454                     u1185:	
  8607  0454  35CB               	lslf	??_reverse,f
  8608  0455  0B89               	decfsz	9,f
  8609  0456  2C54               	goto	u1185
  8610  0457  084E               	movf	reverse@b,w
  8611  0458  00CC               	movwf	??_reverse+1
  8612  0459  3002               	movlw	2
  8613  045A                     u1195:	
  8614  045A  36CC               	lsrf	??_reverse+1,f
  8615  045B  0B89               	decfsz	9,f
  8616  045C  2C5A               	goto	u1195
  8617  045D  084C               	movf	??_reverse+1,w
  8618  045E  3933               	andlw	51
  8619  045F  044B               	iorwf	??_reverse,w
  8620  0460  00CD               	movwf	??_reverse+2
  8621  0461  084D               	movf	??_reverse+2,w
  8622  0462  00CE               	movwf	reverse@b
  8623                           
  8624                           ;main.c: 125: b = (b & 0xAA) >> 1 | (b & 0x55) << 1;
  8625  0463  084E               	movf	reverse@b,w
  8626  0464  3955               	andlw	85
  8627  0465  00CB               	movwf	??_reverse
  8628  0466  3001               	movlw	1
  8629  0467                     u1205:	
  8630  0467  35CB               	lslf	??_reverse,f
  8631  0468  0B89               	decfsz	9,f
  8632  0469  2C67               	goto	u1205
  8633  046A  364E               	lsrf	reverse@b,w
  8634  046B  3955               	andlw	85
  8635  046C  044B               	iorwf	??_reverse,w
  8636  046D  00CC               	movwf	??_reverse+1
  8637  046E  084C               	movf	??_reverse+1,w
  8638  046F  00CE               	movwf	reverse@b
  8639                           
  8640                           ;main.c: 126: return b;
  8641  0470  084E               	movf	reverse@b,w
  8642  0471  0008               	return
  8643  0472                     __end_of_reverse:	
  8644                           
  8645                           	psect	text61
  8646  004C                     __ptext61:	
  8647 ;; *************** function _drawPixel *****************
  8648 ;; Defined at:
  8649 ;;		line 79 in file "main.c"
  8650 ;; Parameters:    Size  Location     Type
  8651 ;;  x               1    wreg     unsigned char 
  8652 ;;  y               1    1[BANK0 ] unsigned char 
  8653 ;;  color           1    2[BANK0 ] unsigned char 
  8654 ;; Auto vars:     Size  Location     Type
  8655 ;;  x               1    9[BANK0 ] unsigned char 
  8656 ;; Return value:  Size  Location     Type
  8657 ;;                  1    wreg      void 
  8658 ;; Registers used:
  8659 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8660 ;; Tracked objects:
  8661 ;;		On entry : 0/0
  8662 ;;		On exit  : 0/0
  8663 ;;		Unchanged: 0/0
  8664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8665 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8666 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8667 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8668 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8669 ;;Total ram usage:        9 bytes
  8670 ;; Hardware stack levels used:    1
  8671 ;; Hardware stack levels required when called:    6
  8672 ;; This function calls:
  8673 ;;		Nothing
  8674 ;; This function is called by:
  8675 ;;		_main
  8676 ;; This function uses a non-reentrant model
  8677 ;;
  8678                           
  8679                           
  8680                           ;psect for function _drawPixel
  8681  004C                     _drawPixel:	
  8682                           
  8683                           ;incstack = 0
  8684                           ; Regs used in _drawPixel: [wreg+fsr1l+fsr1h+status,2+status,0]
  8685                           ;drawPixel@x stored from wreg
  8686  004C  0020               	movlb	0	; select bank0
  8687  004D  00D3               	movwf	drawPixel@x
  8688                           
  8689                           ;main.c: 80: if (color == 1) {
  8690  004E  034C               	decf	drawPixel@color,w
  8691  004F  1D03               	btfss	3,2
  8692  0050  287C               	goto	l2979
  8693                           
  8694                           ;main.c: 81: pixelbuffer[y] |= 1 << x;
  8695  0051  3001               	movlw	1
  8696  0052  00CD               	movwf	??_drawPixel
  8697  0053  3000               	movlw	0
  8698  0054  00CE               	movwf	??_drawPixel+1
  8699  0055  0A53               	incf	drawPixel@x,w
  8700  0056  2859               	goto	u1374
  8701  0057                     u1375:	
  8702  0057  35CD               	lslf	??_drawPixel,f
  8703  0058  0DCE               	rlf	??_drawPixel+1,f
  8704  0059                     u1374:	
  8705  0059  0B89               	decfsz	9,f
  8706  005A  2857               	goto	u1375
  8707  005B  354B               	lslf	drawPixel@y,w
  8708  005C  3EA0               	addlw	(low (_pixelbuffer| 0))& (0+255)
  8709  005D  0086               	movwf	6
  8710  005E  0187               	clrf	7
  8711  005F  084D               	movf	??_drawPixel,w
  8712  0060  0481               	iorwf	1,f
  8713  0061  3141               	addfsr 1,1
  8714  0062  084E               	movf	??_drawPixel+1,w
  8715  0063  0481               	iorwf	1,f
  8716                           
  8717                           ;main.c: 82: pixelbuffer[y] &= ~(1 << (x + 8));
  8718  0064  3001               	movlw	1
  8719  0065  00CD               	movwf	??_drawPixel
  8720  0066  3000               	movlw	0
  8721  0067  00CE               	movwf	??_drawPixel+1
  8722  0068  0853               	movf	drawPixel@x,w
  8723  0069  3E08               	addlw	8
  8724  006A  0A89               	incf	9,f
  8725  006B  286E               	goto	u1384
  8726  006C                     u1385:	
  8727  006C  35CD               	lslf	??_drawPixel,f
  8728  006D  0DCE               	rlf	??_drawPixel+1,f
  8729  006E                     u1384:	
  8730  006E  0B89               	decfsz	9,f
  8731  006F  286C               	goto	u1385
  8732  0070  09CD               	comf	??_drawPixel,f
  8733  0071  09CE               	comf	??_drawPixel+1,f
  8734  0072  354B               	lslf	drawPixel@y,w
  8735  0073  3EA0               	addlw	(low (_pixelbuffer| 0))& (0+255)
  8736  0074  0086               	movwf	6
  8737  0075  0187               	clrf	7
  8738  0076  084D               	movf	??_drawPixel,w
  8739  0077  0581               	andwf	1,f
  8740  0078  3141               	addfsr 1,1
  8741  0079  084E               	movf	??_drawPixel+1,w
  8742  007A  0581               	andwf	1,f
  8743                           
  8744                           ;main.c: 83: } else if (color == 2) {
  8745  007B  0008               	return
  8746  007C                     l2979:	
  8747  007C  3002               	movlw	2
  8748  007D  064C               	xorwf	drawPixel@color,w
  8749  007E  1D03               	btfss	3,2
  8750  007F  28AB               	goto	l2983
  8751                           
  8752                           ;main.c: 84: pixelbuffer[y] |= 1 << (x + 8);
  8753  0080  3001               	movlw	1
  8754  0081  00CD               	movwf	??_drawPixel
  8755  0082  3000               	movlw	0
  8756  0083  00CE               	movwf	??_drawPixel+1
  8757  0084  0853               	movf	drawPixel@x,w
  8758  0085  3E08               	addlw	8
  8759  0086  0A89               	incf	9,f
  8760  0087  288A               	goto	u1404
  8761  0088                     u1405:	
  8762  0088  35CD               	lslf	??_drawPixel,f
  8763  0089  0DCE               	rlf	??_drawPixel+1,f
  8764  008A                     u1404:	
  8765  008A  0B89               	decfsz	9,f
  8766  008B  2888               	goto	u1405
  8767  008C  354B               	lslf	drawPixel@y,w
  8768  008D  3EA0               	addlw	(low (_pixelbuffer| 0))& (0+255)
  8769  008E  0086               	movwf	6
  8770  008F  0187               	clrf	7
  8771  0090  084D               	movf	??_drawPixel,w
  8772  0091  0481               	iorwf	1,f
  8773  0092  3141               	addfsr 1,1
  8774  0093  084E               	movf	??_drawPixel+1,w
  8775  0094  0481               	iorwf	1,f
  8776                           
  8777                           ;main.c: 85: pixelbuffer[y] &= ~(1 << x);
  8778  0095  3001               	movlw	1
  8779  0096  00CD               	movwf	??_drawPixel
  8780  0097  3000               	movlw	0
  8781  0098  00CE               	movwf	??_drawPixel+1
  8782  0099  0A53               	incf	drawPixel@x,w
  8783  009A  289D               	goto	u1414
  8784  009B                     u1415:	
  8785  009B  35CD               	lslf	??_drawPixel,f
  8786  009C  0DCE               	rlf	??_drawPixel+1,f
  8787  009D                     u1414:	
  8788  009D  0B89               	decfsz	9,f
  8789  009E  289B               	goto	u1415
  8790  009F  09CD               	comf	??_drawPixel,f
  8791  00A0  09CE               	comf	??_drawPixel+1,f
  8792  00A1  354B               	lslf	drawPixel@y,w
  8793  00A2  3EA0               	addlw	(low (_pixelbuffer| 0))& (0+255)
  8794  00A3  0086               	movwf	6
  8795  00A4  0187               	clrf	7
  8796  00A5  084D               	movf	??_drawPixel,w
  8797  00A6  0581               	andwf	1,f
  8798  00A7  3141               	addfsr 1,1
  8799  00A8  084E               	movf	??_drawPixel+1,w
  8800  00A9  0581               	andwf	1,f
  8801                           
  8802                           ;main.c: 86: } else if (color == 3) {
  8803  00AA  0008               	return
  8804  00AB                     l2983:	
  8805  00AB  3003               	movlw	3
  8806  00AC  064C               	xorwf	drawPixel@color,w
  8807  00AD  1D03               	btfss	3,2
  8808  00AE  28D5               	goto	l2987
  8809                           
  8810                           ;main.c: 87: pixelbuffer[y] |= (1 << (x + 8)) | (1 << x);
  8811  00AF  3001               	movlw	1
  8812  00B0  00CD               	movwf	??_drawPixel
  8813  00B1  3000               	movlw	0
  8814  00B2  00CE               	movwf	??_drawPixel+1
  8815  00B3  0A53               	incf	drawPixel@x,w
  8816  00B4  28B7               	goto	u1434
  8817  00B5                     u1435:	
  8818  00B5  35CD               	lslf	??_drawPixel,f
  8819  00B6  0DCE               	rlf	??_drawPixel+1,f
  8820  00B7                     u1434:	
  8821  00B7  0B89               	decfsz	9,f
  8822  00B8  28B5               	goto	u1435
  8823  00B9  3001               	movlw	1
  8824  00BA  00CF               	movwf	??_drawPixel+2
  8825  00BB  3000               	movlw	0
  8826  00BC  00D0               	movwf	??_drawPixel+3
  8827  00BD  0853               	movf	drawPixel@x,w
  8828  00BE  3E08               	addlw	8
  8829  00BF  0A89               	incf	9,f
  8830  00C0  28C3               	goto	u1444
  8831  00C1                     u1445:	
  8832  00C1  35CF               	lslf	??_drawPixel+2,f
  8833  00C2  0DD0               	rlf	??_drawPixel+3,f
  8834  00C3                     u1444:	
  8835  00C3  0B89               	decfsz	9,f
  8836  00C4  28C1               	goto	u1445
  8837  00C5  084D               	movf	??_drawPixel,w
  8838  00C6  044F               	iorwf	??_drawPixel+2,w
  8839  00C7  00D1               	movwf	??_drawPixel+4
  8840  00C8  084E               	movf	??_drawPixel+1,w
  8841  00C9  0450               	iorwf	??_drawPixel+3,w
  8842  00CA  00D2               	movwf	??_drawPixel+5
  8843  00CB  354B               	lslf	drawPixel@y,w
  8844  00CC  3EA0               	addlw	(low (_pixelbuffer| 0))& (0+255)
  8845  00CD  0086               	movwf	6
  8846  00CE  0187               	clrf	7
  8847  00CF  0851               	movf	??_drawPixel+4,w
  8848  00D0  0481               	iorwf	1,f
  8849  00D1  3141               	addfsr 1,1
  8850  00D2  0852               	movf	??_drawPixel+5,w
  8851  00D3  0481               	iorwf	1,f
  8852                           
  8853                           ;main.c: 88: } else if (color == 0) {
  8854  00D4  0008               	return
  8855  00D5                     l2987:	
  8856  00D5  084C               	movf	drawPixel@color,w
  8857  00D6  1D03               	btfss	3,2
  8858  00D7  0008               	return
  8859                           
  8860                           ;main.c: 89: pixelbuffer[y] &= ~(1 << x) & ~(1 << (x + 8));
  8861  00D8  3001               	movlw	1
  8862  00D9  00CD               	movwf	??_drawPixel
  8863  00DA  3000               	movlw	0
  8864  00DB  00CE               	movwf	??_drawPixel+1
  8865  00DC  0853               	movf	drawPixel@x,w
  8866  00DD  3E08               	addlw	8
  8867  00DE  0A89               	incf	9,f
  8868  00DF  28E2               	goto	u1464
  8869  00E0                     u1465:	
  8870  00E0  35CD               	lslf	??_drawPixel,f
  8871  00E1  0DCE               	rlf	??_drawPixel+1,f
  8872  00E2                     u1464:	
  8873  00E2  0B89               	decfsz	9,f
  8874  00E3  28E0               	goto	u1465
  8875  00E4  09CD               	comf	??_drawPixel,f
  8876  00E5  09CE               	comf	??_drawPixel+1,f
  8877  00E6  3001               	movlw	1
  8878  00E7  00CF               	movwf	??_drawPixel+2
  8879  00E8  3000               	movlw	0
  8880  00E9  00D0               	movwf	??_drawPixel+3
  8881  00EA  0A53               	incf	drawPixel@x,w
  8882  00EB  28EE               	goto	u1474
  8883  00EC                     u1475:	
  8884  00EC  35CF               	lslf	??_drawPixel+2,f
  8885  00ED  0DD0               	rlf	??_drawPixel+3,f
  8886  00EE                     u1474:	
  8887  00EE  0B89               	decfsz	9,f
  8888  00EF  28EC               	goto	u1475
  8889  00F0  09CF               	comf	??_drawPixel+2,f
  8890  00F1  09D0               	comf	??_drawPixel+3,f
  8891  00F2  084D               	movf	??_drawPixel,w
  8892  00F3  054F               	andwf	??_drawPixel+2,w
  8893  00F4  00D1               	movwf	??_drawPixel+4
  8894  00F5  084E               	movf	??_drawPixel+1,w
  8895  00F6  0550               	andwf	??_drawPixel+3,w
  8896  00F7  00D2               	movwf	??_drawPixel+5
  8897  00F8  354B               	lslf	drawPixel@y,w
  8898  00F9  3EA0               	addlw	(low (_pixelbuffer| 0))& (0+255)
  8899  00FA  0086               	movwf	6
  8900  00FB  0187               	clrf	7
  8901  00FC  0851               	movf	??_drawPixel+4,w
  8902  00FD  0581               	andwf	1,f
  8903  00FE  3141               	addfsr 1,1
  8904  00FF  0852               	movf	??_drawPixel+5,w
  8905  0100  0581               	andwf	1,f
  8906  0101  0008               	return
  8907  0102                     __end_of_drawPixel:	
  8908                           
  8909                           	psect	text62
  8910  06EA                     __ptext62:	
  8911 ;; *************** function _clearPixels *****************
  8912 ;; Defined at:
  8913 ;;		line 93 in file "main.c"
  8914 ;; Parameters:    Size  Location     Type
  8915 ;;		None
  8916 ;; Auto vars:     Size  Location     Type
  8917 ;;		None
  8918 ;; Return value:  Size  Location     Type
  8919 ;;                  1    wreg      void 
  8920 ;; Registers used:
  8921 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8922 ;; Tracked objects:
  8923 ;;		On entry : 0/0
  8924 ;;		On exit  : 0/0
  8925 ;;		Unchanged: 0/0
  8926 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8927 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8928 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8929 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8930 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8931 ;;Total ram usage:        1 bytes
  8932 ;; Hardware stack levels used:    1
  8933 ;; Hardware stack levels required when called:    6
  8934 ;; This function calls:
  8935 ;;		Nothing
  8936 ;; This function is called by:
  8937 ;;		_main
  8938 ;; This function uses a non-reentrant model
  8939 ;;
  8940                           
  8941                           
  8942                           ;psect for function _clearPixels
  8943  06EA                     _clearPixels:	
  8944                           
  8945                           ;main.c: 94: for (i = 0; i < 8; i++) {
  8946                           
  8947                           ;incstack = 0
  8948                           ; Regs used in _clearPixels: [wreg+fsr1l+fsr1h+status,2+status,0]
  8949  06EA  0020               	movlb	0	; select bank0
  8950  06EB  01C5               	clrf	_i
  8951  06EC                     L3:	
  8952  06EC  3008               	movlw	8
  8953  06ED  0245               	subwf	_i,w
  8954  06EE  1803               	btfsc	3,0
  8955  06EF  0008               	return
  8956                           
  8957                           ;main.c: 95: pixelbuffer[i] = 0;
  8958  06F0  3545               	lslf	_i,w
  8959  06F1  3EA0               	addlw	(low (_pixelbuffer| 0))& (0+255)
  8960  06F2  0086               	movwf	6
  8961  06F3  0187               	clrf	7
  8962  06F4  3000               	movlw	0
  8963  06F5  3FC0               	movwi [0]fsr1
  8964  06F6  3FC1               	movwi [1]fsr1
  8965  06F7  3001               	movlw	1
  8966  06F8  00CB               	movwf	??_clearPixels
  8967  06F9  084B               	movf	??_clearPixels,w
  8968  06FA  07C5               	addwf	_i,f
  8969  06FB  2EEC               	goto	L3
  8970  06FC                     __end_of_clearPixels:	
  8971                           
  8972                           	psect	text63
  8973  0F7C                     __ptext63:	
  8974 ;; *************** function _SYSTEM_Initialize *****************
  8975 ;; Defined at:
  8976 ;;		line 77 in file "mcc_generated_files/mcc.c"
  8977 ;; Parameters:    Size  Location     Type
  8978 ;;		None
  8979 ;; Auto vars:     Size  Location     Type
  8980 ;;		None
  8981 ;; Return value:  Size  Location     Type
  8982 ;;                  1    wreg      void 
  8983 ;; Registers used:
  8984 ;;		wreg, status,2, status,0, pclath, cstack
  8985 ;; Tracked objects:
  8986 ;;		On entry : 0/0
  8987 ;;		On exit  : 0/0
  8988 ;;		Unchanged: 0/0
  8989 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8990 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8991 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8992 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8993 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8994 ;;Total ram usage:        0 bytes
  8995 ;; Hardware stack levels used:    1
  8996 ;; Hardware stack levels required when called:    7
  8997 ;; This function calls:
  8998 ;;		_OSCILLATOR_Initialize
  8999 ;;		_PIN_MANAGER_Initialize
  9000 ;; This function is called by:
  9001 ;;		_main
  9002 ;; This function uses a non-reentrant model
  9003 ;;
  9004                           
  9005                           
  9006                           ;psect for function _SYSTEM_Initialize
  9007  0F7C                     _SYSTEM_Initialize:	
  9008                           
  9009                           ;mcc.c: 79: PIN_MANAGER_Initialize();
  9010                           
  9011                           ;incstack = 0
  9012                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  9013  0F7C  3184  24EF  318F   	fcall	_PIN_MANAGER_Initialize
  9014                           
  9015                           ;mcc.c: 80: OSCILLATOR_Initialize();
  9016  0F7F  3187  27ED         	fcall	_OSCILLATOR_Initialize
  9017  0F81  0008               	return
  9018  0F82                     __end_of_SYSTEM_Initialize:	
  9019                           
  9020                           	psect	text64
  9021  04EF                     __ptext64:	
  9022 ;; *************** function _PIN_MANAGER_Initialize *****************
  9023 ;; Defined at:
  9024 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  9025 ;; Parameters:    Size  Location     Type
  9026 ;;		None
  9027 ;; Auto vars:     Size  Location     Type
  9028 ;;		None
  9029 ;; Return value:  Size  Location     Type
  9030 ;;                  1    wreg      void 
  9031 ;; Registers used:
  9032 ;;		wreg, status,2
  9033 ;; Tracked objects:
  9034 ;;		On entry : 0/0
  9035 ;;		On exit  : 0/0
  9036 ;;		Unchanged: 0/0
  9037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9038 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9039 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9040 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9041 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9042 ;;Total ram usage:        0 bytes
  9043 ;; Hardware stack levels used:    1
  9044 ;; Hardware stack levels required when called:    6
  9045 ;; This function calls:
  9046 ;;		Nothing
  9047 ;; This function is called by:
  9048 ;;		_SYSTEM_Initialize
  9049 ;; This function uses a non-reentrant model
  9050 ;;
  9051                           
  9052                           
  9053                           ;psect for function _PIN_MANAGER_Initialize
  9054  04EF                     _PIN_MANAGER_Initialize:	
  9055                           
  9056                           ;pin_manager.c: 57: LATA = 0x00;
  9057                           
  9058                           ;incstack = 0
  9059                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  9060  04EF  0022               	movlb	2	; select bank2
  9061  04F0  018C               	clrf	12	;volatile
  9062                           
  9063                           ;pin_manager.c: 58: LATB = 0x00;
  9064  04F1  018D               	clrf	13	;volatile
  9065                           
  9066                           ;pin_manager.c: 59: LATC = 0x00;
  9067  04F2  018E               	clrf	14	;volatile
  9068                           
  9069                           ;pin_manager.c: 64: TRISA = 0x37;
  9070  04F3  3037               	movlw	55
  9071  04F4  0021               	movlb	1	; select bank1
  9072  04F5  008C               	movwf	12	;volatile
  9073                           
  9074                           ;pin_manager.c: 65: TRISB = 0xF0;
  9075  04F6  30F0               	movlw	240
  9076  04F7  008D               	movwf	13	;volatile
  9077                           
  9078                           ;pin_manager.c: 66: TRISC = 0xFF;
  9079  04F8  30FF               	movlw	255
  9080  04F9  008E               	movwf	14	;volatile
  9081                           
  9082                           ;pin_manager.c: 71: ANSELC = 0xCF;
  9083  04FA  30CF               	movlw	207
  9084  04FB  0023               	movlb	3	; select bank3
  9085  04FC  008E               	movwf	14	;volatile
  9086                           
  9087                           ;pin_manager.c: 72: ANSELB = 0xA0;
  9088  04FD  30A0               	movlw	160
  9089  04FE  008D               	movwf	13	;volatile
  9090                           
  9091                           ;pin_manager.c: 73: ANSELA = 0x17;
  9092  04FF  3017               	movlw	23
  9093  0500  008C               	movwf	12	;volatile
  9094                           
  9095                           ;pin_manager.c: 78: WPUB = 0x00;
  9096  0501  0024               	movlb	4	; select bank4
  9097  0502  018D               	clrf	13	;volatile
  9098                           
  9099                           ;pin_manager.c: 79: WPUA = 0x00;
  9100  0503  018C               	clrf	12	;volatile
  9101                           
  9102                           ;pin_manager.c: 80: WPUC = 0x00;
  9103  0504  018E               	clrf	14	;volatile
  9104                           
  9105                           ;pin_manager.c: 81: OPTION_REGbits.nWPUEN = 1;
  9106  0505  0021               	movlb	1	; select bank1
  9107  0506  1795               	bsf	21,7	;volatile
  9108                           
  9109                           ;pin_manager.c: 86: ODCONA = 0x00;
  9110  0507  0025               	movlb	5	; select bank5
  9111  0508  018C               	clrf	12	;volatile
  9112                           
  9113                           ;pin_manager.c: 87: ODCONB = 0x00;
  9114  0509  018D               	clrf	13	;volatile
  9115                           
  9116                           ;pin_manager.c: 88: ODCONC = 0x00;
  9117  050A  018E               	clrf	14	;volatile
  9118                           
  9119                           ;pin_manager.c: 95: SSPCLKPPS = 0x0E;
  9120  050B  300E               	movlw	14
  9121  050C  003C               	movlb	28	; select bank28
  9122  050D  00A0               	movwf	32	;volatile
  9123                           
  9124                           ;pin_manager.c: 96: SSPDATPPS = 0x0C;
  9125  050E  300C               	movlw	12
  9126  050F  00A1               	movwf	33	;volatile
  9127                           
  9128                           ;pin_manager.c: 97: RB6PPS = 0x10;
  9129  0510  3010               	movlw	16
  9130  0511  003D               	movlb	29	; select bank29
  9131  0512  009E               	movwf	30	;volatile
  9132                           
  9133                           ;pin_manager.c: 98: RB4PPS = 0x11;
  9134  0513  3011               	movlw	17
  9135  0514  009C               	movwf	28	;volatile
  9136  0515  0008               	return
  9137  0516                     __end_of_PIN_MANAGER_Initialize:	
  9138                           
  9139                           	psect	text65
  9140  07ED                     __ptext65:	
  9141 ;; *************** function _OSCILLATOR_Initialize *****************
  9142 ;; Defined at:
  9143 ;;		line 83 in file "mcc_generated_files/mcc.c"
  9144 ;; Parameters:    Size  Location     Type
  9145 ;;		None
  9146 ;; Auto vars:     Size  Location     Type
  9147 ;;		None
  9148 ;; Return value:  Size  Location     Type
  9149 ;;                  1    wreg      void 
  9150 ;; Registers used:
  9151 ;;		wreg, status,2
  9152 ;; Tracked objects:
  9153 ;;		On entry : 0/0
  9154 ;;		On exit  : 0/0
  9155 ;;		Unchanged: 0/0
  9156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9157 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9158 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9159 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9160 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9161 ;;Total ram usage:        0 bytes
  9162 ;; Hardware stack levels used:    1
  9163 ;; Hardware stack levels required when called:    6
  9164 ;; This function calls:
  9165 ;;		Nothing
  9166 ;; This function is called by:
  9167 ;;		_SYSTEM_Initialize
  9168 ;; This function uses a non-reentrant model
  9169 ;;
  9170                           
  9171                           
  9172                           ;psect for function _OSCILLATOR_Initialize
  9173  07ED                     _OSCILLATOR_Initialize:	
  9174                           
  9175                           ;mcc.c: 86: OSCCON = 0x78;
  9176                           
  9177                           ;incstack = 0
  9178                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  9179  07ED  3078               	movlw	120
  9180  07EE  0021               	movlb	1	; select bank1
  9181  07EF  0099               	movwf	25	;volatile
  9182                           
  9183                           ;mcc.c: 88: OSCTUNE = 0x00;
  9184  07F0  0198               	clrf	24	;volatile
  9185                           
  9186                           ;mcc.c: 90: BORCON = 0x00;
  9187  07F1  0022               	movlb	2	; select bank2
  9188  07F2  0196               	clrf	22	;volatile
  9189  07F3                     l68:	
  9190                           ;mcc.c: 93: {
  9191                           
  9192                           ;mcc.c: 92: while(PLLR == 0)
  9193                           
  9194  07F3  0021               	movlb	1	; select bank1
  9195  07F4  1B1A               	btfsc	26,6	;volatile
  9196  07F5  0008               	return
  9197  07F6  2FF3               	goto	l68
  9198  07F7                     __end_of_OSCILLATOR_Initialize:	
  9199                           
  9200                           	psect	intentry
  9201  0004                     __pintentry:	
  9202 ;; *************** function _INTERRUPT_InterruptManager *****************
  9203 ;; Defined at:
  9204 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  9205 ;; Parameters:    Size  Location     Type
  9206 ;;		None
  9207 ;; Auto vars:     Size  Location     Type
  9208 ;;		None
  9209 ;; Return value:  Size  Location     Type
  9210 ;;                  1    wreg      void 
  9211 ;; Registers used:
  9212 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9213 ;; Tracked objects:
  9214 ;;		On entry : 0/0
  9215 ;;		On exit  : 0/0
  9216 ;;		Unchanged: 0/0
  9217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9219 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9220 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9221 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9222 ;;Total ram usage:        1 bytes
  9223 ;; Hardware stack levels used:    1
  9224 ;; Hardware stack levels required when called:    5
  9225 ;; This function calls:
  9226 ;;		Absolute function
  9227 ;;		_i2c_busCollisionISR
  9228 ;;		i1_i2c_ISR
  9229 ;; This function is called by:
  9230 ;;		Interrupt level 1
  9231 ;; This function uses a non-reentrant model
  9232 ;;
  9233                           
  9234  0004                     _INTERRUPT_InterruptManager:	
  9235                           
  9236                           ;incstack = 0
  9237  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  9238                           
  9239                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9240  0005  3180               	pagesel	$
  9241  0006  0020               	movlb	0	; select bank0
  9242  0007  087F               	movf	127,w
  9243  0008  00CA               	movwf	??_INTERRUPT_InterruptManager
  9244                           
  9245                           ;interrupt_manager.c: 54: if(INTCONbits.PEIE == 1)
  9246  0009  1F0B               	btfss	11,6	;volatile
  9247  000A  2822               	goto	i1l441
  9248                           
  9249                           ;interrupt_manager.c: 55: {
  9250                           ;interrupt_manager.c: 56: if(PIE2bits.BCL1IE == 1 && PIR2bits.BCL1IF == 1)
  9251  000B  0021               	movlb	1	; select bank1
  9252  000C  1D91               	btfss	17,3	;volatile
  9253  000D  2817               	goto	i1l436
  9254  000E  0020               	movlb	0	; select bank0
  9255  000F  1D91               	btfss	17,3	;volatile
  9256  0010  2817               	goto	i1l436
  9257                           
  9258                           ;interrupt_manager.c: 57: {
  9259                           ;interrupt_manager.c: 58: i2c_driver_busCollisionISR();
  9260  0011  0842               	movf	_i2c_driver_busCollisionISR+1,w
  9261  0012  008A               	movwf	10
  9262  0013  0841               	movf	_i2c_driver_busCollisionISR,w
  9263  0014  000A               	callw
  9264  0015  3180               	pagesel	$
  9265                           
  9266                           ;interrupt_manager.c: 59: }
  9267  0016  2822               	goto	i1l441
  9268  0017                     i1l436:	
  9269                           
  9270                           ;interrupt_manager.c: 60: else if(PIE1bits.SSP1IE == 1 && PIR1bits.SSP1IF == 1)
  9271  0017  0021               	movlb	1	; select bank1
  9272  0018  1D90               	btfss	16,3	;volatile
  9273  0019  2822               	goto	i1l441
  9274  001A  0020               	movlb	0	; select bank0
  9275  001B  1D90               	btfss	16,3	;volatile
  9276  001C  2822               	goto	i1l441
  9277                           
  9278                           ;interrupt_manager.c: 61: {
  9279                           ;interrupt_manager.c: 62: i2c_driver_i2cISR();
  9280  001D  0840               	movf	_i2c_driver_i2cISR+1,w
  9281  001E  008A               	movwf	10
  9282  001F  083F               	movf	_i2c_driver_i2cISR,w
  9283  0020  000A               	callw
  9284  0021  3180               	pagesel	$
  9285  0022                     i1l441:	
  9286                           ;interrupt_manager.c: 69: else
  9287                           ;interrupt_manager.c: 70: {
  9288                           
  9289                           ;interrupt_manager.c: 67: }
  9290                           ;interrupt_manager.c: 68: }
  9291                           
  9292                           ;interrupt_manager.c: 64: else
  9293                           ;interrupt_manager.c: 65: {
  9294                           
  9295                           ;interrupt_manager.c: 63: }
  9296                           
  9297  0022  0020               	movlb	0	; select bank0
  9298  0023  084A               	movf	??_INTERRUPT_InterruptManager,w
  9299  0024  00FF               	movwf	127
  9300  0025  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  9301  0026  0009               	retfie
  9302  0027                     __end_of_INTERRUPT_InterruptManager:	
  9303                           
  9304                           	psect	text67
  9305  0629                     __ptext67:	
  9306 ;; *************** function i1_i2c_ISR *****************
  9307 ;; Defined at:
  9308 ;;		line 419 in file "mcc_generated_files/drivers/i2c_master.c"
  9309 ;; Parameters:    Size  Location     Type
  9310 ;;		None
  9311 ;; Auto vars:     Size  Location     Type
  9312 ;;		None
  9313 ;; Return value:  Size  Location     Type
  9314 ;;                  1    wreg      void 
  9315 ;; Registers used:
  9316 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9317 ;; Tracked objects:
  9318 ;;		On entry : 0/0
  9319 ;;		On exit  : 0/0
  9320 ;;		Unchanged: 0/0
  9321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9322 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9323 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9324 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9325 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9326 ;;Total ram usage:        1 bytes
  9327 ;; Hardware stack levels used:    1
  9328 ;; Hardware stack levels required when called:    4
  9329 ;; This function calls:
  9330 ;;		i1_do_I2C_DO_ACK
  9331 ;;		i1_do_I2C_DO_ADDRESS_NACK
  9332 ;;		i1_do_I2C_DO_NACK_RESTART
  9333 ;;		i1_do_I2C_DO_NACK_STOP
  9334 ;;		i1_do_I2C_IDLE
  9335 ;;		i1_do_I2C_RCEN
  9336 ;;		i1_do_I2C_RESET
  9337 ;;		i1_do_I2C_RX
  9338 ;;		i1_do_I2C_SEND_ADR_READ
  9339 ;;		i1_do_I2C_SEND_ADR_WRITE
  9340 ;;		i1_do_I2C_SEND_RESTART
  9341 ;;		i1_do_I2C_SEND_RESTART_READ
  9342 ;;		i1_do_I2C_SEND_RESTART_WRITE
  9343 ;;		i1_do_I2C_SEND_STOP
  9344 ;;		i1_do_I2C_TX
  9345 ;;		i1_do_I2C_TX_EMPTY
  9346 ;;		i1_i2c_driver_isNACK
  9347 ;;		i1_mssp_clearIRQ
  9348 ;; This function is called by:
  9349 ;; This function uses a non-reentrant model
  9350 ;;
  9351                           
  9352                           
  9353                           ;psect for function i1_i2c_ISR
  9354  0629                     i1_i2c_ISR:	
  9355  0629                     i1l5069:	
  9356                           ;incstack = 0
  9357                           ; Regs used in i1_i2c_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9358                           
  9359                           
  9360                           ;i2c_master.c: 421: mssp_clearIRQ();
  9361  0629  318F  271D  3186   	fcall	i1_mssp_clearIRQ
  9362                           
  9363                           ;i2c_master.c: 427: if(i2c_status.addressNACKCheck && i2c_driver_isNACK())
  9364  062C  0020               	movlb	0	; select bank0
  9365  062D  1DA0               	btfss	_i2c_status,3
  9366  062E  2E39               	goto	i1l5077
  9367  062F  3187  278B  3186   	fcall	i1_i2c_driver_isNACK
  9368  0632  1C03               	btfss	3,0
  9369  0633  2E39               	goto	i1l5077
  9370                           
  9371                           ;i2c_master.c: 428: {
  9372                           ;i2c_master.c: 429: i2c_status.state = I2C_ADDRESS_NACK;
  9373  0634  300F               	movlw	15
  9374  0635  00FD               	movwf	??i1_i2c_ISR
  9375  0636  087D               	movf	??i1_i2c_ISR,w
  9376  0637  0020               	movlb	0	; select bank0
  9377  0638  00A9               	movwf	_i2c_status+9
  9378  0639                     i1l5077:	
  9379                           
  9380                           ;i2c_master.c: 430: }
  9381                           ;i2c_master.c: 432: i2c_status.state = fsmStateTable[i2c_status.state]();
  9382  0639  0020               	movlb	0	; select bank0
  9383  063A  3529               	lslf	_i2c_status+9,w
  9384  063B  3ECD               	addlw	(low (_fsmStateTable| 0))& (0+255)
  9385  063C  0086               	movwf	6
  9386  063D  0187               	clrf	7
  9387  063E  3F41               	moviw [1]fsr1
  9388  063F  008A               	movwf	10
  9389  0640  3F40               	moviw [0]fsr1
  9390  0641  000A               	callw
  9391  0642  3186               	pagesel	$
  9392  0643  00FD               	movwf	??i1_i2c_ISR
  9393  0644  087D               	movf	??i1_i2c_ISR,w
  9394  0645  0020               	movlb	0	; select bank0
  9395  0646  00A9               	movwf	_i2c_status+9
  9396  0647  0008               	return
  9397  0648                     __end_ofi1_i2c_ISR:	
  9398                           
  9399                           	psect	text68
  9400  0F1D                     __ptext68:	
  9401 ;; *************** function i1_mssp_clearIRQ *****************
  9402 ;; Defined at:
  9403 ;;		line 53 in file "mcc_generated_files/i2c_driver.c"
  9404 ;; Parameters:    Size  Location     Type
  9405 ;;		None
  9406 ;; Auto vars:     Size  Location     Type
  9407 ;;		None
  9408 ;; Return value:  Size  Location     Type
  9409 ;;                  1    wreg      void 
  9410 ;; Registers used:
  9411 ;;		None
  9412 ;; Tracked objects:
  9413 ;;		On entry : 0/0
  9414 ;;		On exit  : 0/0
  9415 ;;		Unchanged: 0/0
  9416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9417 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9418 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9419 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9420 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9421 ;;Total ram usage:        0 bytes
  9422 ;; Hardware stack levels used:    1
  9423 ;; This function calls:
  9424 ;;		Nothing
  9425 ;; This function is called by:
  9426 ;;		i1_i2c_ISR
  9427 ;; This function uses a non-reentrant model
  9428 ;;
  9429                           
  9430                           
  9431                           ;psect for function i1_mssp_clearIRQ
  9432  0F1D                     i1_mssp_clearIRQ:	
  9433                           
  9434                           ;i2c_driver.c: 55: PIR1bits.SSP1IF = 0;
  9435                           
  9436                           ;incstack = 0
  9437                           ; Regs used in i1_mssp_clearIRQ: []
  9438  0F1D  0020               	movlb	0	; select bank0
  9439  0F1E  1190               	bcf	16,3	;volatile
  9440  0F1F  0008               	return
  9441  0F20                     __end_ofi1_mssp_clearIRQ:	
  9442                           
  9443                           	psect	text69
  9444  03FD                     __ptext69:	
  9445 ;; *************** function i1_do_I2C_RX *****************
  9446 ;; Defined at:
  9447 ;;		line 357 in file "mcc_generated_files/drivers/i2c_master.c"
  9448 ;; Parameters:    Size  Location     Type
  9449 ;;		None
  9450 ;; Auto vars:     Size  Location     Type
  9451 ;;		None
  9452 ;; Return value:  Size  Location     Type
  9453 ;;                  1    wreg      enum E12337
  9454 ;; Registers used:
  9455 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9456 ;; Tracked objects:
  9457 ;;		On entry : 0/0
  9458 ;;		On exit  : 0/0
  9459 ;;		Unchanged: 0/0
  9460 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9461 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9462 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9463 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9464 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9465 ;;Total ram usage:        1 bytes
  9466 ;; Hardware stack levels used:    1
  9467 ;; Hardware stack levels required when called:    3
  9468 ;; This function calls:
  9469 ;;		Absolute function
  9470 ;;		i1_do_I2C_DO_NACK_RESTART
  9471 ;;		i1_do_I2C_DO_NACK_STOP
  9472 ;;		i1_i2c_driver_getRXData
  9473 ;;		i1_i2c_driver_sendACK
  9474 ;;		i1_i2c_restartWrite
  9475 ;;		i1_rd1RegCompleteHandler
  9476 ;;		i1_rd2RegCompleteHandler
  9477 ;;		i1_rdBlkRegCompleteHandler
  9478 ;;		i1_returnReset
  9479 ;;		i1_returnStop
  9480 ;;		i1_wr1RegCompleteHandler
  9481 ;;		i1_wr2RegCompleteHandler
  9482 ;; This function is called by:
  9483 ;; This function uses a non-reentrant model
  9484 ;;
  9485                           
  9486                           
  9487                           ;psect for function i1_do_I2C_RX
  9488  03FD                     i1_do_I2C_RX:	
  9489  03FD                     i1l4965:	
  9490                           ;incstack = 0
  9491                           ; Regs used in i1_do_I2C_RX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9492                           
  9493                           
  9494                           ;i2c_master.c: 359: *i2c_status.data_ptr++ = i2c_driver_getRXData();
  9495  03FD  318F  2717  3183   	fcall	i1_i2c_driver_getRXData
  9496  0400  00FA               	movwf	??i1_do_I2C_RX
  9497  0401  0020               	movlb	0	; select bank0
  9498  0402  0822               	movf	low ((_i2c_status| 0+2)),w
  9499  0403  0086               	movwf	6
  9500  0404  0187               	clrf	7
  9501  0405  087A               	movf	??i1_do_I2C_RX,w
  9502  0406  0081               	movwf	1
  9503  0407  3001               	movlw	1
  9504  0408  00FA               	movwf	??i1_do_I2C_RX
  9505  0409  087A               	movf	??i1_do_I2C_RX,w
  9506  040A  07A2               	addwf	low ((_i2c_status| 0+2)),f
  9507                           
  9508                           ;i2c_master.c: 360: if(--i2c_status.data_length)
  9509  040B  3001               	movlw	1
  9510  040C  02A3               	subwf	_i2c_status+3,f
  9511  040D  3000               	movlw	0
  9512  040E  3BA4               	subwfb	_i2c_status+4,f
  9513  040F  0823               	movf	_i2c_status+3,w
  9514  0410  0424               	iorwf	_i2c_status+4,w
  9515  0411  1903               	btfsc	3,2
  9516  0412  2C17               	goto	i1l614
  9517                           
  9518                           ;i2c_master.c: 361: {
  9519                           ;i2c_master.c: 362: i2c_driver_sendACK();
  9520  0413  318F  2738         	fcall	i1_i2c_driver_sendACK
  9521                           
  9522                           ;i2c_master.c: 363: return I2C_RCEN;
  9523  0415  3005               	movlw	5
  9524                           
  9525                           ;i2c_master.c: 364: }
  9526  0416  0008               	return
  9527  0417                     i1l614:	
  9528                           
  9529                           ;i2c_master.c: 365: else
  9530                           ;i2c_master.c: 366: {
  9531                           ;i2c_master.c: 367: i2c_status.bufferFree = 1;
  9532  0417  1520               	bsf	_i2c_status,2
  9533                           
  9534                           ;i2c_master.c: 368: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
  9535  0418  2C1F               	goto	i1l4989
  9536  0419                     i1l4979:	
  9537                           ;i2c_master.c: 369: {
  9538                           ;i2c_master.c: 370: case i2c_restart_write:
  9539                           
  9540                           
  9541                           ;i2c_master.c: 371: case i2c_restart_read:
  9542                           ;i2c_master.c: 372: return do_I2C_DO_NACK_RESTART();
  9543  0419  318F  2758         	fcall	i1_do_I2C_DO_NACK_RESTART
  9544  041B  0008               	return
  9545  041C                     i1l4983:	
  9546                           ;i2c_master.c: 374: case i2c_continue:
  9547                           
  9548                           ;i2c_master.c: 373: default:
  9549                           
  9550                           
  9551                           ;i2c_master.c: 375: case i2c_stop:
  9552                           ;i2c_master.c: 376: return do_I2C_DO_NACK_STOP();
  9553  041C  318F  2754         	fcall	i1_do_I2C_DO_NACK_STOP
  9554                           
  9555                           ;i2c_master.c: 377: }
  9556  041E  0008               	return
  9557  041F                     i1l4989:	
  9558  041F  0020               	movlb	0	; select bank0
  9559  0420  0837               	movf	low ((_i2c_status| 0+23)),w
  9560  0421  00FA               	movwf	??i1_do_I2C_RX
  9561  0422  087A               	movf	??i1_do_I2C_RX,w
  9562  0423  00F9               	movwf	i1returnStop@p
  9563  0424  300B               	movlw	11
  9564  0425  3E20               	addlw	(low (_i2c_status| 0))& (0+255)
  9565  0426  0086               	movwf	6
  9566  0427  0187               	clrf	7
  9567  0428  3F41               	moviw [1]fsr1
  9568  0429  008A               	movwf	10
  9569  042A  3F40               	moviw [0]fsr1
  9570  042B  000A               	callw
  9571  042C  3183               	pagesel	$
  9572                           
  9573                           ; Switch size 1, requested type "space"
  9574                           ; Number of cases is 4, Range of values is 1 to 4
  9575                           ; switch strategies available:
  9576                           ; Name         Instructions Cycles
  9577                           ; simple_byte           13     7 (average)
  9578                           ; direct_byte           17     9 (fixed)
  9579                           ; jumptable            263     9 (fixed)
  9580                           ;	Chosen strategy is simple_byte
  9581  042D  3A01               	xorlw	1	; case 1
  9582  042E  1903               	skipnz
  9583  042F  2C1C               	goto	i1l4983
  9584  0430  3A03               	xorlw	3	; case 2
  9585  0431  1903               	skipnz
  9586  0432  2C19               	goto	i1l4979
  9587  0433  3A01               	xorlw	1	; case 3
  9588  0434  1903               	skipnz
  9589  0435  2C19               	goto	i1l4979
  9590  0436  3A07               	xorlw	7	; case 4
  9591  0437  1903               	skipnz
  9592  0438  2C1C               	goto	i1l4983
  9593  0439  2C1C               	goto	i1l4983
  9594  043A  0008               	return
  9595  043B                     __end_ofi1_do_I2C_RX:	
  9596                           
  9597                           	psect	text70
  9598  0329                     __ptext70:	
  9599 ;; *************** function i1_do_I2C_TX *****************
  9600 ;; Defined at:
  9601 ;;		line 333 in file "mcc_generated_files/drivers/i2c_master.c"
  9602 ;; Parameters:    Size  Location     Type
  9603 ;;		None
  9604 ;; Auto vars:     Size  Location     Type
  9605 ;;		None
  9606 ;; Return value:  Size  Location     Type
  9607 ;;                  1    wreg      enum E12337
  9608 ;; Registers used:
  9609 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9610 ;; Tracked objects:
  9611 ;;		On entry : 0/0
  9612 ;;		On exit  : 0/0
  9613 ;;		Unchanged: 0/0
  9614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9615 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9616 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9617 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9618 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9619 ;;Total ram usage:        3 bytes
  9620 ;; Hardware stack levels used:    1
  9621 ;; Hardware stack levels required when called:    3
  9622 ;; This function calls:
  9623 ;;		Absolute function
  9624 ;;		i1_do_I2C_SEND_RESTART_READ
  9625 ;;		i1_do_I2C_SEND_RESTART_WRITE
  9626 ;;		i1_do_I2C_SEND_STOP
  9627 ;;		i1_i2c_driver_TXData
  9628 ;;		i1_i2c_driver_isNACK
  9629 ;;		i1_i2c_restartWrite
  9630 ;;		i1_rd1RegCompleteHandler
  9631 ;;		i1_rd2RegCompleteHandler
  9632 ;;		i1_rdBlkRegCompleteHandler
  9633 ;;		i1_returnReset
  9634 ;;		i1_returnStop
  9635 ;;		i1_wr1RegCompleteHandler
  9636 ;;		i1_wr2RegCompleteHandler
  9637 ;; This function is called by:
  9638 ;; This function uses a non-reentrant model
  9639 ;;
  9640                           
  9641                           
  9642                           ;psect for function i1_do_I2C_TX
  9643  0329                     i1_do_I2C_TX:	
  9644  0329                     i1l4935:	
  9645                           ;incstack = 0
  9646                           ; Regs used in i1_do_I2C_TX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9647                           
  9648                           
  9649                           ;i2c_master.c: 335: if(i2c_driver_isNACK())
  9650  0329  3187  278B  3183   	fcall	i1_i2c_driver_isNACK
  9651  032C  1803               	btfsc	3,0
  9652  032D  2B38               	goto	i1l4953
  9653  032E  2B54               	goto	i1l598
  9654  032F                     i1l4939:	
  9655                           ;i2c_master.c: 338: {
  9656                           ;i2c_master.c: 339: case i2c_restart_read:
  9657                           
  9658                           ;i2c_master.c: 336: {
  9659                           ;i2c_master.c: 337: switch(i2c_status.callbackTable[i2c_dataNACK](i2c_status.callbackPay
      +                          load[i2c_dataNACK]))
  9660                           
  9661                           
  9662                           ;i2c_master.c: 340: return do_I2C_SEND_RESTART_READ();
  9663  032F  318F  2740         	fcall	i1_do_I2C_SEND_RESTART_READ
  9664  0331  0008               	return
  9665  0332                     i1l4943:	
  9666                           ;i2c_master.c: 341: case i2c_restart_write:
  9667                           
  9668                           
  9669                           ;i2c_master.c: 342: return do_I2C_SEND_RESTART_WRITE();
  9670  0332  318F  2744         	fcall	i1_do_I2C_SEND_RESTART_WRITE
  9671  0334  0008               	return
  9672  0335                     i1l4947:	
  9673                           ;i2c_master.c: 344: case i2c_continue:
  9674                           
  9675                           ;i2c_master.c: 343: default:
  9676                           
  9677                           
  9678                           ;i2c_master.c: 345: case i2c_stop:
  9679                           ;i2c_master.c: 346: return do_I2C_SEND_STOP();
  9680  0335  318F  274C         	fcall	i1_do_I2C_SEND_STOP
  9681                           
  9682                           ;i2c_master.c: 347: }
  9683  0337  0008               	return
  9684  0338                     i1l4953:	
  9685  0338  0020               	movlb	0	; select bank0
  9686  0339  083A               	movf	low ((_i2c_status| 0+26)),w
  9687  033A  00FA               	movwf	??i1_do_I2C_TX
  9688  033B  087A               	movf	??i1_do_I2C_TX,w
  9689  033C  00F9               	movwf	i1returnStop@p
  9690  033D  3011               	movlw	17
  9691  033E  3E20               	addlw	(low (_i2c_status| 0))& (0+255)
  9692  033F  0086               	movwf	6
  9693  0340  0187               	clrf	7
  9694  0341  3F41               	moviw [1]fsr1
  9695  0342  008A               	movwf	10
  9696  0343  3F40               	moviw [0]fsr1
  9697  0344  000A               	callw
  9698  0345  3183               	pagesel	$
  9699                           
  9700                           ; Switch size 1, requested type "space"
  9701                           ; Number of cases is 4, Range of values is 1 to 4
  9702                           ; switch strategies available:
  9703                           ; Name         Instructions Cycles
  9704                           ; simple_byte           13     7 (average)
  9705                           ; direct_byte           17     9 (fixed)
  9706                           ; jumptable            263     9 (fixed)
  9707                           ;	Chosen strategy is simple_byte
  9708  0346  3A01               	xorlw	1	; case 1
  9709  0347  1903               	skipnz
  9710  0348  2B35               	goto	i1l4947
  9711  0349  3A03               	xorlw	3	; case 2
  9712  034A  1903               	skipnz
  9713  034B  2B2F               	goto	i1l4939
  9714  034C  3A01               	xorlw	1	; case 3
  9715  034D  1903               	skipnz
  9716  034E  2B32               	goto	i1l4943
  9717  034F  3A07               	xorlw	7	; case 4
  9718  0350  1903               	skipnz
  9719  0351  2B35               	goto	i1l4947
  9720  0352  2B35               	goto	i1l4947
  9721                           
  9722                           ;i2c_master.c: 348: }
  9723  0353  0008               	return
  9724  0354                     i1l598:	
  9725                           
  9726                           ;i2c_master.c: 349: else
  9727                           ;i2c_master.c: 350: {
  9728                           ;i2c_master.c: 351: i2c_status.addressNACKCheck = 0;
  9729  0354  0020               	movlb	0	; select bank0
  9730  0355  11A0               	bcf	_i2c_status,3
  9731                           
  9732                           ;i2c_master.c: 352: i2c_driver_TXData(*i2c_status.data_ptr++);
  9733  0356  3002               	movlw	2
  9734  0357  3E20               	addlw	(low (_i2c_status| 0))& (0+255)
  9735  0358  0086               	movwf	6
  9736  0359  0187               	clrf	7
  9737  035A  3F40               	moviw [0]fsr1
  9738  035B  0084               	movwf	4
  9739  035C  0185               	clrf	5
  9740  035D  0A81               	incf	1,f
  9741  035E  0800               	movf	0,w
  9742  035F  318F  276C  3183   	fcall	i1_i2c_driver_TXData
  9743                           
  9744                           ;i2c_master.c: 353: return (--i2c_status.data_length)?I2C_TX:I2C_TX_EMPTY;
  9745  0362  3001               	movlw	1
  9746  0363  0020               	movlb	0	; select bank0
  9747  0364  02A3               	subwf	_i2c_status+3,f
  9748  0365  3000               	movlw	0
  9749  0366  3BA4               	subwfb	_i2c_status+4,f
  9750  0367  0823               	movf	_i2c_status+3,w
  9751  0368  0424               	iorwf	_i2c_status+4,w
  9752  0369  1D03               	btfss	3,2
  9753  036A  2B6D               	goto	i1l4961
  9754  036B  3006               	movlw	6
  9755  036C  2B6E               	goto	L4
  9756  036D                     i1l4961:	
  9757  036D  3003               	movlw	3
  9758  036E                     L4:	
  9759  036E  00FB               	movwf	i1_do_I2C_TX$887
  9760  036F  3000               	movlw	0
  9761  0370  00FC               	movwf	i1_do_I2C_TX$887+1
  9762  0371  087B               	movf	i1_do_I2C_TX$887,w
  9763  0372  0008               	return
  9764  0373                     __end_ofi1_do_I2C_TX:	
  9765                           
  9766                           	psect	text71
  9767  05A8                     __ptext71:	
  9768 ;; *************** function i1_do_I2C_DO_ADDRESS_NACK *****************
  9769 ;; Defined at:
  9770 ;;		line 319 in file "mcc_generated_files/drivers/i2c_master.c"
  9771 ;; Parameters:    Size  Location     Type
  9772 ;;		None
  9773 ;; Auto vars:     Size  Location     Type
  9774 ;;		None
  9775 ;; Return value:  Size  Location     Type
  9776 ;;                  1    wreg      enum E12337
  9777 ;; Registers used:
  9778 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9779 ;; Tracked objects:
  9780 ;;		On entry : 0/0
  9781 ;;		On exit  : 0/0
  9782 ;;		Unchanged: 0/0
  9783 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9784 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9785 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9786 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9787 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9788 ;;Total ram usage:        1 bytes
  9789 ;; Hardware stack levels used:    1
  9790 ;; Hardware stack levels required when called:    3
  9791 ;; This function calls:
  9792 ;;		Absolute function
  9793 ;;		i1_do_I2C_SEND_RESTART
  9794 ;;		i1_do_I2C_SEND_STOP
  9795 ;;		i1_i2c_restartWrite
  9796 ;;		i1_rd1RegCompleteHandler
  9797 ;;		i1_rd2RegCompleteHandler
  9798 ;;		i1_rdBlkRegCompleteHandler
  9799 ;;		i1_returnReset
  9800 ;;		i1_returnStop
  9801 ;;		i1_wr1RegCompleteHandler
  9802 ;;		i1_wr2RegCompleteHandler
  9803 ;; This function is called by:
  9804 ;; This function uses a non-reentrant model
  9805 ;;
  9806                           
  9807                           
  9808                           ;psect for function i1_do_I2C_DO_ADDRESS_NACK
  9809  05A8                     i1_do_I2C_DO_ADDRESS_NACK:	
  9810  05A8                     i1l4919:	
  9811                           ;incstack = 0
  9812                           ; Regs used in i1_do_I2C_DO_ADDRESS_NACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9813                           
  9814                           
  9815                           ;i2c_master.c: 321: i2c_status.addressNACKCheck = 0;
  9816  05A8  0020               	movlb	0	; select bank0
  9817  05A9  11A0               	bcf	_i2c_status,3
  9818                           
  9819                           ;i2c_master.c: 322: i2c_status.error = I2C_FAIL;
  9820  05AA  3002               	movlw	2
  9821  05AB  00FA               	movwf	??i1_do_I2C_DO_ADDRESS_NACK
  9822  05AC  087A               	movf	??i1_do_I2C_DO_ADDRESS_NACK,w
  9823  05AD  00AA               	movwf	_i2c_status+10
  9824                           
  9825                           ;i2c_master.c: 323: switch(i2c_status.callbackTable[i2c_addressNACK](i2c_status.callback
      +                          Payload[i2c_addressNACK]))
  9826  05AE  2DB5               	goto	i1l4933
  9827  05AF                     i1l4923:	
  9828                           ;i2c_master.c: 324: {
  9829                           ;i2c_master.c: 325: case i2c_restart_read:
  9830                           
  9831                           
  9832                           ;i2c_master.c: 326: case i2c_restart_write:
  9833                           ;i2c_master.c: 327: return do_I2C_SEND_RESTART();
  9834  05AF  318F  2748         	fcall	i1_do_I2C_SEND_RESTART
  9835  05B1  0008               	return
  9836  05B2                     i1l4927:	
  9837                           ;i2c_master.c: 328: default:
  9838                           
  9839                           
  9840                           ;i2c_master.c: 329: return do_I2C_SEND_STOP();
  9841  05B2  318F  274C         	fcall	i1_do_I2C_SEND_STOP
  9842                           
  9843                           ;i2c_master.c: 330: }
  9844  05B4  0008               	return
  9845  05B5                     i1l4933:	
  9846  05B5  0020               	movlb	0	; select bank0
  9847  05B6  0839               	movf	low ((_i2c_status| 0+25)),w
  9848  05B7  00FA               	movwf	??i1_do_I2C_DO_ADDRESS_NACK
  9849  05B8  087A               	movf	??i1_do_I2C_DO_ADDRESS_NACK,w
  9850  05B9  00F9               	movwf	i1returnStop@p
  9851  05BA  300F               	movlw	15
  9852  05BB  3E20               	addlw	(low (_i2c_status| 0))& (0+255)
  9853  05BC  0086               	movwf	6
  9854  05BD  0187               	clrf	7
  9855  05BE  3F41               	moviw [1]fsr1
  9856  05BF  008A               	movwf	10
  9857  05C0  3F40               	moviw [0]fsr1
  9858  05C1  000A               	callw
  9859  05C2  3185               	pagesel	$
  9860                           
  9861                           ; Switch size 1, requested type "space"
  9862                           ; Number of cases is 2, Range of values is 2 to 3
  9863                           ; switch strategies available:
  9864                           ; Name         Instructions Cycles
  9865                           ; simple_byte            7     4 (average)
  9866                           ; direct_byte           13     9 (fixed)
  9867                           ; jumptable            263     9 (fixed)
  9868                           ;	Chosen strategy is simple_byte
  9869  05C3  3A02               	xorlw	2	; case 2
  9870  05C4  1903               	skipnz
  9871  05C5  2DAF               	goto	i1l4923
  9872  05C6  3A01               	xorlw	1	; case 3
  9873  05C7  1903               	skipnz
  9874  05C8  2DAF               	goto	i1l4923
  9875  05C9  2DB2               	goto	i1l4927
  9876  05CA  0008               	return
  9877  05CB                     __end_ofi1_do_I2C_DO_ADDRESS_NACK:	
  9878                           
  9879                           	psect	text72
  9880  0F58                     __ptext72:	
  9881 ;; *************** function i1_do_I2C_DO_NACK_RESTART *****************
  9882 ;; Defined at:
  9883 ;;		line 311 in file "mcc_generated_files/drivers/i2c_master.c"
  9884 ;; Parameters:    Size  Location     Type
  9885 ;;		None
  9886 ;; Auto vars:     Size  Location     Type
  9887 ;;		None
  9888 ;; Return value:  Size  Location     Type
  9889 ;;                  1    wreg      enum E12337
  9890 ;; Registers used:
  9891 ;;		wreg, status,2, status,0, pclath, cstack
  9892 ;; Tracked objects:
  9893 ;;		On entry : 0/0
  9894 ;;		On exit  : 0/0
  9895 ;;		Unchanged: 0/0
  9896 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9897 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9898 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9899 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9900 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9901 ;;Total ram usage:        0 bytes
  9902 ;; Hardware stack levels used:    1
  9903 ;; Hardware stack levels required when called:    1
  9904 ;; This function calls:
  9905 ;;		i1_i2c_driver_sendNACK
  9906 ;; This function is called by:
  9907 ;;		i1_do_I2C_RX
  9908 ;; This function uses a non-reentrant model
  9909 ;;
  9910                           
  9911                           
  9912                           ;psect for function i1_do_I2C_DO_NACK_RESTART
  9913  0F58                     i1_do_I2C_DO_NACK_RESTART:	
  9914  0F58                     i1l2699:	
  9915                           ;incstack = 0
  9916                           ; Regs used in i1_do_I2C_DO_NACK_RESTART: [wreg+status,2+status,0+pclath+cstack]
  9917                           
  9918                           
  9919                           ;i2c_master.c: 313: i2c_driver_sendNACK();
  9920  0F58  318F  273C         	fcall	i1_i2c_driver_sendNACK
  9921                           
  9922                           ;i2c_master.c: 314: return I2C_SEND_RESTART;
  9923  0F5A  3009               	movlw	9
  9924  0F5B  0008               	return
  9925  0F5C                     __end_ofi1_do_I2C_DO_NACK_RESTART:	
  9926                           
  9927                           	psect	text73
  9928  0F54                     __ptext73:	
  9929 ;; *************** function i1_do_I2C_DO_NACK_STOP *****************
  9930 ;; Defined at:
  9931 ;;		line 305 in file "mcc_generated_files/drivers/i2c_master.c"
  9932 ;; Parameters:    Size  Location     Type
  9933 ;;		None
  9934 ;; Auto vars:     Size  Location     Type
  9935 ;;		None
  9936 ;; Return value:  Size  Location     Type
  9937 ;;                  1    wreg      enum E12337
  9938 ;; Registers used:
  9939 ;;		wreg, status,2, status,0, pclath, cstack
  9940 ;; Tracked objects:
  9941 ;;		On entry : 0/0
  9942 ;;		On exit  : 0/0
  9943 ;;		Unchanged: 0/0
  9944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9945 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9946 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9947 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9948 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9949 ;;Total ram usage:        0 bytes
  9950 ;; Hardware stack levels used:    1
  9951 ;; Hardware stack levels required when called:    1
  9952 ;; This function calls:
  9953 ;;		i1_i2c_driver_sendNACK
  9954 ;; This function is called by:
  9955 ;;		i1_do_I2C_RX
  9956 ;; This function uses a non-reentrant model
  9957 ;;
  9958                           
  9959                           
  9960                           ;psect for function i1_do_I2C_DO_NACK_STOP
  9961  0F54                     i1_do_I2C_DO_NACK_STOP:	
  9962  0F54                     i1l2693:	
  9963                           ;incstack = 0
  9964                           ; Regs used in i1_do_I2C_DO_NACK_STOP: [wreg+status,2+status,0+pclath+cstack]
  9965                           
  9966                           
  9967                           ;i2c_master.c: 307: i2c_driver_sendNACK();
  9968  0F54  318F  273C         	fcall	i1_i2c_driver_sendNACK
  9969                           
  9970                           ;i2c_master.c: 308: return I2C_SEND_STOP;
  9971  0F56  300A               	movlw	10
  9972  0F57  0008               	return
  9973  0F58                     __end_ofi1_do_I2C_DO_NACK_STOP:	
  9974                           
  9975                           	psect	text74
  9976  0F50                     __ptext74:	
  9977 ;; *************** function i1_do_I2C_DO_ACK *****************
  9978 ;; Defined at:
  9979 ;;		line 299 in file "mcc_generated_files/drivers/i2c_master.c"
  9980 ;; Parameters:    Size  Location     Type
  9981 ;;		None
  9982 ;; Auto vars:     Size  Location     Type
  9983 ;;		None
  9984 ;; Return value:  Size  Location     Type
  9985 ;;                  1    wreg      enum E12337
  9986 ;; Registers used:
  9987 ;;		wreg, status,2, status,0, pclath, cstack
  9988 ;; Tracked objects:
  9989 ;;		On entry : 0/0
  9990 ;;		On exit  : 0/0
  9991 ;;		Unchanged: 0/0
  9992 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9993 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9994 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9995 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9996 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9997 ;;Total ram usage:        0 bytes
  9998 ;; Hardware stack levels used:    1
  9999 ;; Hardware stack levels required when called:    1
 10000 ;; This function calls:
 10001 ;;		i1_i2c_driver_sendACK
 10002 ;; This function is called by:
 10003 ;; This function uses a non-reentrant model
 10004 ;;
 10005                           
 10006                           
 10007                           ;psect for function i1_do_I2C_DO_ACK
 10008  0F50                     i1_do_I2C_DO_ACK:	
 10009  0F50                     i1l2859:	
 10010                           ;incstack = 0
 10011                           ; Regs used in i1_do_I2C_DO_ACK: [wreg+status,2+status,0+pclath+cstack]
 10012                           
 10013                           
 10014                           ;i2c_master.c: 301: i2c_driver_sendACK();
 10015  0F50  318F  2738         	fcall	i1_i2c_driver_sendACK
 10016                           
 10017                           ;i2c_master.c: 302: return I2C_RCEN;
 10018  0F52  3005               	movlw	5
 10019  0F53  0008               	return
 10020  0F54                     __end_ofi1_do_I2C_DO_ACK:	
 10021                           
 10022                           	psect	text75
 10023  0F76                     __ptext75:	
 10024 ;; *************** function i1_do_I2C_RCEN *****************
 10025 ;; Defined at:
 10026 ;;		line 292 in file "mcc_generated_files/drivers/i2c_master.c"
 10027 ;; Parameters:    Size  Location     Type
 10028 ;;		None
 10029 ;; Auto vars:     Size  Location     Type
 10030 ;;		None
 10031 ;; Return value:  Size  Location     Type
 10032 ;;                  1    wreg      enum E12337
 10033 ;; Registers used:
 10034 ;;		wreg, status,2, status,0, pclath, cstack
 10035 ;; Tracked objects:
 10036 ;;		On entry : 0/0
 10037 ;;		On exit  : 0/0
 10038 ;;		Unchanged: 0/0
 10039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10040 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10041 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10042 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10043 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10044 ;;Total ram usage:        0 bytes
 10045 ;; Hardware stack levels used:    1
 10046 ;; Hardware stack levels required when called:    1
 10047 ;; This function calls:
 10048 ;;		i1_i2c_driver_startRX
 10049 ;; This function is called by:
 10050 ;; This function uses a non-reentrant model
 10051 ;;
 10052                           
 10053                           
 10054                           ;psect for function i1_do_I2C_RCEN
 10055  0F76                     i1_do_I2C_RCEN:	
 10056  0F76                     i1l2851:	
 10057                           ;incstack = 0
 10058                           ; Regs used in i1_do_I2C_RCEN: [wreg+status,2+status,0+pclath+cstack]
 10059                           
 10060                           
 10061                           ;i2c_master.c: 294: i2c_status.addressNACKCheck = 0;
 10062  0F76  0020               	movlb	0	; select bank0
 10063  0F77  11A0               	bcf	_i2c_status,3
 10064                           
 10065                           ;i2c_master.c: 295: i2c_driver_startRX();
 10066  0F78  318F  2714         	fcall	i1_i2c_driver_startRX
 10067                           
 10068                           ;i2c_master.c: 296: return I2C_RX;
 10069  0F7A  3004               	movlw	4
 10070  0F7B  0008               	return
 10071  0F7C                     __end_ofi1_do_I2C_RCEN:	
 10072                           
 10073                           	psect	text76
 10074  0FB9                     __ptext76:	
 10075 ;; *************** function i1_do_I2C_SEND_ADR_WRITE *****************
 10076 ;; Defined at:
 10077 ;;		line 285 in file "mcc_generated_files/drivers/i2c_master.c"
 10078 ;; Parameters:    Size  Location     Type
 10079 ;;		None
 10080 ;; Auto vars:     Size  Location     Type
 10081 ;;		None
 10082 ;; Return value:  Size  Location     Type
 10083 ;;                  1    wreg      enum E12337
 10084 ;; Registers used:
 10085 ;;		wreg, status,2, status,0, pclath, cstack
 10086 ;; Tracked objects:
 10087 ;;		On entry : 0/0
 10088 ;;		On exit  : 0/0
 10089 ;;		Unchanged: 0/0
 10090 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10091 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10092 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10093 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10094 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10095 ;;Total ram usage:        0 bytes
 10096 ;; Hardware stack levels used:    1
 10097 ;; Hardware stack levels required when called:    1
 10098 ;; This function calls:
 10099 ;;		i1_i2c_driver_TXData
 10100 ;; This function is called by:
 10101 ;; This function uses a non-reentrant model
 10102 ;;
 10103                           
 10104                           
 10105                           ;psect for function i1_do_I2C_SEND_ADR_WRITE
 10106  0FB9                     i1_do_I2C_SEND_ADR_WRITE:	
 10107  0FB9                     i1l2843:	
 10108                           ;incstack = 0
 10109                           ; Regs used in i1_do_I2C_SEND_ADR_WRITE: [wreg+status,2+status,0+pclath+cstack]
 10110                           
 10111                           
 10112                           ;i2c_master.c: 287: i2c_status.addressNACKCheck = 1;
 10113  0FB9  0020               	movlb	0	; select bank0
 10114  0FBA  15A0               	bsf	_i2c_status,3
 10115                           
 10116                           ;i2c_master.c: 288: i2c_driver_TXData(i2c_status.address << 1);
 10117  0FBB  3521               	lslf	_i2c_status+1,w
 10118  0FBC  318F  276C         	fcall	i1_i2c_driver_TXData
 10119                           
 10120                           ;i2c_master.c: 289: return I2C_TX;
 10121  0FBE  3003               	movlw	3
 10122  0FBF  0008               	return
 10123  0FC0                     __end_ofi1_do_I2C_SEND_ADR_WRITE:	
 10124                           
 10125                           	psect	text77
 10126  0FC0                     __ptext77:	
 10127 ;; *************** function i1_do_I2C_SEND_ADR_READ *****************
 10128 ;; Defined at:
 10129 ;;		line 278 in file "mcc_generated_files/drivers/i2c_master.c"
 10130 ;; Parameters:    Size  Location     Type
 10131 ;;		None
 10132 ;; Auto vars:     Size  Location     Type
 10133 ;;		None
 10134 ;; Return value:  Size  Location     Type
 10135 ;;                  1    wreg      enum E12337
 10136 ;; Registers used:
 10137 ;;		wreg, status,2, status,0, pclath, cstack
 10138 ;; Tracked objects:
 10139 ;;		On entry : 0/0
 10140 ;;		On exit  : 0/0
 10141 ;;		Unchanged: 0/0
 10142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10143 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10144 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10145 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10146 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10147 ;;Total ram usage:        0 bytes
 10148 ;; Hardware stack levels used:    1
 10149 ;; Hardware stack levels required when called:    1
 10150 ;; This function calls:
 10151 ;;		i1_i2c_driver_TXData
 10152 ;; This function is called by:
 10153 ;; This function uses a non-reentrant model
 10154 ;;
 10155                           
 10156                           
 10157                           ;psect for function i1_do_I2C_SEND_ADR_READ
 10158  0FC0                     i1_do_I2C_SEND_ADR_READ:	
 10159  0FC0                     i1l2835:	
 10160                           ;incstack = 0
 10161                           ; Regs used in i1_do_I2C_SEND_ADR_READ: [wreg+status,2+status,0+pclath+cstack]
 10162                           
 10163                           
 10164                           ;i2c_master.c: 280: i2c_status.addressNACKCheck = 1;
 10165  0FC0  0020               	movlb	0	; select bank0
 10166  0FC1  15A0               	bsf	_i2c_status,3
 10167                           
 10168                           ;i2c_master.c: 281: i2c_driver_TXData(i2c_status.address << 1 | 1);
 10169  0FC2  1403               	setc
 10170  0FC3  0D21               	rlf	_i2c_status+1,w
 10171  0FC4  318F  276C         	fcall	i1_i2c_driver_TXData
 10172                           
 10173                           ;i2c_master.c: 282: return I2C_RCEN;
 10174  0FC6  3005               	movlw	5
 10175  0FC7  0008               	return
 10176  0FC8                     __end_ofi1_do_I2C_SEND_ADR_READ:	
 10177                           
 10178                           	psect	text78
 10179  0F4C                     __ptext78:	
 10180 ;; *************** function i1_do_I2C_SEND_STOP *****************
 10181 ;; Defined at:
 10182 ;;		line 272 in file "mcc_generated_files/drivers/i2c_master.c"
 10183 ;; Parameters:    Size  Location     Type
 10184 ;;		None
 10185 ;; Auto vars:     Size  Location     Type
 10186 ;;		None
 10187 ;; Return value:  Size  Location     Type
 10188 ;;                  1    wreg      enum E12337
 10189 ;; Registers used:
 10190 ;;		wreg, status,2, status,0, pclath, cstack
 10191 ;; Tracked objects:
 10192 ;;		On entry : 0/0
 10193 ;;		On exit  : 0/0
 10194 ;;		Unchanged: 0/0
 10195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10196 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10197 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10198 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10199 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10200 ;;Total ram usage:        0 bytes
 10201 ;; Hardware stack levels used:    1
 10202 ;; Hardware stack levels required when called:    1
 10203 ;; This function calls:
 10204 ;;		i1_i2c_driver_stop
 10205 ;; This function is called by:
 10206 ;;		i1_do_I2C_DO_ADDRESS_NACK
 10207 ;;		i1_do_I2C_TX
 10208 ;;		i1_do_I2C_TX_EMPTY
 10209 ;; This function uses a non-reentrant model
 10210 ;;
 10211                           
 10212                           
 10213                           ;psect for function i1_do_I2C_SEND_STOP
 10214  0F4C                     i1_do_I2C_SEND_STOP:	
 10215  0F4C                     i1l2687:	
 10216                           ;incstack = 0
 10217                           ; Regs used in i1_do_I2C_SEND_STOP: [wreg+status,2+status,0+pclath+cstack]
 10218                           
 10219                           
 10220                           ;i2c_master.c: 274: i2c_driver_stop();
 10221  0F4C  318F  2711         	fcall	i1_i2c_driver_stop
 10222                           
 10223                           ;i2c_master.c: 275: return I2C_IDLE;
 10224  0F4E  3000               	movlw	0
 10225  0F4F  0008               	return
 10226  0F50                     __end_ofi1_do_I2C_SEND_STOP:	
 10227                           
 10228                           	psect	text79
 10229  0F48                     __ptext79:	
 10230 ;; *************** function i1_do_I2C_SEND_RESTART *****************
 10231 ;; Defined at:
 10232 ;;		line 266 in file "mcc_generated_files/drivers/i2c_master.c"
 10233 ;; Parameters:    Size  Location     Type
 10234 ;;		None
 10235 ;; Auto vars:     Size  Location     Type
 10236 ;;		None
 10237 ;; Return value:  Size  Location     Type
 10238 ;;                  1    wreg      enum E12337
 10239 ;; Registers used:
 10240 ;;		wreg, status,2, status,0, pclath, cstack
 10241 ;; Tracked objects:
 10242 ;;		On entry : 0/0
 10243 ;;		On exit  : 0/0
 10244 ;;		Unchanged: 0/0
 10245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10246 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10247 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10248 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10249 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10250 ;;Total ram usage:        0 bytes
 10251 ;; Hardware stack levels used:    1
 10252 ;; Hardware stack levels required when called:    1
 10253 ;; This function calls:
 10254 ;;		i1_i2c_driver_restart
 10255 ;; This function is called by:
 10256 ;;		i1_do_I2C_DO_ADDRESS_NACK
 10257 ;;		i1_do_I2C_TX_EMPTY
 10258 ;; This function uses a non-reentrant model
 10259 ;;
 10260                           
 10261                           
 10262                           ;psect for function i1_do_I2C_SEND_RESTART
 10263  0F48                     i1_do_I2C_SEND_RESTART:	
 10264  0F48                     i1l2681:	
 10265                           ;incstack = 0
 10266                           ; Regs used in i1_do_I2C_SEND_RESTART: [wreg+status,2+status,0+pclath+cstack]
 10267                           
 10268                           
 10269                           ;i2c_master.c: 268: i2c_driver_restart();
 10270  0F48  318F  270E         	fcall	i1_i2c_driver_restart
 10271                           
 10272                           ;i2c_master.c: 269: return I2C_SEND_ADR_READ;
 10273  0F4A  3001               	movlw	1
 10274  0F4B  0008               	return
 10275  0F4C                     __end_ofi1_do_I2C_SEND_RESTART:	
 10276                           
 10277                           	psect	text80
 10278  0F44                     __ptext80:	
 10279 ;; *************** function i1_do_I2C_SEND_RESTART_WRITE *****************
 10280 ;; Defined at:
 10281 ;;		line 260 in file "mcc_generated_files/drivers/i2c_master.c"
 10282 ;; Parameters:    Size  Location     Type
 10283 ;;		None
 10284 ;; Auto vars:     Size  Location     Type
 10285 ;;		None
 10286 ;; Return value:  Size  Location     Type
 10287 ;;                  1    wreg      enum E12337
 10288 ;; Registers used:
 10289 ;;		wreg, status,2, status,0, pclath, cstack
 10290 ;; Tracked objects:
 10291 ;;		On entry : 0/0
 10292 ;;		On exit  : 0/0
 10293 ;;		Unchanged: 0/0
 10294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10295 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10296 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10297 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10298 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10299 ;;Total ram usage:        0 bytes
 10300 ;; Hardware stack levels used:    1
 10301 ;; Hardware stack levels required when called:    1
 10302 ;; This function calls:
 10303 ;;		i1_i2c_driver_restart
 10304 ;; This function is called by:
 10305 ;;		i1_do_I2C_TX
 10306 ;; This function uses a non-reentrant model
 10307 ;;
 10308                           
 10309                           
 10310                           ;psect for function i1_do_I2C_SEND_RESTART_WRITE
 10311  0F44                     i1_do_I2C_SEND_RESTART_WRITE:	
 10312  0F44                     i1l2675:	
 10313                           ;incstack = 0
 10314                           ; Regs used in i1_do_I2C_SEND_RESTART_WRITE: [wreg+status,2+status,0+pclath+cstack]
 10315                           
 10316                           
 10317                           ;i2c_master.c: 262: i2c_driver_restart();
 10318  0F44  318F  270E         	fcall	i1_i2c_driver_restart
 10319                           
 10320                           ;i2c_master.c: 263: return I2C_SEND_ADR_WRITE;
 10321  0F46  3002               	movlw	2
 10322  0F47  0008               	return
 10323  0F48                     __end_ofi1_do_I2C_SEND_RESTART_WRITE:	
 10324                           
 10325                           	psect	text81
 10326  0F40                     __ptext81:	
 10327 ;; *************** function i1_do_I2C_SEND_RESTART_READ *****************
 10328 ;; Defined at:
 10329 ;;		line 254 in file "mcc_generated_files/drivers/i2c_master.c"
 10330 ;; Parameters:    Size  Location     Type
 10331 ;;		None
 10332 ;; Auto vars:     Size  Location     Type
 10333 ;;		None
 10334 ;; Return value:  Size  Location     Type
 10335 ;;                  1    wreg      enum E12337
 10336 ;; Registers used:
 10337 ;;		wreg, status,2, status,0, pclath, cstack
 10338 ;; Tracked objects:
 10339 ;;		On entry : 0/0
 10340 ;;		On exit  : 0/0
 10341 ;;		Unchanged: 0/0
 10342 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10343 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10344 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10345 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10346 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10347 ;;Total ram usage:        0 bytes
 10348 ;; Hardware stack levels used:    1
 10349 ;; Hardware stack levels required when called:    1
 10350 ;; This function calls:
 10351 ;;		i1_i2c_driver_restart
 10352 ;; This function is called by:
 10353 ;;		i1_do_I2C_TX
 10354 ;; This function uses a non-reentrant model
 10355 ;;
 10356                           
 10357                           
 10358                           ;psect for function i1_do_I2C_SEND_RESTART_READ
 10359  0F40                     i1_do_I2C_SEND_RESTART_READ:	
 10360  0F40                     i1l2669:	
 10361                           ;incstack = 0
 10362                           ; Regs used in i1_do_I2C_SEND_RESTART_READ: [wreg+status,2+status,0+pclath+cstack]
 10363                           
 10364                           
 10365                           ;i2c_master.c: 256: i2c_driver_restart();
 10366  0F40  318F  270E         	fcall	i1_i2c_driver_restart
 10367                           
 10368                           ;i2c_master.c: 257: return I2C_SEND_ADR_READ;
 10369  0F42  3001               	movlw	1
 10370  0F43  0008               	return
 10371  0F44                     __end_ofi1_do_I2C_SEND_RESTART_READ:	
 10372                           
 10373                           	psect	text82
 10374  0F71                     __ptext82:	
 10375 ;; *************** function i1_do_I2C_IDLE *****************
 10376 ;; Defined at:
 10377 ;;		line 247 in file "mcc_generated_files/drivers/i2c_master.c"
 10378 ;; Parameters:    Size  Location     Type
 10379 ;;		None
 10380 ;; Auto vars:     Size  Location     Type
 10381 ;;		None
 10382 ;; Return value:  Size  Location     Type
 10383 ;;                  1    wreg      enum E12337
 10384 ;; Registers used:
 10385 ;;		wreg, status,2
 10386 ;; Tracked objects:
 10387 ;;		On entry : 0/0
 10388 ;;		On exit  : 0/0
 10389 ;;		Unchanged: 0/0
 10390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10391 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10392 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10394 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10395 ;;Total ram usage:        0 bytes
 10396 ;; Hardware stack levels used:    1
 10397 ;; This function calls:
 10398 ;;		Nothing
 10399 ;; This function is called by:
 10400 ;; This function uses a non-reentrant model
 10401 ;;
 10402                           
 10403                           
 10404                           ;psect for function i1_do_I2C_IDLE
 10405  0F71                     i1_do_I2C_IDLE:	
 10406  0F71                     i1l2827:	
 10407                           ;incstack = 0
 10408                           ; Regs used in i1_do_I2C_IDLE: [wreg+status,2]
 10409                           
 10410                           
 10411                           ;i2c_master.c: 249: i2c_status.busy = 0;
 10412  0F71  0020               	movlb	0	; select bank0
 10413  0F72  1020               	bcf	_i2c_status,0
 10414                           
 10415                           ;i2c_master.c: 250: i2c_status.error = I2C_NOERR;
 10416  0F73  01AA               	clrf	_i2c_status+10
 10417                           
 10418                           ;i2c_master.c: 251: return I2C_RESET;
 10419  0F74  300E               	movlw	14
 10420  0F75  0008               	return
 10421  0F76                     __end_ofi1_do_I2C_IDLE:	
 10422                           
 10423                           	psect	text83
 10424  0FB2                     __ptext83:	
 10425 ;; *************** function i1_do_I2C_RESET *****************
 10426 ;; Defined at:
 10427 ;;		line 239 in file "mcc_generated_files/drivers/i2c_master.c"
 10428 ;; Parameters:    Size  Location     Type
 10429 ;;		None
 10430 ;; Auto vars:     Size  Location     Type
 10431 ;;		None
 10432 ;; Return value:  Size  Location     Type
 10433 ;;                  1    wreg      enum E12337
 10434 ;; Registers used:
 10435 ;;		wreg, status,2, status,0, pclath, cstack
 10436 ;; Tracked objects:
 10437 ;;		On entry : 0/0
 10438 ;;		On exit  : 0/0
 10439 ;;		Unchanged: 0/0
 10440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10441 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10442 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10443 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10444 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10445 ;;Total ram usage:        0 bytes
 10446 ;; Hardware stack levels used:    1
 10447 ;; Hardware stack levels required when called:    1
 10448 ;; This function calls:
 10449 ;;		i1_i2c_driver_resetBus
 10450 ;; This function is called by:
 10451 ;; This function uses a non-reentrant model
 10452 ;;
 10453                           
 10454                           
 10455                           ;psect for function i1_do_I2C_RESET
 10456  0FB2                     i1_do_I2C_RESET:	
 10457  0FB2                     i1l2817:	
 10458                           ;incstack = 0
 10459                           ; Regs used in i1_do_I2C_RESET: [wreg+status,2+status,0+pclath+cstack]
 10460                           
 10461                           
 10462                           ;i2c_master.c: 241: i2c_driver_resetBus();
 10463  0FB2  318F  2700         	fcall	i1_i2c_driver_resetBus
 10464                           
 10465                           ;i2c_master.c: 242: i2c_status.busy = 0;
 10466  0FB4  0020               	movlb	0	; select bank0
 10467  0FB5  1020               	bcf	_i2c_status,0
 10468                           
 10469                           ;i2c_master.c: 243: i2c_status.error = I2C_NOERR;
 10470  0FB6  01AA               	clrf	_i2c_status+10
 10471                           
 10472                           ;i2c_master.c: 244: return I2C_RESET;
 10473  0FB7  300E               	movlw	14
 10474  0FB8  0008               	return
 10475  0FB9                     __end_ofi1_do_I2C_RESET:	
 10476                           
 10477                           	psect	text84
 10478  049F                     __ptext84:	
 10479 ;; *************** function i1_do_I2C_TX_EMPTY *****************
 10480 ;; Defined at:
 10481 ;;		line 382 in file "mcc_generated_files/drivers/i2c_master.c"
 10482 ;; Parameters:    Size  Location     Type
 10483 ;;		None
 10484 ;; Auto vars:     Size  Location     Type
 10485 ;;		None
 10486 ;; Return value:  Size  Location     Type
 10487 ;;                  1    wreg      enum E12337
 10488 ;; Registers used:
 10489 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10490 ;; Tracked objects:
 10491 ;;		On entry : 0/0
 10492 ;;		On exit  : 0/0
 10493 ;;		Unchanged: 0/0
 10494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10495 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10496 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10497 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10498 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10499 ;;Total ram usage:        1 bytes
 10500 ;; Hardware stack levels used:    1
 10501 ;; Hardware stack levels required when called:    3
 10502 ;; This function calls:
 10503 ;;		Absolute function
 10504 ;;		i1_do_I2C_SEND_RESTART
 10505 ;;		i1_do_I2C_SEND_STOP
 10506 ;;		i1_i2c_restartWrite
 10507 ;;		i1_mssp_setIRQ
 10508 ;;		i1_rd1RegCompleteHandler
 10509 ;;		i1_rd2RegCompleteHandler
 10510 ;;		i1_rdBlkRegCompleteHandler
 10511 ;;		i1_returnReset
 10512 ;;		i1_returnStop
 10513 ;;		i1_wr1RegCompleteHandler
 10514 ;;		i1_wr2RegCompleteHandler
 10515 ;; This function is called by:
 10516 ;; This function uses a non-reentrant model
 10517 ;;
 10518                           
 10519                           
 10520                           ;psect for function i1_do_I2C_TX_EMPTY
 10521  049F                     i1_do_I2C_TX_EMPTY:	
 10522  049F                     i1l4991:	
 10523                           ;incstack = 0
 10524                           ; Regs used in i1_do_I2C_TX_EMPTY: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10525                           
 10526                           
 10527                           ;i2c_master.c: 384: i2c_status.bufferFree = 1;
 10528  049F  0020               	movlb	0	; select bank0
 10529  04A0  1520               	bsf	_i2c_status,2
 10530                           
 10531                           ;i2c_master.c: 385: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
 10532  04A1  2CAC               	goto	i1l5009
 10533  04A2                     i1l4993:	
 10534                           ;i2c_master.c: 386: {
 10535                           ;i2c_master.c: 387: case i2c_restart_read:
 10536                           
 10537                           
 10538                           ;i2c_master.c: 388: case i2c_restart_write:
 10539                           ;i2c_master.c: 389: return do_I2C_SEND_RESTART();
 10540  04A2  318F  2748         	fcall	i1_do_I2C_SEND_RESTART
 10541  04A4  0008               	return
 10542  04A5                     i1l4997:	
 10543                           ;i2c_master.c: 390: case i2c_continue:
 10544                           
 10545                           
 10546                           ;i2c_master.c: 391: mssp_setIRQ();
 10547  04A5  318F  271A         	fcall	i1_mssp_setIRQ
 10548                           
 10549                           ;i2c_master.c: 392: return I2C_TX;
 10550  04A7  3003               	movlw	3
 10551  04A8  0008               	return
 10552  04A9                     i1l5003:	
 10553                           ;i2c_master.c: 394: case i2c_stop:
 10554                           
 10555                           ;i2c_master.c: 393: default:
 10556                           
 10557                           
 10558                           ;i2c_master.c: 395: return do_I2C_SEND_STOP();
 10559  04A9  318F  274C         	fcall	i1_do_I2C_SEND_STOP
 10560                           
 10561                           ;i2c_master.c: 396: }
 10562  04AB  0008               	return
 10563  04AC                     i1l5009:	
 10564  04AC  0020               	movlb	0	; select bank0
 10565  04AD  0837               	movf	low ((_i2c_status| 0+23)),w
 10566  04AE  00FA               	movwf	??i1_do_I2C_TX_EMPTY
 10567  04AF  087A               	movf	??i1_do_I2C_TX_EMPTY,w
 10568  04B0  00F9               	movwf	i1returnStop@p
 10569  04B1  300B               	movlw	11
 10570  04B2  3E20               	addlw	(low (_i2c_status| 0))& (0+255)
 10571  04B3  0086               	movwf	6
 10572  04B4  0187               	clrf	7
 10573  04B5  3F41               	moviw [1]fsr1
 10574  04B6  008A               	movwf	10
 10575  04B7  3F40               	moviw [0]fsr1
 10576  04B8  000A               	callw
 10577  04B9  3184               	pagesel	$
 10578                           
 10579                           ; Switch size 1, requested type "space"
 10580                           ; Number of cases is 4, Range of values is 1 to 4
 10581                           ; switch strategies available:
 10582                           ; Name         Instructions Cycles
 10583                           ; simple_byte           13     7 (average)
 10584                           ; direct_byte           17     9 (fixed)
 10585                           ; jumptable            263     9 (fixed)
 10586                           ;	Chosen strategy is simple_byte
 10587  04BA  3A01               	xorlw	1	; case 1
 10588  04BB  1903               	skipnz
 10589  04BC  2CA9               	goto	i1l5003
 10590  04BD  3A03               	xorlw	3	; case 2
 10591  04BE  1903               	skipnz
 10592  04BF  2CA2               	goto	i1l4993
 10593  04C0  3A01               	xorlw	1	; case 3
 10594  04C1  1903               	skipnz
 10595  04C2  2CA2               	goto	i1l4993
 10596  04C3  3A07               	xorlw	7	; case 4
 10597  04C4  1903               	skipnz
 10598  04C5  2CA5               	goto	i1l4997
 10599  04C6  2CA9               	goto	i1l5003
 10600  04C7  0008               	return
 10601  04C8                     __end_ofi1_do_I2C_TX_EMPTY:	
 10602                           
 10603                           	psect	text85
 10604  0F1A                     __ptext85:	
 10605 ;; *************** function i1_mssp_setIRQ *****************
 10606 ;; Defined at:
 10607 ;;		line 58 in file "mcc_generated_files/i2c_driver.c"
 10608 ;; Parameters:    Size  Location     Type
 10609 ;;		None
 10610 ;; Auto vars:     Size  Location     Type
 10611 ;;		None
 10612 ;; Return value:  Size  Location     Type
 10613 ;;                  1    wreg      void 
 10614 ;; Registers used:
 10615 ;;		None
 10616 ;; Tracked objects:
 10617 ;;		On entry : 0/0
 10618 ;;		On exit  : 0/0
 10619 ;;		Unchanged: 0/0
 10620 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10621 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10622 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10623 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10624 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10625 ;;Total ram usage:        0 bytes
 10626 ;; Hardware stack levels used:    1
 10627 ;; This function calls:
 10628 ;;		Nothing
 10629 ;; This function is called by:
 10630 ;;		i1_do_I2C_TX_EMPTY
 10631 ;; This function uses a non-reentrant model
 10632 ;;
 10633                           
 10634                           
 10635                           ;psect for function i1_mssp_setIRQ
 10636  0F1A                     i1_mssp_setIRQ:	
 10637                           
 10638                           ;i2c_driver.c: 60: PIR1bits.SSP1IF = 1;
 10639                           
 10640                           ;incstack = 0
 10641                           ; Regs used in i1_mssp_setIRQ: []
 10642  0F1A  0020               	movlb	0	; select bank0
 10643  0F1B  1590               	bsf	16,3	;volatile
 10644  0F1C  0008               	return
 10645  0F1D                     __end_ofi1_mssp_setIRQ:	
 10646                           
 10647                           	psect	text86
 10648  078B                     __ptext86:	
 10649 ;; *************** function i1_i2c_driver_isNACK *****************
 10650 ;; Defined at:
 10651 ;;		line 161 in file "mcc_generated_files/i2c_driver.c"
 10652 ;; Parameters:    Size  Location     Type
 10653 ;;		None
 10654 ;; Auto vars:     Size  Location     Type
 10655 ;;		None
 10656 ;; Return value:  Size  Location     Type
 10657 ;;		None               void
 10658 ;; Registers used:
 10659 ;;		wreg, status,2, status,0
 10660 ;; Tracked objects:
 10661 ;;		On entry : 0/0
 10662 ;;		On exit  : 0/0
 10663 ;;		Unchanged: 0/0
 10664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10665 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10666 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10667 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10668 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10669 ;;Total ram usage:        1 bytes
 10670 ;; Hardware stack levels used:    1
 10671 ;; This function calls:
 10672 ;;		Nothing
 10673 ;; This function is called by:
 10674 ;;		i1_do_I2C_TX
 10675 ;;		i1_i2c_ISR
 10676 ;; This function uses a non-reentrant model
 10677 ;;
 10678                           
 10679                           
 10680                           ;psect for function i1_i2c_driver_isNACK
 10681  078B                     i1_i2c_driver_isNACK:	
 10682                           
 10683                           ;i2c_driver.c: 163: return SSP1CON2bits.ACKSTAT = 1;
 10684                           
 10685                           ;incstack = 0
 10686                           ; Regs used in i1_i2c_driver_isNACK: [wreg+status,2+status,0]
 10687  078B  0024               	movlb	4	; select bank4
 10688  078C  0816               	movf	22,w	;volatile
 10689  078D  39BF               	andlw	-65
 10690  078E  3840               	iorlw	64
 10691  078F  0096               	movwf	22	;volatile
 10692  0790  0E16               	swapf	22,w	;volatile
 10693  0791  0C89               	rrf	9,f
 10694  0792  0C89               	rrf	9,f
 10695  0793  3901               	andlw	1
 10696  0794  00F0               	movwf	??i1_i2c_driver_isNACK
 10697  0795  0C70               	rrf	??i1_i2c_driver_isNACK,w
 10698  0796  0008               	return
 10699  0797                     __end_ofi1_i2c_driver_isNACK:	
 10700                           
 10701                           	psect	text87
 10702  0F6C                     __ptext87:	
 10703 ;; *************** function i1_i2c_driver_TXData *****************
 10704 ;; Defined at:
 10705 ;;		line 186 in file "mcc_generated_files/i2c_driver.c"
 10706 ;; Parameters:    Size  Location     Type
 10707 ;;  d               1    wreg     unsigned char 
 10708 ;; Auto vars:     Size  Location     Type
 10709 ;;  d               1    0[COMMON] unsigned char 
 10710 ;; Return value:  Size  Location     Type
 10711 ;;                  1    wreg      void 
 10712 ;; Registers used:
 10713 ;;		wreg
 10714 ;; Tracked objects:
 10715 ;;		On entry : 0/0
 10716 ;;		On exit  : 0/0
 10717 ;;		Unchanged: 0/0
 10718 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10719 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10720 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10721 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10722 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10723 ;;Total ram usage:        1 bytes
 10724 ;; Hardware stack levels used:    1
 10725 ;; This function calls:
 10726 ;;		Nothing
 10727 ;; This function is called by:
 10728 ;;		i1_do_I2C_SEND_ADR_READ
 10729 ;;		i1_do_I2C_SEND_ADR_WRITE
 10730 ;;		i1_do_I2C_TX
 10731 ;; This function uses a non-reentrant model
 10732 ;;
 10733                           
 10734                           
 10735                           ;psect for function i1_i2c_driver_TXData
 10736  0F6C                     i1_i2c_driver_TXData:	
 10737                           
 10738                           ;incstack = 0
 10739                           ; Regs used in i1_i2c_driver_TXData: [wreg]
 10740                           ;i1i2c_driver_TXData@d stored from wreg
 10741  0F6C  00F0               	movwf	i1i2c_driver_TXData@d
 10742                           
 10743                           ;i2c_driver.c: 188: SSP1BUF = d;
 10744  0F6D  0870               	movf	i1i2c_driver_TXData@d,w
 10745  0F6E  0024               	movlb	4	; select bank4
 10746  0F6F  0091               	movwf	17	;volatile
 10747  0F70  0008               	return
 10748  0F71                     __end_ofi1_i2c_driver_TXData:	
 10749                           
 10750                           	psect	text88
 10751  0F17                     __ptext88:	
 10752 ;; *************** function i1_i2c_driver_getRXData *****************
 10753 ;; Defined at:
 10754 ;;		line 171 in file "mcc_generated_files/i2c_driver.c"
 10755 ;; Parameters:    Size  Location     Type
 10756 ;;		None
 10757 ;; Auto vars:     Size  Location     Type
 10758 ;;		None
 10759 ;; Return value:  Size  Location     Type
 10760 ;;                  1    wreg      unsigned char 
 10761 ;; Registers used:
 10762 ;;		wreg
 10763 ;; Tracked objects:
 10764 ;;		On entry : 0/0
 10765 ;;		On exit  : 0/0
 10766 ;;		Unchanged: 0/0
 10767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10768 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10769 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10770 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10771 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10772 ;;Total ram usage:        0 bytes
 10773 ;; Hardware stack levels used:    1
 10774 ;; This function calls:
 10775 ;;		Nothing
 10776 ;; This function is called by:
 10777 ;;		i1_do_I2C_RX
 10778 ;; This function uses a non-reentrant model
 10779 ;;
 10780                           
 10781                           
 10782                           ;psect for function i1_i2c_driver_getRXData
 10783  0F17                     i1_i2c_driver_getRXData:	
 10784                           
 10785                           ;i2c_driver.c: 173: return SSP1BUF;
 10786                           
 10787                           ;incstack = 0
 10788                           ; Regs used in i1_i2c_driver_getRXData: [wreg]
 10789  0F17  0024               	movlb	4	; select bank4
 10790  0F18  0811               	movf	17,w	;volatile
 10791  0F19  0008               	return
 10792  0F1A                     __end_ofi1_i2c_driver_getRXData:	
 10793                           
 10794                           	psect	text89
 10795  0F3C                     __ptext89:	
 10796 ;; *************** function i1_i2c_driver_sendNACK *****************
 10797 ;; Defined at:
 10798 ;;		line 202 in file "mcc_generated_files/i2c_driver.c"
 10799 ;; Parameters:    Size  Location     Type
 10800 ;;		None
 10801 ;; Auto vars:     Size  Location     Type
 10802 ;;		None
 10803 ;; Return value:  Size  Location     Type
 10804 ;;                  1    wreg      void 
 10805 ;; Registers used:
 10806 ;;		None
 10807 ;; Tracked objects:
 10808 ;;		On entry : 0/0
 10809 ;;		On exit  : 0/0
 10810 ;;		Unchanged: 0/0
 10811 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10812 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10813 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10814 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10815 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10816 ;;Total ram usage:        0 bytes
 10817 ;; Hardware stack levels used:    1
 10818 ;; This function calls:
 10819 ;;		Nothing
 10820 ;; This function is called by:
 10821 ;;		i1_do_I2C_DO_NACK_STOP
 10822 ;;		i1_do_I2C_DO_NACK_RESTART
 10823 ;; This function uses a non-reentrant model
 10824 ;;
 10825                           
 10826                           
 10827                           ;psect for function i1_i2c_driver_sendNACK
 10828  0F3C                     i1_i2c_driver_sendNACK:	
 10829                           
 10830                           ;i2c_driver.c: 204: SSP1CON2bits.ACKDT = 1;
 10831                           
 10832                           ;incstack = 0
 10833                           ; Regs used in i1_i2c_driver_sendNACK: []
 10834  0F3C  0024               	movlb	4	; select bank4
 10835  0F3D  1696               	bsf	22,5	;volatile
 10836                           
 10837                           ;i2c_driver.c: 205: SSP1CON2bits.ACKEN = 1;
 10838  0F3E  1616               	bsf	22,4	;volatile
 10839  0F3F  0008               	return
 10840  0F40                     __end_ofi1_i2c_driver_sendNACK:	
 10841                           
 10842                           	psect	text90
 10843  0F00                     __ptext90:	
 10844 ;; *************** function i1_i2c_driver_resetBus *****************
 10845 ;; Defined at:
 10846 ;;		line 141 in file "mcc_generated_files/i2c_driver.c"
 10847 ;; Parameters:    Size  Location     Type
 10848 ;;		None
 10849 ;; Auto vars:     Size  Location     Type
 10850 ;;		None
 10851 ;; Return value:  Size  Location     Type
 10852 ;;                  1    wreg      void 
 10853 ;; Registers used:
 10854 ;;		None
 10855 ;; Tracked objects:
 10856 ;;		On entry : 0/0
 10857 ;;		On exit  : 0/0
 10858 ;;		Unchanged: 0/0
 10859 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10860 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10861 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10862 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10863 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10864 ;;Total ram usage:        0 bytes
 10865 ;; Hardware stack levels used:    1
 10866 ;; This function calls:
 10867 ;;		Nothing
 10868 ;; This function is called by:
 10869 ;;		i1_do_I2C_RESET
 10870 ;; This function uses a non-reentrant model
 10871 ;;
 10872                           
 10873                           
 10874                           ;psect for function i1_i2c_driver_resetBus
 10875  0F00                     i1_i2c_driver_resetBus:	
 10876                           
 10877                           ;incstack = 0
 10878                           ; Regs used in i1_i2c_driver_resetBus: []
 10879  0F00  0008               	return
 10880  0F01                     __end_ofi1_i2c_driver_resetBus:	
 10881                           
 10882                           	psect	text91
 10883  0F14                     __ptext91:	
 10884 ;; *************** function i1_i2c_driver_startRX *****************
 10885 ;; Defined at:
 10886 ;;		line 166 in file "mcc_generated_files/i2c_driver.c"
 10887 ;; Parameters:    Size  Location     Type
 10888 ;;		None
 10889 ;; Auto vars:     Size  Location     Type
 10890 ;;		None
 10891 ;; Return value:  Size  Location     Type
 10892 ;;                  1    wreg      void 
 10893 ;; Registers used:
 10894 ;;		None
 10895 ;; Tracked objects:
 10896 ;;		On entry : 0/0
 10897 ;;		On exit  : 0/0
 10898 ;;		Unchanged: 0/0
 10899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10900 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10901 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10902 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10903 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10904 ;;Total ram usage:        0 bytes
 10905 ;; Hardware stack levels used:    1
 10906 ;; This function calls:
 10907 ;;		Nothing
 10908 ;; This function is called by:
 10909 ;;		i1_do_I2C_RCEN
 10910 ;; This function uses a non-reentrant model
 10911 ;;
 10912                           
 10913                           
 10914                           ;psect for function i1_i2c_driver_startRX
 10915  0F14                     i1_i2c_driver_startRX:	
 10916                           
 10917                           ;i2c_driver.c: 168: SSP1CON2bits.RCEN = 1;
 10918                           
 10919                           ;incstack = 0
 10920                           ; Regs used in i1_i2c_driver_startRX: []
 10921  0F14  0024               	movlb	4	; select bank4
 10922  0F15  1596               	bsf	22,3	;volatile
 10923  0F16  0008               	return
 10924  0F17                     __end_ofi1_i2c_driver_startRX:	
 10925                           
 10926                           	psect	text92
 10927  0F06                     __ptext92:	
 10928 ;; *************** function i1_i2c_restartWrite *****************
 10929 ;; Defined at:
 10930 ;;		line 35 in file "mcc_generated_files/drivers/i2c_types.c"
 10931 ;; Parameters:    Size  Location     Type
 10932 ;;  p               1    9[COMMON] PTR void 
 10933 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 10934 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 10935 ;; Auto vars:     Size  Location     Type
 10936 ;;		None
 10937 ;; Return value:  Size  Location     Type
 10938 ;;                  1    wreg      enum E97
 10939 ;; Registers used:
 10940 ;;		wreg
 10941 ;; Tracked objects:
 10942 ;;		On entry : 0/0
 10943 ;;		On exit  : 0/0
 10944 ;;		Unchanged: 0/0
 10945 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10946 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10947 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10948 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10949 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10950 ;;Total ram usage:        1 bytes
 10951 ;; Hardware stack levels used:    1
 10952 ;; This function calls:
 10953 ;;		Nothing
 10954 ;; This function is called by:
 10955 ;; This function uses a non-reentrant model
 10956 ;;
 10957                           
 10958                           
 10959                           ;psect for function i1_i2c_restartWrite
 10960  0F06                     i1_i2c_restartWrite:	
 10961  0F06                     i1l2713:	
 10962                           ;incstack = 0
 10963                           ; Regs used in i1_i2c_restartWrite: [wreg]
 10964                           
 10965                           
 10966                           ;i2c_types.c: 37: return i2c_restart_write;
 10967  0F06  3003               	movlw	3
 10968  0F07  0008               	return
 10969  0F08                     __end_ofi1_i2c_restartWrite:	
 10970                           
 10971                           	psect	text93
 10972  0F04                     __ptext93:	
 10973 ;; *************** function i1_returnReset *****************
 10974 ;; Defined at:
 10975 ;;		line 448 in file "mcc_generated_files/drivers/i2c_master.c"
 10976 ;; Parameters:    Size  Location     Type
 10977 ;;  p               1    9[COMMON] PTR void 
 10978 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 10979 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 10980 ;; Auto vars:     Size  Location     Type
 10981 ;;		None
 10982 ;; Return value:  Size  Location     Type
 10983 ;;                  1    wreg      enum E12171
 10984 ;; Registers used:
 10985 ;;		wreg
 10986 ;; Tracked objects:
 10987 ;;		On entry : 0/0
 10988 ;;		On exit  : 0/0
 10989 ;;		Unchanged: 0/0
 10990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10991 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10992 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10993 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10994 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10995 ;;Total ram usage:        1 bytes
 10996 ;; Hardware stack levels used:    1
 10997 ;; This function calls:
 10998 ;;		Nothing
 10999 ;; This function is called by:
 11000 ;; This function uses a non-reentrant model
 11001 ;;
 11002                           
 11003                           
 11004                           ;psect for function i1_returnReset
 11005  0F04                     i1_returnReset:	
 11006  0F04                     i1l2709:	
 11007                           ;incstack = 0
 11008                           ; Regs used in i1_returnReset: [wreg]
 11009                           
 11010                           
 11011                           ;i2c_master.c: 450: return i2c_reset_link;
 11012  0F04  3005               	movlw	5
 11013  0F05  0008               	return
 11014  0F06                     __end_ofi1_returnReset:	
 11015                           
 11016                           	psect	text94
 11017  0F02                     __ptext94:	
 11018 ;; *************** function i1_returnStop *****************
 11019 ;; Defined at:
 11020 ;;		line 443 in file "mcc_generated_files/drivers/i2c_master.c"
 11021 ;; Parameters:    Size  Location     Type
 11022 ;;  p               1    9[COMMON] PTR void 
 11023 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 11024 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 11025 ;; Auto vars:     Size  Location     Type
 11026 ;;		None
 11027 ;; Return value:  Size  Location     Type
 11028 ;;                  1    wreg      enum E12171
 11029 ;; Registers used:
 11030 ;;		wreg
 11031 ;; Tracked objects:
 11032 ;;		On entry : 0/0
 11033 ;;		On exit  : 0/0
 11034 ;;		Unchanged: 0/0
 11035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11036 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11037 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11038 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11039 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11040 ;;Total ram usage:        1 bytes
 11041 ;; Hardware stack levels used:    1
 11042 ;; This function calls:
 11043 ;;		Nothing
 11044 ;; This function is called by:
 11045 ;;		i1_setCallBack
 11046 ;;		_do_I2C_DO_ADDRESS_NACK
 11047 ;;		_do_I2C_TX
 11048 ;;		_do_I2C_RX
 11049 ;;		_do_I2C_TX_EMPTY
 11050 ;;		i1_do_I2C_DO_ADDRESS_NACK
 11051 ;;		i1_do_I2C_TX
 11052 ;;		i1_do_I2C_RX
 11053 ;;		i1_do_I2C_TX_EMPTY
 11054 ;; This function uses a non-reentrant model
 11055 ;;
 11056                           
 11057                           
 11058                           ;psect for function i1_returnStop
 11059  0F02                     i1_returnStop:	
 11060  0F02                     i1l2705:	
 11061                           ;incstack = 0
 11062                           ; Regs used in i1_returnStop: [wreg]
 11063                           
 11064                           
 11065                           ;i2c_master.c: 445: return i2c_stop;
 11066  0F02  3001               	movlw	1
 11067  0F03  0008               	return
 11068  0F04                     __end_ofi1_returnStop:	
 11069                           
 11070                           	psect	text95
 11071  0665                     __ptext95:	
 11072 ;; *************** function i1_rdBlkRegCompleteHandler *****************
 11073 ;; Defined at:
 11074 ;;		line 134 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 11075 ;; Parameters:    Size  Location     Type
 11076 ;;  p               1    9[COMMON] PTR void 
 11077 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 11078 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 11079 ;; Auto vars:     Size  Location     Type
 11080 ;;		None
 11081 ;; Return value:  Size  Location     Type
 11082 ;;                  1    wreg      enum E97
 11083 ;; Registers used:
 11084 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11085 ;; Tracked objects:
 11086 ;;		On entry : 0/0
 11087 ;;		On exit  : 0/0
 11088 ;;		Unchanged: 0/0
 11089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11090 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11091 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11092 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11093 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11094 ;;Total ram usage:        1 bytes
 11095 ;; Hardware stack levels used:    1
 11096 ;; Hardware stack levels required when called:    2
 11097 ;; This function calls:
 11098 ;;		i1_i2c_setBuffer
 11099 ;;		i1_i2c_setDataCompleteCallback
 11100 ;; This function is called by:
 11101 ;; This function uses a non-reentrant model
 11102 ;;
 11103                           
 11104                           
 11105                           ;psect for function i1_rdBlkRegCompleteHandler
 11106  0665                     i1_rdBlkRegCompleteHandler:	
 11107  0665                     i1l2663:	
 11108                           ;incstack = 0
 11109                           ; Regs used in i1_rdBlkRegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 11110                           
 11111                           
 11112                           ;i2c_simple_master.c: 136: i2c_setBuffer(((buf_t *)p)->data,((buf_t*)p)->len);
 11113  0665  0879               	movf	i1rdBlkRegCompleteHandler@p,w
 11114  0666  0086               	movwf	6
 11115  0667  0187               	clrf	7
 11116  0668  3F40               	moviw [0]fsr1
 11117  0669  00F0               	movwf	i1i2c_setBuffer@bufferSize
 11118  066A  3F41               	moviw [1]fsr1
 11119  066B  00F1               	movwf	i1i2c_setBuffer@bufferSize+1
 11120  066C  0879               	movf	i1rdBlkRegCompleteHandler@p,w
 11121  066D  3E02               	addlw	2
 11122  066E  0086               	movwf	6
 11123  066F  0187               	clrf	7
 11124  0670  0801               	movf	1,w
 11125  0671  3187  274A  3186   	fcall	i1_i2c_setBuffer
 11126                           
 11127                           ;i2c_simple_master.c: 137: i2c_setDataCompleteCallback((0),(0));
 11128  0674  3000               	movlw	0
 11129  0675  00F5               	movwf	i1i2c_setDataCompleteCallback@cb
 11130  0676  00F6               	movwf	i1i2c_setDataCompleteCallback@cb+1
 11131  0677  01F7               	clrf	i1i2c_setDataCompleteCallback@p
 11132  0678  3187  2797         	fcall	i1_i2c_setDataCompleteCallback
 11133                           
 11134                           ;i2c_simple_master.c: 138: return i2c_restart_read;
 11135  067A  3002               	movlw	2
 11136  067B  0008               	return
 11137  067C                     __end_ofi1_rdBlkRegCompleteHandler:	
 11138                           
 11139                           	psect	text96
 11140  06FC                     __ptext96:	
 11141 ;; *************** function i1_rd2RegCompleteHandler *****************
 11142 ;; Defined at:
 11143 ;;		line 87 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 11144 ;; Parameters:    Size  Location     Type
 11145 ;;  p               1    9[COMMON] PTR void 
 11146 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 11147 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 11148 ;; Auto vars:     Size  Location     Type
 11149 ;;		None
 11150 ;; Return value:  Size  Location     Type
 11151 ;;                  1    wreg      enum E97
 11152 ;; Registers used:
 11153 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11154 ;; Tracked objects:
 11155 ;;		On entry : 0/0
 11156 ;;		On exit  : 0/0
 11157 ;;		Unchanged: 0/0
 11158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11159 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11160 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11161 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11162 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11163 ;;Total ram usage:        1 bytes
 11164 ;; Hardware stack levels used:    1
 11165 ;; Hardware stack levels required when called:    2
 11166 ;; This function calls:
 11167 ;;		i1_i2c_setBuffer
 11168 ;;		i1_i2c_setDataCompleteCallback
 11169 ;; This function is called by:
 11170 ;; This function uses a non-reentrant model
 11171 ;;
 11172                           
 11173                           
 11174                           ;psect for function i1_rd2RegCompleteHandler
 11175  06FC                     i1_rd2RegCompleteHandler:	
 11176  06FC                     i1l2647:	
 11177                           ;incstack = 0
 11178                           ; Regs used in i1_rd2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 11179                           
 11180                           
 11181                           ;i2c_simple_master.c: 89: i2c_setBuffer(p,2);
 11182  06FC  3002               	movlw	2
 11183  06FD  00F0               	movwf	i1i2c_setBuffer@bufferSize
 11184  06FE  3000               	movlw	0
 11185  06FF  00F1               	movwf	i1i2c_setBuffer@bufferSize+1
 11186  0700  0879               	movf	i1rd2RegCompleteHandler@p,w
 11187  0701  3187  274A  3186   	fcall	i1_i2c_setBuffer
 11188                           
 11189                           ;i2c_simple_master.c: 90: i2c_setDataCompleteCallback((0),(0));
 11190  0704  3000               	movlw	0
 11191  0705  00F5               	movwf	i1i2c_setDataCompleteCallback@cb
 11192  0706  00F6               	movwf	i1i2c_setDataCompleteCallback@cb+1
 11193  0707  01F7               	clrf	i1i2c_setDataCompleteCallback@p
 11194  0708  3187  2797         	fcall	i1_i2c_setDataCompleteCallback
 11195                           
 11196                           ;i2c_simple_master.c: 91: return i2c_restart_read;
 11197  070A  3002               	movlw	2
 11198  070B  0008               	return
 11199  070C                     __end_ofi1_rd2RegCompleteHandler:	
 11200                           
 11201                           	psect	text97
 11202  070C                     __ptext97:	
 11203 ;; *************** function i1_rd1RegCompleteHandler *****************
 11204 ;; Defined at:
 11205 ;;		line 58 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 11206 ;; Parameters:    Size  Location     Type
 11207 ;;  p               1    9[COMMON] PTR void 
 11208 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 11209 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 11210 ;; Auto vars:     Size  Location     Type
 11211 ;;		None
 11212 ;; Return value:  Size  Location     Type
 11213 ;;                  1    wreg      enum E97
 11214 ;; Registers used:
 11215 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11216 ;; Tracked objects:
 11217 ;;		On entry : 0/0
 11218 ;;		On exit  : 0/0
 11219 ;;		Unchanged: 0/0
 11220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11221 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11222 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11223 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11224 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11225 ;;Total ram usage:        1 bytes
 11226 ;; Hardware stack levels used:    1
 11227 ;; Hardware stack levels required when called:    2
 11228 ;; This function calls:
 11229 ;;		i1_i2c_setBuffer
 11230 ;;		i1_i2c_setDataCompleteCallback
 11231 ;; This function is called by:
 11232 ;; This function uses a non-reentrant model
 11233 ;;
 11234                           
 11235                           
 11236                           ;psect for function i1_rd1RegCompleteHandler
 11237  070C                     i1_rd1RegCompleteHandler:	
 11238  070C                     i1l2639:	
 11239                           ;incstack = 0
 11240                           ; Regs used in i1_rd1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 11241                           
 11242                           
 11243                           ;i2c_simple_master.c: 60: i2c_setBuffer(p,1);
 11244  070C  3001               	movlw	1
 11245  070D  00F0               	movwf	i1i2c_setBuffer@bufferSize
 11246  070E  3000               	movlw	0
 11247  070F  00F1               	movwf	i1i2c_setBuffer@bufferSize+1
 11248  0710  0879               	movf	i1rd1RegCompleteHandler@p,w
 11249  0711  3187  274A  3187   	fcall	i1_i2c_setBuffer
 11250                           
 11251                           ;i2c_simple_master.c: 61: i2c_setDataCompleteCallback((0),(0));
 11252  0714  3000               	movlw	0
 11253  0715  00F5               	movwf	i1i2c_setDataCompleteCallback@cb
 11254  0716  00F6               	movwf	i1i2c_setDataCompleteCallback@cb+1
 11255  0717  01F7               	clrf	i1i2c_setDataCompleteCallback@p
 11256  0718  3187  2797         	fcall	i1_i2c_setDataCompleteCallback
 11257                           
 11258                           ;i2c_simple_master.c: 62: return i2c_restart_read;
 11259  071A  3002               	movlw	2
 11260  071B  0008               	return
 11261  071C                     __end_ofi1_rd1RegCompleteHandler:	
 11262                           
 11263                           	psect	text98
 11264  071C                     __ptext98:	
 11265 ;; *************** function i1_wr1RegCompleteHandler *****************
 11266 ;; Defined at:
 11267 ;;		line 31 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 11268 ;; Parameters:    Size  Location     Type
 11269 ;;  p               1    9[COMMON] PTR void 
 11270 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 11271 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 11272 ;; Auto vars:     Size  Location     Type
 11273 ;;		None
 11274 ;; Return value:  Size  Location     Type
 11275 ;;                  1    wreg      enum E97
 11276 ;; Registers used:
 11277 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11278 ;; Tracked objects:
 11279 ;;		On entry : 0/0
 11280 ;;		On exit  : 0/0
 11281 ;;		Unchanged: 0/0
 11282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11283 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11284 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11285 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11286 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11287 ;;Total ram usage:        1 bytes
 11288 ;; Hardware stack levels used:    1
 11289 ;; Hardware stack levels required when called:    2
 11290 ;; This function calls:
 11291 ;;		i1_i2c_setBuffer
 11292 ;;		i1_i2c_setDataCompleteCallback
 11293 ;; This function is called by:
 11294 ;; This function uses a non-reentrant model
 11295 ;;
 11296                           
 11297                           
 11298                           ;psect for function i1_wr1RegCompleteHandler
 11299  071C                     i1_wr1RegCompleteHandler:	
 11300  071C                     i1l2631:	
 11301                           ;incstack = 0
 11302                           ; Regs used in i1_wr1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 11303                           
 11304                           
 11305                           ;i2c_simple_master.c: 33: i2c_setBuffer(p,1);
 11306  071C  3001               	movlw	1
 11307  071D  00F0               	movwf	i1i2c_setBuffer@bufferSize
 11308  071E  3000               	movlw	0
 11309  071F  00F1               	movwf	i1i2c_setBuffer@bufferSize+1
 11310  0720  0879               	movf	i1wr1RegCompleteHandler@p,w
 11311  0721  3187  274A  3187   	fcall	i1_i2c_setBuffer
 11312                           
 11313                           ;i2c_simple_master.c: 34: i2c_setDataCompleteCallback((0),(0));
 11314  0724  3000               	movlw	0
 11315  0725  00F5               	movwf	i1i2c_setDataCompleteCallback@cb
 11316  0726  00F6               	movwf	i1i2c_setDataCompleteCallback@cb+1
 11317  0727  01F7               	clrf	i1i2c_setDataCompleteCallback@p
 11318  0728  3187  2797         	fcall	i1_i2c_setDataCompleteCallback
 11319                           
 11320                           ;i2c_simple_master.c: 35: return i2c_continue;
 11321  072A  3004               	movlw	4
 11322  072B  0008               	return
 11323  072C                     __end_ofi1_wr1RegCompleteHandler:	
 11324                           
 11325                           	psect	text99
 11326  072C                     __ptext99:	
 11327 ;; *************** function i1_wr2RegCompleteHandler *****************
 11328 ;; Defined at:
 11329 ;;		line 110 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 11330 ;; Parameters:    Size  Location     Type
 11331 ;;  p               1    9[COMMON] PTR void 
 11332 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 11333 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 11334 ;; Auto vars:     Size  Location     Type
 11335 ;;		None
 11336 ;; Return value:  Size  Location     Type
 11337 ;;                  1    wreg      enum E97
 11338 ;; Registers used:
 11339 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11340 ;; Tracked objects:
 11341 ;;		On entry : 0/0
 11342 ;;		On exit  : 0/0
 11343 ;;		Unchanged: 0/0
 11344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11345 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11346 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11347 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11348 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11349 ;;Total ram usage:        1 bytes
 11350 ;; Hardware stack levels used:    1
 11351 ;; Hardware stack levels required when called:    2
 11352 ;; This function calls:
 11353 ;;		i1_i2c_setBuffer
 11354 ;;		i1_i2c_setDataCompleteCallback
 11355 ;; This function is called by:
 11356 ;; This function uses a non-reentrant model
 11357 ;;
 11358                           
 11359                           
 11360                           ;psect for function i1_wr2RegCompleteHandler
 11361  072C                     i1_wr2RegCompleteHandler:	
 11362  072C                     i1l2655:	
 11363                           ;incstack = 0
 11364                           ; Regs used in i1_wr2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 11365                           
 11366                           
 11367                           ;i2c_simple_master.c: 112: i2c_setBuffer(p,2);
 11368  072C  3002               	movlw	2
 11369  072D  00F0               	movwf	i1i2c_setBuffer@bufferSize
 11370  072E  3000               	movlw	0
 11371  072F  00F1               	movwf	i1i2c_setBuffer@bufferSize+1
 11372  0730  0879               	movf	i1wr2RegCompleteHandler@p,w
 11373  0731  3187  274A  3187   	fcall	i1_i2c_setBuffer
 11374                           
 11375                           ;i2c_simple_master.c: 113: i2c_setDataCompleteCallback((0),(0));
 11376  0734  3000               	movlw	0
 11377  0735  00F5               	movwf	i1i2c_setDataCompleteCallback@cb
 11378  0736  00F6               	movwf	i1i2c_setDataCompleteCallback@cb+1
 11379  0737  01F7               	clrf	i1i2c_setDataCompleteCallback@p
 11380  0738  3187  2797         	fcall	i1_i2c_setDataCompleteCallback
 11381                           
 11382                           ;i2c_simple_master.c: 114: return i2c_continue;
 11383  073A  3004               	movlw	4
 11384  073B  0008               	return
 11385  073C                     __end_ofi1_wr2RegCompleteHandler:	
 11386                           
 11387                           	psect	text100
 11388  0797                     __ptext100:	
 11389 ;; *************** function i1_i2c_setDataCompleteCallback *****************
 11390 ;; Defined at:
 11391 ;;		line 89 in file "mcc_generated_files/drivers/i2c_master.c"
 11392 ;; Parameters:    Size  Location     Type
 11393 ;;  cb              2    5[COMMON] PTR FTN(PTR void ,)enum 
 11394 ;;		 -> rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), rd2RegCompleteHandler(1), rd1RegCompleteHandler(1), 
 11395 ;;		 -> Absolute function(1), wr1RegCompleteHandler(1), 
 11396 ;;  p               1    7[COMMON] PTR void 
 11397 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 11398 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 11399 ;; Auto vars:     Size  Location     Type
 11400 ;;		None
 11401 ;; Return value:  Size  Location     Type
 11402 ;;                  1    wreg      void 
 11403 ;; Registers used:
 11404 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11405 ;; Tracked objects:
 11406 ;;		On entry : 0/0
 11407 ;;		On exit  : 0/0
 11408 ;;		Unchanged: 0/0
 11409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11410 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11411 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11412 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11413 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11414 ;;Total ram usage:        4 bytes
 11415 ;; Hardware stack levels used:    1
 11416 ;; Hardware stack levels required when called:    1
 11417 ;; This function calls:
 11418 ;;		i1_setCallBack
 11419 ;; This function is called by:
 11420 ;;		i1_wr1RegCompleteHandler
 11421 ;;		i1_rd1RegCompleteHandler
 11422 ;;		i1_rd2RegCompleteHandler
 11423 ;;		i1_wr2RegCompleteHandler
 11424 ;;		i1_rdBlkRegCompleteHandler
 11425 ;; This function uses a non-reentrant model
 11426 ;;
 11427                           
 11428                           
 11429                           ;psect for function i1_i2c_setDataCompleteCallback
 11430  0797                     i1_i2c_setDataCompleteCallback:	
 11431                           
 11432                           ;i2c_master.c: 91: setCallBack(i2c_dataComplete,cb,p);
 11433                           
 11434                           ;incstack = 0
 11435                           ; Regs used in i1_i2c_setDataCompleteCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclat
      +                          h+cstack]
 11436  0797  0876               	movf	i1i2c_setDataCompleteCallback@cb+1,w
 11437  0798  00F1               	movwf	i1setCallBack@cb+1
 11438  0799  0875               	movf	i1i2c_setDataCompleteCallback@cb,w
 11439  079A  00F0               	movwf	i1setCallBack@cb
 11440  079B  0877               	movf	i1i2c_setDataCompleteCallback@p,w
 11441  079C  00F8               	movwf	??i1_i2c_setDataCompleteCallback
 11442  079D  0878               	movf	??i1_i2c_setDataCompleteCallback,w
 11443  079E  00F2               	movwf	i1setCallBack@p
 11444  079F  3000               	movlw	0
 11445  07A0  3185  2561         	fcall	i1_setCallBack
 11446  07A2  0008               	return
 11447  07A3                     __end_ofi1_i2c_setDataCompleteCallback:	
 11448                           
 11449                           	psect	text101
 11450  0561                     __ptext101:	
 11451 ;; *************** function i1_setCallBack *****************
 11452 ;; Defined at:
 11453 ;;		line 453 in file "mcc_generated_files/drivers/i2c_master.c"
 11454 ;; Parameters:    Size  Location     Type
 11455 ;;  idx             1    wreg     enum E12355
 11456 ;;  cb              2    0[COMMON] PTR FTN(PTR void ,)enum 
 11457 ;;		 -> rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), rd2RegCompleteHandler(1), rd1RegCompleteHandler(1), 
 11458 ;;		 -> i2c_restartWrite(1), Absolute function(1), wr1RegCompleteHandler(1), 
 11459 ;;  p               1    2[COMMON] PTR void 
 11460 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 11461 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 11462 ;; Auto vars:     Size  Location     Type
 11463 ;;  idx             1    4[COMMON] enum E12355
 11464 ;; Return value:  Size  Location     Type
 11465 ;;                  1    wreg      void 
 11466 ;; Registers used:
 11467 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11468 ;; Tracked objects:
 11469 ;;		On entry : 0/0
 11470 ;;		On exit  : 0/0
 11471 ;;		Unchanged: 0/0
 11472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11473 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11474 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11475 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11476 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11477 ;;Total ram usage:        5 bytes
 11478 ;; Hardware stack levels used:    1
 11479 ;; This function calls:
 11480 ;;		Nothing
 11481 ;; This function is called by:
 11482 ;;		i1_i2c_setDataCompleteCallback
 11483 ;; This function uses a non-reentrant model
 11484 ;;
 11485                           
 11486                           
 11487                           ;psect for function i1_setCallBack
 11488  0561                     i1_setCallBack:	
 11489                           
 11490                           ;incstack = 0
 11491                           ; Regs used in i1_setCallBack: [wreg+fsr1l+fsr1h+status,2+status,0]
 11492                           ;i1setCallBack@idx stored from wreg
 11493  0561  00F4               	movwf	i1setCallBack@idx
 11494                           
 11495                           ;i2c_master.c: 455: if(cb)
 11496  0562  0870               	movf	i1setCallBack@cb,w
 11497  0563  0471               	iorwf	i1setCallBack@cb+1,w
 11498  0564  1903               	btfsc	3,2
 11499  0565  2D77               	goto	i1l2507
 11500                           
 11501                           ;i2c_master.c: 456: {
 11502                           ;i2c_master.c: 457: i2c_status.callbackTable[idx] = cb;
 11503  0566  3574               	lslf	i1setCallBack@idx,w
 11504  0567  3E2B               	addlw	(low ((_i2c_status| 0+11)))& (0+255)
 11505  0568  0086               	movwf	6
 11506  0569  0187               	clrf	7
 11507  056A  0870               	movf	i1setCallBack@cb,w
 11508  056B  3FC0               	movwi [0]fsr1
 11509  056C  0871               	movf	i1setCallBack@cb+1,w
 11510  056D  3FC1               	movwi [1]fsr1
 11511                           
 11512                           ;i2c_master.c: 458: i2c_status.callbackPayload[idx] = p;
 11513  056E  0872               	movf	i1setCallBack@p,w
 11514  056F  00F3               	movwf	??i1_setCallBack
 11515  0570  0874               	movf	i1setCallBack@idx,w
 11516  0571  3E37               	addlw	(low ((_i2c_status| 0+23)))& (0+255)
 11517  0572  0086               	movwf	6
 11518  0573  0187               	clrf	7
 11519  0574  0873               	movf	??i1_setCallBack,w
 11520  0575  0081               	movwf	1
 11521                           
 11522                           ;i2c_master.c: 459: }
 11523  0576  0008               	return
 11524  0577                     i1l2507:	
 11525                           
 11526                           ;i2c_master.c: 460: else
 11527                           ;i2c_master.c: 461: {
 11528                           ;i2c_master.c: 462: i2c_status.callbackTable[idx] = returnStop;
 11529  0577  3574               	lslf	i1setCallBack@idx,w
 11530  0578  3E2B               	addlw	(low ((_i2c_status| 0+11)))& (0+255)
 11531  0579  0086               	movwf	6
 11532  057A  0187               	clrf	7
 11533  057B  3088               	movlw	low _returnStop
 11534  057C  3FC0               	movwi [0]fsr1
 11535  057D  300F               	movlw	high _returnStop
 11536  057E  3FC1               	movwi [1]fsr1
 11537                           
 11538                           ;i2c_master.c: 463: i2c_status.callbackPayload[idx] = (0);
 11539  057F  0874               	movf	i1setCallBack@idx,w
 11540  0580  3E37               	addlw	(low ((_i2c_status| 0+23)))& (0+255)
 11541  0581  0086               	movwf	6
 11542  0582  0187               	clrf	7
 11543  0583  0181               	clrf	1
 11544  0584  0008               	return
 11545  0585                     __end_ofi1_setCallBack:	
 11546                           
 11547                           	psect	text102
 11548  074A                     __ptext102:	
 11549 ;; *************** function i1_i2c_setBuffer *****************
 11550 ;; Defined at:
 11551 ;;		line 184 in file "mcc_generated_files/drivers/i2c_master.c"
 11552 ;; Parameters:    Size  Location     Type
 11553 ;;  buffer          1    wreg     PTR void 
 11554 ;;		 -> i2c_readDataBlock@reg(1), i2c_readDataBlock@d(3), i2c_write2ByteRegister@reg(1), i2c_write2ByteRegister@data(2),
      + 
 11555 ;;		 -> i2c_read2ByteRegister@reg(1), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@reg(1), i2c_read1ByteRegist
      +er@d2(1), 
 11556 ;;		 -> i2c_write1ByteRegister@reg(1), i2c_write1ByteRegister@data(1), NULL(0), writebuffer(17), 
 11557 ;;  bufferSize      2    0[COMMON] unsigned int 
 11558 ;; Auto vars:     Size  Location     Type
 11559 ;;  buffer          1    3[COMMON] PTR void 
 11560 ;;		 -> i2c_readDataBlock@reg(1), i2c_readDataBlock@d(3), i2c_write2ByteRegister@reg(1), i2c_write2ByteRegister@data(2),
      + 
 11561 ;;		 -> i2c_read2ByteRegister@reg(1), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@reg(1), i2c_read1ByteRegist
      +er@d2(1), 
 11562 ;;		 -> i2c_write1ByteRegister@reg(1), i2c_write1ByteRegister@data(1), NULL(0), writebuffer(17), 
 11563 ;; Return value:  Size  Location     Type
 11564 ;;                  1    wreg      void 
 11565 ;; Registers used:
 11566 ;;		wreg
 11567 ;; Tracked objects:
 11568 ;;		On entry : 0/0
 11569 ;;		On exit  : 0/0
 11570 ;;		Unchanged: 0/0
 11571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11572 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11573 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11574 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11575 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11576 ;;Total ram usage:        4 bytes
 11577 ;; Hardware stack levels used:    1
 11578 ;; This function calls:
 11579 ;;		Nothing
 11580 ;; This function is called by:
 11581 ;;		i1_wr1RegCompleteHandler
 11582 ;;		i1_rd1RegCompleteHandler
 11583 ;;		i1_rd2RegCompleteHandler
 11584 ;;		i1_wr2RegCompleteHandler
 11585 ;;		i1_rdBlkRegCompleteHandler
 11586 ;; This function uses a non-reentrant model
 11587 ;;
 11588                           
 11589                           
 11590                           ;psect for function i1_i2c_setBuffer
 11591  074A                     i1_i2c_setBuffer:	
 11592                           
 11593                           ;incstack = 0
 11594                           ; Regs used in i1_i2c_setBuffer: [wreg]
 11595                           ;i1i2c_setBuffer@buffer stored from wreg
 11596  074A  00F3               	movwf	i1i2c_setBuffer@buffer
 11597                           
 11598                           ;i2c_master.c: 186: if(i2c_status.bufferFree)
 11599  074B  0020               	movlb	0	; select bank0
 11600  074C  1D20               	btfss	_i2c_status,2
 11601  074D  0008               	return
 11602                           
 11603                           ;i2c_master.c: 187: {
 11604                           ;i2c_master.c: 188: i2c_status.data_ptr = buffer;
 11605  074E  0873               	movf	i1i2c_setBuffer@buffer,w
 11606  074F  00F2               	movwf	??i1_i2c_setBuffer
 11607  0750  0872               	movf	??i1_i2c_setBuffer,w
 11608  0751  00A2               	movwf	low ((_i2c_status| 0+2))
 11609                           
 11610                           ;i2c_master.c: 189: i2c_status.data_length = bufferSize;
 11611  0752  0871               	movf	i1i2c_setBuffer@bufferSize+1,w
 11612  0753  00A4               	movwf	_i2c_status+4
 11613  0754  0870               	movf	i1i2c_setBuffer@bufferSize,w
 11614  0755  00A3               	movwf	_i2c_status+3
 11615                           
 11616                           ;i2c_master.c: 190: i2c_status.bufferFree = 0;
 11617  0756  1120               	bcf	_i2c_status,2
 11618  0757  0008               	return
 11619  0758                     __end_ofi1_i2c_setBuffer:	
 11620                           
 11621                           	psect	text103
 11622  0F11                     __ptext103:	
 11623 ;; *************** function i1_i2c_driver_stop *****************
 11624 ;; Defined at:
 11625 ;;		line 156 in file "mcc_generated_files/i2c_driver.c"
 11626 ;; Parameters:    Size  Location     Type
 11627 ;;		None
 11628 ;; Auto vars:     Size  Location     Type
 11629 ;;		None
 11630 ;; Return value:  Size  Location     Type
 11631 ;;                  1    wreg      void 
 11632 ;; Registers used:
 11633 ;;		None
 11634 ;; Tracked objects:
 11635 ;;		On entry : 0/0
 11636 ;;		On exit  : 0/0
 11637 ;;		Unchanged: 0/0
 11638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11639 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11640 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11641 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11642 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11643 ;;Total ram usage:        0 bytes
 11644 ;; Hardware stack levels used:    1
 11645 ;; This function calls:
 11646 ;;		Nothing
 11647 ;; This function is called by:
 11648 ;;		i1_do_I2C_SEND_STOP
 11649 ;; This function uses a non-reentrant model
 11650 ;;
 11651                           
 11652                           
 11653                           ;psect for function i1_i2c_driver_stop
 11654  0F11                     i1_i2c_driver_stop:	
 11655                           
 11656                           ;i2c_driver.c: 158: SSP1CON2bits.PEN = 1;
 11657                           
 11658                           ;incstack = 0
 11659                           ; Regs used in i1_i2c_driver_stop: []
 11660  0F11  0024               	movlb	4	; select bank4
 11661  0F12  1516               	bsf	22,2	;volatile
 11662  0F13  0008               	return
 11663  0F14                     __end_ofi1_i2c_driver_stop:	
 11664                           
 11665                           	psect	text104
 11666  0F0E                     __ptext104:	
 11667 ;; *************** function i1_i2c_driver_restart *****************
 11668 ;; Defined at:
 11669 ;;		line 151 in file "mcc_generated_files/i2c_driver.c"
 11670 ;; Parameters:    Size  Location     Type
 11671 ;;		None
 11672 ;; Auto vars:     Size  Location     Type
 11673 ;;		None
 11674 ;; Return value:  Size  Location     Type
 11675 ;;                  1    wreg      void 
 11676 ;; Registers used:
 11677 ;;		None
 11678 ;; Tracked objects:
 11679 ;;		On entry : 0/0
 11680 ;;		On exit  : 0/0
 11681 ;;		Unchanged: 0/0
 11682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11683 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11684 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11685 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11686 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11687 ;;Total ram usage:        0 bytes
 11688 ;; Hardware stack levels used:    1
 11689 ;; This function calls:
 11690 ;;		Nothing
 11691 ;; This function is called by:
 11692 ;;		i1_do_I2C_SEND_RESTART_READ
 11693 ;;		i1_do_I2C_SEND_RESTART_WRITE
 11694 ;;		i1_do_I2C_SEND_RESTART
 11695 ;; This function uses a non-reentrant model
 11696 ;;
 11697                           
 11698                           
 11699                           ;psect for function i1_i2c_driver_restart
 11700  0F0E                     i1_i2c_driver_restart:	
 11701                           
 11702                           ;i2c_driver.c: 153: SSP1CON2bits.RSEN = 1;
 11703                           
 11704                           ;incstack = 0
 11705                           ; Regs used in i1_i2c_driver_restart: []
 11706  0F0E  0024               	movlb	4	; select bank4
 11707  0F0F  1496               	bsf	22,1	;volatile
 11708  0F10  0008               	return
 11709  0F11                     __end_ofi1_i2c_driver_restart:	
 11710                           
 11711                           	psect	text105
 11712  0F38                     __ptext105:	
 11713 ;; *************** function i1_i2c_driver_sendACK *****************
 11714 ;; Defined at:
 11715 ;;		line 196 in file "mcc_generated_files/i2c_driver.c"
 11716 ;; Parameters:    Size  Location     Type
 11717 ;;		None
 11718 ;; Auto vars:     Size  Location     Type
 11719 ;;		None
 11720 ;; Return value:  Size  Location     Type
 11721 ;;                  1    wreg      void 
 11722 ;; Registers used:
 11723 ;;		None
 11724 ;; Tracked objects:
 11725 ;;		On entry : 0/0
 11726 ;;		On exit  : 0/0
 11727 ;;		Unchanged: 0/0
 11728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11729 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11730 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11731 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11732 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11733 ;;Total ram usage:        0 bytes
 11734 ;; Hardware stack levels used:    1
 11735 ;; This function calls:
 11736 ;;		Nothing
 11737 ;; This function is called by:
 11738 ;;		i1_do_I2C_DO_ACK
 11739 ;;		i1_do_I2C_RX
 11740 ;; This function uses a non-reentrant model
 11741 ;;
 11742                           
 11743                           
 11744                           ;psect for function i1_i2c_driver_sendACK
 11745  0F38                     i1_i2c_driver_sendACK:	
 11746                           
 11747                           ;i2c_driver.c: 198: SSP1CON2bits.ACKDT = 0;
 11748                           
 11749                           ;incstack = 0
 11750                           ; Regs used in i1_i2c_driver_sendACK: []
 11751  0F38  0024               	movlb	4	; select bank4
 11752  0F39  1296               	bcf	22,5	;volatile
 11753                           
 11754                           ;i2c_driver.c: 199: SSP1CON2bits.ACKEN = 1;
 11755  0F3A  1616               	bsf	22,4	;volatile
 11756  0F3B  0008               	return
 11757  0F3C                     __end_ofi1_i2c_driver_sendACK:	
 11758                           
 11759                           	psect	text106
 11760  0F0B                     __ptext106:	
 11761 ;; *************** function _i2c_busCollisionISR *****************
 11762 ;; Defined at:
 11763 ;;		line 435 in file "mcc_generated_files/drivers/i2c_master.c"
 11764 ;; Parameters:    Size  Location     Type
 11765 ;;		None
 11766 ;; Auto vars:     Size  Location     Type
 11767 ;;		None
 11768 ;; Return value:  Size  Location     Type
 11769 ;;                  1    wreg      void 
 11770 ;; Registers used:
 11771 ;;		status,2, status,0, pclath, cstack
 11772 ;; Tracked objects:
 11773 ;;		On entry : 0/0
 11774 ;;		On exit  : 0/0
 11775 ;;		Unchanged: 0/0
 11776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11777 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11778 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11779 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11780 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11781 ;;Total ram usage:        0 bytes
 11782 ;; Hardware stack levels used:    1
 11783 ;; Hardware stack levels required when called:    1
 11784 ;; This function calls:
 11785 ;;		_i2c_driver_clearBusCollision
 11786 ;; This function is called by:
 11787 ;;		_i2c_open
 11788 ;;		_INTERRUPT_InterruptManager
 11789 ;; This function uses a non-reentrant model
 11790 ;;
 11791                           
 11792                           
 11793                           ;psect for function _i2c_busCollisionISR
 11794  0F0B                     _i2c_busCollisionISR:	
 11795                           
 11796                           ;i2c_master.c: 437: i2c_driver_clearBusCollision();
 11797                           
 11798                           ;incstack = 0
 11799                           ; Regs used in _i2c_busCollisionISR: [status,2+status,0+pclath+cstack]
 11800  0F0B  318F  2708         	fcall	_i2c_driver_clearBusCollision
 11801  0F0D  0008               	return
 11802  0F0E                     __end_of_i2c_busCollisionISR:	
 11803                           
 11804                           	psect	text107
 11805  0F08                     __ptext107:	
 11806 ;; *************** function _i2c_driver_clearBusCollision *****************
 11807 ;; Defined at:
 11808 ;;		line 253 in file "mcc_generated_files/i2c_driver.c"
 11809 ;; Parameters:    Size  Location     Type
 11810 ;;		None
 11811 ;; Auto vars:     Size  Location     Type
 11812 ;;		None
 11813 ;; Return value:  Size  Location     Type
 11814 ;;                  1    wreg      void 
 11815 ;; Registers used:
 11816 ;;		None
 11817 ;; Tracked objects:
 11818 ;;		On entry : 0/0
 11819 ;;		On exit  : 0/0
 11820 ;;		Unchanged: 0/0
 11821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11822 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11823 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11824 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11825 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11826 ;;Total ram usage:        0 bytes
 11827 ;; Hardware stack levels used:    1
 11828 ;; This function calls:
 11829 ;;		Nothing
 11830 ;; This function is called by:
 11831 ;;		_i2c_busCollisionISR
 11832 ;; This function uses a non-reentrant model
 11833 ;;
 11834                           
 11835                           
 11836                           ;psect for function _i2c_driver_clearBusCollision
 11837  0F08                     _i2c_driver_clearBusCollision:	
 11838                           
 11839                           ;i2c_driver.c: 255: PIR2bits.BCL1IF = 0;
 11840                           
 11841                           ;incstack = 0
 11842                           ; Regs used in _i2c_driver_clearBusCollision: []
 11843  0F08  0020               	movlb	0	; select bank0
 11844  0F09  1191               	bcf	17,3	;volatile
 11845  0F0A  0008               	return
 11846  0F0B                     __end_of_i2c_driver_clearBusCollision:	
 11847  007E                     btemp	set	126	;btemp
 11848  007E                     int$flags	set	126
 11849  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        33
    BSS         87
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     29      72
    BANK1            80      0      77
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    i2c_write1ByteRegister@data.data	PTR unsigned char  size(1) Largest target is 0

    i2c_read1ByteRegister@d2.data	PTR unsigned char  size(1) Largest target is 0

    i2c_read2ByteRegister@result.data	PTR unsigned char  size(1) Largest target is 0

    i2c_write2ByteRegister@data.data	PTR unsigned char  size(1) Largest target is 0

    do_I2C_TX$1421$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    do_I2C_RX$1427$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    do_I2C_TX_EMPTY$1433$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    i2c_ISR$1439	PTR const FTN()enum E12337 size(2) Largest target is 1
		 -> do_I2C_TX_EMPTY(), do_I2C_RX(), do_I2C_TX(), do_I2C_DO_ADDRESS_NACK(), 
		 -> do_I2C_DO_NACK_RESTART(), do_I2C_DO_NACK_STOP(), do_I2C_DO_ACK(), do_I2C_RCEN(), 
		 -> do_I2C_SEND_ADR_WRITE(), do_I2C_SEND_ADR_READ(), do_I2C_SEND_STOP(), do_I2C_SEND_RESTART(), 
		 -> do_I2C_SEND_RESTART_WRITE(), do_I2C_SEND_RESTART_READ(), do_I2C_IDLE(), do_I2C_RESET(), 

    do_I2C_TX_EMPTY$1438	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    do_I2C_TX_EMPTY$1433	PTR FTN(PTR void ,)enum E12171 size(2) Largest target is 1
		 -> returnReset(), returnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> rd2RegCompleteHandler(), rd1RegCompleteHandler(), i2c_restartWrite(), Absolute function(), 
		 -> wr1RegCompleteHandler(), 

    do_I2C_RX$1432	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    do_I2C_RX$1427	PTR FTN(PTR void ,)enum E12171 size(2) Largest target is 1
		 -> returnReset(), returnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> rd2RegCompleteHandler(), rd1RegCompleteHandler(), i2c_restartWrite(), Absolute function(), 
		 -> wr1RegCompleteHandler(), 

    do_I2C_TX$1426	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    do_I2C_TX$1421	PTR FTN(PTR void ,)enum E12171 size(2) Largest target is 1
		 -> returnReset(), returnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> rd2RegCompleteHandler(), rd1RegCompleteHandler(), i2c_restartWrite(), Absolute function(), 
		 -> wr1RegCompleteHandler(), 

    returnStop@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    returnReset@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    cb$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    cb$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    Absolute function$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    i2c_restartWrite@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    cb$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    S685$11$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    mssp_waitForEvent@timeout	PTR unsigned int  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    setCallBack@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    setCallBack@cb	PTR FTN(PTR void ,)enum E12171 size(2) Largest target is 1
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 
		 -> i2c_restartWrite(), Absolute function(), wr1RegCompleteHandler(), 

    fsmStateTable	PTR const FTN()enum E12337[16] size(2) Largest target is 1
		 -> do_I2C_TX_EMPTY(), do_I2C_RX(), do_I2C_TX(), do_I2C_DO_ADDRESS_NACK(), 
		 -> do_I2C_DO_NACK_RESTART(), do_I2C_DO_NACK_STOP(), do_I2C_DO_ACK(), do_I2C_RCEN(), 
		 -> do_I2C_SEND_ADR_WRITE(), do_I2C_SEND_ADR_READ(), do_I2C_SEND_STOP(), do_I2C_SEND_RESTART(), 
		 -> do_I2C_SEND_RESTART_WRITE(), do_I2C_SEND_RESTART_READ(), do_I2C_IDLE(), do_I2C_RESET(), 

    i2c_setBuffer@buffer	PTR void  size(1) Largest target is 17
		 -> i2c_readDataBlock@reg(COMMON[1]), i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@reg(COMMON[1]), i2c_write2ByteRegister@data(COMMON[2]), 
		 -> i2c_read2ByteRegister@reg(COMMON[1]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@reg(COMMON[1]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@reg(COMMON[1]), i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), writebuffer(BANK1[17]), 

    i2c_setAddressNACKCallback@p	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    i2c_setAddressNACKCallback@cb	PTR FTN(PTR void ,)enum E12171 size(2) Largest target is 1
		 -> i2c_restartWrite(), 

    i2c_setDataCompleteCallback@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    i2c_setDataCompleteCallback@cb	PTR FTN(PTR void ,)enum E12171 size(2) Largest target is 1
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 
		 -> Absolute function(), wr1RegCompleteHandler(), 

    S685$callbackPayload	PTR void [6] size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    i2c_status.callbackPayload	PTR void [6] size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    S685$callbackTable	PTR FTN(PTR void ,)enum E12171[6] size(2) Largest target is 1
		 -> returnReset(), returnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> rd2RegCompleteHandler(), rd1RegCompleteHandler(), i2c_restartWrite(), Absolute function(), 
		 -> wr1RegCompleteHandler(), 

    i2c_status.callbackTable	PTR FTN(PTR void ,)enum E12171[6] size(2) Largest target is 1
		 -> i1_returnStop(), returnReset(), returnStop(), rdBlkRegCompleteHandler(), 
		 -> wr2RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), i2c_restartWrite(), 
		 -> Absolute function(), wr1RegCompleteHandler(), 

    S685$data_ptr	PTR unsigned char  size(1) Largest target is 17
		 -> i2c_readDataBlock@reg(COMMON[1]), i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@reg(COMMON[1]), i2c_write2ByteRegister@data(COMMON[2]), 
		 -> i2c_read2ByteRegister@reg(COMMON[1]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@reg(COMMON[1]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@reg(COMMON[1]), i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), writebuffer(BANK1[17]), 

    i2c_status.data_ptr	PTR unsigned char  size(1) Largest target is 17
		 -> i2c_readDataBlock@reg(COMMON[1]), i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@reg(COMMON[1]), i2c_write2ByteRegister@data(COMMON[2]), 
		 -> i2c_read2ByteRegister@reg(COMMON[1]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@reg(COMMON[1]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@reg(COMMON[1]), i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), writebuffer(BANK1[17]), 

    d.data	PTR unsigned char  size(1) Largest target is 0

    S501$data	PTR unsigned char  size(1) Largest target is 0

    rdBlkRegCompleteHandler@p.data	PTR unsigned char  size(1) Largest target is 0

    rdBlkRegCompleteHandler@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    wr2RegCompleteHandler@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    rd2RegCompleteHandler@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    rd1RegCompleteHandler@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    i2c_writeNBytes@data	PTR void  size(1) Largest target is 17
		 -> writebuffer(BANK1[17]), 

    wr1RegCompleteHandler@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    i2c_driver_setI2cISR@f	PTR void  size(2) Largest target is 1
		 -> i2c_ISR(), 

    i2c_driver_i2cISR	PTR FTN()void  size(2) Largest target is 1
		 -> i2c_ISR(), Absolute function(), 

    i2c_driver_setBusCollisionISR@f	PTR void  size(2) Largest target is 1
		 -> i2c_busCollisionISR(), 

    i2c_driver_busCollisionISR	PTR FTN()void  size(2) Largest target is 1
		 -> i2c_busCollisionISR(), Absolute function(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->i1_i2c_ISR
    i1_i2c_ISR->i1_do_I2C_TX
    i1_do_I2C_TX_EMPTY->i1_i2c_restartWrite
    i1_do_I2C_TX_EMPTY->i1_rd1RegCompleteHandler
    i1_do_I2C_TX_EMPTY->i1_rd2RegCompleteHandler
    i1_do_I2C_TX_EMPTY->i1_rdBlkRegCompleteHandler
    i1_do_I2C_TX_EMPTY->i1_returnReset
    i1_do_I2C_TX_EMPTY->i1_returnStop
    i1_do_I2C_TX_EMPTY->i1_wr1RegCompleteHandler
    i1_do_I2C_TX_EMPTY->i1_wr2RegCompleteHandler
    i1_do_I2C_TX->i1_i2c_restartWrite
    i1_do_I2C_TX->i1_rd1RegCompleteHandler
    i1_do_I2C_TX->i1_rd2RegCompleteHandler
    i1_do_I2C_TX->i1_rdBlkRegCompleteHandler
    i1_do_I2C_TX->i1_returnReset
    i1_do_I2C_TX->i1_returnStop
    i1_do_I2C_TX->i1_wr1RegCompleteHandler
    i1_do_I2C_TX->i1_wr2RegCompleteHandler
    i1_do_I2C_SEND_ADR_WRITE->i1_i2c_driver_TXData
    i1_do_I2C_SEND_ADR_READ->i1_i2c_driver_TXData
    i1_do_I2C_RX->i1_i2c_restartWrite
    i1_do_I2C_RX->i1_rd1RegCompleteHandler
    i1_do_I2C_RX->i1_rd2RegCompleteHandler
    i1_do_I2C_RX->i1_rdBlkRegCompleteHandler
    i1_do_I2C_RX->i1_returnReset
    i1_do_I2C_RX->i1_returnStop
    i1_do_I2C_RX->i1_wr1RegCompleteHandler
    i1_do_I2C_RX->i1_wr2RegCompleteHandler
    i1_do_I2C_DO_ADDRESS_NACK->i1_i2c_restartWrite
    i1_do_I2C_DO_ADDRESS_NACK->i1_rd1RegCompleteHandler
    i1_do_I2C_DO_ADDRESS_NACK->i1_rd2RegCompleteHandler
    i1_do_I2C_DO_ADDRESS_NACK->i1_rdBlkRegCompleteHandler
    i1_do_I2C_DO_ADDRESS_NACK->i1_returnReset
    i1_do_I2C_DO_ADDRESS_NACK->i1_returnStop
    i1_do_I2C_DO_ADDRESS_NACK->i1_wr1RegCompleteHandler
    i1_do_I2C_DO_ADDRESS_NACK->i1_wr2RegCompleteHandler
    i1_wr2RegCompleteHandler->i1_i2c_setDataCompleteCallback
    i1_wr1RegCompleteHandler->i1_i2c_setDataCompleteCallback
    i1_rdBlkRegCompleteHandler->i1_i2c_setDataCompleteCallback
    i1_rd2RegCompleteHandler->i1_i2c_setDataCompleteCallback
    i1_rd1RegCompleteHandler->i1_i2c_setDataCompleteCallback
    i1_i2c_setDataCompleteCallback->i1_setCallBack

Critical Paths under _main in BANK0

    _main->_writeDisplay
    _writeDisplay->_i2c_writeNBytes
    _shiftWalls->_random
    _initializeDisplay->_i2c_writeNBytes
    _i2c_setAddressNACKCallback->_setCallBack
    _i2c_open->_i2c_driver_setBusCollisionISR
    _i2c_open->_i2c_driver_setI2cISR
    _i2c_masterWrite->_i2c_masterOperation
    _i2c_poller->_i2c_ISR
    _i2c_ISR->_do_I2C_TX
    _do_I2C_TX_EMPTY->_i2c_restartWrite
    _do_I2C_TX_EMPTY->_rd1RegCompleteHandler
    _do_I2C_TX_EMPTY->_rd2RegCompleteHandler
    _do_I2C_TX_EMPTY->_rdBlkRegCompleteHandler
    _do_I2C_TX_EMPTY->_returnReset
    _do_I2C_TX_EMPTY->_returnStop
    _do_I2C_TX_EMPTY->_wr1RegCompleteHandler
    _do_I2C_TX_EMPTY->_wr2RegCompleteHandler
    _do_I2C_TX->_i2c_restartWrite
    _do_I2C_TX->_rd1RegCompleteHandler
    _do_I2C_TX->_rd2RegCompleteHandler
    _do_I2C_TX->_rdBlkRegCompleteHandler
    _do_I2C_TX->_returnReset
    _do_I2C_TX->_returnStop
    _do_I2C_TX->_wr1RegCompleteHandler
    _do_I2C_TX->_wr2RegCompleteHandler
    _do_I2C_SEND_ADR_WRITE->_i2c_driver_TXData
    _do_I2C_SEND_ADR_READ->_i2c_driver_TXData
    _do_I2C_RX->_i2c_restartWrite
    _do_I2C_RX->_rd1RegCompleteHandler
    _do_I2C_RX->_rd2RegCompleteHandler
    _do_I2C_RX->_rdBlkRegCompleteHandler
    _do_I2C_RX->_returnReset
    _do_I2C_RX->_returnStop
    _do_I2C_RX->_wr1RegCompleteHandler
    _do_I2C_RX->_wr2RegCompleteHandler
    _do_I2C_DO_ADDRESS_NACK->_i2c_restartWrite
    _do_I2C_DO_ADDRESS_NACK->_rd1RegCompleteHandler
    _do_I2C_DO_ADDRESS_NACK->_rd2RegCompleteHandler
    _do_I2C_DO_ADDRESS_NACK->_rdBlkRegCompleteHandler
    _do_I2C_DO_ADDRESS_NACK->_returnReset
    _do_I2C_DO_ADDRESS_NACK->_returnStop
    _do_I2C_DO_ADDRESS_NACK->_wr1RegCompleteHandler
    _do_I2C_DO_ADDRESS_NACK->_wr2RegCompleteHandler
    _wr2RegCompleteHandler->_i2c_setDataCompleteCallback
    _wr1RegCompleteHandler->_i2c_setDataCompleteCallback
    _rdBlkRegCompleteHandler->_i2c_setDataCompleteCallback
    _rd2RegCompleteHandler->_i2c_setDataCompleteCallback
    _rd1RegCompleteHandler->_i2c_setDataCompleteCallback
    _i2c_setDataCompleteCallback->_setCallBack
    _drawWalls->_reverse

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  167579
                                             27 BANK0      2     2      0
                  _SYSTEM_Initialize
                        _clearPixels
                          _drawPixel
                          _drawWalls
                  _initializeDisplay
                         _shiftWalls
                       _writeDisplay
 ---------------------------------------------------------------------------------
 (1) _writeDisplay                                         5     5      0   83652
                                             22 BANK0      5     5      0
                            ___awdiv
                    _i2c_writeNBytes
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     604
                                              1 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _shiftWalls                                           6     6      0     174
                                              2 BANK0      6     6      0
                             _random
 ---------------------------------------------------------------------------------
 (2) _random                                               2     1      1     174
                                              1 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (1) _initializeDisplay                                    1     1      0   83048
                                             22 BANK0      1     1      0
                    _i2c_writeNBytes
 ---------------------------------------------------------------------------------
 (2) _i2c_writeNBytes                                      4     1      3   83048
                                             18 BANK0      4     1      3
                          _i2c_close
                    _i2c_masterWrite
                           _i2c_open
         _i2c_setAddressNACKCallback
                      _i2c_setBuffer
 ---------------------------------------------------------------------------------
 (3) _i2c_setAddressNACKCallback                           4     1      3    1870
                                              6 BANK0      4     1      3
                        _setCallBack
 ---------------------------------------------------------------------------------
 (3) _i2c_open                                             3     3      0     366
                                              3 BANK0      3     3      0
                    _i2c_driver_open
      _i2c_driver_setBusCollisionISR
               _i2c_driver_setI2cISR
                      _mssp_clearIRQ
 ---------------------------------------------------------------------------------
 (4) _i2c_driver_setI2cISR                                 2     0      2      98
                                              1 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _i2c_driver_setBusCollisionISR                        2     0      2      98
                                              1 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _i2c_driver_open                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2c_masterWrite                                      0     0      0   78362
                _i2c_masterOperation
 ---------------------------------------------------------------------------------
 (4) _i2c_masterOperation                                  3     3      0   78362
                                             15 BANK0      3     3      0
                   _i2c_driver_start
                         _i2c_poller
                  _mssp_IRQisEnabled
 ---------------------------------------------------------------------------------
 (5) _mssp_IRQisEnabled                                    2     2      0       0
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (5) _i2c_poller                                           0     0      0   78192
                            _i2c_ISR
                  _mssp_waitForEvent
 ---------------------------------------------------------------------------------
 (6) _mssp_waitForEvent                                    1     1      0      50
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _i2c_ISR                                              1     1      0   78142
                                             14 BANK0      1     1      0
                      _do_I2C_DO_ACK *
             _do_I2C_DO_ADDRESS_NACK *
             _do_I2C_DO_NACK_RESTART *
                _do_I2C_DO_NACK_STOP *
                        _do_I2C_IDLE *
                        _do_I2C_RCEN *
                       _do_I2C_RESET *
                          _do_I2C_RX *
               _do_I2C_SEND_ADR_READ *
              _do_I2C_SEND_ADR_WRITE *
                _do_I2C_SEND_RESTART *
           _do_I2C_SEND_RESTART_READ *
          _do_I2C_SEND_RESTART_WRITE *
                   _do_I2C_SEND_STOP *
                          _do_I2C_TX *
                    _do_I2C_TX_EMPTY *
                  _i2c_driver_isNACK
                      _mssp_clearIRQ
 ---------------------------------------------------------------------------------
 (7) _do_I2C_TX_EMPTY                                      1     1      0   19494
                                             11 BANK0      1     1      0
                   Absolute function *
                _do_I2C_SEND_RESTART
                   _do_I2C_SEND_STOP
                   _i2c_restartWrite *
                        _mssp_setIRQ
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
                        _returnReset *
                         _returnStop *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (8) _mssp_setIRQ                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_TX                                            3     3      0   19616
                                             11 BANK0      3     3      0
                   Absolute function *
           _do_I2C_SEND_RESTART_READ
          _do_I2C_SEND_RESTART_WRITE
                   _do_I2C_SEND_STOP
                  _i2c_driver_TXData
                  _i2c_driver_isNACK
                   _i2c_restartWrite *
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
                        _returnReset *
                         _returnStop *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (7) _i2c_driver_isNACK                                    1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (8) _do_I2C_SEND_RESTART_WRITE                            0     0      0       0
                 _i2c_driver_restart
 ---------------------------------------------------------------------------------
 (8) _do_I2C_SEND_RESTART_READ                             0     0      0       0
                 _i2c_driver_restart
 ---------------------------------------------------------------------------------
 (7) _do_I2C_SEND_ADR_WRITE                                0     0      0      22
                  _i2c_driver_TXData
 ---------------------------------------------------------------------------------
 (7) _do_I2C_SEND_ADR_READ                                 0     0      0      22
                  _i2c_driver_TXData
 ---------------------------------------------------------------------------------
 (8) _i2c_driver_TXData                                    1     1      0      22
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_RX                                            1     1      0   19494
                                             11 BANK0      1     1      0
                   Absolute function *
             _do_I2C_DO_NACK_RESTART
                _do_I2C_DO_NACK_STOP
               _i2c_driver_getRXData
                 _i2c_driver_sendACK
                   _i2c_restartWrite *
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
                        _returnReset *
                         _returnStop *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (8) _i2c_driver_getRXData                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _do_I2C_DO_NACK_STOP                                  0     0      0       0
                _i2c_driver_sendNACK
 ---------------------------------------------------------------------------------
 (8) _do_I2C_DO_NACK_RESTART                               0     0      0       0
                _i2c_driver_sendNACK
 ---------------------------------------------------------------------------------
 (9) _i2c_driver_sendNACK                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_RESET                                         0     0      0       0
                _i2c_driver_resetBus
 ---------------------------------------------------------------------------------
 (8) _i2c_driver_resetBus                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_RCEN                                          0     0      0       0
                 _i2c_driver_startRX
 ---------------------------------------------------------------------------------
 (8) _i2c_driver_startRX                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_IDLE                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_DO_ADDRESS_NACK                               1     1      0   19494
                                             11 BANK0      1     1      0
                   Absolute function *
                _do_I2C_SEND_RESTART
                   _do_I2C_SEND_STOP
                   _i2c_restartWrite *
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
                        _returnReset *
                         _returnStop *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (8) _wr2RegCompleteHandler                                1     0      1    3852
                                             10 BANK0      1     0      1
                      _i2c_setBuffer
        _i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (8) _wr1RegCompleteHandler                                1     0      1    3852
                                             10 BANK0      1     0      1
                      _i2c_setBuffer
        _i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (8) _returnStop                                           1     0      1      76
                                             10 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (8) _returnReset                                          1     0      1     136
                                             10 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (8) _rdBlkRegCompleteHandler                              1     0      1    3874
                                             10 BANK0      1     0      1
                      _i2c_setBuffer
        _i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (8) _rd2RegCompleteHandler                                1     0      1    3852
                                             10 BANK0      1     0      1
                      _i2c_setBuffer
        _i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (8) _rd1RegCompleteHandler                                1     0      1    3852
                                             10 BANK0      1     0      1
                      _i2c_setBuffer
        _i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (9) _i2c_setDataCompleteCallback                          4     1      3    2478
                                              6 BANK0      4     1      3
                        _setCallBack
 ---------------------------------------------------------------------------------
 (4) _setCallBack                                          5     2      3     914
                                              1 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (3) _i2c_setBuffer                                        4     2      2    1352
                                              1 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (8) _i2c_restartWrite                                     1     0      1       0
                                             10 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (8) _do_I2C_SEND_STOP                                     0     0      0       0
                    _i2c_driver_stop
 ---------------------------------------------------------------------------------
 (9) _i2c_driver_stop                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _do_I2C_SEND_RESTART                                  0     0      0       0
                 _i2c_driver_restart
 ---------------------------------------------------------------------------------
 (9) _i2c_driver_restart                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              1     0      1       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_DO_ACK                                        0     0      0       0
                 _i2c_driver_sendACK
 ---------------------------------------------------------------------------------
 (8) _i2c_driver_sendACK                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2c_driver_start                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2c_close                                            2     2      0      24
                                              1 BANK0      2     2      0
                      _mssp_clearIRQ
                    _mssp_disableIRQ
 ---------------------------------------------------------------------------------
 (4) _mssp_disableIRQ                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _mssp_clearIRQ                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _drawWalls                                            2     2      0     157
                                              5 BANK0      2     2      0
                            _reverse
 ---------------------------------------------------------------------------------
 (2) _reverse                                              4     4      0     157
                                              1 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _drawPixel                                            9     7      2     548
                                              1 BANK0      9     7      2
 ---------------------------------------------------------------------------------
 (1) _clearPixels                                          1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _INTERRUPT_InterruptManager                          1     1      0   14790
                                              0 BANK0      1     1      0
                   Absolute function *
                _i2c_busCollisionISR *
                          i1_i2c_ISR *
 ---------------------------------------------------------------------------------
 (12) i1_i2c_ISR                                           1     1      0   14790
                                             13 COMMON     1     1      0
                    i1_do_I2C_DO_ACK *
           i1_do_I2C_DO_ADDRESS_NACK *
           i1_do_I2C_DO_NACK_RESTART *
              i1_do_I2C_DO_NACK_STOP *
                      i1_do_I2C_IDLE *
                      i1_do_I2C_RCEN *
                     i1_do_I2C_RESET *
                        i1_do_I2C_RX *
             i1_do_I2C_SEND_ADR_READ *
            i1_do_I2C_SEND_ADR_WRITE *
              i1_do_I2C_SEND_RESTART *
         i1_do_I2C_SEND_RESTART_READ *
        i1_do_I2C_SEND_RESTART_WRITE *
                 i1_do_I2C_SEND_STOP *
                        i1_do_I2C_TX *
                  i1_do_I2C_TX_EMPTY *
                i1_i2c_driver_isNACK
                    i1_mssp_clearIRQ
 ---------------------------------------------------------------------------------
 (13) i1_mssp_clearIRQ                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_TX_EMPTY                                   1     1      0    3656
                                             10 COMMON     1     1      0
                   Absolute function *
              i1_do_I2C_SEND_RESTART
                 i1_do_I2C_SEND_STOP
                 i1_i2c_restartWrite *
                      i1_mssp_setIRQ
            i1_rd1RegCompleteHandler *
            i1_rd2RegCompleteHandler *
          i1_rdBlkRegCompleteHandler *
                      i1_returnReset *
                       i1_returnStop *
            i1_wr1RegCompleteHandler *
            i1_wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (14) i1_mssp_setIRQ                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_TX                                         3     3      0    3778
                                             10 COMMON     3     3      0
                   Absolute function *
         i1_do_I2C_SEND_RESTART_READ
        i1_do_I2C_SEND_RESTART_WRITE
                 i1_do_I2C_SEND_STOP
                i1_i2c_driver_TXData
                i1_i2c_driver_isNACK
                 i1_i2c_restartWrite *
            i1_rd1RegCompleteHandler *
            i1_rd2RegCompleteHandler *
          i1_rdBlkRegCompleteHandler *
                      i1_returnReset *
                       i1_returnStop *
            i1_wr1RegCompleteHandler *
            i1_wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (13) i1_i2c_driver_isNACK                                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (14) i1_do_I2C_SEND_RESTART_WRITE                         0     0      0       0
               i1_i2c_driver_restart
 ---------------------------------------------------------------------------------
 (14) i1_do_I2C_SEND_RESTART_READ                          0     0      0       0
               i1_i2c_driver_restart
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_SEND_ADR_WRITE                             0     0      0      22
                i1_i2c_driver_TXData
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_SEND_ADR_READ                              0     0      0      22
                i1_i2c_driver_TXData
 ---------------------------------------------------------------------------------
 (14) i1_i2c_driver_TXData                                 1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_RX                                         1     1      0    3656
                                             10 COMMON     1     1      0
                   Absolute function *
           i1_do_I2C_DO_NACK_RESTART
              i1_do_I2C_DO_NACK_STOP
             i1_i2c_driver_getRXData
               i1_i2c_driver_sendACK
                 i1_i2c_restartWrite *
            i1_rd1RegCompleteHandler *
            i1_rd2RegCompleteHandler *
          i1_rdBlkRegCompleteHandler *
                      i1_returnReset *
                       i1_returnStop *
            i1_wr1RegCompleteHandler *
            i1_wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (14) i1_i2c_driver_getRXData                              0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i1_do_I2C_DO_NACK_STOP                               0     0      0       0
              i1_i2c_driver_sendNACK
 ---------------------------------------------------------------------------------
 (14) i1_do_I2C_DO_NACK_RESTART                            0     0      0       0
              i1_i2c_driver_sendNACK
 ---------------------------------------------------------------------------------
 (15) i1_i2c_driver_sendNACK                               0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_RESET                                      0     0      0       0
              i1_i2c_driver_resetBus
 ---------------------------------------------------------------------------------
 (14) i1_i2c_driver_resetBus                               0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_RCEN                                       0     0      0       0
               i1_i2c_driver_startRX
 ---------------------------------------------------------------------------------
 (14) i1_i2c_driver_startRX                                0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_IDLE                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_DO_ADDRESS_NACK                            1     1      0    3656
                                             10 COMMON     1     1      0
                   Absolute function *
              i1_do_I2C_SEND_RESTART
                 i1_do_I2C_SEND_STOP
                 i1_i2c_restartWrite *
            i1_rd1RegCompleteHandler *
            i1_rd2RegCompleteHandler *
          i1_rdBlkRegCompleteHandler *
                      i1_returnReset *
                       i1_returnStop *
            i1_wr1RegCompleteHandler *
            i1_wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (14) i1_wr2RegCompleteHandler                             1     0      1     706
                                              9 COMMON     1     0      1
                    i1_i2c_setBuffer
      i1_i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (14) i1_wr1RegCompleteHandler                             1     0      1     706
                                              9 COMMON     1     0      1
                    i1_i2c_setBuffer
      i1_i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (14) i1_returnStop                                        1     0      1      76
                                              9 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (14) i1_returnReset                                       1     0      1      28
                                              9 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (14) i1_rdBlkRegCompleteHandler                           1     0      1     728
                                              9 COMMON     1     0      1
                    i1_i2c_setBuffer
      i1_i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (14) i1_rd2RegCompleteHandler                             1     0      1     706
                                              9 COMMON     1     0      1
                    i1_i2c_setBuffer
      i1_i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (14) i1_rd1RegCompleteHandler                             1     0      1     706
                                              9 COMMON     1     0      1
                    i1_i2c_setBuffer
      i1_i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (15) i1_i2c_setDataCompleteCallback                       4     1      3     510
                                              5 COMMON     4     1      3
                      i1_setCallBack
 ---------------------------------------------------------------------------------
 (16) i1_setCallBack                                       5     2      3     206
                                              0 COMMON     5     2      3
 ---------------------------------------------------------------------------------
 (15) i1_i2c_setBuffer                                     4     2      2     174
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (14) i1_i2c_restartWrite                                  1     0      1       0
                                              9 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (14) i1_do_I2C_SEND_STOP                                  0     0      0       0
                  i1_i2c_driver_stop
 ---------------------------------------------------------------------------------
 (15) i1_i2c_driver_stop                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i1_do_I2C_SEND_RESTART                               0     0      0       0
               i1_i2c_driver_restart
 ---------------------------------------------------------------------------------
 (15) i1_i2c_driver_restart                                0     0      0       0
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              1     0      1       0
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_DO_ACK                                     0     0      0       0
               i1_i2c_driver_sendACK
 ---------------------------------------------------------------------------------
 (14) i1_i2c_driver_sendACK                                0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _i2c_busCollisionISR                                 0     0      0       0
       _i2c_driver_clearBusCollision
 ---------------------------------------------------------------------------------
 (13) _i2c_driver_clearBusCollision                        0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 16
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SYSTEM_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
   _clearPixels
   _drawPixel
   _drawWalls
     _reverse
   _initializeDisplay
     _i2c_writeNBytes
       _i2c_close
         _mssp_clearIRQ
         _mssp_disableIRQ
       _i2c_masterWrite
         _i2c_masterOperation
           _i2c_driver_start
           _i2c_poller
             _i2c_ISR
               _do_I2C_DO_ACK *
                 _i2c_driver_sendACK
               _do_I2C_DO_ADDRESS_NACK *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_DO_NACK_RESTART *
                 _i2c_driver_sendNACK
               _do_I2C_DO_NACK_STOP *
                 _i2c_driver_sendNACK
               _do_I2C_IDLE *
               _do_I2C_RCEN *
                 _i2c_driver_startRX
               _do_I2C_RESET *
                 _i2c_driver_resetBus
               _do_I2C_RX *
                 Absolute function(Fake) *
                 _do_I2C_DO_NACK_RESTART *
                   _i2c_driver_sendNACK
                 _do_I2C_DO_NACK_STOP *
                   _i2c_driver_sendNACK
                 _i2c_driver_getRXData *
                 _i2c_driver_sendACK *
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_SEND_ADR_READ *
                 _i2c_driver_TXData
               _do_I2C_SEND_ADR_WRITE *
                 _i2c_driver_TXData
               _do_I2C_SEND_RESTART *
                 _i2c_driver_restart
               _do_I2C_SEND_RESTART_READ *
                 _i2c_driver_restart
               _do_I2C_SEND_RESTART_WRITE *
                 _i2c_driver_restart
               _do_I2C_SEND_STOP *
                 _i2c_driver_stop
               _do_I2C_TX *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART_READ *
                   _i2c_driver_restart
                 _do_I2C_SEND_RESTART_WRITE *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_driver_TXData *
                 _i2c_driver_isNACK *
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_TX_EMPTY *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_restartWrite *
                 _mssp_setIRQ *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _i2c_driver_isNACK *
               _mssp_clearIRQ *
             _mssp_waitForEvent
           _mssp_IRQisEnabled
       _i2c_open
         _i2c_driver_open
         _i2c_driver_setBusCollisionISR
         _i2c_driver_setI2cISR
         _mssp_clearIRQ
       _i2c_setAddressNACKCallback
         _setCallBack
       _i2c_setBuffer
   _shiftWalls
     _random
   _writeDisplay
     ___awdiv
     _i2c_writeNBytes
       _i2c_close
         _mssp_clearIRQ
         _mssp_disableIRQ
       _i2c_masterWrite
         _i2c_masterOperation
           _i2c_driver_start
           _i2c_poller
             _i2c_ISR
               _do_I2C_DO_ACK *
                 _i2c_driver_sendACK
               _do_I2C_DO_ADDRESS_NACK *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_DO_NACK_RESTART *
                 _i2c_driver_sendNACK
               _do_I2C_DO_NACK_STOP *
                 _i2c_driver_sendNACK
               _do_I2C_IDLE *
               _do_I2C_RCEN *
                 _i2c_driver_startRX
               _do_I2C_RESET *
                 _i2c_driver_resetBus
               _do_I2C_RX *
                 Absolute function(Fake) *
                 _do_I2C_DO_NACK_RESTART *
                   _i2c_driver_sendNACK
                 _do_I2C_DO_NACK_STOP *
                   _i2c_driver_sendNACK
                 _i2c_driver_getRXData *
                 _i2c_driver_sendACK *
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_SEND_ADR_READ *
                 _i2c_driver_TXData
               _do_I2C_SEND_ADR_WRITE *
                 _i2c_driver_TXData
               _do_I2C_SEND_RESTART *
                 _i2c_driver_restart
               _do_I2C_SEND_RESTART_READ *
                 _i2c_driver_restart
               _do_I2C_SEND_RESTART_WRITE *
                 _i2c_driver_restart
               _do_I2C_SEND_STOP *
                 _i2c_driver_stop
               _do_I2C_TX *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART_READ *
                   _i2c_driver_restart
                 _do_I2C_SEND_RESTART_WRITE *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_driver_TXData *
                 _i2c_driver_isNACK *
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_TX_EMPTY *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_restartWrite *
                 _mssp_setIRQ *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _i2c_driver_isNACK *
               _mssp_clearIRQ *
             _mssp_waitForEvent
           _mssp_IRQisEnabled
       _i2c_open
         _i2c_driver_open
         _i2c_driver_setBusCollisionISR
         _i2c_driver_setI2cISR
         _mssp_clearIRQ
       _i2c_setAddressNACKCallback
         _setCallBack
       _i2c_setBuffer

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _i2c_busCollisionISR *
     _i2c_driver_clearBusCollision
   i1_i2c_ISR *
     i1_do_I2C_DO_ACK *
       i1_i2c_driver_sendACK
     i1_do_I2C_DO_ADDRESS_NACK *
       Absolute function(Fake) *
       i1_do_I2C_SEND_RESTART *
         i1_i2c_driver_restart
       i1_do_I2C_SEND_STOP *
         i1_i2c_driver_stop
       i1_i2c_restartWrite *
       i1_rd1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rd2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rdBlkRegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_returnReset *
       i1_returnStop *
       i1_wr1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_wr2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
     i1_do_I2C_DO_NACK_RESTART *
       i1_i2c_driver_sendNACK
     i1_do_I2C_DO_NACK_STOP *
       i1_i2c_driver_sendNACK
     i1_do_I2C_IDLE *
     i1_do_I2C_RCEN *
       i1_i2c_driver_startRX
     i1_do_I2C_RESET *
       i1_i2c_driver_resetBus
     i1_do_I2C_RX *
       Absolute function(Fake) *
       i1_do_I2C_DO_NACK_RESTART *
         i1_i2c_driver_sendNACK
       i1_do_I2C_DO_NACK_STOP *
         i1_i2c_driver_sendNACK
       i1_i2c_driver_getRXData *
       i1_i2c_driver_sendACK *
       i1_i2c_restartWrite *
       i1_rd1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rd2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rdBlkRegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_returnReset *
       i1_returnStop *
       i1_wr1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_wr2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
     i1_do_I2C_SEND_ADR_READ *
       i1_i2c_driver_TXData
     i1_do_I2C_SEND_ADR_WRITE *
       i1_i2c_driver_TXData
     i1_do_I2C_SEND_RESTART *
       i1_i2c_driver_restart
     i1_do_I2C_SEND_RESTART_READ *
       i1_i2c_driver_restart
     i1_do_I2C_SEND_RESTART_WRITE *
       i1_i2c_driver_restart
     i1_do_I2C_SEND_STOP *
       i1_i2c_driver_stop
     i1_do_I2C_TX *
       Absolute function(Fake) *
       i1_do_I2C_SEND_RESTART_READ *
         i1_i2c_driver_restart
       i1_do_I2C_SEND_RESTART_WRITE *
         i1_i2c_driver_restart
       i1_do_I2C_SEND_STOP *
         i1_i2c_driver_stop
       i1_i2c_driver_TXData *
       i1_i2c_driver_isNACK *
       i1_i2c_restartWrite *
       i1_rd1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rd2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rdBlkRegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_returnReset *
       i1_returnStop *
       i1_wr1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_wr2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
     i1_do_I2C_TX_EMPTY *
       Absolute function(Fake) *
       i1_do_I2C_SEND_RESTART *
         i1_i2c_driver_restart
       i1_do_I2C_SEND_STOP *
         i1_i2c_driver_stop
       i1_i2c_restartWrite *
       i1_mssp_setIRQ *
       i1_rd1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rd2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rdBlkRegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_returnReset *
       i1_returnStop *
       i1_wr1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_wr2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
     i1_i2c_driver_isNACK *
     i1_mssp_clearIRQ *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     1D      48       5       90.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      4D       7       96.3%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      A3      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      A3      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Apr 11 11:31:17 2018

            __end_of_i2c_driver_restart 0F2C                     i1_i2c_driver_isNACK 078B  
                          returnReset@p 0054              __end_of_i2c_driver_startRX 0F32  
                                     _i 0045           _do_I2C_SEND_RESTART$intlevel0 0FDC  
                           __CFG_CP$OFF 0000                                      l68 07F3  
                       i1_mssp_clearIRQ 0F1D                            ___awdiv@sign 0051  
                  __size_of_do_I2C_IDLE 0009                     _do_I2C_SEND_RESTART 0FD8  
                  __size_of_do_I2C_RCEN 000A                    __end_ofi1_returnStop 0F04  
                  ?i1_i2c_driver_TXData 0070                             i1_do_I2C_RX 03FD  
                           i1_do_I2C_TX 0329                             __CFG_LVP$ON 0000  
                  i1_i2c_driver_sendACK 0F38                                     l231 07B1  
                                   l524 06E8                                     l517 03B9  
                                   l614 03D9                                     l598 02BE  
              i1_do_I2C_DO_NACK_RESTART 0F58            __size_of_i2c_masterOperation 001F  
                  _returnStop$intlevel0 0F8C                    i1_i2c_driver_restart 0F0E  
         i2c_setDataCompleteCallback@cb 0050                ?i1_rd2RegCompleteHandler 0079  
                 __size_of_do_I2C_RESET 000B                            __CFG_BORV$LO 0000  
                                   wreg 0009                            __CFG_IESO$ON 0000  
                  i1_i2c_driver_startRX 0F14                   __end_ofi1_returnReset 0F06  
                  ?i1_i2c_driver_isNACK 0070                ?i1_wr2RegCompleteHandler 0079  
       ??i1_i2c_setDataCompleteCallback 0078                  i1_i2c_driver_getRXData 0F17  
                 __end_ofi1_mssp_setIRQ 0F1D                            __CFG_ZCD$OFF 0000  
               ??_rd2RegCompleteHandler 0055                   i1_i2c_driver_sendNACK 0F3C  
                                  l2213 0553                                    l2301 0FE4  
                                  l2313 0FFC                                    l2323 0F92  
                                  l2307 0FF4                                    l2245 06AC  
                                  l2253 0696                                    l2261 0680  
                                  l2333 07C8                                    l2327 0F86  
                                  l2319 0F8C                                    l2343 07FB  
                                  l2351 0783                                    l3063 0108  
                                  l3081 0147                                    l2283 0FCC  
                                  l2269 06C2                                    l2277 064C  
                                  l3093 017F                                    l3069 011C  
                                  l2295 0FDC                                    l2359 07BD  
                                  l2367 07E7                                    l2375 0FEC  
                                  l3087 014B                                    l3079 0139  
                                  l5111 0316                                    l5103 030C  
                                  l2289 0FD4                                    l5033 018B  
                                  l3089 0177                                    l5025 0231  
                                  l5051 01AC                                    l2811 028A  
                                  l2803 0279                                    l5019 01EC  
                                  l5107 0310                           i1returnStop@p 0079  
                                  l5045 019F                                    l5117 0324  
                                  l5109 0312                                    l5063 01BE  
                                  l5039 019A                                    l2807 0282  
                                  l5057 01B1                                    l4801 03DE  
                                  l2785 0253                                    l5089 02EA  
                                  l4811 0479                                    l2795 025B  
                                  l2779 0248                                    l4821 0480  
                                  l4741 04D3                                    l2797 0267  
                                  l2983 00AB                                    l4815 047C  
                                  l4751 04D9                                    l4807 03E1  
                                  l4809 0476                                    l4745 04D6  
                                  l4737 04CC                                    l4761 029C  
                                  l4753 0293                                    l2987 00D5  
                                  l2979 007C                                    l4827 0483  
                                  l4771 02A2                                    l4765 029F  
                                  l4757 0299                                    l4837 0599  
                                  l4829 0589                                    l4845 07A3  
                                  l4917 0535                                    l4909 0518  
                                  l4783 03BF                                    l4863 0607  
                                  l4857 05F9                                    l4779 02D7  
                                  l4859 05FD                                    l4797 03DB  
                                  u1205 0467                                    u1404 008A  
                                  u1405 0088                                    u1165 0441  
                                  u1245 025E                                    _LATA 010C  
                                  u1414 009D                                    _LATB 010D  
                                  u1415 009B                                    u1175 0447  
                                  _LATC 010E                                    u1185 0454  
                                  u1265 0268                                    u1434 00B7  
                                  u1435 00B5                                    u1195 045A  
                                  u1275 0272                                    u1444 00C3  
                                  u1445 00C1                                    u1285 027A  
                                  u1374 0059                                    u1375 0057  
                                  u1464 00E2                                    u1384 006E  
                                  u1465 00E0                                    u1385 006C  
                                  u1625 016C                                    u1474 00EE  
                                  u1475 00EC                                    u3807 07B5  
                  ?_do_I2C_SEND_RESTART 0070                                    _PLLR 04D6  
                                  _WPUA 020C                                    _WPUB 020D  
                                  _WPUC 020E                 ??_wr2RegCompleteHandler 0055  
                          __CFG_WRT$OFF 0000                           __CFG_FCMEN$ON 0000  
                 i1_i2c_driver_resetBus 0F00       __size_of_do_I2C_SEND_RESTART_READ 0008  
                                  _fall 0067               ?_do_I2C_SEND_RESTART_READ 0070  
                       ??_mssp_clearIRQ 004B                                    _main 02DD  
             __size_of_do_I2C_SEND_STOP 0008                  __size_of_do_I2C_DO_ACK 0008  
                                  fsr0h 0005                                    fsr1h 0007  
                                  indf0 0000                                    fsr0l 0004  
                                  indf1 0001                                    fsr1l 0006  
                                  btemp 007E                       ??i1_do_I2C_DO_ACK 0070  
                         __CFG_BOREN$ON 0000                   ?_do_I2C_SEND_ADR_READ 0070  
              __size_of_i2c_writeNBytes 0026                                    start 0027  
                         _i2c_setBuffer 073C                           __CFG_MCLRE$ON 0000  
                       __end_of_i2c_ISR 05A8        __size_of_rdBlkRegCompleteHandler 001D  
              ??_do_I2C_DO_NACK_RESTART 004B                           i1_do_I2C_IDLE 0F71  
                         i1_do_I2C_RCEN 0F76                            _do_I2C_RESET 07C4  
                        i1returnReset@p 0079                           __CFG_PLLEN$ON 0000  
        __size_of_OSCILLATOR_Initialize 000A             i2c_setAddressNACKCallback@p 0052  
                 ??i1_i2c_driver_TXData 0070           __end_of_OSCILLATOR_Initialize 07F7  
                 ?i1_i2c_driver_sendACK 0070                                   ?_main 0070  
                       __end_of___awdiv 028F                           __CFG_WDTE$OFF 0000  
              __size_of_mssp_disableIRQ 0003                         ___awdiv@divisor 004B  
                                 i1l441 0022                                   i1l436 0017  
                                 i1l614 0417                                   i1l598 0354  
                       ___awdiv@counter 0050                   ?i1_i2c_driver_restart 0070  
                                 _TRISA 008C                                   _TRISB 008D  
                                 _TRISC 008E                   ?i1_i2c_driver_startRX 0070  
                 ??i1_i2c_driver_isNACK 0070                             i2c_open@ret 004F  
                           _writebuffer 00BC                      __size_ofi1_i2c_ISR 001F  
                  _i2c_driver_getRXData 0F32            ?i1_do_I2C_SEND_RESTART_WRITE 0070  
            ?_do_I2C_SEND_RESTART_WRITE 0070                                   _score 00BA  
                                 _walls 00B0                                   _start 0047  
                 ??_do_I2C_SEND_RESTART 004B                                   pclath 000A  
                       __end_of_reverse 0472              _i2c_driver_busCollisionISR 0041  
                ?_do_I2C_SEND_ADR_WRITE 0070                                   status 0003  
                                 wtemp0 007E                   __size_of_writeDisplay 005A  
                    i2c_driver_TXData@d 004B               __size_of_i2c_driver_start 0003  
                        ?_i2c_setBuffer 004B                            ?_setCallBack 004B  
               __end_ofi1_mssp_clearIRQ 0F20                           _fsmStateTable 00CD  
                       __initialization 0029                    __size_of_clearPixels 0012  
        __size_ofi1_do_I2C_SEND_RESTART 0004                              _i2c_poller 07A3  
         __end_ofi1_do_I2C_SEND_RESTART 0F4C                              _i2c_status 0020  
                        ?i1_do_I2C_IDLE 0070                            __end_of_main 0329  
                        ?i1_do_I2C_RCEN 0070              __end_ofi1_do_I2C_SEND_STOP 0F50  
                      __end_of_i2c_open 03BB                    _i2c_driver_setI2cISR 0FA0  
                        __CFG_LPBOR$OFF 0000             ?_INTERRUPT_InterruptManager 0070  
       __end_ofi1_rd2RegCompleteHandler 070C                           setCallBack@cb 004B  
                        i1_do_I2C_RESET 0FB2                           _do_I2C_DO_ACK 0FE8  
                                ??_main 0065                       ?_i2c_restartWrite 0054  
                         _do_I2C_TX$887 0056         __end_ofi1_wr2RegCompleteHandler 073C  
                          i2c_close@ret 004C                         _i2c_driver_open 07CF  
                    ??_i2c_restartWrite 0055                         _i2c_driver_stop 0F2C  
               ?_do_I2C_DO_ADDRESS_NACK 0070                  ?i1_i2c_driver_sendNACK 0070  
                          _writeDisplay 01E3                   ?_i2c_driver_getRXData 0070  
                      ___awdiv@dividend 004D         i1i2c_setDataCompleteCallback@cb 0075  
                                _ANSELA 018C                                  _ANSELB 018D  
                                _ANSELC 018E                                  _BORCON 0116  
               ?i1_do_I2C_SEND_ADR_READ 0070                  ?i1_i2c_driver_resetBus 0070  
                                _RB4PPS 0E9C                                  _RB6PPS 0E9E  
                                _ODCONA 028C                                  _ODCONB 028D  
                                _ODCONC 028E                                  i1l2507 0577  
                                i1l5003 04A9                                  i1l2631 071C  
                                i1l2705 0F02                                  i1l2713 0F06  
                                i1l5009 04AC                                  i1l2709 0F04  
                                i1l2655 072C                                  i1l2639 070C  
                                i1l2647 06FC                                  i1l2663 0665  
                                i1l2817 0FB2                                  i1l2681 0F48  
                                i1l2827 0F71                                  i1l2675 0F44  
                                i1l2835 0FC0                                  i1l2843 0FB9  
                                i1l2851 0F76                                  i1l2669 0F40  
                                i1l2693 0F54                                  i1l5077 0639  
                                i1l5069 0629                                  i1l2687 0F4C  
                                i1l2859 0F50                                  i1l2699 0F58  
                                i1l4923 05AF                                  i1l4933 05B5  
                                i1l4927 05B2                                  i1l4919 05A8  
                                i1l4943 0332                                  i1l4935 0329  
                                i1l4961 036D                                  i1l4953 0338  
                                i1l4947 0335                                  i1l4939 032F  
                                i1l4965 03FD                                  i1l4991 049F  
                                i1l4983 041C                                  i1l4993 04A2  
                                i1l4979 0419                                  i1l4997 04A5  
                                i1l4989 041F           ??i1_do_I2C_SEND_RESTART_WRITE 0070  
                    __size_of_i2c_close 0016                                  _OSCCON 0099  
               i1_rd1RegCompleteHandler 070C                  ??_do_I2C_SEND_ADR_READ 004C  
              rdBlkRegCompleteHandler@p 0054                               ??_i2c_ISR 0058  
               i1_wr1RegCompleteHandler 071C             ??i1_rdBlkRegCompleteHandler 007A  
                        __CFG_PWRTE$OFF 0000                     _do_I2C_RX$intlevel0 03BF  
                 __size_ofi1_returnStop 0002             __end_of_do_I2C_DO_NACK_STOP 0FF8  
                     __end_ofi1_i2c_ISR 0648     __end_of_i2c_setDataCompleteCallback 077F  
           _i2c_setDataCompleteCallback 0772                         _i2c_masterWrite 0F64  
                             ??___awdiv 004F                          __CFG_STVREN$ON 0000  
       __size_of_do_I2C_DO_NACK_RESTART 0008                   ?_i2c_driver_setI2cISR 004B  
                     ??_i2c_writeNBytes 005F                  __end_ofi1_do_I2C_RESET 0FB9  
                       i1_i2c_setBuffer 074A                  ??i1_i2c_driver_sendACK 0070  
                                _random 0F68                        ___awdiv@quotient 0052  
                        ?_do_I2C_DO_ACK 0070             __size_ofi1_i2c_restartWrite 0002  
                ??i1_i2c_driver_restart 0070                  ??i1_i2c_driver_startRX 0070  
        __end_of_do_I2C_DO_ADDRESS_NACK 04EF             ?_i2c_setAddressNACKCallback 0050  
                          ?_returnReset 0054                               ??_reverse 004B  
         _do_I2C_DO_NACK_STOP$intlevel0 0FF4              i1rdBlkRegCompleteHandler@p 0079  
     __size_ofi1_do_I2C_DO_ADDRESS_NACK 0023                            ?_mssp_setIRQ 0070  
        __end_ofi1_do_I2C_SEND_ADR_READ 0FC8                       ??_mssp_disableIRQ 004B  
             ?i1_do_I2C_DO_ADDRESS_NACK 0070                       i1_do_I2C_TX_EMPTY 049F  
                     _SYSTEM_Initialize 0F7C                 __end_of__initialization 0048  
                       ??_i2c_setBuffer 004D          _do_I2C_SEND_ADR_READ$intlevel0 0783  
                      _do_I2C_SEND_STOP 0FE0                            i1_returnStop 0F02  
                 i1_do_I2C_DO_NACK_STOP 0F54                      __size_of_do_I2C_RX 0042  
                    __size_of_do_I2C_TX 004E                      ?i1_do_I2C_TX_EMPTY 0070  
                    ?_SYSTEM_Initialize 0070       _rdBlkRegCompleteHandler$intlevel0 064C  
                   _i2c_masterOperation 05EB                __size_of_do_I2C_TX_EMPTY 002D  
                      ?i1_mssp_clearIRQ 0070                         ??i1_do_I2C_IDLE 0070  
                       ??i1_do_I2C_RCEN 0070                 _rdBlkRegCompleteHandler 0648  
                           ?_i2c_poller 0070                          __pcstackCOMMON 0070  
            ??i1_do_I2C_DO_NACK_RESTART 0070                     _do_I2C_TX$intlevel0 0293  
                   ??i1_do_I2C_TX_EMPTY 007A                            __pidataBANK0 0003  
                          __pidataBANK1 05CB                     ??_SYSTEM_Initialize 004B  
                       ?i1_do_I2C_RESET 0070                 __end_of_i2c_driver_open 07D9  
               __end_of_i2c_driver_stop 0F2F                       __end_of_i2c_close 06EA  
                          ?i1_do_I2C_RX 0070                            ?i1_do_I2C_TX 0070  
                        drawPixel@color 004C                     i1i2c_restartWrite@p 0079  
                    _i2c_driver_sendACK 0F5C               i1_rdBlkRegCompleteHandler 0665  
                  ?_i2c_masterOperation 0070          i1i2c_setDataCompleteCallback@p 0077  
               ?i1_i2c_driver_getRXData 0070                          _OPTION_REGbits 0095  
          ??i1_do_I2C_SEND_RESTART_READ 0070                      _i2c_driver_restart 0F29  
                           random@lower 0070                  __size_ofi1_setCallBack 0024  
                    _i2c_driver_startRX 0F2F                             random@upper 004B  
                ??_i2c_driver_getRXData 004B                         i1setCallBack@cb 0070  
              i1rd1RegCompleteHandler@p 0079                         i1_do_I2C_DO_ACK 0F50  
                       i1_do_I2C_TX$887 007B                      __size_of_drawPixel 00B6  
                    __size_of_drawWalls 001F                     ?_i2c_driver_sendACK 0070  
                        setCallBack@idx 004F               __end_ofi1_do_I2C_TX_EMPTY 04C8  
                _do_I2C_DO_NACK_RESTART 0FF8               __end_of_SYSTEM_Initialize 0F82  
             ??i1_rd1RegCompleteHandler 007A                     ?_i2c_driver_restart 0070  
                            __pbssBANK0 0020                              __pbssBANK1 00A0  
             ??i1_wr1RegCompleteHandler 007A                     ?_i2c_driver_startRX 0070  
        __size_of_rd2RegCompleteHandler 0016                               ?_i2c_open 0070  
         __end_of_rd2RegCompleteHandler 0692          __size_of_wr2RegCompleteHandler 0016  
      __size_ofi1_rd2RegCompleteHandler 0010           __end_of_wr2RegCompleteHandler 06D4  
               __end_of_i2c_masterWrite 0F68                i1wr1RegCompleteHandler@p 0079  
                      _i2c_driver_start 0F26                   _rd1RegCompleteHandler 0692  
               __end_ofi1_i2c_setBuffer 0758        __size_ofi1_wr2RegCompleteHandler 0010  
                 _do_I2C_IDLE$intlevel0 07FB                   _wr1RegCompleteHandler 06A8  
          __size_of_i2c_busCollisionISR 0003         _wr1RegCompleteHandler$intlevel0 06AC  
       _rd1RegCompleteHandler$intlevel0 0696                              __pmaintext 02DD  
                         ??_do_I2C_IDLE 004B                    __size_of_setCallBack 0025  
                         ??_do_I2C_RCEN 004B                    ??_i2c_driver_sendACK 004B  
                ??_i2c_driver_setI2cISR 004D                         __CFG_PPS1WAY$ON 0000  
                       ??_do_I2C_DO_ACK 004B                              __pintentry 0004  
                  ??_i2c_driver_restart 004B            __size_of_i2c_driver_sendNACK 0004  
                  ??_i2c_driver_startRX 004B                                 ?_random 004B  
                   i2c_setBuffer@buffer 004E                       _initializeDisplay 0185  
          __size_of_i2c_driver_resetBus 0001          __end_ofi1_i2c_driver_getRXData 0F1A  
        ?_i2c_driver_setBusCollisionISR 004B                   ??_i2c_masterOperation 0059  
                     __end_of_do_I2C_RX 03FD                       __end_of_do_I2C_TX 02DD  
                            _createWall 0049                      ?_initializeDisplay 0070  
              ?i1_do_I2C_SEND_ADR_WRITE 0070                         __CFG_WDTCCS$SWC 0000  
                               _OSCTUNE 0098                                 _SSP1ADD 0212  
                               _SSP1BUF 0211                                 _SSP1MSK 0213  
                   __size_of_i2c_poller 000B                 ??_do_I2C_SEND_ADR_WRITE 004C  
   _do_I2C_SEND_RESTART_WRITE$intlevel0 0FD4                     ??_initializeDisplay 0060  
           ??_do_I2C_SEND_RESTART_WRITE 004B                  ?i1_do_I2C_DO_NACK_STOP 0070  
                     _mssp_IRQisEnabled 07D9                              ??_i2c_open 004D  
                               _i2c_ISR 0585               ??_rdBlkRegCompleteHandler 0055  
                     _mssp_waitForEvent 07AE                      ?_mssp_IRQisEnabled 0070  
                 __end_of_mssp_clearIRQ 0F23                   _returnReset$intlevel0 0F92  
                 _do_I2C_RCEN$intlevel0 07E7                           i1_setCallBack 0561  
                    ?_mssp_waitForEvent 0070        _do_I2C_DO_ADDRESS_NACK$intlevel0 04CC  
           __end_ofi1_i2c_driver_TXData 0F71                       __end_of_drawPixel 0102  
                     __end_of_drawWalls 0629     __size_of_i2c_setAddressNACKCallback 000D  
                __size_ofi1_returnReset 0002                     ??_mssp_IRQisEnabled 004B  
                               ___awdiv 023D               __end_of_initializeDisplay 01E3  
                __size_ofi1_mssp_setIRQ 0003                       ??_do_I2C_TX_EMPTY 0055  
                      ?_i2c_driver_open 0070                     ??_mssp_waitForEvent 004B  
                      ?_i2c_driver_stop 0070                  i2c_writeNBytes@address 005F  
                       __size_of_random 0004             __end_ofi1_i2c_driver_isNACK 0797  
               __end_ofi1_do_I2C_DO_ACK 0F54                                 __ptext1 01E3  
                               __ptext2 023D                                 __ptext3 0102  
                               __ptext4 0F68                                 __ptext5 0185  
                               __ptext6 0516                                 __ptext7 0758  
                               __ptext8 0373                                 __ptext9 0FA0  
                   __end_of_do_I2C_IDLE 0800                     __end_of_do_I2C_RCEN 07ED  
                               _hiscore 00B8                   _OSCILLATOR_Initialize 07ED  
               ??i1_i2c_driver_sendNACK 0070             __end_of_do_I2C_SEND_RESTART 0FE0  
              ??_PIN_MANAGER_Initialize 004B                  i2c_masterOperation@ret 005B  
               ??i1_i2c_driver_resetBus 0070                                 _reverse 043B  
                               _topHalf 0043                      i1_do_I2C_SEND_STOP 0F4C  
            _do_I2C_SEND_STOP$intlevel0 0FE4              __size_ofi1_do_I2C_TX_EMPTY 0029  
              _do_I2C_SEND_RESTART_READ 0FC8              __size_of_SYSTEM_Initialize 0006  
                               clrloop0 0FA7               __end_of_mssp_IRQisEnabled 07E3  
                  __size_of_returnReset 0006                    end_of_initialization 0048  
                  __size_of_mssp_setIRQ 0003               __end_of_mssp_waitForEvent 07B9  
             __size_of_i2c_restartWrite 0006                                 init_ram 0FAC  
                   ?i1_do_I2C_SEND_STOP 0070                  ?_rd1RegCompleteHandler 0054  
                               initloop 0FAD                         _i2c_writeNBytes 0516  
                         ??_clearPixels 004B                        ?_i2c_masterWrite 0070  
                ?_wr1RegCompleteHandler 0054                          ?i1_setCallBack 0070  
                            _wallHeight 0044                              _shiftWalls 0102  
                      ?i1_i2c_setBuffer 0070               _do_I2C_SEND_RESTART_WRITE 0FD0  
                 i1_do_I2C_SEND_RESTART 0F48        __end_ofi1_do_I2C_DO_ADDRESS_NACK 05CB  
       __end_ofi1_do_I2C_SEND_ADR_WRITE 0FC0                         _mssp_disableIRQ 0F23  
                             i1_i2c_ISR 0629                    ??i1_do_I2C_SEND_STOP 0070  
                            _returnStop 0F88         __end_of_rdBlkRegCompleteHandler 0665  
              __end_of_do_I2C_SEND_STOP 0FE8      __end_ofi1_do_I2C_SEND_RESTART_READ 0F44  
            i1_do_I2C_SEND_RESTART_READ 0F40                               _SSPDATPPS 0E21  
                             _SSPCLKPPS 0E20                        __CFG_FOSC$INTOSC 0000  
                  __size_ofi1_do_I2C_RX 003E                    __size_ofi1_do_I2C_TX 004A  
  __size_of_i2c_setDataCompleteCallback 000D                          _gravityCounter 0046  
                         i1_returnReset 0F04                             returnStop@p 0054  
                         i1_mssp_setIRQ 0F1A      __size_ofi1_rdBlkRegCompleteHandler 0017  
          i2c_setDataCompleteCallback@p 0052                 i1_rd2RegCompleteHandler 06FC  
                            drawPixel@x 0053                              drawPixel@y 004B  
               i1_wr2RegCompleteHandler 072C           __size_of_do_I2C_SEND_ADR_READ 000C  
                      ??i1_do_I2C_RESET 0070                            ??_i2c_poller 0059  
                           _do_I2C_IDLE 07F7                             _do_I2C_RCEN 07E3  
            __end_ofi1_i2c_restartWrite 0F08                     __end_of_clearPixels 06FC  
            __size_of_initializeDisplay 005E    __end_of_i2c_driver_clearBusCollision 0F0B  
 __size_of_i2c_driver_clearBusCollision 0003            _i2c_driver_clearBusCollision 0F08  
                            ?i1_i2c_ISR 0070                        ?i1_do_I2C_DO_ACK 0070  
                ?_OSCILLATOR_Initialize 0070           __size_ofi1_i2c_driver_sendACK 0004  
                        __end_of_random 0F6C            __size_of_do_I2C_DO_NACK_STOP 0008  
              __end_of_i2c_driver_start 0F29           __size_ofi1_i2c_driver_restart 0003  
               ?_do_I2C_DO_NACK_RESTART 0070                     start_initialization 0029  
                             _i2c_close 06D4           __size_ofi1_i2c_driver_startRX 0003  
                   _i2c_busCollisionISR 0F0B         __size_of_PIN_MANAGER_Initialize 0027  
                        ?i1_returnReset 0079                 __end_of_i2c_writeNBytes 053C  
   __end_ofi1_do_I2C_SEND_RESTART_WRITE 0F48             i1_do_I2C_SEND_RESTART_WRITE 0F44  
                        ?i1_mssp_setIRQ 0070              __size_of_mssp_IRQisEnabled 000A  
                          setCallBack@p 004D                      __end_of_i2c_poller 07AE  
                   _i2c_driver_sendNACK 0F60                         i2c_open@address 004E  
               i2c_setBuffer@bufferSize 004B              __size_of_mssp_waitForEvent 000B  
                rd1RegCompleteHandler@p 0054                     _i2c_driver_resetBus 0F01  
                       ??i1_setCallBack 0073                   __end_of_i2c_setBuffer 074A  
                     __size_of_i2c_open 0048   __end_ofi1_i2c_setDataCompleteCallback 07A3  
__size_ofi1_i2c_setDataCompleteCallback 000C           i1_i2c_setDataCompleteCallback 0797  
                           ?_shiftWalls 0070                    ?_i2c_busCollisionISR 0070  
               __end_of_mssp_disableIRQ 0F26                        i1setCallBack@idx 0074  
                 __end_ofi1_do_I2C_IDLE 0F76                   __end_ofi1_do_I2C_RCEN 0F7C  
             i1i2c_setBuffer@bufferSize 0070                  ?i1_do_I2C_SEND_RESTART 0070  
                wr1RegCompleteHandler@p 0054                    ?_i2c_driver_sendNACK 0070  
                         ?_do_I2C_RESET 0070                             __pdataBANK0 0067  
                           __pdataBANK1 00CD               _do_I2C_TX_EMPTY$intlevel0 0476  
                              ??_random 004C                __size_ofi1_mssp_clearIRQ 0003  
                           ?_returnStop 0054                    ?_i2c_driver_resetBus 0070  
                     _i2c_driver_TXData 0F94          __end_of_do_I2C_DO_NACK_RESTART 1000  
         ?_i2c_driver_clearBusCollision 0070                       _i2c_driver_i2cISR 003F  
              i1_do_I2C_DO_ADDRESS_NACK 05A8                      ?_i2c_driver_TXData 0070  
                            ?_i2c_close 0070                               ___latbits 0002  
                         __pcstackBANK0 004A       __size_ofi1_do_I2C_DO_NACK_RESTART 0004  
              i1rd2RegCompleteHandler@p 0079                               _do_I2C_RX 03BB  
             ?i1_do_I2C_DO_NACK_RESTART 0070                               _do_I2C_TX 028F  
                     _i2c_driver_isNACK 0765                 ??i1_do_I2C_DO_NACK_STOP 0070  
             ??i1_rd2RegCompleteHandler 007A           __size_of_i2c_driver_getRXData 0003  
                    ?_i2c_driver_isNACK 0070                     ??_i2c_driver_TXData 004B  
        __size_of_do_I2C_SEND_ADR_WRITE 000B               ??i1_wr2RegCompleteHandler 007A  
         __end_of_do_I2C_SEND_ADR_WRITE 07C4         ??_i2c_driver_setBusCollisionISR 004D  
                        i1setCallBack@p 0072                        _i2c_restartWrite 0F82  
            _i2c_restartWrite$intlevel0 0F86                                ?_i2c_ISR 0070  
       _do_I2C_SEND_ADR_WRITE$intlevel0 07BD        __size_ofi1_do_I2C_SEND_ADR_WRITE 0007  
                       _do_I2C_TX_EMPTY 0472                           ??_setCallBack 004E  
              i1wr2RegCompleteHandler@p 0079                   _rd2RegCompleteHandler 067C  
                           _clearPixels 06EA                     ??_i2c_driver_isNACK 004B  
                 ??_i2c_busCollisionISR 0070                  _PIN_MANAGER_Initialize 04EF  
                 _wr2RegCompleteHandler 06BE             __size_of_i2c_driver_sendACK 0004  
                        ??_do_I2C_RESET 004B                                ?___awdiv 004B  
                             __ptext100 0797                               __ptext101 0561  
                             __ptext102 074A                               __ptext103 0F11  
                             __ptext104 0F0E                               __ptext105 0F38  
                             __ptext106 0F0B                               __ptext107 0F08  
                 ??_i2c_driver_sendNACK 004B             __end_of_i2c_masterOperation 060A  
              ??_do_I2C_DO_ADDRESS_NACK 0055           __size_of_i2c_driver_setI2cISR 0006  
           __size_of_i2c_driver_restart 0003               __end_of_i2c_driver_TXData 0F9A  
                 __end_of_do_I2C_DO_ACK 0FF0                   ??_i2c_driver_resetBus 004B  
           __size_of_i2c_driver_startRX 0003                             ??i1_i2c_ISR 007D  
          ??_INTERRUPT_InterruptManager 004A                               _drawPixel 004C  
                             _drawWalls 060A                               _elevation 0048  
            ??_do_I2C_SEND_RESTART_READ 004B                ??i1_do_I2C_SEND_ADR_READ 0071  
                       ??i1_returnReset 007A               __end_of_i2c_driver_isNACK 0772  
              ?i1_rd1RegCompleteHandler 0079      __size_of_do_I2C_SEND_RESTART_WRITE 0008  
                       ??i1_mssp_setIRQ 0070          __size_ofi1_i2c_driver_sendNACK 0004  
         __end_ofi1_i2c_driver_sendNACK 0F40                     __size_of_shiftWalls 0083  
                              ?_reverse 0070                ?i1_wr1RegCompleteHandler 0079  
                            ?_do_I2C_RX 0070                              ?_do_I2C_TX 0070  
                         ?_writeDisplay 0070                        ?_i2c_writeNBytes 005C  
        __size_ofi1_i2c_driver_resetBus 0001           __end_ofi1_i2c_driver_resetBus 0F01  
               ??_rd1RegCompleteHandler 0055                       _i2c_ISR$intlevel0 0589  
               ??_wr1RegCompleteHandler 0055                   i2c_driver_setI2cISR@f 004B  
                   __size_of_returnStop 0006                               clear_ram0 0FA6  
                              _PIE1bits 0090                                _PIE2bits 0091  
   __size_of_INTERRUPT_InterruptManager 0023                                _PIR1bits 0010  
                              _PIR2bits 0011                        ?_mssp_disableIRQ 0070  
                  __CFG_WDTCPS$WDTCPS1F 0000                                _SSP1CON1 0215  
                              _SSP1CON2 0216            ?_i2c_setDataCompleteCallback 0050  
        ?i1_i2c_setDataCompleteCallback 0075                                _SSP1STAT 0214  
                   __end_of_setCallBack 0561                              ?_drawPixel 004B  
                            ?_drawWalls 0070            __size_ofi1_i2c_driver_TXData 0005  
                     i1_i2c_driver_stop 0F11            i2c_setAddressNACKCallback@cb 0050  
                     ?_do_I2C_SEND_STOP 0070             ?i1_do_I2C_SEND_RESTART_READ 0070  
                    ?i1_i2c_driver_stop 0070                             ??_i2c_close 004B  
                         ??_returnReset 0055                      ??_do_I2C_SEND_STOP 004B  
                __size_of_mssp_clearIRQ 0003                          ??_writeDisplay 0060  
              __size_of_i2c_driver_open 000A                       ??i1_mssp_clearIRQ 0070  
          ??_i2c_setAddressNACKCallback 0053                __size_of_i2c_driver_stop 0003  
     __end_of_do_I2C_SEND_RESTART_WRITE 0FD8            __size_ofi1_i2c_driver_isNACK 000C  
                         ??_mssp_setIRQ 004B          ??_i2c_driver_clearBusCollision 0070  
               __end_of_do_I2C_TX_EMPTY 049F                ?_rdBlkRegCompleteHandler 0054  
                   ??i1_i2c_driver_stop 0070            __size_of_do_I2C_SEND_RESTART 0008  
               _do_I2C_DO_ACK$intlevel0 0FEC                                _i2c_open 0373  
                         ?i1_returnStop 0079                  ?_rd2RegCompleteHandler 0054  
                   _do_I2C_DO_NACK_STOP 0FF0                        __size_of_i2c_ISR 0023  
                ?_wr2RegCompleteHandler 0054         _wr2RegCompleteHandler$intlevel0 06C2  
       _rd2RegCompleteHandler$intlevel0 0680   __end_of_i2c_driver_setBusCollisionISR 0FA0  
__size_of_i2c_driver_setBusCollisionISR 0006           _i2c_driver_setBusCollisionISR 0F9A  
                   i2c_writeNBytes@data 005C                            ?_do_I2C_IDLE 0070  
              ??i1_i2c_driver_getRXData 0070                            ?_do_I2C_RCEN 0070  
               ??_OSCILLATOR_Initialize 004B                __size_of_i2c_masterWrite 0004  
                      __size_of___awdiv 0052              __size_of_i2c_driver_TXData 0006  
       __size_of_do_I2C_DO_ADDRESS_NACK 0027               __end_ofi1_i2c_driver_stop 0F14  
                 i1i2c_setBuffer@buffer 0073           ??_i2c_setDataCompleteCallback 0053  
       __end_ofi1_rd1RegCompleteHandler 071C                __size_ofi1_i2c_setBuffer 000E  
                         ??i1_do_I2C_RX 007A                           ??i1_do_I2C_TX 007A  
    _do_I2C_SEND_RESTART_READ$intlevel0 0FCC             __size_ofi1_do_I2C_SEND_STOP 0004  
       __end_ofi1_wr1RegCompleteHandler 072C                    ?_do_I2C_DO_NACK_STOP 0070  
          __end_of_do_I2C_SEND_ADR_READ 078B         __size_ofi1_do_I2C_SEND_ADR_READ 0008  
            __size_of_i2c_driver_isNACK 000D                       ?_i2c_driver_start 0070  
                    i1_i2c_restartWrite 0F06                             ??_do_I2C_RX 0055  
                           ??_do_I2C_TX 0055                      ??_i2c_driver_start 004B  
                              __ptext10 0F9A                                __ptext11 07CF  
                              __ptext20 04C8                                __ptext12 0F64  
                              __ptext21 0FF8                                __ptext13 05EB  
                              __ptext30 0FC8                                __ptext22 0FF0  
                              __ptext14 07D9                                __ptext31 07F7  
                              __ptext23 0FE8                                __ptext15 07A3  
                              __ptext40 0F2F                                __ptext32 07C4  
                              __ptext24 07E3                                __ptext16 07AE  
                              __ptext41 0F8E                                __ptext33 0472  
                              __ptext25 07B9                                __ptext17 0585  
                              __ptext50 053C                                __ptext42 0F88  
                              __ptext34 0F35                                __ptext26 077F  
                              __ptext18 03BB                                __ptext51 073C  
                              __ptext43 0648                                __ptext35 0765  
                              __ptext27 0FE0                                __ptext19 028F  
                              __ptext60 043B                                __ptext52 0F2C  
                              __ptext44 067C                                __ptext36 0F94  
                              __ptext28 0FD8                                __ptext61 004C  
                              __ptext53 0F29                                __ptext45 0692  
                              __ptext37 0F32                                __ptext29 0FD0  
                              __ptext70 0329                                __ptext62 06EA  
                              __ptext54 0F5C                                __ptext46 06A8  
                              __ptext38 0F60                                __ptext71 05A8  
                              __ptext63 0F7C                                __ptext55 0F26  
                              __ptext47 0F82                                __ptext39 0F01  
                              __ptext80 0F44                                __ptext72 0F58  
                              __ptext64 04EF                                __ptext56 06D4  
                              __ptext48 06BE                                __ptext81 0F40  
                              __ptext73 0F54                                __ptext65 07ED  
                              __ptext57 0F23                                __ptext49 0772  
                              __ptext90 0F00                                __ptext82 0F71  
                              __ptext74 0F50                                __ptext58 0F20  
                              __ptext91 0F14                                __ptext83 0FB2  
                              __ptext75 0F76                                __ptext67 0629  
                              __ptext59 060A                                __ptext92 0F06  
                              __ptext84 049F                                __ptext76 0FB9  
                              __ptext68 0F1D                                __ptext93 0F04  
                              __ptext85 0F1A                                __ptext77 0FC0  
                              __ptext69 03FD                                __ptext94 0F02  
                              __ptext86 078B                                __ptext78 0F4C  
                              __ptext95 0665                                __ptext87 0F6C  
                              __ptext79 0F48                                __ptext96 06FC  
                              __ptext88 0F17                                __ptext97 070C  
                              __ptext89 0F3C                                __ptext98 071C  
                              __ptext99 072C                            _SSP1CON1bits 0215  
                      __size_of_reverse 0037                            _SSP1CON2bits 0216  
                          _shiftCounter 003D                    __end_of_do_I2C_RESET 07CF  
                        ??i1_returnStop 007A                 i1_do_I2C_SEND_ADR_WRITE 0FB9  
                   ?i1_i2c_restartWrite 0079            __end_ofi1_i2c_driver_sendACK 0F3C  
                   __end_of_returnReset 0F94                           __size_of_main 004C  
                   __end_of_mssp_setIRQ 0F38            __end_ofi1_i2c_driver_restart 0F11  
                  i1i2c_driver_TXData@d 0070            __end_ofi1_i2c_driver_startRX 0F17  
                  __CFG_WDTCWS$WDTCWSSW 0000                             _setCallBack 053C  
                          ??_shiftWalls 004C                 ??i1_do_I2C_SEND_RESTART 0070  
                         _mssp_clearIRQ 0F20                 i2c_masterOperation@read 005A  
  __size_ofi1_do_I2C_SEND_RESTART_WRITE 0004                                int$flags 007E  
            ??i1_do_I2C_DO_ADDRESS_NACK 007A        __end_ofi1_do_I2C_DO_NACK_RESTART 0F5C  
    __end_of_INTERRUPT_InterruptManager 0027              _INTERRUPT_InterruptManager 0004  
                          _SSP1STATbits 0214                    ??i1_i2c_restartWrite 007A  
      __end_of_do_I2C_SEND_RESTART_READ 0FD0                             ??_drawPixel 004D  
                           ??_drawWalls 004F                            ??_returnStop 0055  
              __end_of_i2c_restartWrite 0F88                   ??_do_I2C_DO_NACK_STOP 004B  
              mssp_waitForEvent@timeout 004B          i2c_driver_setBusCollisionISR@f 004B  
                            _INTCONbits 000B                      i2c_writeNBytes@len 005D  
                   __end_ofi1_do_I2C_RX 043B                     __end_ofi1_do_I2C_TX 0373  
                    __end_of_shiftWalls 0185                __size_ofi1_do_I2C_DO_ACK 0004  
                      ?_do_I2C_TX_EMPTY 0070                  _do_I2C_DO_ADDRESS_NACK 04C8  
        __size_ofi1_do_I2C_DO_NACK_STOP 0004                                intlevel1 0000  
         __end_ofi1_do_I2C_DO_NACK_STOP 0F58                  _do_I2C_RESET$intlevel0 07C8  
                rd2RegCompleteHandler@p 0054                       ??_i2c_driver_open 004B  
                     ??_i2c_driver_stop 004B                 ?_PIN_MANAGER_Initialize 0070  
                     i2c_restartWrite@p 0054                  i1_do_I2C_SEND_ADR_READ 0FC0  
                     __CFG_CLKOUTEN$OFF 0000              ?i1_rdBlkRegCompleteHandler 0079  
                          ?_clearPixels 0070                      __end_of_returnStop 0F8E  
                        ?_mssp_clearIRQ 0070                   __end_ofi1_setCallBack 0585  
   __size_ofi1_do_I2C_SEND_RESTART_READ 0004                                reverse@b 004E  
                  __end_of_writeDisplay 023D            __end_of_i2c_driver_getRXData 0F35  
       __size_ofi1_i2c_driver_getRXData 0003                  wr2RegCompleteHandler@p 0054  
            __size_ofi1_i2c_driver_stop 0003                             _pixelbuffer 00A0  
               __size_ofi1_do_I2C_RESET 0007                       ??_i2c_masterWrite 005C  
    __end_of_i2c_setAddressNACKCallback 0765              _i2c_setAddressNACKCallback 0758  
                __size_of_i2c_setBuffer 000E                       ??i1_i2c_setBuffer 0072  
                           _returnReset 0F8E        _do_I2C_DO_NACK_RESTART$intlevel0 0FFC  
                           _mssp_setIRQ 0F35               ??i1_do_I2C_SEND_ADR_WRITE 0071  
          __end_of_i2c_driver_setI2cISR 0FA6                  __size_ofi1_do_I2C_IDLE 0005  
                __size_ofi1_do_I2C_RCEN 0006          __end_of_PIN_MANAGER_Initialize 0516  
           __end_of_i2c_busCollisionISR 0F0E          __size_of_rd1RegCompleteHandler 0016  
         __end_of_rd1RegCompleteHandler 06A8                     i1_i2c_driver_TXData 0F6C  
        __size_of_wr1RegCompleteHandler 0016        __size_ofi1_rd1RegCompleteHandler 0010  
         __end_of_wr1RegCompleteHandler 06BE                   _do_I2C_SEND_ADR_WRITE 07B9  
           __end_of_i2c_driver_sendNACK 0F64                    _do_I2C_SEND_ADR_READ 077F  
     __end_ofi1_rdBlkRegCompleteHandler 067C        __size_ofi1_wr1RegCompleteHandler 0010  
            __end_of_i2c_driver_sendACK 0F60             __end_of_i2c_driver_resetBus 0F02  
