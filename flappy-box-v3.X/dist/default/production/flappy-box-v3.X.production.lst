

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Apr 16 14:23:31 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F1619
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	idataBANK2,global,class=CODE,delta=2
     7                           	psect	idataBANK3,global,class=CODE,delta=2
     8                           	psect	idataBANK4,global,class=CODE,delta=2
     9                           	psect	idataBANK5,global,class=CODE,delta=2
    10                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cinit,global,class=CODE,merge=1,delta=2
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    17                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    18                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    19                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    20                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    21                           	psect	dataBANK5,global,class=BANK5,space=1,delta=1
    22                           	psect	bssBANK6,global,class=BANK6,space=1,delta=1
    23                           	psect	inittext,global,class=CODE,delta=2
    24                           	psect	clrtext,global,class=CODE,delta=2
    25                           	psect	cstackBANK7,global,class=BANK7,space=1,delta=1
    26                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    27                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    28                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    29                           	psect	text1,local,class=CODE,merge=1,delta=2
    30                           	psect	text2,local,class=CODE,merge=1,delta=2
    31                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    32                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    33                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    34                           	psect	text6,local,class=CODE,merge=1,delta=2
    35                           	psect	text7,local,class=CODE,merge=1,delta=2
    36                           	psect	text8,local,class=CODE,merge=1,delta=2
    37                           	psect	text9,local,class=CODE,merge=1,delta=2
    38                           	psect	text10,local,class=CODE,merge=1,delta=2
    39                           	psect	text11,local,class=CODE,merge=1,delta=2
    40                           	psect	text12,local,class=CODE,merge=1,delta=2
    41                           	psect	text13,local,class=CODE,merge=1,delta=2
    42                           	psect	text14,local,class=CODE,merge=1,inline,delta=2
    43                           	psect	text15,local,class=CODE,merge=1,inline,delta=2
    44                           	psect	text16,local,class=CODE,merge=1,delta=2
    45                           	psect	text17,local,class=CODE,merge=1,delta=2
    46                           	psect	text18,local,class=CODE,merge=1,delta=2
    47                           	psect	text19,local,class=CODE,merge=1,inline,delta=2
    48                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    49                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    50                           	psect	text22,local,class=CODE,merge=1,delta=2
    51                           	psect	text23,local,class=CODE,merge=1,delta=2
    52                           	psect	text24,local,class=CODE,merge=1,delta=2
    53                           	psect	text25,local,class=CODE,merge=1,delta=2
    54                           	psect	text26,local,class=CODE,merge=1,delta=2
    55                           	psect	text27,local,class=CODE,merge=1,delta=2
    56                           	psect	text28,local,class=CODE,merge=1,delta=2
    57                           	psect	text29,local,class=CODE,merge=1,delta=2
    58                           	psect	text30,local,class=CODE,merge=1,delta=2
    59                           	psect	text31,local,class=CODE,merge=1,delta=2
    60                           	psect	text32,local,class=CODE,merge=1,delta=2
    61                           	psect	text33,local,class=CODE,merge=1,delta=2
    62                           	psect	text34,local,class=CODE,merge=1,delta=2
    63                           	psect	text35,local,class=CODE,merge=1,delta=2
    64                           	psect	text36,local,class=CODE,merge=1,delta=2
    65                           	psect	text37,local,class=CODE,merge=1,delta=2
    66                           	psect	text38,local,class=CODE,merge=1,delta=2
    67                           	psect	text39,local,class=CODE,merge=1,inline,delta=2
    68                           	psect	text40,local,class=CODE,merge=1,inline,delta=2
    69                           	psect	text41,local,class=CODE,merge=1,inline,delta=2
    70                           	psect	text42,local,class=CODE,merge=1,inline,delta=2
    71                           	psect	text43,local,class=CODE,merge=1,inline,delta=2
    72                           	psect	text44,local,class=CODE,merge=1,inline,delta=2
    73                           	psect	text45,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text46,local,class=CODE,merge=1,delta=2
    75                           	psect	text47,local,class=CODE,merge=1,delta=2
    76                           	psect	text48,local,class=CODE,merge=1,delta=2
    77                           	psect	text49,local,class=CODE,merge=1,delta=2
    78                           	psect	text50,local,class=CODE,merge=1,delta=2
    79                           	psect	text51,local,class=CODE,merge=1,delta=2
    80                           	psect	text52,local,class=CODE,merge=1,delta=2
    81                           	psect	text53,local,class=CODE,merge=1,delta=2
    82                           	psect	text54,local,class=CODE,merge=1,delta=2
    83                           	psect	text55,local,class=CODE,merge=1,delta=2
    84                           	psect	text56,local,class=CODE,merge=1,delta=2
    85                           	psect	text57,local,class=CODE,merge=1,inline,delta=2
    86                           	psect	text58,local,class=CODE,merge=1,inline,delta=2
    87                           	psect	text59,local,class=CODE,merge=1,inline,delta=2
    88                           	psect	text60,local,class=CODE,merge=1,inline,delta=2
    89                           	psect	text61,local,class=CODE,merge=1,delta=2
    90                           	psect	text62,local,class=CODE,merge=1,inline,delta=2
    91                           	psect	text63,local,class=CODE,merge=1,inline,delta=2
    92                           	psect	text64,local,class=CODE,merge=1,delta=2,group=1
    93                           	psect	text65,local,class=CODE,merge=1,delta=2
    94                           	psect	text66,local,class=CODE,merge=1,delta=2
    95                           	psect	text67,local,class=CODE,merge=1,delta=2
    96                           	psect	text68,local,class=CODE,merge=1,delta=2,group=1
    97                           	psect	text69,local,class=CODE,merge=1,delta=2,group=1
    98                           	psect	text70,local,class=CODE,merge=1,delta=2
    99                           	psect	text71,local,class=CODE,merge=1,delta=2
   100                           	psect	text72,local,class=CODE,merge=1,delta=2
   101                           	psect	text73,local,class=CODE,merge=1,delta=2
   102                           	psect	text74,local,class=CODE,merge=1,delta=2
   103                           	psect	text75,local,class=CODE,merge=1,delta=2
   104                           	psect	text76,local,class=CODE,merge=1,delta=2
   105                           	psect	text77,local,class=CODE,merge=1,delta=2
   106                           	psect	text78,local,class=CODE,merge=1,delta=2
   107                           	psect	intentry,global,class=CODE,delta=2
   108                           	psect	text80,local,class=CODE,merge=1,delta=2
   109                           	psect	text81,local,class=CODE,merge=1,inline,delta=2
   110                           	psect	text82,local,class=CODE,merge=1,delta=2
   111                           	psect	text83,local,class=CODE,merge=1,delta=2
   112                           	psect	text84,local,class=CODE,merge=1,delta=2
   113                           	psect	text85,local,class=CODE,merge=1,delta=2
   114                           	psect	text86,local,class=CODE,merge=1,delta=2
   115                           	psect	text87,local,class=CODE,merge=1,delta=2
   116                           	psect	text88,local,class=CODE,merge=1,delta=2
   117                           	psect	text89,local,class=CODE,merge=1,delta=2
   118                           	psect	text90,local,class=CODE,merge=1,delta=2
   119                           	psect	text91,local,class=CODE,merge=1,delta=2
   120                           	psect	text92,local,class=CODE,merge=1,delta=2
   121                           	psect	text93,local,class=CODE,merge=1,delta=2
   122                           	psect	text94,local,class=CODE,merge=1,delta=2
   123                           	psect	text95,local,class=CODE,merge=1,delta=2
   124                           	psect	text96,local,class=CODE,merge=1,delta=2
   125                           	psect	text97,local,class=CODE,merge=1,delta=2
   126                           	psect	text98,local,class=CODE,merge=1,inline,delta=2
   127                           	psect	text99,local,class=CODE,merge=1,inline,delta=2
   128                           	psect	text100,local,class=CODE,merge=1,inline,delta=2
   129                           	psect	text101,local,class=CODE,merge=1,inline,delta=2
   130                           	psect	text102,local,class=CODE,merge=1,inline,delta=2
   131                           	psect	text103,local,class=CODE,merge=1,inline,delta=2
   132                           	psect	text104,local,class=CODE,merge=1,inline,delta=2
   133                           	psect	text105,local,class=CODE,merge=1,delta=2
   134                           	psect	text106,local,class=CODE,merge=1,delta=2
   135                           	psect	text107,local,class=CODE,merge=1,delta=2
   136                           	psect	text108,local,class=CODE,merge=1,delta=2
   137                           	psect	text109,local,class=CODE,merge=1,delta=2
   138                           	psect	text110,local,class=CODE,merge=1,delta=2
   139                           	psect	text111,local,class=CODE,merge=1,delta=2
   140                           	psect	text112,local,class=CODE,merge=1,delta=2
   141                           	psect	text113,local,class=CODE,merge=1,delta=2
   142                           	psect	text114,local,class=CODE,merge=1,delta=2
   143                           	psect	text115,local,class=CODE,merge=1,delta=2
   144                           	psect	text116,local,class=CODE,merge=1,inline,delta=2
   145                           	psect	text117,local,class=CODE,merge=1,inline,delta=2
   146                           	psect	text118,local,class=CODE,merge=1,inline,delta=2
   147                           	psect	text119,local,class=CODE,merge=1,delta=2
   148                           	psect	text120,local,class=CODE,merge=1,inline,delta=2
   149                           	psect	text121,local,class=CODE,merge=1,delta=2
   150                           	psect	text122,local,class=CODE,merge=1,delta=2
   151                           	psect	text123,local,class=CODE,merge=1,delta=2
   152                           	psect	text124,local,class=CODE,merge=1,delta=2
   153                           	dabs	1,0x7E,2
   154  0000                     
   155                           ; Version 1.45
   156                           ; Generated 16/11/2017 GMT
   157                           ; 
   158                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   159                           ; All rights reserved.
   160                           ; 
   161                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   162                           ; 
   163                           ; Redistribution and use in source and binary forms, with or without modification, are
   164                           ; permitted provided that the following conditions are met:
   165                           ; 
   166                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   167                           ;        conditions and the following disclaimer.
   168                           ; 
   169                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   170                           ;        of conditions and the following disclaimer in the documentation and/or other
   171                           ;        materials provided with the distribution.
   172                           ; 
   173                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   174                           ;        software without specific prior written permission.
   175                           ; 
   176                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   177                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   178                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   179                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   180                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   181                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   182                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   183                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   184                           ; 
   185                           ; 
   186                           ; Code-generator required, PIC16F1619 Definitions
   187                           ; 
   188                           ; SFR Addresses
   189  0000                     	;# 
   190  0001                     	;# 
   191  0002                     	;# 
   192  0003                     	;# 
   193  0004                     	;# 
   194  0005                     	;# 
   195  0006                     	;# 
   196  0007                     	;# 
   197  0008                     	;# 
   198  0009                     	;# 
   199  000A                     	;# 
   200  000B                     	;# 
   201  000C                     	;# 
   202  000D                     	;# 
   203  000E                     	;# 
   204  0010                     	;# 
   205  0011                     	;# 
   206  0012                     	;# 
   207  0013                     	;# 
   208  0014                     	;# 
   209  0015                     	;# 
   210  0016                     	;# 
   211  0016                     	;# 
   212  0017                     	;# 
   213  0018                     	;# 
   214  0019                     	;# 
   215  001A                     	;# 
   216  001A                     	;# 
   217  001B                     	;# 
   218  001B                     	;# 
   219  001C                     	;# 
   220  001D                     	;# 
   221  001E                     	;# 
   222  001F                     	;# 
   223  008C                     	;# 
   224  008D                     	;# 
   225  008E                     	;# 
   226  0090                     	;# 
   227  0091                     	;# 
   228  0092                     	;# 
   229  0093                     	;# 
   230  0094                     	;# 
   231  0095                     	;# 
   232  0096                     	;# 
   233  0098                     	;# 
   234  0099                     	;# 
   235  009A                     	;# 
   236  009B                     	;# 
   237  009B                     	;# 
   238  009C                     	;# 
   239  009D                     	;# 
   240  009E                     	;# 
   241  009F                     	;# 
   242  010C                     	;# 
   243  010D                     	;# 
   244  010E                     	;# 
   245  0111                     	;# 
   246  0112                     	;# 
   247  0113                     	;# 
   248  0114                     	;# 
   249  0115                     	;# 
   250  0116                     	;# 
   251  0117                     	;# 
   252  0118                     	;# 
   253  0119                     	;# 
   254  011C                     	;# 
   255  018C                     	;# 
   256  018D                     	;# 
   257  018E                     	;# 
   258  0191                     	;# 
   259  0191                     	;# 
   260  0192                     	;# 
   261  0193                     	;# 
   262  0193                     	;# 
   263  0194                     	;# 
   264  0195                     	;# 
   265  0196                     	;# 
   266  0197                     	;# 
   267  0199                     	;# 
   268  0199                     	;# 
   269  0199                     	;# 
   270  019A                     	;# 
   271  019A                     	;# 
   272  019A                     	;# 
   273  019B                     	;# 
   274  019B                     	;# 
   275  019B                     	;# 
   276  019B                     	;# 
   277  019B                     	;# 
   278  019C                     	;# 
   279  019C                     	;# 
   280  019C                     	;# 
   281  019D                     	;# 
   282  019D                     	;# 
   283  019D                     	;# 
   284  019E                     	;# 
   285  019E                     	;# 
   286  019E                     	;# 
   287  019F                     	;# 
   288  019F                     	;# 
   289  019F                     	;# 
   290  019F                     	;# 
   291  019F                     	;# 
   292  020C                     	;# 
   293  020D                     	;# 
   294  020E                     	;# 
   295  0211                     	;# 
   296  0211                     	;# 
   297  0212                     	;# 
   298  0212                     	;# 
   299  0213                     	;# 
   300  0213                     	;# 
   301  0214                     	;# 
   302  0214                     	;# 
   303  0215                     	;# 
   304  0215                     	;# 
   305  0215                     	;# 
   306  0215                     	;# 
   307  0216                     	;# 
   308  0216                     	;# 
   309  0217                     	;# 
   310  0217                     	;# 
   311  028C                     	;# 
   312  028D                     	;# 
   313  028E                     	;# 
   314  0291                     	;# 
   315  0291                     	;# 
   316  0292                     	;# 
   317  0293                     	;# 
   318  0294                     	;# 
   319  0298                     	;# 
   320  0298                     	;# 
   321  0299                     	;# 
   322  029A                     	;# 
   323  029B                     	;# 
   324  029E                     	;# 
   325  030C                     	;# 
   326  030D                     	;# 
   327  030E                     	;# 
   328  038C                     	;# 
   329  038D                     	;# 
   330  038E                     	;# 
   331  0391                     	;# 
   332  0392                     	;# 
   333  0393                     	;# 
   334  0394                     	;# 
   335  0395                     	;# 
   336  0396                     	;# 
   337  0397                     	;# 
   338  0398                     	;# 
   339  0399                     	;# 
   340  040E                     	;# 
   341  0413                     	;# 
   342  0413                     	;# 
   343  0414                     	;# 
   344  0414                     	;# 
   345  0415                     	;# 
   346  0416                     	;# 
   347  0417                     	;# 
   348  0418                     	;# 
   349  041A                     	;# 
   350  041A                     	;# 
   351  041B                     	;# 
   352  041B                     	;# 
   353  041C                     	;# 
   354  041D                     	;# 
   355  041E                     	;# 
   356  041F                     	;# 
   357  0493                     	;# 
   358  0494                     	;# 
   359  0495                     	;# 
   360  0496                     	;# 
   361  049A                     	;# 
   362  049B                     	;# 
   363  049C                     	;# 
   364  049D                     	;# 
   365  058C                     	;# 
   366  058C                     	;# 
   367  058D                     	;# 
   368  058E                     	;# 
   369  058E                     	;# 
   370  058F                     	;# 
   371  0590                     	;# 
   372  0590                     	;# 
   373  0591                     	;# 
   374  0592                     	;# 
   375  0592                     	;# 
   376  0593                     	;# 
   377  0594                     	;# 
   378  0594                     	;# 
   379  0595                     	;# 
   380  0596                     	;# 
   381  0596                     	;# 
   382  0597                     	;# 
   383  0598                     	;# 
   384  0599                     	;# 
   385  059A                     	;# 
   386  059B                     	;# 
   387  059B                     	;# 
   388  059C                     	;# 
   389  059D                     	;# 
   390  060C                     	;# 
   391  060C                     	;# 
   392  060D                     	;# 
   393  060E                     	;# 
   394  060F                     	;# 
   395  060F                     	;# 
   396  0610                     	;# 
   397  0611                     	;# 
   398  0612                     	;# 
   399  0613                     	;# 
   400  0614                     	;# 
   401  0617                     	;# 
   402  0618                     	;# 
   403  0619                     	;# 
   404  061A                     	;# 
   405  061B                     	;# 
   406  061C                     	;# 
   407  0691                     	;# 
   408  0692                     	;# 
   409  0693                     	;# 
   410  0694                     	;# 
   411  0695                     	;# 
   412  0696                     	;# 
   413  0697                     	;# 
   414  0699                     	;# 
   415  069A                     	;# 
   416  0711                     	;# 
   417  0712                     	;# 
   418  0713                     	;# 
   419  0714                     	;# 
   420  0715                     	;# 
   421  0718                     	;# 
   422  0718                     	;# 
   423  0719                     	;# 
   424  071A                     	;# 
   425  071A                     	;# 
   426  071B                     	;# 
   427  071C                     	;# 
   428  071D                     	;# 
   429  0791                     	;# 
   430  0791                     	;# 
   431  0792                     	;# 
   432  0793                     	;# 
   433  0793                     	;# 
   434  0794                     	;# 
   435  0795                     	;# 
   436  0795                     	;# 
   437  0796                     	;# 
   438  0797                     	;# 
   439  0797                     	;# 
   440  0798                     	;# 
   441  0799                     	;# 
   442  079A                     	;# 
   443  080C                     	;# 
   444  080C                     	;# 
   445  080D                     	;# 
   446  080E                     	;# 
   447  080E                     	;# 
   448  080F                     	;# 
   449  0810                     	;# 
   450  0810                     	;# 
   451  0811                     	;# 
   452  0812                     	;# 
   453  0812                     	;# 
   454  0813                     	;# 
   455  0814                     	;# 
   456  0815                     	;# 
   457  0816                     	;# 
   458  0817                     	;# 
   459  0818                     	;# 
   460  0819                     	;# 
   461  081A                     	;# 
   462  081A                     	;# 
   463  081B                     	;# 
   464  081C                     	;# 
   465  081C                     	;# 
   466  081D                     	;# 
   467  088C                     	;# 
   468  088D                     	;# 
   469  088E                     	;# 
   470  088F                     	;# 
   471  088F                     	;# 
   472  0890                     	;# 
   473  0891                     	;# 
   474  0892                     	;# 
   475  0893                     	;# 
   476  0893                     	;# 
   477  0894                     	;# 
   478  0895                     	;# 
   479  0896                     	;# 
   480  0897                     	;# 
   481  0897                     	;# 
   482  0898                     	;# 
   483  0899                     	;# 
   484  0D8C                     	;# 
   485  0D8C                     	;# 
   486  0D8D                     	;# 
   487  0D8E                     	;# 
   488  0D8F                     	;# 
   489  0D8F                     	;# 
   490  0D90                     	;# 
   491  0D91                     	;# 
   492  0D92                     	;# 
   493  0D92                     	;# 
   494  0D93                     	;# 
   495  0D94                     	;# 
   496  0D95                     	;# 
   497  0D95                     	;# 
   498  0D96                     	;# 
   499  0D97                     	;# 
   500  0D98                     	;# 
   501  0D99                     	;# 
   502  0D9A                     	;# 
   503  0D9B                     	;# 
   504  0D9C                     	;# 
   505  0D9D                     	;# 
   506  0D9E                     	;# 
   507  0D9E                     	;# 
   508  0D9F                     	;# 
   509  0DA0                     	;# 
   510  0DA1                     	;# 
   511  0DA1                     	;# 
   512  0DA2                     	;# 
   513  0DA3                     	;# 
   514  0DA4                     	;# 
   515  0DA4                     	;# 
   516  0DA5                     	;# 
   517  0DA6                     	;# 
   518  0DA7                     	;# 
   519  0DA7                     	;# 
   520  0DA8                     	;# 
   521  0DA9                     	;# 
   522  0DAA                     	;# 
   523  0DAB                     	;# 
   524  0DAC                     	;# 
   525  0DAD                     	;# 
   526  0DAE                     	;# 
   527  0DAF                     	;# 
   528  0E0F                     	;# 
   529  0E10                     	;# 
   530  0E11                     	;# 
   531  0E12                     	;# 
   532  0E13                     	;# 
   533  0E14                     	;# 
   534  0E15                     	;# 
   535  0E16                     	;# 
   536  0E17                     	;# 
   537  0E18                     	;# 
   538  0E19                     	;# 
   539  0E1A                     	;# 
   540  0E1B                     	;# 
   541  0E1C                     	;# 
   542  0E1D                     	;# 
   543  0E1E                     	;# 
   544  0E1F                     	;# 
   545  0E20                     	;# 
   546  0E21                     	;# 
   547  0E22                     	;# 
   548  0E23                     	;# 
   549  0E24                     	;# 
   550  0E25                     	;# 
   551  0E26                     	;# 
   552  0E27                     	;# 
   553  0E28                     	;# 
   554  0E29                     	;# 
   555  0E2A                     	;# 
   556  0E2B                     	;# 
   557  0E2C                     	;# 
   558  0E2D                     	;# 
   559  0E2E                     	;# 
   560  0E90                     	;# 
   561  0E91                     	;# 
   562  0E92                     	;# 
   563  0E94                     	;# 
   564  0E95                     	;# 
   565  0E9C                     	;# 
   566  0E9D                     	;# 
   567  0E9E                     	;# 
   568  0E9F                     	;# 
   569  0EA0                     	;# 
   570  0EA1                     	;# 
   571  0EA2                     	;# 
   572  0EA3                     	;# 
   573  0EA4                     	;# 
   574  0EA5                     	;# 
   575  0EA6                     	;# 
   576  0EA7                     	;# 
   577  0F0F                     	;# 
   578  0F10                     	;# 
   579  0F11                     	;# 
   580  0F12                     	;# 
   581  0F13                     	;# 
   582  0F14                     	;# 
   583  0F15                     	;# 
   584  0F16                     	;# 
   585  0F17                     	;# 
   586  0F18                     	;# 
   587  0F19                     	;# 
   588  0F1A                     	;# 
   589  0F1B                     	;# 
   590  0F1C                     	;# 
   591  0F1D                     	;# 
   592  0F1E                     	;# 
   593  0F1F                     	;# 
   594  0F20                     	;# 
   595  0F21                     	;# 
   596  0F22                     	;# 
   597  0F23                     	;# 
   598  0F24                     	;# 
   599  0F25                     	;# 
   600  0F26                     	;# 
   601  0F27                     	;# 
   602  0F28                     	;# 
   603  0F29                     	;# 
   604  0F2A                     	;# 
   605  0F2B                     	;# 
   606  0F2C                     	;# 
   607  0F2D                     	;# 
   608  0F2E                     	;# 
   609  0F2F                     	;# 
   610  0F30                     	;# 
   611  0F31                     	;# 
   612  0F32                     	;# 
   613  0F33                     	;# 
   614  0F34                     	;# 
   615  0F35                     	;# 
   616  0F36                     	;# 
   617  0F37                     	;# 
   618  0FE4                     	;# 
   619  0FE5                     	;# 
   620  0FE6                     	;# 
   621  0FE7                     	;# 
   622  0FE8                     	;# 
   623  0FE9                     	;# 
   624  0FEA                     	;# 
   625  0FEB                     	;# 
   626  0FED                     	;# 
   627  0FEE                     	;# 
   628  0FEF                     	;# 
   629  0000                     	;# 
   630  0001                     	;# 
   631  0002                     	;# 
   632  0003                     	;# 
   633  0004                     	;# 
   634  0005                     	;# 
   635  0006                     	;# 
   636  0007                     	;# 
   637  0008                     	;# 
   638  0009                     	;# 
   639  000A                     	;# 
   640  000B                     	;# 
   641  000C                     	;# 
   642  000D                     	;# 
   643  000E                     	;# 
   644  0010                     	;# 
   645  0011                     	;# 
   646  0012                     	;# 
   647  0013                     	;# 
   648  0014                     	;# 
   649  0015                     	;# 
   650  0016                     	;# 
   651  0016                     	;# 
   652  0017                     	;# 
   653  0018                     	;# 
   654  0019                     	;# 
   655  001A                     	;# 
   656  001A                     	;# 
   657  001B                     	;# 
   658  001B                     	;# 
   659  001C                     	;# 
   660  001D                     	;# 
   661  001E                     	;# 
   662  001F                     	;# 
   663  008C                     	;# 
   664  008D                     	;# 
   665  008E                     	;# 
   666  0090                     	;# 
   667  0091                     	;# 
   668  0092                     	;# 
   669  0093                     	;# 
   670  0094                     	;# 
   671  0095                     	;# 
   672  0096                     	;# 
   673  0098                     	;# 
   674  0099                     	;# 
   675  009A                     	;# 
   676  009B                     	;# 
   677  009B                     	;# 
   678  009C                     	;# 
   679  009D                     	;# 
   680  009E                     	;# 
   681  009F                     	;# 
   682  010C                     	;# 
   683  010D                     	;# 
   684  010E                     	;# 
   685  0111                     	;# 
   686  0112                     	;# 
   687  0113                     	;# 
   688  0114                     	;# 
   689  0115                     	;# 
   690  0116                     	;# 
   691  0117                     	;# 
   692  0118                     	;# 
   693  0119                     	;# 
   694  011C                     	;# 
   695  018C                     	;# 
   696  018D                     	;# 
   697  018E                     	;# 
   698  0191                     	;# 
   699  0191                     	;# 
   700  0192                     	;# 
   701  0193                     	;# 
   702  0193                     	;# 
   703  0194                     	;# 
   704  0195                     	;# 
   705  0196                     	;# 
   706  0197                     	;# 
   707  0199                     	;# 
   708  0199                     	;# 
   709  0199                     	;# 
   710  019A                     	;# 
   711  019A                     	;# 
   712  019A                     	;# 
   713  019B                     	;# 
   714  019B                     	;# 
   715  019B                     	;# 
   716  019B                     	;# 
   717  019B                     	;# 
   718  019C                     	;# 
   719  019C                     	;# 
   720  019C                     	;# 
   721  019D                     	;# 
   722  019D                     	;# 
   723  019D                     	;# 
   724  019E                     	;# 
   725  019E                     	;# 
   726  019E                     	;# 
   727  019F                     	;# 
   728  019F                     	;# 
   729  019F                     	;# 
   730  019F                     	;# 
   731  019F                     	;# 
   732  020C                     	;# 
   733  020D                     	;# 
   734  020E                     	;# 
   735  0211                     	;# 
   736  0211                     	;# 
   737  0212                     	;# 
   738  0212                     	;# 
   739  0213                     	;# 
   740  0213                     	;# 
   741  0214                     	;# 
   742  0214                     	;# 
   743  0215                     	;# 
   744  0215                     	;# 
   745  0215                     	;# 
   746  0215                     	;# 
   747  0216                     	;# 
   748  0216                     	;# 
   749  0217                     	;# 
   750  0217                     	;# 
   751  028C                     	;# 
   752  028D                     	;# 
   753  028E                     	;# 
   754  0291                     	;# 
   755  0291                     	;# 
   756  0292                     	;# 
   757  0293                     	;# 
   758  0294                     	;# 
   759  0298                     	;# 
   760  0298                     	;# 
   761  0299                     	;# 
   762  029A                     	;# 
   763  029B                     	;# 
   764  029E                     	;# 
   765  030C                     	;# 
   766  030D                     	;# 
   767  030E                     	;# 
   768  038C                     	;# 
   769  038D                     	;# 
   770  038E                     	;# 
   771  0391                     	;# 
   772  0392                     	;# 
   773  0393                     	;# 
   774  0394                     	;# 
   775  0395                     	;# 
   776  0396                     	;# 
   777  0397                     	;# 
   778  0398                     	;# 
   779  0399                     	;# 
   780  040E                     	;# 
   781  0413                     	;# 
   782  0413                     	;# 
   783  0414                     	;# 
   784  0414                     	;# 
   785  0415                     	;# 
   786  0416                     	;# 
   787  0417                     	;# 
   788  0418                     	;# 
   789  041A                     	;# 
   790  041A                     	;# 
   791  041B                     	;# 
   792  041B                     	;# 
   793  041C                     	;# 
   794  041D                     	;# 
   795  041E                     	;# 
   796  041F                     	;# 
   797  0493                     	;# 
   798  0494                     	;# 
   799  0495                     	;# 
   800  0496                     	;# 
   801  049A                     	;# 
   802  049B                     	;# 
   803  049C                     	;# 
   804  049D                     	;# 
   805  058C                     	;# 
   806  058C                     	;# 
   807  058D                     	;# 
   808  058E                     	;# 
   809  058E                     	;# 
   810  058F                     	;# 
   811  0590                     	;# 
   812  0590                     	;# 
   813  0591                     	;# 
   814  0592                     	;# 
   815  0592                     	;# 
   816  0593                     	;# 
   817  0594                     	;# 
   818  0594                     	;# 
   819  0595                     	;# 
   820  0596                     	;# 
   821  0596                     	;# 
   822  0597                     	;# 
   823  0598                     	;# 
   824  0599                     	;# 
   825  059A                     	;# 
   826  059B                     	;# 
   827  059B                     	;# 
   828  059C                     	;# 
   829  059D                     	;# 
   830  060C                     	;# 
   831  060C                     	;# 
   832  060D                     	;# 
   833  060E                     	;# 
   834  060F                     	;# 
   835  060F                     	;# 
   836  0610                     	;# 
   837  0611                     	;# 
   838  0612                     	;# 
   839  0613                     	;# 
   840  0614                     	;# 
   841  0617                     	;# 
   842  0618                     	;# 
   843  0619                     	;# 
   844  061A                     	;# 
   845  061B                     	;# 
   846  061C                     	;# 
   847  0691                     	;# 
   848  0692                     	;# 
   849  0693                     	;# 
   850  0694                     	;# 
   851  0695                     	;# 
   852  0696                     	;# 
   853  0697                     	;# 
   854  0699                     	;# 
   855  069A                     	;# 
   856  0711                     	;# 
   857  0712                     	;# 
   858  0713                     	;# 
   859  0714                     	;# 
   860  0715                     	;# 
   861  0718                     	;# 
   862  0718                     	;# 
   863  0719                     	;# 
   864  071A                     	;# 
   865  071A                     	;# 
   866  071B                     	;# 
   867  071C                     	;# 
   868  071D                     	;# 
   869  0791                     	;# 
   870  0791                     	;# 
   871  0792                     	;# 
   872  0793                     	;# 
   873  0793                     	;# 
   874  0794                     	;# 
   875  0795                     	;# 
   876  0795                     	;# 
   877  0796                     	;# 
   878  0797                     	;# 
   879  0797                     	;# 
   880  0798                     	;# 
   881  0799                     	;# 
   882  079A                     	;# 
   883  080C                     	;# 
   884  080C                     	;# 
   885  080D                     	;# 
   886  080E                     	;# 
   887  080E                     	;# 
   888  080F                     	;# 
   889  0810                     	;# 
   890  0810                     	;# 
   891  0811                     	;# 
   892  0812                     	;# 
   893  0812                     	;# 
   894  0813                     	;# 
   895  0814                     	;# 
   896  0815                     	;# 
   897  0816                     	;# 
   898  0817                     	;# 
   899  0818                     	;# 
   900  0819                     	;# 
   901  081A                     	;# 
   902  081A                     	;# 
   903  081B                     	;# 
   904  081C                     	;# 
   905  081C                     	;# 
   906  081D                     	;# 
   907  088C                     	;# 
   908  088D                     	;# 
   909  088E                     	;# 
   910  088F                     	;# 
   911  088F                     	;# 
   912  0890                     	;# 
   913  0891                     	;# 
   914  0892                     	;# 
   915  0893                     	;# 
   916  0893                     	;# 
   917  0894                     	;# 
   918  0895                     	;# 
   919  0896                     	;# 
   920  0897                     	;# 
   921  0897                     	;# 
   922  0898                     	;# 
   923  0899                     	;# 
   924  0D8C                     	;# 
   925  0D8C                     	;# 
   926  0D8D                     	;# 
   927  0D8E                     	;# 
   928  0D8F                     	;# 
   929  0D8F                     	;# 
   930  0D90                     	;# 
   931  0D91                     	;# 
   932  0D92                     	;# 
   933  0D92                     	;# 
   934  0D93                     	;# 
   935  0D94                     	;# 
   936  0D95                     	;# 
   937  0D95                     	;# 
   938  0D96                     	;# 
   939  0D97                     	;# 
   940  0D98                     	;# 
   941  0D99                     	;# 
   942  0D9A                     	;# 
   943  0D9B                     	;# 
   944  0D9C                     	;# 
   945  0D9D                     	;# 
   946  0D9E                     	;# 
   947  0D9E                     	;# 
   948  0D9F                     	;# 
   949  0DA0                     	;# 
   950  0DA1                     	;# 
   951  0DA1                     	;# 
   952  0DA2                     	;# 
   953  0DA3                     	;# 
   954  0DA4                     	;# 
   955  0DA4                     	;# 
   956  0DA5                     	;# 
   957  0DA6                     	;# 
   958  0DA7                     	;# 
   959  0DA7                     	;# 
   960  0DA8                     	;# 
   961  0DA9                     	;# 
   962  0DAA                     	;# 
   963  0DAB                     	;# 
   964  0DAC                     	;# 
   965  0DAD                     	;# 
   966  0DAE                     	;# 
   967  0DAF                     	;# 
   968  0E0F                     	;# 
   969  0E10                     	;# 
   970  0E11                     	;# 
   971  0E12                     	;# 
   972  0E13                     	;# 
   973  0E14                     	;# 
   974  0E15                     	;# 
   975  0E16                     	;# 
   976  0E17                     	;# 
   977  0E18                     	;# 
   978  0E19                     	;# 
   979  0E1A                     	;# 
   980  0E1B                     	;# 
   981  0E1C                     	;# 
   982  0E1D                     	;# 
   983  0E1E                     	;# 
   984  0E1F                     	;# 
   985  0E20                     	;# 
   986  0E21                     	;# 
   987  0E22                     	;# 
   988  0E23                     	;# 
   989  0E24                     	;# 
   990  0E25                     	;# 
   991  0E26                     	;# 
   992  0E27                     	;# 
   993  0E28                     	;# 
   994  0E29                     	;# 
   995  0E2A                     	;# 
   996  0E2B                     	;# 
   997  0E2C                     	;# 
   998  0E2D                     	;# 
   999  0E2E                     	;# 
  1000  0E90                     	;# 
  1001  0E91                     	;# 
  1002  0E92                     	;# 
  1003  0E94                     	;# 
  1004  0E95                     	;# 
  1005  0E9C                     	;# 
  1006  0E9D                     	;# 
  1007  0E9E                     	;# 
  1008  0E9F                     	;# 
  1009  0EA0                     	;# 
  1010  0EA1                     	;# 
  1011  0EA2                     	;# 
  1012  0EA3                     	;# 
  1013  0EA4                     	;# 
  1014  0EA5                     	;# 
  1015  0EA6                     	;# 
  1016  0EA7                     	;# 
  1017  0F0F                     	;# 
  1018  0F10                     	;# 
  1019  0F11                     	;# 
  1020  0F12                     	;# 
  1021  0F13                     	;# 
  1022  0F14                     	;# 
  1023  0F15                     	;# 
  1024  0F16                     	;# 
  1025  0F17                     	;# 
  1026  0F18                     	;# 
  1027  0F19                     	;# 
  1028  0F1A                     	;# 
  1029  0F1B                     	;# 
  1030  0F1C                     	;# 
  1031  0F1D                     	;# 
  1032  0F1E                     	;# 
  1033  0F1F                     	;# 
  1034  0F20                     	;# 
  1035  0F21                     	;# 
  1036  0F22                     	;# 
  1037  0F23                     	;# 
  1038  0F24                     	;# 
  1039  0F25                     	;# 
  1040  0F26                     	;# 
  1041  0F27                     	;# 
  1042  0F28                     	;# 
  1043  0F29                     	;# 
  1044  0F2A                     	;# 
  1045  0F2B                     	;# 
  1046  0F2C                     	;# 
  1047  0F2D                     	;# 
  1048  0F2E                     	;# 
  1049  0F2F                     	;# 
  1050  0F30                     	;# 
  1051  0F31                     	;# 
  1052  0F32                     	;# 
  1053  0F33                     	;# 
  1054  0F34                     	;# 
  1055  0F35                     	;# 
  1056  0F36                     	;# 
  1057  0F37                     	;# 
  1058  0FE4                     	;# 
  1059  0FE5                     	;# 
  1060  0FE6                     	;# 
  1061  0FE7                     	;# 
  1062  0FE8                     	;# 
  1063  0FE9                     	;# 
  1064  0FEA                     	;# 
  1065  0FEB                     	;# 
  1066  0FED                     	;# 
  1067  0FEE                     	;# 
  1068  0FEF                     	;# 
  1069  0000                     	;# 
  1070  0001                     	;# 
  1071  0002                     	;# 
  1072  0003                     	;# 
  1073  0004                     	;# 
  1074  0005                     	;# 
  1075  0006                     	;# 
  1076  0007                     	;# 
  1077  0008                     	;# 
  1078  0009                     	;# 
  1079  000A                     	;# 
  1080  000B                     	;# 
  1081  000C                     	;# 
  1082  000D                     	;# 
  1083  000E                     	;# 
  1084  0010                     	;# 
  1085  0011                     	;# 
  1086  0012                     	;# 
  1087  0013                     	;# 
  1088  0014                     	;# 
  1089  0015                     	;# 
  1090  0016                     	;# 
  1091  0016                     	;# 
  1092  0017                     	;# 
  1093  0018                     	;# 
  1094  0019                     	;# 
  1095  001A                     	;# 
  1096  001A                     	;# 
  1097  001B                     	;# 
  1098  001B                     	;# 
  1099  001C                     	;# 
  1100  001D                     	;# 
  1101  001E                     	;# 
  1102  001F                     	;# 
  1103  008C                     	;# 
  1104  008D                     	;# 
  1105  008E                     	;# 
  1106  0090                     	;# 
  1107  0091                     	;# 
  1108  0092                     	;# 
  1109  0093                     	;# 
  1110  0094                     	;# 
  1111  0095                     	;# 
  1112  0096                     	;# 
  1113  0098                     	;# 
  1114  0099                     	;# 
  1115  009A                     	;# 
  1116  009B                     	;# 
  1117  009B                     	;# 
  1118  009C                     	;# 
  1119  009D                     	;# 
  1120  009E                     	;# 
  1121  009F                     	;# 
  1122  010C                     	;# 
  1123  010D                     	;# 
  1124  010E                     	;# 
  1125  0111                     	;# 
  1126  0112                     	;# 
  1127  0113                     	;# 
  1128  0114                     	;# 
  1129  0115                     	;# 
  1130  0116                     	;# 
  1131  0117                     	;# 
  1132  0118                     	;# 
  1133  0119                     	;# 
  1134  011C                     	;# 
  1135  018C                     	;# 
  1136  018D                     	;# 
  1137  018E                     	;# 
  1138  0191                     	;# 
  1139  0191                     	;# 
  1140  0192                     	;# 
  1141  0193                     	;# 
  1142  0193                     	;# 
  1143  0194                     	;# 
  1144  0195                     	;# 
  1145  0196                     	;# 
  1146  0197                     	;# 
  1147  0199                     	;# 
  1148  0199                     	;# 
  1149  0199                     	;# 
  1150  019A                     	;# 
  1151  019A                     	;# 
  1152  019A                     	;# 
  1153  019B                     	;# 
  1154  019B                     	;# 
  1155  019B                     	;# 
  1156  019B                     	;# 
  1157  019B                     	;# 
  1158  019C                     	;# 
  1159  019C                     	;# 
  1160  019C                     	;# 
  1161  019D                     	;# 
  1162  019D                     	;# 
  1163  019D                     	;# 
  1164  019E                     	;# 
  1165  019E                     	;# 
  1166  019E                     	;# 
  1167  019F                     	;# 
  1168  019F                     	;# 
  1169  019F                     	;# 
  1170  019F                     	;# 
  1171  019F                     	;# 
  1172  020C                     	;# 
  1173  020D                     	;# 
  1174  020E                     	;# 
  1175  0211                     	;# 
  1176  0211                     	;# 
  1177  0212                     	;# 
  1178  0212                     	;# 
  1179  0213                     	;# 
  1180  0213                     	;# 
  1181  0214                     	;# 
  1182  0214                     	;# 
  1183  0215                     	;# 
  1184  0215                     	;# 
  1185  0215                     	;# 
  1186  0215                     	;# 
  1187  0216                     	;# 
  1188  0216                     	;# 
  1189  0217                     	;# 
  1190  0217                     	;# 
  1191  028C                     	;# 
  1192  028D                     	;# 
  1193  028E                     	;# 
  1194  0291                     	;# 
  1195  0291                     	;# 
  1196  0292                     	;# 
  1197  0293                     	;# 
  1198  0294                     	;# 
  1199  0298                     	;# 
  1200  0298                     	;# 
  1201  0299                     	;# 
  1202  029A                     	;# 
  1203  029B                     	;# 
  1204  029E                     	;# 
  1205  030C                     	;# 
  1206  030D                     	;# 
  1207  030E                     	;# 
  1208  038C                     	;# 
  1209  038D                     	;# 
  1210  038E                     	;# 
  1211  0391                     	;# 
  1212  0392                     	;# 
  1213  0393                     	;# 
  1214  0394                     	;# 
  1215  0395                     	;# 
  1216  0396                     	;# 
  1217  0397                     	;# 
  1218  0398                     	;# 
  1219  0399                     	;# 
  1220  040E                     	;# 
  1221  0413                     	;# 
  1222  0413                     	;# 
  1223  0414                     	;# 
  1224  0414                     	;# 
  1225  0415                     	;# 
  1226  0416                     	;# 
  1227  0417                     	;# 
  1228  0418                     	;# 
  1229  041A                     	;# 
  1230  041A                     	;# 
  1231  041B                     	;# 
  1232  041B                     	;# 
  1233  041C                     	;# 
  1234  041D                     	;# 
  1235  041E                     	;# 
  1236  041F                     	;# 
  1237  0493                     	;# 
  1238  0494                     	;# 
  1239  0495                     	;# 
  1240  0496                     	;# 
  1241  049A                     	;# 
  1242  049B                     	;# 
  1243  049C                     	;# 
  1244  049D                     	;# 
  1245  058C                     	;# 
  1246  058C                     	;# 
  1247  058D                     	;# 
  1248  058E                     	;# 
  1249  058E                     	;# 
  1250  058F                     	;# 
  1251  0590                     	;# 
  1252  0590                     	;# 
  1253  0591                     	;# 
  1254  0592                     	;# 
  1255  0592                     	;# 
  1256  0593                     	;# 
  1257  0594                     	;# 
  1258  0594                     	;# 
  1259  0595                     	;# 
  1260  0596                     	;# 
  1261  0596                     	;# 
  1262  0597                     	;# 
  1263  0598                     	;# 
  1264  0599                     	;# 
  1265  059A                     	;# 
  1266  059B                     	;# 
  1267  059B                     	;# 
  1268  059C                     	;# 
  1269  059D                     	;# 
  1270  060C                     	;# 
  1271  060C                     	;# 
  1272  060D                     	;# 
  1273  060E                     	;# 
  1274  060F                     	;# 
  1275  060F                     	;# 
  1276  0610                     	;# 
  1277  0611                     	;# 
  1278  0612                     	;# 
  1279  0613                     	;# 
  1280  0614                     	;# 
  1281  0617                     	;# 
  1282  0618                     	;# 
  1283  0619                     	;# 
  1284  061A                     	;# 
  1285  061B                     	;# 
  1286  061C                     	;# 
  1287  0691                     	;# 
  1288  0692                     	;# 
  1289  0693                     	;# 
  1290  0694                     	;# 
  1291  0695                     	;# 
  1292  0696                     	;# 
  1293  0697                     	;# 
  1294  0699                     	;# 
  1295  069A                     	;# 
  1296  0711                     	;# 
  1297  0712                     	;# 
  1298  0713                     	;# 
  1299  0714                     	;# 
  1300  0715                     	;# 
  1301  0718                     	;# 
  1302  0718                     	;# 
  1303  0719                     	;# 
  1304  071A                     	;# 
  1305  071A                     	;# 
  1306  071B                     	;# 
  1307  071C                     	;# 
  1308  071D                     	;# 
  1309  0791                     	;# 
  1310  0791                     	;# 
  1311  0792                     	;# 
  1312  0793                     	;# 
  1313  0793                     	;# 
  1314  0794                     	;# 
  1315  0795                     	;# 
  1316  0795                     	;# 
  1317  0796                     	;# 
  1318  0797                     	;# 
  1319  0797                     	;# 
  1320  0798                     	;# 
  1321  0799                     	;# 
  1322  079A                     	;# 
  1323  080C                     	;# 
  1324  080C                     	;# 
  1325  080D                     	;# 
  1326  080E                     	;# 
  1327  080E                     	;# 
  1328  080F                     	;# 
  1329  0810                     	;# 
  1330  0810                     	;# 
  1331  0811                     	;# 
  1332  0812                     	;# 
  1333  0812                     	;# 
  1334  0813                     	;# 
  1335  0814                     	;# 
  1336  0815                     	;# 
  1337  0816                     	;# 
  1338  0817                     	;# 
  1339  0818                     	;# 
  1340  0819                     	;# 
  1341  081A                     	;# 
  1342  081A                     	;# 
  1343  081B                     	;# 
  1344  081C                     	;# 
  1345  081C                     	;# 
  1346  081D                     	;# 
  1347  088C                     	;# 
  1348  088D                     	;# 
  1349  088E                     	;# 
  1350  088F                     	;# 
  1351  088F                     	;# 
  1352  0890                     	;# 
  1353  0891                     	;# 
  1354  0892                     	;# 
  1355  0893                     	;# 
  1356  0893                     	;# 
  1357  0894                     	;# 
  1358  0895                     	;# 
  1359  0896                     	;# 
  1360  0897                     	;# 
  1361  0897                     	;# 
  1362  0898                     	;# 
  1363  0899                     	;# 
  1364  0D8C                     	;# 
  1365  0D8C                     	;# 
  1366  0D8D                     	;# 
  1367  0D8E                     	;# 
  1368  0D8F                     	;# 
  1369  0D8F                     	;# 
  1370  0D90                     	;# 
  1371  0D91                     	;# 
  1372  0D92                     	;# 
  1373  0D92                     	;# 
  1374  0D93                     	;# 
  1375  0D94                     	;# 
  1376  0D95                     	;# 
  1377  0D95                     	;# 
  1378  0D96                     	;# 
  1379  0D97                     	;# 
  1380  0D98                     	;# 
  1381  0D99                     	;# 
  1382  0D9A                     	;# 
  1383  0D9B                     	;# 
  1384  0D9C                     	;# 
  1385  0D9D                     	;# 
  1386  0D9E                     	;# 
  1387  0D9E                     	;# 
  1388  0D9F                     	;# 
  1389  0DA0                     	;# 
  1390  0DA1                     	;# 
  1391  0DA1                     	;# 
  1392  0DA2                     	;# 
  1393  0DA3                     	;# 
  1394  0DA4                     	;# 
  1395  0DA4                     	;# 
  1396  0DA5                     	;# 
  1397  0DA6                     	;# 
  1398  0DA7                     	;# 
  1399  0DA7                     	;# 
  1400  0DA8                     	;# 
  1401  0DA9                     	;# 
  1402  0DAA                     	;# 
  1403  0DAB                     	;# 
  1404  0DAC                     	;# 
  1405  0DAD                     	;# 
  1406  0DAE                     	;# 
  1407  0DAF                     	;# 
  1408  0E0F                     	;# 
  1409  0E10                     	;# 
  1410  0E11                     	;# 
  1411  0E12                     	;# 
  1412  0E13                     	;# 
  1413  0E14                     	;# 
  1414  0E15                     	;# 
  1415  0E16                     	;# 
  1416  0E17                     	;# 
  1417  0E18                     	;# 
  1418  0E19                     	;# 
  1419  0E1A                     	;# 
  1420  0E1B                     	;# 
  1421  0E1C                     	;# 
  1422  0E1D                     	;# 
  1423  0E1E                     	;# 
  1424  0E1F                     	;# 
  1425  0E20                     	;# 
  1426  0E21                     	;# 
  1427  0E22                     	;# 
  1428  0E23                     	;# 
  1429  0E24                     	;# 
  1430  0E25                     	;# 
  1431  0E26                     	;# 
  1432  0E27                     	;# 
  1433  0E28                     	;# 
  1434  0E29                     	;# 
  1435  0E2A                     	;# 
  1436  0E2B                     	;# 
  1437  0E2C                     	;# 
  1438  0E2D                     	;# 
  1439  0E2E                     	;# 
  1440  0E90                     	;# 
  1441  0E91                     	;# 
  1442  0E92                     	;# 
  1443  0E94                     	;# 
  1444  0E95                     	;# 
  1445  0E9C                     	;# 
  1446  0E9D                     	;# 
  1447  0E9E                     	;# 
  1448  0E9F                     	;# 
  1449  0EA0                     	;# 
  1450  0EA1                     	;# 
  1451  0EA2                     	;# 
  1452  0EA3                     	;# 
  1453  0EA4                     	;# 
  1454  0EA5                     	;# 
  1455  0EA6                     	;# 
  1456  0EA7                     	;# 
  1457  0F0F                     	;# 
  1458  0F10                     	;# 
  1459  0F11                     	;# 
  1460  0F12                     	;# 
  1461  0F13                     	;# 
  1462  0F14                     	;# 
  1463  0F15                     	;# 
  1464  0F16                     	;# 
  1465  0F17                     	;# 
  1466  0F18                     	;# 
  1467  0F19                     	;# 
  1468  0F1A                     	;# 
  1469  0F1B                     	;# 
  1470  0F1C                     	;# 
  1471  0F1D                     	;# 
  1472  0F1E                     	;# 
  1473  0F1F                     	;# 
  1474  0F20                     	;# 
  1475  0F21                     	;# 
  1476  0F22                     	;# 
  1477  0F23                     	;# 
  1478  0F24                     	;# 
  1479  0F25                     	;# 
  1480  0F26                     	;# 
  1481  0F27                     	;# 
  1482  0F28                     	;# 
  1483  0F29                     	;# 
  1484  0F2A                     	;# 
  1485  0F2B                     	;# 
  1486  0F2C                     	;# 
  1487  0F2D                     	;# 
  1488  0F2E                     	;# 
  1489  0F2F                     	;# 
  1490  0F30                     	;# 
  1491  0F31                     	;# 
  1492  0F32                     	;# 
  1493  0F33                     	;# 
  1494  0F34                     	;# 
  1495  0F35                     	;# 
  1496  0F36                     	;# 
  1497  0F37                     	;# 
  1498  0FE4                     	;# 
  1499  0FE5                     	;# 
  1500  0FE6                     	;# 
  1501  0FE7                     	;# 
  1502  0FE8                     	;# 
  1503  0FE9                     	;# 
  1504  0FEA                     	;# 
  1505  0FEB                     	;# 
  1506  0FED                     	;# 
  1507  0FEE                     	;# 
  1508  0FEF                     	;# 
  1509  0000                     	;# 
  1510  0001                     	;# 
  1511  0002                     	;# 
  1512  0003                     	;# 
  1513  0004                     	;# 
  1514  0005                     	;# 
  1515  0006                     	;# 
  1516  0007                     	;# 
  1517  0008                     	;# 
  1518  0009                     	;# 
  1519  000A                     	;# 
  1520  000B                     	;# 
  1521  000C                     	;# 
  1522  000D                     	;# 
  1523  000E                     	;# 
  1524  0010                     	;# 
  1525  0011                     	;# 
  1526  0012                     	;# 
  1527  0013                     	;# 
  1528  0014                     	;# 
  1529  0015                     	;# 
  1530  0016                     	;# 
  1531  0016                     	;# 
  1532  0017                     	;# 
  1533  0018                     	;# 
  1534  0019                     	;# 
  1535  001A                     	;# 
  1536  001A                     	;# 
  1537  001B                     	;# 
  1538  001B                     	;# 
  1539  001C                     	;# 
  1540  001D                     	;# 
  1541  001E                     	;# 
  1542  001F                     	;# 
  1543  008C                     	;# 
  1544  008D                     	;# 
  1545  008E                     	;# 
  1546  0090                     	;# 
  1547  0091                     	;# 
  1548  0092                     	;# 
  1549  0093                     	;# 
  1550  0094                     	;# 
  1551  0095                     	;# 
  1552  0096                     	;# 
  1553  0098                     	;# 
  1554  0099                     	;# 
  1555  009A                     	;# 
  1556  009B                     	;# 
  1557  009B                     	;# 
  1558  009C                     	;# 
  1559  009D                     	;# 
  1560  009E                     	;# 
  1561  009F                     	;# 
  1562  010C                     	;# 
  1563  010D                     	;# 
  1564  010E                     	;# 
  1565  0111                     	;# 
  1566  0112                     	;# 
  1567  0113                     	;# 
  1568  0114                     	;# 
  1569  0115                     	;# 
  1570  0116                     	;# 
  1571  0117                     	;# 
  1572  0118                     	;# 
  1573  0119                     	;# 
  1574  011C                     	;# 
  1575  018C                     	;# 
  1576  018D                     	;# 
  1577  018E                     	;# 
  1578  0191                     	;# 
  1579  0191                     	;# 
  1580  0192                     	;# 
  1581  0193                     	;# 
  1582  0193                     	;# 
  1583  0194                     	;# 
  1584  0195                     	;# 
  1585  0196                     	;# 
  1586  0197                     	;# 
  1587  0199                     	;# 
  1588  0199                     	;# 
  1589  0199                     	;# 
  1590  019A                     	;# 
  1591  019A                     	;# 
  1592  019A                     	;# 
  1593  019B                     	;# 
  1594  019B                     	;# 
  1595  019B                     	;# 
  1596  019B                     	;# 
  1597  019B                     	;# 
  1598  019C                     	;# 
  1599  019C                     	;# 
  1600  019C                     	;# 
  1601  019D                     	;# 
  1602  019D                     	;# 
  1603  019D                     	;# 
  1604  019E                     	;# 
  1605  019E                     	;# 
  1606  019E                     	;# 
  1607  019F                     	;# 
  1608  019F                     	;# 
  1609  019F                     	;# 
  1610  019F                     	;# 
  1611  019F                     	;# 
  1612  020C                     	;# 
  1613  020D                     	;# 
  1614  020E                     	;# 
  1615  0211                     	;# 
  1616  0211                     	;# 
  1617  0212                     	;# 
  1618  0212                     	;# 
  1619  0213                     	;# 
  1620  0213                     	;# 
  1621  0214                     	;# 
  1622  0214                     	;# 
  1623  0215                     	;# 
  1624  0215                     	;# 
  1625  0215                     	;# 
  1626  0215                     	;# 
  1627  0216                     	;# 
  1628  0216                     	;# 
  1629  0217                     	;# 
  1630  0217                     	;# 
  1631  028C                     	;# 
  1632  028D                     	;# 
  1633  028E                     	;# 
  1634  0291                     	;# 
  1635  0291                     	;# 
  1636  0292                     	;# 
  1637  0293                     	;# 
  1638  0294                     	;# 
  1639  0298                     	;# 
  1640  0298                     	;# 
  1641  0299                     	;# 
  1642  029A                     	;# 
  1643  029B                     	;# 
  1644  029E                     	;# 
  1645  030C                     	;# 
  1646  030D                     	;# 
  1647  030E                     	;# 
  1648  038C                     	;# 
  1649  038D                     	;# 
  1650  038E                     	;# 
  1651  0391                     	;# 
  1652  0392                     	;# 
  1653  0393                     	;# 
  1654  0394                     	;# 
  1655  0395                     	;# 
  1656  0396                     	;# 
  1657  0397                     	;# 
  1658  0398                     	;# 
  1659  0399                     	;# 
  1660  040E                     	;# 
  1661  0413                     	;# 
  1662  0413                     	;# 
  1663  0414                     	;# 
  1664  0414                     	;# 
  1665  0415                     	;# 
  1666  0416                     	;# 
  1667  0417                     	;# 
  1668  0418                     	;# 
  1669  041A                     	;# 
  1670  041A                     	;# 
  1671  041B                     	;# 
  1672  041B                     	;# 
  1673  041C                     	;# 
  1674  041D                     	;# 
  1675  041E                     	;# 
  1676  041F                     	;# 
  1677  0493                     	;# 
  1678  0494                     	;# 
  1679  0495                     	;# 
  1680  0496                     	;# 
  1681  049A                     	;# 
  1682  049B                     	;# 
  1683  049C                     	;# 
  1684  049D                     	;# 
  1685  058C                     	;# 
  1686  058C                     	;# 
  1687  058D                     	;# 
  1688  058E                     	;# 
  1689  058E                     	;# 
  1690  058F                     	;# 
  1691  0590                     	;# 
  1692  0590                     	;# 
  1693  0591                     	;# 
  1694  0592                     	;# 
  1695  0592                     	;# 
  1696  0593                     	;# 
  1697  0594                     	;# 
  1698  0594                     	;# 
  1699  0595                     	;# 
  1700  0596                     	;# 
  1701  0596                     	;# 
  1702  0597                     	;# 
  1703  0598                     	;# 
  1704  0599                     	;# 
  1705  059A                     	;# 
  1706  059B                     	;# 
  1707  059B                     	;# 
  1708  059C                     	;# 
  1709  059D                     	;# 
  1710  060C                     	;# 
  1711  060C                     	;# 
  1712  060D                     	;# 
  1713  060E                     	;# 
  1714  060F                     	;# 
  1715  060F                     	;# 
  1716  0610                     	;# 
  1717  0611                     	;# 
  1718  0612                     	;# 
  1719  0613                     	;# 
  1720  0614                     	;# 
  1721  0617                     	;# 
  1722  0618                     	;# 
  1723  0619                     	;# 
  1724  061A                     	;# 
  1725  061B                     	;# 
  1726  061C                     	;# 
  1727  0691                     	;# 
  1728  0692                     	;# 
  1729  0693                     	;# 
  1730  0694                     	;# 
  1731  0695                     	;# 
  1732  0696                     	;# 
  1733  0697                     	;# 
  1734  0699                     	;# 
  1735  069A                     	;# 
  1736  0711                     	;# 
  1737  0712                     	;# 
  1738  0713                     	;# 
  1739  0714                     	;# 
  1740  0715                     	;# 
  1741  0718                     	;# 
  1742  0718                     	;# 
  1743  0719                     	;# 
  1744  071A                     	;# 
  1745  071A                     	;# 
  1746  071B                     	;# 
  1747  071C                     	;# 
  1748  071D                     	;# 
  1749  0791                     	;# 
  1750  0791                     	;# 
  1751  0792                     	;# 
  1752  0793                     	;# 
  1753  0793                     	;# 
  1754  0794                     	;# 
  1755  0795                     	;# 
  1756  0795                     	;# 
  1757  0796                     	;# 
  1758  0797                     	;# 
  1759  0797                     	;# 
  1760  0798                     	;# 
  1761  0799                     	;# 
  1762  079A                     	;# 
  1763  080C                     	;# 
  1764  080C                     	;# 
  1765  080D                     	;# 
  1766  080E                     	;# 
  1767  080E                     	;# 
  1768  080F                     	;# 
  1769  0810                     	;# 
  1770  0810                     	;# 
  1771  0811                     	;# 
  1772  0812                     	;# 
  1773  0812                     	;# 
  1774  0813                     	;# 
  1775  0814                     	;# 
  1776  0815                     	;# 
  1777  0816                     	;# 
  1778  0817                     	;# 
  1779  0818                     	;# 
  1780  0819                     	;# 
  1781  081A                     	;# 
  1782  081A                     	;# 
  1783  081B                     	;# 
  1784  081C                     	;# 
  1785  081C                     	;# 
  1786  081D                     	;# 
  1787  088C                     	;# 
  1788  088D                     	;# 
  1789  088E                     	;# 
  1790  088F                     	;# 
  1791  088F                     	;# 
  1792  0890                     	;# 
  1793  0891                     	;# 
  1794  0892                     	;# 
  1795  0893                     	;# 
  1796  0893                     	;# 
  1797  0894                     	;# 
  1798  0895                     	;# 
  1799  0896                     	;# 
  1800  0897                     	;# 
  1801  0897                     	;# 
  1802  0898                     	;# 
  1803  0899                     	;# 
  1804  0D8C                     	;# 
  1805  0D8C                     	;# 
  1806  0D8D                     	;# 
  1807  0D8E                     	;# 
  1808  0D8F                     	;# 
  1809  0D8F                     	;# 
  1810  0D90                     	;# 
  1811  0D91                     	;# 
  1812  0D92                     	;# 
  1813  0D92                     	;# 
  1814  0D93                     	;# 
  1815  0D94                     	;# 
  1816  0D95                     	;# 
  1817  0D95                     	;# 
  1818  0D96                     	;# 
  1819  0D97                     	;# 
  1820  0D98                     	;# 
  1821  0D99                     	;# 
  1822  0D9A                     	;# 
  1823  0D9B                     	;# 
  1824  0D9C                     	;# 
  1825  0D9D                     	;# 
  1826  0D9E                     	;# 
  1827  0D9E                     	;# 
  1828  0D9F                     	;# 
  1829  0DA0                     	;# 
  1830  0DA1                     	;# 
  1831  0DA1                     	;# 
  1832  0DA2                     	;# 
  1833  0DA3                     	;# 
  1834  0DA4                     	;# 
  1835  0DA4                     	;# 
  1836  0DA5                     	;# 
  1837  0DA6                     	;# 
  1838  0DA7                     	;# 
  1839  0DA7                     	;# 
  1840  0DA8                     	;# 
  1841  0DA9                     	;# 
  1842  0DAA                     	;# 
  1843  0DAB                     	;# 
  1844  0DAC                     	;# 
  1845  0DAD                     	;# 
  1846  0DAE                     	;# 
  1847  0DAF                     	;# 
  1848  0E0F                     	;# 
  1849  0E10                     	;# 
  1850  0E11                     	;# 
  1851  0E12                     	;# 
  1852  0E13                     	;# 
  1853  0E14                     	;# 
  1854  0E15                     	;# 
  1855  0E16                     	;# 
  1856  0E17                     	;# 
  1857  0E18                     	;# 
  1858  0E19                     	;# 
  1859  0E1A                     	;# 
  1860  0E1B                     	;# 
  1861  0E1C                     	;# 
  1862  0E1D                     	;# 
  1863  0E1E                     	;# 
  1864  0E1F                     	;# 
  1865  0E20                     	;# 
  1866  0E21                     	;# 
  1867  0E22                     	;# 
  1868  0E23                     	;# 
  1869  0E24                     	;# 
  1870  0E25                     	;# 
  1871  0E26                     	;# 
  1872  0E27                     	;# 
  1873  0E28                     	;# 
  1874  0E29                     	;# 
  1875  0E2A                     	;# 
  1876  0E2B                     	;# 
  1877  0E2C                     	;# 
  1878  0E2D                     	;# 
  1879  0E2E                     	;# 
  1880  0E90                     	;# 
  1881  0E91                     	;# 
  1882  0E92                     	;# 
  1883  0E94                     	;# 
  1884  0E95                     	;# 
  1885  0E9C                     	;# 
  1886  0E9D                     	;# 
  1887  0E9E                     	;# 
  1888  0E9F                     	;# 
  1889  0EA0                     	;# 
  1890  0EA1                     	;# 
  1891  0EA2                     	;# 
  1892  0EA3                     	;# 
  1893  0EA4                     	;# 
  1894  0EA5                     	;# 
  1895  0EA6                     	;# 
  1896  0EA7                     	;# 
  1897  0F0F                     	;# 
  1898  0F10                     	;# 
  1899  0F11                     	;# 
  1900  0F12                     	;# 
  1901  0F13                     	;# 
  1902  0F14                     	;# 
  1903  0F15                     	;# 
  1904  0F16                     	;# 
  1905  0F17                     	;# 
  1906  0F18                     	;# 
  1907  0F19                     	;# 
  1908  0F1A                     	;# 
  1909  0F1B                     	;# 
  1910  0F1C                     	;# 
  1911  0F1D                     	;# 
  1912  0F1E                     	;# 
  1913  0F1F                     	;# 
  1914  0F20                     	;# 
  1915  0F21                     	;# 
  1916  0F22                     	;# 
  1917  0F23                     	;# 
  1918  0F24                     	;# 
  1919  0F25                     	;# 
  1920  0F26                     	;# 
  1921  0F27                     	;# 
  1922  0F28                     	;# 
  1923  0F29                     	;# 
  1924  0F2A                     	;# 
  1925  0F2B                     	;# 
  1926  0F2C                     	;# 
  1927  0F2D                     	;# 
  1928  0F2E                     	;# 
  1929  0F2F                     	;# 
  1930  0F30                     	;# 
  1931  0F31                     	;# 
  1932  0F32                     	;# 
  1933  0F33                     	;# 
  1934  0F34                     	;# 
  1935  0F35                     	;# 
  1936  0F36                     	;# 
  1937  0F37                     	;# 
  1938  0FE4                     	;# 
  1939  0FE5                     	;# 
  1940  0FE6                     	;# 
  1941  0FE7                     	;# 
  1942  0FE8                     	;# 
  1943  0FE9                     	;# 
  1944  0FEA                     	;# 
  1945  0FEB                     	;# 
  1946  0FED                     	;# 
  1947  0FEE                     	;# 
  1948  0FEF                     	;# 
  1949  0000                     	;# 
  1950  0001                     	;# 
  1951  0002                     	;# 
  1952  0003                     	;# 
  1953  0004                     	;# 
  1954  0005                     	;# 
  1955  0006                     	;# 
  1956  0007                     	;# 
  1957  0008                     	;# 
  1958  0009                     	;# 
  1959  000A                     	;# 
  1960  000B                     	;# 
  1961  000C                     	;# 
  1962  000D                     	;# 
  1963  000E                     	;# 
  1964  0010                     	;# 
  1965  0011                     	;# 
  1966  0012                     	;# 
  1967  0013                     	;# 
  1968  0014                     	;# 
  1969  0015                     	;# 
  1970  0016                     	;# 
  1971  0016                     	;# 
  1972  0017                     	;# 
  1973  0018                     	;# 
  1974  0019                     	;# 
  1975  001A                     	;# 
  1976  001A                     	;# 
  1977  001B                     	;# 
  1978  001B                     	;# 
  1979  001C                     	;# 
  1980  001D                     	;# 
  1981  001E                     	;# 
  1982  001F                     	;# 
  1983  008C                     	;# 
  1984  008D                     	;# 
  1985  008E                     	;# 
  1986  0090                     	;# 
  1987  0091                     	;# 
  1988  0092                     	;# 
  1989  0093                     	;# 
  1990  0094                     	;# 
  1991  0095                     	;# 
  1992  0096                     	;# 
  1993  0098                     	;# 
  1994  0099                     	;# 
  1995  009A                     	;# 
  1996  009B                     	;# 
  1997  009B                     	;# 
  1998  009C                     	;# 
  1999  009D                     	;# 
  2000  009E                     	;# 
  2001  009F                     	;# 
  2002  010C                     	;# 
  2003  010D                     	;# 
  2004  010E                     	;# 
  2005  0111                     	;# 
  2006  0112                     	;# 
  2007  0113                     	;# 
  2008  0114                     	;# 
  2009  0115                     	;# 
  2010  0116                     	;# 
  2011  0117                     	;# 
  2012  0118                     	;# 
  2013  0119                     	;# 
  2014  011C                     	;# 
  2015  018C                     	;# 
  2016  018D                     	;# 
  2017  018E                     	;# 
  2018  0191                     	;# 
  2019  0191                     	;# 
  2020  0192                     	;# 
  2021  0193                     	;# 
  2022  0193                     	;# 
  2023  0194                     	;# 
  2024  0195                     	;# 
  2025  0196                     	;# 
  2026  0197                     	;# 
  2027  0199                     	;# 
  2028  0199                     	;# 
  2029  0199                     	;# 
  2030  019A                     	;# 
  2031  019A                     	;# 
  2032  019A                     	;# 
  2033  019B                     	;# 
  2034  019B                     	;# 
  2035  019B                     	;# 
  2036  019B                     	;# 
  2037  019B                     	;# 
  2038  019C                     	;# 
  2039  019C                     	;# 
  2040  019C                     	;# 
  2041  019D                     	;# 
  2042  019D                     	;# 
  2043  019D                     	;# 
  2044  019E                     	;# 
  2045  019E                     	;# 
  2046  019E                     	;# 
  2047  019F                     	;# 
  2048  019F                     	;# 
  2049  019F                     	;# 
  2050  019F                     	;# 
  2051  019F                     	;# 
  2052  020C                     	;# 
  2053  020D                     	;# 
  2054  020E                     	;# 
  2055  0211                     	;# 
  2056  0211                     	;# 
  2057  0212                     	;# 
  2058  0212                     	;# 
  2059  0213                     	;# 
  2060  0213                     	;# 
  2061  0214                     	;# 
  2062  0214                     	;# 
  2063  0215                     	;# 
  2064  0215                     	;# 
  2065  0215                     	;# 
  2066  0215                     	;# 
  2067  0216                     	;# 
  2068  0216                     	;# 
  2069  0217                     	;# 
  2070  0217                     	;# 
  2071  028C                     	;# 
  2072  028D                     	;# 
  2073  028E                     	;# 
  2074  0291                     	;# 
  2075  0291                     	;# 
  2076  0292                     	;# 
  2077  0293                     	;# 
  2078  0294                     	;# 
  2079  0298                     	;# 
  2080  0298                     	;# 
  2081  0299                     	;# 
  2082  029A                     	;# 
  2083  029B                     	;# 
  2084  029E                     	;# 
  2085  030C                     	;# 
  2086  030D                     	;# 
  2087  030E                     	;# 
  2088  038C                     	;# 
  2089  038D                     	;# 
  2090  038E                     	;# 
  2091  0391                     	;# 
  2092  0392                     	;# 
  2093  0393                     	;# 
  2094  0394                     	;# 
  2095  0395                     	;# 
  2096  0396                     	;# 
  2097  0397                     	;# 
  2098  0398                     	;# 
  2099  0399                     	;# 
  2100  040E                     	;# 
  2101  0413                     	;# 
  2102  0413                     	;# 
  2103  0414                     	;# 
  2104  0414                     	;# 
  2105  0415                     	;# 
  2106  0416                     	;# 
  2107  0417                     	;# 
  2108  0418                     	;# 
  2109  041A                     	;# 
  2110  041A                     	;# 
  2111  041B                     	;# 
  2112  041B                     	;# 
  2113  041C                     	;# 
  2114  041D                     	;# 
  2115  041E                     	;# 
  2116  041F                     	;# 
  2117  0493                     	;# 
  2118  0494                     	;# 
  2119  0495                     	;# 
  2120  0496                     	;# 
  2121  049A                     	;# 
  2122  049B                     	;# 
  2123  049C                     	;# 
  2124  049D                     	;# 
  2125  058C                     	;# 
  2126  058C                     	;# 
  2127  058D                     	;# 
  2128  058E                     	;# 
  2129  058E                     	;# 
  2130  058F                     	;# 
  2131  0590                     	;# 
  2132  0590                     	;# 
  2133  0591                     	;# 
  2134  0592                     	;# 
  2135  0592                     	;# 
  2136  0593                     	;# 
  2137  0594                     	;# 
  2138  0594                     	;# 
  2139  0595                     	;# 
  2140  0596                     	;# 
  2141  0596                     	;# 
  2142  0597                     	;# 
  2143  0598                     	;# 
  2144  0599                     	;# 
  2145  059A                     	;# 
  2146  059B                     	;# 
  2147  059B                     	;# 
  2148  059C                     	;# 
  2149  059D                     	;# 
  2150  060C                     	;# 
  2151  060C                     	;# 
  2152  060D                     	;# 
  2153  060E                     	;# 
  2154  060F                     	;# 
  2155  060F                     	;# 
  2156  0610                     	;# 
  2157  0611                     	;# 
  2158  0612                     	;# 
  2159  0613                     	;# 
  2160  0614                     	;# 
  2161  0617                     	;# 
  2162  0618                     	;# 
  2163  0619                     	;# 
  2164  061A                     	;# 
  2165  061B                     	;# 
  2166  061C                     	;# 
  2167  0691                     	;# 
  2168  0692                     	;# 
  2169  0693                     	;# 
  2170  0694                     	;# 
  2171  0695                     	;# 
  2172  0696                     	;# 
  2173  0697                     	;# 
  2174  0699                     	;# 
  2175  069A                     	;# 
  2176  0711                     	;# 
  2177  0712                     	;# 
  2178  0713                     	;# 
  2179  0714                     	;# 
  2180  0715                     	;# 
  2181  0718                     	;# 
  2182  0718                     	;# 
  2183  0719                     	;# 
  2184  071A                     	;# 
  2185  071A                     	;# 
  2186  071B                     	;# 
  2187  071C                     	;# 
  2188  071D                     	;# 
  2189  0791                     	;# 
  2190  0791                     	;# 
  2191  0792                     	;# 
  2192  0793                     	;# 
  2193  0793                     	;# 
  2194  0794                     	;# 
  2195  0795                     	;# 
  2196  0795                     	;# 
  2197  0796                     	;# 
  2198  0797                     	;# 
  2199  0797                     	;# 
  2200  0798                     	;# 
  2201  0799                     	;# 
  2202  079A                     	;# 
  2203  080C                     	;# 
  2204  080C                     	;# 
  2205  080D                     	;# 
  2206  080E                     	;# 
  2207  080E                     	;# 
  2208  080F                     	;# 
  2209  0810                     	;# 
  2210  0810                     	;# 
  2211  0811                     	;# 
  2212  0812                     	;# 
  2213  0812                     	;# 
  2214  0813                     	;# 
  2215  0814                     	;# 
  2216  0815                     	;# 
  2217  0816                     	;# 
  2218  0817                     	;# 
  2219  0818                     	;# 
  2220  0819                     	;# 
  2221  081A                     	;# 
  2222  081A                     	;# 
  2223  081B                     	;# 
  2224  081C                     	;# 
  2225  081C                     	;# 
  2226  081D                     	;# 
  2227  088C                     	;# 
  2228  088D                     	;# 
  2229  088E                     	;# 
  2230  088F                     	;# 
  2231  088F                     	;# 
  2232  0890                     	;# 
  2233  0891                     	;# 
  2234  0892                     	;# 
  2235  0893                     	;# 
  2236  0893                     	;# 
  2237  0894                     	;# 
  2238  0895                     	;# 
  2239  0896                     	;# 
  2240  0897                     	;# 
  2241  0897                     	;# 
  2242  0898                     	;# 
  2243  0899                     	;# 
  2244  0D8C                     	;# 
  2245  0D8C                     	;# 
  2246  0D8D                     	;# 
  2247  0D8E                     	;# 
  2248  0D8F                     	;# 
  2249  0D8F                     	;# 
  2250  0D90                     	;# 
  2251  0D91                     	;# 
  2252  0D92                     	;# 
  2253  0D92                     	;# 
  2254  0D93                     	;# 
  2255  0D94                     	;# 
  2256  0D95                     	;# 
  2257  0D95                     	;# 
  2258  0D96                     	;# 
  2259  0D97                     	;# 
  2260  0D98                     	;# 
  2261  0D99                     	;# 
  2262  0D9A                     	;# 
  2263  0D9B                     	;# 
  2264  0D9C                     	;# 
  2265  0D9D                     	;# 
  2266  0D9E                     	;# 
  2267  0D9E                     	;# 
  2268  0D9F                     	;# 
  2269  0DA0                     	;# 
  2270  0DA1                     	;# 
  2271  0DA1                     	;# 
  2272  0DA2                     	;# 
  2273  0DA3                     	;# 
  2274  0DA4                     	;# 
  2275  0DA4                     	;# 
  2276  0DA5                     	;# 
  2277  0DA6                     	;# 
  2278  0DA7                     	;# 
  2279  0DA7                     	;# 
  2280  0DA8                     	;# 
  2281  0DA9                     	;# 
  2282  0DAA                     	;# 
  2283  0DAB                     	;# 
  2284  0DAC                     	;# 
  2285  0DAD                     	;# 
  2286  0DAE                     	;# 
  2287  0DAF                     	;# 
  2288  0E0F                     	;# 
  2289  0E10                     	;# 
  2290  0E11                     	;# 
  2291  0E12                     	;# 
  2292  0E13                     	;# 
  2293  0E14                     	;# 
  2294  0E15                     	;# 
  2295  0E16                     	;# 
  2296  0E17                     	;# 
  2297  0E18                     	;# 
  2298  0E19                     	;# 
  2299  0E1A                     	;# 
  2300  0E1B                     	;# 
  2301  0E1C                     	;# 
  2302  0E1D                     	;# 
  2303  0E1E                     	;# 
  2304  0E1F                     	;# 
  2305  0E20                     	;# 
  2306  0E21                     	;# 
  2307  0E22                     	;# 
  2308  0E23                     	;# 
  2309  0E24                     	;# 
  2310  0E25                     	;# 
  2311  0E26                     	;# 
  2312  0E27                     	;# 
  2313  0E28                     	;# 
  2314  0E29                     	;# 
  2315  0E2A                     	;# 
  2316  0E2B                     	;# 
  2317  0E2C                     	;# 
  2318  0E2D                     	;# 
  2319  0E2E                     	;# 
  2320  0E90                     	;# 
  2321  0E91                     	;# 
  2322  0E92                     	;# 
  2323  0E94                     	;# 
  2324  0E95                     	;# 
  2325  0E9C                     	;# 
  2326  0E9D                     	;# 
  2327  0E9E                     	;# 
  2328  0E9F                     	;# 
  2329  0EA0                     	;# 
  2330  0EA1                     	;# 
  2331  0EA2                     	;# 
  2332  0EA3                     	;# 
  2333  0EA4                     	;# 
  2334  0EA5                     	;# 
  2335  0EA6                     	;# 
  2336  0EA7                     	;# 
  2337  0F0F                     	;# 
  2338  0F10                     	;# 
  2339  0F11                     	;# 
  2340  0F12                     	;# 
  2341  0F13                     	;# 
  2342  0F14                     	;# 
  2343  0F15                     	;# 
  2344  0F16                     	;# 
  2345  0F17                     	;# 
  2346  0F18                     	;# 
  2347  0F19                     	;# 
  2348  0F1A                     	;# 
  2349  0F1B                     	;# 
  2350  0F1C                     	;# 
  2351  0F1D                     	;# 
  2352  0F1E                     	;# 
  2353  0F1F                     	;# 
  2354  0F20                     	;# 
  2355  0F21                     	;# 
  2356  0F22                     	;# 
  2357  0F23                     	;# 
  2358  0F24                     	;# 
  2359  0F25                     	;# 
  2360  0F26                     	;# 
  2361  0F27                     	;# 
  2362  0F28                     	;# 
  2363  0F29                     	;# 
  2364  0F2A                     	;# 
  2365  0F2B                     	;# 
  2366  0F2C                     	;# 
  2367  0F2D                     	;# 
  2368  0F2E                     	;# 
  2369  0F2F                     	;# 
  2370  0F30                     	;# 
  2371  0F31                     	;# 
  2372  0F32                     	;# 
  2373  0F33                     	;# 
  2374  0F34                     	;# 
  2375  0F35                     	;# 
  2376  0F36                     	;# 
  2377  0F37                     	;# 
  2378  0FE4                     	;# 
  2379  0FE5                     	;# 
  2380  0FE6                     	;# 
  2381  0FE7                     	;# 
  2382  0FE8                     	;# 
  2383  0FE9                     	;# 
  2384  0FEA                     	;# 
  2385  0FEB                     	;# 
  2386  0FED                     	;# 
  2387  0FEE                     	;# 
  2388  0FEF                     	;# 
  2389  0000                     	;# 
  2390  0001                     	;# 
  2391  0002                     	;# 
  2392  0003                     	;# 
  2393  0004                     	;# 
  2394  0005                     	;# 
  2395  0006                     	;# 
  2396  0007                     	;# 
  2397  0008                     	;# 
  2398  0009                     	;# 
  2399  000A                     	;# 
  2400  000B                     	;# 
  2401  000C                     	;# 
  2402  000D                     	;# 
  2403  000E                     	;# 
  2404  0010                     	;# 
  2405  0011                     	;# 
  2406  0012                     	;# 
  2407  0013                     	;# 
  2408  0014                     	;# 
  2409  0015                     	;# 
  2410  0016                     	;# 
  2411  0016                     	;# 
  2412  0017                     	;# 
  2413  0018                     	;# 
  2414  0019                     	;# 
  2415  001A                     	;# 
  2416  001A                     	;# 
  2417  001B                     	;# 
  2418  001B                     	;# 
  2419  001C                     	;# 
  2420  001D                     	;# 
  2421  001E                     	;# 
  2422  001F                     	;# 
  2423  008C                     	;# 
  2424  008D                     	;# 
  2425  008E                     	;# 
  2426  0090                     	;# 
  2427  0091                     	;# 
  2428  0092                     	;# 
  2429  0093                     	;# 
  2430  0094                     	;# 
  2431  0095                     	;# 
  2432  0096                     	;# 
  2433  0098                     	;# 
  2434  0099                     	;# 
  2435  009A                     	;# 
  2436  009B                     	;# 
  2437  009B                     	;# 
  2438  009C                     	;# 
  2439  009D                     	;# 
  2440  009E                     	;# 
  2441  009F                     	;# 
  2442  010C                     	;# 
  2443  010D                     	;# 
  2444  010E                     	;# 
  2445  0111                     	;# 
  2446  0112                     	;# 
  2447  0113                     	;# 
  2448  0114                     	;# 
  2449  0115                     	;# 
  2450  0116                     	;# 
  2451  0117                     	;# 
  2452  0118                     	;# 
  2453  0119                     	;# 
  2454  011C                     	;# 
  2455  018C                     	;# 
  2456  018D                     	;# 
  2457  018E                     	;# 
  2458  0191                     	;# 
  2459  0191                     	;# 
  2460  0192                     	;# 
  2461  0193                     	;# 
  2462  0193                     	;# 
  2463  0194                     	;# 
  2464  0195                     	;# 
  2465  0196                     	;# 
  2466  0197                     	;# 
  2467  0199                     	;# 
  2468  0199                     	;# 
  2469  0199                     	;# 
  2470  019A                     	;# 
  2471  019A                     	;# 
  2472  019A                     	;# 
  2473  019B                     	;# 
  2474  019B                     	;# 
  2475  019B                     	;# 
  2476  019B                     	;# 
  2477  019B                     	;# 
  2478  019C                     	;# 
  2479  019C                     	;# 
  2480  019C                     	;# 
  2481  019D                     	;# 
  2482  019D                     	;# 
  2483  019D                     	;# 
  2484  019E                     	;# 
  2485  019E                     	;# 
  2486  019E                     	;# 
  2487  019F                     	;# 
  2488  019F                     	;# 
  2489  019F                     	;# 
  2490  019F                     	;# 
  2491  019F                     	;# 
  2492  020C                     	;# 
  2493  020D                     	;# 
  2494  020E                     	;# 
  2495  0211                     	;# 
  2496  0211                     	;# 
  2497  0212                     	;# 
  2498  0212                     	;# 
  2499  0213                     	;# 
  2500  0213                     	;# 
  2501  0214                     	;# 
  2502  0214                     	;# 
  2503  0215                     	;# 
  2504  0215                     	;# 
  2505  0215                     	;# 
  2506  0215                     	;# 
  2507  0216                     	;# 
  2508  0216                     	;# 
  2509  0217                     	;# 
  2510  0217                     	;# 
  2511  028C                     	;# 
  2512  028D                     	;# 
  2513  028E                     	;# 
  2514  0291                     	;# 
  2515  0291                     	;# 
  2516  0292                     	;# 
  2517  0293                     	;# 
  2518  0294                     	;# 
  2519  0298                     	;# 
  2520  0298                     	;# 
  2521  0299                     	;# 
  2522  029A                     	;# 
  2523  029B                     	;# 
  2524  029E                     	;# 
  2525  030C                     	;# 
  2526  030D                     	;# 
  2527  030E                     	;# 
  2528  038C                     	;# 
  2529  038D                     	;# 
  2530  038E                     	;# 
  2531  0391                     	;# 
  2532  0392                     	;# 
  2533  0393                     	;# 
  2534  0394                     	;# 
  2535  0395                     	;# 
  2536  0396                     	;# 
  2537  0397                     	;# 
  2538  0398                     	;# 
  2539  0399                     	;# 
  2540  040E                     	;# 
  2541  0413                     	;# 
  2542  0413                     	;# 
  2543  0414                     	;# 
  2544  0414                     	;# 
  2545  0415                     	;# 
  2546  0416                     	;# 
  2547  0417                     	;# 
  2548  0418                     	;# 
  2549  041A                     	;# 
  2550  041A                     	;# 
  2551  041B                     	;# 
  2552  041B                     	;# 
  2553  041C                     	;# 
  2554  041D                     	;# 
  2555  041E                     	;# 
  2556  041F                     	;# 
  2557  0493                     	;# 
  2558  0494                     	;# 
  2559  0495                     	;# 
  2560  0496                     	;# 
  2561  049A                     	;# 
  2562  049B                     	;# 
  2563  049C                     	;# 
  2564  049D                     	;# 
  2565  058C                     	;# 
  2566  058C                     	;# 
  2567  058D                     	;# 
  2568  058E                     	;# 
  2569  058E                     	;# 
  2570  058F                     	;# 
  2571  0590                     	;# 
  2572  0590                     	;# 
  2573  0591                     	;# 
  2574  0592                     	;# 
  2575  0592                     	;# 
  2576  0593                     	;# 
  2577  0594                     	;# 
  2578  0594                     	;# 
  2579  0595                     	;# 
  2580  0596                     	;# 
  2581  0596                     	;# 
  2582  0597                     	;# 
  2583  0598                     	;# 
  2584  0599                     	;# 
  2585  059A                     	;# 
  2586  059B                     	;# 
  2587  059B                     	;# 
  2588  059C                     	;# 
  2589  059D                     	;# 
  2590  060C                     	;# 
  2591  060C                     	;# 
  2592  060D                     	;# 
  2593  060E                     	;# 
  2594  060F                     	;# 
  2595  060F                     	;# 
  2596  0610                     	;# 
  2597  0611                     	;# 
  2598  0612                     	;# 
  2599  0613                     	;# 
  2600  0614                     	;# 
  2601  0617                     	;# 
  2602  0618                     	;# 
  2603  0619                     	;# 
  2604  061A                     	;# 
  2605  061B                     	;# 
  2606  061C                     	;# 
  2607  0691                     	;# 
  2608  0692                     	;# 
  2609  0693                     	;# 
  2610  0694                     	;# 
  2611  0695                     	;# 
  2612  0696                     	;# 
  2613  0697                     	;# 
  2614  0699                     	;# 
  2615  069A                     	;# 
  2616  0711                     	;# 
  2617  0712                     	;# 
  2618  0713                     	;# 
  2619  0714                     	;# 
  2620  0715                     	;# 
  2621  0718                     	;# 
  2622  0718                     	;# 
  2623  0719                     	;# 
  2624  071A                     	;# 
  2625  071A                     	;# 
  2626  071B                     	;# 
  2627  071C                     	;# 
  2628  071D                     	;# 
  2629  0791                     	;# 
  2630  0791                     	;# 
  2631  0792                     	;# 
  2632  0793                     	;# 
  2633  0793                     	;# 
  2634  0794                     	;# 
  2635  0795                     	;# 
  2636  0795                     	;# 
  2637  0796                     	;# 
  2638  0797                     	;# 
  2639  0797                     	;# 
  2640  0798                     	;# 
  2641  0799                     	;# 
  2642  079A                     	;# 
  2643  080C                     	;# 
  2644  080C                     	;# 
  2645  080D                     	;# 
  2646  080E                     	;# 
  2647  080E                     	;# 
  2648  080F                     	;# 
  2649  0810                     	;# 
  2650  0810                     	;# 
  2651  0811                     	;# 
  2652  0812                     	;# 
  2653  0812                     	;# 
  2654  0813                     	;# 
  2655  0814                     	;# 
  2656  0815                     	;# 
  2657  0816                     	;# 
  2658  0817                     	;# 
  2659  0818                     	;# 
  2660  0819                     	;# 
  2661  081A                     	;# 
  2662  081A                     	;# 
  2663  081B                     	;# 
  2664  081C                     	;# 
  2665  081C                     	;# 
  2666  081D                     	;# 
  2667  088C                     	;# 
  2668  088D                     	;# 
  2669  088E                     	;# 
  2670  088F                     	;# 
  2671  088F                     	;# 
  2672  0890                     	;# 
  2673  0891                     	;# 
  2674  0892                     	;# 
  2675  0893                     	;# 
  2676  0893                     	;# 
  2677  0894                     	;# 
  2678  0895                     	;# 
  2679  0896                     	;# 
  2680  0897                     	;# 
  2681  0897                     	;# 
  2682  0898                     	;# 
  2683  0899                     	;# 
  2684  0D8C                     	;# 
  2685  0D8C                     	;# 
  2686  0D8D                     	;# 
  2687  0D8E                     	;# 
  2688  0D8F                     	;# 
  2689  0D8F                     	;# 
  2690  0D90                     	;# 
  2691  0D91                     	;# 
  2692  0D92                     	;# 
  2693  0D92                     	;# 
  2694  0D93                     	;# 
  2695  0D94                     	;# 
  2696  0D95                     	;# 
  2697  0D95                     	;# 
  2698  0D96                     	;# 
  2699  0D97                     	;# 
  2700  0D98                     	;# 
  2701  0D99                     	;# 
  2702  0D9A                     	;# 
  2703  0D9B                     	;# 
  2704  0D9C                     	;# 
  2705  0D9D                     	;# 
  2706  0D9E                     	;# 
  2707  0D9E                     	;# 
  2708  0D9F                     	;# 
  2709  0DA0                     	;# 
  2710  0DA1                     	;# 
  2711  0DA1                     	;# 
  2712  0DA2                     	;# 
  2713  0DA3                     	;# 
  2714  0DA4                     	;# 
  2715  0DA4                     	;# 
  2716  0DA5                     	;# 
  2717  0DA6                     	;# 
  2718  0DA7                     	;# 
  2719  0DA7                     	;# 
  2720  0DA8                     	;# 
  2721  0DA9                     	;# 
  2722  0DAA                     	;# 
  2723  0DAB                     	;# 
  2724  0DAC                     	;# 
  2725  0DAD                     	;# 
  2726  0DAE                     	;# 
  2727  0DAF                     	;# 
  2728  0E0F                     	;# 
  2729  0E10                     	;# 
  2730  0E11                     	;# 
  2731  0E12                     	;# 
  2732  0E13                     	;# 
  2733  0E14                     	;# 
  2734  0E15                     	;# 
  2735  0E16                     	;# 
  2736  0E17                     	;# 
  2737  0E18                     	;# 
  2738  0E19                     	;# 
  2739  0E1A                     	;# 
  2740  0E1B                     	;# 
  2741  0E1C                     	;# 
  2742  0E1D                     	;# 
  2743  0E1E                     	;# 
  2744  0E1F                     	;# 
  2745  0E20                     	;# 
  2746  0E21                     	;# 
  2747  0E22                     	;# 
  2748  0E23                     	;# 
  2749  0E24                     	;# 
  2750  0E25                     	;# 
  2751  0E26                     	;# 
  2752  0E27                     	;# 
  2753  0E28                     	;# 
  2754  0E29                     	;# 
  2755  0E2A                     	;# 
  2756  0E2B                     	;# 
  2757  0E2C                     	;# 
  2758  0E2D                     	;# 
  2759  0E2E                     	;# 
  2760  0E90                     	;# 
  2761  0E91                     	;# 
  2762  0E92                     	;# 
  2763  0E94                     	;# 
  2764  0E95                     	;# 
  2765  0E9C                     	;# 
  2766  0E9D                     	;# 
  2767  0E9E                     	;# 
  2768  0E9F                     	;# 
  2769  0EA0                     	;# 
  2770  0EA1                     	;# 
  2771  0EA2                     	;# 
  2772  0EA3                     	;# 
  2773  0EA4                     	;# 
  2774  0EA5                     	;# 
  2775  0EA6                     	;# 
  2776  0EA7                     	;# 
  2777  0F0F                     	;# 
  2778  0F10                     	;# 
  2779  0F11                     	;# 
  2780  0F12                     	;# 
  2781  0F13                     	;# 
  2782  0F14                     	;# 
  2783  0F15                     	;# 
  2784  0F16                     	;# 
  2785  0F17                     	;# 
  2786  0F18                     	;# 
  2787  0F19                     	;# 
  2788  0F1A                     	;# 
  2789  0F1B                     	;# 
  2790  0F1C                     	;# 
  2791  0F1D                     	;# 
  2792  0F1E                     	;# 
  2793  0F1F                     	;# 
  2794  0F20                     	;# 
  2795  0F21                     	;# 
  2796  0F22                     	;# 
  2797  0F23                     	;# 
  2798  0F24                     	;# 
  2799  0F25                     	;# 
  2800  0F26                     	;# 
  2801  0F27                     	;# 
  2802  0F28                     	;# 
  2803  0F29                     	;# 
  2804  0F2A                     	;# 
  2805  0F2B                     	;# 
  2806  0F2C                     	;# 
  2807  0F2D                     	;# 
  2808  0F2E                     	;# 
  2809  0F2F                     	;# 
  2810  0F30                     	;# 
  2811  0F31                     	;# 
  2812  0F32                     	;# 
  2813  0F33                     	;# 
  2814  0F34                     	;# 
  2815  0F35                     	;# 
  2816  0F36                     	;# 
  2817  0F37                     	;# 
  2818  0FE4                     	;# 
  2819  0FE5                     	;# 
  2820  0FE6                     	;# 
  2821  0FE7                     	;# 
  2822  0FE8                     	;# 
  2823  0FE9                     	;# 
  2824  0FEA                     	;# 
  2825  0FEB                     	;# 
  2826  0FED                     	;# 
  2827  0FEE                     	;# 
  2828  0FEF                     	;# 
  2829  0000                     	;# 
  2830  0001                     	;# 
  2831  0002                     	;# 
  2832  0003                     	;# 
  2833  0004                     	;# 
  2834  0005                     	;# 
  2835  0006                     	;# 
  2836  0007                     	;# 
  2837  0008                     	;# 
  2838  0009                     	;# 
  2839  000A                     	;# 
  2840  000B                     	;# 
  2841  000C                     	;# 
  2842  000D                     	;# 
  2843  000E                     	;# 
  2844  0010                     	;# 
  2845  0011                     	;# 
  2846  0012                     	;# 
  2847  0013                     	;# 
  2848  0014                     	;# 
  2849  0015                     	;# 
  2850  0016                     	;# 
  2851  0016                     	;# 
  2852  0017                     	;# 
  2853  0018                     	;# 
  2854  0019                     	;# 
  2855  001A                     	;# 
  2856  001A                     	;# 
  2857  001B                     	;# 
  2858  001B                     	;# 
  2859  001C                     	;# 
  2860  001D                     	;# 
  2861  001E                     	;# 
  2862  001F                     	;# 
  2863  008C                     	;# 
  2864  008D                     	;# 
  2865  008E                     	;# 
  2866  0090                     	;# 
  2867  0091                     	;# 
  2868  0092                     	;# 
  2869  0093                     	;# 
  2870  0094                     	;# 
  2871  0095                     	;# 
  2872  0096                     	;# 
  2873  0098                     	;# 
  2874  0099                     	;# 
  2875  009A                     	;# 
  2876  009B                     	;# 
  2877  009B                     	;# 
  2878  009C                     	;# 
  2879  009D                     	;# 
  2880  009E                     	;# 
  2881  009F                     	;# 
  2882  010C                     	;# 
  2883  010D                     	;# 
  2884  010E                     	;# 
  2885  0111                     	;# 
  2886  0112                     	;# 
  2887  0113                     	;# 
  2888  0114                     	;# 
  2889  0115                     	;# 
  2890  0116                     	;# 
  2891  0117                     	;# 
  2892  0118                     	;# 
  2893  0119                     	;# 
  2894  011C                     	;# 
  2895  018C                     	;# 
  2896  018D                     	;# 
  2897  018E                     	;# 
  2898  0191                     	;# 
  2899  0191                     	;# 
  2900  0192                     	;# 
  2901  0193                     	;# 
  2902  0193                     	;# 
  2903  0194                     	;# 
  2904  0195                     	;# 
  2905  0196                     	;# 
  2906  0197                     	;# 
  2907  0199                     	;# 
  2908  0199                     	;# 
  2909  0199                     	;# 
  2910  019A                     	;# 
  2911  019A                     	;# 
  2912  019A                     	;# 
  2913  019B                     	;# 
  2914  019B                     	;# 
  2915  019B                     	;# 
  2916  019B                     	;# 
  2917  019B                     	;# 
  2918  019C                     	;# 
  2919  019C                     	;# 
  2920  019C                     	;# 
  2921  019D                     	;# 
  2922  019D                     	;# 
  2923  019D                     	;# 
  2924  019E                     	;# 
  2925  019E                     	;# 
  2926  019E                     	;# 
  2927  019F                     	;# 
  2928  019F                     	;# 
  2929  019F                     	;# 
  2930  019F                     	;# 
  2931  019F                     	;# 
  2932  020C                     	;# 
  2933  020D                     	;# 
  2934  020E                     	;# 
  2935  0211                     	;# 
  2936  0211                     	;# 
  2937  0212                     	;# 
  2938  0212                     	;# 
  2939  0213                     	;# 
  2940  0213                     	;# 
  2941  0214                     	;# 
  2942  0214                     	;# 
  2943  0215                     	;# 
  2944  0215                     	;# 
  2945  0215                     	;# 
  2946  0215                     	;# 
  2947  0216                     	;# 
  2948  0216                     	;# 
  2949  0217                     	;# 
  2950  0217                     	;# 
  2951  028C                     	;# 
  2952  028D                     	;# 
  2953  028E                     	;# 
  2954  0291                     	;# 
  2955  0291                     	;# 
  2956  0292                     	;# 
  2957  0293                     	;# 
  2958  0294                     	;# 
  2959  0298                     	;# 
  2960  0298                     	;# 
  2961  0299                     	;# 
  2962  029A                     	;# 
  2963  029B                     	;# 
  2964  029E                     	;# 
  2965  030C                     	;# 
  2966  030D                     	;# 
  2967  030E                     	;# 
  2968  038C                     	;# 
  2969  038D                     	;# 
  2970  038E                     	;# 
  2971  0391                     	;# 
  2972  0392                     	;# 
  2973  0393                     	;# 
  2974  0394                     	;# 
  2975  0395                     	;# 
  2976  0396                     	;# 
  2977  0397                     	;# 
  2978  0398                     	;# 
  2979  0399                     	;# 
  2980  040E                     	;# 
  2981  0413                     	;# 
  2982  0413                     	;# 
  2983  0414                     	;# 
  2984  0414                     	;# 
  2985  0415                     	;# 
  2986  0416                     	;# 
  2987  0417                     	;# 
  2988  0418                     	;# 
  2989  041A                     	;# 
  2990  041A                     	;# 
  2991  041B                     	;# 
  2992  041B                     	;# 
  2993  041C                     	;# 
  2994  041D                     	;# 
  2995  041E                     	;# 
  2996  041F                     	;# 
  2997  0493                     	;# 
  2998  0494                     	;# 
  2999  0495                     	;# 
  3000  0496                     	;# 
  3001  049A                     	;# 
  3002  049B                     	;# 
  3003  049C                     	;# 
  3004  049D                     	;# 
  3005  058C                     	;# 
  3006  058C                     	;# 
  3007  058D                     	;# 
  3008  058E                     	;# 
  3009  058E                     	;# 
  3010  058F                     	;# 
  3011  0590                     	;# 
  3012  0590                     	;# 
  3013  0591                     	;# 
  3014  0592                     	;# 
  3015  0592                     	;# 
  3016  0593                     	;# 
  3017  0594                     	;# 
  3018  0594                     	;# 
  3019  0595                     	;# 
  3020  0596                     	;# 
  3021  0596                     	;# 
  3022  0597                     	;# 
  3023  0598                     	;# 
  3024  0599                     	;# 
  3025  059A                     	;# 
  3026  059B                     	;# 
  3027  059B                     	;# 
  3028  059C                     	;# 
  3029  059D                     	;# 
  3030  060C                     	;# 
  3031  060C                     	;# 
  3032  060D                     	;# 
  3033  060E                     	;# 
  3034  060F                     	;# 
  3035  060F                     	;# 
  3036  0610                     	;# 
  3037  0611                     	;# 
  3038  0612                     	;# 
  3039  0613                     	;# 
  3040  0614                     	;# 
  3041  0617                     	;# 
  3042  0618                     	;# 
  3043  0619                     	;# 
  3044  061A                     	;# 
  3045  061B                     	;# 
  3046  061C                     	;# 
  3047  0691                     	;# 
  3048  0692                     	;# 
  3049  0693                     	;# 
  3050  0694                     	;# 
  3051  0695                     	;# 
  3052  0696                     	;# 
  3053  0697                     	;# 
  3054  0699                     	;# 
  3055  069A                     	;# 
  3056  0711                     	;# 
  3057  0712                     	;# 
  3058  0713                     	;# 
  3059  0714                     	;# 
  3060  0715                     	;# 
  3061  0718                     	;# 
  3062  0718                     	;# 
  3063  0719                     	;# 
  3064  071A                     	;# 
  3065  071A                     	;# 
  3066  071B                     	;# 
  3067  071C                     	;# 
  3068  071D                     	;# 
  3069  0791                     	;# 
  3070  0791                     	;# 
  3071  0792                     	;# 
  3072  0793                     	;# 
  3073  0793                     	;# 
  3074  0794                     	;# 
  3075  0795                     	;# 
  3076  0795                     	;# 
  3077  0796                     	;# 
  3078  0797                     	;# 
  3079  0797                     	;# 
  3080  0798                     	;# 
  3081  0799                     	;# 
  3082  079A                     	;# 
  3083  080C                     	;# 
  3084  080C                     	;# 
  3085  080D                     	;# 
  3086  080E                     	;# 
  3087  080E                     	;# 
  3088  080F                     	;# 
  3089  0810                     	;# 
  3090  0810                     	;# 
  3091  0811                     	;# 
  3092  0812                     	;# 
  3093  0812                     	;# 
  3094  0813                     	;# 
  3095  0814                     	;# 
  3096  0815                     	;# 
  3097  0816                     	;# 
  3098  0817                     	;# 
  3099  0818                     	;# 
  3100  0819                     	;# 
  3101  081A                     	;# 
  3102  081A                     	;# 
  3103  081B                     	;# 
  3104  081C                     	;# 
  3105  081C                     	;# 
  3106  081D                     	;# 
  3107  088C                     	;# 
  3108  088D                     	;# 
  3109  088E                     	;# 
  3110  088F                     	;# 
  3111  088F                     	;# 
  3112  0890                     	;# 
  3113  0891                     	;# 
  3114  0892                     	;# 
  3115  0893                     	;# 
  3116  0893                     	;# 
  3117  0894                     	;# 
  3118  0895                     	;# 
  3119  0896                     	;# 
  3120  0897                     	;# 
  3121  0897                     	;# 
  3122  0898                     	;# 
  3123  0899                     	;# 
  3124  0D8C                     	;# 
  3125  0D8C                     	;# 
  3126  0D8D                     	;# 
  3127  0D8E                     	;# 
  3128  0D8F                     	;# 
  3129  0D8F                     	;# 
  3130  0D90                     	;# 
  3131  0D91                     	;# 
  3132  0D92                     	;# 
  3133  0D92                     	;# 
  3134  0D93                     	;# 
  3135  0D94                     	;# 
  3136  0D95                     	;# 
  3137  0D95                     	;# 
  3138  0D96                     	;# 
  3139  0D97                     	;# 
  3140  0D98                     	;# 
  3141  0D99                     	;# 
  3142  0D9A                     	;# 
  3143  0D9B                     	;# 
  3144  0D9C                     	;# 
  3145  0D9D                     	;# 
  3146  0D9E                     	;# 
  3147  0D9E                     	;# 
  3148  0D9F                     	;# 
  3149  0DA0                     	;# 
  3150  0DA1                     	;# 
  3151  0DA1                     	;# 
  3152  0DA2                     	;# 
  3153  0DA3                     	;# 
  3154  0DA4                     	;# 
  3155  0DA4                     	;# 
  3156  0DA5                     	;# 
  3157  0DA6                     	;# 
  3158  0DA7                     	;# 
  3159  0DA7                     	;# 
  3160  0DA8                     	;# 
  3161  0DA9                     	;# 
  3162  0DAA                     	;# 
  3163  0DAB                     	;# 
  3164  0DAC                     	;# 
  3165  0DAD                     	;# 
  3166  0DAE                     	;# 
  3167  0DAF                     	;# 
  3168  0E0F                     	;# 
  3169  0E10                     	;# 
  3170  0E11                     	;# 
  3171  0E12                     	;# 
  3172  0E13                     	;# 
  3173  0E14                     	;# 
  3174  0E15                     	;# 
  3175  0E16                     	;# 
  3176  0E17                     	;# 
  3177  0E18                     	;# 
  3178  0E19                     	;# 
  3179  0E1A                     	;# 
  3180  0E1B                     	;# 
  3181  0E1C                     	;# 
  3182  0E1D                     	;# 
  3183  0E1E                     	;# 
  3184  0E1F                     	;# 
  3185  0E20                     	;# 
  3186  0E21                     	;# 
  3187  0E22                     	;# 
  3188  0E23                     	;# 
  3189  0E24                     	;# 
  3190  0E25                     	;# 
  3191  0E26                     	;# 
  3192  0E27                     	;# 
  3193  0E28                     	;# 
  3194  0E29                     	;# 
  3195  0E2A                     	;# 
  3196  0E2B                     	;# 
  3197  0E2C                     	;# 
  3198  0E2D                     	;# 
  3199  0E2E                     	;# 
  3200  0E90                     	;# 
  3201  0E91                     	;# 
  3202  0E92                     	;# 
  3203  0E94                     	;# 
  3204  0E95                     	;# 
  3205  0E9C                     	;# 
  3206  0E9D                     	;# 
  3207  0E9E                     	;# 
  3208  0E9F                     	;# 
  3209  0EA0                     	;# 
  3210  0EA1                     	;# 
  3211  0EA2                     	;# 
  3212  0EA3                     	;# 
  3213  0EA4                     	;# 
  3214  0EA5                     	;# 
  3215  0EA6                     	;# 
  3216  0EA7                     	;# 
  3217  0F0F                     	;# 
  3218  0F10                     	;# 
  3219  0F11                     	;# 
  3220  0F12                     	;# 
  3221  0F13                     	;# 
  3222  0F14                     	;# 
  3223  0F15                     	;# 
  3224  0F16                     	;# 
  3225  0F17                     	;# 
  3226  0F18                     	;# 
  3227  0F19                     	;# 
  3228  0F1A                     	;# 
  3229  0F1B                     	;# 
  3230  0F1C                     	;# 
  3231  0F1D                     	;# 
  3232  0F1E                     	;# 
  3233  0F1F                     	;# 
  3234  0F20                     	;# 
  3235  0F21                     	;# 
  3236  0F22                     	;# 
  3237  0F23                     	;# 
  3238  0F24                     	;# 
  3239  0F25                     	;# 
  3240  0F26                     	;# 
  3241  0F27                     	;# 
  3242  0F28                     	;# 
  3243  0F29                     	;# 
  3244  0F2A                     	;# 
  3245  0F2B                     	;# 
  3246  0F2C                     	;# 
  3247  0F2D                     	;# 
  3248  0F2E                     	;# 
  3249  0F2F                     	;# 
  3250  0F30                     	;# 
  3251  0F31                     	;# 
  3252  0F32                     	;# 
  3253  0F33                     	;# 
  3254  0F34                     	;# 
  3255  0F35                     	;# 
  3256  0F36                     	;# 
  3257  0F37                     	;# 
  3258  0FE4                     	;# 
  3259  0FE5                     	;# 
  3260  0FE6                     	;# 
  3261  0FE7                     	;# 
  3262  0FE8                     	;# 
  3263  0FE9                     	;# 
  3264  0FEA                     	;# 
  3265  0FEB                     	;# 
  3266  0FED                     	;# 
  3267  0FEE                     	;# 
  3268  0FEF                     	;# 
  3269                           
  3270                           	psect	idataBANK0
  3271  0876                     __pidataBANK0:	
  3272                           
  3273                           ;initializer for _randx
  3274  0876  3401               	retlw	1
  3275  0877  3400               	retlw	0
  3276  0878  3400               	retlw	0
  3277  0879  3400               	retlw	0
  3278                           
  3279                           ;initializer for _fall
  3280  087A  3401               	retlw	1
  3281                           
  3282                           	psect	idataBANK1
  3283  0839                     __pidataBANK1:	
  3284                           
  3285                           ;initializer for _hiscore_addr
  3286  0839  3405               	retlw	5
  3287  083A  341F               	retlw	31
  3288                           
  3289                           ;initializer for _wallColor
  3290  083B  3401               	retlw	1
  3291                           
  3292                           	psect	idataBANK2
  3293  0B9C                     __pidataBANK2:	
  3294                           
  3295                           ;initializer for _letter_o
  3296  0B9C  3400               	retlw	0
  3297  0B9D  347E               	retlw	126
  3298  0B9E  3442               	retlw	66
  3299  0B9F  3442               	retlw	66
  3300  0BA0  3442               	retlw	66
  3301  0BA1  3442               	retlw	66
  3302  0BA2  347E               	retlw	126
  3303  0BA3  3400               	retlw	0
  3304                           
  3305                           ;initializer for _letter_c
  3306  0BA4  3400               	retlw	0
  3307  0BA5  347E               	retlw	126
  3308  0BA6  3460               	retlw	96
  3309  0BA7  3460               	retlw	96
  3310  0BA8  3460               	retlw	96
  3311  0BA9  3460               	retlw	96
  3312  0BAA  347E               	retlw	126
  3313  0BAB  3400               	retlw	0
  3314                           
  3315                           ;initializer for _letter_s
  3316  0BAC  3400               	retlw	0
  3317  0BAD  347E               	retlw	126
  3318  0BAE  3440               	retlw	64
  3319  0BAF  3440               	retlw	64
  3320  0BB0  347E               	retlw	126
  3321  0BB1  3402               	retlw	2
  3322  0BB2  347E               	retlw	126
  3323  0BB3  3400               	retlw	0
  3324                           
  3325                           ;initializer for _letter_e
  3326  0BB4  3400               	retlw	0
  3327  0BB5  347C               	retlw	124
  3328  0BB6  3440               	retlw	64
  3329  0BB7  3470               	retlw	112
  3330  0BB8  3470               	retlw	112
  3331  0BB9  3440               	retlw	64
  3332  0BBA  347C               	retlw	124
  3333  0BBB  3400               	retlw	0
  3334                           
  3335                           	psect	idataBANK3
  3336  0D10                     __pidataBANK3:	
  3337                           
  3338                           ;initializer for _numberTable
  3339  0D10  3468               	retlw	low (_number_0| (0+512))
  3340  0D11  3460               	retlw	low (_number_1| (0+512))
  3341  0D12  3458               	retlw	low (_number_2| (0+512))
  3342  0D13  3450               	retlw	low (_number_3| (0+512))
  3343  0D14  3448               	retlw	low (_number_4| (0+512))
  3344  0D15  3440               	retlw	low (_number_5| (0+512))
  3345  0D16  3438               	retlw	low (_number_6| (0+512))
  3346  0D17  3430               	retlw	low (_number_7| (0+512))
  3347  0D18  3428               	retlw	low (_number_8| (0+512))
  3348  0D19  3420               	retlw	low (_number_9| (0+512))
  3349                           
  3350                           ;initializer for _letter_r
  3351  0D1A  3400               	retlw	0
  3352  0D1B  3478               	retlw	120
  3353  0D1C  3448               	retlw	72
  3354  0D1D  3478               	retlw	120
  3355  0D1E  3460               	retlw	96
  3356  0D1F  3450               	retlw	80
  3357  0D20  3448               	retlw	72
  3358  0D21  3400               	retlw	0
  3359                           
  3360                           ;initializer for _letter_hi
  3361  0D22  3400               	retlw	0
  3362  0D23  344A               	retlw	74
  3363  0D24  3448               	retlw	72
  3364  0D25  347A               	retlw	122
  3365  0D26  347A               	retlw	122
  3366  0D27  344A               	retlw	74
  3367  0D28  344A               	retlw	74
  3368  0D29  3400               	retlw	0
  3369                           
  3370                           ;initializer for _letter_w
  3371  0D2A  3400               	retlw	0
  3372  0D2B  3444               	retlw	68
  3373  0D2C  3444               	retlw	68
  3374  0D2D  3454               	retlw	84
  3375  0D2E  3454               	retlw	84
  3376  0D2F  3454               	retlw	84
  3377  0D30  347C               	retlw	124
  3378  0D31  3400               	retlw	0
  3379                           
  3380                           ;initializer for _letter_n
  3381  0D32  3400               	retlw	0
  3382  0D33  3442               	retlw	66
  3383  0D34  3462               	retlw	98
  3384  0D35  3452               	retlw	82
  3385  0D36  344A               	retlw	74
  3386  0D37  3446               	retlw	70
  3387  0D38  3442               	retlw	66
  3388  0D39  3400               	retlw	0
  3389                           
  3390                           	psect	idataBANK4
  3391  0763                     __pidataBANK4:	
  3392                           
  3393                           ;initializer for _number_9
  3394  0763  3400               	retlw	0
  3395  0764  347E               	retlw	126
  3396  0765  3442               	retlw	66
  3397  0766  347E               	retlw	126
  3398  0767  3402               	retlw	2
  3399  0768  3402               	retlw	2
  3400  0769  3402               	retlw	2
  3401  076A  3400               	retlw	0
  3402                           
  3403                           ;initializer for _number_8
  3404  076B  3400               	retlw	0
  3405  076C  347E               	retlw	126
  3406  076D  3442               	retlw	66
  3407  076E  3442               	retlw	66
  3408  076F  347E               	retlw	126
  3409  0770  3442               	retlw	66
  3410  0771  347E               	retlw	126
  3411  0772  3400               	retlw	0
  3412                           
  3413                           ;initializer for _number_7
  3414  0773  3400               	retlw	0
  3415  0774  347E               	retlw	126
  3416  0775  3402               	retlw	2
  3417  0776  3402               	retlw	2
  3418  0777  3402               	retlw	2
  3419  0778  3402               	retlw	2
  3420  0779  3402               	retlw	2
  3421  077A  3400               	retlw	0
  3422                           
  3423                           ;initializer for _number_6
  3424  077B  3400               	retlw	0
  3425  077C  347E               	retlw	126
  3426  077D  3440               	retlw	64
  3427  077E  347E               	retlw	126
  3428  077F  3442               	retlw	66
  3429  0780  3442               	retlw	66
  3430  0781  347E               	retlw	126
  3431  0782  3400               	retlw	0
  3432                           
  3433                           ;initializer for _number_5
  3434  0783  3400               	retlw	0
  3435  0784  347E               	retlw	126
  3436  0785  3440               	retlw	64
  3437  0786  3440               	retlw	64
  3438  0787  347E               	retlw	126
  3439  0788  3402               	retlw	2
  3440  0789  347E               	retlw	126
  3441  078A  3400               	retlw	0
  3442                           
  3443                           ;initializer for _number_4
  3444  078B  3400               	retlw	0
  3445  078C  3444               	retlw	68
  3446  078D  3444               	retlw	68
  3447  078E  3444               	retlw	68
  3448  078F  347E               	retlw	126
  3449  0790  3404               	retlw	4
  3450  0791  3404               	retlw	4
  3451  0792  3400               	retlw	0
  3452                           
  3453                           ;initializer for _number_3
  3454  0793  3400               	retlw	0
  3455  0794  347E               	retlw	126
  3456  0795  3402               	retlw	2
  3457  0796  3402               	retlw	2
  3458  0797  347E               	retlw	126
  3459  0798  3402               	retlw	2
  3460  0799  347E               	retlw	126
  3461  079A  3400               	retlw	0
  3462                           
  3463                           ;initializer for _number_2
  3464  079B  3400               	retlw	0
  3465  079C  347E               	retlw	126
  3466  079D  3402               	retlw	2
  3467  079E  3402               	retlw	2
  3468  079F  347E               	retlw	126
  3469  07A0  3440               	retlw	64
  3470  07A1  347E               	retlw	126
  3471  07A2  3400               	retlw	0
  3472                           
  3473                           ;initializer for _number_1
  3474  07A3  3400               	retlw	0
  3475  07A4  3478               	retlw	120
  3476  07A5  3418               	retlw	24
  3477  07A6  3418               	retlw	24
  3478  07A7  3418               	retlw	24
  3479  07A8  3418               	retlw	24
  3480  07A9  347E               	retlw	126
  3481  07AA  3400               	retlw	0
  3482                           
  3483                           ;initializer for _number_0
  3484  07AB  3400               	retlw	0
  3485  07AC  347E               	retlw	126
  3486  07AD  3442               	retlw	66
  3487  07AE  3442               	retlw	66
  3488  07AF  3442               	retlw	66
  3489  07B0  3442               	retlw	66
  3490  07B1  347E               	retlw	126
  3491  07B2  3400               	retlw	0
  3492                           
  3493                           	psect	idataBANK5
  3494  0B7C                     __pidataBANK5:	
  3495                           
  3496                           ;initializer for _fsmStateTable
  3497  0B7C  3411               	retlw	low _do_I2C_IDLE
  3498  0B7D  3409               	retlw	high _do_I2C_IDLE
  3499  0B7E  3486               	retlw	low _do_I2C_SEND_ADR_READ
  3500  0B7F  3409               	retlw	high _do_I2C_SEND_ADR_READ
  3501  0B80  344D               	retlw	low _do_I2C_SEND_ADR_WRITE
  3502  0B81  3409               	retlw	high _do_I2C_SEND_ADR_WRITE
  3503  0B82  3465               	retlw	low _do_I2C_TX
  3504  0B83  3406               	retlw	high _do_I2C_TX
  3505  0B84  346B               	retlw	low _do_I2C_RX
  3506  0B85  340F               	retlw	high _do_I2C_RX
  3507  0B86  3424               	retlw	low _do_I2C_RCEN
  3508  0B87  3409               	retlw	high _do_I2C_RCEN
  3509  0B88  3467               	retlw	low _do_I2C_TX_EMPTY
  3510  0B89  340D               	retlw	high _do_I2C_TX_EMPTY
  3511  0B8A  34D9               	retlw	low _do_I2C_SEND_RESTART_READ
  3512  0B8B  3408               	retlw	high _do_I2C_SEND_RESTART_READ
  3513  0B8C  34E1               	retlw	low _do_I2C_SEND_RESTART_WRITE
  3514  0B8D  3408               	retlw	high _do_I2C_SEND_RESTART_WRITE
  3515  0B8E  34E9               	retlw	low _do_I2C_SEND_RESTART
  3516  0B8F  3408               	retlw	high _do_I2C_SEND_RESTART
  3517  0B90  34F1               	retlw	low _do_I2C_SEND_STOP
  3518  0B91  3408               	retlw	high _do_I2C_SEND_STOP
  3519  0B92  34F9               	retlw	low _do_I2C_DO_ACK
  3520  0B93  3408               	retlw	high _do_I2C_DO_ACK
  3521  0B94  3401               	retlw	low _do_I2C_DO_NACK_STOP
  3522  0B95  3409               	retlw	high _do_I2C_DO_NACK_STOP
  3523  0B96  3409               	retlw	low _do_I2C_DO_NACK_RESTART
  3524  0B97  3409               	retlw	high _do_I2C_DO_NACK_RESTART
  3525  0B98  3442               	retlw	low _do_I2C_RESET
  3526  0B99  3409               	retlw	high _do_I2C_RESET
  3527  0B9A  34E6               	retlw	low _do_I2C_DO_ADDRESS_NACK
  3528  0B9B  340C               	retlw	high _do_I2C_DO_ADDRESS_NACK
  3529                           
  3530                           	psect	nvBANK0
  3531  006A                     __pnvBANK0:	
  3532  006A                     _IOCCF4_InterruptHandler:	
  3533  006A                     	ds	2
  3534  0011                     _PIR2bits	set	17
  3535  0010                     _PIR1bits	set	16
  3536  000B                     _INTCONbits	set	11
  3537  0091                     _PIE2bits	set	145
  3538  0090                     _PIE1bits	set	144
  3539  0098                     _OSCTUNE	set	152
  3540  0099                     _OSCCON	set	153
  3541  0095                     _OPTION_REGbits	set	149
  3542  008E                     _TRISC	set	142
  3543  008D                     _TRISB	set	141
  3544  008C                     _TRISA	set	140
  3545  04D6                     _PLLR	set	1238
  3546  0116                     _BORCON	set	278
  3547  010E                     _LATC	set	270
  3548  010D                     _LATB	set	269
  3549  010C                     _LATA	set	268
  3550  0196                     _PMCON2	set	406
  3551  0193                     _PMDATL	set	403
  3552  0194                     _PMDATH	set	404
  3553  0195                     _PMCON1bits	set	405
  3554  0192                     _PMADRH	set	402
  3555  0191                     _PMADRL	set	401
  3556  018C                     _ANSELA	set	396
  3557  018D                     _ANSELB	set	397
  3558  018E                     _ANSELC	set	398
  3559  0214                     _SSP1STATbits	set	532
  3560  0213                     _SSP1MSK	set	531
  3561  0211                     _SSP1BUF	set	529
  3562  0216                     _SSP1CON2bits	set	534
  3563  0212                     _SSP1ADD	set	530
  3564  0216                     _SSP1CON2	set	534
  3565  0215                     _SSP1CON1	set	533
  3566  0214                     _SSP1STAT	set	532
  3567  0215                     _SSP1CON1bits	set	533
  3568  020E                     _WPUC	set	526
  3569  020C                     _WPUA	set	524
  3570  020D                     _WPUB	set	525
  3571  028E                     _ODCONC	set	654
  3572  028D                     _ODCONB	set	653
  3573  028C                     _ODCONA	set	652
  3574  0397                     _IOCCPbits	set	919
  3575  0398                     _IOCCNbits	set	920
  3576  0399                     _IOCCFbits	set	921
  3577  0E21                     _SSPDATPPS	set	3617
  3578  0E20                     _SSPCLKPPS	set	3616
  3579  0E9C                     _RB4PPS	set	3740
  3580  0E9E                     _RB6PPS	set	3742
  3581                           
  3582                           ; #config settings
  3583  0000                     
  3584                           	psect	cinit
  3585  0030                     start_initialization:	
  3586  0030                     __initialization:	
  3587                           
  3588                           ; Initialize objects allocated to BANK0
  3589  0030  3076               	movlw	low __pidataBANK0
  3590  0031  0084               	movwf	4
  3591  0032  3088               	movlw	(high __pidataBANK0)| (0+128)
  3592  0033  0085               	movwf	5
  3593  0034  3065               	movlw	low __pdataBANK0
  3594  0035  0086               	movwf	6
  3595  0036  3000               	movlw	high __pdataBANK0
  3596  0037  0087               	movwf	7
  3597  0038  3005               	movlw	5
  3598  0039  3188  20BD  3180   	fcall	init_ram
  3599                           
  3600                           ; Initialize objects allocated to BANK1
  3601  003C  3039               	movlw	low __pidataBANK1
  3602  003D  0084               	movwf	4
  3603  003E  3088               	movlw	(high __pidataBANK1)| (0+128)
  3604  003F  0085               	movwf	5
  3605  0040  30C3               	movlw	low __pdataBANK1
  3606  0041  0086               	movwf	6
  3607  0042  3000               	movlw	high __pdataBANK1
  3608  0043  0087               	movwf	7
  3609  0044  3003               	movlw	3
  3610  0045  3188  20BD  3180   	fcall	init_ram
  3611                           
  3612                           ; Initialize objects allocated to BANK2
  3613  0048  309C               	movlw	low __pidataBANK2
  3614  0049  0084               	movwf	4
  3615  004A  308B               	movlw	(high __pidataBANK2)| (0+128)
  3616  004B  0085               	movwf	5
  3617  004C  3040               	movlw	low __pdataBANK2
  3618  004D  0086               	movwf	6
  3619  004E  3001               	movlw	high __pdataBANK2
  3620  004F  0087               	movwf	7
  3621  0050  3020               	movlw	32
  3622  0051  3188  20BD  3180   	fcall	init_ram
  3623                           
  3624                           ; Initialize objects allocated to BANK3
  3625  0054  3010               	movlw	low __pidataBANK3
  3626  0055  0084               	movwf	4
  3627  0056  308D               	movlw	(high __pidataBANK3)| (0+128)
  3628  0057  0085               	movwf	5
  3629  0058  30A0               	movlw	low __pdataBANK3
  3630  0059  0086               	movwf	6
  3631  005A  3001               	movlw	high __pdataBANK3
  3632  005B  0087               	movwf	7
  3633  005C  302A               	movlw	42
  3634  005D  3188  20BD  3180   	fcall	init_ram
  3635                           
  3636                           ; Initialize objects allocated to BANK4
  3637  0060  3063               	movlw	low __pidataBANK4
  3638  0061  0084               	movwf	4
  3639  0062  3087               	movlw	(high __pidataBANK4)| (0+128)
  3640  0063  0085               	movwf	5
  3641  0064  3020               	movlw	low __pdataBANK4
  3642  0065  0086               	movwf	6
  3643  0066  3002               	movlw	high __pdataBANK4
  3644  0067  0087               	movwf	7
  3645  0068  3050               	movlw	80
  3646  0069  3188  20BD  3180   	fcall	init_ram
  3647                           
  3648                           ; Initialize objects allocated to BANK5
  3649  006C  307C               	movlw	low __pidataBANK5
  3650  006D  0084               	movwf	4
  3651  006E  308B               	movlw	(high __pidataBANK5)| (0+128)
  3652  006F  0085               	movwf	5
  3653  0070  30A0               	movlw	low __pdataBANK5
  3654  0071  0086               	movwf	6
  3655  0072  3002               	movlw	high __pdataBANK5
  3656  0073  0087               	movwf	7
  3657  0074  3020               	movlw	32
  3658  0075  3188  20BD  3180   	fcall	init_ram
  3659                           
  3660                           ; Clear objects allocated to BANK0
  3661  0078  3059               	movlw	low __pbssBANK0
  3662  0079  0084               	movwf	4
  3663  007A  3000               	movlw	high __pbssBANK0
  3664  007B  0085               	movwf	5
  3665  007C  300C               	movlw	12
  3666  007D  3188  20B7  3180   	fcall	clear_ram0
  3667                           
  3668                           ; Clear objects allocated to BANK1
  3669  0080  30A0               	movlw	low __pbssBANK1
  3670  0081  0084               	movwf	4
  3671  0082  3000               	movlw	high __pbssBANK1
  3672  0083  0085               	movwf	5
  3673  0084  3023               	movlw	35
  3674  0085  3188  20B7  3180   	fcall	clear_ram0
  3675                           
  3676                           ; Clear objects allocated to BANK2
  3677  0088  3020               	movlw	low __pbssBANK2
  3678  0089  0084               	movwf	4
  3679  008A  3001               	movlw	high __pbssBANK2
  3680  008B  0085               	movwf	5
  3681  008C  3020               	movlw	32
  3682  008D  3188  20B7  3180   	fcall	clear_ram0
  3683                           
  3684                           ; Clear objects allocated to BANK3
  3685  0090  30CA               	movlw	low __pbssBANK3
  3686  0091  0084               	movwf	4
  3687  0092  3001               	movlw	high __pbssBANK3
  3688  0093  0085               	movwf	5
  3689  0094  3019               	movlw	25
  3690  0095  3188  20B7  3180   	fcall	clear_ram0
  3691                           
  3692                           ; Clear objects allocated to BANK6
  3693  0098  3020               	movlw	low __pbssBANK6
  3694  0099  0084               	movwf	4
  3695  009A  3003               	movlw	high __pbssBANK6
  3696  009B  0085               	movwf	5
  3697  009C  3040               	movlw	64
  3698  009D  3188  20B7         	fcall	clear_ram0
  3699  009F                     end_of_initialization:	
  3700                           ;End of C runtime variable initialization code
  3701                           
  3702  009F                     __end_of__initialization:	
  3703  009F  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  3704  00A0  0020               	movlb	0
  3705  00A1  3183  2B98         	ljmp	_main	;jump to C main() function
  3706                           
  3707                           	psect	bssBANK0
  3708  0059                     __pbssBANK0:	
  3709  0059                     _shiftCounter:	
  3710  0059                     	ds	2
  3711  005B                     _i2c_driver_i2cISR:	
  3712  005B                     	ds	2
  3713  005D                     _i2c_driver_busCollisionISR:	
  3714  005D                     	ds	2
  3715  005F                     _topHalf:	
  3716  005F                     	ds	1
  3717  0060                     _wallHeight:	
  3718  0060                     	ds	1
  3719  0061                     _i:	
  3720  0061                     	ds	1
  3721  0062                     _gravityCounter:	
  3722  0062                     	ds	1
  3723  0063                     _elevation:	
  3724  0063                     	ds	1
  3725  0064                     _createWall:	
  3726  0064                     	ds	1
  3727                           
  3728                           	psect	dataBANK0
  3729  0065                     __pdataBANK0:	
  3730  0065                     _randx:	
  3731  0065                     	ds	4
  3732  0069                     _fall:	
  3733  0069                     	ds	1
  3734                           
  3735                           	psect	bssBANK1
  3736  00A0                     __pbssBANK1:	
  3737  00A0                     _i2c_status:	
  3738  00A0                     	ds	30
  3739  00BE                     _hiscore:	
  3740  00BE                     	ds	2
  3741  00C0                     _score:	
  3742  00C0                     	ds	2
  3743  00C2                     _start:	
  3744  00C2                     	ds	1
  3745                           
  3746                           	psect	dataBANK1
  3747  00C3                     __pdataBANK1:	
  3748  00C3                     _hiscore_addr:	
  3749  00C3                     	ds	2
  3750  00C5                     _wallColor:	
  3751  00C5                     	ds	1
  3752                           
  3753                           	psect	bssBANK2
  3754  0120                     __pbssBANK2:	
  3755  0120                     _pixelbuffer:	
  3756  0120                     	ds	16
  3757  0130                     _walls:	
  3758  0130                     	ds	8
  3759  0138                     _letter_space:	
  3760  0138                     	ds	8
  3761                           
  3762                           	psect	dataBANK2
  3763  0140                     __pdataBANK2:	
  3764  0140                     _letter_o:	
  3765  0140                     	ds	8
  3766  0148                     _letter_c:	
  3767  0148                     	ds	8
  3768  0150                     _letter_s:	
  3769  0150                     	ds	8
  3770  0158                     _letter_e:	
  3771  0158                     	ds	8
  3772                           
  3773                           	psect	bssBANK3
  3774  01CA                     __pbssBANK3:	
  3775  01CA                     write@F12469:	
  3776  01CA                     	ds	8
  3777  01D2                     _writebuffer:	
  3778  01D2                     	ds	17
  3779                           
  3780                           	psect	dataBANK3
  3781  01A0                     __pdataBANK3:	
  3782  01A0                     _numberTable:	
  3783  01A0                     	ds	10
  3784  01AA                     _letter_r:	
  3785  01AA                     	ds	8
  3786  01B2                     _letter_hi:	
  3787  01B2                     	ds	8
  3788  01BA                     _letter_w:	
  3789  01BA                     	ds	8
  3790  01C2                     _letter_n:	
  3791  01C2                     	ds	8
  3792                           
  3793                           	psect	dataBANK4
  3794  0220                     __pdataBANK4:	
  3795  0220                     _number_9:	
  3796  0220                     	ds	8
  3797  0228                     _number_8:	
  3798  0228                     	ds	8
  3799  0230                     _number_7:	
  3800  0230                     	ds	8
  3801  0238                     _number_6:	
  3802  0238                     	ds	8
  3803  0240                     _number_5:	
  3804  0240                     	ds	8
  3805  0248                     _number_4:	
  3806  0248                     	ds	8
  3807  0250                     _number_3:	
  3808  0250                     	ds	8
  3809  0258                     _number_2:	
  3810  0258                     	ds	8
  3811  0260                     _number_1:	
  3812  0260                     	ds	8
  3813  0268                     _number_0:	
  3814  0268                     	ds	8
  3815                           
  3816                           	psect	dataBANK5
  3817  02A0                     __pdataBANK5:	
  3818  02A0                     _fsmStateTable:	
  3819  02A0                     	ds	32
  3820                           
  3821                           	psect	bssBANK6
  3822  0320                     __pbssBANK6:	
  3823  0320                     _zerobuf:	
  3824  0320                     	ds	64
  3825                           
  3826                           	psect	inittext
  3827  08BD                     init_ram:	
  3828  08BD  00FE               	movwf	126
  3829  08BE                     initloop:	
  3830  08BE  0012               	moviw fsr0++
  3831  08BF  001E               	movwi fsr1++
  3832  08C0  0BFE               	decfsz	126,f
  3833  08C1  28BE               	goto	initloop
  3834  08C2  3400               	retlw	0
  3835                           
  3836                           	psect	clrtext
  3837  08B7                     clear_ram0:	
  3838                           ;	Called with FSR0 containing the base address, and
  3839                           ;	WREG with the size to clear
  3840                           
  3841  08B7  0064               	clrwdt	;clear the watchdog before getting into this loop
  3842  08B8                     clrloop0:	
  3843  08B8  0180               	clrf	0	;clear RAM location pointed to by FSR
  3844  08B9  3101               	addfsr 0,1
  3845  08BA  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  3846  08BB  28B8               	goto	clrloop0	;have we reached the end yet?
  3847  08BC  3400               	retlw	0	;all done for this memory range, return
  3848                           
  3849                           	psect	cstackBANK7
  3850  03A0                     __pcstackBANK7:	
  3851  03A0                     write@letter_space:	
  3852                           
  3853                           ; 8 bytes @ 0x0
  3854  03A0                     	ds	8
  3855  03A8                     write@digit1:	
  3856                           
  3857                           ; 1 bytes @ 0x8
  3858  03A8                     	ds	1
  3859  03A9                     write@digit2:	
  3860                           
  3861                           ; 1 bytes @ 0x9
  3862  03A9                     	ds	1
  3863  03AA                     write@digit3:	
  3864                           
  3865                           ; 1 bytes @ 0xA
  3866  03AA                     	ds	1
  3867  03AB                     write@digit4:	
  3868                           
  3869                           ; 1 bytes @ 0xB
  3870  03AB                     	ds	1
  3871  03AC                     write@digit5:	
  3872                           
  3873                           ; 1 bytes @ 0xC
  3874  03AC                     	ds	1
  3875  03AD                     write@toWrite_1169:	
  3876                           
  3877                           ; 16 bytes @ 0xD
  3878  03AD                     	ds	16
  3879  03BD                     write@toWrite_1170:	
  3880                           
  3881                           ; 14 bytes @ 0x1D
  3882  03BD                     	ds	14
  3883  03CB                     write@toWrite_1176:	
  3884                           
  3885                           ; 14 bytes @ 0x2B
  3886  03CB                     	ds	14
  3887  03D9                     write@toWrite:	
  3888                           
  3889                           ; 10 bytes @ 0x39
  3890  03D9                     	ds	10
  3891  03E3                     write@selection:	
  3892                           
  3893                           ; 1 bytes @ 0x43
  3894  03E3                     	ds	1
  3895  03E4                     write@number:	
  3896                           
  3897                           ; 2 bytes @ 0x44
  3898  03E4                     	ds	2
  3899                           
  3900                           	psect	cstackCOMMON
  3901  0070                     __pcstackCOMMON:	
  3902  0070                     ?_mssp_IRQisEnabled:	
  3903  0070                     ?_i2c_driver_open:	
  3904                           ; 1 bit 
  3905                           
  3906  0070                     ?_i2c_driver_isNACK:	
  3907                           ; 1 bit 
  3908                           
  3909  0070                     ?i1_i2c_driver_isNACK:	
  3910                           ; 1 bit 
  3911                           
  3912  0070                     ?_IOCCF4_DefaultInterruptHandler:	
  3913                           ; 1 bit 
  3914                           
  3915  0070                     ??_IOCCF4_DefaultInterruptHandler:	
  3916                           ; 1 bytes @ 0x0
  3917                           
  3918  0070                     ?_IOCCF4_ISR:	
  3919                           ; 1 bytes @ 0x0
  3920                           
  3921  0070                     ?_OSCILLATOR_Initialize:	
  3922                           ; 1 bytes @ 0x0
  3923                           
  3924  0070                     ?_i2c_open:	
  3925                           ; 1 bytes @ 0x0
  3926                           
  3927  0070                     ?_i2c_masterWrite:	
  3928                           ; 1 bytes @ 0x0
  3929                           
  3930  0070                     ?_i2c_close:	
  3931                           ; 1 bytes @ 0x0
  3932                           
  3933  0070                     ?_i2c_busCollisionISR:	
  3934                           ; 1 bytes @ 0x0
  3935                           
  3936  0070                     ??_i2c_busCollisionISR:	
  3937                           ; 1 bytes @ 0x0
  3938                           
  3939  0070                     ?_i2c_ISR:	
  3940                           ; 1 bytes @ 0x0
  3941                           
  3942  0070                     ?_i2c_poller:	
  3943                           ; 1 bytes @ 0x0
  3944                           
  3945  0070                     ?_PIN_MANAGER_Initialize:	
  3946                           ; 1 bytes @ 0x0
  3947                           
  3948  0070                     ?_PIN_MANAGER_IOC:	
  3949                           ; 1 bytes @ 0x0
  3950                           
  3951  0070                     ?_SYSTEM_Initialize:	
  3952                           ; 1 bytes @ 0x0
  3953                           
  3954  0070                     ?_mssp_disableIRQ:	
  3955                           ; 1 bytes @ 0x0
  3956                           
  3957  0070                     ?_mssp_clearIRQ:	
  3958                           ; 1 bytes @ 0x0
  3959                           
  3960  0070                     ?_mssp_setIRQ:	
  3961                           ; 1 bytes @ 0x0
  3962                           
  3963  0070                     ?_mssp_waitForEvent:	
  3964                           ; 1 bytes @ 0x0
  3965                           
  3966  0070                     ?_i2c_driver_resetBus:	
  3967                           ; 1 bytes @ 0x0
  3968                           
  3969  0070                     ?_i2c_driver_start:	
  3970                           ; 1 bytes @ 0x0
  3971                           
  3972  0070                     ?_i2c_driver_restart:	
  3973                           ; 1 bytes @ 0x0
  3974                           
  3975  0070                     ?_i2c_driver_stop:	
  3976                           ; 1 bytes @ 0x0
  3977                           
  3978  0070                     ?_i2c_driver_startRX:	
  3979                           ; 1 bytes @ 0x0
  3980                           
  3981  0070                     ?_i2c_driver_getRXData:	
  3982                           ; 1 bytes @ 0x0
  3983                           
  3984  0070                     ?_i2c_driver_TXData:	
  3985                           ; 1 bytes @ 0x0
  3986                           
  3987  0070                     ?_i2c_driver_sendACK:	
  3988                           ; 1 bytes @ 0x0
  3989                           
  3990  0070                     ?_i2c_driver_sendNACK:	
  3991                           ; 1 bytes @ 0x0
  3992                           
  3993  0070                     ?_i2c_driver_clearBusCollision:	
  3994                           ; 1 bytes @ 0x0
  3995                           
  3996  0070                     ??_i2c_driver_clearBusCollision:	
  3997                           ; 1 bytes @ 0x0
  3998                           
  3999  0070                     ?_INTERRUPT_InterruptManager:	
  4000                           ; 1 bytes @ 0x0
  4001                           
  4002  0070                     ?_i2c_masterOperation:	
  4003                           ; 1 bytes @ 0x0
  4004                           
  4005  0070                     ?_do_I2C_RESET:	
  4006                           ; 1 bytes @ 0x0
  4007                           
  4008  0070                     ?_do_I2C_IDLE:	
  4009                           ; 1 bytes @ 0x0
  4010                           
  4011  0070                     ?_do_I2C_SEND_RESTART_READ:	
  4012                           ; 1 bytes @ 0x0
  4013                           
  4014  0070                     ?_do_I2C_SEND_RESTART_WRITE:	
  4015                           ; 1 bytes @ 0x0
  4016                           
  4017  0070                     ?_do_I2C_SEND_RESTART:	
  4018                           ; 1 bytes @ 0x0
  4019                           
  4020  0070                     ?_do_I2C_SEND_STOP:	
  4021                           ; 1 bytes @ 0x0
  4022                           
  4023  0070                     ?_do_I2C_SEND_ADR_READ:	
  4024                           ; 1 bytes @ 0x0
  4025                           
  4026  0070                     ?_do_I2C_SEND_ADR_WRITE:	
  4027                           ; 1 bytes @ 0x0
  4028                           
  4029  0070                     ?_do_I2C_RCEN:	
  4030                           ; 1 bytes @ 0x0
  4031                           
  4032  0070                     ?_do_I2C_DO_ACK:	
  4033                           ; 1 bytes @ 0x0
  4034                           
  4035  0070                     ?_do_I2C_DO_NACK_STOP:	
  4036                           ; 1 bytes @ 0x0
  4037                           
  4038  0070                     ?_do_I2C_DO_NACK_RESTART:	
  4039                           ; 1 bytes @ 0x0
  4040                           
  4041  0070                     ?_do_I2C_DO_ADDRESS_NACK:	
  4042                           ; 1 bytes @ 0x0
  4043                           
  4044  0070                     ?_do_I2C_TX:	
  4045                           ; 1 bytes @ 0x0
  4046                           
  4047  0070                     ?_do_I2C_RX:	
  4048                           ; 1 bytes @ 0x0
  4049                           
  4050  0070                     ?_do_I2C_TX_EMPTY:	
  4051                           ; 1 bytes @ 0x0
  4052                           
  4053  0070                     ?_writeDisplay:	
  4054                           ; 1 bytes @ 0x0
  4055                           
  4056  0070                     ?_clearPixels:	
  4057                           ; 1 bytes @ 0x0
  4058                           
  4059  0070                     ?_initializeDisplay:	
  4060                           ; 1 bytes @ 0x0
  4061                           
  4062  0070                     ?_reverse:	
  4063                           ; 1 bytes @ 0x0
  4064                           
  4065  0070                     ?_drawWalls:	
  4066                           ; 1 bytes @ 0x0
  4067                           
  4068  0070                     ?_shiftWalls:	
  4069                           ; 1 bytes @ 0x0
  4070                           
  4071  0070                     ?_buttonInterrupt:	
  4072                           ; 1 bytes @ 0x0
  4073                           
  4074  0070                     ??_buttonInterrupt:	
  4075                           ; 1 bytes @ 0x0
  4076                           
  4077  0070                     ?_write:	
  4078                           ; 1 bytes @ 0x0
  4079                           
  4080  0070                     ?_endGame:	
  4081                           ; 1 bytes @ 0x0
  4082                           
  4083  0070                     ?_main:	
  4084                           ; 1 bytes @ 0x0
  4085                           
  4086  0070                     ?i1_mssp_clearIRQ:	
  4087                           ; 1 bytes @ 0x0
  4088                           
  4089  0070                     ??i1_mssp_clearIRQ:	
  4090                           ; 1 bytes @ 0x0
  4091                           
  4092  0070                     ?i1_mssp_setIRQ:	
  4093                           ; 1 bytes @ 0x0
  4094                           
  4095  0070                     ??i1_mssp_setIRQ:	
  4096                           ; 1 bytes @ 0x0
  4097                           
  4098  0070                     ?i1_i2c_driver_resetBus:	
  4099                           ; 1 bytes @ 0x0
  4100                           
  4101  0070                     ??i1_i2c_driver_resetBus:	
  4102                           ; 1 bytes @ 0x0
  4103                           
  4104  0070                     ?i1_i2c_driver_restart:	
  4105                           ; 1 bytes @ 0x0
  4106                           
  4107  0070                     ??i1_i2c_driver_restart:	
  4108                           ; 1 bytes @ 0x0
  4109                           
  4110  0070                     ?i1_i2c_driver_stop:	
  4111                           ; 1 bytes @ 0x0
  4112                           
  4113  0070                     ??i1_i2c_driver_stop:	
  4114                           ; 1 bytes @ 0x0
  4115                           
  4116  0070                     ??i1_i2c_driver_isNACK:	
  4117                           ; 1 bytes @ 0x0
  4118                           
  4119  0070                     ?i1_i2c_driver_startRX:	
  4120                           ; 1 bytes @ 0x0
  4121                           
  4122  0070                     ??i1_i2c_driver_startRX:	
  4123                           ; 1 bytes @ 0x0
  4124                           
  4125  0070                     ?i1_i2c_driver_getRXData:	
  4126                           ; 1 bytes @ 0x0
  4127                           
  4128  0070                     ??i1_i2c_driver_getRXData:	
  4129                           ; 1 bytes @ 0x0
  4130                           
  4131  0070                     ?i1_i2c_driver_TXData:	
  4132                           ; 1 bytes @ 0x0
  4133                           
  4134  0070                     ??i1_i2c_driver_TXData:	
  4135                           ; 1 bytes @ 0x0
  4136                           
  4137  0070                     ?i1_i2c_driver_sendACK:	
  4138                           ; 1 bytes @ 0x0
  4139                           
  4140  0070                     ??i1_i2c_driver_sendACK:	
  4141                           ; 1 bytes @ 0x0
  4142                           
  4143  0070                     ?i1_i2c_driver_sendNACK:	
  4144                           ; 1 bytes @ 0x0
  4145                           
  4146  0070                     ??i1_i2c_driver_sendNACK:	
  4147                           ; 1 bytes @ 0x0
  4148                           
  4149  0070                     ?i1_i2c_setBuffer:	
  4150                           ; 1 bytes @ 0x0
  4151                           
  4152  0070                     ?i1_do_I2C_RESET:	
  4153                           ; 1 bytes @ 0x0
  4154                           
  4155  0070                     ??i1_do_I2C_RESET:	
  4156                           ; 1 bytes @ 0x0
  4157                           
  4158  0070                     ?i1_do_I2C_IDLE:	
  4159                           ; 1 bytes @ 0x0
  4160                           
  4161  0070                     ??i1_do_I2C_IDLE:	
  4162                           ; 1 bytes @ 0x0
  4163                           
  4164  0070                     ?i1_do_I2C_SEND_RESTART_READ:	
  4165                           ; 1 bytes @ 0x0
  4166                           
  4167  0070                     ??i1_do_I2C_SEND_RESTART_READ:	
  4168                           ; 1 bytes @ 0x0
  4169                           
  4170  0070                     ?i1_do_I2C_SEND_RESTART_WRITE:	
  4171                           ; 1 bytes @ 0x0
  4172                           
  4173  0070                     ??i1_do_I2C_SEND_RESTART_WRITE:	
  4174                           ; 1 bytes @ 0x0
  4175                           
  4176  0070                     ?i1_do_I2C_SEND_RESTART:	
  4177                           ; 1 bytes @ 0x0
  4178                           
  4179  0070                     ??i1_do_I2C_SEND_RESTART:	
  4180                           ; 1 bytes @ 0x0
  4181                           
  4182  0070                     ?i1_do_I2C_SEND_STOP:	
  4183                           ; 1 bytes @ 0x0
  4184                           
  4185  0070                     ??i1_do_I2C_SEND_STOP:	
  4186                           ; 1 bytes @ 0x0
  4187                           
  4188  0070                     ?i1_do_I2C_SEND_ADR_READ:	
  4189                           ; 1 bytes @ 0x0
  4190                           
  4191  0070                     ?i1_do_I2C_SEND_ADR_WRITE:	
  4192                           ; 1 bytes @ 0x0
  4193                           
  4194  0070                     ?i1_do_I2C_RCEN:	
  4195                           ; 1 bytes @ 0x0
  4196                           
  4197  0070                     ??i1_do_I2C_RCEN:	
  4198                           ; 1 bytes @ 0x0
  4199                           
  4200  0070                     ?i1_do_I2C_DO_ACK:	
  4201                           ; 1 bytes @ 0x0
  4202                           
  4203  0070                     ??i1_do_I2C_DO_ACK:	
  4204                           ; 1 bytes @ 0x0
  4205                           
  4206  0070                     ?i1_do_I2C_DO_NACK_STOP:	
  4207                           ; 1 bytes @ 0x0
  4208                           
  4209  0070                     ??i1_do_I2C_DO_NACK_STOP:	
  4210                           ; 1 bytes @ 0x0
  4211                           
  4212  0070                     ?i1_do_I2C_DO_NACK_RESTART:	
  4213                           ; 1 bytes @ 0x0
  4214                           
  4215  0070                     ??i1_do_I2C_DO_NACK_RESTART:	
  4216                           ; 1 bytes @ 0x0
  4217                           
  4218  0070                     ?i1_do_I2C_DO_ADDRESS_NACK:	
  4219                           ; 1 bytes @ 0x0
  4220                           
  4221  0070                     ?i1_do_I2C_TX:	
  4222                           ; 1 bytes @ 0x0
  4223                           
  4224  0070                     ?i1_do_I2C_RX:	
  4225                           ; 1 bytes @ 0x0
  4226                           
  4227  0070                     ?i1_do_I2C_TX_EMPTY:	
  4228                           ; 1 bytes @ 0x0
  4229                           
  4230  0070                     ?i1_i2c_ISR:	
  4231                           ; 1 bytes @ 0x0
  4232                           
  4233  0070                     ?i1_setCallBack:	
  4234                           ; 1 bytes @ 0x0
  4235                           
  4236  0070                     i1i2c_driver_TXData@d:	
  4237                           ; 1 bytes @ 0x0
  4238                           
  4239  0070                     i1i2c_setBuffer@buffer:	
  4240                           ; 1 bytes @ 0x0
  4241                           
  4242  0070                     i1setCallBack@cb:	
  4243                           ; 2 bytes @ 0x0
  4244                           
  4245                           
  4246                           ; 2 bytes @ 0x0
  4247  0070                     	ds	1
  4248  0071                     ??_IOCCF4_ISR:	
  4249  0071                     ??_PIN_MANAGER_IOC:	
  4250                           ; 1 bytes @ 0x1
  4251                           
  4252  0071                     ??i1_do_I2C_SEND_ADR_READ:	
  4253                           ; 1 bytes @ 0x1
  4254                           
  4255  0071                     ??i1_do_I2C_SEND_ADR_WRITE:	
  4256                           ; 1 bytes @ 0x1
  4257                           
  4258                           
  4259                           ; 1 bytes @ 0x1
  4260  0071                     	ds	1
  4261  0072                     i1setCallBack@p:	
  4262  0072                     i1i2c_setBuffer@bufferSize:	
  4263                           ; 1 bytes @ 0x2
  4264                           
  4265                           
  4266                           ; 2 bytes @ 0x2
  4267  0072                     	ds	1
  4268  0073                     ??i1_setCallBack:	
  4269                           
  4270                           ; 1 bytes @ 0x3
  4271  0073                     	ds	1
  4272  0074                     ??i1_i2c_setBuffer:	
  4273  0074                     i1setCallBack@idx:	
  4274                           ; 1 bytes @ 0x4
  4275                           
  4276                           
  4277                           ; 1 bytes @ 0x4
  4278  0074                     	ds	1
  4279  0075                     ?i1_i2c_setDataCompleteCallback:	
  4280  0075                     i1i2c_setDataCompleteCallback@cb:	
  4281                           ; 1 bytes @ 0x5
  4282                           
  4283                           
  4284                           ; 2 bytes @ 0x5
  4285  0075                     	ds	2
  4286  0077                     i1i2c_setDataCompleteCallback@p:	
  4287                           
  4288                           ; 1 bytes @ 0x7
  4289  0077                     	ds	1
  4290  0078                     ??i1_i2c_setDataCompleteCallback:	
  4291                           
  4292                           ; 1 bytes @ 0x8
  4293  0078                     	ds	1
  4294  0079                     ?i1_wr1RegCompleteHandler:	
  4295  0079                     ?i1_rd1RegCompleteHandler:	
  4296                           ; 1 bytes @ 0x9
  4297                           
  4298  0079                     ?i1_rd2RegCompleteHandler:	
  4299                           ; 1 bytes @ 0x9
  4300                           
  4301  0079                     ?i1_wr2RegCompleteHandler:	
  4302                           ; 1 bytes @ 0x9
  4303                           
  4304  0079                     ?i1_rdBlkRegCompleteHandler:	
  4305                           ; 1 bytes @ 0x9
  4306                           
  4307  0079                     ?i1_returnStop:	
  4308                           ; 1 bytes @ 0x9
  4309                           
  4310  0079                     ?i1_returnReset:	
  4311                           ; 1 bytes @ 0x9
  4312                           
  4313  0079                     ?i1_i2c_restartWrite:	
  4314                           ; 1 bytes @ 0x9
  4315                           
  4316  0079                     i1wr1RegCompleteHandler@p:	
  4317                           ; 1 bytes @ 0x9
  4318                           
  4319  0079                     i1rd1RegCompleteHandler@p:	
  4320                           ; 1 bytes @ 0x9
  4321                           
  4322  0079                     i1rd2RegCompleteHandler@p:	
  4323                           ; 1 bytes @ 0x9
  4324                           
  4325  0079                     i1wr2RegCompleteHandler@p:	
  4326                           ; 1 bytes @ 0x9
  4327                           
  4328  0079                     i1rdBlkRegCompleteHandler@p:	
  4329                           ; 1 bytes @ 0x9
  4330                           
  4331  0079                     i1returnStop@p:	
  4332                           ; 1 bytes @ 0x9
  4333                           
  4334  0079                     i1returnReset@p:	
  4335                           ; 1 bytes @ 0x9
  4336                           
  4337  0079                     i1i2c_restartWrite@p:	
  4338                           ; 1 bytes @ 0x9
  4339                           
  4340                           
  4341                           ; 1 bytes @ 0x9
  4342  0079                     	ds	1
  4343  007A                     ??i1_wr1RegCompleteHandler:	
  4344  007A                     ??i1_rd1RegCompleteHandler:	
  4345                           ; 1 bytes @ 0xA
  4346                           
  4347  007A                     ??i1_rd2RegCompleteHandler:	
  4348                           ; 1 bytes @ 0xA
  4349                           
  4350  007A                     ??i1_wr2RegCompleteHandler:	
  4351                           ; 1 bytes @ 0xA
  4352                           
  4353  007A                     ??i1_rdBlkRegCompleteHandler:	
  4354                           ; 1 bytes @ 0xA
  4355                           
  4356  007A                     ??i1_do_I2C_DO_ADDRESS_NACK:	
  4357                           ; 1 bytes @ 0xA
  4358                           
  4359  007A                     ??i1_do_I2C_TX:	
  4360                           ; 1 bytes @ 0xA
  4361                           
  4362  007A                     ??i1_do_I2C_RX:	
  4363                           ; 1 bytes @ 0xA
  4364                           
  4365  007A                     ??i1_do_I2C_TX_EMPTY:	
  4366                           ; 1 bytes @ 0xA
  4367                           
  4368  007A                     ??i1_returnStop:	
  4369                           ; 1 bytes @ 0xA
  4370                           
  4371  007A                     ??i1_returnReset:	
  4372                           ; 1 bytes @ 0xA
  4373                           
  4374  007A                     ??i1_i2c_restartWrite:	
  4375                           ; 1 bytes @ 0xA
  4376                           
  4377                           
  4378                           ; 1 bytes @ 0xA
  4379  007A                     	ds	2
  4380  007C                     i1_do_I2C_TX$943:	
  4381                           
  4382                           ; 2 bytes @ 0xC
  4383  007C                     	ds	2
  4384                           
  4385                           	psect	cstackBANK0
  4386  0020                     __pcstackBANK0:	
  4387  0020                     ??i1_i2c_ISR:	
  4388                           
  4389                           ; 1 bytes @ 0x0
  4390  0020                     	ds	1
  4391  0021                     ??_INTERRUPT_InterruptManager:	
  4392                           
  4393                           ; 1 bytes @ 0x1
  4394  0021                     	ds	1
  4395  0022                     ?_IOCCF4_SetInterruptHandler:	
  4396  0022                     ??_OSCILLATOR_Initialize:	
  4397                           ; 1 bytes @ 0x2
  4398                           
  4399  0022                     ?_i2c_setBuffer:	
  4400                           ; 1 bytes @ 0x2
  4401                           
  4402  0022                     ??_i2c_close:	
  4403                           ; 1 bytes @ 0x2
  4404                           
  4405  0022                     ?_setCallBack:	
  4406                           ; 1 bytes @ 0x2
  4407                           
  4408  0022                     ?_FLASH_EraseBlock:	
  4409                           ; 1 bytes @ 0x2
  4410                           
  4411  0022                     ??_mssp_IRQisEnabled:	
  4412                           ; 1 bytes @ 0x2
  4413                           
  4414  0022                     ??_mssp_disableIRQ:	
  4415                           ; 1 bytes @ 0x2
  4416                           
  4417  0022                     ??_mssp_clearIRQ:	
  4418                           ; 1 bytes @ 0x2
  4419                           
  4420  0022                     ??_mssp_setIRQ:	
  4421                           ; 1 bytes @ 0x2
  4422                           
  4423  0022                     ??_mssp_waitForEvent:	
  4424                           ; 1 bytes @ 0x2
  4425                           
  4426  0022                     ??_i2c_driver_open:	
  4427                           ; 1 bytes @ 0x2
  4428                           
  4429  0022                     ??_i2c_driver_resetBus:	
  4430                           ; 1 bytes @ 0x2
  4431                           
  4432  0022                     ??_i2c_driver_start:	
  4433                           ; 1 bytes @ 0x2
  4434                           
  4435  0022                     ??_i2c_driver_restart:	
  4436                           ; 1 bytes @ 0x2
  4437                           
  4438  0022                     ??_i2c_driver_stop:	
  4439                           ; 1 bytes @ 0x2
  4440                           
  4441  0022                     ??_i2c_driver_isNACK:	
  4442                           ; 1 bytes @ 0x2
  4443                           
  4444  0022                     ??_i2c_driver_startRX:	
  4445                           ; 1 bytes @ 0x2
  4446                           
  4447  0022                     ??_i2c_driver_getRXData:	
  4448                           ; 1 bytes @ 0x2
  4449                           
  4450  0022                     ??_i2c_driver_TXData:	
  4451                           ; 1 bytes @ 0x2
  4452                           
  4453  0022                     ??_i2c_driver_sendACK:	
  4454                           ; 1 bytes @ 0x2
  4455                           
  4456  0022                     ??_i2c_driver_sendNACK:	
  4457                           ; 1 bytes @ 0x2
  4458                           
  4459  0022                     ?_i2c_driver_setBusCollisionISR:	
  4460                           ; 1 bytes @ 0x2
  4461                           
  4462  0022                     ?_i2c_driver_setI2cISR:	
  4463                           ; 1 bytes @ 0x2
  4464                           
  4465  0022                     ??_do_I2C_RESET:	
  4466                           ; 1 bytes @ 0x2
  4467                           
  4468  0022                     ??_do_I2C_IDLE:	
  4469                           ; 1 bytes @ 0x2
  4470                           
  4471  0022                     ??_do_I2C_SEND_RESTART_READ:	
  4472                           ; 1 bytes @ 0x2
  4473                           
  4474  0022                     ??_do_I2C_SEND_RESTART_WRITE:	
  4475                           ; 1 bytes @ 0x2
  4476                           
  4477  0022                     ??_do_I2C_SEND_RESTART:	
  4478                           ; 1 bytes @ 0x2
  4479                           
  4480  0022                     ??_do_I2C_SEND_STOP:	
  4481                           ; 1 bytes @ 0x2
  4482                           
  4483  0022                     ??_do_I2C_RCEN:	
  4484                           ; 1 bytes @ 0x2
  4485                           
  4486  0022                     ??_do_I2C_DO_ACK:	
  4487                           ; 1 bytes @ 0x2
  4488                           
  4489  0022                     ??_do_I2C_DO_NACK_STOP:	
  4490                           ; 1 bytes @ 0x2
  4491                           
  4492  0022                     ??_do_I2C_DO_NACK_RESTART:	
  4493                           ; 1 bytes @ 0x2
  4494                           
  4495  0022                     ?_drawPixel:	
  4496                           ; 1 bytes @ 0x2
  4497                           
  4498  0022                     ??_clearPixels:	
  4499                           ; 1 bytes @ 0x2
  4500                           
  4501  0022                     ??_reverse:	
  4502                           ; 1 bytes @ 0x2
  4503                           
  4504  0022                     ?_FLASH_ReadWord:	
  4505                           ; 1 bytes @ 0x2
  4506                           
  4507  0022                     ?___awdiv:	
  4508                           ; 2 bytes @ 0x2
  4509                           
  4510  0022                     ?___lwdiv:	
  4511                           ; 2 bytes @ 0x2
  4512                           
  4513  0022                     ?___lmul:	
  4514                           ; 2 bytes @ 0x2
  4515                           
  4516  0022                     mssp_waitForEvent@timeout:	
  4517                           ; 4 bytes @ 0x2
  4518                           
  4519  0022                     i2c_driver_TXData@d:	
  4520                           ; 1 bytes @ 0x2
  4521                           
  4522  0022                     drawPixel@y:	
  4523                           ; 1 bytes @ 0x2
  4524                           
  4525  0022                     IOCCF4_SetInterruptHandler@InterruptHandler:	
  4526                           ; 1 bytes @ 0x2
  4527                           
  4528  0022                     i2c_driver_setBusCollisionISR@f:	
  4529                           ; 2 bytes @ 0x2
  4530                           
  4531  0022                     i2c_driver_setI2cISR@f:	
  4532                           ; 2 bytes @ 0x2
  4533                           
  4534  0022                     i2c_setBuffer@buffer:	
  4535                           ; 2 bytes @ 0x2
  4536                           
  4537  0022                     setCallBack@cb:	
  4538                           ; 2 bytes @ 0x2
  4539                           
  4540  0022                     FLASH_ReadWord@flashAddr:	
  4541                           ; 2 bytes @ 0x2
  4542                           
  4543  0022                     FLASH_EraseBlock@startAddr:	
  4544                           ; 2 bytes @ 0x2
  4545                           
  4546  0022                     ___awdiv@divisor:	
  4547                           ; 2 bytes @ 0x2
  4548                           
  4549  0022                     ___lwdiv@divisor:	
  4550                           ; 2 bytes @ 0x2
  4551                           
  4552  0022                     ___lmul@multiplier:	
  4553                           ; 2 bytes @ 0x2
  4554                           
  4555                           
  4556                           ; 4 bytes @ 0x2
  4557  0022                     	ds	1
  4558  0023                     ??_do_I2C_SEND_ADR_READ:	
  4559  0023                     ??_do_I2C_SEND_ADR_WRITE:	
  4560                           ; 1 bytes @ 0x3
  4561                           
  4562  0023                     i2c_close@ret:	
  4563                           ; 1 bytes @ 0x3
  4564                           
  4565  0023                     drawPixel@color:	
  4566                           ; 1 bytes @ 0x3
  4567                           
  4568                           
  4569                           ; 1 bytes @ 0x3
  4570  0023                     	ds	1
  4571  0024                     ??_IOCCF4_SetInterruptHandler:	
  4572  0024                     ??_i2c_open:	
  4573                           ; 1 bytes @ 0x4
  4574                           
  4575  0024                     ??_FLASH_EraseBlock:	
  4576                           ; 1 bytes @ 0x4
  4577                           
  4578  0024                     ??_PIN_MANAGER_Initialize:	
  4579                           ; 1 bytes @ 0x4
  4580                           
  4581  0024                     ??_SYSTEM_Initialize:	
  4582                           ; 1 bytes @ 0x4
  4583                           
  4584  0024                     ??_i2c_driver_setBusCollisionISR:	
  4585                           ; 1 bytes @ 0x4
  4586                           
  4587  0024                     ??_i2c_driver_setI2cISR:	
  4588                           ; 1 bytes @ 0x4
  4589                           
  4590  0024                     ??_FLASH_ReadWord:	
  4591                           ; 1 bytes @ 0x4
  4592                           
  4593  0024                     ??_drawPixel:	
  4594                           ; 1 bytes @ 0x4
  4595                           
  4596  0024                     setCallBack@p:	
  4597                           ; 1 bytes @ 0x4
  4598                           
  4599  0024                     FLASH_ReadWord@GIEBitValue:	
  4600                           ; 1 bytes @ 0x4
  4601                           
  4602  0024                     FLASH_EraseBlock@GIEBitValue:	
  4603                           ; 1 bytes @ 0x4
  4604                           
  4605  0024                     i2c_setBuffer@bufferSize:	
  4606                           ; 1 bytes @ 0x4
  4607                           
  4608  0024                     ___awdiv@dividend:	
  4609                           ; 2 bytes @ 0x4
  4610                           
  4611  0024                     ___lwdiv@dividend:	
  4612                           ; 2 bytes @ 0x4
  4613                           
  4614                           
  4615                           ; 2 bytes @ 0x4
  4616  0024                     	ds	1
  4617  0025                     ??_setCallBack:	
  4618  0025                     ?_FLASH_WriteBlock:	
  4619                           ; 1 bytes @ 0x5
  4620                           
  4621  0025                     i2c_open@address:	
  4622                           ; 1 bytes @ 0x5
  4623                           
  4624  0025                     reverse@b:	
  4625                           ; 1 bytes @ 0x5
  4626                           
  4627  0025                     FLASH_WriteBlock@writeAddr:	
  4628                           ; 1 bytes @ 0x5
  4629                           
  4630                           
  4631                           ; 2 bytes @ 0x5
  4632  0025                     	ds	1
  4633  0026                     ??_i2c_setBuffer:	
  4634  0026                     ??_drawWalls:	
  4635                           ; 1 bytes @ 0x6
  4636                           
  4637  0026                     ??___awdiv:	
  4638                           ; 1 bytes @ 0x6
  4639                           
  4640  0026                     ??___lwdiv:	
  4641                           ; 1 bytes @ 0x6
  4642                           
  4643  0026                     i2c_open@ret:	
  4644                           ; 1 bytes @ 0x6
  4645                           
  4646  0026                     setCallBack@idx:	
  4647                           ; 1 bytes @ 0x6
  4648                           
  4649  0026                     ___lmul@multiplicand:	
  4650                           ; 1 bytes @ 0x6
  4651                           
  4652                           
  4653                           ; 4 bytes @ 0x6
  4654  0026                     	ds	1
  4655  0027                     ?_i2c_setDataCompleteCallback:	
  4656  0027                     ?_i2c_setAddressNACKCallback:	
  4657                           ; 1 bytes @ 0x7
  4658                           
  4659  0027                     FLASH_WriteBlock@flashWordArray:	
  4660                           ; 1 bytes @ 0x7
  4661                           
  4662  0027                     ___awdiv@counter:	
  4663                           ; 1 bytes @ 0x7
  4664                           
  4665  0027                     ___lwdiv@counter:	
  4666                           ; 1 bytes @ 0x7
  4667                           
  4668  0027                     i2c_setDataCompleteCallback@cb:	
  4669                           ; 1 bytes @ 0x7
  4670                           
  4671  0027                     i2c_setAddressNACKCallback@cb:	
  4672                           ; 2 bytes @ 0x7
  4673                           
  4674                           
  4675                           ; 2 bytes @ 0x7
  4676  0027                     	ds	1
  4677  0028                     ??_FLASH_WriteBlock:	
  4678  0028                     ___awdiv@sign:	
  4679                           ; 1 bytes @ 0x8
  4680                           
  4681  0028                     ___lwdiv@quotient:	
  4682                           ; 1 bytes @ 0x8
  4683                           
  4684                           
  4685                           ; 2 bytes @ 0x8
  4686  0028                     	ds	1
  4687  0029                     i2c_setDataCompleteCallback@p:	
  4688  0029                     i2c_setAddressNACKCallback@p:	
  4689                           ; 1 bytes @ 0x9
  4690                           
  4691  0029                     ___awdiv@quotient:	
  4692                           ; 1 bytes @ 0x9
  4693                           
  4694                           
  4695                           ; 2 bytes @ 0x9
  4696  0029                     	ds	1
  4697  002A                     ??_i2c_setDataCompleteCallback:	
  4698  002A                     ??_i2c_setAddressNACKCallback:	
  4699                           ; 1 bytes @ 0xA
  4700                           
  4701  002A                     ??___lmul:	
  4702                           ; 1 bytes @ 0xA
  4703                           
  4704  002A                     ?___lwmod:	
  4705                           ; 1 bytes @ 0xA
  4706                           
  4707  002A                     drawPixel@x:	
  4708                           ; 2 bytes @ 0xA
  4709                           
  4710  002A                     ___lwmod@divisor:	
  4711                           ; 1 bytes @ 0xA
  4712                           
  4713  002A                     ___lmul@product:	
  4714                           ; 2 bytes @ 0xA
  4715                           
  4716                           
  4717                           ; 4 bytes @ 0xA
  4718  002A                     	ds	1
  4719  002B                     ?_i2c_restartWrite:	
  4720  002B                     ?_returnStop:	
  4721                           ; 1 bytes @ 0xB
  4722                           
  4723  002B                     ?_returnReset:	
  4724                           ; 1 bytes @ 0xB
  4725                           
  4726  002B                     ?_wr1RegCompleteHandler:	
  4727                           ; 1 bytes @ 0xB
  4728                           
  4729  002B                     ?_rd1RegCompleteHandler:	
  4730                           ; 1 bytes @ 0xB
  4731                           
  4732  002B                     ?_rd2RegCompleteHandler:	
  4733                           ; 1 bytes @ 0xB
  4734                           
  4735  002B                     ?_wr2RegCompleteHandler:	
  4736                           ; 1 bytes @ 0xB
  4737                           
  4738  002B                     ?_rdBlkRegCompleteHandler:	
  4739                           ; 1 bytes @ 0xB
  4740                           
  4741  002B                     wr1RegCompleteHandler@p:	
  4742                           ; 1 bytes @ 0xB
  4743                           
  4744  002B                     rd1RegCompleteHandler@p:	
  4745                           ; 1 bytes @ 0xB
  4746                           
  4747  002B                     rd2RegCompleteHandler@p:	
  4748                           ; 1 bytes @ 0xB
  4749                           
  4750  002B                     wr2RegCompleteHandler@p:	
  4751                           ; 1 bytes @ 0xB
  4752                           
  4753  002B                     rdBlkRegCompleteHandler@p:	
  4754                           ; 1 bytes @ 0xB
  4755                           
  4756  002B                     returnStop@p:	
  4757                           ; 1 bytes @ 0xB
  4758                           
  4759  002B                     returnReset@p:	
  4760                           ; 1 bytes @ 0xB
  4761                           
  4762  002B                     i2c_restartWrite@p:	
  4763                           ; 1 bytes @ 0xB
  4764                           
  4765  002B                     FLASH_WriteBlock@blockStartAddr:	
  4766                           ; 1 bytes @ 0xB
  4767                           
  4768                           
  4769                           ; 2 bytes @ 0xB
  4770  002B                     	ds	1
  4771  002C                     ??_i2c_restartWrite:	
  4772  002C                     ??_returnStop:	
  4773                           ; 1 bytes @ 0xC
  4774                           
  4775  002C                     ??_returnReset:	
  4776                           ; 1 bytes @ 0xC
  4777                           
  4778  002C                     ??_wr1RegCompleteHandler:	
  4779                           ; 1 bytes @ 0xC
  4780                           
  4781  002C                     ??_rd1RegCompleteHandler:	
  4782                           ; 1 bytes @ 0xC
  4783                           
  4784  002C                     ??_rd2RegCompleteHandler:	
  4785                           ; 1 bytes @ 0xC
  4786                           
  4787  002C                     ??_wr2RegCompleteHandler:	
  4788                           ; 1 bytes @ 0xC
  4789                           
  4790  002C                     ??_rdBlkRegCompleteHandler:	
  4791                           ; 1 bytes @ 0xC
  4792                           
  4793  002C                     ??_do_I2C_DO_ADDRESS_NACK:	
  4794                           ; 1 bytes @ 0xC
  4795                           
  4796  002C                     ??_do_I2C_TX:	
  4797                           ; 1 bytes @ 0xC
  4798                           
  4799  002C                     ??_do_I2C_RX:	
  4800                           ; 1 bytes @ 0xC
  4801                           
  4802  002C                     ??_do_I2C_TX_EMPTY:	
  4803                           ; 1 bytes @ 0xC
  4804                           
  4805  002C                     ___lwmod@dividend:	
  4806                           ; 1 bytes @ 0xC
  4807                           
  4808                           
  4809                           ; 2 bytes @ 0xC
  4810  002C                     	ds	1
  4811  002D                     FLASH_WriteBlock@GIEBitValue:	
  4812                           
  4813                           ; 1 bytes @ 0xD
  4814  002D                     	ds	1
  4815  002E                     ??___lwmod:	
  4816  002E                     ?_rand:	
  4817                           ; 1 bytes @ 0xE
  4818                           
  4819  002E                     FLASH_WriteBlock@i:	
  4820                           ; 2 bytes @ 0xE
  4821                           
  4822  002E                     _do_I2C_TX$943:	
  4823                           ; 1 bytes @ 0xE
  4824                           
  4825                           
  4826                           ; 2 bytes @ 0xE
  4827  002E                     	ds	1
  4828  002F                     ?_FLASH_WriteWord:	
  4829  002F                     ___lwmod@counter:	
  4830                           ; 1 bytes @ 0xF
  4831                           
  4832  002F                     FLASH_WriteWord@flashAddr:	
  4833                           ; 1 bytes @ 0xF
  4834                           
  4835                           
  4836                           ; 2 bytes @ 0xF
  4837  002F                     	ds	1
  4838  0030                     ??_i2c_ISR:	
  4839  0030                     ??_rand:	
  4840                           ; 1 bytes @ 0x10
  4841                           
  4842                           
  4843                           ; 1 bytes @ 0x10
  4844  0030                     	ds	1
  4845  0031                     ??_i2c_poller:	
  4846  0031                     ??_i2c_masterOperation:	
  4847                           ; 1 bytes @ 0x11
  4848                           
  4849  0031                     FLASH_WriteWord@ramBuf:	
  4850                           ; 1 bytes @ 0x11
  4851                           
  4852                           
  4853                           ; 1 bytes @ 0x11
  4854  0031                     	ds	1
  4855  0032                     i2c_masterOperation@read:	
  4856  0032                     FLASH_WriteWord@word:	
  4857                           ; 1 bytes @ 0x12
  4858                           
  4859                           
  4860                           ; 2 bytes @ 0x12
  4861  0032                     	ds	1
  4862  0033                     i2c_masterOperation@ret:	
  4863                           
  4864                           ; 1 bytes @ 0x13
  4865  0033                     	ds	1
  4866  0034                     ??_i2c_masterWrite:	
  4867  0034                     ?_i2c_writeNBytes:	
  4868                           ; 1 bytes @ 0x14
  4869                           
  4870  0034                     ??_FLASH_WriteWord:	
  4871                           ; 1 bytes @ 0x14
  4872                           
  4873  0034                     i2c_writeNBytes@data:	
  4874                           ; 1 bytes @ 0x14
  4875                           
  4876                           
  4877                           ; 1 bytes @ 0x14
  4878  0034                     	ds	1
  4879  0035                     ?___awmod:	
  4880  0035                     FLASH_WriteWord@offset:	
  4881                           ; 2 bytes @ 0x15
  4882                           
  4883  0035                     i2c_writeNBytes@len:	
  4884                           ; 1 bytes @ 0x15
  4885                           
  4886  0035                     ___awmod@divisor:	
  4887                           ; 2 bytes @ 0x15
  4888                           
  4889                           
  4890                           ; 2 bytes @ 0x15
  4891  0035                     	ds	1
  4892  0036                     FLASH_WriteWord@blockStartAddr:	
  4893                           
  4894                           ; 2 bytes @ 0x16
  4895  0036                     	ds	1
  4896  0037                     ??_i2c_writeNBytes:	
  4897  0037                     i2c_writeNBytes@address:	
  4898                           ; 1 bytes @ 0x17
  4899                           
  4900  0037                     ___awmod@dividend:	
  4901                           ; 1 bytes @ 0x17
  4902                           
  4903                           
  4904                           ; 2 bytes @ 0x17
  4905  0037                     	ds	1
  4906  0038                     ??_writeDisplay:	
  4907  0038                     ??_initializeDisplay:	
  4908                           ; 1 bytes @ 0x18
  4909                           
  4910  0038                     FLASH_WriteWord@i:	
  4911                           ; 1 bytes @ 0x18
  4912                           
  4913                           
  4914                           ; 1 bytes @ 0x18
  4915  0038                     	ds	1
  4916  0039                     ??___awmod:	
  4917                           
  4918                           ; 1 bytes @ 0x19
  4919  0039                     	ds	1
  4920  003A                     ___awmod@counter:	
  4921                           
  4922                           ; 1 bytes @ 0x1A
  4923  003A                     	ds	1
  4924  003B                     ___awmod@sign:	
  4925                           
  4926                           ; 1 bytes @ 0x1B
  4927  003B                     	ds	1
  4928  003C                     ?_random:	
  4929  003C                     random@upper:	
  4930                           ; 1 bytes @ 0x1C
  4931                           
  4932                           
  4933                           ; 1 bytes @ 0x1C
  4934  003C                     	ds	1
  4935  003D                     ??_random:	
  4936  003D                     ?_writeWord:	
  4937                           ; 1 bytes @ 0x1D
  4938                           
  4939  003D                     writeWord@len:	
  4940                           ; 1 bytes @ 0x1D
  4941                           
  4942                           
  4943                           ; 1 bytes @ 0x1D
  4944  003D                     	ds	1
  4945  003E                     ??_writeWord:	
  4946                           
  4947                           ; 1 bytes @ 0x1E
  4948  003E                     	ds	1
  4949  003F                     random@lower:	
  4950                           
  4951                           ; 1 bytes @ 0x1F
  4952  003F                     	ds	1
  4953  0040                     ??_shiftWalls:	
  4954                           
  4955                           ; 1 bytes @ 0x20
  4956  0040                     	ds	15
  4957  004F                     writeWord@shiftValue:	
  4958                           
  4959                           ; 1 bytes @ 0x2F
  4960  004F                     	ds	1
  4961  0050                     writeWord@text:	
  4962                           
  4963                           ; 1 bytes @ 0x30
  4964  0050                     	ds	1
  4965  0051                     writeWord@idx:	
  4966                           
  4967                           ; 1 bytes @ 0x31
  4968  0051                     	ds	1
  4969  0052                     writeWord@k:	
  4970                           
  4971                           ; 1 bytes @ 0x32
  4972  0052                     	ds	1
  4973  0053                     ??_write:	
  4974                           
  4975                           ; 1 bytes @ 0x33
  4976  0053                     	ds	1
  4977  0054                     ??_endGame:	
  4978                           
  4979                           ; 1 bytes @ 0x34
  4980  0054                     	ds	2
  4981  0056                     endGame@played:	
  4982                           
  4983                           ; 1 bytes @ 0x36
  4984  0056                     	ds	1
  4985  0057                     ??_main:	
  4986                           
  4987                           ; 1 bytes @ 0x37
  4988  0057                     	ds	2
  4989                           
  4990                           	psect	maintext
  4991  0398                     __pmaintext:	
  4992 ;;
  4993 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  4994 ;;
  4995 ;; *************** function _main *****************
  4996 ;; Defined at:
  4997 ;;		line 521 in file "main.c"
  4998 ;; Parameters:    Size  Location     Type
  4999 ;;		None
  5000 ;; Auto vars:     Size  Location     Type
  5001 ;;		None
  5002 ;; Return value:  Size  Location     Type
  5003 ;;                  1    wreg      void 
  5004 ;; Registers used:
  5005 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5006 ;; Tracked objects:
  5007 ;;		On entry : B1F/0
  5008 ;;		On exit  : 0/0
  5009 ;;		Unchanged: 0/0
  5010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5011 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5012 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5013 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5014 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5015 ;;Total ram usage:        2 bytes
  5016 ;; Hardware stack levels required when called:   19
  5017 ;; This function calls:
  5018 ;;		_FLASH_ReadWord
  5019 ;;		_FLASH_WriteWord
  5020 ;;		_IOCCF4_SetInterruptHandler
  5021 ;;		_SYSTEM_Initialize
  5022 ;;		_clearPixels
  5023 ;;		_drawPixel
  5024 ;;		_drawWalls
  5025 ;;		_endGame
  5026 ;;		_initializeDisplay
  5027 ;;		_shiftWalls
  5028 ;;		_writeDisplay
  5029 ;; This function is called by:
  5030 ;;		Startup code after reset
  5031 ;; This function uses a non-reentrant model
  5032 ;;
  5033                           
  5034                           
  5035                           ;psect for function _main
  5036  0398                     _main:	
  5037                           
  5038                           ;main.c: 522: SYSTEM_Initialize();
  5039                           
  5040                           ;incstack = 0
  5041 ;; hardware stack exceeded
  5042                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5043  0398  3188  208D  3183   	fcall	_SYSTEM_Initialize
  5044                           
  5045                           ;main.c: 523: (INTCONbits.GIE = 1);
  5046  039B  178B               	bsf	11,7	;volatile
  5047                           
  5048                           ;main.c: 524: (INTCONbits.PEIE = 1);
  5049  039C  170B               	bsf	11,6	;volatile
  5050                           
  5051                           ;main.c: 526: initializeDisplay();
  5052  039D  3185  25A6  3183   	fcall	_initializeDisplay
  5053                           
  5054                           ;main.c: 528: IOCCF4_SetInterruptHandler(buttonInterrupt);
  5055  03A0  3092               	movlw	low _buttonInterrupt
  5056  03A1  0020               	movlb	0	; select bank0
  5057  03A2  00A2               	movwf	IOCCF4_SetInterruptHandler@InterruptHandler
  5058  03A3  3009               	movlw	high _buttonInterrupt
  5059  03A4  00A3               	movwf	IOCCF4_SetInterruptHandler@InterruptHandler+1
  5060  03A5  3188  2087  3183   	fcall	_IOCCF4_SetInterruptHandler
  5061                           
  5062                           ;main.c: 530: hiscore = FLASH_ReadWord(hiscore_addr);
  5063  03A8  0021               	movlb	1	; select bank1
  5064  03A9  0844               	movf	(_hiscore_addr+1)^(0+128),w
  5065  03AA  0020               	movlb	0	; select bank0
  5066  03AB  00A3               	movwf	FLASH_ReadWord@flashAddr+1
  5067  03AC  0021               	movlb	1	; select bank1
  5068  03AD  0843               	movf	_hiscore_addr^(0+128),w
  5069  03AE  0020               	movlb	0	; select bank0
  5070  03AF  00A2               	movwf	FLASH_ReadWord@flashAddr
  5071  03B0  318B  231C  3183   	fcall	_FLASH_ReadWord
  5072  03B3  0020               	movlb	0	; select bank0
  5073  03B4  0823               	movf	?_FLASH_ReadWord+1,w
  5074  03B5  0021               	movlb	1	; select bank1
  5075  03B6  00BF               	movwf	(_hiscore+1)^(0+128)
  5076  03B7  0020               	movlb	0	; select bank0
  5077  03B8  0822               	movf	?_FLASH_ReadWord,w
  5078  03B9  0021               	movlb	1	; select bank1
  5079  03BA  00BE               	movwf	_hiscore^(0+128)
  5080                           
  5081                           ;main.c: 531: if (hiscore == 16383) {
  5082  03BB  0A3E               	incf	_hiscore^(0+128),w
  5083  03BC  303F               	movlw	63
  5084  03BD  1903               	skipnz
  5085  03BE  063F               	xorwf	(_hiscore+1)^(0+128),w
  5086  03BF  1D03               	btfss	3,2
  5087  03C0  2BD9               	goto	l7471
  5088                           
  5089                           ;main.c: 532: hiscore = 0;
  5090  03C1  01BE               	clrf	_hiscore^(0+128)
  5091  03C2  01BF               	clrf	(_hiscore+1)^(0+128)
  5092                           
  5093                           ;main.c: 533: FLASH_WriteWord(hiscore_addr, zerobuf, hiscore);
  5094  03C3  0844               	movf	(_hiscore_addr+1)^(0+128),w
  5095  03C4  0020               	movlb	0	; select bank0
  5096  03C5  00B0               	movwf	FLASH_WriteWord@flashAddr+1
  5097  03C6  0021               	movlb	1	; select bank1
  5098  03C7  0843               	movf	_hiscore_addr^(0+128),w
  5099  03C8  0020               	movlb	0	; select bank0
  5100  03C9  00AF               	movwf	FLASH_WriteWord@flashAddr
  5101  03CA  3020               	movlw	(low (_zerobuf| (0+768)))& (0+255)
  5102  03CB  00D7               	movwf	??_main
  5103  03CC  0857               	movf	??_main,w
  5104  03CD  00B1               	movwf	FLASH_WriteWord@ramBuf
  5105  03CE  0021               	movlb	1	; select bank1
  5106  03CF  083F               	movf	(_hiscore+1)^(0+128),w
  5107  03D0  0020               	movlb	0	; select bank0
  5108  03D1  00B3               	movwf	FLASH_WriteWord@word+1
  5109  03D2  0021               	movlb	1	; select bank1
  5110  03D3  083E               	movf	_hiscore^(0+128),w
  5111  03D4  0020               	movlb	0	; select bank0
  5112  03D5  00B2               	movwf	FLASH_WriteWord@word
  5113  03D6  318E  26E0  3183   	fcall	_FLASH_WriteWord
  5114  03D9                     l7471:	
  5115                           
  5116                           ;main.c: 534: }
  5117                           ;main.c: 536: endGame(0);
  5118  03D9  3000               	movlw	0
  5119  03DA  3184  24B4  3183   	fcall	_endGame
  5120  03DD                     l7473:	
  5121                           ;main.c: 538: while (1) {
  5122                           
  5123                           
  5124                           ;main.c: 539: drawPixel(1, elevation, 3);
  5125  03DD  0020               	movlb	0	; select bank0
  5126  03DE  0863               	movf	_elevation,w
  5127  03DF  00D7               	movwf	??_main
  5128  03E0  0857               	movf	??_main,w
  5129  03E1  00A2               	movwf	drawPixel@y
  5130  03E2  3003               	movlw	3
  5131  03E3  00D8               	movwf	??_main+1
  5132  03E4  0858               	movf	??_main+1,w
  5133  03E5  00A3               	movwf	drawPixel@color
  5134  03E6  3001               	movlw	1
  5135  03E7  3182  2230  3183   	fcall	_drawPixel
  5136                           
  5137                           ;main.c: 540: drawWalls();
  5138  03EA  3186  26BD  3183   	fcall	_drawWalls
  5139                           
  5140                           ;main.c: 541: writeDisplay();
  5141  03ED  3186  2607  3183   	fcall	_writeDisplay
  5142                           
  5143                           ;main.c: 542: clearPixels();
  5144  03F0  3189  21E0  3183   	fcall	_clearPixels
  5145                           
  5146                           ;main.c: 543: if (elevation < 0 || elevation > 7 || (walls[elevation] & 0b01000000)) {
  5147  03F3  3008               	movlw	8
  5148  03F4  0020               	movlb	0	; select bank0
  5149  03F5  0263               	subwf	_elevation,w
  5150  03F6  1803               	skipnc
  5151  03F7  2BFF               	goto	l7485
  5152  03F8  0863               	movf	_elevation,w
  5153  03F9  3E30               	addlw	(low (_walls| (0+256)))& (0+255)
  5154  03FA  0086               	movwf	6
  5155  03FB  3001               	movlw	1	; select bank2/3
  5156  03FC  0087               	movwf	7
  5157  03FD  1F01               	btfss	1,6
  5158  03FE  2C03               	goto	l7487
  5159  03FF                     l7485:	
  5160                           
  5161                           ;main.c: 544: endGame(1);
  5162  03FF  3001               	movlw	1
  5163  0400  3184  24B4  3183   	fcall	_endGame
  5164  0403                     l7487:	
  5165                           
  5166                           ;main.c: 545: }
  5167                           ;main.c: 546: if (gravityCounter >= 80) {
  5168  0403  3050               	movlw	80
  5169  0404  0020               	movlb	0	; select bank0
  5170  0405  0262               	subwf	_gravityCounter,w
  5171  0406  1C03               	skipc
  5172  0407  2C16               	goto	l7499
  5173                           
  5174                           ;main.c: 547: if (fall) {
  5175  0408  0869               	movf	_fall,w
  5176  0409  1903               	btfsc	3,2
  5177  040A  2C10               	goto	l7493
  5178                           
  5179                           ;main.c: 548: elevation += 1;
  5180  040B  3001               	movlw	1
  5181  040C  00D7               	movwf	??_main
  5182  040D  0857               	movf	??_main,w
  5183  040E  07E3               	addwf	_elevation,f
  5184                           
  5185                           ;main.c: 549: } else {
  5186  040F  2C14               	goto	l7497
  5187  0410                     l7493:	
  5188                           
  5189                           ;main.c: 550: elevation -= 1;
  5190  0410  3001               	movlw	1
  5191  0411  02E3               	subwf	_elevation,f
  5192                           
  5193                           ;main.c: 551: fall = 1;
  5194  0412  01E9               	clrf	_fall
  5195  0413  0AE9               	incf	_fall,f
  5196  0414                     l7497:	
  5197                           
  5198                           ;main.c: 552: }
  5199                           ;main.c: 553: gravityCounter = 0;
  5200  0414  01E2               	clrf	_gravityCounter
  5201                           
  5202                           ;main.c: 554: } else {
  5203  0415  2C1A               	goto	l7501
  5204  0416                     l7499:	
  5205                           
  5206                           ;main.c: 555: gravityCounter++;
  5207  0416  3001               	movlw	1
  5208  0417  00D7               	movwf	??_main
  5209  0418  0857               	movf	??_main,w
  5210  0419  07E2               	addwf	_gravityCounter,f
  5211  041A                     l7501:	
  5212                           
  5213                           ;main.c: 556: }
  5214                           ;main.c: 557: if (shiftCounter >= 100) {
  5215  041A  3000               	movlw	0
  5216  041B  025A               	subwf	_shiftCounter+1,w
  5217  041C  3064               	movlw	100
  5218  041D  1903               	skipnz
  5219  041E  0259               	subwf	_shiftCounter,w
  5220  041F  1C03               	skipc
  5221  0420  2C28               	goto	l7507
  5222                           
  5223                           ;main.c: 558: shiftWalls();
  5224  0421  3184  242D  3183   	fcall	_shiftWalls
  5225                           
  5226                           ;main.c: 559: shiftCounter = 0;
  5227  0424  0020               	movlb	0	; select bank0
  5228  0425  01D9               	clrf	_shiftCounter
  5229  0426  01DA               	clrf	_shiftCounter+1
  5230                           
  5231                           ;main.c: 560: } else {
  5232  0427  2BDD               	goto	l7473
  5233  0428                     l7507:	
  5234                           
  5235                           ;main.c: 561: shiftCounter++;
  5236  0428  3001               	movlw	1
  5237  0429  07D9               	addwf	_shiftCounter,f
  5238  042A  3000               	movlw	0
  5239  042B  3DDA               	addwfc	_shiftCounter+1,f
  5240  042C  2BDD               	goto	l7473
  5241  042D                     __end_of_main:	
  5242                           
  5243                           	psect	text1
  5244  042D                     __ptext1:	
  5245 ;; *************** function _shiftWalls *****************
  5246 ;; Defined at:
  5247 ;;		line 375 in file "main.c"
  5248 ;; Parameters:    Size  Location     Type
  5249 ;;		None
  5250 ;; Auto vars:     Size  Location     Type
  5251 ;;		None
  5252 ;; Return value:  Size  Location     Type
  5253 ;;                  1    wreg      void 
  5254 ;; Registers used:
  5255 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5256 ;; Tracked objects:
  5257 ;;		On entry : 0/0
  5258 ;;		On exit  : 0/0
  5259 ;;		Unchanged: 0/0
  5260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5261 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5262 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5263 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5264 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5265 ;;Total ram usage:        6 bytes
  5266 ;; Hardware stack levels used:    1
  5267 ;; Hardware stack levels required when called:    9
  5268 ;; This function calls:
  5269 ;;		_random
  5270 ;; This function is called by:
  5271 ;;		_main
  5272 ;; This function uses a non-reentrant model
  5273 ;;
  5274                           
  5275                           
  5276                           ;psect for function _shiftWalls
  5277  042D                     _shiftWalls:	
  5278                           
  5279                           ;main.c: 376: for (i = 0; i < 8; i++) {
  5280                           
  5281                           ;incstack = 0
  5282                           ; Regs used in _shiftWalls: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5283  042D  0020               	movlb	0	; select bank0
  5284  042E  01E1               	clrf	_i
  5285  042F  3008               	movlw	8
  5286  0430  0261               	subwf	_i,w
  5287  0431  1803               	btfsc	3,0
  5288  0432  2C49               	goto	l4079
  5289  0433                     l4073:	
  5290                           
  5291                           ;main.c: 377: walls[i] = walls[i] << 1;
  5292  0433  0861               	movf	_i,w
  5293  0434  3E30               	addlw	(low (_walls| (0+256)))& (0+255)
  5294  0435  0086               	movwf	6
  5295  0436  3001               	movlw	1	; select bank2/3
  5296  0437  0087               	movwf	7
  5297  0438  3501               	lslf	1,w
  5298  0439  00C0               	movwf	??_shiftWalls
  5299  043A  0861               	movf	_i,w
  5300  043B  3E30               	addlw	(low (_walls| (0+256)))& (0+255)
  5301  043C  0086               	movwf	6
  5302  043D  3001               	movlw	1	; select bank2/3
  5303  043E  0087               	movwf	7
  5304  043F  0840               	movf	??_shiftWalls,w
  5305  0440  0081               	movwf	1
  5306  0441  3001               	movlw	1
  5307  0442  00C0               	movwf	??_shiftWalls
  5308  0443  0840               	movf	??_shiftWalls,w
  5309  0444  07E1               	addwf	_i,f
  5310  0445  3008               	movlw	8
  5311  0446  0261               	subwf	_i,w
  5312  0447  1C03               	skipc
  5313  0448  2C33               	goto	l4073
  5314  0449                     l4079:	
  5315                           
  5316                           ;main.c: 378: }
  5317                           ;main.c: 379: if (createWall == 3) {
  5318  0449  3003               	movlw	3
  5319  044A  0664               	xorwf	_createWall,w
  5320  044B  1D03               	btfss	3,2
  5321  044C  2CAE               	goto	l4103
  5322                           
  5323                           ;main.c: 380: wallHeight = random(4, 7);
  5324  044D  3007               	movlw	7
  5325  044E  00C0               	movwf	??_shiftWalls
  5326  044F  0840               	movf	??_shiftWalls,w
  5327  0450  00BC               	movwf	random@upper
  5328  0451  3004               	movlw	4
  5329  0452  318A  22FD  3184   	fcall	_random
  5330  0455  0020               	movlb	0	; select bank0
  5331  0456  00C1               	movwf	??_shiftWalls+1
  5332  0457  0841               	movf	??_shiftWalls+1,w
  5333  0458  00E0               	movwf	_wallHeight
  5334                           
  5335                           ;main.c: 381: topHalf = random(1, wallHeight);
  5336  0459  0860               	movf	_wallHeight,w
  5337  045A  00C0               	movwf	??_shiftWalls
  5338  045B  0840               	movf	??_shiftWalls,w
  5339  045C  00BC               	movwf	random@upper
  5340  045D  3001               	movlw	1
  5341  045E  318A  22FD  3184   	fcall	_random
  5342  0461  0020               	movlb	0	; select bank0
  5343  0462  00C1               	movwf	??_shiftWalls+1
  5344  0463  0841               	movf	??_shiftWalls+1,w
  5345  0464  00DF               	movwf	_topHalf
  5346                           
  5347                           ;main.c: 382: for (i = 0; i < topHalf; i++) {
  5348  0465  01E1               	clrf	_i
  5349  0466                     l4089:	
  5350  0466  085F               	movf	_topHalf,w
  5351  0467  0261               	subwf	_i,w
  5352  0468  1803               	btfsc	3,0
  5353  0469  2C75               	goto	l4091
  5354                           
  5355                           ;main.c: 383: walls[i] |= 1;
  5356  046A  0861               	movf	_i,w
  5357  046B  3E30               	addlw	(low (_walls| (0+256)))& (0+255)
  5358  046C  0086               	movwf	6
  5359  046D  3001               	movlw	1	; select bank2/3
  5360  046E  0087               	movwf	7
  5361  046F  1401               	bsf	1,0
  5362  0470  3001               	movlw	1
  5363  0471  00C0               	movwf	??_shiftWalls
  5364  0472  0840               	movf	??_shiftWalls,w
  5365  0473  07E1               	addwf	_i,f
  5366  0474  2C66               	goto	l4089
  5367  0475                     l4091:	
  5368                           
  5369                           ;main.c: 384: }
  5370                           ;main.c: 385: for (i = 7; i >= 8 - (wallHeight - topHalf); i--) {
  5371  0475  3007               	movlw	7
  5372  0476  00C0               	movwf	??_shiftWalls
  5373  0477  0840               	movf	??_shiftWalls,w
  5374  0478  00E1               	movwf	_i
  5375  0479                     l4097:	
  5376  0479  085F               	movf	_topHalf,w
  5377  047A  00C0               	movwf	??_shiftWalls
  5378  047B  01C1               	clrf	??_shiftWalls+1
  5379  047C  09C0               	comf	??_shiftWalls,f
  5380  047D  09C1               	comf	??_shiftWalls+1,f
  5381  047E  0AC0               	incf	??_shiftWalls,f
  5382  047F  1903               	skipnz
  5383  0480  0AC1               	incf	??_shiftWalls+1,f
  5384  0481  0860               	movf	_wallHeight,w
  5385  0482  0740               	addwf	??_shiftWalls,w
  5386  0483  00C2               	movwf	??_shiftWalls+2
  5387  0484  0841               	movf	??_shiftWalls+1,w
  5388  0485  1803               	skipnc
  5389  0486  0A41               	incf	??_shiftWalls+1,w
  5390  0487  00C3               	movwf	??_shiftWalls+3
  5391  0488  09C2               	comf	??_shiftWalls+2,f
  5392  0489  09C3               	comf	??_shiftWalls+3,f
  5393  048A  0AC2               	incf	??_shiftWalls+2,f
  5394  048B  1903               	skipnz
  5395  048C  0AC3               	incf	??_shiftWalls+3,f
  5396  048D  0842               	movf	??_shiftWalls+2,w
  5397  048E  3E08               	addlw	8
  5398  048F  00C4               	movwf	??_shiftWalls+4
  5399  0490  3000               	movlw	0
  5400  0491  3D43               	addwfc	??_shiftWalls+3,w
  5401  0492  00C5               	movwf	??_shiftWalls+5
  5402  0493  0845               	movf	??_shiftWalls+5,w
  5403  0494  3A80               	xorlw	128
  5404  0495  3C80               	sublw	128
  5405  0496  1D03               	skipz
  5406  0497  2C9A               	goto	u2745
  5407  0498  0844               	movf	??_shiftWalls+4,w
  5408  0499  0261               	subwf	_i,w
  5409  049A                     u2745:	
  5410  049A  1C03               	btfss	3,0
  5411  049B  2CA6               	goto	l4099
  5412                           
  5413                           ;main.c: 386: walls[i] |= 1;
  5414  049C  0020               	movlb	0	; select bank0
  5415  049D  0861               	movf	_i,w
  5416  049E  3E30               	addlw	(low (_walls| (0+256)))& (0+255)
  5417  049F  0086               	movwf	6
  5418  04A0  3001               	movlw	1	; select bank2/3
  5419  04A1  0087               	movwf	7
  5420  04A2  1401               	bsf	1,0
  5421  04A3  3001               	movlw	1
  5422  04A4  02E1               	subwf	_i,f
  5423  04A5  2C79               	goto	l4097
  5424  04A6                     l4099:	
  5425                           
  5426                           ;main.c: 387: }
  5427                           ;main.c: 388: createWall = 0;
  5428  04A6  0020               	movlb	0	; select bank0
  5429  04A7  01E4               	clrf	_createWall
  5430                           
  5431                           ;main.c: 389: score++;
  5432  04A8  3001               	movlw	1
  5433  04A9  0021               	movlb	1	; select bank1
  5434  04AA  07C0               	addwf	_score^(0+128),f
  5435  04AB  3000               	movlw	0
  5436  04AC  3DC1               	addwfc	(_score+1)^(0+128),f
  5437                           
  5438                           ;main.c: 390: } else {
  5439  04AD  0008               	return
  5440  04AE                     l4103:	
  5441                           
  5442                           ;main.c: 391: createWall++;
  5443  04AE  3001               	movlw	1
  5444  04AF  0020               	movlb	0	; select bank0
  5445  04B0  00C0               	movwf	??_shiftWalls
  5446  04B1  0840               	movf	??_shiftWalls,w
  5447  04B2  07E4               	addwf	_createWall,f
  5448  04B3  0008               	return
  5449  04B4                     __end_of_shiftWalls:	
  5450                           
  5451                           	psect	text2
  5452  0AFD                     __ptext2:	
  5453 ;; *************** function _random *****************
  5454 ;; Defined at:
  5455 ;;		line 349 in file "main.c"
  5456 ;; Parameters:    Size  Location     Type
  5457 ;;  lower           1    wreg     unsigned char 
  5458 ;;  upper           1   28[BANK0 ] unsigned char 
  5459 ;; Auto vars:     Size  Location     Type
  5460 ;;  lower           1   31[BANK0 ] unsigned char 
  5461 ;; Return value:  Size  Location     Type
  5462 ;;                  1    wreg      unsigned char 
  5463 ;; Registers used:
  5464 ;;		wreg, status,2, status,0, pclath, cstack
  5465 ;; Tracked objects:
  5466 ;;		On entry : 0/0
  5467 ;;		On exit  : 0/0
  5468 ;;		Unchanged: 0/0
  5469 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5470 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5471 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5472 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5473 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5474 ;;Total ram usage:        4 bytes
  5475 ;; Hardware stack levels used:    1
  5476 ;; Hardware stack levels required when called:    8
  5477 ;; This function calls:
  5478 ;;		___awmod
  5479 ;;		_rand
  5480 ;; This function is called by:
  5481 ;;		_shiftWalls
  5482 ;; This function uses a non-reentrant model
  5483 ;;
  5484                           
  5485                           
  5486                           ;psect for function _random
  5487  0AFD                     _random:	
  5488                           
  5489                           ;incstack = 0
  5490                           ; Regs used in _random: [wreg+status,2+status,0+pclath+cstack]
  5491                           ;random@lower stored from wreg
  5492  0AFD  0020               	movlb	0	; select bank0
  5493  0AFE  00BF               	movwf	random@lower
  5494                           
  5495                           ;main.c: 350: return rand() % (upper - lower) + lower;
  5496  0AFF  083F               	movf	random@lower,w
  5497  0B00  00BD               	movwf	??_random
  5498  0B01  01BE               	clrf	??_random+1
  5499  0B02  09BD               	comf	??_random,f
  5500  0B03  09BE               	comf	??_random+1,f
  5501  0B04  0ABD               	incf	??_random,f
  5502  0B05  1903               	skipnz
  5503  0B06  0ABE               	incf	??_random+1,f
  5504  0B07  083C               	movf	random@upper,w
  5505  0B08  073D               	addwf	??_random,w
  5506  0B09  00B5               	movwf	___awmod@divisor
  5507  0B0A  083E               	movf	??_random+1,w
  5508  0B0B  1803               	skipnc
  5509  0B0C  0A3E               	incf	??_random+1,w
  5510  0B0D  00B6               	movwf	___awmod@divisor+1
  5511  0B0E  318E  2665  318A   	fcall	_rand
  5512  0B11  0020               	movlb	0	; select bank0
  5513  0B12  082F               	movf	?_rand+1,w
  5514  0B13  00B8               	movwf	___awmod@dividend+1
  5515  0B14  082E               	movf	?_rand,w
  5516  0B15  00B7               	movwf	___awmod@dividend
  5517  0B16  318F  2725         	fcall	___awmod
  5518  0B18  0020               	movlb	0	; select bank0
  5519  0B19  0835               	movf	?___awmod,w
  5520  0B1A  073F               	addwf	random@lower,w
  5521  0B1B  0008               	return
  5522  0B1C                     __end_of_random:	
  5523                           
  5524                           	psect	text3
  5525  0E65                     __ptext3:	
  5526 ;; *************** function _rand *****************
  5527 ;; Defined at:
  5528 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\rand.c"
  5529 ;; Parameters:    Size  Location     Type
  5530 ;;		None
  5531 ;; Auto vars:     Size  Location     Type
  5532 ;;		None
  5533 ;; Return value:  Size  Location     Type
  5534 ;;                  2   14[BANK0 ] int 
  5535 ;; Registers used:
  5536 ;;		wreg, status,2, status,0, pclath, cstack
  5537 ;; Tracked objects:
  5538 ;;		On entry : 0/0
  5539 ;;		On exit  : 0/0
  5540 ;;		Unchanged: 0/0
  5541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5542 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5543 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5544 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5545 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5546 ;;Total ram usage:        7 bytes
  5547 ;; Hardware stack levels used:    1
  5548 ;; Hardware stack levels required when called:    7
  5549 ;; This function calls:
  5550 ;;		___lmul
  5551 ;; This function is called by:
  5552 ;;		_random
  5553 ;; This function uses a non-reentrant model
  5554 ;;
  5555                           
  5556                           
  5557                           ;psect for function _rand
  5558  0E65                     _rand:	
  5559                           
  5560                           ;incstack = 0
  5561                           ; Regs used in _rand: [wreg+status,2+status,0+pclath+cstack]
  5562  0E65  0020               	movlb	0	; select bank0
  5563  0E66  0868               	movf	_randx+3,w
  5564  0E67  00A5               	movwf	___lmul@multiplier+3
  5565  0E68  0867               	movf	_randx+2,w
  5566  0E69  00A4               	movwf	___lmul@multiplier+2
  5567  0E6A  0866               	movf	_randx+1,w
  5568  0E6B  00A3               	movwf	___lmul@multiplier+1
  5569  0E6C  0865               	movf	_randx,w
  5570  0E6D  00A2               	movwf	___lmul@multiplier
  5571  0E6E  3041               	movlw	65
  5572  0E6F  00A9               	movwf	___lmul@multiplicand+3
  5573  0E70  30C6               	movlw	198
  5574  0E71  00A8               	movwf	___lmul@multiplicand+2
  5575  0E72  304E               	movlw	78
  5576  0E73  00A7               	movwf	___lmul@multiplicand+1
  5577  0E74  306D               	movlw	109
  5578  0E75  00A6               	movwf	___lmul@multiplicand
  5579  0E76  318D  2595  318E   	fcall	___lmul
  5580  0E79  0020               	movlb	0	; select bank0
  5581  0E7A  0825               	movf	?___lmul+3,w
  5582  0E7B  00E8               	movwf	_randx+3
  5583  0E7C  0824               	movf	?___lmul+2,w
  5584  0E7D  00E7               	movwf	_randx+2
  5585  0E7E  0823               	movf	?___lmul+1,w
  5586  0E7F  00E6               	movwf	_randx+1
  5587  0E80  0822               	movf	?___lmul,w
  5588  0E81  00E5               	movwf	_randx
  5589  0E82  3039               	movlw	57
  5590  0E83  07E5               	addwf	_randx,f
  5591  0E84  3030               	movlw	48
  5592  0E85  3DE6               	addwfc	_randx+1,f
  5593  0E86  3000               	movlw	0
  5594  0E87  3DE7               	addwfc	_randx+2,f
  5595  0E88  3000               	movlw	0
  5596  0E89  3DE8               	addwfc	_randx+3,f
  5597  0E8A  0865               	movf	_randx,w
  5598  0E8B  00B0               	movwf	??_rand
  5599  0E8C  0866               	movf	_randx+1,w
  5600  0E8D  00B1               	movwf	??_rand+1
  5601  0E8E  0867               	movf	_randx+2,w
  5602  0E8F  00B2               	movwf	??_rand+2
  5603  0E90  0868               	movf	_randx+3,w
  5604  0E91  00B3               	movwf	??_rand+3
  5605  0E92  3010               	movlw	16
  5606  0E93  00B4               	movwf	??_rand+4
  5607  0E94                     u2085:	
  5608  0E94  37B3               	asrf	??_rand+3,f
  5609  0E95  0CB2               	rrf	??_rand+2,f
  5610  0E96  0CB1               	rrf	??_rand+1,f
  5611  0E97  0CB0               	rrf	??_rand,f
  5612  0E98  0BB4               	decfsz	??_rand+4,f
  5613  0E99  2E94               	goto	u2085
  5614  0E9A  30FF               	movlw	255
  5615  0E9B  0530               	andwf	??_rand,w
  5616  0E9C  00AE               	movwf	?_rand
  5617  0E9D  307F               	movlw	127
  5618  0E9E  0531               	andwf	??_rand+1,w
  5619  0E9F  00AF               	movwf	?_rand+1
  5620  0EA0  0008               	return
  5621  0EA1                     __end_of_rand:	
  5622                           
  5623                           	psect	text4
  5624  0D95                     __ptext4:	
  5625 ;; *************** function ___lmul *****************
  5626 ;; Defined at:
  5627 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
  5628 ;; Parameters:    Size  Location     Type
  5629 ;;  multiplier      4    2[BANK0 ] unsigned long 
  5630 ;;  multiplicand    4    6[BANK0 ] unsigned long 
  5631 ;; Auto vars:     Size  Location     Type
  5632 ;;  product         4   10[BANK0 ] unsigned long 
  5633 ;; Return value:  Size  Location     Type
  5634 ;;                  4    2[BANK0 ] unsigned long 
  5635 ;; Registers used:
  5636 ;;		wreg, status,2, status,0
  5637 ;; Tracked objects:
  5638 ;;		On entry : 0/0
  5639 ;;		On exit  : 0/0
  5640 ;;		Unchanged: 0/0
  5641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5642 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5643 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5644 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5645 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5646 ;;Total ram usage:       12 bytes
  5647 ;; Hardware stack levels used:    1
  5648 ;; Hardware stack levels required when called:    6
  5649 ;; This function calls:
  5650 ;;		Nothing
  5651 ;; This function is called by:
  5652 ;;		_rand
  5653 ;; This function uses a non-reentrant model
  5654 ;;
  5655                           
  5656                           
  5657                           ;psect for function ___lmul
  5658  0D95                     ___lmul:	
  5659                           
  5660                           ;incstack = 0
  5661                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  5662  0D95  3000               	movlw	0
  5663  0D96  0020               	movlb	0	; select bank0
  5664  0D97  00AD               	movwf	___lmul@product+3
  5665  0D98  3000               	movlw	0
  5666  0D99  00AC               	movwf	___lmul@product+2
  5667  0D9A  3000               	movlw	0
  5668  0D9B  00AB               	movwf	___lmul@product+1
  5669  0D9C  3000               	movlw	0
  5670  0D9D  00AA               	movwf	___lmul@product
  5671  0D9E                     l3359:	
  5672  0D9E  1C22               	btfss	___lmul@multiplier,0
  5673  0D9F  2DA8               	goto	l3363
  5674  0DA0  0826               	movf	___lmul@multiplicand,w
  5675  0DA1  07AA               	addwf	___lmul@product,f
  5676  0DA2  0827               	movf	___lmul@multiplicand+1,w
  5677  0DA3  3DAB               	addwfc	___lmul@product+1,f
  5678  0DA4  0828               	movf	___lmul@multiplicand+2,w
  5679  0DA5  3DAC               	addwfc	___lmul@product+2,f
  5680  0DA6  0829               	movf	___lmul@multiplicand+3,w
  5681  0DA7  3DAD               	addwfc	___lmul@product+3,f
  5682  0DA8                     l3363:	
  5683  0DA8  3001               	movlw	1
  5684  0DA9                     u2005:	
  5685  0DA9  35A6               	lslf	___lmul@multiplicand,f
  5686  0DAA  0DA7               	rlf	___lmul@multiplicand+1,f
  5687  0DAB  0DA8               	rlf	___lmul@multiplicand+2,f
  5688  0DAC  0DA9               	rlf	___lmul@multiplicand+3,f
  5689  0DAD  0B89               	decfsz	9,f
  5690  0DAE  2DA9               	goto	u2005
  5691  0DAF  3001               	movlw	1
  5692  0DB0                     u2015:	
  5693  0DB0  36A5               	lsrf	___lmul@multiplier+3,f
  5694  0DB1  0CA4               	rrf	___lmul@multiplier+2,f
  5695  0DB2  0CA3               	rrf	___lmul@multiplier+1,f
  5696  0DB3  0CA2               	rrf	___lmul@multiplier,f
  5697  0DB4  0B89               	decfsz	9,f
  5698  0DB5  2DB0               	goto	u2015
  5699  0DB6  0825               	movf	___lmul@multiplier+3,w
  5700  0DB7  0424               	iorwf	___lmul@multiplier+2,w
  5701  0DB8  0423               	iorwf	___lmul@multiplier+1,w
  5702  0DB9  0422               	iorwf	___lmul@multiplier,w
  5703  0DBA  1D03               	skipz
  5704  0DBB  2D9E               	goto	l3359
  5705  0DBC  082D               	movf	___lmul@product+3,w
  5706  0DBD  00A5               	movwf	?___lmul+3
  5707  0DBE  082C               	movf	___lmul@product+2,w
  5708  0DBF  00A4               	movwf	?___lmul+2
  5709  0DC0  082B               	movf	___lmul@product+1,w
  5710  0DC1  00A3               	movwf	?___lmul+1
  5711  0DC2  082A               	movf	___lmul@product,w
  5712  0DC3  00A2               	movwf	?___lmul
  5713  0DC4  0008               	return
  5714  0DC5                     __end_of___lmul:	
  5715                           
  5716                           	psect	text5
  5717  0F25                     __ptext5:	
  5718 ;; *************** function ___awmod *****************
  5719 ;; Defined at:
  5720 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
  5721 ;; Parameters:    Size  Location     Type
  5722 ;;  divisor         2   21[BANK0 ] int 
  5723 ;;  dividend        2   23[BANK0 ] int 
  5724 ;; Auto vars:     Size  Location     Type
  5725 ;;  sign            1   27[BANK0 ] unsigned char 
  5726 ;;  counter         1   26[BANK0 ] unsigned char 
  5727 ;; Return value:  Size  Location     Type
  5728 ;;                  2   21[BANK0 ] int 
  5729 ;; Registers used:
  5730 ;;		wreg, status,2, status,0
  5731 ;; Tracked objects:
  5732 ;;		On entry : 0/0
  5733 ;;		On exit  : 0/0
  5734 ;;		Unchanged: 0/0
  5735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5736 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5737 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5738 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5739 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5740 ;;Total ram usage:        7 bytes
  5741 ;; Hardware stack levels used:    1
  5742 ;; Hardware stack levels required when called:    6
  5743 ;; This function calls:
  5744 ;;		Nothing
  5745 ;; This function is called by:
  5746 ;;		_random
  5747 ;; This function uses a non-reentrant model
  5748 ;;
  5749                           
  5750                           
  5751                           ;psect for function ___awmod
  5752  0F25                     ___awmod:	
  5753                           
  5754                           ;incstack = 0
  5755                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  5756  0F25  0020               	movlb	0	; select bank0
  5757  0F26  01BB               	clrf	___awmod@sign
  5758  0F27  1FB8               	btfss	___awmod@dividend+1,7
  5759  0F28  2F30               	goto	l3519
  5760  0F29  09B7               	comf	___awmod@dividend,f
  5761  0F2A  09B8               	comf	___awmod@dividend+1,f
  5762  0F2B  0AB7               	incf	___awmod@dividend,f
  5763  0F2C  1903               	skipnz
  5764  0F2D  0AB8               	incf	___awmod@dividend+1,f
  5765  0F2E  01BB               	clrf	___awmod@sign
  5766  0F2F  0ABB               	incf	___awmod@sign,f
  5767  0F30                     l3519:	
  5768  0F30  1FB6               	btfss	___awmod@divisor+1,7
  5769  0F31  2F37               	goto	l3523
  5770  0F32  09B5               	comf	___awmod@divisor,f
  5771  0F33  09B6               	comf	___awmod@divisor+1,f
  5772  0F34  0AB5               	incf	___awmod@divisor,f
  5773  0F35  1903               	skipnz
  5774  0F36  0AB6               	incf	___awmod@divisor+1,f
  5775  0F37                     l3523:	
  5776  0F37  0835               	movf	___awmod@divisor,w
  5777  0F38  0436               	iorwf	___awmod@divisor+1,w
  5778  0F39  1903               	btfsc	3,2
  5779  0F3A  2F5E               	goto	l3541
  5780  0F3B  01BA               	clrf	___awmod@counter
  5781  0F3C  0ABA               	incf	___awmod@counter,f
  5782  0F3D                     l3531:	
  5783  0F3D  1BB6               	btfsc	___awmod@divisor+1,7
  5784  0F3E  2F49               	goto	l3533
  5785  0F3F  3001               	movlw	1
  5786  0F40                     u2205:	
  5787  0F40  35B5               	lslf	___awmod@divisor,f
  5788  0F41  0DB6               	rlf	___awmod@divisor+1,f
  5789  0F42  0B89               	decfsz	9,f
  5790  0F43  2F40               	goto	u2205
  5791  0F44  3001               	movlw	1
  5792  0F45  00B9               	movwf	??___awmod
  5793  0F46  0839               	movf	??___awmod,w
  5794  0F47  07BA               	addwf	___awmod@counter,f
  5795  0F48  2F3D               	goto	l3531
  5796  0F49                     l3533:	
  5797  0F49  0836               	movf	___awmod@divisor+1,w
  5798  0F4A  0238               	subwf	___awmod@dividend+1,w
  5799  0F4B  1D03               	skipz
  5800  0F4C  2F4F               	goto	u2225
  5801  0F4D  0835               	movf	___awmod@divisor,w
  5802  0F4E  0237               	subwf	___awmod@dividend,w
  5803  0F4F                     u2225:	
  5804  0F4F  1C03               	skipc
  5805  0F50  2F55               	goto	l3537
  5806  0F51  0835               	movf	___awmod@divisor,w
  5807  0F52  02B7               	subwf	___awmod@dividend,f
  5808  0F53  0836               	movf	___awmod@divisor+1,w
  5809  0F54  3BB8               	subwfb	___awmod@dividend+1,f
  5810  0F55                     l3537:	
  5811  0F55  3001               	movlw	1
  5812  0F56                     u2235:	
  5813  0F56  36B6               	lsrf	___awmod@divisor+1,f
  5814  0F57  0CB5               	rrf	___awmod@divisor,f
  5815  0F58  0B89               	decfsz	9,f
  5816  0F59  2F56               	goto	u2235
  5817  0F5A  3001               	movlw	1
  5818  0F5B  02BA               	subwf	___awmod@counter,f
  5819  0F5C  1D03               	btfss	3,2
  5820  0F5D  2F49               	goto	l3533
  5821  0F5E                     l3541:	
  5822  0F5E  083B               	movf	___awmod@sign,w
  5823  0F5F  1903               	btfsc	3,2
  5824  0F60  2F66               	goto	l3545
  5825  0F61  09B7               	comf	___awmod@dividend,f
  5826  0F62  09B8               	comf	___awmod@dividend+1,f
  5827  0F63  0AB7               	incf	___awmod@dividend,f
  5828  0F64  1903               	skipnz
  5829  0F65  0AB8               	incf	___awmod@dividend+1,f
  5830  0F66                     l3545:	
  5831  0F66  0838               	movf	___awmod@dividend+1,w
  5832  0F67  00B6               	movwf	?___awmod+1
  5833  0F68  0837               	movf	___awmod@dividend,w
  5834  0F69  00B5               	movwf	?___awmod
  5835  0F6A  0008               	return
  5836  0F6B                     __end_of___awmod:	
  5837                           
  5838                           	psect	text6
  5839  05A6                     __ptext6:	
  5840 ;; *************** function _initializeDisplay *****************
  5841 ;; Defined at:
  5842 ;;		line 330 in file "main.c"
  5843 ;; Parameters:    Size  Location     Type
  5844 ;;		None
  5845 ;; Auto vars:     Size  Location     Type
  5846 ;;		None
  5847 ;; Return value:  Size  Location     Type
  5848 ;;                  1    wreg      void 
  5849 ;; Registers used:
  5850 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5851 ;; Tracked objects:
  5852 ;;		On entry : 0/0
  5853 ;;		On exit  : 0/0
  5854 ;;		Unchanged: 0/0
  5855 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5856 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5857 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5858 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5859 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5860 ;;Total ram usage:        1 bytes
  5861 ;; Hardware stack levels used:    1
  5862 ;; Hardware stack levels required when called:   15
  5863 ;; This function calls:
  5864 ;;		_i2c_writeNBytes
  5865 ;; This function is called by:
  5866 ;;		_main
  5867 ;; This function uses a non-reentrant model
  5868 ;;
  5869                           
  5870                           
  5871                           ;psect for function _initializeDisplay
  5872  05A6                     _initializeDisplay:	
  5873                           
  5874                           ;main.c: 331: for (i = 0; i < 8; i++) {
  5875                           
  5876                           ;incstack = 0
  5877                           ; Regs used in _initializeDisplay: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5878  05A6  0020               	movlb	0	; select bank0
  5879  05A7  01E1               	clrf	_i
  5880  05A8  3008               	movlw	8
  5881  05A9  0261               	subwf	_i,w
  5882  05AA  1803               	btfsc	3,0
  5883  05AB  2DBC               	goto	l7239
  5884  05AC                     l7233:	
  5885                           
  5886                           ;main.c: 332: pixelbuffer[i] = 0;
  5887  05AC  3561               	lslf	_i,w
  5888  05AD  3E20               	addlw	(low (_pixelbuffer| (0+256)))& (0+255)
  5889  05AE  0086               	movwf	6
  5890  05AF  3001               	movlw	1	; select bank2/3
  5891  05B0  0087               	movwf	7
  5892  05B1  3000               	movlw	0
  5893  05B2  3FC0               	movwi [0]fsr1
  5894  05B3  3FC1               	movwi [1]fsr1
  5895  05B4  3001               	movlw	1
  5896  05B5  00B8               	movwf	??_initializeDisplay
  5897  05B6  0838               	movf	??_initializeDisplay,w
  5898  05B7  07E1               	addwf	_i,f
  5899  05B8  3008               	movlw	8
  5900  05B9  0261               	subwf	_i,w
  5901  05BA  1C03               	skipc
  5902  05BB  2DAC               	goto	l7233
  5903  05BC                     l7239:	
  5904                           
  5905                           ;main.c: 333: }
  5906                           ;main.c: 334: for (i = 0; i < 8; i++) {
  5907  05BC  01E1               	clrf	_i
  5908  05BD  3008               	movlw	8
  5909  05BE  0261               	subwf	_i,w
  5910  05BF  1803               	btfsc	3,0
  5911  05C0  2DCF               	goto	l7251
  5912  05C1                     l7245:	
  5913                           
  5914                           ;main.c: 335: writebuffer[i] = 0;
  5915  05C1  0861               	movf	_i,w
  5916  05C2  3ED2               	addlw	(low (_writebuffer| (0+256)))& (0+255)
  5917  05C3  0086               	movwf	6
  5918  05C4  3001               	movlw	1	; select bank3/4
  5919  05C5  0087               	movwf	7
  5920  05C6  0181               	clrf	1
  5921  05C7  3001               	movlw	1
  5922  05C8  00B8               	movwf	??_initializeDisplay
  5923  05C9  0838               	movf	??_initializeDisplay,w
  5924  05CA  07E1               	addwf	_i,f
  5925  05CB  3008               	movlw	8
  5926  05CC  0261               	subwf	_i,w
  5927  05CD  1C03               	skipc
  5928  05CE  2DC1               	goto	l7245
  5929  05CF                     l7251:	
  5930                           
  5931                           ;main.c: 336: }
  5932                           ;main.c: 337: for (i = 0; i < 8; i++) {
  5933  05CF  01E1               	clrf	_i
  5934  05D0  3008               	movlw	8
  5935  05D1  0261               	subwf	_i,w
  5936  05D2  1803               	btfsc	3,0
  5937  05D3  2DE2               	goto	l7263
  5938  05D4                     l7257:	
  5939                           
  5940                           ;main.c: 338: walls[i] = 0;
  5941  05D4  0861               	movf	_i,w
  5942  05D5  3E30               	addlw	(low (_walls| (0+256)))& (0+255)
  5943  05D6  0086               	movwf	6
  5944  05D7  3001               	movlw	1	; select bank2/3
  5945  05D8  0087               	movwf	7
  5946  05D9  0181               	clrf	1
  5947  05DA  3001               	movlw	1
  5948  05DB  00B8               	movwf	??_initializeDisplay
  5949  05DC  0838               	movf	??_initializeDisplay,w
  5950  05DD  07E1               	addwf	_i,f
  5951  05DE  3008               	movlw	8
  5952  05DF  0261               	subwf	_i,w
  5953  05E0  1C03               	skipc
  5954  05E1  2DD4               	goto	l7257
  5955  05E2                     l7263:	
  5956                           
  5957                           ;main.c: 339: }
  5958                           ;main.c: 341: writebuffer[0] = 0x21;
  5959  05E2  3021               	movlw	33
  5960  05E3  00B8               	movwf	??_initializeDisplay
  5961  05E4  0838               	movf	??_initializeDisplay,w
  5962  05E5  0023               	movlb	3	; select bank3
  5963  05E6  00D2               	movwf	_writebuffer^(0+384)
  5964                           
  5965                           ;main.c: 342: i2c_writeNBytes(0x70, writebuffer, 1);
  5966  05E7  30D2               	movlw	(low (_writebuffer| (0+256)))& (0+255)
  5967  05E8  0020               	movlb	0	; select bank0
  5968  05E9  00B8               	movwf	??_initializeDisplay
  5969  05EA  0838               	movf	??_initializeDisplay,w
  5970  05EB  00B4               	movwf	i2c_writeNBytes@data
  5971  05EC  3001               	movlw	1
  5972  05ED  00B5               	movwf	i2c_writeNBytes@len
  5973  05EE  3000               	movlw	0
  5974  05EF  00B6               	movwf	i2c_writeNBytes@len+1
  5975  05F0  3070               	movlw	112
  5976  05F1  318C  24BD  3185   	fcall	_i2c_writeNBytes
  5977                           
  5978                           ;main.c: 345: writebuffer[0] = 0x80 | 0x01;
  5979  05F4  3081               	movlw	129
  5980  05F5  0020               	movlb	0	; select bank0
  5981  05F6  00B8               	movwf	??_initializeDisplay
  5982  05F7  0838               	movf	??_initializeDisplay,w
  5983  05F8  0023               	movlb	3	; select bank3
  5984  05F9  00D2               	movwf	_writebuffer^(0+384)
  5985                           
  5986                           ;main.c: 346: i2c_writeNBytes(0x70, writebuffer, 1);
  5987  05FA  30D2               	movlw	(low (_writebuffer| (0+256)))& (0+255)
  5988  05FB  0020               	movlb	0	; select bank0
  5989  05FC  00B8               	movwf	??_initializeDisplay
  5990  05FD  0838               	movf	??_initializeDisplay,w
  5991  05FE  00B4               	movwf	i2c_writeNBytes@data
  5992  05FF  3001               	movlw	1
  5993  0600  00B5               	movwf	i2c_writeNBytes@len
  5994  0601  3000               	movlw	0
  5995  0602  00B6               	movwf	i2c_writeNBytes@len+1
  5996  0603  3070               	movlw	112
  5997  0604  318C  24BD         	fcall	_i2c_writeNBytes
  5998  0606  0008               	return
  5999  0607                     __end_of_initializeDisplay:	
  6000                           
  6001                           	psect	text7
  6002  04B4                     __ptext7:	
  6003 ;; *************** function _endGame *****************
  6004 ;; Defined at:
  6005 ;;		line 489 in file "main.c"
  6006 ;; Parameters:    Size  Location     Type
  6007 ;;  played          1    wreg     unsigned char 
  6008 ;; Auto vars:     Size  Location     Type
  6009 ;;  played          1   54[BANK0 ] unsigned char 
  6010 ;; Return value:  Size  Location     Type
  6011 ;;                  1    wreg      void 
  6012 ;; Registers used:
  6013 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6014 ;; Tracked objects:
  6015 ;;		On entry : 0/0
  6016 ;;		On exit  : 0/0
  6017 ;;		Unchanged: 0/0
  6018 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6019 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6020 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6021 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6022 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6023 ;;Total ram usage:        3 bytes
  6024 ;; Hardware stack levels used:    1
  6025 ;; Hardware stack levels required when called:   18
  6026 ;; This function calls:
  6027 ;;		_FLASH_WriteWord
  6028 ;;		_clearPixels
  6029 ;;		_write
  6030 ;;		_writeDisplay
  6031 ;; This function is called by:
  6032 ;;		_main
  6033 ;; This function uses a non-reentrant model
  6034 ;;
  6035                           
  6036                           
  6037                           ;psect for function _endGame
  6038  04B4                     _endGame:	
  6039                           
  6040                           ;incstack = 0
  6041 ;; hardware stack exceeded
  6042                           ; Regs used in _endGame: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6043                           ;endGame@played stored from wreg
  6044  04B4  0020               	movlb	0	; select bank0
  6045  04B5  00D6               	movwf	endGame@played
  6046                           
  6047                           ;main.c: 490: if (played) {
  6048  04B6  0856               	movf	endGame@played,w
  6049  04B7  1903               	btfsc	3,2
  6050  04B8  2D09               	goto	l7299
  6051                           
  6052                           ;main.c: 491: for (i = 0; i < 8; i++) {
  6053  04B9  01E1               	clrf	_i
  6054  04BA  3008               	movlw	8
  6055  04BB  0261               	subwf	_i,w
  6056  04BC  1803               	btfsc	3,0
  6057  04BD  2CCF               	goto	l7283
  6058  04BE                     l7277:	
  6059                           
  6060                           ;main.c: 492: pixelbuffer[i] = 0xFF00;
  6061  04BE  3561               	lslf	_i,w
  6062  04BF  3E20               	addlw	(low (_pixelbuffer| (0+256)))& (0+255)
  6063  04C0  0086               	movwf	6
  6064  04C1  3001               	movlw	1	; select bank2/3
  6065  04C2  0087               	movwf	7
  6066  04C3  3000               	movlw	0
  6067  04C4  3FC0               	movwi [0]fsr1
  6068  04C5  30FF               	movlw	255
  6069  04C6  3FC1               	movwi [1]fsr1
  6070  04C7  3001               	movlw	1
  6071  04C8  00D4               	movwf	??_endGame
  6072  04C9  0854               	movf	??_endGame,w
  6073  04CA  07E1               	addwf	_i,f
  6074  04CB  3008               	movlw	8
  6075  04CC  0261               	subwf	_i,w
  6076  04CD  1C03               	skipc
  6077  04CE  2CBE               	goto	l7277
  6078  04CF                     l7283:	
  6079                           
  6080                           ;main.c: 493: }
  6081                           ;main.c: 494: writeDisplay();
  6082  04CF  3186  2607  3184   	fcall	_writeDisplay
  6083                           
  6084                           ;main.c: 495: _delay((unsigned long)((200)*(32000000/4000.0)));
  6085  04D2  3009               	movlw	9
  6086  04D3  0020               	movlb	0	; select bank0
  6087  04D4  00D5               	movwf	??_endGame+1
  6088  04D5  301E               	movlw	30
  6089  04D6  00D4               	movwf	??_endGame
  6090  04D7  30E4               	movlw	228
  6091  04D8                     u6487:	
  6092  04D8  0B89               	decfsz	9,f
  6093  04D9  2CD8               	goto	u6487
  6094  04DA  0BD4               	decfsz	??_endGame,f
  6095  04DB  2CD8               	goto	u6487
  6096  04DC  0BD5               	decfsz	??_endGame+1,f
  6097  04DD  2CD8               	goto	u6487
  6098  04DE  0000               	nop
  6099                           
  6100                           ;main.c: 496: clearPixels();
  6101  04DF  3189  21E0  3184   	fcall	_clearPixels
  6102                           
  6103                           ;main.c: 497: if (score > hiscore) {
  6104  04E2  0021               	movlb	1	; select bank1
  6105  04E3  0841               	movf	(_score+1)^(0+128),w
  6106  04E4  023F               	subwf	(_hiscore+1)^(0+128),w
  6107  04E5  1D03               	skipz
  6108  04E6  2CE9               	goto	u6145
  6109  04E7  0840               	movf	_score^(0+128),w
  6110  04E8  023E               	subwf	_hiscore^(0+128),w
  6111  04E9                     u6145:	
  6112  04E9  1803               	skipnc
  6113  04EA  2D07               	goto	l7297
  6114                           
  6115                           ;main.c: 498: hiscore = score;
  6116  04EB  0841               	movf	(_score+1)^(0+128),w
  6117  04EC  00BF               	movwf	(_hiscore+1)^(0+128)
  6118  04ED  0840               	movf	_score^(0+128),w
  6119  04EE  00BE               	movwf	_hiscore^(0+128)
  6120                           
  6121                           ;main.c: 499: FLASH_WriteWord(hiscore_addr, zerobuf, hiscore);
  6122  04EF  0844               	movf	(_hiscore_addr+1)^(0+128),w
  6123  04F0  0020               	movlb	0	; select bank0
  6124  04F1  00B0               	movwf	FLASH_WriteWord@flashAddr+1
  6125  04F2  0021               	movlb	1	; select bank1
  6126  04F3  0843               	movf	_hiscore_addr^(0+128),w
  6127  04F4  0020               	movlb	0	; select bank0
  6128  04F5  00AF               	movwf	FLASH_WriteWord@flashAddr
  6129  04F6  3020               	movlw	(low (_zerobuf| (0+768)))& (0+255)
  6130  04F7  00D4               	movwf	??_endGame
  6131  04F8  0854               	movf	??_endGame,w
  6132  04F9  00B1               	movwf	FLASH_WriteWord@ramBuf
  6133  04FA  0021               	movlb	1	; select bank1
  6134  04FB  083F               	movf	(_hiscore+1)^(0+128),w
  6135  04FC  0020               	movlb	0	; select bank0
  6136  04FD  00B3               	movwf	FLASH_WriteWord@word+1
  6137  04FE  0021               	movlb	1	; select bank1
  6138  04FF  083E               	movf	_hiscore^(0+128),w
  6139  0500  0020               	movlb	0	; select bank0
  6140  0501  00B2               	movwf	FLASH_WriteWord@word
  6141  0502  318E  26E0  3184   	fcall	_FLASH_WriteWord
  6142                           
  6143                           ;main.c: 500: write(10);
  6144  0505  300A               	movlw	10
  6145  0506  2D0A               	goto	L1
  6146  0507                     l7297:	
  6147                           ;main.c: 501: } else {
  6148                           
  6149                           
  6150                           ;main.c: 502: write(12);
  6151  0507  300C               	movlw	12
  6152  0508  2D0A               	goto	L1
  6153  0509                     l7299:	
  6154                           ;main.c: 503: }
  6155                           ;main.c: 504: } else {
  6156                           
  6157                           
  6158                           ;main.c: 505: write(11);
  6159  0509  300B               	movlw	11
  6160  050A                     L1:	
  6161  050A  3180  20A3  3184   	fcall	_write
  6162                           
  6163                           ;main.c: 506: }
  6164                           ;main.c: 507: clearPixels();
  6165  050D  3189  21E0  3184   	fcall	_clearPixels
  6166                           
  6167                           ;main.c: 508: writeDisplay();
  6168  0510  3186  2607  3184   	fcall	_writeDisplay
  6169                           
  6170                           ;main.c: 509: for (i = 0; i < 8; i++) {
  6171  0513  0020               	movlb	0	; select bank0
  6172  0514  01E1               	clrf	_i
  6173  0515  3008               	movlw	8
  6174  0516  0261               	subwf	_i,w
  6175  0517  1803               	btfsc	3,0
  6176  0518  2D27               	goto	l7317
  6177  0519                     l7311:	
  6178                           
  6179                           ;main.c: 510: walls[i] = 0;
  6180  0519  0861               	movf	_i,w
  6181  051A  3E30               	addlw	(low (_walls| (0+256)))& (0+255)
  6182  051B  0086               	movwf	6
  6183  051C  3001               	movlw	1	; select bank2/3
  6184  051D  0087               	movwf	7
  6185  051E  0181               	clrf	1
  6186  051F  3001               	movlw	1
  6187  0520  00D4               	movwf	??_endGame
  6188  0521  0854               	movf	??_endGame,w
  6189  0522  07E1               	addwf	_i,f
  6190  0523  3008               	movlw	8
  6191  0524  0261               	subwf	_i,w
  6192  0525  1C03               	skipc
  6193  0526  2D19               	goto	l7311
  6194  0527                     l7317:	
  6195                           
  6196                           ;main.c: 511: }
  6197                           ;main.c: 512: writeDisplay();
  6198  0527  3186  2607  3184   	fcall	_writeDisplay
  6199                           
  6200                           ;main.c: 513: start = 0;
  6201  052A  0021               	movlb	1	; select bank1
  6202  052B  01C2               	clrf	_start^(0+128)
  6203  052C                     l7321:	
  6204                           ;main.c: 514: while (!start);
  6205                           
  6206  052C  0842               	movf	_start^(0+128),w
  6207  052D  1903               	btfsc	3,2
  6208  052E  2D2C               	goto	l7321
  6209                           
  6210                           ;main.c: 515: elevation = 3;
  6211  052F  3003               	movlw	3
  6212  0530  0020               	movlb	0	; select bank0
  6213  0531  00D4               	movwf	??_endGame
  6214  0532  0854               	movf	??_endGame,w
  6215  0533  00E3               	movwf	_elevation
  6216                           
  6217                           ;main.c: 516: gravityCounter = 0;
  6218  0534  01E2               	clrf	_gravityCounter
  6219                           
  6220                           ;main.c: 517: shiftCounter = 0;
  6221  0535  01D9               	clrf	_shiftCounter
  6222  0536  01DA               	clrf	_shiftCounter+1
  6223                           
  6224                           ;main.c: 518: score = 0;
  6225  0537  0021               	movlb	1	; select bank1
  6226  0538  01C0               	clrf	_score^(0+128)
  6227  0539  01C1               	clrf	(_score+1)^(0+128)
  6228  053A  0008               	return
  6229  053B                     __end_of_endGame:	
  6230                           
  6231                           	psect	text8
  6232  00A3                     __ptext8:	
  6233 ;; *************** function _write *****************
  6234 ;; Defined at:
  6235 ;;		line 420 in file "main.c"
  6236 ;; Parameters:    Size  Location     Type
  6237 ;;  selection       1    wreg     unsigned char 
  6238 ;; Auto vars:     Size  Location     Type
  6239 ;;  selection       1   67[BANK7 ] unsigned char 
  6240 ;;  toWrite        14   29[BANK7 ] PTR unsigned char [7]
  6241 ;;		 -> write@letter_space(8), letter_r(8), letter_o(8), letter_c(8), 
  6242 ;;		 -> letter_s(8), letter_hi(8), letter_w(8), letter_e(8), 
  6243 ;;		 -> letter_n(8), letter_space(8), number_9(8), number_8(8), 
  6244 ;;		 -> number_7(8), number_6(8), number_5(8), number_4(8), 
  6245 ;;		 -> number_3(8), number_2(8), number_1(8), number_0(8), 
  6246 ;;  toWrite        16   13[BANK7 ] PTR unsigned char [8]
  6247 ;;		 -> write@letter_space(8), letter_r(8), letter_o(8), letter_c(8), 
  6248 ;;		 -> letter_s(8), letter_hi(8), letter_w(8), letter_e(8), 
  6249 ;;		 -> letter_n(8), letter_space(8), number_9(8), number_8(8), 
  6250 ;;		 -> number_7(8), number_6(8), number_5(8), number_4(8), 
  6251 ;;		 -> number_3(8), number_2(8), number_1(8), number_0(8), 
  6252 ;;  toWrite        10   57[BANK7 ] PTR unsigned char [5]
  6253 ;;		 -> write@letter_space(8), letter_r(8), letter_o(8), letter_c(8), 
  6254 ;;		 -> letter_s(8), letter_hi(8), letter_w(8), letter_e(8), 
  6255 ;;		 -> letter_n(8), letter_space(8), number_9(8), number_8(8), 
  6256 ;;		 -> number_7(8), number_6(8), number_5(8), number_4(8), 
  6257 ;;		 -> number_3(8), number_2(8), number_1(8), number_0(8), 
  6258 ;;  toWrite        14   43[BANK7 ] PTR unsigned char [7]
  6259 ;;		 -> write@letter_space(8), letter_r(8), letter_o(8), letter_c(8), 
  6260 ;;		 -> letter_s(8), letter_hi(8), letter_w(8), letter_e(8), 
  6261 ;;		 -> letter_n(8), letter_space(8), number_9(8), number_8(8), 
  6262 ;;		 -> number_7(8), number_6(8), number_5(8), number_4(8), 
  6263 ;;		 -> number_3(8), number_2(8), number_1(8), number_0(8), 
  6264 ;;  letter_space    8    0[BANK7 ] unsigned char [8]
  6265 ;;  number          2   68[BANK7 ] unsigned int 
  6266 ;;  digit5          1   12[BANK7 ] unsigned char 
  6267 ;;  digit4          1   11[BANK7 ] unsigned char 
  6268 ;;  digit3          1   10[BANK7 ] unsigned char 
  6269 ;;  digit2          1    9[BANK7 ] unsigned char 
  6270 ;;  digit1          1    8[BANK7 ] unsigned char 
  6271 ;; Return value:  Size  Location     Type
  6272 ;;                  1    wreg      void 
  6273 ;; Registers used:
  6274 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6275 ;; Tracked objects:
  6276 ;;		On entry : 0/0
  6277 ;;		On exit  : 0/0
  6278 ;;		Unchanged: 0/0
  6279 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6280 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6281 ;;      Locals:         0       0       0       0       0       0       0       0      70       0       0       0       
      +0       0
  6282 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6283 ;;      Totals:         0       1       0       0       0       0       0       0      70       0       0       0       
      +0       0
  6284 ;;Total ram usage:       71 bytes
  6285 ;; Hardware stack levels used:    1
  6286 ;; Hardware stack levels required when called:   17
  6287 ;; This function calls:
  6288 ;;		___lwdiv
  6289 ;;		___lwmod
  6290 ;;		_writeWord
  6291 ;; This function is called by:
  6292 ;;		_endGame
  6293 ;; This function uses a non-reentrant model
  6294 ;;
  6295                           
  6296                           
  6297                           ;psect for function _write
  6298  00A3                     _write:	
  6299                           
  6300                           ;incstack = 0
  6301 ;; hardware stack exceeded
  6302                           ; Regs used in _write: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6303                           ;write@selection stored from wreg
  6304  00A3  0027               	movlb	7	; select bank7
  6305  00A4  00E3               	movwf	write@selection^(0+896)
  6306                           
  6307                           ;main.c: 421: uint16_t number = 0;
  6308  00A5  01E4               	clrf	write@number^(0+896)
  6309  00A6  01E5               	clrf	(write@number+1)^(0+896)
  6310                           
  6311                           ;main.c: 422: if (selection == 10) {
  6312  00A7  300A               	movlw	10
  6313  00A8  0663               	xorwf	write@selection^(0+896),w
  6314  00A9  1D03               	btfss	3,2
  6315  00AA  28CF               	goto	l7069
  6316                           
  6317                           ;main.c: 423: wallColor = 3;
  6318  00AB  3003               	movlw	3
  6319  00AC  0020               	movlb	0	; select bank0
  6320  00AD  00D3               	movwf	??_write
  6321  00AE  0853               	movf	??_write,w
  6322  00AF  0021               	movlb	1	; select bank1
  6323  00B0  00C5               	movwf	_wallColor^(0+128)
  6324                           
  6325                           ;main.c: 424: uint8_t * toWrite[5];
  6326                           ;main.c: 425: toWrite[0] = letter_space;
  6327  00B1  3038               	movlw	low _letter_space
  6328  00B2  0027               	movlb	7	; select bank7
  6329  00B3  00D9               	movwf	write@toWrite^(0+896)
  6330  00B4  3001               	movlw	high _letter_space
  6331  00B5  00DA               	movwf	(write@toWrite+1)^(0+896)
  6332                           
  6333                           ;main.c: 426: toWrite[1] = letter_n;
  6334  00B6  30C2               	movlw	low _letter_n
  6335  00B7  00DB               	movwf	(low ((write@toWrite| (0+768)+2)))^(0+128)
  6336  00B8  3001               	movlw	high _letter_n
  6337  00B9  00DC               	movwf	((low ((write@toWrite| (0+768)+2))+1))^(0+128)
  6338                           
  6339                           ;main.c: 427: toWrite[2] = letter_e;
  6340  00BA  3058               	movlw	low _letter_e
  6341  00BB  00DD               	movwf	(low ((write@toWrite| (0+768)+4)))^(0+128)
  6342  00BC  3001               	movlw	high _letter_e
  6343  00BD  00DE               	movwf	((low ((write@toWrite| (0+768)+4))+1))^(0+128)
  6344                           
  6345                           ;main.c: 428: toWrite[3] = letter_w;
  6346  00BE  30BA               	movlw	low _letter_w
  6347  00BF  00DF               	movwf	(low ((write@toWrite| (0+768)+6)))^(0+128)
  6348  00C0  3001               	movlw	high _letter_w
  6349  00C1  00E0               	movwf	((low ((write@toWrite| (0+768)+6))+1))^(0+128)
  6350                           
  6351                           ;main.c: 429: toWrite[4] = letter_space;
  6352  00C2  3038               	movlw	low _letter_space
  6353  00C3  00E1               	movwf	(low ((write@toWrite| (0+768)+8)))^(0+128)
  6354  00C4  3001               	movlw	high _letter_space
  6355  00C5  00E2               	movwf	((low ((write@toWrite| (0+768)+8))+1))^(0+128)
  6356                           
  6357                           ;main.c: 430: writeWord(toWrite, 32);
  6358  00C6  3020               	movlw	32
  6359  00C7  0020               	movlb	0	; select bank0
  6360  00C8  00D3               	movwf	??_write
  6361  00C9  0853               	movf	??_write,w
  6362  00CA  00BD               	movwf	writeWord@len
  6363  00CB  30D9               	movlw	(low (write@toWrite| (0+768)))& (0+255)
  6364  00CC  3182  22EC  3180   	fcall	_writeWord
  6365  00CF                     l7069:	
  6366                           
  6367                           ;main.c: 431: }
  6368                           ;main.c: 432: if (selection == 11 || selection == 10) {
  6369  00CF  300B               	movlw	11
  6370  00D0  0027               	movlb	7	; select bank7
  6371  00D1  0663               	xorwf	write@selection^(0+896),w
  6372  00D2  1903               	btfsc	3,2
  6373  00D3  28D8               	goto	l7073
  6374  00D4  300A               	movlw	10
  6375  00D5  0663               	xorwf	write@selection^(0+896),w
  6376  00D6  1D03               	btfss	3,2
  6377  00D7  2901               	goto	l7077
  6378  00D8                     l7073:	
  6379                           
  6380                           ;main.c: 433: uint8_t * toWrite[8];
  6381                           ;main.c: 434: toWrite[0] = letter_space;
  6382  00D8  3038               	movlw	low _letter_space
  6383  00D9  00AD               	movwf	write@toWrite_1169^(0+896)
  6384  00DA  3001               	movlw	high _letter_space
  6385  00DB  00AE               	movwf	(write@toWrite_1169+1)^(0+896)
  6386                           
  6387                           ;main.c: 435: toWrite[1] = letter_hi;
  6388  00DC  30B2               	movlw	low _letter_hi
  6389  00DD  00AF               	movwf	(low ((write@toWrite_1169| (0+768)+2)))^(0+128)
  6390  00DE  3001               	movlw	high _letter_hi
  6391  00DF  00B0               	movwf	((low ((write@toWrite_1169| (0+768)+2))+1))^(0+128)
  6392                           
  6393                           ;main.c: 436: toWrite[2] = letter_s;
  6394  00E0  3050               	movlw	low _letter_s
  6395  00E1  00B1               	movwf	(low ((write@toWrite_1169| (0+768)+4)))^(0+128)
  6396  00E2  3001               	movlw	high _letter_s
  6397  00E3  00B2               	movwf	((low ((write@toWrite_1169| (0+768)+4))+1))^(0+128)
  6398                           
  6399                           ;main.c: 437: toWrite[3] = letter_c;
  6400  00E4  3048               	movlw	low _letter_c
  6401  00E5  00B3               	movwf	(low ((write@toWrite_1169| (0+768)+6)))^(0+128)
  6402  00E6  3001               	movlw	high _letter_c
  6403  00E7  00B4               	movwf	((low ((write@toWrite_1169| (0+768)+6))+1))^(0+128)
  6404                           
  6405                           ;main.c: 438: toWrite[4] = letter_o;
  6406  00E8  3040               	movlw	low _letter_o
  6407  00E9  00B5               	movwf	(low ((write@toWrite_1169| (0+768)+8)))^(0+128)
  6408  00EA  3001               	movlw	high _letter_o
  6409  00EB  00B6               	movwf	((low ((write@toWrite_1169| (0+768)+8))+1))^(0+128)
  6410                           
  6411                           ;main.c: 439: toWrite[5] = letter_r;
  6412  00EC  30AA               	movlw	low _letter_r
  6413  00ED  00B7               	movwf	(low ((write@toWrite_1169| (0+768)+10)))^(0+128)
  6414  00EE  3001               	movlw	high _letter_r
  6415  00EF  00B8               	movwf	((low ((write@toWrite_1169| (0+768)+10))+1))^(0+128)
  6416                           
  6417                           ;main.c: 440: toWrite[6] = letter_e;
  6418  00F0  3058               	movlw	low _letter_e
  6419  00F1  00B9               	movwf	(low ((write@toWrite_1169| (0+768)+12)))^(0+128)
  6420  00F2  3001               	movlw	high _letter_e
  6421  00F3  00BA               	movwf	((low ((write@toWrite_1169| (0+768)+12))+1))^(0+128)
  6422                           
  6423                           ;main.c: 441: toWrite[7] = letter_space;
  6424  00F4  3038               	movlw	low _letter_space
  6425  00F5  00BB               	movwf	(low ((write@toWrite_1169| (0+768)+14)))^(0+128)
  6426  00F6  3001               	movlw	high _letter_space
  6427  00F7  00BC               	movwf	((low ((write@toWrite_1169| (0+768)+14))+1))^(0+128)
  6428                           
  6429                           ;main.c: 442: writeWord(toWrite, 56);
  6430  00F8  3038               	movlw	56
  6431  00F9  0020               	movlb	0	; select bank0
  6432  00FA  00D3               	movwf	??_write
  6433  00FB  0853               	movf	??_write,w
  6434  00FC  00BD               	movwf	writeWord@len
  6435  00FD  30AD               	movlw	(low (write@toWrite_1169| (0+768)))& (0+255)
  6436  00FE  3182  22EC  3180   	fcall	_writeWord
  6437  0101                     l7077:	
  6438                           
  6439                           ;main.c: 443: }
  6440                           ;main.c: 444: if (selection == 12) {
  6441  0101  300C               	movlw	12
  6442  0102  0027               	movlb	7	; select bank7
  6443  0103  0663               	xorwf	write@selection^(0+896),w
  6444  0104  1D03               	btfss	3,2
  6445  0105  2939               	goto	l7099
  6446                           
  6447                           ;main.c: 445: wallColor = 2;
  6448  0106  3002               	movlw	2
  6449  0107  0020               	movlb	0	; select bank0
  6450  0108  00D3               	movwf	??_write
  6451  0109  0853               	movf	??_write,w
  6452  010A  0021               	movlb	1	; select bank1
  6453  010B  00C5               	movwf	_wallColor^(0+128)
  6454                           
  6455                           ;main.c: 446: uint8_t * toWrite[7];
  6456                           ;main.c: 447: toWrite[0] = letter_space;
  6457  010C  3038               	movlw	low _letter_space
  6458  010D  0027               	movlb	7	; select bank7
  6459  010E  00BD               	movwf	write@toWrite_1170^(0+896)
  6460  010F  3001               	movlw	high _letter_space
  6461  0110  00BE               	movwf	(write@toWrite_1170+1)^(0+896)
  6462                           
  6463                           ;main.c: 448: toWrite[1] = letter_s;
  6464  0111  3050               	movlw	low _letter_s
  6465  0112  00BF               	movwf	(low ((write@toWrite_1170| (0+768)+2)))^(0+128)
  6466  0113  3001               	movlw	high _letter_s
  6467  0114  00C0               	movwf	((low ((write@toWrite_1170| (0+768)+2))+1))^(0+128)
  6468                           
  6469                           ;main.c: 449: toWrite[2] = letter_c;
  6470  0115  3048               	movlw	low _letter_c
  6471  0116  00C1               	movwf	(low ((write@toWrite_1170| (0+768)+4)))^(0+128)
  6472  0117  3001               	movlw	high _letter_c
  6473  0118  00C2               	movwf	((low ((write@toWrite_1170| (0+768)+4))+1))^(0+128)
  6474                           
  6475                           ;main.c: 450: toWrite[3] = letter_o;
  6476  0119  3040               	movlw	low _letter_o
  6477  011A  00C3               	movwf	(low ((write@toWrite_1170| (0+768)+6)))^(0+128)
  6478  011B  3001               	movlw	high _letter_o
  6479  011C  00C4               	movwf	((low ((write@toWrite_1170| (0+768)+6))+1))^(0+128)
  6480                           
  6481                           ;main.c: 451: toWrite[4] = letter_r;
  6482  011D  30AA               	movlw	low _letter_r
  6483  011E  00C5               	movwf	(low ((write@toWrite_1170| (0+768)+8)))^(0+128)
  6484  011F  3001               	movlw	high _letter_r
  6485  0120  00C6               	movwf	((low ((write@toWrite_1170| (0+768)+8))+1))^(0+128)
  6486                           
  6487                           ;main.c: 452: toWrite[5] = letter_e;
  6488  0121  3058               	movlw	low _letter_e
  6489  0122  00C7               	movwf	(low ((write@toWrite_1170| (0+768)+10)))^(0+128)
  6490  0123  3001               	movlw	high _letter_e
  6491  0124  00C8               	movwf	((low ((write@toWrite_1170| (0+768)+10))+1))^(0+128)
  6492                           
  6493                           ;main.c: 453: toWrite[6] = letter_space;
  6494  0125  3038               	movlw	low _letter_space
  6495  0126  00C9               	movwf	(low ((write@toWrite_1170| (0+768)+12)))^(0+128)
  6496  0127  3001               	movlw	high _letter_space
  6497  0128  00CA               	movwf	((low ((write@toWrite_1170| (0+768)+12))+1))^(0+128)
  6498                           
  6499                           ;main.c: 454: writeWord(toWrite, 48);
  6500  0129  3030               	movlw	48
  6501  012A  0020               	movlb	0	; select bank0
  6502  012B  00D3               	movwf	??_write
  6503  012C  0853               	movf	??_write,w
  6504  012D  00BD               	movwf	writeWord@len
  6505  012E  30BD               	movlw	(low (write@toWrite_1170| (0+768)))& (0+255)
  6506  012F  3182  22EC  3180   	fcall	_writeWord
  6507                           
  6508                           ;main.c: 455: number = score;
  6509  0132  0021               	movlb	1	; select bank1
  6510  0133  0841               	movf	(_score+1)^(0+128),w
  6511  0134  0027               	movlb	7	; select bank7
  6512  0135  00E5               	movwf	(write@number+1)^(0+896)
  6513  0136  0021               	movlb	1	; select bank1
  6514  0137  0840               	movf	_score^(0+128),w
  6515  0138  293F               	goto	L2
  6516  0139                     l7099:	
  6517                           ;main.c: 456: } else {
  6518                           
  6519                           
  6520                           ;main.c: 457: number = hiscore;
  6521  0139  0021               	movlb	1	; select bank1
  6522  013A  083F               	movf	(_hiscore+1)^(0+128),w
  6523  013B  0027               	movlb	7	; select bank7
  6524  013C  00E5               	movwf	(write@number+1)^(0+896)
  6525  013D  0021               	movlb	1	; select bank1
  6526  013E  083E               	movf	_hiscore^(0+128),w
  6527  013F                     L2:	
  6528  013F  0027               	movlb	7	; select bank7
  6529  0140  00E4               	movwf	write@number^(0+896)
  6530                           
  6531                           ;main.c: 458: }
  6532                           ;main.c: 459: uint8_t digit1,digit2,digit3,digit4,digit5;
  6533                           ;main.c: 460: digit1 = (number/10000)%10;
  6534  0141  300A               	movlw	10
  6535  0142  0020               	movlb	0	; select bank0
  6536  0143  00AA               	movwf	___lwmod@divisor
  6537  0144  3000               	movlw	0
  6538  0145  00AB               	movwf	___lwmod@divisor+1
  6539  0146  3010               	movlw	16
  6540  0147  00A2               	movwf	___lwdiv@divisor
  6541  0148  3027               	movlw	39
  6542  0149  00A3               	movwf	___lwdiv@divisor+1
  6543  014A  0027               	movlb	7	; select bank7
  6544  014B  0865               	movf	(write@number+1)^(0+896),w
  6545  014C  0020               	movlb	0	; select bank0
  6546  014D  00A5               	movwf	___lwdiv@dividend+1
  6547  014E  0027               	movlb	7	; select bank7
  6548  014F  0864               	movf	write@number^(0+896),w
  6549  0150  0020               	movlb	0	; select bank0
  6550  0151  00A4               	movwf	___lwdiv@dividend
  6551  0152  318D  25F9  3180   	fcall	___lwdiv
  6552  0155  0020               	movlb	0	; select bank0
  6553  0156  0823               	movf	?___lwdiv+1,w
  6554  0157  00AD               	movwf	___lwmod@dividend+1
  6555  0158  0822               	movf	?___lwdiv,w
  6556  0159  00AC               	movwf	___lwmod@dividend
  6557  015A  318D  253A  3180   	fcall	___lwmod
  6558  015D  0020               	movlb	0	; select bank0
  6559  015E  082A               	movf	?___lwmod,w
  6560  015F  00D3               	movwf	??_write
  6561  0160  0853               	movf	??_write,w
  6562  0161  0027               	movlb	7	; select bank7
  6563  0162  00A8               	movwf	write@digit1^(0+896)
  6564                           
  6565                           ;main.c: 461: digit2 = (number/1000)%10;
  6566  0163  300A               	movlw	10
  6567  0164  0020               	movlb	0	; select bank0
  6568  0165  00AA               	movwf	___lwmod@divisor
  6569  0166  3000               	movlw	0
  6570  0167  00AB               	movwf	___lwmod@divisor+1
  6571  0168  30E8               	movlw	232
  6572  0169  00A2               	movwf	___lwdiv@divisor
  6573  016A  3003               	movlw	3
  6574  016B  00A3               	movwf	___lwdiv@divisor+1
  6575  016C  0027               	movlb	7	; select bank7
  6576  016D  0865               	movf	(write@number+1)^(0+896),w
  6577  016E  0020               	movlb	0	; select bank0
  6578  016F  00A5               	movwf	___lwdiv@dividend+1
  6579  0170  0027               	movlb	7	; select bank7
  6580  0171  0864               	movf	write@number^(0+896),w
  6581  0172  0020               	movlb	0	; select bank0
  6582  0173  00A4               	movwf	___lwdiv@dividend
  6583  0174  318D  25F9  3180   	fcall	___lwdiv
  6584  0177  0020               	movlb	0	; select bank0
  6585  0178  0823               	movf	?___lwdiv+1,w
  6586  0179  00AD               	movwf	___lwmod@dividend+1
  6587  017A  0822               	movf	?___lwdiv,w
  6588  017B  00AC               	movwf	___lwmod@dividend
  6589  017C  318D  253A  3180   	fcall	___lwmod
  6590  017F  0020               	movlb	0	; select bank0
  6591  0180  082A               	movf	?___lwmod,w
  6592  0181  00D3               	movwf	??_write
  6593  0182  0853               	movf	??_write,w
  6594  0183  0027               	movlb	7	; select bank7
  6595  0184  00A9               	movwf	write@digit2^(0+896)
  6596                           
  6597                           ;main.c: 462: digit3 = (number/100)%10;
  6598  0185  300A               	movlw	10
  6599  0186  0020               	movlb	0	; select bank0
  6600  0187  00AA               	movwf	___lwmod@divisor
  6601  0188  3000               	movlw	0
  6602  0189  00AB               	movwf	___lwmod@divisor+1
  6603  018A  3064               	movlw	100
  6604  018B  00A2               	movwf	___lwdiv@divisor
  6605  018C  3000               	movlw	0
  6606  018D  00A3               	movwf	___lwdiv@divisor+1
  6607  018E  0027               	movlb	7	; select bank7
  6608  018F  0865               	movf	(write@number+1)^(0+896),w
  6609  0190  0020               	movlb	0	; select bank0
  6610  0191  00A5               	movwf	___lwdiv@dividend+1
  6611  0192  0027               	movlb	7	; select bank7
  6612  0193  0864               	movf	write@number^(0+896),w
  6613  0194  0020               	movlb	0	; select bank0
  6614  0195  00A4               	movwf	___lwdiv@dividend
  6615  0196  318D  25F9  3180   	fcall	___lwdiv
  6616  0199  0020               	movlb	0	; select bank0
  6617  019A  0823               	movf	?___lwdiv+1,w
  6618  019B  00AD               	movwf	___lwmod@dividend+1
  6619  019C  0822               	movf	?___lwdiv,w
  6620  019D  00AC               	movwf	___lwmod@dividend
  6621  019E  318D  253A  3180   	fcall	___lwmod
  6622  01A1  0020               	movlb	0	; select bank0
  6623  01A2  082A               	movf	?___lwmod,w
  6624  01A3  00D3               	movwf	??_write
  6625  01A4  0853               	movf	??_write,w
  6626  01A5  0027               	movlb	7	; select bank7
  6627  01A6  00AA               	movwf	write@digit3^(0+896)
  6628                           
  6629                           ;main.c: 463: digit4 = (number/10)%10;
  6630  01A7  300A               	movlw	10
  6631  01A8  0020               	movlb	0	; select bank0
  6632  01A9  00AA               	movwf	___lwmod@divisor
  6633  01AA  3000               	movlw	0
  6634  01AB  00AB               	movwf	___lwmod@divisor+1
  6635  01AC  300A               	movlw	10
  6636  01AD  00A2               	movwf	___lwdiv@divisor
  6637  01AE  3000               	movlw	0
  6638  01AF  00A3               	movwf	___lwdiv@divisor+1
  6639  01B0  0027               	movlb	7	; select bank7
  6640  01B1  0865               	movf	(write@number+1)^(0+896),w
  6641  01B2  0020               	movlb	0	; select bank0
  6642  01B3  00A5               	movwf	___lwdiv@dividend+1
  6643  01B4  0027               	movlb	7	; select bank7
  6644  01B5  0864               	movf	write@number^(0+896),w
  6645  01B6  0020               	movlb	0	; select bank0
  6646  01B7  00A4               	movwf	___lwdiv@dividend
  6647  01B8  318D  25F9  3180   	fcall	___lwdiv
  6648  01BB  0020               	movlb	0	; select bank0
  6649  01BC  0823               	movf	?___lwdiv+1,w
  6650  01BD  00AD               	movwf	___lwmod@dividend+1
  6651  01BE  0822               	movf	?___lwdiv,w
  6652  01BF  00AC               	movwf	___lwmod@dividend
  6653  01C0  318D  253A  3180   	fcall	___lwmod
  6654  01C3  0020               	movlb	0	; select bank0
  6655  01C4  082A               	movf	?___lwmod,w
  6656  01C5  00D3               	movwf	??_write
  6657  01C6  0853               	movf	??_write,w
  6658  01C7  0027               	movlb	7	; select bank7
  6659  01C8  00AB               	movwf	write@digit4^(0+896)
  6660                           
  6661                           ;main.c: 464: digit5 = number%10;
  6662  01C9  300A               	movlw	10
  6663  01CA  0020               	movlb	0	; select bank0
  6664  01CB  00AA               	movwf	___lwmod@divisor
  6665  01CC  3000               	movlw	0
  6666  01CD  00AB               	movwf	___lwmod@divisor+1
  6667  01CE  0027               	movlb	7	; select bank7
  6668  01CF  0865               	movf	(write@number+1)^(0+896),w
  6669  01D0  0020               	movlb	0	; select bank0
  6670  01D1  00AD               	movwf	___lwmod@dividend+1
  6671  01D2  0027               	movlb	7	; select bank7
  6672  01D3  0864               	movf	write@number^(0+896),w
  6673  01D4  0020               	movlb	0	; select bank0
  6674  01D5  00AC               	movwf	___lwmod@dividend
  6675  01D6  318D  253A  3180   	fcall	___lwmod
  6676  01D9  0020               	movlb	0	; select bank0
  6677  01DA  082A               	movf	?___lwmod,w
  6678  01DB  00D3               	movwf	??_write
  6679  01DC  0853               	movf	??_write,w
  6680  01DD  0027               	movlb	7	; select bank7
  6681  01DE  00AC               	movwf	write@digit5^(0+896)
  6682                           
  6683                           ;main.c: 465: uint8_t * toWrite[7];
  6684                           ;main.c: 468: uint8_t letter_space[8] = {
  6685                           ;main.c: 469: 0b00000000,
  6686                           ;main.c: 470: 0b00000000,
  6687                           ;main.c: 471: 0b00000000,
  6688                           ;main.c: 472: 0b00000000,
  6689                           ;main.c: 473: 0b00000000,
  6690                           ;main.c: 474: 0b00000000,
  6691                           ;main.c: 475: 0b00000000,
  6692                           ;main.c: 476: 0b00000000
  6693                           ;main.c: 477: };
  6694  01DF  30CA               	movlw	low write@F12469
  6695  01E0  0086               	movwf	6
  6696  01E1  3001               	movlw	high write@F12469
  6697  01E2  0087               	movwf	7
  6698  01E3  30A0               	movlw	low write@letter_space
  6699  01E4  0084               	movwf	4
  6700  01E5  3003               	movlw	high write@letter_space
  6701  01E6  0085               	movwf	5
  6702  01E7  3008               	movlw	8
  6703  01E8  0020               	movlb	0	; select bank0
  6704  01E9  00D3               	movwf	??_write
  6705  01EA                     u6000:	
  6706  01EA  0016               	moviw fsr1++
  6707  01EB  001A               	movwi fsr0++
  6708  01EC  0BD3               	decfsz	??_write,f
  6709  01ED  29EA               	goto	u6000
  6710                           
  6711                           ;main.c: 478: toWrite[0] = letter_space;
  6712  01EE  30A0               	movlw	low write@letter_space
  6713  01EF  0027               	movlb	7	; select bank7
  6714  01F0  00CB               	movwf	write@toWrite_1176^(0+896)
  6715  01F1  3003               	movlw	high write@letter_space
  6716  01F2  00CC               	movwf	(write@toWrite_1176+1)^(0+896)
  6717                           
  6718                           ;main.c: 479: toWrite[1] = numberTable[digit1];
  6719  01F3  0828               	movf	write@digit1^(0+896),w
  6720  01F4  3EA0               	addlw	(low (_numberTable| (0+256)))& (0+255)
  6721  01F5  0086               	movwf	6
  6722  01F6  3001               	movlw	1	; select bank3/4
  6723  01F7  0087               	movwf	7
  6724  01F8  0801               	movf	1,w
  6725  01F9  00CD               	movwf	(low ((write@toWrite_1176| (0+768)+2)))^(0+128)
  6726  01FA  3002               	movlw	2
  6727  01FB  00CE               	movwf	((low ((write@toWrite_1176| (0+768)+2))+1))^(0+128)
  6728                           
  6729                           ;main.c: 480: toWrite[2] = numberTable[digit2];
  6730  01FC  0829               	movf	write@digit2^(0+896),w
  6731  01FD  3EA0               	addlw	(low (_numberTable| (0+256)))& (0+255)
  6732  01FE  0086               	movwf	6
  6733  01FF  3001               	movlw	1	; select bank3/4
  6734  0200  0087               	movwf	7
  6735  0201  0801               	movf	1,w
  6736  0202  00CF               	movwf	(low ((write@toWrite_1176| (0+768)+4)))^(0+128)
  6737  0203  3002               	movlw	2
  6738  0204  00D0               	movwf	((low ((write@toWrite_1176| (0+768)+4))+1))^(0+128)
  6739                           
  6740                           ;main.c: 481: toWrite[3] = numberTable[digit3];
  6741  0205  082A               	movf	write@digit3^(0+896),w
  6742  0206  3EA0               	addlw	(low (_numberTable| (0+256)))& (0+255)
  6743  0207  0086               	movwf	6
  6744  0208  3001               	movlw	1	; select bank3/4
  6745  0209  0087               	movwf	7
  6746  020A  0801               	movf	1,w
  6747  020B  00D1               	movwf	(low ((write@toWrite_1176| (0+768)+6)))^(0+128)
  6748  020C  3002               	movlw	2
  6749  020D  00D2               	movwf	((low ((write@toWrite_1176| (0+768)+6))+1))^(0+128)
  6750                           
  6751                           ;main.c: 482: toWrite[4] = numberTable[digit4];
  6752  020E  082B               	movf	write@digit4^(0+896),w
  6753  020F  3EA0               	addlw	(low (_numberTable| (0+256)))& (0+255)
  6754  0210  0086               	movwf	6
  6755  0211  3001               	movlw	1	; select bank3/4
  6756  0212  0087               	movwf	7
  6757  0213  0801               	movf	1,w
  6758  0214  00D3               	movwf	(low ((write@toWrite_1176| (0+768)+8)))^(0+128)
  6759  0215  3002               	movlw	2
  6760  0216  00D4               	movwf	((low ((write@toWrite_1176| (0+768)+8))+1))^(0+128)
  6761                           
  6762                           ;main.c: 483: toWrite[5] = numberTable[digit5];
  6763  0217  082C               	movf	write@digit5^(0+896),w
  6764  0218  3EA0               	addlw	(low (_numberTable| (0+256)))& (0+255)
  6765  0219  0086               	movwf	6
  6766  021A  3001               	movlw	1	; select bank3/4
  6767  021B  0087               	movwf	7
  6768  021C  0801               	movf	1,w
  6769  021D  00D5               	movwf	(low ((write@toWrite_1176| (0+768)+10)))^(0+128)
  6770  021E  3002               	movlw	2
  6771  021F  00D6               	movwf	((low ((write@toWrite_1176| (0+768)+10))+1))^(0+128)
  6772                           
  6773                           ;main.c: 484: toWrite[6] = letter_space;
  6774  0220  30A0               	movlw	low write@letter_space
  6775  0221  00D7               	movwf	(low ((write@toWrite_1176| (0+768)+12)))^(0+128)
  6776  0222  3003               	movlw	high write@letter_space
  6777  0223  00D8               	movwf	((low ((write@toWrite_1176| (0+768)+12))+1))^(0+128)
  6778                           
  6779                           ;main.c: 485: writeWord(toWrite, 48);
  6780  0224  3030               	movlw	48
  6781  0225  0020               	movlb	0	; select bank0
  6782  0226  00D3               	movwf	??_write
  6783  0227  0853               	movf	??_write,w
  6784  0228  00BD               	movwf	writeWord@len
  6785  0229  30CB               	movlw	(low (write@toWrite_1176| (0+768)))& (0+255)
  6786  022A  3182  22EC         	fcall	_writeWord
  6787                           
  6788                           ;main.c: 486: wallColor = 1;
  6789  022C  0021               	movlb	1	; select bank1
  6790  022D  01C5               	clrf	_wallColor^(0+128)
  6791  022E  0AC5               	incf	_wallColor^(0+128),f
  6792  022F  0008               	return
  6793  0230                     __end_of_write:	
  6794                           
  6795                           	psect	text9
  6796  02EC                     __ptext9:	
  6797 ;; *************** function _writeWord *****************
  6798 ;; Defined at:
  6799 ;;		line 403 in file "main.c"
  6800 ;; Parameters:    Size  Location     Type
  6801 ;;  text            1    wreg     PTR PTR unsigned char 
  6802 ;;		 -> write@toWrite_1176(14), write@toWrite_1170(14), write@toWrite_1169(16), write@toWrite(10), 
  6803 ;;  len             1   29[BANK0 ] unsigned char 
  6804 ;; Auto vars:     Size  Location     Type
  6805 ;;  text            1   48[BANK0 ] PTR PTR unsigned char 
  6806 ;;		 -> write@toWrite_1176(14), write@toWrite_1170(14), write@toWrite_1169(16), write@toWrite(10), 
  6807 ;;  k               1   50[BANK0 ] unsigned char 
  6808 ;;  shiftValue      1   47[BANK0 ] unsigned char 
  6809 ;;  idx             1   49[BANK0 ] unsigned char 
  6810 ;; Return value:  Size  Location     Type
  6811 ;;                  1    wreg      void 
  6812 ;; Registers used:
  6813 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6814 ;; Tracked objects:
  6815 ;;		On entry : 0/0
  6816 ;;		On exit  : 0/0
  6817 ;;		Unchanged: 0/0
  6818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6819 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6820 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6821 ;;      Temps:          0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6822 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6823 ;;Total ram usage:       22 bytes
  6824 ;; Hardware stack levels used:    1
  6825 ;; Hardware stack levels required when called:   16
  6826 ;; This function calls:
  6827 ;;		___awdiv
  6828 ;;		_clearPixels
  6829 ;;		_drawWalls
  6830 ;;		_writeDisplay
  6831 ;; This function is called by:
  6832 ;;		_write
  6833 ;; This function uses a non-reentrant model
  6834 ;;
  6835                           
  6836                           
  6837                           ;psect for function _writeWord
  6838  02EC                     _writeWord:	
  6839                           
  6840                           ;incstack = 0
  6841 ;; hardware stack exceeded
  6842                           ; Regs used in _writeWord: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6843                           ;writeWord@text stored from wreg
  6844  02EC  0020               	movlb	0	; select bank0
  6845  02ED  00D0               	movwf	writeWord@text
  6846                           
  6847                           ;main.c: 404: for (i = 0; i < 8; i++) {
  6848  02EE  01E1               	clrf	_i
  6849  02EF  3008               	movlw	8
  6850  02F0  0261               	subwf	_i,w
  6851  02F1  1803               	btfsc	3,0
  6852  02F2  2B01               	goto	l7021
  6853  02F3                     l7015:	
  6854                           
  6855                           ;main.c: 405: walls[i] = 0;
  6856  02F3  0861               	movf	_i,w
  6857  02F4  3E30               	addlw	(low (_walls| (0+256)))& (0+255)
  6858  02F5  0086               	movwf	6
  6859  02F6  3001               	movlw	1	; select bank2/3
  6860  02F7  0087               	movwf	7
  6861  02F8  0181               	clrf	1
  6862  02F9  3001               	movlw	1
  6863  02FA  00BE               	movwf	??_writeWord
  6864  02FB  083E               	movf	??_writeWord,w
  6865  02FC  07E1               	addwf	_i,f
  6866  02FD  3008               	movlw	8
  6867  02FE  0261               	subwf	_i,w
  6868  02FF  1C03               	skipc
  6869  0300  2AF3               	goto	l7015
  6870  0301                     l7021:	
  6871                           
  6872                           ;main.c: 406: }
  6873                           ;main.c: 407: for (uint8_t idx = 0; idx < len; idx++) {
  6874  0301  01D1               	clrf	writeWord@idx
  6875  0302                     l7043:	
  6876  0302  083D               	movf	writeWord@len,w
  6877  0303  0251               	subwf	writeWord@idx,w
  6878  0304  1803               	btfsc	3,0
  6879  0305  0008               	return
  6880                           
  6881                           ;main.c: 408: uint8_t shiftValue = idx % 8;
  6882  0306  0851               	movf	writeWord@idx,w
  6883  0307  3907               	andlw	7
  6884  0308  00BE               	movwf	??_writeWord
  6885  0309  083E               	movf	??_writeWord,w
  6886  030A  00CF               	movwf	writeWord@shiftValue
  6887                           
  6888                           ;main.c: 409: for (uint8_t k = 0; k < 8; k++) {
  6889  030B  01D2               	clrf	writeWord@k
  6890  030C  3008               	movlw	8
  6891  030D  0252               	subwf	writeWord@k,w
  6892  030E  1803               	btfsc	3,0
  6893  030F  2B7C               	goto	l7035
  6894  0310                     l7029:	
  6895                           
  6896                           ;main.c: 410: walls[k] = ((text[idx / 8][k]) << shiftValue) |
  6897                           ;main.c: 411: ((text[idx / 8 + 1][k]) >> 8 - shiftValue);
  6898  0310  0852               	movf	writeWord@k,w
  6899  0311  00BE               	movwf	??_writeWord
  6900  0312  01BF               	clrf	??_writeWord+1
  6901  0313  3008               	movlw	8
  6902  0314  00A2               	movwf	___awdiv@divisor
  6903  0315  3000               	movlw	0
  6904  0316  00A3               	movwf	___awdiv@divisor+1
  6905  0317  0851               	movf	writeWord@idx,w
  6906  0318  00C0               	movwf	??_writeWord+2
  6907  0319  01C1               	clrf	??_writeWord+3
  6908  031A  0840               	movf	??_writeWord+2,w
  6909  031B  00A4               	movwf	___awdiv@dividend
  6910  031C  0841               	movf	??_writeWord+3,w
  6911  031D  00A5               	movwf	___awdiv@dividend+1
  6912  031E  3187  2711  3182   	fcall	___awdiv
  6913  0321  0020               	movlb	0	; select bank0
  6914  0322  0822               	movf	?___awdiv,w
  6915  0323  0709               	addwf	9,w
  6916  0324  3E02               	addlw	2
  6917  0325  0750               	addwf	writeWord@text,w
  6918  0326  00C2               	movwf	??_writeWord+4
  6919  0327  0842               	movf	??_writeWord+4,w
  6920  0328  0086               	movwf	6
  6921  0329  3003               	movlw	3	; select bank6/7
  6922  032A  0087               	movwf	7
  6923  032B  3F40               	moviw [0]fsr1
  6924  032C  00C3               	movwf	??_writeWord+5
  6925  032D  3F41               	moviw [1]fsr1
  6926  032E  00C4               	movwf	??_writeWord+6
  6927  032F  083E               	movf	??_writeWord,w
  6928  0330  0743               	addwf	??_writeWord+5,w
  6929  0331  0086               	movwf	6
  6930  0332  083F               	movf	??_writeWord+1,w
  6931  0333  3D44               	addwfc	??_writeWord+6,w
  6932  0334  0087               	movwf	7
  6933  0335  0801               	movf	1,w
  6934  0336  00C5               	movwf	??_writeWord+7
  6935  0337  034F               	decf	writeWord@shiftValue,w
  6936  0338  3AFF               	xorlw	255
  6937  0339  3E08               	addlw	8
  6938  033A  0A89               	incf	9,f
  6939  033B  2B3D               	goto	u5914
  6940  033C                     u5915:	
  6941  033C  36C5               	lsrf	??_writeWord+7,f
  6942  033D                     u5914:	
  6943  033D  0B89               	decfsz	9,f
  6944  033E  2B3C               	goto	u5915
  6945  033F  0852               	movf	writeWord@k,w
  6946  0340  00C6               	movwf	??_writeWord+8
  6947  0341  01C7               	clrf	??_writeWord+9
  6948  0342  3008               	movlw	8
  6949  0343  00A2               	movwf	___awdiv@divisor
  6950  0344  3000               	movlw	0
  6951  0345  00A3               	movwf	___awdiv@divisor+1
  6952  0346  0851               	movf	writeWord@idx,w
  6953  0347  00C8               	movwf	??_writeWord+10
  6954  0348  01C9               	clrf	??_writeWord+11
  6955  0349  0848               	movf	??_writeWord+10,w
  6956  034A  00A4               	movwf	___awdiv@dividend
  6957  034B  0849               	movf	??_writeWord+11,w
  6958  034C  00A5               	movwf	___awdiv@dividend+1
  6959  034D  3187  2711  3182   	fcall	___awdiv
  6960  0350  0020               	movlb	0	; select bank0
  6961  0351  0822               	movf	?___awdiv,w
  6962  0352  0709               	addwf	9,w
  6963  0353  0750               	addwf	writeWord@text,w
  6964  0354  00CA               	movwf	??_writeWord+12
  6965  0355  084A               	movf	??_writeWord+12,w
  6966  0356  0086               	movwf	6
  6967  0357  3003               	movlw	3	; select bank6/7
  6968  0358  0087               	movwf	7
  6969  0359  3F40               	moviw [0]fsr1
  6970  035A  00CB               	movwf	??_writeWord+13
  6971  035B  3F41               	moviw [1]fsr1
  6972  035C  00CC               	movwf	??_writeWord+14
  6973  035D  0846               	movf	??_writeWord+8,w
  6974  035E  074B               	addwf	??_writeWord+13,w
  6975  035F  0086               	movwf	6
  6976  0360  0847               	movf	??_writeWord+9,w
  6977  0361  3D4C               	addwfc	??_writeWord+14,w
  6978  0362  0087               	movwf	7
  6979  0363  0801               	movf	1,w
  6980  0364  00CD               	movwf	??_writeWord+15
  6981  0365  0A4F               	incf	writeWord@shiftValue,w
  6982  0366  2B68               	goto	u5924
  6983  0367                     u5925:	
  6984  0367  35CD               	lslf	??_writeWord+15,f
  6985  0368                     u5924:	
  6986  0368  0B89               	decfsz	9,f
  6987  0369  2B67               	goto	u5925
  6988  036A  084D               	movf	??_writeWord+15,w
  6989  036B  0445               	iorwf	??_writeWord+7,w
  6990  036C  00CE               	movwf	??_writeWord+16
  6991  036D  0852               	movf	writeWord@k,w
  6992  036E  3E30               	addlw	(low (_walls| (0+256)))& (0+255)
  6993  036F  0086               	movwf	6
  6994  0370  3001               	movlw	1	; select bank2/3
  6995  0371  0087               	movwf	7
  6996  0372  084E               	movf	??_writeWord+16,w
  6997  0373  0081               	movwf	1
  6998  0374  3001               	movlw	1
  6999  0375  00BE               	movwf	??_writeWord
  7000  0376  083E               	movf	??_writeWord,w
  7001  0377  07D2               	addwf	writeWord@k,f
  7002  0378  3008               	movlw	8
  7003  0379  0252               	subwf	writeWord@k,w
  7004  037A  1C03               	skipc
  7005  037B  2B10               	goto	l7029
  7006  037C                     l7035:	
  7007                           
  7008                           ;main.c: 412: }
  7009                           ;main.c: 413: clearPixels();
  7010  037C  3189  21E0  3182   	fcall	_clearPixels
  7011                           
  7012                           ;main.c: 414: drawWalls();
  7013  037F  3186  26BD  3182   	fcall	_drawWalls
  7014                           
  7015                           ;main.c: 415: writeDisplay();
  7016  0382  3186  2607  3182   	fcall	_writeDisplay
  7017                           
  7018                           ;main.c: 416: _delay((unsigned long)((70)*(32000000/4000.0)));
  7019  0385  3003               	movlw	3
  7020  0386  0020               	movlb	0	; select bank0
  7021  0387  00BF               	movwf	??_writeWord+1
  7022  0388  30D8               	movlw	216
  7023  0389  00BE               	movwf	??_writeWord
  7024  038A  3041               	movlw	65
  7025  038B                     u6497:	
  7026  038B  0B89               	decfsz	9,f
  7027  038C  2B8B               	goto	u6497
  7028  038D  0BBE               	decfsz	??_writeWord,f
  7029  038E  2B8B               	goto	u6497
  7030  038F  0BBF               	decfsz	??_writeWord+1,f
  7031  0390  2B8B               	goto	u6497
  7032  0391  3200               	nop2
  7033  0392  3001               	movlw	1
  7034  0393  0020               	movlb	0	; select bank0
  7035  0394  00BE               	movwf	??_writeWord
  7036  0395  083E               	movf	??_writeWord,w
  7037  0396  07D1               	addwf	writeWord@idx,f
  7038  0397  2B02               	goto	l7043
  7039  0398                     __end_of_writeWord:	
  7040                           
  7041                           	psect	text10
  7042  0607                     __ptext10:	
  7043 ;; *************** function _writeDisplay *****************
  7044 ;; Defined at:
  7045 ;;		line 301 in file "main.c"
  7046 ;; Parameters:    Size  Location     Type
  7047 ;;		None
  7048 ;; Auto vars:     Size  Location     Type
  7049 ;;		None
  7050 ;; Return value:  Size  Location     Type
  7051 ;;                  1    wreg      void 
  7052 ;; Registers used:
  7053 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7054 ;; Tracked objects:
  7055 ;;		On entry : 0/0
  7056 ;;		On exit  : 0/0
  7057 ;;		Unchanged: 0/0
  7058 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7059 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7060 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7061 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7062 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7063 ;;Total ram usage:        5 bytes
  7064 ;; Hardware stack levels used:    1
  7065 ;; Hardware stack levels required when called:   15
  7066 ;; This function calls:
  7067 ;;		___awdiv
  7068 ;;		_i2c_writeNBytes
  7069 ;; This function is called by:
  7070 ;;		_writeWord
  7071 ;;		_endGame
  7072 ;;		_main
  7073 ;; This function uses a non-reentrant model
  7074 ;;
  7075                           
  7076                           
  7077                           ;psect for function _writeDisplay
  7078  0607                     _writeDisplay:	
  7079                           
  7080                           ;main.c: 302: writebuffer[0] = 0;
  7081                           
  7082                           ;incstack = 0
  7083                           ; Regs used in _writeDisplay: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7084  0607  0023               	movlb	3	; select bank3
  7085  0608  01D2               	clrf	_writebuffer^(0+384)
  7086                           
  7087                           ;main.c: 303: for (i = 1; i < 17; i += 2) {
  7088  0609  0020               	movlb	0	; select bank0
  7089  060A  01E1               	clrf	_i
  7090  060B  0AE1               	incf	_i,f
  7091  060C  3011               	movlw	17
  7092  060D  0261               	subwf	_i,w
  7093  060E  1803               	btfsc	3,0
  7094  060F  2E59               	goto	l7007
  7095  0610                     l7001:	
  7096                           
  7097                           ;main.c: 304: writebuffer[i] = pixelbuffer[i / 2] & 0xFF;
  7098  0610  3002               	movlw	2
  7099  0611  00A2               	movwf	___awdiv@divisor
  7100  0612  3000               	movlw	0
  7101  0613  00A3               	movwf	___awdiv@divisor+1
  7102  0614  0861               	movf	_i,w
  7103  0615  00B8               	movwf	??_writeDisplay
  7104  0616  01B9               	clrf	??_writeDisplay+1
  7105  0617  0838               	movf	??_writeDisplay,w
  7106  0618  00A4               	movwf	___awdiv@dividend
  7107  0619  0839               	movf	??_writeDisplay+1,w
  7108  061A  00A5               	movwf	___awdiv@dividend+1
  7109  061B  3187  2711  3186   	fcall	___awdiv
  7110  061E  0020               	movlb	0	; select bank0
  7111  061F  0822               	movf	?___awdiv,w
  7112  0620  0709               	addwf	9,w
  7113  0621  3E20               	addlw	(low (_pixelbuffer| (0+256)))& (0+255)
  7114  0622  0086               	movwf	6
  7115  0623  3001               	movlw	1	; select bank2/3
  7116  0624  0087               	movwf	7
  7117  0625  0801               	movf	1,w
  7118  0626  00BA               	movwf	??_writeDisplay+2
  7119  0627  0861               	movf	_i,w
  7120  0628  3ED2               	addlw	(low (_writebuffer| (0+256)))& (0+255)
  7121  0629  0086               	movwf	6
  7122  062A  3001               	movlw	1	; select bank3/4
  7123  062B  0087               	movwf	7
  7124  062C  083A               	movf	??_writeDisplay+2,w
  7125  062D  0081               	movwf	1
  7126                           
  7127                           ;main.c: 305: writebuffer[i + 1] = pixelbuffer[i / 2] >> 8;
  7128  062E  3002               	movlw	2
  7129  062F  00A2               	movwf	___awdiv@divisor
  7130  0630  3000               	movlw	0
  7131  0631  00A3               	movwf	___awdiv@divisor+1
  7132  0632  0861               	movf	_i,w
  7133  0633  00B8               	movwf	??_writeDisplay
  7134  0634  01B9               	clrf	??_writeDisplay+1
  7135  0635  0838               	movf	??_writeDisplay,w
  7136  0636  00A4               	movwf	___awdiv@dividend
  7137  0637  0839               	movf	??_writeDisplay+1,w
  7138  0638  00A5               	movwf	___awdiv@dividend+1
  7139  0639  3187  2711  3186   	fcall	___awdiv
  7140  063C  0020               	movlb	0	; select bank0
  7141  063D  0822               	movf	?___awdiv,w
  7142  063E  0709               	addwf	9,w
  7143  063F  3E20               	addlw	(low (_pixelbuffer| (0+256)))& (0+255)
  7144  0640  0086               	movwf	6
  7145  0641  3001               	movlw	1	; select bank2/3
  7146  0642  0087               	movwf	7
  7147  0643  3F40               	moviw [0]fsr1
  7148  0644  00BA               	movwf	??_writeDisplay+2
  7149  0645  3F41               	moviw [1]fsr1
  7150  0646  00BB               	movwf	??_writeDisplay+3
  7151  0647  083B               	movf	??_writeDisplay+3,w
  7152  0648  00BC               	movwf	??_writeDisplay+4
  7153  0649  0861               	movf	_i,w
  7154  064A  3E01               	addlw	1
  7155  064B  3ED2               	addlw	(low (_writebuffer| (0+256)))& (0+255)
  7156  064C  0086               	movwf	6
  7157  064D  3001               	movlw	1	; select bank3/4
  7158  064E  0087               	movwf	7
  7159  064F  083C               	movf	??_writeDisplay+4,w
  7160  0650  0081               	movwf	1
  7161  0651  3002               	movlw	2
  7162  0652  00B8               	movwf	??_writeDisplay
  7163  0653  0838               	movf	??_writeDisplay,w
  7164  0654  07E1               	addwf	_i,f
  7165  0655  3011               	movlw	17
  7166  0656  0261               	subwf	_i,w
  7167  0657  1C03               	skipc
  7168  0658  2E10               	goto	l7001
  7169  0659                     l7007:	
  7170                           
  7171                           ;main.c: 306: }
  7172                           ;main.c: 307: i2c_writeNBytes(0x70, writebuffer, 17);
  7173  0659  30D2               	movlw	(low (_writebuffer| (0+256)))& (0+255)
  7174  065A  00B8               	movwf	??_writeDisplay
  7175  065B  0838               	movf	??_writeDisplay,w
  7176  065C  00B4               	movwf	i2c_writeNBytes@data
  7177  065D  3011               	movlw	17
  7178  065E  00B5               	movwf	i2c_writeNBytes@len
  7179  065F  3000               	movlw	0
  7180  0660  00B6               	movwf	i2c_writeNBytes@len+1
  7181  0661  3070               	movlw	112
  7182  0662  318C  24BD         	fcall	_i2c_writeNBytes
  7183  0664  0008               	return
  7184  0665                     __end_of_writeDisplay:	
  7185                           
  7186                           	psect	text11
  7187  0CBD                     __ptext11:	
  7188 ;; *************** function _i2c_writeNBytes *****************
  7189 ;; Defined at:
  7190 ;;		line 48 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  7191 ;; Parameters:    Size  Location     Type
  7192 ;;  address         1    wreg     unsigned char 
  7193 ;;  data            1   20[BANK0 ] PTR void 
  7194 ;;		 -> writebuffer(17), 
  7195 ;;  len             2   21[BANK0 ] unsigned int 
  7196 ;; Auto vars:     Size  Location     Type
  7197 ;;  address         1   23[BANK0 ] unsigned char 
  7198 ;; Return value:  Size  Location     Type
  7199 ;;                  1    wreg      void 
  7200 ;; Registers used:
  7201 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7202 ;; Tracked objects:
  7203 ;;		On entry : 0/0
  7204 ;;		On exit  : 0/0
  7205 ;;		Unchanged: 0/0
  7206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7207 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7208 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7209 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7210 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7211 ;;Total ram usage:        4 bytes
  7212 ;; Hardware stack levels used:    1
  7213 ;; Hardware stack levels required when called:   14
  7214 ;; This function calls:
  7215 ;;		_i2c_close
  7216 ;;		_i2c_masterWrite
  7217 ;;		_i2c_open
  7218 ;;		_i2c_setAddressNACKCallback
  7219 ;;		_i2c_setBuffer
  7220 ;; This function is called by:
  7221 ;;		_writeDisplay
  7222 ;;		_initializeDisplay
  7223 ;; This function uses a non-reentrant model
  7224 ;;
  7225                           
  7226                           
  7227                           ;psect for function _i2c_writeNBytes
  7228  0CBD                     _i2c_writeNBytes:	
  7229                           
  7230                           ;incstack = 0
  7231                           ; Regs used in _i2c_writeNBytes: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7232                           ;i2c_writeNBytes@address stored from wreg
  7233  0CBD  0020               	movlb	0	; select bank0
  7234  0CBE  00B7               	movwf	i2c_writeNBytes@address
  7235  0CBF                     l6983:	
  7236                           ;i2c_simple_master.c: 50: while(!i2c_open(address));
  7237                           
  7238  0CBF  0020               	movlb	0	; select bank0
  7239  0CC0  0837               	movf	i2c_writeNBytes@address,w
  7240  0CC1  318F  27B2  318C   	fcall	_i2c_open
  7241  0CC4  3A00               	xorlw	0
  7242  0CC5  1903               	skipnz
  7243  0CC6  2CBF               	goto	l6983
  7244                           
  7245                           ;i2c_simple_master.c: 51: i2c_setBuffer(data,len);
  7246  0CC7  0020               	movlb	0	; select bank0
  7247  0CC8  0834               	movf	i2c_writeNBytes@data,w
  7248  0CC9  00A2               	movwf	i2c_setBuffer@buffer
  7249  0CCA  3001               	movlw	1
  7250  0CCB  00A3               	movwf	i2c_setBuffer@buffer+1
  7251  0CCC  0836               	movf	i2c_writeNBytes@len+1,w
  7252  0CCD  00A5               	movwf	i2c_setBuffer@bufferSize+1
  7253  0CCE  0835               	movf	i2c_writeNBytes@len,w
  7254  0CCF  00A4               	movwf	i2c_setBuffer@bufferSize
  7255  0CD0  318A  2247  318C   	fcall	_i2c_setBuffer
  7256                           
  7257                           ;i2c_simple_master.c: 52: i2c_setAddressNACKCallback(i2c_restartWrite,(0));
  7258  0CD3  3093               	movlw	low _i2c_restartWrite
  7259  0CD4  0020               	movlb	0	; select bank0
  7260  0CD5  00A7               	movwf	i2c_setAddressNACKCallback@cb
  7261  0CD6  3008               	movlw	high _i2c_restartWrite
  7262  0CD7  00A8               	movwf	i2c_setAddressNACKCallback@cb+1
  7263  0CD8  01A9               	clrf	i2c_setAddressNACKCallback@p
  7264  0CD9  3189  21D3  318C   	fcall	_i2c_setAddressNACKCallback
  7265                           
  7266                           ;i2c_simple_master.c: 53: i2c_masterWrite();
  7267  0CDC  3188  2068  318C   	fcall	_i2c_masterWrite
  7268  0CDF                     l6991:	
  7269                           ;i2c_simple_master.c: 54: while(I2C_BUSY == i2c_close());
  7270                           
  7271  0CDF  318A  2276  318C   	fcall	_i2c_close
  7272  0CE2  3A01               	xorlw	1
  7273  0CE3  1D03               	btfss	3,2
  7274  0CE4  0008               	return
  7275  0CE5  2CDF               	goto	l6991
  7276  0CE6                     __end_of_i2c_writeNBytes:	
  7277                           
  7278                           	psect	text12
  7279  09D3                     __ptext12:	
  7280 ;; *************** function _i2c_setAddressNACKCallback *****************
  7281 ;; Defined at:
  7282 ;;		line 99 in file "mcc_generated_files/drivers/i2c_master.c"
  7283 ;; Parameters:    Size  Location     Type
  7284 ;;  cb              2    7[BANK0 ] PTR FTN(PTR void ,)enum 
  7285 ;;		 -> i2c_restartWrite(1), 
  7286 ;;  p               1    9[BANK0 ] PTR void 
  7287 ;;		 -> NULL(0), 
  7288 ;; Auto vars:     Size  Location     Type
  7289 ;;		None
  7290 ;; Return value:  Size  Location     Type
  7291 ;;                  1    wreg      void 
  7292 ;; Registers used:
  7293 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7294 ;; Tracked objects:
  7295 ;;		On entry : 0/0
  7296 ;;		On exit  : 0/0
  7297 ;;		Unchanged: 0/0
  7298 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7299 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7300 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7301 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7302 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7303 ;;Total ram usage:        4 bytes
  7304 ;; Hardware stack levels used:    1
  7305 ;; Hardware stack levels required when called:    7
  7306 ;; This function calls:
  7307 ;;		_setCallBack
  7308 ;; This function is called by:
  7309 ;;		_i2c_writeNBytes
  7310 ;;		_i2c_write1ByteRegister
  7311 ;;		_i2c_read1ByteRegister
  7312 ;;		_i2c_read2ByteRegister
  7313 ;;		_i2c_write2ByteRegister
  7314 ;;		_i2c_readDataBlock
  7315 ;; This function uses a non-reentrant model
  7316 ;;
  7317                           
  7318                           
  7319                           ;psect for function _i2c_setAddressNACKCallback
  7320  09D3                     _i2c_setAddressNACKCallback:	
  7321                           
  7322                           ;i2c_master.c: 101: setCallBack(i2c_addressNACK,cb,p);
  7323                           
  7324                           ;incstack = 0
  7325                           ; Regs used in _i2c_setAddressNACKCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  7326  09D3  0020               	movlb	0	; select bank0
  7327  09D4  0828               	movf	i2c_setAddressNACKCallback@cb+1,w
  7328  09D5  00A3               	movwf	setCallBack@cb+1
  7329  09D6  0827               	movf	i2c_setAddressNACKCallback@cb,w
  7330  09D7  00A2               	movwf	setCallBack@cb
  7331  09D8  0829               	movf	i2c_setAddressNACKCallback@p,w
  7332  09D9  00AA               	movwf	??_i2c_setAddressNACKCallback
  7333  09DA  082A               	movf	??_i2c_setAddressNACKCallback,w
  7334  09DB  00A4               	movwf	setCallBack@p
  7335  09DC  3002               	movlw	2
  7336  09DD  318C  2449         	fcall	_setCallBack
  7337  09DF  0008               	return
  7338  09E0                     __end_of_i2c_setAddressNACKCallback:	
  7339                           
  7340                           	psect	text13
  7341  0FB2                     __ptext13:	
  7342 ;; *************** function _i2c_open *****************
  7343 ;; Defined at:
  7344 ;;		line 116 in file "mcc_generated_files/drivers/i2c_master.c"
  7345 ;; Parameters:    Size  Location     Type
  7346 ;;  address         1    wreg     unsigned char 
  7347 ;; Auto vars:     Size  Location     Type
  7348 ;;  address         1    5[BANK0 ] unsigned char 
  7349 ;;  ret             1    6[BANK0 ] enum E12166
  7350 ;; Return value:  Size  Location     Type
  7351 ;;                  1    wreg      enum E92
  7352 ;; Registers used:
  7353 ;;		wreg, status,2, status,0, pclath, cstack
  7354 ;; Tracked objects:
  7355 ;;		On entry : 0/0
  7356 ;;		On exit  : 0/0
  7357 ;;		Unchanged: 0/0
  7358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7359 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7360 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7361 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7362 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7363 ;;Total ram usage:        3 bytes
  7364 ;; Hardware stack levels used:    1
  7365 ;; Hardware stack levels required when called:    7
  7366 ;; This function calls:
  7367 ;;		_i2c_driver_open
  7368 ;;		_i2c_driver_setBusCollisionISR
  7369 ;;		_i2c_driver_setI2cISR
  7370 ;;		_mssp_clearIRQ
  7371 ;; This function is called by:
  7372 ;;		_i2c_writeNBytes
  7373 ;;		_i2c_write1ByteRegister
  7374 ;;		_i2c_read1ByteRegister
  7375 ;;		_i2c_read2ByteRegister
  7376 ;;		_i2c_write2ByteRegister
  7377 ;;		_i2c_readDataBlock
  7378 ;;		_i2c_readNBytes
  7379 ;; This function uses a non-reentrant model
  7380 ;;
  7381                           
  7382                           
  7383                           ;psect for function _i2c_open
  7384  0FB2                     _i2c_open:	
  7385                           
  7386                           ;incstack = 0
  7387                           ; Regs used in _i2c_open: [wreg+status,2+status,0+pclath+cstack]
  7388                           ;i2c_open@address stored from wreg
  7389  0FB2  0020               	movlb	0	; select bank0
  7390  0FB3  00A5               	movwf	i2c_open@address
  7391                           
  7392                           ;i2c_master.c: 118: i2c_error_t ret = I2C_BUSY;
  7393  0FB4  01A6               	clrf	i2c_open@ret
  7394  0FB5  0AA6               	incf	i2c_open@ret,f
  7395                           
  7396                           ;i2c_master.c: 120: if(!i2c_status.inUse)
  7397  0FB6  0021               	movlb	1	; select bank1
  7398  0FB7  18A0               	btfsc	_i2c_status^(0+128),1
  7399  0FB8  2FFD               	goto	l443
  7400                           
  7401                           ;i2c_master.c: 121: {
  7402                           ;i2c_master.c: 122: i2c_status.address = address;
  7403  0FB9  0020               	movlb	0	; select bank0
  7404  0FBA  0825               	movf	i2c_open@address,w
  7405  0FBB  00A4               	movwf	??_i2c_open
  7406  0FBC  0824               	movf	??_i2c_open,w
  7407  0FBD  0021               	movlb	1	; select bank1
  7408  0FBE  00A1               	movwf	(_i2c_status^(0+128)+1)
  7409                           
  7410                           ;i2c_master.c: 123: i2c_status.busy = 0;
  7411  0FBF  1020               	bcf	_i2c_status^(0+128),0
  7412                           
  7413                           ;i2c_master.c: 124: i2c_status.inUse = 1;
  7414  0FC0  14A0               	bsf	_i2c_status^(0+128),1
  7415                           
  7416                           ;i2c_master.c: 125: i2c_status.addressNACKCheck = 0;
  7417  0FC1  11A0               	bcf	_i2c_status^(0+128),3
  7418                           
  7419                           ;i2c_master.c: 126: i2c_status.state = I2C_RESET;
  7420  0FC2  300E               	movlw	14
  7421  0FC3  0020               	movlb	0	; select bank0
  7422  0FC4  00A4               	movwf	??_i2c_open
  7423  0FC5  0824               	movf	??_i2c_open,w
  7424  0FC6  0021               	movlb	1	; select bank1
  7425  0FC7  00AA               	movwf	(_i2c_status^(0+128)+10)
  7426                           
  7427                           ;i2c_master.c: 127: i2c_status.time_out_value = 500;
  7428  0FC8  30F4               	movlw	244
  7429  0FC9  00A8               	movwf	(_i2c_status^(0+128)+8)
  7430  0FCA  3001               	movlw	1
  7431  0FCB  00A9               	movwf	(_i2c_status^(0+128)+9)
  7432                           
  7433                           ;i2c_master.c: 128: i2c_status.bufferFree = 1;
  7434  0FCC  1520               	bsf	_i2c_status^(0+128),2
  7435                           
  7436                           ;i2c_master.c: 131: i2c_status.callbackTable[i2c_dataComplete]=returnStop;
  7437  0FCD  3099               	movlw	low _returnStop
  7438  0FCE  00AC               	movwf	(low ((_i2c_status| 0+12)))^(0+128)
  7439  0FCF  3008               	movlw	high _returnStop
  7440  0FD0  00AD               	movwf	((low ((_i2c_status| 0+12)))^(0+128)+1)
  7441                           
  7442                           ;i2c_master.c: 132: i2c_status.callbackPayload[i2c_dataComplete] = (0);
  7443  0FD1  01B8               	clrf	(low ((_i2c_status| 0+24)))^(0+128)
  7444                           
  7445                           ;i2c_master.c: 133: i2c_status.callbackTable[i2c_writeCollision]=returnStop;
  7446  0FD2  3099               	movlw	low _returnStop
  7447  0FD3  00AE               	movwf	(low ((_i2c_status| 0+14)))^(0+128)
  7448  0FD4  3008               	movlw	high _returnStop
  7449  0FD5  00AF               	movwf	((low ((_i2c_status| 0+14)))^(0+128)+1)
  7450                           
  7451                           ;i2c_master.c: 134: i2c_status.callbackPayload[i2c_writeCollision] = (0);
  7452  0FD6  01B9               	clrf	(low ((_i2c_status| 0+25)))^(0+128)
  7453                           
  7454                           ;i2c_master.c: 135: i2c_status.callbackTable[i2c_addressNACK]=returnStop;
  7455  0FD7  3099               	movlw	low _returnStop
  7456  0FD8  00B0               	movwf	(low ((_i2c_status| 0+16)))^(0+128)
  7457  0FD9  3008               	movlw	high _returnStop
  7458  0FDA  00B1               	movwf	((low ((_i2c_status| 0+16)))^(0+128)+1)
  7459                           
  7460                           ;i2c_master.c: 136: i2c_status.callbackPayload[i2c_addressNACK] = (0);
  7461  0FDB  01BA               	clrf	(low ((_i2c_status| 0+26)))^(0+128)
  7462                           
  7463                           ;i2c_master.c: 137: i2c_status.callbackTable[i2c_dataNACK]=returnStop;
  7464  0FDC  3099               	movlw	low _returnStop
  7465  0FDD  00B2               	movwf	(low ((_i2c_status| 0+18)))^(0+128)
  7466  0FDE  3008               	movlw	high _returnStop
  7467  0FDF  00B3               	movwf	((low ((_i2c_status| 0+18)))^(0+128)+1)
  7468                           
  7469                           ;i2c_master.c: 138: i2c_status.callbackPayload[i2c_dataNACK] = (0);
  7470  0FE0  01BB               	clrf	(low ((_i2c_status| 0+27)))^(0+128)
  7471                           
  7472                           ;i2c_master.c: 139: i2c_status.callbackTable[i2c_timeOut]=returnReset;
  7473  0FE1  309F               	movlw	low _returnReset
  7474  0FE2  00B4               	movwf	(low ((_i2c_status| 0+20)))^(0+128)
  7475  0FE3  3008               	movlw	high _returnReset
  7476  0FE4  00B5               	movwf	((low ((_i2c_status| 0+20)))^(0+128)+1)
  7477                           
  7478                           ;i2c_master.c: 140: i2c_status.callbackPayload[i2c_timeOut] = (0);
  7479  0FE5  01BC               	clrf	(low ((_i2c_status| 0+28)))^(0+128)
  7480                           
  7481                           ;i2c_master.c: 142: i2c_driver_open();
  7482  0FE6  3189  2138  318F   	fcall	_i2c_driver_open
  7483                           
  7484                           ;i2c_master.c: 143: mssp_clearIRQ();
  7485  0FE9  3188  2021  318F   	fcall	_mssp_clearIRQ
  7486                           
  7487                           ;i2c_master.c: 145: i2c_driver_setBusCollisionISR(i2c_busCollisionISR);
  7488  0FEC  300C               	movlw	low _i2c_busCollisionISR
  7489  0FED  0020               	movlb	0	; select bank0
  7490  0FEE  00A2               	movwf	i2c_driver_setBusCollisionISR@f
  7491  0FEF  3008               	movlw	high _i2c_busCollisionISR
  7492  0FF0  00A3               	movwf	i2c_driver_setBusCollisionISR@f+1
  7493  0FF1  3188  20AB  318F   	fcall	_i2c_driver_setBusCollisionISR
  7494                           
  7495                           ;i2c_master.c: 146: i2c_driver_setI2cISR(i2c_ISR);
  7496  0FF4  306E               	movlw	low _i2c_ISR
  7497  0FF5  0020               	movlb	0	; select bank0
  7498  0FF6  00A2               	movwf	i2c_driver_setI2cISR@f
  7499  0FF7  300C               	movlw	high _i2c_ISR
  7500  0FF8  00A3               	movwf	i2c_driver_setI2cISR@f+1
  7501  0FF9  3188  20B1         	fcall	_i2c_driver_setI2cISR
  7502                           
  7503                           ;i2c_master.c: 151: ret = I2C_NOERR;
  7504  0FFB  0020               	movlb	0	; select bank0
  7505  0FFC  01A6               	clrf	i2c_open@ret
  7506  0FFD                     l443:	
  7507                           
  7508                           ;i2c_master.c: 152: }
  7509                           ;i2c_master.c: 153: return ret;
  7510  0FFD  0020               	movlb	0	; select bank0
  7511  0FFE  0826               	movf	i2c_open@ret,w
  7512  0FFF  0008               	return
  7513  1000                     __end_of_i2c_open:	
  7514                           
  7515                           	psect	text14
  7516  08B1                     __ptext14:	
  7517 ;; *************** function _i2c_driver_setI2cISR *****************
  7518 ;; Defined at:
  7519 ;;		line 262 in file "mcc_generated_files/i2c_driver.c"
  7520 ;; Parameters:    Size  Location     Type
  7521 ;;  f               2    2[BANK0 ] PTR void 
  7522 ;;		 -> i2c_ISR(1), 
  7523 ;; Auto vars:     Size  Location     Type
  7524 ;;		None
  7525 ;; Return value:  Size  Location     Type
  7526 ;;                  1    wreg      void 
  7527 ;; Registers used:
  7528 ;;		wreg
  7529 ;; Tracked objects:
  7530 ;;		On entry : 0/0
  7531 ;;		On exit  : 0/0
  7532 ;;		Unchanged: 0/0
  7533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7534 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7535 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7536 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7537 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7538 ;;Total ram usage:        2 bytes
  7539 ;; Hardware stack levels used:    1
  7540 ;; Hardware stack levels required when called:    6
  7541 ;; This function calls:
  7542 ;;		Nothing
  7543 ;; This function is called by:
  7544 ;;		_i2c_open
  7545 ;; This function uses a non-reentrant model
  7546 ;;
  7547                           
  7548                           
  7549                           ;psect for function _i2c_driver_setI2cISR
  7550  08B1                     _i2c_driver_setI2cISR:	
  7551                           
  7552                           ;i2c_driver.c: 263: i2c_driver_i2cISR = f;
  7553                           
  7554                           ;incstack = 0
  7555                           ; Regs used in _i2c_driver_setI2cISR: [wreg]
  7556  08B1  0020               	movlb	0	; select bank0
  7557  08B2  0823               	movf	i2c_driver_setI2cISR@f+1,w
  7558  08B3  00DC               	movwf	_i2c_driver_i2cISR+1
  7559  08B4  0822               	movf	i2c_driver_setI2cISR@f,w
  7560  08B5  00DB               	movwf	_i2c_driver_i2cISR
  7561  08B6  0008               	return
  7562  08B7                     __end_of_i2c_driver_setI2cISR:	
  7563                           
  7564                           	psect	text15
  7565  08AB                     __ptext15:	
  7566 ;; *************** function _i2c_driver_setBusCollisionISR *****************
  7567 ;; Defined at:
  7568 ;;		line 258 in file "mcc_generated_files/i2c_driver.c"
  7569 ;; Parameters:    Size  Location     Type
  7570 ;;  f               2    2[BANK0 ] PTR void 
  7571 ;;		 -> i2c_busCollisionISR(1), 
  7572 ;; Auto vars:     Size  Location     Type
  7573 ;;		None
  7574 ;; Return value:  Size  Location     Type
  7575 ;;                  1    wreg      void 
  7576 ;; Registers used:
  7577 ;;		wreg
  7578 ;; Tracked objects:
  7579 ;;		On entry : 0/0
  7580 ;;		On exit  : 0/0
  7581 ;;		Unchanged: 0/0
  7582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7583 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7584 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7585 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7586 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7587 ;;Total ram usage:        2 bytes
  7588 ;; Hardware stack levels used:    1
  7589 ;; Hardware stack levels required when called:    6
  7590 ;; This function calls:
  7591 ;;		Nothing
  7592 ;; This function is called by:
  7593 ;;		_i2c_open
  7594 ;; This function uses a non-reentrant model
  7595 ;;
  7596                           
  7597                           
  7598                           ;psect for function _i2c_driver_setBusCollisionISR
  7599  08AB                     _i2c_driver_setBusCollisionISR:	
  7600                           
  7601                           ;i2c_driver.c: 259: i2c_driver_busCollisionISR = f;
  7602                           
  7603                           ;incstack = 0
  7604                           ; Regs used in _i2c_driver_setBusCollisionISR: [wreg]
  7605  08AB  0020               	movlb	0	; select bank0
  7606  08AC  0823               	movf	i2c_driver_setBusCollisionISR@f+1,w
  7607  08AD  00DE               	movwf	_i2c_driver_busCollisionISR+1
  7608  08AE  0822               	movf	i2c_driver_setBusCollisionISR@f,w
  7609  08AF  00DD               	movwf	_i2c_driver_busCollisionISR
  7610  08B0  0008               	return
  7611  08B1                     __end_of_i2c_driver_setBusCollisionISR:	
  7612                           
  7613                           	psect	text16
  7614  0938                     __ptext16:	
  7615 ;; *************** function _i2c_driver_open *****************
  7616 ;; Defined at:
  7617 ;;		line 83 in file "mcc_generated_files/i2c_driver.c"
  7618 ;; Parameters:    Size  Location     Type
  7619 ;;		None
  7620 ;; Auto vars:     Size  Location     Type
  7621 ;;		None
  7622 ;; Return value:  Size  Location     Type
  7623 ;;		None               void
  7624 ;; Registers used:
  7625 ;;		wreg, status,2
  7626 ;; Tracked objects:
  7627 ;;		On entry : 0/0
  7628 ;;		On exit  : 0/0
  7629 ;;		Unchanged: 0/0
  7630 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7631 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7632 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7633 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7634 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7635 ;;Total ram usage:        0 bytes
  7636 ;; Hardware stack levels used:    1
  7637 ;; Hardware stack levels required when called:    6
  7638 ;; This function calls:
  7639 ;;		Nothing
  7640 ;; This function is called by:
  7641 ;;		_i2c_open
  7642 ;; This function uses a non-reentrant model
  7643 ;;
  7644                           
  7645                           
  7646                           ;psect for function _i2c_driver_open
  7647  0938                     _i2c_driver_open:	
  7648                           
  7649                           ;i2c_driver.c: 85: if(!SSP1CON1bits.SSPEN)
  7650                           
  7651                           ;incstack = 0
  7652                           ; Regs used in _i2c_driver_open: [wreg+status,2]
  7653  0938  0024               	movlb	4	; select bank4
  7654  0939  1A95               	btfsc	21,5	;volatile
  7655  093A  0008               	return
  7656                           
  7657                           ;i2c_driver.c: 86: {
  7658                           ;i2c_driver.c: 87: SSP1STAT = 0x00;
  7659  093B  0194               	clrf	20	;volatile
  7660                           
  7661                           ;i2c_driver.c: 88: SSP1CON1 = 0x28;
  7662  093C  3028               	movlw	40
  7663  093D  0095               	movwf	21	;volatile
  7664                           
  7665                           ;i2c_driver.c: 89: SSP1CON2 = 0x00;
  7666  093E  0196               	clrf	22	;volatile
  7667                           
  7668                           ;i2c_driver.c: 90: SSP1ADD = 0x4f;
  7669  093F  304F               	movlw	79
  7670  0940  0092               	movwf	18	;volatile
  7671                           
  7672                           ;i2c_driver.c: 93: else
  7673                           ;i2c_driver.c: 94: return 0;
  7674                           ;	Return value of _i2c_driver_open is never used
  7675                           
  7676                           ;i2c_driver.c: 92: }
  7677                           
  7678                           ;i2c_driver.c: 91: return 1;
  7679                           ;	Return value of _i2c_driver_open is never used
  7680  0941  0008               	return
  7681  0942                     __end_of_i2c_driver_open:	
  7682                           
  7683                           	psect	text17
  7684  0868                     __ptext17:	
  7685 ;; *************** function _i2c_masterWrite *****************
  7686 ;; Defined at:
  7687 ;;		line 222 in file "mcc_generated_files/drivers/i2c_master.c"
  7688 ;; Parameters:    Size  Location     Type
  7689 ;;		None
  7690 ;; Auto vars:     Size  Location     Type
  7691 ;;		None
  7692 ;; Return value:  Size  Location     Type
  7693 ;;                  1    wreg      enum E92
  7694 ;; Registers used:
  7695 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7696 ;; Tracked objects:
  7697 ;;		On entry : 0/0
  7698 ;;		On exit  : 0/0
  7699 ;;		Unchanged: 0/0
  7700 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7701 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7702 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7703 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7704 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7705 ;;Total ram usage:        0 bytes
  7706 ;; Hardware stack levels used:    1
  7707 ;; Hardware stack levels required when called:   13
  7708 ;; This function calls:
  7709 ;;		_i2c_masterOperation
  7710 ;; This function is called by:
  7711 ;;		_i2c_writeNBytes
  7712 ;;		_i2c_write1ByteRegister
  7713 ;;		_i2c_read1ByteRegister
  7714 ;;		_i2c_read2ByteRegister
  7715 ;;		_i2c_write2ByteRegister
  7716 ;;		_i2c_readDataBlock
  7717 ;; This function uses a non-reentrant model
  7718 ;;
  7719                           
  7720                           
  7721                           ;psect for function _i2c_masterWrite
  7722  0868                     _i2c_masterWrite:	
  7723                           
  7724                           ;i2c_master.c: 224: return i2c_masterOperation(0);
  7725                           ;	Return value of _i2c_masterWrite is never used
  7726                           
  7727                           ;incstack = 0
  7728                           ; Regs used in _i2c_masterWrite: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7729  0868  3000               	movlw	0
  7730  0869  318C  2425         	fcall	_i2c_masterOperation
  7731  086B  0008               	return
  7732  086C                     __end_of_i2c_masterWrite:	
  7733                           
  7734                           	psect	text18
  7735  0C25                     __ptext18:	
  7736 ;; *************** function _i2c_masterOperation *****************
  7737 ;; Defined at:
  7738 ;;		line 193 in file "mcc_generated_files/drivers/i2c_master.c"
  7739 ;; Parameters:    Size  Location     Type
  7740 ;;  read            1    wreg     unsigned char 
  7741 ;; Auto vars:     Size  Location     Type
  7742 ;;  read            1   18[BANK0 ] unsigned char 
  7743 ;;  ret             1   19[BANK0 ] enum E12166
  7744 ;; Return value:  Size  Location     Type
  7745 ;;                  1    wreg      enum E12166
  7746 ;; Registers used:
  7747 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7748 ;; Tracked objects:
  7749 ;;		On entry : 0/0
  7750 ;;		On exit  : 0/0
  7751 ;;		Unchanged: 0/0
  7752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7753 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7754 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7755 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7756 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7757 ;;Total ram usage:        3 bytes
  7758 ;; Hardware stack levels used:    1
  7759 ;; Hardware stack levels required when called:   12
  7760 ;; This function calls:
  7761 ;;		_i2c_driver_start
  7762 ;;		_i2c_poller
  7763 ;;		_mssp_IRQisEnabled
  7764 ;; This function is called by:
  7765 ;;		_i2c_masterWrite
  7766 ;;		_i2c_masterRead
  7767 ;; This function uses a non-reentrant model
  7768 ;;
  7769                           
  7770                           
  7771                           ;psect for function _i2c_masterOperation
  7772  0C25                     _i2c_masterOperation:	
  7773                           
  7774                           ;incstack = 0
  7775                           ; Regs used in _i2c_masterOperation: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7776                           ;i2c_masterOperation@read stored from wreg
  7777  0C25  0020               	movlb	0	; select bank0
  7778  0C26  00B2               	movwf	i2c_masterOperation@read
  7779                           
  7780                           ;i2c_master.c: 195: i2c_error_t ret = I2C_BUSY;
  7781  0C27  01B3               	clrf	i2c_masterOperation@ret
  7782  0C28  0AB3               	incf	i2c_masterOperation@ret,f
  7783                           
  7784                           ;i2c_master.c: 196: if(!i2c_status.busy)
  7785  0C29  0021               	movlb	1	; select bank1
  7786  0C2A  1820               	btfsc	_i2c_status^(0+128),0
  7787  0C2B  2C46               	goto	l6937
  7788                           
  7789                           ;i2c_master.c: 197: {
  7790                           ;i2c_master.c: 198: i2c_status.busy = 1;
  7791  0C2C  1420               	bsf	_i2c_status^(0+128),0
  7792                           
  7793                           ;i2c_master.c: 199: ret = I2C_NOERR;
  7794  0C2D  0020               	movlb	0	; select bank0
  7795  0C2E  01B3               	clrf	i2c_masterOperation@ret
  7796                           
  7797                           ;i2c_master.c: 201: if(read)
  7798  0C2F  0832               	movf	i2c_masterOperation@read,w
  7799  0C30  1903               	btfsc	3,2
  7800  0C31  2C36               	goto	l6931
  7801                           
  7802                           ;i2c_master.c: 202: {
  7803                           ;i2c_master.c: 203: i2c_status.state = I2C_SEND_ADR_READ;
  7804  0C32  0021               	movlb	1	; select bank1
  7805  0C33  01AA               	clrf	(_i2c_status^(0+128)+10)
  7806  0C34  0AAA               	incf	(_i2c_status^(0+128)+10),f
  7807                           
  7808                           ;i2c_master.c: 204: }
  7809  0C35  2C3C               	goto	l6933
  7810  0C36                     l6931:	
  7811                           
  7812                           ;i2c_master.c: 205: else
  7813                           ;i2c_master.c: 206: {
  7814                           ;i2c_master.c: 207: i2c_status.state = I2C_SEND_ADR_WRITE;
  7815  0C36  3002               	movlw	2
  7816  0C37  0020               	movlb	0	; select bank0
  7817  0C38  00B1               	movwf	??_i2c_masterOperation
  7818  0C39  0831               	movf	??_i2c_masterOperation,w
  7819  0C3A  0021               	movlb	1	; select bank1
  7820  0C3B  00AA               	movwf	(_i2c_status^(0+128)+10)
  7821  0C3C                     l6933:	
  7822                           
  7823                           ;i2c_master.c: 208: }
  7824                           ;i2c_master.c: 209: i2c_driver_start();
  7825  0C3C  3188  2027  318C   	fcall	_i2c_driver_start
  7826                           
  7827                           ;i2c_master.c: 211: if(! mssp_IRQisEnabled())
  7828  0C3F  3189  212E  318C   	fcall	_mssp_IRQisEnabled
  7829  0C42  1803               	btfsc	3,0
  7830  0C43  2C46               	goto	l6937
  7831                           
  7832                           ;i2c_master.c: 212: i2c_poller();
  7833  0C44  3189  2163         	fcall	_i2c_poller
  7834  0C46                     l6937:	
  7835                           
  7836                           ;i2c_master.c: 213: }
  7837                           ;i2c_master.c: 214: return ret;
  7838  0C46  0020               	movlb	0	; select bank0
  7839  0C47  0833               	movf	i2c_masterOperation@ret,w
  7840  0C48  0008               	return
  7841  0C49                     __end_of_i2c_masterOperation:	
  7842                           
  7843                           	psect	text19
  7844  092E                     __ptext19:	
  7845 ;; *************** function _mssp_IRQisEnabled *****************
  7846 ;; Defined at:
  7847 ;;		line 43 in file "mcc_generated_files/i2c_driver.c"
  7848 ;; Parameters:    Size  Location     Type
  7849 ;;		None
  7850 ;; Auto vars:     Size  Location     Type
  7851 ;;		None
  7852 ;; Return value:  Size  Location     Type
  7853 ;;		None               void
  7854 ;; Registers used:
  7855 ;;		wreg, status,2, status,0
  7856 ;; Tracked objects:
  7857 ;;		On entry : 0/0
  7858 ;;		On exit  : 0/0
  7859 ;;		Unchanged: 0/0
  7860 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7861 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7862 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7863 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7864 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7865 ;;Total ram usage:        2 bytes
  7866 ;; Hardware stack levels used:    1
  7867 ;; Hardware stack levels required when called:    6
  7868 ;; This function calls:
  7869 ;;		Nothing
  7870 ;; This function is called by:
  7871 ;;		_i2c_masterOperation
  7872 ;; This function uses a non-reentrant model
  7873 ;;
  7874                           
  7875                           
  7876                           ;psect for function _mssp_IRQisEnabled
  7877  092E                     _mssp_IRQisEnabled:	
  7878                           
  7879                           ;i2c_driver.c: 45: return PIE1bits.SSP1IE;
  7880                           
  7881                           ;incstack = 0
  7882                           ; Regs used in _mssp_IRQisEnabled: [wreg+status,2+status,0]
  7883  092E  0021               	movlb	1	; select bank1
  7884  092F  0C10               	rrf	16,w	;volatile
  7885  0930  0020               	movlb	0	; select bank0
  7886  0931  00A2               	movwf	??_mssp_IRQisEnabled
  7887  0932  0CA2               	rrf	??_mssp_IRQisEnabled,f
  7888  0933  0C22               	rrf	??_mssp_IRQisEnabled,w
  7889  0934  3901               	andlw	1
  7890  0935  00A3               	movwf	??_mssp_IRQisEnabled+1
  7891  0936  0C23               	rrf	??_mssp_IRQisEnabled+1,w
  7892  0937  0008               	return
  7893  0938                     __end_of_mssp_IRQisEnabled:	
  7894                           
  7895                           	psect	text20
  7896  0963                     __ptext20:	
  7897 ;; *************** function _i2c_poller *****************
  7898 ;; Defined at:
  7899 ;;		line 230 in file "mcc_generated_files/drivers/i2c_master.c"
  7900 ;; Parameters:    Size  Location     Type
  7901 ;;		None
  7902 ;; Auto vars:     Size  Location     Type
  7903 ;;		None
  7904 ;; Return value:  Size  Location     Type
  7905 ;;                  1    wreg      void 
  7906 ;; Registers used:
  7907 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7908 ;; Tracked objects:
  7909 ;;		On entry : 0/0
  7910 ;;		On exit  : 0/0
  7911 ;;		Unchanged: 0/0
  7912 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7913 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7914 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7915 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7916 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7917 ;;Total ram usage:        0 bytes
  7918 ;; Hardware stack levels used:    1
  7919 ;; Hardware stack levels required when called:   11
  7920 ;; This function calls:
  7921 ;;		_i2c_ISR
  7922 ;;		_mssp_waitForEvent
  7923 ;; This function is called by:
  7924 ;;		_i2c_masterOperation
  7925 ;; This function uses a non-reentrant model
  7926 ;;
  7927                           
  7928                           
  7929                           ;psect for function _i2c_poller
  7930  0963                     _i2c_poller:	
  7931  0963                     l6919:	
  7932                           ;i2c_master.c: 232: while(i2c_status.busy)
  7933                           
  7934                           ;incstack = 0
  7935                           ; Regs used in _i2c_poller: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7936                           
  7937  0963  0021               	movlb	1	; select bank1
  7938  0964  1C20               	btfss	_i2c_status^(0+128),0
  7939  0965  0008               	return
  7940                           
  7941                           ;i2c_master.c: 233: {
  7942                           ;i2c_master.c: 234: mssp_waitForEvent((0));
  7943  0966  3000               	movlw	0
  7944  0967  3189  2158  3189   	fcall	_mssp_waitForEvent
  7945                           
  7946                           ;i2c_master.c: 235: i2c_ISR();
  7947  096A  318C  246E  3189   	fcall	_i2c_ISR
  7948  096D  2963               	goto	l6919
  7949  096E                     __end_of_i2c_poller:	
  7950                           
  7951                           	psect	text21
  7952  0958                     __ptext21:	
  7953 ;; *************** function _mssp_waitForEvent *****************
  7954 ;; Defined at:
  7955 ;;		line 68 in file "mcc_generated_files/i2c_driver.c"
  7956 ;; Parameters:    Size  Location     Type
  7957 ;;  timeout         1    wreg     PTR unsigned int 
  7958 ;;		 -> NULL(0), 
  7959 ;; Auto vars:     Size  Location     Type
  7960 ;;  timeout         1    2[BANK0 ] PTR unsigned int 
  7961 ;;		 -> NULL(0), 
  7962 ;; Return value:  Size  Location     Type
  7963 ;;                  1    wreg      void 
  7964 ;; Registers used:
  7965 ;;		wreg
  7966 ;; Tracked objects:
  7967 ;;		On entry : 0/0
  7968 ;;		On exit  : 0/0
  7969 ;;		Unchanged: 0/0
  7970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7971 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7972 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7973 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7974 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7975 ;;Total ram usage:        1 bytes
  7976 ;; Hardware stack levels used:    1
  7977 ;; Hardware stack levels required when called:    6
  7978 ;; This function calls:
  7979 ;;		Nothing
  7980 ;; This function is called by:
  7981 ;;		_i2c_poller
  7982 ;; This function uses a non-reentrant model
  7983 ;;
  7984                           
  7985                           
  7986                           ;psect for function _mssp_waitForEvent
  7987  0958                     _mssp_waitForEvent:	
  7988                           
  7989                           ;i2c_driver.c: 73: if(PIR1bits.SSP1IF == 0)
  7990                           
  7991                           ;incstack = 0
  7992                           ; Regs used in _mssp_waitForEvent: [wreg]
  7993  0958  0020               	movlb	0	; select bank0
  7994  0959  1990               	btfsc	16,3	;volatile
  7995  095A  0008               	return
  7996  095B                     l153:	
  7997                           ;i2c_driver.c: 74: {
  7998                           ;i2c_driver.c: 75: while(1)
  7999                           
  8000                           
  8001                           ;i2c_driver.c: 76: {
  8002                           ;i2c_driver.c: 77: if(PIR1bits.SSP1IF) break;
  8003  095B  0020               	movlb	0	; select bank0
  8004  095C  1990               	btfsc	16,3	;volatile
  8005  095D  0008               	return
  8006                           
  8007                           ;i2c_driver.c: 78: _delay((unsigned long)((100)*(32000000/4000000.0)));
  8008  095E  30A0               	movlw	160
  8009  095F                     u6507:	
  8010  095F  3200               	nop2
  8011  0960  0B89               	decfsz	9,f
  8012  0961  295F               	goto	u6507
  8013  0962  295B               	goto	l153
  8014  0963                     __end_of_mssp_waitForEvent:	
  8015                           
  8016                           	psect	text22
  8017  0C6E                     __ptext22:	
  8018 ;; *************** function _i2c_ISR *****************
  8019 ;; Defined at:
  8020 ;;		line 419 in file "mcc_generated_files/drivers/i2c_master.c"
  8021 ;; Parameters:    Size  Location     Type
  8022 ;;		None
  8023 ;; Auto vars:     Size  Location     Type
  8024 ;;		None
  8025 ;; Return value:  Size  Location     Type
  8026 ;;                  1    wreg      void 
  8027 ;; Registers used:
  8028 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8029 ;; Tracked objects:
  8030 ;;		On entry : 0/0
  8031 ;;		On exit  : 0/0
  8032 ;;		Unchanged: 0/0
  8033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8034 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8035 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8036 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8037 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8038 ;;Total ram usage:        1 bytes
  8039 ;; Hardware stack levels used:    1
  8040 ;; Hardware stack levels required when called:   10
  8041 ;; This function calls:
  8042 ;;		_do_I2C_DO_ACK
  8043 ;;		_do_I2C_DO_ADDRESS_NACK
  8044 ;;		_do_I2C_DO_NACK_RESTART
  8045 ;;		_do_I2C_DO_NACK_STOP
  8046 ;;		_do_I2C_IDLE
  8047 ;;		_do_I2C_RCEN
  8048 ;;		_do_I2C_RESET
  8049 ;;		_do_I2C_RX
  8050 ;;		_do_I2C_SEND_ADR_READ
  8051 ;;		_do_I2C_SEND_ADR_WRITE
  8052 ;;		_do_I2C_SEND_RESTART
  8053 ;;		_do_I2C_SEND_RESTART_READ
  8054 ;;		_do_I2C_SEND_RESTART_WRITE
  8055 ;;		_do_I2C_SEND_STOP
  8056 ;;		_do_I2C_TX
  8057 ;;		_do_I2C_TX_EMPTY
  8058 ;;		_i2c_driver_isNACK
  8059 ;;		_mssp_clearIRQ
  8060 ;; This function is called by:
  8061 ;;		_i2c_open
  8062 ;;		_i2c_poller
  8063 ;;		_INTERRUPT_InterruptManager
  8064 ;; This function uses a non-reentrant model
  8065 ;;
  8066                           
  8067                           
  8068                           ;psect for function _i2c_ISR
  8069  0C6E                     _i2c_ISR:	
  8070                           
  8071                           ;Skip over the trampoline to the duplicate function for level 1
  8072  0C6E  1C7E               	btfss	126,0
  8073  0C6F  2C72               	goto	l6903
  8074  0C70  318B  2BBC         	ljmp	i1l7331
  8075  0C72                     _i2c_ISR$intlevel0:	
  8076  0C72                     l6903:	
  8077                           ;incstack = 0
  8078                           ; Regs used in _i2c_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8079                           
  8080                           
  8081                           ;i2c_master.c: 421: mssp_clearIRQ();
  8082  0C72  3188  2021  318C   	fcall	_mssp_clearIRQ
  8083                           
  8084                           ;i2c_master.c: 427: if(i2c_status.addressNACKCheck && i2c_driver_isNACK())
  8085  0C75  0021               	movlb	1	; select bank1
  8086  0C76  1DA0               	btfss	_i2c_status^(0+128),3
  8087  0C77  2C83               	goto	l6911
  8088  0C78  3189  21C6  318C   	fcall	_i2c_driver_isNACK
  8089  0C7B  1C03               	btfss	3,0
  8090  0C7C  2C83               	goto	l6911
  8091                           
  8092                           ;i2c_master.c: 428: {
  8093                           ;i2c_master.c: 429: i2c_status.state = I2C_ADDRESS_NACK;
  8094  0C7D  300F               	movlw	15
  8095  0C7E  0020               	movlb	0	; select bank0
  8096  0C7F  00B0               	movwf	??_i2c_ISR
  8097  0C80  0830               	movf	??_i2c_ISR,w
  8098  0C81  0021               	movlb	1	; select bank1
  8099  0C82  00AA               	movwf	(_i2c_status^(0+128)+10)
  8100  0C83                     l6911:	
  8101                           
  8102                           ;i2c_master.c: 430: }
  8103                           ;i2c_master.c: 432: i2c_status.state = fsmStateTable[i2c_status.state]();
  8104  0C83  0021               	movlb	1	; select bank1
  8105  0C84  352A               	lslf	(_i2c_status^(0+128)+10),w
  8106  0C85  3EA0               	addlw	(low (_fsmStateTable| (0+512)))& (0+255)
  8107  0C86  0086               	movwf	6
  8108  0C87  3002               	movlw	2	; select bank5/6
  8109  0C88  0087               	movwf	7
  8110  0C89  3F41               	moviw [1]fsr1
  8111  0C8A  008A               	movwf	10
  8112  0C8B  3F40               	moviw [0]fsr1
  8113  0C8C  000A               	callw
  8114  0C8D  318C               	pagesel	$
  8115  0C8E  0020               	movlb	0	; select bank0
  8116  0C8F  00B0               	movwf	??_i2c_ISR
  8117  0C90  0830               	movf	??_i2c_ISR,w
  8118  0C91  0021               	movlb	1	; select bank1
  8119  0C92  00AA               	movwf	(_i2c_status^(0+128)+10)
  8120  0C93  0008               	return
  8121  0C94                     __end_of_i2c_ISR:	
  8122                           
  8123                           	psect	text23
  8124  0F6B                     __ptext23:	
  8125 ;; *************** function _do_I2C_RX *****************
  8126 ;; Defined at:
  8127 ;;		line 357 in file "mcc_generated_files/drivers/i2c_master.c"
  8128 ;; Parameters:    Size  Location     Type
  8129 ;;		None
  8130 ;; Auto vars:     Size  Location     Type
  8131 ;;		None
  8132 ;; Return value:  Size  Location     Type
  8133 ;;                  1    wreg      enum E12337
  8134 ;; Registers used:
  8135 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8136 ;; Tracked objects:
  8137 ;;		On entry : 0/0
  8138 ;;		On exit  : 0/0
  8139 ;;		Unchanged: 0/0
  8140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8141 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8142 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8143 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8144 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8145 ;;Total ram usage:        1 bytes
  8146 ;; Hardware stack levels used:    1
  8147 ;; Hardware stack levels required when called:    9
  8148 ;; This function calls:
  8149 ;;		Absolute function
  8150 ;;		_do_I2C_DO_NACK_RESTART
  8151 ;;		_do_I2C_DO_NACK_STOP
  8152 ;;		_i2c_driver_getRXData
  8153 ;;		_i2c_driver_sendACK
  8154 ;;		_i2c_restartWrite
  8155 ;;		_rd1RegCompleteHandler
  8156 ;;		_rd2RegCompleteHandler
  8157 ;;		_rdBlkRegCompleteHandler
  8158 ;;		_returnReset
  8159 ;;		_returnStop
  8160 ;;		_wr1RegCompleteHandler
  8161 ;;		_wr2RegCompleteHandler
  8162 ;; This function is called by:
  8163 ;;		_i2c_ISR
  8164 ;;		i1_i2c_ISR
  8165 ;; This function uses a non-reentrant model
  8166 ;;
  8167                           
  8168                           
  8169                           ;psect for function _do_I2C_RX
  8170  0F6B                     _do_I2C_RX:	
  8171                           
  8172                           ;Skip over the trampoline to the duplicate function for level 1
  8173  0F6B  1C7E               	btfss	126,0
  8174  0F6C  2F6F               	goto	l6857
  8175  0F6D  318E  2EA1         	ljmp	i1l7177
  8176  0F6F                     _do_I2C_RX$intlevel0:	
  8177  0F6F                     l6857:	
  8178                           ;incstack = 0
  8179                           ; Regs used in _do_I2C_RX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8180                           
  8181                           
  8182                           ;i2c_master.c: 359: *i2c_status.data_ptr++ = i2c_driver_getRXData();
  8183  0F6F  3188  2033  318F   	fcall	_i2c_driver_getRXData
  8184  0F72  0020               	movlb	0	; select bank0
  8185  0F73  00AC               	movwf	??_do_I2C_RX
  8186  0F74  0021               	movlb	1	; select bank1
  8187  0F75  0822               	movf	(low ((_i2c_status| 0+2)))^(0+128),w
  8188  0F76  0086               	movwf	6
  8189  0F77  0823               	movf	((low ((_i2c_status| 0+2))+1))^(0+128),w
  8190  0F78  0087               	movwf	7
  8191  0F79  0020               	movlb	0	; select bank0
  8192  0F7A  082C               	movf	??_do_I2C_RX,w
  8193  0F7B  0081               	movwf	1
  8194  0F7C  3001               	movlw	1
  8195  0F7D  0021               	movlb	1	; select bank1
  8196  0F7E  07A2               	addwf	(low ((_i2c_status| 0+2)))^(0+128),f
  8197  0F7F  3000               	movlw	0
  8198  0F80  3DA3               	addwfc	((low ((_i2c_status| 0+2))+1))^(0+128),f
  8199                           
  8200                           ;i2c_master.c: 360: if(--i2c_status.data_length)
  8201  0F81  3001               	movlw	1
  8202  0F82  02A4               	subwf	(_i2c_status^(0+128)+4),f
  8203  0F83  3000               	movlw	0
  8204  0F84  3BA5               	subwfb	((_i2c_status+1)^(0+128)+4),f
  8205  0F85  0824               	movf	(_i2c_status^(0+128)+4),w
  8206  0F86  0425               	iorwf	((_i2c_status+1)^(0+128)+4),w
  8207  0F87  1903               	btfsc	3,2
  8208  0F88  2F8D               	goto	l540
  8209                           
  8210                           ;i2c_master.c: 361: {
  8211                           ;i2c_master.c: 362: i2c_driver_sendACK();
  8212  0F89  3188  2060         	fcall	_i2c_driver_sendACK
  8213                           
  8214                           ;i2c_master.c: 363: return I2C_RCEN;
  8215  0F8B  3005               	movlw	5
  8216                           
  8217                           ;i2c_master.c: 364: }
  8218  0F8C  0008               	return
  8219  0F8D                     l540:	
  8220                           
  8221                           ;i2c_master.c: 365: else
  8222                           ;i2c_master.c: 366: {
  8223                           ;i2c_master.c: 367: i2c_status.bufferFree = 1;
  8224  0F8D  1520               	bsf	_i2c_status^(0+128),2
  8225                           
  8226                           ;i2c_master.c: 368: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
  8227  0F8E  2F95               	goto	l6881
  8228  0F8F                     l6871:	
  8229                           ;i2c_master.c: 369: {
  8230                           ;i2c_master.c: 370: case i2c_restart_write:
  8231                           
  8232                           
  8233                           ;i2c_master.c: 371: case i2c_restart_read:
  8234                           ;i2c_master.c: 372: return do_I2C_DO_NACK_RESTART();
  8235  0F8F  3189  2109         	fcall	_do_I2C_DO_NACK_RESTART
  8236  0F91  0008               	return
  8237  0F92                     l6875:	
  8238                           ;i2c_master.c: 374: case i2c_continue:
  8239                           
  8240                           ;i2c_master.c: 373: default:
  8241                           
  8242                           
  8243                           ;i2c_master.c: 375: case i2c_stop:
  8244                           ;i2c_master.c: 376: return do_I2C_DO_NACK_STOP();
  8245  0F92  3189  2101         	fcall	_do_I2C_DO_NACK_STOP
  8246                           
  8247                           ;i2c_master.c: 377: }
  8248  0F94  0008               	return
  8249  0F95                     l6881:	
  8250  0F95  0021               	movlb	1	; select bank1
  8251  0F96  0838               	movf	(low ((_i2c_status| 0+24)))^(0+128),w
  8252  0F97  0020               	movlb	0	; select bank0
  8253  0F98  00AC               	movwf	??_do_I2C_RX
  8254  0F99  082C               	movf	??_do_I2C_RX,w
  8255  0F9A  00AB               	movwf	returnStop@p
  8256  0F9B  300C               	movlw	12
  8257  0F9C  3EA0               	addlw	(low (_i2c_status| 0))& (0+255)
  8258  0F9D  0086               	movwf	6
  8259  0F9E  0187               	clrf	7
  8260  0F9F  3F41               	moviw [1]fsr1
  8261  0FA0  008A               	movwf	10
  8262  0FA1  3F40               	moviw [0]fsr1
  8263  0FA2  000A               	callw
  8264  0FA3  318F               	pagesel	$
  8265                           
  8266                           ; Switch size 1, requested type "space"
  8267                           ; Number of cases is 4, Range of values is 1 to 4
  8268                           ; switch strategies available:
  8269                           ; Name         Instructions Cycles
  8270                           ; simple_byte           13     7 (average)
  8271                           ; direct_byte           17     9 (fixed)
  8272                           ; jumptable            263     9 (fixed)
  8273                           ;	Chosen strategy is simple_byte
  8274  0FA4  3A01               	xorlw	1	; case 1
  8275  0FA5  1903               	skipnz
  8276  0FA6  2F92               	goto	l6875
  8277  0FA7  3A03               	xorlw	3	; case 2
  8278  0FA8  1903               	skipnz
  8279  0FA9  2F8F               	goto	l6871
  8280  0FAA  3A01               	xorlw	1	; case 3
  8281  0FAB  1903               	skipnz
  8282  0FAC  2F8F               	goto	l6871
  8283  0FAD  3A07               	xorlw	7	; case 4
  8284  0FAE  1903               	skipnz
  8285  0FAF  2F92               	goto	l6875
  8286  0FB0  2F92               	goto	l6875
  8287  0FB1  0008               	return
  8288  0FB2                     __end_of_do_I2C_RX:	
  8289                           
  8290                           	psect	text24
  8291  0665                     __ptext24:	
  8292 ;; *************** function _do_I2C_TX *****************
  8293 ;; Defined at:
  8294 ;;		line 333 in file "mcc_generated_files/drivers/i2c_master.c"
  8295 ;; Parameters:    Size  Location     Type
  8296 ;;		None
  8297 ;; Auto vars:     Size  Location     Type
  8298 ;;		None
  8299 ;; Return value:  Size  Location     Type
  8300 ;;                  1    wreg      enum E12337
  8301 ;; Registers used:
  8302 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8303 ;; Tracked objects:
  8304 ;;		On entry : 0/0
  8305 ;;		On exit  : 0/0
  8306 ;;		Unchanged: 0/0
  8307 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8308 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8309 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8310 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8311 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8312 ;;Total ram usage:        4 bytes
  8313 ;; Hardware stack levels used:    1
  8314 ;; Hardware stack levels required when called:    9
  8315 ;; This function calls:
  8316 ;;		Absolute function
  8317 ;;		_do_I2C_SEND_RESTART_READ
  8318 ;;		_do_I2C_SEND_RESTART_WRITE
  8319 ;;		_do_I2C_SEND_STOP
  8320 ;;		_i2c_driver_TXData
  8321 ;;		_i2c_driver_isNACK
  8322 ;;		_i2c_restartWrite
  8323 ;;		_rd1RegCompleteHandler
  8324 ;;		_rd2RegCompleteHandler
  8325 ;;		_rdBlkRegCompleteHandler
  8326 ;;		_returnReset
  8327 ;;		_returnStop
  8328 ;;		_wr1RegCompleteHandler
  8329 ;;		_wr2RegCompleteHandler
  8330 ;; This function is called by:
  8331 ;;		_i2c_ISR
  8332 ;;		i1_i2c_ISR
  8333 ;; This function uses a non-reentrant model
  8334 ;;
  8335                           
  8336                           
  8337                           ;psect for function _do_I2C_TX
  8338  0665                     _do_I2C_TX:	
  8339                           
  8340                           ;Skip over the trampoline to the duplicate function for level 1
  8341  0665  1C7E               	btfss	126,0
  8342  0666  2E69               	goto	l6827
  8343  0667  3187  2FB3         	ljmp	i1l7147
  8344  0669                     _do_I2C_TX$intlevel0:	
  8345  0669                     l6827:	
  8346                           ;incstack = 0
  8347                           ; Regs used in _do_I2C_TX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8348                           
  8349                           
  8350                           ;i2c_master.c: 335: if(i2c_driver_isNACK())
  8351  0669  3189  21C6  3186   	fcall	_i2c_driver_isNACK
  8352  066C  1803               	btfsc	3,0
  8353  066D  2E78               	goto	l6845
  8354  066E  2E95               	goto	l524
  8355  066F                     l6831:	
  8356                           ;i2c_master.c: 338: {
  8357                           ;i2c_master.c: 339: case i2c_restart_read:
  8358                           
  8359                           ;i2c_master.c: 336: {
  8360                           ;i2c_master.c: 337: switch(i2c_status.callbackTable[i2c_dataNACK](i2c_status.callbackPay
      +                          load[i2c_dataNACK]))
  8361                           
  8362                           
  8363                           ;i2c_master.c: 340: return do_I2C_SEND_RESTART_READ();
  8364  066F  3188  20D9         	fcall	_do_I2C_SEND_RESTART_READ
  8365  0671  0008               	return
  8366  0672                     l6835:	
  8367                           ;i2c_master.c: 341: case i2c_restart_write:
  8368                           
  8369                           
  8370                           ;i2c_master.c: 342: return do_I2C_SEND_RESTART_WRITE();
  8371  0672  3188  20E1         	fcall	_do_I2C_SEND_RESTART_WRITE
  8372  0674  0008               	return
  8373  0675                     l6839:	
  8374                           ;i2c_master.c: 344: case i2c_continue:
  8375                           
  8376                           ;i2c_master.c: 343: default:
  8377                           
  8378                           
  8379                           ;i2c_master.c: 345: case i2c_stop:
  8380                           ;i2c_master.c: 346: return do_I2C_SEND_STOP();
  8381  0675  3188  20F1         	fcall	_do_I2C_SEND_STOP
  8382                           
  8383                           ;i2c_master.c: 347: }
  8384  0677  0008               	return
  8385  0678                     l6845:	
  8386  0678  0021               	movlb	1	; select bank1
  8387  0679  083B               	movf	(low ((_i2c_status| 0+27)))^(0+128),w
  8388  067A  0020               	movlb	0	; select bank0
  8389  067B  00AC               	movwf	??_do_I2C_TX
  8390  067C  082C               	movf	??_do_I2C_TX,w
  8391  067D  00AB               	movwf	returnStop@p
  8392  067E  3012               	movlw	18
  8393  067F  3EA0               	addlw	(low (_i2c_status| 0))& (0+255)
  8394  0680  0086               	movwf	6
  8395  0681  0187               	clrf	7
  8396  0682  3F41               	moviw [1]fsr1
  8397  0683  008A               	movwf	10
  8398  0684  3F40               	moviw [0]fsr1
  8399  0685  000A               	callw
  8400  0686  3186               	pagesel	$
  8401                           
  8402                           ; Switch size 1, requested type "space"
  8403                           ; Number of cases is 4, Range of values is 1 to 4
  8404                           ; switch strategies available:
  8405                           ; Name         Instructions Cycles
  8406                           ; simple_byte           13     7 (average)
  8407                           ; direct_byte           17     9 (fixed)
  8408                           ; jumptable            263     9 (fixed)
  8409                           ;	Chosen strategy is simple_byte
  8410  0687  3A01               	xorlw	1	; case 1
  8411  0688  1903               	skipnz
  8412  0689  2E75               	goto	l6839
  8413  068A  3A03               	xorlw	3	; case 2
  8414  068B  1903               	skipnz
  8415  068C  2E6F               	goto	l6831
  8416  068D  3A01               	xorlw	1	; case 3
  8417  068E  1903               	skipnz
  8418  068F  2E72               	goto	l6835
  8419  0690  3A07               	xorlw	7	; case 4
  8420  0691  1903               	skipnz
  8421  0692  2E75               	goto	l6839
  8422  0693  2E75               	goto	l6839
  8423                           
  8424                           ;i2c_master.c: 348: }
  8425  0694  0008               	return
  8426  0695                     l524:	
  8427                           
  8428                           ;i2c_master.c: 349: else
  8429                           ;i2c_master.c: 350: {
  8430                           ;i2c_master.c: 351: i2c_status.addressNACKCheck = 0;
  8431  0695  0021               	movlb	1	; select bank1
  8432  0696  11A0               	bcf	_i2c_status^(0+128),3
  8433                           
  8434                           ;i2c_master.c: 352: i2c_driver_TXData(*i2c_status.data_ptr++);
  8435  0697  0823               	movf	((low ((_i2c_status| 0+2))+1))^(0+128),w
  8436  0698  0020               	movlb	0	; select bank0
  8437  0699  00AD               	movwf	??_do_I2C_TX+1
  8438  069A  0021               	movlb	1	; select bank1
  8439  069B  0822               	movf	(low ((_i2c_status| 0+2)))^(0+128),w
  8440  069C  0020               	movlb	0	; select bank0
  8441  069D  00AC               	movwf	??_do_I2C_TX
  8442  069E  0021               	movlb	1	; select bank1
  8443  069F  0AA2               	incf	(low ((_i2c_status| 0+2)))^(0+128),f
  8444  06A0  1903               	skipnz
  8445  06A1  0AA3               	incf	((low ((_i2c_status| 0+2))+1))^(0+128),f
  8446  06A2  0020               	movlb	0	; select bank0
  8447  06A3  082C               	movf	??_do_I2C_TX,w
  8448  06A4  0086               	movwf	6
  8449  06A5  082D               	movf	??_do_I2C_TX+1,w
  8450  06A6  0087               	movwf	7
  8451  06A7  0801               	movf	1,w
  8452  06A8  3188  20A5  3186   	fcall	_i2c_driver_TXData
  8453                           
  8454                           ;i2c_master.c: 353: return (--i2c_status.data_length)?I2C_TX:I2C_TX_EMPTY;
  8455  06AB  3001               	movlw	1
  8456  06AC  0021               	movlb	1	; select bank1
  8457  06AD  02A4               	subwf	(_i2c_status^(0+128)+4),f
  8458  06AE  3000               	movlw	0
  8459  06AF  3BA5               	subwfb	((_i2c_status+1)^(0+128)+4),f
  8460  06B0  0824               	movf	(_i2c_status^(0+128)+4),w
  8461  06B1  0425               	iorwf	((_i2c_status+1)^(0+128)+4),w
  8462  06B2  1D03               	btfss	3,2
  8463  06B3  2EB6               	goto	l6853
  8464  06B4  3006               	movlw	6
  8465  06B5  2EB7               	goto	L3
  8466  06B6                     l6853:	
  8467  06B6  3003               	movlw	3
  8468  06B7                     L3:	
  8469  06B7  0020               	movlb	0	; select bank0
  8470  06B8  00AE               	movwf	_do_I2C_TX$943
  8471  06B9  3000               	movlw	0
  8472  06BA  00AF               	movwf	_do_I2C_TX$943+1
  8473  06BB  082E               	movf	_do_I2C_TX$943,w
  8474  06BC  0008               	return
  8475  06BD                     __end_of_do_I2C_TX:	
  8476                           
  8477                           	psect	text25
  8478  0CE6                     __ptext25:	
  8479 ;; *************** function _do_I2C_DO_ADDRESS_NACK *****************
  8480 ;; Defined at:
  8481 ;;		line 319 in file "mcc_generated_files/drivers/i2c_master.c"
  8482 ;; Parameters:    Size  Location     Type
  8483 ;;		None
  8484 ;; Auto vars:     Size  Location     Type
  8485 ;;		None
  8486 ;; Return value:  Size  Location     Type
  8487 ;;                  1    wreg      enum E12337
  8488 ;; Registers used:
  8489 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8490 ;; Tracked objects:
  8491 ;;		On entry : 0/0
  8492 ;;		On exit  : 0/0
  8493 ;;		Unchanged: 0/0
  8494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8495 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8496 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8497 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8498 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8499 ;;Total ram usage:        1 bytes
  8500 ;; Hardware stack levels used:    1
  8501 ;; Hardware stack levels required when called:    9
  8502 ;; This function calls:
  8503 ;;		Absolute function
  8504 ;;		_do_I2C_SEND_RESTART
  8505 ;;		_do_I2C_SEND_STOP
  8506 ;;		_i2c_restartWrite
  8507 ;;		_rd1RegCompleteHandler
  8508 ;;		_rd2RegCompleteHandler
  8509 ;;		_rdBlkRegCompleteHandler
  8510 ;;		_returnReset
  8511 ;;		_returnStop
  8512 ;;		_wr1RegCompleteHandler
  8513 ;;		_wr2RegCompleteHandler
  8514 ;; This function is called by:
  8515 ;;		_i2c_ISR
  8516 ;;		i1_i2c_ISR
  8517 ;; This function uses a non-reentrant model
  8518 ;;
  8519                           
  8520                           
  8521                           ;psect for function _do_I2C_DO_ADDRESS_NACK
  8522  0CE6                     _do_I2C_DO_ADDRESS_NACK:	
  8523                           
  8524                           ;Skip over the trampoline to the duplicate function for level 1
  8525  0CE6  1C7E               	btfss	126,0
  8526  0CE7  2CEA               	goto	l6811
  8527  0CE8  318B  2BDE         	ljmp	i1l7131
  8528  0CEA                     _do_I2C_DO_ADDRESS_NACK$intlevel0:	
  8529  0CEA                     l6811:	
  8530                           ;incstack = 0
  8531                           ; Regs used in _do_I2C_DO_ADDRESS_NACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8532                           
  8533                           
  8534                           ;i2c_master.c: 321: i2c_status.addressNACKCheck = 0;
  8535  0CEA  0021               	movlb	1	; select bank1
  8536  0CEB  11A0               	bcf	_i2c_status^(0+128),3
  8537                           
  8538                           ;i2c_master.c: 322: i2c_status.error = I2C_FAIL;
  8539  0CEC  3002               	movlw	2
  8540  0CED  0020               	movlb	0	; select bank0
  8541  0CEE  00AC               	movwf	??_do_I2C_DO_ADDRESS_NACK
  8542  0CEF  082C               	movf	??_do_I2C_DO_ADDRESS_NACK,w
  8543  0CF0  0021               	movlb	1	; select bank1
  8544  0CF1  00AB               	movwf	(_i2c_status^(0+128)+11)
  8545                           
  8546                           ;i2c_master.c: 323: switch(i2c_status.callbackTable[i2c_addressNACK](i2c_status.callback
      +                          Payload[i2c_addressNACK]))
  8547  0CF2  2CF9               	goto	l6825
  8548  0CF3                     l6815:	
  8549                           ;i2c_master.c: 324: {
  8550                           ;i2c_master.c: 325: case i2c_restart_read:
  8551                           
  8552                           
  8553                           ;i2c_master.c: 326: case i2c_restart_write:
  8554                           ;i2c_master.c: 327: return do_I2C_SEND_RESTART();
  8555  0CF3  3188  20E9         	fcall	_do_I2C_SEND_RESTART
  8556  0CF5  0008               	return
  8557  0CF6                     l6819:	
  8558                           ;i2c_master.c: 328: default:
  8559                           
  8560                           
  8561                           ;i2c_master.c: 329: return do_I2C_SEND_STOP();
  8562  0CF6  3188  20F1         	fcall	_do_I2C_SEND_STOP
  8563                           
  8564                           ;i2c_master.c: 330: }
  8565  0CF8  0008               	return
  8566  0CF9                     l6825:	
  8567  0CF9  0021               	movlb	1	; select bank1
  8568  0CFA  083A               	movf	(low ((_i2c_status| 0+26)))^(0+128),w
  8569  0CFB  0020               	movlb	0	; select bank0
  8570  0CFC  00AC               	movwf	??_do_I2C_DO_ADDRESS_NACK
  8571  0CFD  082C               	movf	??_do_I2C_DO_ADDRESS_NACK,w
  8572  0CFE  00AB               	movwf	returnStop@p
  8573  0CFF  3010               	movlw	16
  8574  0D00  3EA0               	addlw	(low (_i2c_status| 0))& (0+255)
  8575  0D01  0086               	movwf	6
  8576  0D02  0187               	clrf	7
  8577  0D03  3F41               	moviw [1]fsr1
  8578  0D04  008A               	movwf	10
  8579  0D05  3F40               	moviw [0]fsr1
  8580  0D06  000A               	callw
  8581  0D07  318C               	pagesel	$
  8582                           
  8583                           ; Switch size 1, requested type "space"
  8584                           ; Number of cases is 2, Range of values is 2 to 3
  8585                           ; switch strategies available:
  8586                           ; Name         Instructions Cycles
  8587                           ; simple_byte            7     4 (average)
  8588                           ; direct_byte           13     9 (fixed)
  8589                           ; jumptable            263     9 (fixed)
  8590                           ;	Chosen strategy is simple_byte
  8591  0D08  3A02               	xorlw	2	; case 2
  8592  0D09  1903               	skipnz
  8593  0D0A  2CF3               	goto	l6815
  8594  0D0B  3A01               	xorlw	1	; case 3
  8595  0D0C  1903               	skipnz
  8596  0D0D  2CF3               	goto	l6815
  8597  0D0E  2CF6               	goto	l6819
  8598  0D0F  0008               	return
  8599  0D10                     __end_of_do_I2C_DO_ADDRESS_NACK:	
  8600                           
  8601                           	psect	text26
  8602  0909                     __ptext26:	
  8603 ;; *************** function _do_I2C_DO_NACK_RESTART *****************
  8604 ;; Defined at:
  8605 ;;		line 311 in file "mcc_generated_files/drivers/i2c_master.c"
  8606 ;; Parameters:    Size  Location     Type
  8607 ;;		None
  8608 ;; Auto vars:     Size  Location     Type
  8609 ;;		None
  8610 ;; Return value:  Size  Location     Type
  8611 ;;                  1    wreg      enum E12337
  8612 ;; Registers used:
  8613 ;;		wreg, status,2, status,0, pclath, cstack
  8614 ;; Tracked objects:
  8615 ;;		On entry : 0/0
  8616 ;;		On exit  : 0/0
  8617 ;;		Unchanged: 0/0
  8618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8619 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8620 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8621 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8622 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8623 ;;Total ram usage:        0 bytes
  8624 ;; Hardware stack levels used:    1
  8625 ;; Hardware stack levels required when called:    7
  8626 ;; This function calls:
  8627 ;;		_i2c_driver_sendNACK
  8628 ;; This function is called by:
  8629 ;;		_do_I2C_RX
  8630 ;;		_i2c_ISR
  8631 ;;		i1_i2c_ISR
  8632 ;; This function uses a non-reentrant model
  8633 ;;
  8634                           
  8635                           
  8636                           ;psect for function _do_I2C_DO_NACK_RESTART
  8637  0909                     _do_I2C_DO_NACK_RESTART:	
  8638                           
  8639                           ;Skip over the trampoline to the duplicate function for level 1
  8640  0909  1C7E               	btfss	126,0
  8641  090A  290D               	goto	l4463
  8642  090B  3188  285C         	ljmp	i1l3681
  8643  090D                     _do_I2C_DO_NACK_RESTART$intlevel0:	
  8644  090D                     l4463:	
  8645                           ;incstack = 0
  8646                           ; Regs used in _do_I2C_DO_NACK_RESTART: [wreg+status,2+status,0+pclath+cstack]
  8647                           
  8648                           
  8649                           ;i2c_master.c: 313: i2c_driver_sendNACK();
  8650  090D  3188  2064         	fcall	_i2c_driver_sendNACK
  8651                           
  8652                           ;i2c_master.c: 314: return I2C_SEND_RESTART;
  8653  090F  3009               	movlw	9
  8654  0910  0008               	return
  8655  0911                     __end_of_do_I2C_DO_NACK_RESTART:	
  8656                           
  8657                           	psect	text27
  8658  0901                     __ptext27:	
  8659 ;; *************** function _do_I2C_DO_NACK_STOP *****************
  8660 ;; Defined at:
  8661 ;;		line 305 in file "mcc_generated_files/drivers/i2c_master.c"
  8662 ;; Parameters:    Size  Location     Type
  8663 ;;		None
  8664 ;; Auto vars:     Size  Location     Type
  8665 ;;		None
  8666 ;; Return value:  Size  Location     Type
  8667 ;;                  1    wreg      enum E12337
  8668 ;; Registers used:
  8669 ;;		wreg, status,2, status,0, pclath, cstack
  8670 ;; Tracked objects:
  8671 ;;		On entry : 0/0
  8672 ;;		On exit  : 0/0
  8673 ;;		Unchanged: 0/0
  8674 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8675 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8676 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8677 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8678 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8679 ;;Total ram usage:        0 bytes
  8680 ;; Hardware stack levels used:    1
  8681 ;; Hardware stack levels required when called:    7
  8682 ;; This function calls:
  8683 ;;		_i2c_driver_sendNACK
  8684 ;; This function is called by:
  8685 ;;		_do_I2C_RX
  8686 ;;		_i2c_ISR
  8687 ;;		i1_i2c_ISR
  8688 ;; This function uses a non-reentrant model
  8689 ;;
  8690                           
  8691                           
  8692                           ;psect for function _do_I2C_DO_NACK_STOP
  8693  0901                     _do_I2C_DO_NACK_STOP:	
  8694                           
  8695                           ;Skip over the trampoline to the duplicate function for level 1
  8696  0901  1C7E               	btfss	126,0
  8697  0902  2905               	goto	l4457
  8698  0903  3188  2858         	ljmp	i1l3675
  8699  0905                     _do_I2C_DO_NACK_STOP$intlevel0:	
  8700  0905                     l4457:	
  8701                           ;incstack = 0
  8702                           ; Regs used in _do_I2C_DO_NACK_STOP: [wreg+status,2+status,0+pclath+cstack]
  8703                           
  8704                           
  8705                           ;i2c_master.c: 307: i2c_driver_sendNACK();
  8706  0905  3188  2064         	fcall	_i2c_driver_sendNACK
  8707                           
  8708                           ;i2c_master.c: 308: return I2C_SEND_STOP;
  8709  0907  300A               	movlw	10
  8710  0908  0008               	return
  8711  0909                     __end_of_do_I2C_DO_NACK_STOP:	
  8712                           
  8713                           	psect	text28
  8714  08F9                     __ptext28:	
  8715 ;; *************** function _do_I2C_DO_ACK *****************
  8716 ;; Defined at:
  8717 ;;		line 299 in file "mcc_generated_files/drivers/i2c_master.c"
  8718 ;; Parameters:    Size  Location     Type
  8719 ;;		None
  8720 ;; Auto vars:     Size  Location     Type
  8721 ;;		None
  8722 ;; Return value:  Size  Location     Type
  8723 ;;                  1    wreg      enum E12337
  8724 ;; Registers used:
  8725 ;;		wreg, status,2, status,0, pclath, cstack
  8726 ;; Tracked objects:
  8727 ;;		On entry : 0/0
  8728 ;;		On exit  : 0/0
  8729 ;;		Unchanged: 0/0
  8730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8731 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8732 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8733 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8734 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8735 ;;Total ram usage:        0 bytes
  8736 ;; Hardware stack levels used:    1
  8737 ;; Hardware stack levels required when called:    7
  8738 ;; This function calls:
  8739 ;;		_i2c_driver_sendACK
  8740 ;; This function is called by:
  8741 ;;		_i2c_ISR
  8742 ;;		i1_i2c_ISR
  8743 ;; This function uses a non-reentrant model
  8744 ;;
  8745                           
  8746                           
  8747                           ;psect for function _do_I2C_DO_ACK
  8748  08F9                     _do_I2C_DO_ACK:	
  8749                           
  8750                           ;Skip over the trampoline to the duplicate function for level 1
  8751  08F9  1C7E               	btfss	126,0
  8752  08FA  28FD               	goto	l4525
  8753  08FB  3188  2854         	ljmp	i1l3901
  8754  08FD                     _do_I2C_DO_ACK$intlevel0:	
  8755  08FD                     l4525:	
  8756                           ;incstack = 0
  8757                           ; Regs used in _do_I2C_DO_ACK: [wreg+status,2+status,0+pclath+cstack]
  8758                           
  8759                           
  8760                           ;i2c_master.c: 301: i2c_driver_sendACK();
  8761  08FD  3188  2060         	fcall	_i2c_driver_sendACK
  8762                           
  8763                           ;i2c_master.c: 302: return I2C_RCEN;
  8764  08FF  3005               	movlw	5
  8765  0900  0008               	return
  8766  0901                     __end_of_do_I2C_DO_ACK:	
  8767                           
  8768                           	psect	text29
  8769  0924                     __ptext29:	
  8770 ;; *************** function _do_I2C_RCEN *****************
  8771 ;; Defined at:
  8772 ;;		line 292 in file "mcc_generated_files/drivers/i2c_master.c"
  8773 ;; Parameters:    Size  Location     Type
  8774 ;;		None
  8775 ;; Auto vars:     Size  Location     Type
  8776 ;;		None
  8777 ;; Return value:  Size  Location     Type
  8778 ;;                  1    wreg      enum E12337
  8779 ;; Registers used:
  8780 ;;		wreg, status,2, status,0, pclath, cstack
  8781 ;; Tracked objects:
  8782 ;;		On entry : 0/0
  8783 ;;		On exit  : 0/0
  8784 ;;		Unchanged: 0/0
  8785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8786 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8787 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8788 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8789 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8790 ;;Total ram usage:        0 bytes
  8791 ;; Hardware stack levels used:    1
  8792 ;; Hardware stack levels required when called:    7
  8793 ;; This function calls:
  8794 ;;		_i2c_driver_startRX
  8795 ;; This function is called by:
  8796 ;;		_i2c_ISR
  8797 ;;		i1_i2c_ISR
  8798 ;; This function uses a non-reentrant model
  8799 ;;
  8800                           
  8801                           
  8802                           ;psect for function _do_I2C_RCEN
  8803  0924                     _do_I2C_RCEN:	
  8804                           
  8805                           ;Skip over the trampoline to the duplicate function for level 1
  8806  0924  1C7E               	btfss	126,0
  8807  0925  2928               	goto	l4517
  8808  0926  3188  2881         	ljmp	i1l3893
  8809  0928                     _do_I2C_RCEN$intlevel0:	
  8810  0928                     l4517:	
  8811                           ;incstack = 0
  8812                           ; Regs used in _do_I2C_RCEN: [wreg+status,2+status,0+pclath+cstack]
  8813                           
  8814                           
  8815                           ;i2c_master.c: 294: i2c_status.addressNACKCheck = 0;
  8816  0928  0021               	movlb	1	; select bank1
  8817  0929  11A0               	bcf	_i2c_status^(0+128),3
  8818                           
  8819                           ;i2c_master.c: 295: i2c_driver_startRX();
  8820  092A  3188  2030         	fcall	_i2c_driver_startRX
  8821                           
  8822                           ;i2c_master.c: 296: return I2C_RX;
  8823  092C  3004               	movlw	4
  8824  092D  0008               	return
  8825  092E                     __end_of_do_I2C_RCEN:	
  8826                           
  8827                           	psect	text30
  8828  094D                     __ptext30:	
  8829 ;; *************** function _do_I2C_SEND_ADR_WRITE *****************
  8830 ;; Defined at:
  8831 ;;		line 285 in file "mcc_generated_files/drivers/i2c_master.c"
  8832 ;; Parameters:    Size  Location     Type
  8833 ;;		None
  8834 ;; Auto vars:     Size  Location     Type
  8835 ;;		None
  8836 ;; Return value:  Size  Location     Type
  8837 ;;                  1    wreg      enum E12337
  8838 ;; Registers used:
  8839 ;;		wreg, status,2, status,0, pclath, cstack
  8840 ;; Tracked objects:
  8841 ;;		On entry : 0/0
  8842 ;;		On exit  : 0/0
  8843 ;;		Unchanged: 0/0
  8844 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8845 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8846 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8847 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8848 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8849 ;;Total ram usage:        0 bytes
  8850 ;; Hardware stack levels used:    1
  8851 ;; Hardware stack levels required when called:    7
  8852 ;; This function calls:
  8853 ;;		_i2c_driver_TXData
  8854 ;; This function is called by:
  8855 ;;		_i2c_ISR
  8856 ;;		i1_i2c_ISR
  8857 ;; This function uses a non-reentrant model
  8858 ;;
  8859                           
  8860                           
  8861                           ;psect for function _do_I2C_SEND_ADR_WRITE
  8862  094D                     _do_I2C_SEND_ADR_WRITE:	
  8863                           
  8864                           ;Skip over the trampoline to the duplicate function for level 1
  8865  094D  1C7E               	btfss	126,0
  8866  094E  2951               	goto	l4509
  8867  094F  3188  28CA         	ljmp	i1l3885
  8868  0951                     _do_I2C_SEND_ADR_WRITE$intlevel0:	
  8869  0951                     l4509:	
  8870                           ;incstack = 0
  8871                           ; Regs used in _do_I2C_SEND_ADR_WRITE: [wreg+status,2+status,0+pclath+cstack]
  8872                           
  8873                           
  8874                           ;i2c_master.c: 287: i2c_status.addressNACKCheck = 1;
  8875  0951  0021               	movlb	1	; select bank1
  8876  0952  15A0               	bsf	_i2c_status^(0+128),3
  8877                           
  8878                           ;i2c_master.c: 288: i2c_driver_TXData(i2c_status.address << 1);
  8879  0953  3521               	lslf	(_i2c_status^(0+128)+1),w
  8880  0954  3188  20A5         	fcall	_i2c_driver_TXData
  8881                           
  8882                           ;i2c_master.c: 289: return I2C_TX;
  8883  0956  3003               	movlw	3
  8884  0957  0008               	return
  8885  0958                     __end_of_do_I2C_SEND_ADR_WRITE:	
  8886                           
  8887                           	psect	text31
  8888  0986                     __ptext31:	
  8889 ;; *************** function _do_I2C_SEND_ADR_READ *****************
  8890 ;; Defined at:
  8891 ;;		line 278 in file "mcc_generated_files/drivers/i2c_master.c"
  8892 ;; Parameters:    Size  Location     Type
  8893 ;;		None
  8894 ;; Auto vars:     Size  Location     Type
  8895 ;;		None
  8896 ;; Return value:  Size  Location     Type
  8897 ;;                  1    wreg      enum E12337
  8898 ;; Registers used:
  8899 ;;		wreg, status,2, status,0, pclath, cstack
  8900 ;; Tracked objects:
  8901 ;;		On entry : 0/0
  8902 ;;		On exit  : 0/0
  8903 ;;		Unchanged: 0/0
  8904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8905 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8906 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8907 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8908 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8909 ;;Total ram usage:        0 bytes
  8910 ;; Hardware stack levels used:    1
  8911 ;; Hardware stack levels required when called:    7
  8912 ;; This function calls:
  8913 ;;		_i2c_driver_TXData
  8914 ;; This function is called by:
  8915 ;;		_i2c_ISR
  8916 ;;		i1_i2c_ISR
  8917 ;; This function uses a non-reentrant model
  8918 ;;
  8919                           
  8920                           
  8921                           ;psect for function _do_I2C_SEND_ADR_READ
  8922  0986                     _do_I2C_SEND_ADR_READ:	
  8923                           
  8924                           ;Skip over the trampoline to the duplicate function for level 1
  8925  0986  1C7E               	btfss	126,0
  8926  0987  298A               	goto	l4501
  8927  0988  3188  28D1         	ljmp	i1l3877
  8928  098A                     _do_I2C_SEND_ADR_READ$intlevel0:	
  8929  098A                     l4501:	
  8930                           ;incstack = 0
  8931                           ; Regs used in _do_I2C_SEND_ADR_READ: [wreg+status,2+status,0+pclath+cstack]
  8932                           
  8933                           
  8934                           ;i2c_master.c: 280: i2c_status.addressNACKCheck = 1;
  8935  098A  0021               	movlb	1	; select bank1
  8936  098B  15A0               	bsf	_i2c_status^(0+128),3
  8937                           
  8938                           ;i2c_master.c: 281: i2c_driver_TXData(i2c_status.address << 1 | 1);
  8939  098C  1403               	setc
  8940  098D  0D21               	rlf	(_i2c_status^(0+128)+1),w
  8941  098E  3188  20A5         	fcall	_i2c_driver_TXData
  8942                           
  8943                           ;i2c_master.c: 282: return I2C_RCEN;
  8944  0990  3005               	movlw	5
  8945  0991  0008               	return
  8946  0992                     __end_of_do_I2C_SEND_ADR_READ:	
  8947                           
  8948                           	psect	text32
  8949  08F1                     __ptext32:	
  8950 ;; *************** function _do_I2C_SEND_STOP *****************
  8951 ;; Defined at:
  8952 ;;		line 272 in file "mcc_generated_files/drivers/i2c_master.c"
  8953 ;; Parameters:    Size  Location     Type
  8954 ;;		None
  8955 ;; Auto vars:     Size  Location     Type
  8956 ;;		None
  8957 ;; Return value:  Size  Location     Type
  8958 ;;                  1    wreg      enum E12337
  8959 ;; Registers used:
  8960 ;;		wreg, status,2, status,0, pclath, cstack
  8961 ;; Tracked objects:
  8962 ;;		On entry : 0/0
  8963 ;;		On exit  : 0/0
  8964 ;;		Unchanged: 0/0
  8965 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8966 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8967 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8968 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8969 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8970 ;;Total ram usage:        0 bytes
  8971 ;; Hardware stack levels used:    1
  8972 ;; Hardware stack levels required when called:    7
  8973 ;; This function calls:
  8974 ;;		_i2c_driver_stop
  8975 ;; This function is called by:
  8976 ;;		_do_I2C_DO_ADDRESS_NACK
  8977 ;;		_do_I2C_TX
  8978 ;;		_do_I2C_TX_EMPTY
  8979 ;;		_i2c_ISR
  8980 ;;		i1_i2c_ISR
  8981 ;; This function uses a non-reentrant model
  8982 ;;
  8983                           
  8984                           
  8985                           ;psect for function _do_I2C_SEND_STOP
  8986  08F1                     _do_I2C_SEND_STOP:	
  8987                           
  8988                           ;Skip over the trampoline to the duplicate function for level 1
  8989  08F1  1C7E               	btfss	126,0
  8990  08F2  28F5               	goto	l4451
  8991  08F3  3188  2850         	ljmp	i1l3669
  8992  08F5                     _do_I2C_SEND_STOP$intlevel0:	
  8993  08F5                     l4451:	
  8994                           ;incstack = 0
  8995                           ; Regs used in _do_I2C_SEND_STOP: [wreg+status,2+status,0+pclath+cstack]
  8996                           
  8997                           
  8998                           ;i2c_master.c: 274: i2c_driver_stop();
  8999  08F5  3188  202D         	fcall	_i2c_driver_stop
  9000                           
  9001                           ;i2c_master.c: 275: return I2C_IDLE;
  9002  08F7  3000               	movlw	0
  9003  08F8  0008               	return
  9004  08F9                     __end_of_do_I2C_SEND_STOP:	
  9005                           
  9006                           	psect	text33
  9007  08E9                     __ptext33:	
  9008 ;; *************** function _do_I2C_SEND_RESTART *****************
  9009 ;; Defined at:
  9010 ;;		line 266 in file "mcc_generated_files/drivers/i2c_master.c"
  9011 ;; Parameters:    Size  Location     Type
  9012 ;;		None
  9013 ;; Auto vars:     Size  Location     Type
  9014 ;;		None
  9015 ;; Return value:  Size  Location     Type
  9016 ;;                  1    wreg      enum E12337
  9017 ;; Registers used:
  9018 ;;		wreg, status,2, status,0, pclath, cstack
  9019 ;; Tracked objects:
  9020 ;;		On entry : 0/0
  9021 ;;		On exit  : 0/0
  9022 ;;		Unchanged: 0/0
  9023 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9024 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9025 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9026 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9027 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9028 ;;Total ram usage:        0 bytes
  9029 ;; Hardware stack levels used:    1
  9030 ;; Hardware stack levels required when called:    7
  9031 ;; This function calls:
  9032 ;;		_i2c_driver_restart
  9033 ;; This function is called by:
  9034 ;;		_do_I2C_DO_ADDRESS_NACK
  9035 ;;		_do_I2C_TX_EMPTY
  9036 ;;		_i2c_ISR
  9037 ;;		i1_i2c_ISR
  9038 ;; This function uses a non-reentrant model
  9039 ;;
  9040                           
  9041                           
  9042                           ;psect for function _do_I2C_SEND_RESTART
  9043  08E9                     _do_I2C_SEND_RESTART:	
  9044                           
  9045                           ;Skip over the trampoline to the duplicate function for level 1
  9046  08E9  1C7E               	btfss	126,0
  9047  08EA  28ED               	goto	l4445
  9048  08EB  3188  284C         	ljmp	i1l3663
  9049  08ED                     _do_I2C_SEND_RESTART$intlevel0:	
  9050  08ED                     l4445:	
  9051                           ;incstack = 0
  9052                           ; Regs used in _do_I2C_SEND_RESTART: [wreg+status,2+status,0+pclath+cstack]
  9053                           
  9054                           
  9055                           ;i2c_master.c: 268: i2c_driver_restart();
  9056  08ED  3188  202A         	fcall	_i2c_driver_restart
  9057                           
  9058                           ;i2c_master.c: 269: return I2C_SEND_ADR_READ;
  9059  08EF  3001               	movlw	1
  9060  08F0  0008               	return
  9061  08F1                     __end_of_do_I2C_SEND_RESTART:	
  9062                           
  9063                           	psect	text34
  9064  08E1                     __ptext34:	
  9065 ;; *************** function _do_I2C_SEND_RESTART_WRITE *****************
  9066 ;; Defined at:
  9067 ;;		line 260 in file "mcc_generated_files/drivers/i2c_master.c"
  9068 ;; Parameters:    Size  Location     Type
  9069 ;;		None
  9070 ;; Auto vars:     Size  Location     Type
  9071 ;;		None
  9072 ;; Return value:  Size  Location     Type
  9073 ;;                  1    wreg      enum E12337
  9074 ;; Registers used:
  9075 ;;		wreg, status,2, status,0, pclath, cstack
  9076 ;; Tracked objects:
  9077 ;;		On entry : 0/0
  9078 ;;		On exit  : 0/0
  9079 ;;		Unchanged: 0/0
  9080 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9081 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9082 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9083 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9084 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9085 ;;Total ram usage:        0 bytes
  9086 ;; Hardware stack levels used:    1
  9087 ;; Hardware stack levels required when called:    7
  9088 ;; This function calls:
  9089 ;;		_i2c_driver_restart
  9090 ;; This function is called by:
  9091 ;;		_do_I2C_TX
  9092 ;;		_i2c_ISR
  9093 ;;		i1_i2c_ISR
  9094 ;; This function uses a non-reentrant model
  9095 ;;
  9096                           
  9097                           
  9098                           ;psect for function _do_I2C_SEND_RESTART_WRITE
  9099  08E1                     _do_I2C_SEND_RESTART_WRITE:	
  9100                           
  9101                           ;Skip over the trampoline to the duplicate function for level 1
  9102  08E1  1C7E               	btfss	126,0
  9103  08E2  28E5               	goto	l4439
  9104  08E3  3188  2848         	ljmp	i1l3657
  9105  08E5                     _do_I2C_SEND_RESTART_WRITE$intlevel0:	
  9106  08E5                     l4439:	
  9107                           ;incstack = 0
  9108                           ; Regs used in _do_I2C_SEND_RESTART_WRITE: [wreg+status,2+status,0+pclath+cstack]
  9109                           
  9110                           
  9111                           ;i2c_master.c: 262: i2c_driver_restart();
  9112  08E5  3188  202A         	fcall	_i2c_driver_restart
  9113                           
  9114                           ;i2c_master.c: 263: return I2C_SEND_ADR_WRITE;
  9115  08E7  3002               	movlw	2
  9116  08E8  0008               	return
  9117  08E9                     __end_of_do_I2C_SEND_RESTART_WRITE:	
  9118                           
  9119                           	psect	text35
  9120  08D9                     __ptext35:	
  9121 ;; *************** function _do_I2C_SEND_RESTART_READ *****************
  9122 ;; Defined at:
  9123 ;;		line 254 in file "mcc_generated_files/drivers/i2c_master.c"
  9124 ;; Parameters:    Size  Location     Type
  9125 ;;		None
  9126 ;; Auto vars:     Size  Location     Type
  9127 ;;		None
  9128 ;; Return value:  Size  Location     Type
  9129 ;;                  1    wreg      enum E12337
  9130 ;; Registers used:
  9131 ;;		wreg, status,2, status,0, pclath, cstack
  9132 ;; Tracked objects:
  9133 ;;		On entry : 0/0
  9134 ;;		On exit  : 0/0
  9135 ;;		Unchanged: 0/0
  9136 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9137 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9138 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9139 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9140 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9141 ;;Total ram usage:        0 bytes
  9142 ;; Hardware stack levels used:    1
  9143 ;; Hardware stack levels required when called:    7
  9144 ;; This function calls:
  9145 ;;		_i2c_driver_restart
  9146 ;; This function is called by:
  9147 ;;		_do_I2C_TX
  9148 ;;		_i2c_ISR
  9149 ;;		i1_i2c_ISR
  9150 ;; This function uses a non-reentrant model
  9151 ;;
  9152                           
  9153                           
  9154                           ;psect for function _do_I2C_SEND_RESTART_READ
  9155  08D9                     _do_I2C_SEND_RESTART_READ:	
  9156                           
  9157                           ;Skip over the trampoline to the duplicate function for level 1
  9158  08D9  1C7E               	btfss	126,0
  9159  08DA  28DD               	goto	l4433
  9160  08DB  3188  2844         	ljmp	i1l3651
  9161  08DD                     _do_I2C_SEND_RESTART_READ$intlevel0:	
  9162  08DD                     l4433:	
  9163                           ;incstack = 0
  9164                           ; Regs used in _do_I2C_SEND_RESTART_READ: [wreg+status,2+status,0+pclath+cstack]
  9165                           
  9166                           
  9167                           ;i2c_master.c: 256: i2c_driver_restart();
  9168  08DD  3188  202A         	fcall	_i2c_driver_restart
  9169                           
  9170                           ;i2c_master.c: 257: return I2C_SEND_ADR_READ;
  9171  08DF  3001               	movlw	1
  9172  08E0  0008               	return
  9173  08E1                     __end_of_do_I2C_SEND_RESTART_READ:	
  9174                           
  9175                           	psect	text36
  9176  0911                     __ptext36:	
  9177 ;; *************** function _do_I2C_IDLE *****************
  9178 ;; Defined at:
  9179 ;;		line 247 in file "mcc_generated_files/drivers/i2c_master.c"
  9180 ;; Parameters:    Size  Location     Type
  9181 ;;		None
  9182 ;; Auto vars:     Size  Location     Type
  9183 ;;		None
  9184 ;; Return value:  Size  Location     Type
  9185 ;;                  1    wreg      enum E12337
  9186 ;; Registers used:
  9187 ;;		wreg, status,2
  9188 ;; Tracked objects:
  9189 ;;		On entry : 0/0
  9190 ;;		On exit  : 0/0
  9191 ;;		Unchanged: 0/0
  9192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9193 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9194 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9195 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9196 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9197 ;;Total ram usage:        0 bytes
  9198 ;; Hardware stack levels used:    1
  9199 ;; Hardware stack levels required when called:    6
  9200 ;; This function calls:
  9201 ;;		Nothing
  9202 ;; This function is called by:
  9203 ;;		_i2c_ISR
  9204 ;;		i1_i2c_ISR
  9205 ;; This function uses a non-reentrant model
  9206 ;;
  9207                           
  9208                           
  9209                           ;psect for function _do_I2C_IDLE
  9210  0911                     _do_I2C_IDLE:	
  9211                           
  9212                           ;Skip over the trampoline to the duplicate function for level 1
  9213  0911  1C7E               	btfss	126,0
  9214  0912  2915               	goto	l4493
  9215  0913  3188  2871         	ljmp	i1l3869
  9216  0915                     _do_I2C_IDLE$intlevel0:	
  9217  0915                     l4493:	
  9218                           ;incstack = 0
  9219                           ; Regs used in _do_I2C_IDLE: [wreg+status,2]
  9220                           
  9221                           
  9222                           ;i2c_master.c: 249: i2c_status.busy = 0;
  9223  0915  0021               	movlb	1	; select bank1
  9224  0916  1020               	bcf	_i2c_status^(0+128),0
  9225                           
  9226                           ;i2c_master.c: 250: i2c_status.error = I2C_NOERR;
  9227  0917  01AB               	clrf	(_i2c_status^(0+128)+11)
  9228                           
  9229                           ;i2c_master.c: 251: return I2C_RESET;
  9230  0918  300E               	movlw	14
  9231  0919  0008               	return
  9232  091A                     __end_of_do_I2C_IDLE:	
  9233                           
  9234                           	psect	text37
  9235  0942                     __ptext37:	
  9236 ;; *************** function _do_I2C_RESET *****************
  9237 ;; Defined at:
  9238 ;;		line 239 in file "mcc_generated_files/drivers/i2c_master.c"
  9239 ;; Parameters:    Size  Location     Type
  9240 ;;		None
  9241 ;; Auto vars:     Size  Location     Type
  9242 ;;		None
  9243 ;; Return value:  Size  Location     Type
  9244 ;;                  1    wreg      enum E12337
  9245 ;; Registers used:
  9246 ;;		wreg, status,2, status,0, pclath, cstack
  9247 ;; Tracked objects:
  9248 ;;		On entry : 0/0
  9249 ;;		On exit  : 0/0
  9250 ;;		Unchanged: 0/0
  9251 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9252 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9253 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9254 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9255 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9256 ;;Total ram usage:        0 bytes
  9257 ;; Hardware stack levels used:    1
  9258 ;; Hardware stack levels required when called:    7
  9259 ;; This function calls:
  9260 ;;		_i2c_driver_resetBus
  9261 ;; This function is called by:
  9262 ;;		_i2c_ISR
  9263 ;;		i1_i2c_ISR
  9264 ;; This function uses a non-reentrant model
  9265 ;;
  9266                           
  9267                           
  9268                           ;psect for function _do_I2C_RESET
  9269  0942                     _do_I2C_RESET:	
  9270                           
  9271                           ;Skip over the trampoline to the duplicate function for level 1
  9272  0942  1C7E               	btfss	126,0
  9273  0943  2946               	goto	l4483
  9274  0944  3188  28C3         	ljmp	i1l3859
  9275  0946                     _do_I2C_RESET$intlevel0:	
  9276  0946                     l4483:	
  9277                           ;incstack = 0
  9278                           ; Regs used in _do_I2C_RESET: [wreg+status,2+status,0+pclath+cstack]
  9279                           
  9280                           
  9281                           ;i2c_master.c: 241: i2c_driver_resetBus();
  9282  0946  3188  2004         	fcall	_i2c_driver_resetBus
  9283                           
  9284                           ;i2c_master.c: 242: i2c_status.busy = 0;
  9285  0948  0021               	movlb	1	; select bank1
  9286  0949  1020               	bcf	_i2c_status^(0+128),0
  9287                           
  9288                           ;i2c_master.c: 243: i2c_status.error = I2C_NOERR;
  9289  094A  01AB               	clrf	(_i2c_status^(0+128)+11)
  9290                           
  9291                           ;i2c_master.c: 244: return I2C_RESET;
  9292  094B  300E               	movlw	14
  9293  094C  0008               	return
  9294  094D                     __end_of_do_I2C_RESET:	
  9295                           
  9296                           	psect	text38
  9297  0D67                     __ptext38:	
  9298 ;; *************** function _do_I2C_TX_EMPTY *****************
  9299 ;; Defined at:
  9300 ;;		line 382 in file "mcc_generated_files/drivers/i2c_master.c"
  9301 ;; Parameters:    Size  Location     Type
  9302 ;;		None
  9303 ;; Auto vars:     Size  Location     Type
  9304 ;;		None
  9305 ;; Return value:  Size  Location     Type
  9306 ;;                  1    wreg      enum E12337
  9307 ;; Registers used:
  9308 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9309 ;; Tracked objects:
  9310 ;;		On entry : 0/0
  9311 ;;		On exit  : 0/0
  9312 ;;		Unchanged: 0/0
  9313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9314 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9315 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9316 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9317 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9318 ;;Total ram usage:        1 bytes
  9319 ;; Hardware stack levels used:    1
  9320 ;; Hardware stack levels required when called:    9
  9321 ;; This function calls:
  9322 ;;		Absolute function
  9323 ;;		_do_I2C_SEND_RESTART
  9324 ;;		_do_I2C_SEND_STOP
  9325 ;;		_i2c_restartWrite
  9326 ;;		_mssp_setIRQ
  9327 ;;		_rd1RegCompleteHandler
  9328 ;;		_rd2RegCompleteHandler
  9329 ;;		_rdBlkRegCompleteHandler
  9330 ;;		_returnReset
  9331 ;;		_returnStop
  9332 ;;		_wr1RegCompleteHandler
  9333 ;;		_wr2RegCompleteHandler
  9334 ;; This function is called by:
  9335 ;;		_i2c_ISR
  9336 ;;		i1_i2c_ISR
  9337 ;; This function uses a non-reentrant model
  9338 ;;
  9339                           
  9340                           
  9341                           ;psect for function _do_I2C_TX_EMPTY
  9342  0D67                     _do_I2C_TX_EMPTY:	
  9343                           
  9344                           ;Skip over the trampoline to the duplicate function for level 1
  9345  0D67  1C7E               	btfss	126,0
  9346  0D68  2D6B               	goto	l6883
  9347  0D69  318C  2C94         	ljmp	i1l7203
  9348  0D6B                     _do_I2C_TX_EMPTY$intlevel0:	
  9349  0D6B                     l6883:	
  9350                           ;incstack = 0
  9351                           ; Regs used in _do_I2C_TX_EMPTY: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9352                           
  9353                           
  9354                           ;i2c_master.c: 384: i2c_status.bufferFree = 1;
  9355  0D6B  0021               	movlb	1	; select bank1
  9356  0D6C  1520               	bsf	_i2c_status^(0+128),2
  9357                           
  9358                           ;i2c_master.c: 385: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
  9359  0D6D  2D78               	goto	l6901
  9360  0D6E                     l6885:	
  9361                           ;i2c_master.c: 386: {
  9362                           ;i2c_master.c: 387: case i2c_restart_read:
  9363                           
  9364                           
  9365                           ;i2c_master.c: 388: case i2c_restart_write:
  9366                           ;i2c_master.c: 389: return do_I2C_SEND_RESTART();
  9367  0D6E  3188  20E9         	fcall	_do_I2C_SEND_RESTART
  9368  0D70  0008               	return
  9369  0D71                     l6889:	
  9370                           ;i2c_master.c: 390: case i2c_continue:
  9371                           
  9372                           
  9373                           ;i2c_master.c: 391: mssp_setIRQ();
  9374  0D71  3188  2036         	fcall	_mssp_setIRQ
  9375                           
  9376                           ;i2c_master.c: 392: return I2C_TX;
  9377  0D73  3003               	movlw	3
  9378  0D74  0008               	return
  9379  0D75                     l6895:	
  9380                           ;i2c_master.c: 394: case i2c_stop:
  9381                           
  9382                           ;i2c_master.c: 393: default:
  9383                           
  9384                           
  9385                           ;i2c_master.c: 395: return do_I2C_SEND_STOP();
  9386  0D75  3188  20F1         	fcall	_do_I2C_SEND_STOP
  9387                           
  9388                           ;i2c_master.c: 396: }
  9389  0D77  0008               	return
  9390  0D78                     l6901:	
  9391  0D78  0021               	movlb	1	; select bank1
  9392  0D79  0838               	movf	(low ((_i2c_status| 0+24)))^(0+128),w
  9393  0D7A  0020               	movlb	0	; select bank0
  9394  0D7B  00AC               	movwf	??_do_I2C_TX_EMPTY
  9395  0D7C  082C               	movf	??_do_I2C_TX_EMPTY,w
  9396  0D7D  00AB               	movwf	returnStop@p
  9397  0D7E  300C               	movlw	12
  9398  0D7F  3EA0               	addlw	(low (_i2c_status| 0))& (0+255)
  9399  0D80  0086               	movwf	6
  9400  0D81  0187               	clrf	7
  9401  0D82  3F41               	moviw [1]fsr1
  9402  0D83  008A               	movwf	10
  9403  0D84  3F40               	moviw [0]fsr1
  9404  0D85  000A               	callw
  9405  0D86  318D               	pagesel	$
  9406                           
  9407                           ; Switch size 1, requested type "space"
  9408                           ; Number of cases is 4, Range of values is 1 to 4
  9409                           ; switch strategies available:
  9410                           ; Name         Instructions Cycles
  9411                           ; simple_byte           13     7 (average)
  9412                           ; direct_byte           17     9 (fixed)
  9413                           ; jumptable            263     9 (fixed)
  9414                           ;	Chosen strategy is simple_byte
  9415  0D87  3A01               	xorlw	1	; case 1
  9416  0D88  1903               	skipnz
  9417  0D89  2D75               	goto	l6895
  9418  0D8A  3A03               	xorlw	3	; case 2
  9419  0D8B  1903               	skipnz
  9420  0D8C  2D6E               	goto	l6885
  9421  0D8D  3A01               	xorlw	1	; case 3
  9422  0D8E  1903               	skipnz
  9423  0D8F  2D6E               	goto	l6885
  9424  0D90  3A07               	xorlw	7	; case 4
  9425  0D91  1903               	skipnz
  9426  0D92  2D71               	goto	l6889
  9427  0D93  2D75               	goto	l6895
  9428  0D94  0008               	return
  9429  0D95                     __end_of_do_I2C_TX_EMPTY:	
  9430                           
  9431                           	psect	text39
  9432  0836                     __ptext39:	
  9433 ;; *************** function _mssp_setIRQ *****************
  9434 ;; Defined at:
  9435 ;;		line 58 in file "mcc_generated_files/i2c_driver.c"
  9436 ;; Parameters:    Size  Location     Type
  9437 ;;		None
  9438 ;; Auto vars:     Size  Location     Type
  9439 ;;		None
  9440 ;; Return value:  Size  Location     Type
  9441 ;;                  1    wreg      void 
  9442 ;; Registers used:
  9443 ;;		None
  9444 ;; Tracked objects:
  9445 ;;		On entry : 0/0
  9446 ;;		On exit  : 0/0
  9447 ;;		Unchanged: 0/0
  9448 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9449 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9450 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9451 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9452 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9453 ;;Total ram usage:        0 bytes
  9454 ;; Hardware stack levels used:    1
  9455 ;; Hardware stack levels required when called:    6
  9456 ;; This function calls:
  9457 ;;		Nothing
  9458 ;; This function is called by:
  9459 ;;		_do_I2C_TX_EMPTY
  9460 ;; This function uses a non-reentrant model
  9461 ;;
  9462                           
  9463                           
  9464                           ;psect for function _mssp_setIRQ
  9465  0836                     _mssp_setIRQ:	
  9466                           
  9467                           ;i2c_driver.c: 60: PIR1bits.SSP1IF = 1;
  9468                           
  9469                           ;incstack = 0
  9470                           ; Regs used in _mssp_setIRQ: []
  9471  0836  0020               	movlb	0	; select bank0
  9472  0837  1590               	bsf	16,3	;volatile
  9473  0838  0008               	return
  9474  0839                     __end_of_mssp_setIRQ:	
  9475                           
  9476                           	psect	text40
  9477  09C6                     __ptext40:	
  9478 ;; *************** function _i2c_driver_isNACK *****************
  9479 ;; Defined at:
  9480 ;;		line 161 in file "mcc_generated_files/i2c_driver.c"
  9481 ;; Parameters:    Size  Location     Type
  9482 ;;		None
  9483 ;; Auto vars:     Size  Location     Type
  9484 ;;		None
  9485 ;; Return value:  Size  Location     Type
  9486 ;;		None               void
  9487 ;; Registers used:
  9488 ;;		wreg, status,2, status,0
  9489 ;; Tracked objects:
  9490 ;;		On entry : 0/0
  9491 ;;		On exit  : 0/0
  9492 ;;		Unchanged: 0/0
  9493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9494 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9495 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9496 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9497 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9498 ;;Total ram usage:        1 bytes
  9499 ;; Hardware stack levels used:    1
  9500 ;; Hardware stack levels required when called:    6
  9501 ;; This function calls:
  9502 ;;		Nothing
  9503 ;; This function is called by:
  9504 ;;		_do_I2C_TX
  9505 ;;		_i2c_ISR
  9506 ;; This function uses a non-reentrant model
  9507 ;;
  9508                           
  9509                           
  9510                           ;psect for function _i2c_driver_isNACK
  9511  09C6                     _i2c_driver_isNACK:	
  9512                           
  9513                           ;i2c_driver.c: 163: return SSP1CON2bits.ACKSTAT = 1;
  9514                           
  9515                           ;incstack = 0
  9516                           ; Regs used in _i2c_driver_isNACK: [wreg+status,2+status,0]
  9517  09C6  0024               	movlb	4	; select bank4
  9518  09C7  0816               	movf	22,w	;volatile
  9519  09C8  39BF               	andlw	-65
  9520  09C9  3840               	iorlw	64
  9521  09CA  0096               	movwf	22	;volatile
  9522  09CB  0E16               	swapf	22,w	;volatile
  9523  09CC  0C89               	rrf	9,f
  9524  09CD  0C89               	rrf	9,f
  9525  09CE  3901               	andlw	1
  9526  09CF  0020               	movlb	0	; select bank0
  9527  09D0  00A2               	movwf	??_i2c_driver_isNACK
  9528  09D1  0C22               	rrf	??_i2c_driver_isNACK,w
  9529  09D2  0008               	return
  9530  09D3                     __end_of_i2c_driver_isNACK:	
  9531                           
  9532                           	psect	text41
  9533  08A5                     __ptext41:	
  9534 ;; *************** function _i2c_driver_TXData *****************
  9535 ;; Defined at:
  9536 ;;		line 186 in file "mcc_generated_files/i2c_driver.c"
  9537 ;; Parameters:    Size  Location     Type
  9538 ;;  d               1    wreg     unsigned char 
  9539 ;; Auto vars:     Size  Location     Type
  9540 ;;  d               1    2[BANK0 ] unsigned char 
  9541 ;; Return value:  Size  Location     Type
  9542 ;;                  1    wreg      void 
  9543 ;; Registers used:
  9544 ;;		wreg
  9545 ;; Tracked objects:
  9546 ;;		On entry : 0/0
  9547 ;;		On exit  : 0/0
  9548 ;;		Unchanged: 0/0
  9549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9550 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9551 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9552 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9553 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9554 ;;Total ram usage:        1 bytes
  9555 ;; Hardware stack levels used:    1
  9556 ;; Hardware stack levels required when called:    6
  9557 ;; This function calls:
  9558 ;;		Nothing
  9559 ;; This function is called by:
  9560 ;;		_do_I2C_SEND_ADR_READ
  9561 ;;		_do_I2C_SEND_ADR_WRITE
  9562 ;;		_do_I2C_TX
  9563 ;; This function uses a non-reentrant model
  9564 ;;
  9565                           
  9566                           
  9567                           ;psect for function _i2c_driver_TXData
  9568  08A5                     _i2c_driver_TXData:	
  9569                           
  9570                           ;incstack = 0
  9571                           ; Regs used in _i2c_driver_TXData: [wreg]
  9572                           ;i2c_driver_TXData@d stored from wreg
  9573  08A5  0020               	movlb	0	; select bank0
  9574  08A6  00A2               	movwf	i2c_driver_TXData@d
  9575                           
  9576                           ;i2c_driver.c: 188: SSP1BUF = d;
  9577  08A7  0822               	movf	i2c_driver_TXData@d,w
  9578  08A8  0024               	movlb	4	; select bank4
  9579  08A9  0091               	movwf	17	;volatile
  9580  08AA  0008               	return
  9581  08AB                     __end_of_i2c_driver_TXData:	
  9582                           
  9583                           	psect	text42
  9584  0833                     __ptext42:	
  9585 ;; *************** function _i2c_driver_getRXData *****************
  9586 ;; Defined at:
  9587 ;;		line 171 in file "mcc_generated_files/i2c_driver.c"
  9588 ;; Parameters:    Size  Location     Type
  9589 ;;		None
  9590 ;; Auto vars:     Size  Location     Type
  9591 ;;		None
  9592 ;; Return value:  Size  Location     Type
  9593 ;;                  1    wreg      unsigned char 
  9594 ;; Registers used:
  9595 ;;		wreg
  9596 ;; Tracked objects:
  9597 ;;		On entry : 0/0
  9598 ;;		On exit  : 0/0
  9599 ;;		Unchanged: 0/0
  9600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9601 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9602 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9603 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9604 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9605 ;;Total ram usage:        0 bytes
  9606 ;; Hardware stack levels used:    1
  9607 ;; Hardware stack levels required when called:    6
  9608 ;; This function calls:
  9609 ;;		Nothing
  9610 ;; This function is called by:
  9611 ;;		_do_I2C_RX
  9612 ;; This function uses a non-reentrant model
  9613 ;;
  9614                           
  9615                           
  9616                           ;psect for function _i2c_driver_getRXData
  9617  0833                     _i2c_driver_getRXData:	
  9618                           
  9619                           ;i2c_driver.c: 173: return SSP1BUF;
  9620                           
  9621                           ;incstack = 0
  9622                           ; Regs used in _i2c_driver_getRXData: [wreg]
  9623  0833  0024               	movlb	4	; select bank4
  9624  0834  0811               	movf	17,w	;volatile
  9625  0835  0008               	return
  9626  0836                     __end_of_i2c_driver_getRXData:	
  9627                           
  9628                           	psect	text43
  9629  0864                     __ptext43:	
  9630 ;; *************** function _i2c_driver_sendNACK *****************
  9631 ;; Defined at:
  9632 ;;		line 202 in file "mcc_generated_files/i2c_driver.c"
  9633 ;; Parameters:    Size  Location     Type
  9634 ;;		None
  9635 ;; Auto vars:     Size  Location     Type
  9636 ;;		None
  9637 ;; Return value:  Size  Location     Type
  9638 ;;                  1    wreg      void 
  9639 ;; Registers used:
  9640 ;;		None
  9641 ;; Tracked objects:
  9642 ;;		On entry : 0/0
  9643 ;;		On exit  : 0/0
  9644 ;;		Unchanged: 0/0
  9645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9646 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9647 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9648 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9649 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9650 ;;Total ram usage:        0 bytes
  9651 ;; Hardware stack levels used:    1
  9652 ;; Hardware stack levels required when called:    6
  9653 ;; This function calls:
  9654 ;;		Nothing
  9655 ;; This function is called by:
  9656 ;;		_do_I2C_DO_NACK_STOP
  9657 ;;		_do_I2C_DO_NACK_RESTART
  9658 ;; This function uses a non-reentrant model
  9659 ;;
  9660                           
  9661                           
  9662                           ;psect for function _i2c_driver_sendNACK
  9663  0864                     _i2c_driver_sendNACK:	
  9664                           
  9665                           ;i2c_driver.c: 204: SSP1CON2bits.ACKDT = 1;
  9666                           
  9667                           ;incstack = 0
  9668                           ; Regs used in _i2c_driver_sendNACK: []
  9669  0864  0024               	movlb	4	; select bank4
  9670  0865  1696               	bsf	22,5	;volatile
  9671                           
  9672                           ;i2c_driver.c: 205: SSP1CON2bits.ACKEN = 1;
  9673  0866  1616               	bsf	22,4	;volatile
  9674  0867  0008               	return
  9675  0868                     __end_of_i2c_driver_sendNACK:	
  9676                           
  9677                           	psect	text44
  9678  0804                     __ptext44:	
  9679 ;; *************** function _i2c_driver_resetBus *****************
  9680 ;; Defined at:
  9681 ;;		line 141 in file "mcc_generated_files/i2c_driver.c"
  9682 ;; Parameters:    Size  Location     Type
  9683 ;;		None
  9684 ;; Auto vars:     Size  Location     Type
  9685 ;;		None
  9686 ;; Return value:  Size  Location     Type
  9687 ;;                  1    wreg      void 
  9688 ;; Registers used:
  9689 ;;		None
  9690 ;; Tracked objects:
  9691 ;;		On entry : 0/0
  9692 ;;		On exit  : 0/0
  9693 ;;		Unchanged: 0/0
  9694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9696 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9697 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9698 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9699 ;;Total ram usage:        0 bytes
  9700 ;; Hardware stack levels used:    1
  9701 ;; Hardware stack levels required when called:    6
  9702 ;; This function calls:
  9703 ;;		Nothing
  9704 ;; This function is called by:
  9705 ;;		_do_I2C_RESET
  9706 ;; This function uses a non-reentrant model
  9707 ;;
  9708                           
  9709                           
  9710                           ;psect for function _i2c_driver_resetBus
  9711  0804                     _i2c_driver_resetBus:	
  9712                           
  9713                           ;incstack = 0
  9714                           ; Regs used in _i2c_driver_resetBus: []
  9715  0804  0008               	return
  9716  0805                     __end_of_i2c_driver_resetBus:	
  9717                           
  9718                           	psect	text45
  9719  0830                     __ptext45:	
  9720 ;; *************** function _i2c_driver_startRX *****************
  9721 ;; Defined at:
  9722 ;;		line 166 in file "mcc_generated_files/i2c_driver.c"
  9723 ;; Parameters:    Size  Location     Type
  9724 ;;		None
  9725 ;; Auto vars:     Size  Location     Type
  9726 ;;		None
  9727 ;; Return value:  Size  Location     Type
  9728 ;;                  1    wreg      void 
  9729 ;; Registers used:
  9730 ;;		None
  9731 ;; Tracked objects:
  9732 ;;		On entry : 0/0
  9733 ;;		On exit  : 0/0
  9734 ;;		Unchanged: 0/0
  9735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9736 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9737 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9738 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9739 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9740 ;;Total ram usage:        0 bytes
  9741 ;; Hardware stack levels used:    1
  9742 ;; Hardware stack levels required when called:    6
  9743 ;; This function calls:
  9744 ;;		Nothing
  9745 ;; This function is called by:
  9746 ;;		_do_I2C_RCEN
  9747 ;; This function uses a non-reentrant model
  9748 ;;
  9749                           
  9750                           
  9751                           ;psect for function _i2c_driver_startRX
  9752  0830                     _i2c_driver_startRX:	
  9753                           
  9754                           ;i2c_driver.c: 168: SSP1CON2bits.RCEN = 1;
  9755                           
  9756                           ;incstack = 0
  9757                           ; Regs used in _i2c_driver_startRX: []
  9758  0830  0024               	movlb	4	; select bank4
  9759  0831  1596               	bsf	22,3	;volatile
  9760  0832  0008               	return
  9761  0833                     __end_of_i2c_driver_startRX:	
  9762                           
  9763                           	psect	text46
  9764  089F                     __ptext46:	
  9765 ;; *************** function _returnReset *****************
  9766 ;; Defined at:
  9767 ;;		line 448 in file "mcc_generated_files/drivers/i2c_master.c"
  9768 ;; Parameters:    Size  Location     Type
  9769 ;;  p               1   11[BANK0 ] PTR void 
  9770 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  9771 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  9772 ;; Auto vars:     Size  Location     Type
  9773 ;;		None
  9774 ;; Return value:  Size  Location     Type
  9775 ;;                  1    wreg      enum E12171
  9776 ;; Registers used:
  9777 ;;		wreg
  9778 ;; Tracked objects:
  9779 ;;		On entry : 0/0
  9780 ;;		On exit  : 0/0
  9781 ;;		Unchanged: 0/0
  9782 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9783 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9784 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9785 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9786 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9787 ;;Total ram usage:        1 bytes
  9788 ;; Hardware stack levels used:    1
  9789 ;; Hardware stack levels required when called:    6
  9790 ;; This function calls:
  9791 ;;		Nothing
  9792 ;; This function is called by:
  9793 ;;		_i2c_open
  9794 ;;		_do_I2C_DO_ADDRESS_NACK
  9795 ;;		_do_I2C_TX
  9796 ;;		_do_I2C_RX
  9797 ;;		_do_I2C_TX_EMPTY
  9798 ;;		i1_do_I2C_DO_ADDRESS_NACK
  9799 ;;		i1_do_I2C_TX
  9800 ;;		i1_do_I2C_RX
  9801 ;;		i1_do_I2C_TX_EMPTY
  9802 ;; This function uses a non-reentrant model
  9803 ;;
  9804                           
  9805                           
  9806                           ;psect for function _returnReset
  9807  089F                     _returnReset:	
  9808                           
  9809                           ;Skip over the trampoline to the duplicate function for level 1
  9810  089F  1C7E               	btfss	126,0
  9811  08A0  28A3               	goto	l4473
  9812  08A1  3188  2807         	ljmp	i1l3691
  9813  08A3                     _returnReset$intlevel0:	
  9814  08A3                     l4473:	
  9815                           ;incstack = 0
  9816                           ; Regs used in _returnReset: [wreg]
  9817                           
  9818                           
  9819                           ;i2c_master.c: 450: return i2c_reset_link;
  9820  08A3  3005               	movlw	5
  9821  08A4  0008               	return
  9822  08A5                     __end_of_returnReset:	
  9823                           
  9824                           	psect	text47
  9825  0899                     __ptext47:	
  9826 ;; *************** function _returnStop *****************
  9827 ;; Defined at:
  9828 ;;		line 443 in file "mcc_generated_files/drivers/i2c_master.c"
  9829 ;; Parameters:    Size  Location     Type
  9830 ;;  p               1   11[BANK0 ] PTR void 
  9831 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  9832 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  9833 ;; Auto vars:     Size  Location     Type
  9834 ;;		None
  9835 ;; Return value:  Size  Location     Type
  9836 ;;                  1    wreg      enum E12171
  9837 ;; Registers used:
  9838 ;;		wreg
  9839 ;; Tracked objects:
  9840 ;;		On entry : 0/0
  9841 ;;		On exit  : 0/0
  9842 ;;		Unchanged: 0/0
  9843 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9844 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9845 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9846 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9847 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9848 ;;Total ram usage:        1 bytes
  9849 ;; Hardware stack levels used:    1
  9850 ;; Hardware stack levels required when called:    6
  9851 ;; This function calls:
  9852 ;;		Nothing
  9853 ;; This function is called by:
  9854 ;;		_i2c_open
  9855 ;;		_setCallBack
  9856 ;;		_do_I2C_DO_ADDRESS_NACK
  9857 ;;		_do_I2C_TX
  9858 ;;		_do_I2C_RX
  9859 ;;		_do_I2C_TX_EMPTY
  9860 ;;		i1_do_I2C_DO_ADDRESS_NACK
  9861 ;;		i1_do_I2C_TX
  9862 ;;		i1_do_I2C_RX
  9863 ;;		i1_do_I2C_TX_EMPTY
  9864 ;; This function uses a non-reentrant model
  9865 ;;
  9866                           
  9867                           
  9868                           ;psect for function _returnStop
  9869  0899                     _returnStop:	
  9870                           
  9871                           ;Skip over the trampoline to the duplicate function for level 1
  9872  0899  1C7E               	btfss	126,0
  9873  089A  289D               	goto	l4469
  9874  089B  3188  2805         	ljmp	i1l3687
  9875  089D                     _returnStop$intlevel0:	
  9876  089D                     l4469:	
  9877                           ;incstack = 0
  9878                           ; Regs used in _returnStop: [wreg]
  9879                           
  9880                           
  9881                           ;i2c_master.c: 445: return i2c_stop;
  9882  089D  3001               	movlw	1
  9883  089E  0008               	return
  9884  089F                     __end_of_returnStop:	
  9885                           
  9886                           	psect	text48
  9887  0B5C                     __ptext48:	
  9888 ;; *************** function _rdBlkRegCompleteHandler *****************
  9889 ;; Defined at:
  9890 ;;		line 134 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  9891 ;; Parameters:    Size  Location     Type
  9892 ;;  p               1   11[BANK0 ] PTR void 
  9893 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  9894 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  9895 ;; Auto vars:     Size  Location     Type
  9896 ;;		None
  9897 ;; Return value:  Size  Location     Type
  9898 ;;                  1    wreg      enum E97
  9899 ;; Registers used:
  9900 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9901 ;; Tracked objects:
  9902 ;;		On entry : 0/0
  9903 ;;		On exit  : 0/0
  9904 ;;		Unchanged: 0/0
  9905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9906 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9907 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9908 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9909 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9910 ;;Total ram usage:        1 bytes
  9911 ;; Hardware stack levels used:    1
  9912 ;; Hardware stack levels required when called:    8
  9913 ;; This function calls:
  9914 ;;		_i2c_setBuffer
  9915 ;;		_i2c_setDataCompleteCallback
  9916 ;; This function is called by:
  9917 ;;		_i2c_readDataBlock
  9918 ;;		_do_I2C_DO_ADDRESS_NACK
  9919 ;;		_do_I2C_TX
  9920 ;;		_do_I2C_RX
  9921 ;;		_do_I2C_TX_EMPTY
  9922 ;;		i1_do_I2C_DO_ADDRESS_NACK
  9923 ;;		i1_do_I2C_TX
  9924 ;;		i1_do_I2C_RX
  9925 ;;		i1_do_I2C_TX_EMPTY
  9926 ;; This function uses a non-reentrant model
  9927 ;;
  9928                           
  9929                           
  9930                           ;psect for function _rdBlkRegCompleteHandler
  9931  0B5C                     _rdBlkRegCompleteHandler:	
  9932                           
  9933                           ;Skip over the trampoline to the duplicate function for level 1
  9934  0B5C  1C7E               	btfss	126,0
  9935  0B5D  2B60               	goto	l4427
  9936  0B5E  318A  2A5C         	ljmp	i1l3645
  9937  0B60                     _rdBlkRegCompleteHandler$intlevel0:	
  9938  0B60                     l4427:	
  9939                           ;incstack = 0
  9940                           ; Regs used in _rdBlkRegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  9941                           
  9942                           
  9943                           ;i2c_simple_master.c: 136: i2c_setBuffer(((buf_t *)p)->data,((buf_t*)p)->len);
  9944  0B60  0020               	movlb	0	; select bank0
  9945  0B61  082B               	movf	rdBlkRegCompleteHandler@p,w
  9946  0B62  3E02               	addlw	2
  9947  0B63  0086               	movwf	6
  9948  0B64  0187               	clrf	7
  9949  0B65  0801               	movf	1,w
  9950  0B66  00A2               	movwf	i2c_setBuffer@buffer
  9951  0B67  3000               	movlw	0
  9952  0B68  00A3               	movwf	i2c_setBuffer@buffer+1
  9953  0B69  082B               	movf	rdBlkRegCompleteHandler@p,w
  9954  0B6A  0086               	movwf	6
  9955  0B6B  0187               	clrf	7
  9956  0B6C  3F40               	moviw [0]fsr1
  9957  0B6D  00A4               	movwf	i2c_setBuffer@bufferSize
  9958  0B6E  3F41               	moviw [1]fsr1
  9959  0B6F  00A5               	movwf	i2c_setBuffer@bufferSize+1
  9960  0B70  318A  2247  318B   	fcall	_i2c_setBuffer
  9961                           
  9962                           ;i2c_simple_master.c: 137: i2c_setDataCompleteCallback((0),(0));
  9963  0B73  3000               	movlw	0
  9964  0B74  0020               	movlb	0	; select bank0
  9965  0B75  00A7               	movwf	i2c_setDataCompleteCallback@cb
  9966  0B76  00A8               	movwf	i2c_setDataCompleteCallback@cb+1
  9967  0B77  01A9               	clrf	i2c_setDataCompleteCallback@p
  9968  0B78  3189  21B9         	fcall	_i2c_setDataCompleteCallback
  9969                           
  9970                           ;i2c_simple_master.c: 138: return i2c_restart_read;
  9971  0B7A  3002               	movlw	2
  9972  0B7B  0008               	return
  9973  0B7C                     __end_of_rdBlkRegCompleteHandler:	
  9974                           
  9975                           	psect	text49
  9976  0AE2                     __ptext49:	
  9977 ;; *************** function _rd2RegCompleteHandler *****************
  9978 ;; Defined at:
  9979 ;;		line 87 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  9980 ;; Parameters:    Size  Location     Type
  9981 ;;  p               1   11[BANK0 ] PTR void 
  9982 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  9983 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  9984 ;; Auto vars:     Size  Location     Type
  9985 ;;		None
  9986 ;; Return value:  Size  Location     Type
  9987 ;;                  1    wreg      enum E97
  9988 ;; Registers used:
  9989 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9990 ;; Tracked objects:
  9991 ;;		On entry : 0/0
  9992 ;;		On exit  : 0/0
  9993 ;;		Unchanged: 0/0
  9994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9995 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9996 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9997 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9998 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9999 ;;Total ram usage:        1 bytes
 10000 ;; Hardware stack levels used:    1
 10001 ;; Hardware stack levels required when called:    8
 10002 ;; This function calls:
 10003 ;;		_i2c_setBuffer
 10004 ;;		_i2c_setDataCompleteCallback
 10005 ;; This function is called by:
 10006 ;;		_i2c_read2ByteRegister
 10007 ;;		_do_I2C_DO_ADDRESS_NACK
 10008 ;;		_do_I2C_TX
 10009 ;;		_do_I2C_RX
 10010 ;;		_do_I2C_TX_EMPTY
 10011 ;;		i1_do_I2C_DO_ADDRESS_NACK
 10012 ;;		i1_do_I2C_TX
 10013 ;;		i1_do_I2C_RX
 10014 ;;		i1_do_I2C_TX_EMPTY
 10015 ;; This function uses a non-reentrant model
 10016 ;;
 10017                           
 10018                           
 10019                           ;psect for function _rd2RegCompleteHandler
 10020  0AE2                     _rd2RegCompleteHandler:	
 10021                           
 10022                           ;Skip over the trampoline to the duplicate function for level 1
 10023  0AE2  1C7E               	btfss	126,0
 10024  0AE3  2AE6               	goto	l4411
 10025  0AE4  318A  2A32         	ljmp	i1l3629
 10026  0AE6                     _rd2RegCompleteHandler$intlevel0:	
 10027  0AE6                     l4411:	
 10028                           ;incstack = 0
 10029                           ; Regs used in _rd2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 10030                           
 10031                           
 10032                           ;i2c_simple_master.c: 89: i2c_setBuffer(p,2);
 10033  0AE6  0020               	movlb	0	; select bank0
 10034  0AE7  082B               	movf	rd2RegCompleteHandler@p,w
 10035  0AE8  00A2               	movwf	i2c_setBuffer@buffer
 10036  0AE9  39FF               	andlw	255
 10037  0AEA  1D03               	skipz
 10038  0AEB  3000               	movlw	0
 10039  0AEC  00A3               	movwf	i2c_setBuffer@buffer+1
 10040  0AED  3002               	movlw	2
 10041  0AEE  00A4               	movwf	i2c_setBuffer@bufferSize
 10042  0AEF  3000               	movlw	0
 10043  0AF0  00A5               	movwf	i2c_setBuffer@bufferSize+1
 10044  0AF1  318A  2247  318A   	fcall	_i2c_setBuffer
 10045                           
 10046                           ;i2c_simple_master.c: 90: i2c_setDataCompleteCallback((0),(0));
 10047  0AF4  3000               	movlw	0
 10048  0AF5  0020               	movlb	0	; select bank0
 10049  0AF6  00A7               	movwf	i2c_setDataCompleteCallback@cb
 10050  0AF7  00A8               	movwf	i2c_setDataCompleteCallback@cb+1
 10051  0AF8  01A9               	clrf	i2c_setDataCompleteCallback@p
 10052  0AF9  3189  21B9         	fcall	_i2c_setDataCompleteCallback
 10053                           
 10054                           ;i2c_simple_master.c: 91: return i2c_restart_read;
 10055  0AFB  3002               	movlw	2
 10056  0AFC  0008               	return
 10057  0AFD                     __end_of_rd2RegCompleteHandler:	
 10058                           
 10059                           	psect	text50
 10060  0AC7                     __ptext50:	
 10061 ;; *************** function _rd1RegCompleteHandler *****************
 10062 ;; Defined at:
 10063 ;;		line 58 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 10064 ;; Parameters:    Size  Location     Type
 10065 ;;  p               1   11[BANK0 ] PTR void 
 10066 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 10067 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 10068 ;; Auto vars:     Size  Location     Type
 10069 ;;		None
 10070 ;; Return value:  Size  Location     Type
 10071 ;;                  1    wreg      enum E97
 10072 ;; Registers used:
 10073 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10074 ;; Tracked objects:
 10075 ;;		On entry : 0/0
 10076 ;;		On exit  : 0/0
 10077 ;;		Unchanged: 0/0
 10078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10079 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10080 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10081 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10082 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10083 ;;Total ram usage:        1 bytes
 10084 ;; Hardware stack levels used:    1
 10085 ;; Hardware stack levels required when called:    8
 10086 ;; This function calls:
 10087 ;;		_i2c_setBuffer
 10088 ;;		_i2c_setDataCompleteCallback
 10089 ;; This function is called by:
 10090 ;;		_i2c_read1ByteRegister
 10091 ;;		_do_I2C_DO_ADDRESS_NACK
 10092 ;;		_do_I2C_TX
 10093 ;;		_do_I2C_RX
 10094 ;;		_do_I2C_TX_EMPTY
 10095 ;;		i1_do_I2C_DO_ADDRESS_NACK
 10096 ;;		i1_do_I2C_TX
 10097 ;;		i1_do_I2C_RX
 10098 ;;		i1_do_I2C_TX_EMPTY
 10099 ;; This function uses a non-reentrant model
 10100 ;;
 10101                           
 10102                           
 10103                           ;psect for function _rd1RegCompleteHandler
 10104  0AC7                     _rd1RegCompleteHandler:	
 10105                           
 10106                           ;Skip over the trampoline to the duplicate function for level 1
 10107  0AC7  1C7E               	btfss	126,0
 10108  0AC8  2ACB               	goto	l4403
 10109  0AC9  318A  2A1D         	ljmp	i1l3621
 10110  0ACB                     _rd1RegCompleteHandler$intlevel0:	
 10111  0ACB                     l4403:	
 10112                           ;incstack = 0
 10113                           ; Regs used in _rd1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 10114                           
 10115                           
 10116                           ;i2c_simple_master.c: 60: i2c_setBuffer(p,1);
 10117  0ACB  0020               	movlb	0	; select bank0
 10118  0ACC  082B               	movf	rd1RegCompleteHandler@p,w
 10119  0ACD  00A2               	movwf	i2c_setBuffer@buffer
 10120  0ACE  39FF               	andlw	255
 10121  0ACF  1D03               	skipz
 10122  0AD0  3000               	movlw	0
 10123  0AD1  00A3               	movwf	i2c_setBuffer@buffer+1
 10124  0AD2  3001               	movlw	1
 10125  0AD3  00A4               	movwf	i2c_setBuffer@bufferSize
 10126  0AD4  3000               	movlw	0
 10127  0AD5  00A5               	movwf	i2c_setBuffer@bufferSize+1
 10128  0AD6  318A  2247  318A   	fcall	_i2c_setBuffer
 10129                           
 10130                           ;i2c_simple_master.c: 61: i2c_setDataCompleteCallback((0),(0));
 10131  0AD9  3000               	movlw	0
 10132  0ADA  0020               	movlb	0	; select bank0
 10133  0ADB  00A7               	movwf	i2c_setDataCompleteCallback@cb
 10134  0ADC  00A8               	movwf	i2c_setDataCompleteCallback@cb+1
 10135  0ADD  01A9               	clrf	i2c_setDataCompleteCallback@p
 10136  0ADE  3189  21B9         	fcall	_i2c_setDataCompleteCallback
 10137                           
 10138                           ;i2c_simple_master.c: 62: return i2c_restart_read;
 10139  0AE0  3002               	movlw	2
 10140  0AE1  0008               	return
 10141  0AE2                     __end_of_rd1RegCompleteHandler:	
 10142                           
 10143                           	psect	text51
 10144  0AAC                     __ptext51:	
 10145 ;; *************** function _wr1RegCompleteHandler *****************
 10146 ;; Defined at:
 10147 ;;		line 31 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 10148 ;; Parameters:    Size  Location     Type
 10149 ;;  p               1   11[BANK0 ] PTR void 
 10150 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 10151 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 10152 ;; Auto vars:     Size  Location     Type
 10153 ;;		None
 10154 ;; Return value:  Size  Location     Type
 10155 ;;                  1    wreg      enum E97
 10156 ;; Registers used:
 10157 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10158 ;; Tracked objects:
 10159 ;;		On entry : 0/0
 10160 ;;		On exit  : 0/0
 10161 ;;		Unchanged: 0/0
 10162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10163 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10164 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10165 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10166 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10167 ;;Total ram usage:        1 bytes
 10168 ;; Hardware stack levels used:    1
 10169 ;; Hardware stack levels required when called:    8
 10170 ;; This function calls:
 10171 ;;		_i2c_setBuffer
 10172 ;;		_i2c_setDataCompleteCallback
 10173 ;; This function is called by:
 10174 ;;		_i2c_write1ByteRegister
 10175 ;;		_do_I2C_DO_ADDRESS_NACK
 10176 ;;		_do_I2C_TX
 10177 ;;		_do_I2C_RX
 10178 ;;		_do_I2C_TX_EMPTY
 10179 ;;		i1_do_I2C_DO_ADDRESS_NACK
 10180 ;;		i1_do_I2C_TX
 10181 ;;		i1_do_I2C_RX
 10182 ;;		i1_do_I2C_TX_EMPTY
 10183 ;; This function uses a non-reentrant model
 10184 ;;
 10185                           
 10186                           
 10187                           ;psect for function _wr1RegCompleteHandler
 10188  0AAC                     _wr1RegCompleteHandler:	
 10189                           
 10190                           ;Skip over the trampoline to the duplicate function for level 1
 10191  0AAC  1C7E               	btfss	126,0
 10192  0AAD  2AB0               	goto	l4395
 10193  0AAE  318A  2A08         	ljmp	i1l3613
 10194  0AB0                     _wr1RegCompleteHandler$intlevel0:	
 10195  0AB0                     l4395:	
 10196                           ;incstack = 0
 10197                           ; Regs used in _wr1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 10198                           
 10199                           
 10200                           ;i2c_simple_master.c: 33: i2c_setBuffer(p,1);
 10201  0AB0  0020               	movlb	0	; select bank0
 10202  0AB1  082B               	movf	wr1RegCompleteHandler@p,w
 10203  0AB2  00A2               	movwf	i2c_setBuffer@buffer
 10204  0AB3  39FF               	andlw	255
 10205  0AB4  1D03               	skipz
 10206  0AB5  3000               	movlw	0
 10207  0AB6  00A3               	movwf	i2c_setBuffer@buffer+1
 10208  0AB7  3001               	movlw	1
 10209  0AB8  00A4               	movwf	i2c_setBuffer@bufferSize
 10210  0AB9  3000               	movlw	0
 10211  0ABA  00A5               	movwf	i2c_setBuffer@bufferSize+1
 10212  0ABB  318A  2247  318A   	fcall	_i2c_setBuffer
 10213                           
 10214                           ;i2c_simple_master.c: 34: i2c_setDataCompleteCallback((0),(0));
 10215  0ABE  3000               	movlw	0
 10216  0ABF  0020               	movlb	0	; select bank0
 10217  0AC0  00A7               	movwf	i2c_setDataCompleteCallback@cb
 10218  0AC1  00A8               	movwf	i2c_setDataCompleteCallback@cb+1
 10219  0AC2  01A9               	clrf	i2c_setDataCompleteCallback@p
 10220  0AC3  3189  21B9         	fcall	_i2c_setDataCompleteCallback
 10221                           
 10222                           ;i2c_simple_master.c: 35: return i2c_continue;
 10223  0AC5  3004               	movlw	4
 10224  0AC6  0008               	return
 10225  0AC7                     __end_of_wr1RegCompleteHandler:	
 10226                           
 10227                           	psect	text52
 10228  0893                     __ptext52:	
 10229 ;; *************** function _i2c_restartWrite *****************
 10230 ;; Defined at:
 10231 ;;		line 35 in file "mcc_generated_files/drivers/i2c_types.c"
 10232 ;; Parameters:    Size  Location     Type
 10233 ;;  p               1   11[BANK0 ] PTR void 
 10234 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 10235 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 10236 ;; Auto vars:     Size  Location     Type
 10237 ;;		None
 10238 ;; Return value:  Size  Location     Type
 10239 ;;                  1    wreg      enum E97
 10240 ;; Registers used:
 10241 ;;		wreg
 10242 ;; Tracked objects:
 10243 ;;		On entry : 0/0
 10244 ;;		On exit  : 0/0
 10245 ;;		Unchanged: 0/0
 10246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10247 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10248 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10249 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10250 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10251 ;;Total ram usage:        1 bytes
 10252 ;; Hardware stack levels used:    1
 10253 ;; Hardware stack levels required when called:    6
 10254 ;; This function calls:
 10255 ;;		Nothing
 10256 ;; This function is called by:
 10257 ;;		_i2c_writeNBytes
 10258 ;;		_i2c_write1ByteRegister
 10259 ;;		_i2c_read1ByteRegister
 10260 ;;		_i2c_read2ByteRegister
 10261 ;;		_i2c_write2ByteRegister
 10262 ;;		_i2c_readDataBlock
 10263 ;;		_do_I2C_DO_ADDRESS_NACK
 10264 ;;		_do_I2C_TX
 10265 ;;		_do_I2C_RX
 10266 ;;		_do_I2C_TX_EMPTY
 10267 ;;		i1_do_I2C_DO_ADDRESS_NACK
 10268 ;;		i1_do_I2C_TX
 10269 ;;		i1_do_I2C_RX
 10270 ;;		i1_do_I2C_TX_EMPTY
 10271 ;; This function uses a non-reentrant model
 10272 ;;
 10273                           
 10274                           
 10275                           ;psect for function _i2c_restartWrite
 10276  0893                     _i2c_restartWrite:	
 10277                           
 10278                           ;Skip over the trampoline to the duplicate function for level 1
 10279  0893  1C7E               	btfss	126,0
 10280  0894  2897               	goto	l4477
 10281  0895  3180  2802         	ljmp	i1l3695
 10282  0897                     _i2c_restartWrite$intlevel0:	
 10283  0897                     l4477:	
 10284                           ;incstack = 0
 10285                           ; Regs used in _i2c_restartWrite: [wreg]
 10286                           
 10287                           
 10288                           ;i2c_types.c: 37: return i2c_restart_write;
 10289  0897  3003               	movlw	3
 10290  0898  0008               	return
 10291  0899                     __end_of_i2c_restartWrite:	
 10292                           
 10293                           	psect	text53
 10294  0A91                     __ptext53:	
 10295 ;; *************** function _wr2RegCompleteHandler *****************
 10296 ;; Defined at:
 10297 ;;		line 110 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 10298 ;; Parameters:    Size  Location     Type
 10299 ;;  p               1   11[BANK0 ] PTR void 
 10300 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 10301 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 10302 ;; Auto vars:     Size  Location     Type
 10303 ;;		None
 10304 ;; Return value:  Size  Location     Type
 10305 ;;                  1    wreg      enum E97
 10306 ;; Registers used:
 10307 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10308 ;; Tracked objects:
 10309 ;;		On entry : 0/0
 10310 ;;		On exit  : 0/0
 10311 ;;		Unchanged: 0/0
 10312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10313 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10314 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10315 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10316 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10317 ;;Total ram usage:        1 bytes
 10318 ;; Hardware stack levels used:    1
 10319 ;; Hardware stack levels required when called:    8
 10320 ;; This function calls:
 10321 ;;		_i2c_setBuffer
 10322 ;;		_i2c_setDataCompleteCallback
 10323 ;; This function is called by:
 10324 ;;		_i2c_write2ByteRegister
 10325 ;;		_do_I2C_DO_ADDRESS_NACK
 10326 ;;		_do_I2C_TX
 10327 ;;		_do_I2C_RX
 10328 ;;		_do_I2C_TX_EMPTY
 10329 ;;		i1_do_I2C_DO_ADDRESS_NACK
 10330 ;;		i1_do_I2C_TX
 10331 ;;		i1_do_I2C_RX
 10332 ;;		i1_do_I2C_TX_EMPTY
 10333 ;; This function uses a non-reentrant model
 10334 ;;
 10335                           
 10336                           
 10337                           ;psect for function _wr2RegCompleteHandler
 10338  0A91                     _wr2RegCompleteHandler:	
 10339                           
 10340                           ;Skip over the trampoline to the duplicate function for level 1
 10341  0A91  1C7E               	btfss	126,0
 10342  0A92  2A95               	goto	l4419
 10343  0A93  3189  29F3         	ljmp	i1l3637
 10344  0A95                     _wr2RegCompleteHandler$intlevel0:	
 10345  0A95                     l4419:	
 10346                           ;incstack = 0
 10347                           ; Regs used in _wr2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 10348                           
 10349                           
 10350                           ;i2c_simple_master.c: 112: i2c_setBuffer(p,2);
 10351  0A95  0020               	movlb	0	; select bank0
 10352  0A96  082B               	movf	wr2RegCompleteHandler@p,w
 10353  0A97  00A2               	movwf	i2c_setBuffer@buffer
 10354  0A98  39FF               	andlw	255
 10355  0A99  1D03               	skipz
 10356  0A9A  3000               	movlw	0
 10357  0A9B  00A3               	movwf	i2c_setBuffer@buffer+1
 10358  0A9C  3002               	movlw	2
 10359  0A9D  00A4               	movwf	i2c_setBuffer@bufferSize
 10360  0A9E  3000               	movlw	0
 10361  0A9F  00A5               	movwf	i2c_setBuffer@bufferSize+1
 10362  0AA0  318A  2247  318A   	fcall	_i2c_setBuffer
 10363                           
 10364                           ;i2c_simple_master.c: 113: i2c_setDataCompleteCallback((0),(0));
 10365  0AA3  3000               	movlw	0
 10366  0AA4  0020               	movlb	0	; select bank0
 10367  0AA5  00A7               	movwf	i2c_setDataCompleteCallback@cb
 10368  0AA6  00A8               	movwf	i2c_setDataCompleteCallback@cb+1
 10369  0AA7  01A9               	clrf	i2c_setDataCompleteCallback@p
 10370  0AA8  3189  21B9         	fcall	_i2c_setDataCompleteCallback
 10371                           
 10372                           ;i2c_simple_master.c: 114: return i2c_continue;
 10373  0AAA  3004               	movlw	4
 10374  0AAB  0008               	return
 10375  0AAC                     __end_of_wr2RegCompleteHandler:	
 10376                           
 10377                           	psect	text54
 10378  09B9                     __ptext54:	
 10379 ;; *************** function _i2c_setDataCompleteCallback *****************
 10380 ;; Defined at:
 10381 ;;		line 89 in file "mcc_generated_files/drivers/i2c_master.c"
 10382 ;; Parameters:    Size  Location     Type
 10383 ;;  cb              2    7[BANK0 ] PTR FTN(PTR void ,)enum 
 10384 ;;		 -> rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), rd2RegCompleteHandler(1), rd1RegCompleteHandler(1), 
 10385 ;;		 -> wr1RegCompleteHandler(1), Absolute function(1), 
 10386 ;;  p               1    9[BANK0 ] PTR void 
 10387 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 10388 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 10389 ;; Auto vars:     Size  Location     Type
 10390 ;;		None
 10391 ;; Return value:  Size  Location     Type
 10392 ;;                  1    wreg      void 
 10393 ;; Registers used:
 10394 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10395 ;; Tracked objects:
 10396 ;;		On entry : 0/0
 10397 ;;		On exit  : 0/0
 10398 ;;		Unchanged: 0/0
 10399 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10400 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10401 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10402 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10403 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10404 ;;Total ram usage:        4 bytes
 10405 ;; Hardware stack levels used:    1
 10406 ;; Hardware stack levels required when called:    7
 10407 ;; This function calls:
 10408 ;;		_setCallBack
 10409 ;; This function is called by:
 10410 ;;		_wr1RegCompleteHandler
 10411 ;;		_rd1RegCompleteHandler
 10412 ;;		_rd2RegCompleteHandler
 10413 ;;		_wr2RegCompleteHandler
 10414 ;;		_rdBlkRegCompleteHandler
 10415 ;;		_i2c_write1ByteRegister
 10416 ;;		_i2c_read1ByteRegister
 10417 ;;		_i2c_read2ByteRegister
 10418 ;;		_i2c_write2ByteRegister
 10419 ;;		_i2c_readDataBlock
 10420 ;; This function uses a non-reentrant model
 10421 ;;
 10422                           
 10423                           
 10424                           ;psect for function _i2c_setDataCompleteCallback
 10425  09B9                     _i2c_setDataCompleteCallback:	
 10426                           
 10427                           ;i2c_master.c: 91: setCallBack(i2c_dataComplete,cb,p);
 10428                           
 10429                           ;incstack = 0
 10430                           ; Regs used in _i2c_setDataCompleteCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 10431  09B9  0020               	movlb	0	; select bank0
 10432  09BA  0828               	movf	i2c_setDataCompleteCallback@cb+1,w
 10433  09BB  00A3               	movwf	setCallBack@cb+1
 10434  09BC  0827               	movf	i2c_setDataCompleteCallback@cb,w
 10435  09BD  00A2               	movwf	setCallBack@cb
 10436  09BE  0829               	movf	i2c_setDataCompleteCallback@p,w
 10437  09BF  00AA               	movwf	??_i2c_setDataCompleteCallback
 10438  09C0  082A               	movf	??_i2c_setDataCompleteCallback,w
 10439  09C1  00A4               	movwf	setCallBack@p
 10440  09C2  3000               	movlw	0
 10441  09C3  318C  2449         	fcall	_setCallBack
 10442  09C5  0008               	return
 10443  09C6                     __end_of_i2c_setDataCompleteCallback:	
 10444                           
 10445                           	psect	text55
 10446  0C49                     __ptext55:	
 10447 ;; *************** function _setCallBack *****************
 10448 ;; Defined at:
 10449 ;;		line 453 in file "mcc_generated_files/drivers/i2c_master.c"
 10450 ;; Parameters:    Size  Location     Type
 10451 ;;  idx             1    wreg     enum E12355
 10452 ;;  cb              2    2[BANK0 ] PTR FTN(PTR void ,)enum 
 10453 ;;		 -> rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), rd2RegCompleteHandler(1), rd1RegCompleteHandler(1), 
 10454 ;;		 -> i2c_restartWrite(1), wr1RegCompleteHandler(1), Absolute function(1), 
 10455 ;;  p               1    4[BANK0 ] PTR void 
 10456 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 10457 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 10458 ;; Auto vars:     Size  Location     Type
 10459 ;;  idx             1    6[BANK0 ] enum E12355
 10460 ;; Return value:  Size  Location     Type
 10461 ;;                  1    wreg      void 
 10462 ;; Registers used:
 10463 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10464 ;; Tracked objects:
 10465 ;;		On entry : 0/0
 10466 ;;		On exit  : 0/0
 10467 ;;		Unchanged: 0/0
 10468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10469 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10470 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10471 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10472 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10473 ;;Total ram usage:        5 bytes
 10474 ;; Hardware stack levels used:    1
 10475 ;; Hardware stack levels required when called:    6
 10476 ;; This function calls:
 10477 ;;		Nothing
 10478 ;; This function is called by:
 10479 ;;		_i2c_setDataCompleteCallback
 10480 ;;		_i2c_setAddressNACKCallback
 10481 ;;		_i2c_setWriteCollisionCallback
 10482 ;;		_i2c_setDataNACKCallback
 10483 ;;		_i2c_setTimeOutCallback
 10484 ;; This function uses a non-reentrant model
 10485 ;;
 10486                           
 10487                           
 10488                           ;psect for function _setCallBack
 10489  0C49                     _setCallBack:	
 10490                           
 10491                           ;incstack = 0
 10492                           ; Regs used in _setCallBack: [wreg+fsr1l+fsr1h+status,2+status,0]
 10493                           ;setCallBack@idx stored from wreg
 10494  0C49  0020               	movlb	0	; select bank0
 10495  0C4A  00A6               	movwf	setCallBack@idx
 10496                           
 10497                           ;i2c_master.c: 455: if(cb)
 10498  0C4B  0822               	movf	setCallBack@cb,w
 10499  0C4C  0423               	iorwf	setCallBack@cb+1,w
 10500  0C4D  1903               	btfsc	3,2
 10501  0C4E  2C60               	goto	l4363
 10502                           
 10503                           ;i2c_master.c: 456: {
 10504                           ;i2c_master.c: 457: i2c_status.callbackTable[idx] = cb;
 10505  0C4F  3526               	lslf	setCallBack@idx,w
 10506  0C50  3EAC               	addlw	(low ((_i2c_status| 0+12)))& (0+255)
 10507  0C51  0086               	movwf	6
 10508  0C52  0187               	clrf	7
 10509  0C53  0822               	movf	setCallBack@cb,w
 10510  0C54  3FC0               	movwi [0]fsr1
 10511  0C55  0823               	movf	setCallBack@cb+1,w
 10512  0C56  3FC1               	movwi [1]fsr1
 10513                           
 10514                           ;i2c_master.c: 458: i2c_status.callbackPayload[idx] = p;
 10515  0C57  0824               	movf	setCallBack@p,w
 10516  0C58  00A5               	movwf	??_setCallBack
 10517  0C59  0826               	movf	setCallBack@idx,w
 10518  0C5A  3EB8               	addlw	(low ((_i2c_status| 0+24)))& (0+255)
 10519  0C5B  0086               	movwf	6
 10520  0C5C  0187               	clrf	7
 10521  0C5D  0825               	movf	??_setCallBack,w
 10522  0C5E  0081               	movwf	1
 10523                           
 10524                           ;i2c_master.c: 459: }
 10525  0C5F  0008               	return
 10526  0C60                     l4363:	
 10527                           
 10528                           ;i2c_master.c: 460: else
 10529                           ;i2c_master.c: 461: {
 10530                           ;i2c_master.c: 462: i2c_status.callbackTable[idx] = returnStop;
 10531  0C60  3526               	lslf	setCallBack@idx,w
 10532  0C61  3EAC               	addlw	(low ((_i2c_status| 0+12)))& (0+255)
 10533  0C62  0086               	movwf	6
 10534  0C63  0187               	clrf	7
 10535  0C64  3099               	movlw	low _returnStop
 10536  0C65  3FC0               	movwi [0]fsr1
 10537  0C66  3008               	movlw	high _returnStop
 10538  0C67  3FC1               	movwi [1]fsr1
 10539                           
 10540                           ;i2c_master.c: 463: i2c_status.callbackPayload[idx] = (0);
 10541  0C68  0826               	movf	setCallBack@idx,w
 10542  0C69  3EB8               	addlw	(low ((_i2c_status| 0+24)))& (0+255)
 10543  0C6A  0086               	movwf	6
 10544  0C6B  0187               	clrf	7
 10545  0C6C  0181               	clrf	1
 10546  0C6D  0008               	return
 10547  0C6E                     __end_of_setCallBack:	
 10548                           
 10549                           	psect	text56
 10550  0A47                     __ptext56:	
 10551 ;; *************** function _i2c_setBuffer *****************
 10552 ;; Defined at:
 10553 ;;		line 184 in file "mcc_generated_files/drivers/i2c_master.c"
 10554 ;; Parameters:    Size  Location     Type
 10555 ;;  buffer          2    2[BANK0 ] PTR void 
 10556 ;;		 -> writebuffer(17), i2c_readDataBlock@reg(1), i2c_readDataBlock@d(3), i2c_write2ByteRegister@reg(1), 
 10557 ;;		 -> i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@reg(1), i2c_read2ByteRegister@result(2), i2c_read1ByteRegi
      +ster@reg(1), 
 10558 ;;		 -> i2c_read1ByteRegister@d2(1), i2c_write1ByteRegister@reg(1), i2c_write1ByteRegister@data(1), NULL(0), 
 10559 ;;  bufferSize      2    4[BANK0 ] unsigned int 
 10560 ;; Auto vars:     Size  Location     Type
 10561 ;;		None
 10562 ;; Return value:  Size  Location     Type
 10563 ;;                  1    wreg      void 
 10564 ;; Registers used:
 10565 ;;		wreg
 10566 ;; Tracked objects:
 10567 ;;		On entry : 0/0
 10568 ;;		On exit  : 0/0
 10569 ;;		Unchanged: 0/0
 10570 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10571 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10572 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10573 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10574 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10575 ;;Total ram usage:        4 bytes
 10576 ;; Hardware stack levels used:    1
 10577 ;; Hardware stack levels required when called:    6
 10578 ;; This function calls:
 10579 ;;		Nothing
 10580 ;; This function is called by:
 10581 ;;		_wr1RegCompleteHandler
 10582 ;;		_i2c_writeNBytes
 10583 ;;		_rd1RegCompleteHandler
 10584 ;;		_rd2RegCompleteHandler
 10585 ;;		_wr2RegCompleteHandler
 10586 ;;		_rdBlkRegCompleteHandler
 10587 ;;		_i2c_write1ByteRegister
 10588 ;;		_i2c_read1ByteRegister
 10589 ;;		_i2c_read2ByteRegister
 10590 ;;		_i2c_write2ByteRegister
 10591 ;;		_i2c_readDataBlock
 10592 ;;		_i2c_readNBytes
 10593 ;; This function uses a non-reentrant model
 10594 ;;
 10595                           
 10596                           
 10597                           ;psect for function _i2c_setBuffer
 10598  0A47                     _i2c_setBuffer:	
 10599                           
 10600                           ;i2c_master.c: 186: if(i2c_status.bufferFree)
 10601                           
 10602                           ;incstack = 0
 10603                           ; Regs used in _i2c_setBuffer: [wreg]
 10604  0A47  0021               	movlb	1	; select bank1
 10605  0A48  1D20               	btfss	_i2c_status^(0+128),2
 10606  0A49  0008               	return
 10607                           
 10608                           ;i2c_master.c: 187: {
 10609                           ;i2c_master.c: 188: i2c_status.data_ptr = buffer;
 10610  0A4A  0020               	movlb	0	; select bank0
 10611  0A4B  0823               	movf	i2c_setBuffer@buffer+1,w
 10612  0A4C  0021               	movlb	1	; select bank1
 10613  0A4D  00A3               	movwf	((low ((_i2c_status| 0+2))+1))^(0+128)
 10614  0A4E  0020               	movlb	0	; select bank0
 10615  0A4F  0822               	movf	i2c_setBuffer@buffer,w
 10616  0A50  0021               	movlb	1	; select bank1
 10617  0A51  00A2               	movwf	(low ((_i2c_status| 0+2)))^(0+128)
 10618                           
 10619                           ;i2c_master.c: 189: i2c_status.data_length = bufferSize;
 10620  0A52  0020               	movlb	0	; select bank0
 10621  0A53  0825               	movf	i2c_setBuffer@bufferSize+1,w
 10622  0A54  0021               	movlb	1	; select bank1
 10623  0A55  00A5               	movwf	((_i2c_status+1)^(0+128)+4)
 10624  0A56  0020               	movlb	0	; select bank0
 10625  0A57  0824               	movf	i2c_setBuffer@bufferSize,w
 10626  0A58  0021               	movlb	1	; select bank1
 10627  0A59  00A4               	movwf	(_i2c_status^(0+128)+4)
 10628                           
 10629                           ;i2c_master.c: 190: i2c_status.bufferFree = 0;
 10630  0A5A  1120               	bcf	_i2c_status^(0+128),2
 10631  0A5B  0008               	return
 10632  0A5C                     __end_of_i2c_setBuffer:	
 10633                           
 10634                           	psect	text57
 10635  082D                     __ptext57:	
 10636 ;; *************** function _i2c_driver_stop *****************
 10637 ;; Defined at:
 10638 ;;		line 156 in file "mcc_generated_files/i2c_driver.c"
 10639 ;; Parameters:    Size  Location     Type
 10640 ;;		None
 10641 ;; Auto vars:     Size  Location     Type
 10642 ;;		None
 10643 ;; Return value:  Size  Location     Type
 10644 ;;                  1    wreg      void 
 10645 ;; Registers used:
 10646 ;;		None
 10647 ;; Tracked objects:
 10648 ;;		On entry : 0/0
 10649 ;;		On exit  : 0/0
 10650 ;;		Unchanged: 0/0
 10651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10652 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10653 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10654 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10655 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10656 ;;Total ram usage:        0 bytes
 10657 ;; Hardware stack levels used:    1
 10658 ;; Hardware stack levels required when called:    6
 10659 ;; This function calls:
 10660 ;;		Nothing
 10661 ;; This function is called by:
 10662 ;;		_do_I2C_SEND_STOP
 10663 ;; This function uses a non-reentrant model
 10664 ;;
 10665                           
 10666                           
 10667                           ;psect for function _i2c_driver_stop
 10668  082D                     _i2c_driver_stop:	
 10669                           
 10670                           ;i2c_driver.c: 158: SSP1CON2bits.PEN = 1;
 10671                           
 10672                           ;incstack = 0
 10673                           ; Regs used in _i2c_driver_stop: []
 10674  082D  0024               	movlb	4	; select bank4
 10675  082E  1516               	bsf	22,2	;volatile
 10676  082F  0008               	return
 10677  0830                     __end_of_i2c_driver_stop:	
 10678                           
 10679                           	psect	text58
 10680  082A                     __ptext58:	
 10681 ;; *************** function _i2c_driver_restart *****************
 10682 ;; Defined at:
 10683 ;;		line 151 in file "mcc_generated_files/i2c_driver.c"
 10684 ;; Parameters:    Size  Location     Type
 10685 ;;		None
 10686 ;; Auto vars:     Size  Location     Type
 10687 ;;		None
 10688 ;; Return value:  Size  Location     Type
 10689 ;;                  1    wreg      void 
 10690 ;; Registers used:
 10691 ;;		None
 10692 ;; Tracked objects:
 10693 ;;		On entry : 0/0
 10694 ;;		On exit  : 0/0
 10695 ;;		Unchanged: 0/0
 10696 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10697 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10698 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10699 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10700 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10701 ;;Total ram usage:        0 bytes
 10702 ;; Hardware stack levels used:    1
 10703 ;; Hardware stack levels required when called:    6
 10704 ;; This function calls:
 10705 ;;		Nothing
 10706 ;; This function is called by:
 10707 ;;		_do_I2C_SEND_RESTART_READ
 10708 ;;		_do_I2C_SEND_RESTART_WRITE
 10709 ;;		_do_I2C_SEND_RESTART
 10710 ;; This function uses a non-reentrant model
 10711 ;;
 10712                           
 10713                           
 10714                           ;psect for function _i2c_driver_restart
 10715  082A                     _i2c_driver_restart:	
 10716                           
 10717                           ;i2c_driver.c: 153: SSP1CON2bits.RSEN = 1;
 10718                           
 10719                           ;incstack = 0
 10720                           ; Regs used in _i2c_driver_restart: []
 10721  082A  0024               	movlb	4	; select bank4
 10722  082B  1496               	bsf	22,1	;volatile
 10723  082C  0008               	return
 10724  082D                     __end_of_i2c_driver_restart:	
 10725                           
 10726                           	psect	text59
 10727  0860                     __ptext59:	
 10728 ;; *************** function _i2c_driver_sendACK *****************
 10729 ;; Defined at:
 10730 ;;		line 196 in file "mcc_generated_files/i2c_driver.c"
 10731 ;; Parameters:    Size  Location     Type
 10732 ;;		None
 10733 ;; Auto vars:     Size  Location     Type
 10734 ;;		None
 10735 ;; Return value:  Size  Location     Type
 10736 ;;                  1    wreg      void 
 10737 ;; Registers used:
 10738 ;;		None
 10739 ;; Tracked objects:
 10740 ;;		On entry : 0/0
 10741 ;;		On exit  : 0/0
 10742 ;;		Unchanged: 0/0
 10743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10744 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10745 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10746 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10747 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10748 ;;Total ram usage:        0 bytes
 10749 ;; Hardware stack levels used:    1
 10750 ;; Hardware stack levels required when called:    6
 10751 ;; This function calls:
 10752 ;;		Nothing
 10753 ;; This function is called by:
 10754 ;;		_do_I2C_DO_ACK
 10755 ;;		_do_I2C_RX
 10756 ;; This function uses a non-reentrant model
 10757 ;;
 10758                           
 10759                           
 10760                           ;psect for function _i2c_driver_sendACK
 10761  0860                     _i2c_driver_sendACK:	
 10762                           
 10763                           ;i2c_driver.c: 198: SSP1CON2bits.ACKDT = 0;
 10764                           
 10765                           ;incstack = 0
 10766                           ; Regs used in _i2c_driver_sendACK: []
 10767  0860  0024               	movlb	4	; select bank4
 10768  0861  1296               	bcf	22,5	;volatile
 10769                           
 10770                           ;i2c_driver.c: 199: SSP1CON2bits.ACKEN = 1;
 10771  0862  1616               	bsf	22,4	;volatile
 10772  0863  0008               	return
 10773  0864                     __end_of_i2c_driver_sendACK:	
 10774                           
 10775                           	psect	text60
 10776  0827                     __ptext60:	
 10777 ;; *************** function _i2c_driver_start *****************
 10778 ;; Defined at:
 10779 ;;		line 146 in file "mcc_generated_files/i2c_driver.c"
 10780 ;; Parameters:    Size  Location     Type
 10781 ;;		None
 10782 ;; Auto vars:     Size  Location     Type
 10783 ;;		None
 10784 ;; Return value:  Size  Location     Type
 10785 ;;                  1    wreg      void 
 10786 ;; Registers used:
 10787 ;;		None
 10788 ;; Tracked objects:
 10789 ;;		On entry : 0/0
 10790 ;;		On exit  : 0/0
 10791 ;;		Unchanged: 0/0
 10792 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10793 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10794 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10795 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10796 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10797 ;;Total ram usage:        0 bytes
 10798 ;; Hardware stack levels used:    1
 10799 ;; Hardware stack levels required when called:    6
 10800 ;; This function calls:
 10801 ;;		Nothing
 10802 ;; This function is called by:
 10803 ;;		_i2c_masterOperation
 10804 ;; This function uses a non-reentrant model
 10805 ;;
 10806                           
 10807                           
 10808                           ;psect for function _i2c_driver_start
 10809  0827                     _i2c_driver_start:	
 10810                           
 10811                           ;i2c_driver.c: 148: SSP1CON2bits.SEN = 1;
 10812                           
 10813                           ;incstack = 0
 10814                           ; Regs used in _i2c_driver_start: []
 10815  0827  0024               	movlb	4	; select bank4
 10816  0828  1416               	bsf	22,0	;volatile
 10817  0829  0008               	return
 10818  082A                     __end_of_i2c_driver_start:	
 10819                           
 10820                           	psect	text61
 10821  0A76                     __ptext61:	
 10822 ;; *************** function _i2c_close *****************
 10823 ;; Defined at:
 10824 ;;		line 162 in file "mcc_generated_files/drivers/i2c_master.c"
 10825 ;; Parameters:    Size  Location     Type
 10826 ;;		None
 10827 ;; Auto vars:     Size  Location     Type
 10828 ;;  ret             1    3[BANK0 ] enum E12166
 10829 ;; Return value:  Size  Location     Type
 10830 ;;                  1    wreg      enum E92
 10831 ;; Registers used:
 10832 ;;		wreg, status,2, status,0, pclath, cstack
 10833 ;; Tracked objects:
 10834 ;;		On entry : 0/0
 10835 ;;		On exit  : 0/0
 10836 ;;		Unchanged: 0/0
 10837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10838 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10839 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10840 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10841 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10842 ;;Total ram usage:        2 bytes
 10843 ;; Hardware stack levels used:    1
 10844 ;; Hardware stack levels required when called:    7
 10845 ;; This function calls:
 10846 ;;		_mssp_clearIRQ
 10847 ;;		_mssp_disableIRQ
 10848 ;; This function is called by:
 10849 ;;		_i2c_writeNBytes
 10850 ;;		_i2c_write1ByteRegister
 10851 ;;		_i2c_read1ByteRegister
 10852 ;;		_i2c_read2ByteRegister
 10853 ;;		_i2c_write2ByteRegister
 10854 ;;		_i2c_readDataBlock
 10855 ;;		_i2c_readNBytes
 10856 ;; This function uses a non-reentrant model
 10857 ;;
 10858                           
 10859                           
 10860                           ;psect for function _i2c_close
 10861  0A76                     _i2c_close:	
 10862                           
 10863                           ;i2c_master.c: 164: i2c_error_t ret = I2C_BUSY;
 10864                           
 10865                           ;incstack = 0
 10866                           ; Regs used in _i2c_close: [wreg+status,2+status,0+pclath+cstack]
 10867  0A76  0020               	movlb	0	; select bank0
 10868  0A77  01A3               	clrf	i2c_close@ret
 10869  0A78  0AA3               	incf	i2c_close@ret,f
 10870                           
 10871                           ;i2c_master.c: 165: if(!i2c_status.busy)
 10872  0A79  0021               	movlb	1	; select bank1
 10873  0A7A  1820               	btfsc	_i2c_status^(0+128),0
 10874  0A7B  2A8E               	goto	l450
 10875                           
 10876                           ;i2c_master.c: 166: {
 10877                           ;i2c_master.c: 167: i2c_status.inUse = 0;
 10878  0A7C  10A0               	bcf	_i2c_status^(0+128),1
 10879                           
 10880                           ;i2c_master.c: 169: i2c_status.address = 0xff;
 10881  0A7D  30FF               	movlw	255
 10882  0A7E  0020               	movlb	0	; select bank0
 10883  0A7F  00A2               	movwf	??_i2c_close
 10884  0A80  0822               	movf	??_i2c_close,w
 10885  0A81  0021               	movlb	1	; select bank1
 10886  0A82  00A1               	movwf	(_i2c_status^(0+128)+1)
 10887                           
 10888                           ;i2c_master.c: 170: mssp_clearIRQ();
 10889  0A83  3188  2021  318A   	fcall	_mssp_clearIRQ
 10890                           
 10891                           ;i2c_master.c: 171: mssp_disableIRQ();
 10892  0A86  3188  2024         	fcall	_mssp_disableIRQ
 10893                           
 10894                           ;i2c_master.c: 172: ret = i2c_status.error;
 10895  0A88  0021               	movlb	1	; select bank1
 10896  0A89  082B               	movf	(_i2c_status^(0+128)+11),w
 10897  0A8A  0020               	movlb	0	; select bank0
 10898  0A8B  00A2               	movwf	??_i2c_close
 10899  0A8C  0822               	movf	??_i2c_close,w
 10900  0A8D  00A3               	movwf	i2c_close@ret
 10901  0A8E                     l450:	
 10902                           
 10903                           ;i2c_master.c: 173: }
 10904                           ;i2c_master.c: 174: return ret;
 10905  0A8E  0020               	movlb	0	; select bank0
 10906  0A8F  0823               	movf	i2c_close@ret,w
 10907  0A90  0008               	return
 10908  0A91                     __end_of_i2c_close:	
 10909                           
 10910                           	psect	text62
 10911  0824                     __ptext62:	
 10912 ;; *************** function _mssp_disableIRQ *****************
 10913 ;; Defined at:
 10914 ;;		line 48 in file "mcc_generated_files/i2c_driver.c"
 10915 ;; Parameters:    Size  Location     Type
 10916 ;;		None
 10917 ;; Auto vars:     Size  Location     Type
 10918 ;;		None
 10919 ;; Return value:  Size  Location     Type
 10920 ;;                  1    wreg      void 
 10921 ;; Registers used:
 10922 ;;		None
 10923 ;; Tracked objects:
 10924 ;;		On entry : 0/0
 10925 ;;		On exit  : 0/0
 10926 ;;		Unchanged: 0/0
 10927 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10928 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10929 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10930 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10931 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10932 ;;Total ram usage:        0 bytes
 10933 ;; Hardware stack levels used:    1
 10934 ;; Hardware stack levels required when called:    6
 10935 ;; This function calls:
 10936 ;;		Nothing
 10937 ;; This function is called by:
 10938 ;;		_i2c_close
 10939 ;;		_i2c_setTimeOut
 10940 ;; This function uses a non-reentrant model
 10941 ;;
 10942                           
 10943                           
 10944                           ;psect for function _mssp_disableIRQ
 10945  0824                     _mssp_disableIRQ:	
 10946                           
 10947                           ;i2c_driver.c: 50: PIE1bits.SSP1IE = 0;
 10948                           
 10949                           ;incstack = 0
 10950                           ; Regs used in _mssp_disableIRQ: []
 10951  0824  0021               	movlb	1	; select bank1
 10952  0825  1190               	bcf	16,3	;volatile
 10953  0826  0008               	return
 10954  0827                     __end_of_mssp_disableIRQ:	
 10955                           
 10956                           	psect	text63
 10957  0821                     __ptext63:	
 10958 ;; *************** function _mssp_clearIRQ *****************
 10959 ;; Defined at:
 10960 ;;		line 53 in file "mcc_generated_files/i2c_driver.c"
 10961 ;; Parameters:    Size  Location     Type
 10962 ;;		None
 10963 ;; Auto vars:     Size  Location     Type
 10964 ;;		None
 10965 ;; Return value:  Size  Location     Type
 10966 ;;                  1    wreg      void 
 10967 ;; Registers used:
 10968 ;;		None
 10969 ;; Tracked objects:
 10970 ;;		On entry : 0/0
 10971 ;;		On exit  : 0/0
 10972 ;;		Unchanged: 0/0
 10973 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10974 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10975 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10976 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10977 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10978 ;;Total ram usage:        0 bytes
 10979 ;; Hardware stack levels used:    1
 10980 ;; Hardware stack levels required when called:    6
 10981 ;; This function calls:
 10982 ;;		Nothing
 10983 ;; This function is called by:
 10984 ;;		_i2c_open
 10985 ;;		_i2c_close
 10986 ;;		_i2c_ISR
 10987 ;; This function uses a non-reentrant model
 10988 ;;
 10989                           
 10990                           
 10991                           ;psect for function _mssp_clearIRQ
 10992  0821                     _mssp_clearIRQ:	
 10993                           
 10994                           ;i2c_driver.c: 55: PIR1bits.SSP1IF = 0;
 10995                           
 10996                           ;incstack = 0
 10997                           ; Regs used in _mssp_clearIRQ: []
 10998  0821  0020               	movlb	0	; select bank0
 10999  0822  1190               	bcf	16,3	;volatile
 11000  0823  0008               	return
 11001  0824                     __end_of_mssp_clearIRQ:	
 11002                           
 11003                           	psect	text64
 11004  0711                     __ptext64:	
 11005 ;; *************** function ___awdiv *****************
 11006 ;; Defined at:
 11007 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
 11008 ;; Parameters:    Size  Location     Type
 11009 ;;  divisor         2    2[BANK0 ] int 
 11010 ;;  dividend        2    4[BANK0 ] int 
 11011 ;; Auto vars:     Size  Location     Type
 11012 ;;  quotient        2    9[BANK0 ] int 
 11013 ;;  sign            1    8[BANK0 ] unsigned char 
 11014 ;;  counter         1    7[BANK0 ] unsigned char 
 11015 ;; Return value:  Size  Location     Type
 11016 ;;                  2    2[BANK0 ] int 
 11017 ;; Registers used:
 11018 ;;		wreg, status,2, status,0
 11019 ;; Tracked objects:
 11020 ;;		On entry : 0/0
 11021 ;;		On exit  : 0/0
 11022 ;;		Unchanged: 0/0
 11023 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11024 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11025 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11026 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11027 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11028 ;;Total ram usage:        9 bytes
 11029 ;; Hardware stack levels used:    1
 11030 ;; Hardware stack levels required when called:    6
 11031 ;; This function calls:
 11032 ;;		Nothing
 11033 ;; This function is called by:
 11034 ;;		_writeDisplay
 11035 ;;		_writeWord
 11036 ;; This function uses a non-reentrant model
 11037 ;;
 11038                           
 11039                           
 11040                           ;psect for function ___awdiv
 11041  0711                     ___awdiv:	
 11042                           
 11043                           ;incstack = 0
 11044                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 11045  0711  0020               	movlb	0	; select bank0
 11046  0712  01A8               	clrf	___awdiv@sign
 11047  0713  1FA3               	btfss	___awdiv@divisor+1,7
 11048  0714  2F1C               	goto	l4771
 11049  0715  09A2               	comf	___awdiv@divisor,f
 11050  0716  09A3               	comf	___awdiv@divisor+1,f
 11051  0717  0AA2               	incf	___awdiv@divisor,f
 11052  0718  1903               	skipnz
 11053  0719  0AA3               	incf	___awdiv@divisor+1,f
 11054  071A  01A8               	clrf	___awdiv@sign
 11055  071B  0AA8               	incf	___awdiv@sign,f
 11056  071C                     l4771:	
 11057  071C  1FA5               	btfss	___awdiv@dividend+1,7
 11058  071D  2F27               	goto	l4777
 11059  071E  09A4               	comf	___awdiv@dividend,f
 11060  071F  09A5               	comf	___awdiv@dividend+1,f
 11061  0720  0AA4               	incf	___awdiv@dividend,f
 11062  0721  1903               	skipnz
 11063  0722  0AA5               	incf	___awdiv@dividend+1,f
 11064  0723  3001               	movlw	1
 11065  0724  00A6               	movwf	??___awdiv
 11066  0725  0826               	movf	??___awdiv,w
 11067  0726  06A8               	xorwf	___awdiv@sign,f
 11068  0727                     l4777:	
 11069  0727  01A9               	clrf	___awdiv@quotient
 11070  0728  01AA               	clrf	___awdiv@quotient+1
 11071  0729  0822               	movf	___awdiv@divisor,w
 11072  072A  0423               	iorwf	___awdiv@divisor+1,w
 11073  072B  1903               	btfsc	3,2
 11074  072C  2F56               	goto	l4799
 11075  072D  01A7               	clrf	___awdiv@counter
 11076  072E  0AA7               	incf	___awdiv@counter,f
 11077  072F                     l4787:	
 11078  072F  1BA3               	btfsc	___awdiv@divisor+1,7
 11079  0730  2F3B               	goto	l4789
 11080  0731  3001               	movlw	1
 11081  0732                     u3385:	
 11082  0732  35A2               	lslf	___awdiv@divisor,f
 11083  0733  0DA3               	rlf	___awdiv@divisor+1,f
 11084  0734  0B89               	decfsz	9,f
 11085  0735  2F32               	goto	u3385
 11086  0736  3001               	movlw	1
 11087  0737  00A6               	movwf	??___awdiv
 11088  0738  0826               	movf	??___awdiv,w
 11089  0739  07A7               	addwf	___awdiv@counter,f
 11090  073A  2F2F               	goto	l4787
 11091  073B                     l4789:	
 11092  073B  3001               	movlw	1
 11093  073C                     u3405:	
 11094  073C  35A9               	lslf	___awdiv@quotient,f
 11095  073D  0DAA               	rlf	___awdiv@quotient+1,f
 11096  073E  0B89               	decfsz	9,f
 11097  073F  2F3C               	goto	u3405
 11098  0740  0823               	movf	___awdiv@divisor+1,w
 11099  0741  0225               	subwf	___awdiv@dividend+1,w
 11100  0742  1D03               	skipz
 11101  0743  2F46               	goto	u3415
 11102  0744  0822               	movf	___awdiv@divisor,w
 11103  0745  0224               	subwf	___awdiv@dividend,w
 11104  0746                     u3415:	
 11105  0746  1C03               	skipc
 11106  0747  2F4D               	goto	l4795
 11107  0748  0822               	movf	___awdiv@divisor,w
 11108  0749  02A4               	subwf	___awdiv@dividend,f
 11109  074A  0823               	movf	___awdiv@divisor+1,w
 11110  074B  3BA5               	subwfb	___awdiv@dividend+1,f
 11111  074C  1429               	bsf	___awdiv@quotient,0
 11112  074D                     l4795:	
 11113  074D  3001               	movlw	1
 11114  074E                     u3425:	
 11115  074E  36A3               	lsrf	___awdiv@divisor+1,f
 11116  074F  0CA2               	rrf	___awdiv@divisor,f
 11117  0750  0B89               	decfsz	9,f
 11118  0751  2F4E               	goto	u3425
 11119  0752  3001               	movlw	1
 11120  0753  02A7               	subwf	___awdiv@counter,f
 11121  0754  1D03               	btfss	3,2
 11122  0755  2F3B               	goto	l4789
 11123  0756                     l4799:	
 11124  0756  0828               	movf	___awdiv@sign,w
 11125  0757  1903               	btfsc	3,2
 11126  0758  2F5E               	goto	l4803
 11127  0759  09A9               	comf	___awdiv@quotient,f
 11128  075A  09AA               	comf	___awdiv@quotient+1,f
 11129  075B  0AA9               	incf	___awdiv@quotient,f
 11130  075C  1903               	skipnz
 11131  075D  0AAA               	incf	___awdiv@quotient+1,f
 11132  075E                     l4803:	
 11133  075E  082A               	movf	___awdiv@quotient+1,w
 11134  075F  00A3               	movwf	?___awdiv+1
 11135  0760  0829               	movf	___awdiv@quotient,w
 11136  0761  00A2               	movwf	?___awdiv
 11137  0762  0008               	return
 11138  0763                     __end_of___awdiv:	
 11139                           
 11140                           	psect	text65
 11141  06BD                     __ptext65:	
 11142 ;; *************** function _drawWalls *****************
 11143 ;; Defined at:
 11144 ;;		line 360 in file "main.c"
 11145 ;; Parameters:    Size  Location     Type
 11146 ;;		None
 11147 ;; Auto vars:     Size  Location     Type
 11148 ;;		None
 11149 ;; Return value:  Size  Location     Type
 11150 ;;                  1    wreg      void 
 11151 ;; Registers used:
 11152 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11153 ;; Tracked objects:
 11154 ;;		On entry : 0/0
 11155 ;;		On exit  : 0/0
 11156 ;;		Unchanged: 0/0
 11157 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11158 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11159 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11160 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11161 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11162 ;;Total ram usage:        3 bytes
 11163 ;; Hardware stack levels used:    1
 11164 ;; Hardware stack levels required when called:    7
 11165 ;; This function calls:
 11166 ;;		_reverse
 11167 ;; This function is called by:
 11168 ;;		_writeWord
 11169 ;;		_main
 11170 ;; This function uses a non-reentrant model
 11171 ;;
 11172                           
 11173                           
 11174                           ;psect for function _drawWalls
 11175  06BD                     _drawWalls:	
 11176                           
 11177                           ;main.c: 361: for (i = 0; i < 8; i++) {
 11178                           
 11179                           ;incstack = 0
 11180                           ; Regs used in _drawWalls: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11181  06BD  0020               	movlb	0	; select bank0
 11182  06BE  01E1               	clrf	_i
 11183  06BF                     L6:	
 11184  06BF  3008               	movlw	8
 11185  06C0  0261               	subwf	_i,w
 11186  06C1  1803               	btfsc	3,0
 11187  06C2  0008               	return
 11188                           
 11189                           ;main.c: 362: if (wallColor == 1) {
 11190  06C3  0021               	movlb	1	; select bank1
 11191  06C4  0345               	decf	_wallColor^(0+128),w
 11192  06C5  1D03               	btfss	3,2
 11193  06C6  2ED5               	goto	l4845
 11194                           
 11195                           ;main.c: 363: pixelbuffer[i] |= reverse(walls[i]);
 11196  06C7  0020               	movlb	0	; select bank0
 11197  06C8  0861               	movf	_i,w
 11198  06C9  3E30               	addlw	(low (_walls| (0+256)))& (0+255)
 11199  06CA  0086               	movwf	6
 11200  06CB  3001               	movlw	1	; select bank2/3
 11201  06CC  0087               	movwf	7
 11202  06CD  0801               	movf	1,w
 11203  06CE  318E  262E  3186   	fcall	_reverse
 11204  06D1  0020               	movlb	0	; select bank0
 11205  06D2  00A6               	movwf	??_drawWalls
 11206  06D3  01A7               	clrf	??_drawWalls+1
 11207  06D4  2F02               	goto	L5
 11208  06D5                     l4845:	
 11209                           ;main.c: 364: } else if (wallColor == 2) {
 11210                           
 11211  06D5  3002               	movlw	2
 11212  06D6  0021               	movlb	1	; select bank1
 11213  06D7  0645               	xorwf	_wallColor^(0+128),w
 11214  06D8  1D03               	btfss	3,2
 11215  06D9  2EEB               	goto	l4849
 11216                           
 11217                           ;main.c: 365: pixelbuffer[i] |= reverse(walls[i]) << 8;
 11218  06DA  0020               	movlb	0	; select bank0
 11219  06DB  0861               	movf	_i,w
 11220  06DC  3E30               	addlw	(low (_walls| (0+256)))& (0+255)
 11221  06DD  0086               	movwf	6
 11222  06DE  3001               	movlw	1	; select bank2/3
 11223  06DF  0087               	movwf	7
 11224  06E0  0801               	movf	1,w
 11225  06E1  318E  262E  3186   	fcall	_reverse
 11226  06E4  0020               	movlb	0	; select bank0
 11227  06E5  00A6               	movwf	??_drawWalls
 11228  06E6  01A7               	clrf	??_drawWalls+1
 11229  06E7  0826               	movf	??_drawWalls,w
 11230  06E8  00A7               	movwf	??_drawWalls+1
 11231  06E9  01A6               	clrf	??_drawWalls
 11232  06EA  2F02               	goto	L5
 11233  06EB                     l4849:	
 11234                           ;main.c: 366: } else {
 11235                           
 11236                           
 11237                           ;main.c: 367: pixelbuffer[i] |= reverse(walls[i]) << 8 | reverse(walls[i]);
 11238  06EB  0020               	movlb	0	; select bank0
 11239  06EC  0861               	movf	_i,w
 11240  06ED  3E30               	addlw	(low (_walls| (0+256)))& (0+255)
 11241  06EE  0086               	movwf	6
 11242  06EF  3001               	movlw	1	; select bank2/3
 11243  06F0  0087               	movwf	7
 11244  06F1  0801               	movf	1,w
 11245  06F2  318E  262E  3186   	fcall	_reverse
 11246  06F5  0020               	movlb	0	; select bank0
 11247  06F6  00A6               	movwf	??_drawWalls
 11248  06F7  0861               	movf	_i,w
 11249  06F8  3E30               	addlw	(low (_walls| (0+256)))& (0+255)
 11250  06F9  0086               	movwf	6
 11251  06FA  3001               	movlw	1	; select bank2/3
 11252  06FB  0087               	movwf	7
 11253  06FC  0801               	movf	1,w
 11254  06FD  318E  262E  3186   	fcall	_reverse
 11255  0700  0020               	movlb	0	; select bank0
 11256  0701  00A7               	movwf	??_drawWalls+1
 11257  0702                     L5:	
 11258  0702  3561               	lslf	_i,w
 11259  0703  3E20               	addlw	(low (_pixelbuffer| (0+256)))& (0+255)
 11260  0704  0086               	movwf	6
 11261  0705  3001               	movlw	1	; select bank2/3
 11262  0706  0087               	movwf	7
 11263  0707  0826               	movf	??_drawWalls,w
 11264  0708  0481               	iorwf	1,f
 11265  0709  3141               	addfsr 1,1
 11266  070A  0827               	movf	??_drawWalls+1,w
 11267  070B  0481               	iorwf	1,f
 11268  070C  3001               	movlw	1
 11269  070D  00A6               	movwf	??_drawWalls
 11270  070E  0826               	movf	??_drawWalls,w
 11271  070F  07E1               	addwf	_i,f
 11272  0710  2EBF               	goto	L6
 11273  0711                     __end_of_drawWalls:	
 11274                           
 11275                           	psect	text66
 11276  0E2E                     __ptext66:	
 11277 ;; *************** function _reverse *****************
 11278 ;; Defined at:
 11279 ;;		line 353 in file "main.c"
 11280 ;; Parameters:    Size  Location     Type
 11281 ;;  b               1    wreg     unsigned char 
 11282 ;; Auto vars:     Size  Location     Type
 11283 ;;  b               1    5[BANK0 ] unsigned char 
 11284 ;; Return value:  Size  Location     Type
 11285 ;;                  1    wreg      unsigned char 
 11286 ;; Registers used:
 11287 ;;		wreg, status,2, status,0
 11288 ;; Tracked objects:
 11289 ;;		On entry : 0/0
 11290 ;;		On exit  : 0/0
 11291 ;;		Unchanged: 0/0
 11292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11293 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11294 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11295 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11296 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11297 ;;Total ram usage:        4 bytes
 11298 ;; Hardware stack levels used:    1
 11299 ;; Hardware stack levels required when called:    6
 11300 ;; This function calls:
 11301 ;;		Nothing
 11302 ;; This function is called by:
 11303 ;;		_drawWalls
 11304 ;; This function uses a non-reentrant model
 11305 ;;
 11306                           
 11307                           
 11308                           ;psect for function _reverse
 11309  0E2E                     _reverse:	
 11310                           
 11311                           ;incstack = 0
 11312                           ; Regs used in _reverse: [wreg+status,2+status,0]
 11313                           ;reverse@b stored from wreg
 11314  0E2E  0020               	movlb	0	; select bank0
 11315  0E2F  00A5               	movwf	reverse@b
 11316                           
 11317                           ;main.c: 354: b = (b & 0xF0) >> 4 | (b & 0x0F) << 4;
 11318  0E30  0825               	movf	reverse@b,w
 11319  0E31  390F               	andlw	15
 11320  0E32  00A2               	movwf	??_reverse
 11321  0E33  3004               	movlw	4
 11322  0E34                     u3305:	
 11323  0E34  35A2               	lslf	??_reverse,f
 11324  0E35  0B89               	decfsz	9,f
 11325  0E36  2E34               	goto	u3305
 11326  0E37  0825               	movf	reverse@b,w
 11327  0E38  00A3               	movwf	??_reverse+1
 11328  0E39  3004               	movlw	4
 11329  0E3A                     u3315:	
 11330  0E3A  36A3               	lsrf	??_reverse+1,f
 11331  0E3B  0B89               	decfsz	9,f
 11332  0E3C  2E3A               	goto	u3315
 11333  0E3D  0823               	movf	??_reverse+1,w
 11334  0E3E  390F               	andlw	15
 11335  0E3F  0422               	iorwf	??_reverse,w
 11336  0E40  00A4               	movwf	??_reverse+2
 11337  0E41  0824               	movf	??_reverse+2,w
 11338  0E42  00A5               	movwf	reverse@b
 11339                           
 11340                           ;main.c: 355: b = (b & 0xCC) >> 2 | (b & 0x33) << 2;
 11341  0E43  0825               	movf	reverse@b,w
 11342  0E44  3933               	andlw	51
 11343  0E45  00A2               	movwf	??_reverse
 11344  0E46  3002               	movlw	2
 11345  0E47                     u3325:	
 11346  0E47  35A2               	lslf	??_reverse,f
 11347  0E48  0B89               	decfsz	9,f
 11348  0E49  2E47               	goto	u3325
 11349  0E4A  0825               	movf	reverse@b,w
 11350  0E4B  00A3               	movwf	??_reverse+1
 11351  0E4C  3002               	movlw	2
 11352  0E4D                     u3335:	
 11353  0E4D  36A3               	lsrf	??_reverse+1,f
 11354  0E4E  0B89               	decfsz	9,f
 11355  0E4F  2E4D               	goto	u3335
 11356  0E50  0823               	movf	??_reverse+1,w
 11357  0E51  3933               	andlw	51
 11358  0E52  0422               	iorwf	??_reverse,w
 11359  0E53  00A4               	movwf	??_reverse+2
 11360  0E54  0824               	movf	??_reverse+2,w
 11361  0E55  00A5               	movwf	reverse@b
 11362                           
 11363                           ;main.c: 356: b = (b & 0xAA) >> 1 | (b & 0x55) << 1;
 11364  0E56  0825               	movf	reverse@b,w
 11365  0E57  3955               	andlw	85
 11366  0E58  00A2               	movwf	??_reverse
 11367  0E59  3001               	movlw	1
 11368  0E5A                     u3345:	
 11369  0E5A  35A2               	lslf	??_reverse,f
 11370  0E5B  0B89               	decfsz	9,f
 11371  0E5C  2E5A               	goto	u3345
 11372  0E5D  3625               	lsrf	reverse@b,w
 11373  0E5E  3955               	andlw	85
 11374  0E5F  0422               	iorwf	??_reverse,w
 11375  0E60  00A3               	movwf	??_reverse+1
 11376  0E61  0823               	movf	??_reverse+1,w
 11377  0E62  00A5               	movwf	reverse@b
 11378                           
 11379                           ;main.c: 357: return b;
 11380  0E63  0825               	movf	reverse@b,w
 11381  0E64  0008               	return
 11382  0E65                     __end_of_reverse:	
 11383                           
 11384                           	psect	text67
 11385  09E0                     __ptext67:	
 11386 ;; *************** function _clearPixels *****************
 11387 ;; Defined at:
 11388 ;;		line 324 in file "main.c"
 11389 ;; Parameters:    Size  Location     Type
 11390 ;;		None
 11391 ;; Auto vars:     Size  Location     Type
 11392 ;;		None
 11393 ;; Return value:  Size  Location     Type
 11394 ;;                  1    wreg      void 
 11395 ;; Registers used:
 11396 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11397 ;; Tracked objects:
 11398 ;;		On entry : 0/0
 11399 ;;		On exit  : 0/0
 11400 ;;		Unchanged: 0/0
 11401 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11402 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11403 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11404 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11405 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11406 ;;Total ram usage:        1 bytes
 11407 ;; Hardware stack levels used:    1
 11408 ;; Hardware stack levels required when called:    6
 11409 ;; This function calls:
 11410 ;;		Nothing
 11411 ;; This function is called by:
 11412 ;;		_writeWord
 11413 ;;		_endGame
 11414 ;;		_main
 11415 ;; This function uses a non-reentrant model
 11416 ;;
 11417                           
 11418                           
 11419                           ;psect for function _clearPixels
 11420  09E0                     _clearPixels:	
 11421                           
 11422                           ;main.c: 325: for (i = 0; i < 8; i++) {
 11423                           
 11424                           ;incstack = 0
 11425                           ; Regs used in _clearPixels: [wreg+fsr1l+fsr1h+status,2+status,0]
 11426  09E0  0020               	movlb	0	; select bank0
 11427  09E1  01E1               	clrf	_i
 11428  09E2                     L7:	
 11429  09E2  3008               	movlw	8
 11430  09E3  0261               	subwf	_i,w
 11431  09E4  1803               	btfsc	3,0
 11432  09E5  0008               	return
 11433                           
 11434                           ;main.c: 326: pixelbuffer[i] = 0;
 11435  09E6  3561               	lslf	_i,w
 11436  09E7  3E20               	addlw	(low (_pixelbuffer| (0+256)))& (0+255)
 11437  09E8  0086               	movwf	6
 11438  09E9  3001               	movlw	1	; select bank2/3
 11439  09EA  0087               	movwf	7
 11440  09EB  3000               	movlw	0
 11441  09EC  3FC0               	movwi [0]fsr1
 11442  09ED  3FC1               	movwi [1]fsr1
 11443  09EE  3001               	movlw	1
 11444  09EF  00A2               	movwf	??_clearPixels
 11445  09F0  0822               	movf	??_clearPixels,w
 11446  09F1  07E1               	addwf	_i,f
 11447  09F2  29E2               	goto	L7
 11448  09F3                     __end_of_clearPixels:	
 11449                           
 11450                           	psect	text68
 11451  0D3A                     __ptext68:	
 11452 ;; *************** function ___lwmod *****************
 11453 ;; Defined at:
 11454 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 11455 ;; Parameters:    Size  Location     Type
 11456 ;;  divisor         2   10[BANK0 ] unsigned int 
 11457 ;;  dividend        2   12[BANK0 ] unsigned int 
 11458 ;; Auto vars:     Size  Location     Type
 11459 ;;  counter         1   15[BANK0 ] unsigned char 
 11460 ;; Return value:  Size  Location     Type
 11461 ;;                  2   10[BANK0 ] unsigned int 
 11462 ;; Registers used:
 11463 ;;		wreg, status,2, status,0
 11464 ;; Tracked objects:
 11465 ;;		On entry : 0/0
 11466 ;;		On exit  : 0/0
 11467 ;;		Unchanged: 0/0
 11468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11469 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11470 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11471 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11472 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11473 ;;Total ram usage:        6 bytes
 11474 ;; Hardware stack levels used:    1
 11475 ;; Hardware stack levels required when called:    6
 11476 ;; This function calls:
 11477 ;;		Nothing
 11478 ;; This function is called by:
 11479 ;;		_write
 11480 ;; This function uses a non-reentrant model
 11481 ;;
 11482                           
 11483                           
 11484                           ;psect for function ___lwmod
 11485  0D3A                     ___lwmod:	
 11486                           
 11487                           ;incstack = 0
 11488                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
 11489  0D3A  0020               	movlb	0	; select bank0
 11490  0D3B  082A               	movf	___lwmod@divisor,w
 11491  0D3C  042B               	iorwf	___lwmod@divisor+1,w
 11492  0D3D  1903               	btfsc	3,2
 11493  0D3E  2D62               	goto	l4935
 11494  0D3F  01AF               	clrf	___lwmod@counter
 11495  0D40  0AAF               	incf	___lwmod@counter,f
 11496  0D41                     l4925:	
 11497  0D41  1BAB               	btfsc	___lwmod@divisor+1,7
 11498  0D42  2D4D               	goto	l4927
 11499  0D43  3001               	movlw	1
 11500  0D44                     u3685:	
 11501  0D44  35AA               	lslf	___lwmod@divisor,f
 11502  0D45  0DAB               	rlf	___lwmod@divisor+1,f
 11503  0D46  0B89               	decfsz	9,f
 11504  0D47  2D44               	goto	u3685
 11505  0D48  3001               	movlw	1
 11506  0D49  00AE               	movwf	??___lwmod
 11507  0D4A  082E               	movf	??___lwmod,w
 11508  0D4B  07AF               	addwf	___lwmod@counter,f
 11509  0D4C  2D41               	goto	l4925
 11510  0D4D                     l4927:	
 11511  0D4D  082B               	movf	___lwmod@divisor+1,w
 11512  0D4E  022D               	subwf	___lwmod@dividend+1,w
 11513  0D4F  1D03               	skipz
 11514  0D50  2D53               	goto	u3705
 11515  0D51  082A               	movf	___lwmod@divisor,w
 11516  0D52  022C               	subwf	___lwmod@dividend,w
 11517  0D53                     u3705:	
 11518  0D53  1C03               	skipc
 11519  0D54  2D59               	goto	l4931
 11520  0D55  082A               	movf	___lwmod@divisor,w
 11521  0D56  02AC               	subwf	___lwmod@dividend,f
 11522  0D57  082B               	movf	___lwmod@divisor+1,w
 11523  0D58  3BAD               	subwfb	___lwmod@dividend+1,f
 11524  0D59                     l4931:	
 11525  0D59  3001               	movlw	1
 11526  0D5A                     u3715:	
 11527  0D5A  36AB               	lsrf	___lwmod@divisor+1,f
 11528  0D5B  0CAA               	rrf	___lwmod@divisor,f
 11529  0D5C  0B89               	decfsz	9,f
 11530  0D5D  2D5A               	goto	u3715
 11531  0D5E  3001               	movlw	1
 11532  0D5F  02AF               	subwf	___lwmod@counter,f
 11533  0D60  1D03               	btfss	3,2
 11534  0D61  2D4D               	goto	l4927
 11535  0D62                     l4935:	
 11536  0D62  082D               	movf	___lwmod@dividend+1,w
 11537  0D63  00AB               	movwf	?___lwmod+1
 11538  0D64  082C               	movf	___lwmod@dividend,w
 11539  0D65  00AA               	movwf	?___lwmod
 11540  0D66  0008               	return
 11541  0D67                     __end_of___lwmod:	
 11542                           
 11543                           	psect	text69
 11544  0DF9                     __ptext69:	
 11545 ;; *************** function ___lwdiv *****************
 11546 ;; Defined at:
 11547 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
 11548 ;; Parameters:    Size  Location     Type
 11549 ;;  divisor         2    2[BANK0 ] unsigned int 
 11550 ;;  dividend        2    4[BANK0 ] unsigned int 
 11551 ;; Auto vars:     Size  Location     Type
 11552 ;;  quotient        2    8[BANK0 ] unsigned int 
 11553 ;;  counter         1    7[BANK0 ] unsigned char 
 11554 ;; Return value:  Size  Location     Type
 11555 ;;                  2    2[BANK0 ] unsigned int 
 11556 ;; Registers used:
 11557 ;;		wreg, status,2, status,0
 11558 ;; Tracked objects:
 11559 ;;		On entry : 0/0
 11560 ;;		On exit  : 0/0
 11561 ;;		Unchanged: 0/0
 11562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11563 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11564 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11565 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11566 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11567 ;;Total ram usage:        8 bytes
 11568 ;; Hardware stack levels used:    1
 11569 ;; Hardware stack levels required when called:    6
 11570 ;; This function calls:
 11571 ;;		Nothing
 11572 ;; This function is called by:
 11573 ;;		_write
 11574 ;; This function uses a non-reentrant model
 11575 ;;
 11576                           
 11577                           
 11578                           ;psect for function ___lwdiv
 11579  0DF9                     ___lwdiv:	
 11580                           
 11581                           ;incstack = 0
 11582                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 11583  0DF9  0020               	movlb	0	; select bank0
 11584  0DFA  01A8               	clrf	___lwdiv@quotient
 11585  0DFB  01A9               	clrf	___lwdiv@quotient+1
 11586  0DFC  0822               	movf	___lwdiv@divisor,w
 11587  0DFD  0423               	iorwf	___lwdiv@divisor+1,w
 11588  0DFE  1903               	btfsc	3,2
 11589  0DFF  2E29               	goto	l4913
 11590  0E00  01A7               	clrf	___lwdiv@counter
 11591  0E01  0AA7               	incf	___lwdiv@counter,f
 11592  0E02                     l4901:	
 11593  0E02  1BA3               	btfsc	___lwdiv@divisor+1,7
 11594  0E03  2E0E               	goto	l4903
 11595  0E04  3001               	movlw	1
 11596  0E05                     u3615:	
 11597  0E05  35A2               	lslf	___lwdiv@divisor,f
 11598  0E06  0DA3               	rlf	___lwdiv@divisor+1,f
 11599  0E07  0B89               	decfsz	9,f
 11600  0E08  2E05               	goto	u3615
 11601  0E09  3001               	movlw	1
 11602  0E0A  00A6               	movwf	??___lwdiv
 11603  0E0B  0826               	movf	??___lwdiv,w
 11604  0E0C  07A7               	addwf	___lwdiv@counter,f
 11605  0E0D  2E02               	goto	l4901
 11606  0E0E                     l4903:	
 11607  0E0E  3001               	movlw	1
 11608  0E0F                     u3635:	
 11609  0E0F  35A8               	lslf	___lwdiv@quotient,f
 11610  0E10  0DA9               	rlf	___lwdiv@quotient+1,f
 11611  0E11  0B89               	decfsz	9,f
 11612  0E12  2E0F               	goto	u3635
 11613  0E13  0823               	movf	___lwdiv@divisor+1,w
 11614  0E14  0225               	subwf	___lwdiv@dividend+1,w
 11615  0E15  1D03               	skipz
 11616  0E16  2E19               	goto	u3645
 11617  0E17  0822               	movf	___lwdiv@divisor,w
 11618  0E18  0224               	subwf	___lwdiv@dividend,w
 11619  0E19                     u3645:	
 11620  0E19  1C03               	skipc
 11621  0E1A  2E20               	goto	l4909
 11622  0E1B  0822               	movf	___lwdiv@divisor,w
 11623  0E1C  02A4               	subwf	___lwdiv@dividend,f
 11624  0E1D  0823               	movf	___lwdiv@divisor+1,w
 11625  0E1E  3BA5               	subwfb	___lwdiv@dividend+1,f
 11626  0E1F  1428               	bsf	___lwdiv@quotient,0
 11627  0E20                     l4909:	
 11628  0E20  3001               	movlw	1
 11629  0E21                     u3655:	
 11630  0E21  36A3               	lsrf	___lwdiv@divisor+1,f
 11631  0E22  0CA2               	rrf	___lwdiv@divisor,f
 11632  0E23  0B89               	decfsz	9,f
 11633  0E24  2E21               	goto	u3655
 11634  0E25  3001               	movlw	1
 11635  0E26  02A7               	subwf	___lwdiv@counter,f
 11636  0E27  1D03               	btfss	3,2
 11637  0E28  2E0E               	goto	l4903
 11638  0E29                     l4913:	
 11639  0E29  0829               	movf	___lwdiv@quotient+1,w
 11640  0E2A  00A3               	movwf	?___lwdiv+1
 11641  0E2B  0828               	movf	___lwdiv@quotient,w
 11642  0E2C  00A2               	movwf	?___lwdiv
 11643  0E2D  0008               	return
 11644  0E2E                     __end_of___lwdiv:	
 11645                           
 11646                           	psect	text70
 11647  0EE0                     __ptext70:	
 11648 ;; *************** function _FLASH_WriteWord *****************
 11649 ;; Defined at:
 11650 ;;		line 74 in file "mcc_generated_files/memory.c"
 11651 ;; Parameters:    Size  Location     Type
 11652 ;;  flashAddr       2   15[BANK0 ] unsigned int 
 11653 ;;  ramBuf          1   17[BANK0 ] PTR unsigned int 
 11654 ;;		 -> zerobuf(64), 
 11655 ;;  word            2   18[BANK0 ] unsigned int 
 11656 ;; Auto vars:     Size  Location     Type
 11657 ;;  blockStartAd    2   22[BANK0 ] unsigned int 
 11658 ;;  i               1   24[BANK0 ] unsigned char 
 11659 ;;  offset          1   21[BANK0 ] unsigned char 
 11660 ;; Return value:  Size  Location     Type
 11661 ;;                  1    wreg      void 
 11662 ;; Registers used:
 11663 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11664 ;; Tracked objects:
 11665 ;;		On entry : 0/0
 11666 ;;		On exit  : 0/0
 11667 ;;		Unchanged: 0/0
 11668 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11669 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11670 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11671 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11672 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11673 ;;Total ram usage:       10 bytes
 11674 ;; Hardware stack levels used:    1
 11675 ;; Hardware stack levels required when called:    8
 11676 ;; This function calls:
 11677 ;;		_FLASH_ReadWord
 11678 ;;		_FLASH_WriteBlock
 11679 ;; This function is called by:
 11680 ;;		_endGame
 11681 ;;		_main
 11682 ;; This function uses a non-reentrant model
 11683 ;;
 11684                           
 11685                           
 11686                           ;psect for function _FLASH_WriteWord
 11687  0EE0                     _FLASH_WriteWord:	
 11688                           
 11689                           ;memory.c: 76: uint16_t blockStartAddr = (uint16_t)(flashAddr & ((0x2000-1) ^ (32-1)));
 11690                           
 11691                           ;incstack = 0
 11692                           ; Regs used in _FLASH_WriteWord: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11693  0EE0  30E0               	movlw	224
 11694  0EE1  0020               	movlb	0	; select bank0
 11695  0EE2  052F               	andwf	FLASH_WriteWord@flashAddr,w
 11696  0EE3  00B6               	movwf	FLASH_WriteWord@blockStartAddr
 11697  0EE4  301F               	movlw	31
 11698  0EE5  0530               	andwf	FLASH_WriteWord@flashAddr+1,w
 11699  0EE6  00B7               	movwf	FLASH_WriteWord@blockStartAddr+1
 11700                           
 11701                           ;memory.c: 77: uint8_t offset = (uint8_t)(flashAddr & (32-1));
 11702  0EE7  082F               	movf	FLASH_WriteWord@flashAddr,w
 11703  0EE8  391F               	andlw	31
 11704  0EE9  00B4               	movwf	??_FLASH_WriteWord
 11705  0EEA  0834               	movf	??_FLASH_WriteWord,w
 11706  0EEB  00B5               	movwf	FLASH_WriteWord@offset
 11707                           
 11708                           ;memory.c: 78: uint8_t i;
 11709                           ;memory.c: 81: for (i=0; i<32; i++)
 11710  0EEC  01B8               	clrf	FLASH_WriteWord@i
 11711  0EED  3020               	movlw	32
 11712  0EEE  0238               	subwf	FLASH_WriteWord@i,w
 11713  0EEF  1803               	btfsc	3,0
 11714  0EF0  2F0F               	goto	l3769
 11715  0EF1                     l3763:	
 11716                           
 11717                           ;memory.c: 82: {
 11718                           ;memory.c: 83: ramBuf[i] = FLASH_ReadWord((blockStartAddr+i));
 11719  0EF1  0838               	movf	FLASH_WriteWord@i,w
 11720  0EF2  0736               	addwf	FLASH_WriteWord@blockStartAddr,w
 11721  0EF3  00A2               	movwf	FLASH_ReadWord@flashAddr
 11722  0EF4  0837               	movf	FLASH_WriteWord@blockStartAddr+1,w
 11723  0EF5  1803               	skipnc
 11724  0EF6  0A37               	incf	FLASH_WriteWord@blockStartAddr+1,w
 11725  0EF7  00A3               	movwf	FLASH_ReadWord@flashAddr+1
 11726  0EF8  318B  231C  318E   	fcall	_FLASH_ReadWord
 11727  0EFB  0020               	movlb	0	; select bank0
 11728  0EFC  3538               	lslf	FLASH_WriteWord@i,w
 11729  0EFD  0731               	addwf	FLASH_WriteWord@ramBuf,w
 11730  0EFE  00B4               	movwf	??_FLASH_WriteWord
 11731  0EFF  0834               	movf	??_FLASH_WriteWord,w
 11732  0F00  0086               	movwf	6
 11733  0F01  3003               	movlw	3	; select bank6/7
 11734  0F02  0087               	movwf	7
 11735  0F03  0822               	movf	?_FLASH_ReadWord,w
 11736  0F04  3FC0               	movwi [0]fsr1
 11737  0F05  0823               	movf	?_FLASH_ReadWord+1,w
 11738  0F06  3FC1               	movwi [1]fsr1
 11739  0F07  3001               	movlw	1
 11740  0F08  00B4               	movwf	??_FLASH_WriteWord
 11741  0F09  0834               	movf	??_FLASH_WriteWord,w
 11742  0F0A  07B8               	addwf	FLASH_WriteWord@i,f
 11743  0F0B  3020               	movlw	32
 11744  0F0C  0238               	subwf	FLASH_WriteWord@i,w
 11745  0F0D  1C03               	skipc
 11746  0F0E  2EF1               	goto	l3763
 11747  0F0F                     l3769:	
 11748                           
 11749                           ;memory.c: 84: }
 11750                           ;memory.c: 87: ramBuf[offset] = word;
 11751  0F0F  3535               	lslf	FLASH_WriteWord@offset,w
 11752  0F10  0731               	addwf	FLASH_WriteWord@ramBuf,w
 11753  0F11  00B4               	movwf	??_FLASH_WriteWord
 11754  0F12  0834               	movf	??_FLASH_WriteWord,w
 11755  0F13  0086               	movwf	6
 11756  0F14  3003               	movlw	3	; select bank6/7
 11757  0F15  0087               	movwf	7
 11758  0F16  0832               	movf	FLASH_WriteWord@word,w
 11759  0F17  3FC0               	movwi [0]fsr1
 11760  0F18  0833               	movf	FLASH_WriteWord@word+1,w
 11761  0F19  3FC1               	movwi [1]fsr1
 11762                           
 11763                           ;memory.c: 90: FLASH_WriteBlock(blockStartAddr, ramBuf);
 11764  0F1A  0837               	movf	FLASH_WriteWord@blockStartAddr+1,w
 11765  0F1B  00A6               	movwf	FLASH_WriteBlock@writeAddr+1
 11766  0F1C  0836               	movf	FLASH_WriteWord@blockStartAddr,w
 11767  0F1D  00A5               	movwf	FLASH_WriteBlock@writeAddr
 11768  0F1E  0831               	movf	FLASH_WriteWord@ramBuf,w
 11769  0F1F  00B4               	movwf	??_FLASH_WriteWord
 11770  0F20  0834               	movf	??_FLASH_WriteWord,w
 11771  0F21  00A7               	movwf	FLASH_WriteBlock@flashWordArray
 11772  0F22  3185  253B         	fcall	_FLASH_WriteBlock
 11773  0F24  0008               	return
 11774  0F25                     __end_of_FLASH_WriteWord:	
 11775                           
 11776                           	psect	text71
 11777  053B                     __ptext71:	
 11778 ;; *************** function _FLASH_WriteBlock *****************
 11779 ;; Defined at:
 11780 ;;		line 93 in file "mcc_generated_files/memory.c"
 11781 ;; Parameters:    Size  Location     Type
 11782 ;;  writeAddr       2    5[BANK0 ] unsigned int 
 11783 ;;  flashWordArr    1    7[BANK0 ] PTR unsigned int 
 11784 ;;		 -> zerobuf(64), 
 11785 ;; Auto vars:     Size  Location     Type
 11786 ;;  blockStartAd    2   11[BANK0 ] unsigned int 
 11787 ;;  i               1   14[BANK0 ] unsigned char 
 11788 ;;  GIEBitValue     1   13[BANK0 ] unsigned char 
 11789 ;; Return value:  Size  Location     Type
 11790 ;;                  1    wreg      char 
 11791 ;; Registers used:
 11792 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11793 ;; Tracked objects:
 11794 ;;		On entry : 0/0
 11795 ;;		On exit  : 0/0
 11796 ;;		Unchanged: 0/0
 11797 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11798 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11799 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11800 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11801 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11802 ;;Total ram usage:       10 bytes
 11803 ;; Hardware stack levels used:    1
 11804 ;; Hardware stack levels required when called:    7
 11805 ;; This function calls:
 11806 ;;		_FLASH_EraseBlock
 11807 ;; This function is called by:
 11808 ;;		_FLASH_WriteWord
 11809 ;; This function uses a non-reentrant model
 11810 ;;
 11811                           
 11812                           
 11813                           ;psect for function _FLASH_WriteBlock
 11814  053B                     _FLASH_WriteBlock:	
 11815                           
 11816                           ;memory.c: 95: uint16_t blockStartAddr = (uint16_t )(writeAddr & ((0x2000-1) ^ (32-1)));
 11817                           
 11818                           ;incstack = 0
 11819                           ; Regs used in _FLASH_WriteBlock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11820  053B  30E0               	movlw	224
 11821  053C  0020               	movlb	0	; select bank0
 11822  053D  0525               	andwf	FLASH_WriteBlock@writeAddr,w
 11823  053E  00AB               	movwf	FLASH_WriteBlock@blockStartAddr
 11824  053F  301F               	movlw	31
 11825  0540  0526               	andwf	FLASH_WriteBlock@writeAddr+1,w
 11826  0541  00AC               	movwf	FLASH_WriteBlock@blockStartAddr+1
 11827                           
 11828                           ;memory.c: 96: uint8_t GIEBitValue = INTCONbits.GIE;
 11829  0542  3000               	movlw	0
 11830  0543  1B8B               	btfsc	11,7	;volatile
 11831  0544  3001               	movlw	1
 11832  0545  00AD               	movwf	FLASH_WriteBlock@GIEBitValue
 11833                           
 11834                           ;memory.c: 97: uint8_t i;
 11835                           ;memory.c: 100: if( writeAddr != blockStartAddr )
 11836  0546  082C               	movf	FLASH_WriteBlock@blockStartAddr+1,w
 11837  0547  0626               	xorwf	FLASH_WriteBlock@writeAddr+1,w
 11838  0548  1D03               	skipz
 11839  0549  2D4C               	goto	u2045
 11840  054A  082B               	movf	FLASH_WriteBlock@blockStartAddr,w
 11841  054B  0625               	xorwf	FLASH_WriteBlock@writeAddr,w
 11842  054C                     u2045:	
 11843  054C  1D03               	btfss	3,2
 11844  054D  0008               	return
 11845                           
 11846                           ;memory.c: 103: }
 11847                           ;memory.c: 105: INTCONbits.GIE = 0;
 11848                           
 11849                           ;memory.c: 101: {
 11850                           ;memory.c: 102: return -1;
 11851                           ;	Return value of _FLASH_WriteBlock is never used
 11852  054E  138B               	bcf	11,7	;volatile
 11853                           
 11854                           ;memory.c: 108: FLASH_EraseBlock(writeAddr);
 11855  054F  0826               	movf	FLASH_WriteBlock@writeAddr+1,w
 11856  0550  00A3               	movwf	FLASH_EraseBlock@startAddr+1
 11857  0551  0825               	movf	FLASH_WriteBlock@writeAddr,w
 11858  0552  00A2               	movwf	FLASH_EraseBlock@startAddr
 11859  0553  318B  233C  3185   	fcall	_FLASH_EraseBlock
 11860                           
 11861                           ;memory.c: 111: PMCON1bits.CFGS = 0;
 11862  0556  0023               	movlb	3	; select bank3
 11863  0557  1315               	bcf	21,6	;volatile
 11864                           
 11865                           ;memory.c: 112: PMCON1bits.WREN = 1;
 11866  0558  1515               	bsf	21,2	;volatile
 11867                           
 11868                           ;memory.c: 113: PMCON1bits.LWLO = 1;
 11869  0559  1695               	bsf	21,5	;volatile
 11870                           
 11871                           ;memory.c: 115: for (i=0; i<32; i++)
 11872  055A  0020               	movlb	0	; select bank0
 11873  055B  01AE               	clrf	FLASH_WriteBlock@i
 11874  055C  3020               	movlw	32
 11875  055D  022E               	subwf	FLASH_WriteBlock@i,w
 11876  055E  1803               	btfsc	3,0
 11877  055F  2D9D               	goto	l625
 11878  0560                     l3431:	
 11879                           
 11880                           ;memory.c: 116: {
 11881                           ;memory.c: 118: PMADRL = (writeAddr & 0xFF);
 11882  0560  0825               	movf	FLASH_WriteBlock@writeAddr,w
 11883  0561  0023               	movlb	3	; select bank3
 11884  0562  0091               	movwf	17	;volatile
 11885                           
 11886                           ;memory.c: 120: PMADRH = ((writeAddr & 0xFF00) >> 8);
 11887  0563  0020               	movlb	0	; select bank0
 11888  0564  0826               	movf	FLASH_WriteBlock@writeAddr+1,w
 11889  0565  0023               	movlb	3	; select bank3
 11890  0566  0092               	movwf	18	;volatile
 11891                           
 11892                           ;memory.c: 123: PMDATL = flashWordArray[i];
 11893  0567  0020               	movlb	0	; select bank0
 11894  0568  352E               	lslf	FLASH_WriteBlock@i,w
 11895  0569  0727               	addwf	FLASH_WriteBlock@flashWordArray,w
 11896  056A  00A8               	movwf	??_FLASH_WriteBlock
 11897  056B  0828               	movf	??_FLASH_WriteBlock,w
 11898  056C  0086               	movwf	6
 11899  056D  3003               	movlw	3	; select bank6/7
 11900  056E  0087               	movwf	7
 11901  056F  0801               	movf	1,w
 11902  0570  0023               	movlb	3	; select bank3
 11903  0571  0093               	movwf	19	;volatile
 11904                           
 11905                           ;memory.c: 124: PMDATH = ((flashWordArray[i] & 0xFF00) >> 8);
 11906  0572  0020               	movlb	0	; select bank0
 11907  0573  352E               	lslf	FLASH_WriteBlock@i,w
 11908  0574  0727               	addwf	FLASH_WriteBlock@flashWordArray,w
 11909  0575  00A8               	movwf	??_FLASH_WriteBlock
 11910  0576  0828               	movf	??_FLASH_WriteBlock,w
 11911  0577  0086               	movwf	6
 11912  0578  3003               	movlw	3	; select bank6/7
 11913  0579  0087               	movwf	7
 11914  057A  3F40               	moviw [0]fsr1
 11915  057B  00A9               	movwf	??_FLASH_WriteBlock+1
 11916  057C  3F41               	moviw [1]fsr1
 11917  057D  00AA               	movwf	??_FLASH_WriteBlock+2
 11918  057E  082A               	movf	??_FLASH_WriteBlock+2,w
 11919  057F  0023               	movlb	3	; select bank3
 11920  0580  0094               	movwf	20	;volatile
 11921                           
 11922                           ;memory.c: 126: if(i == (32-1))
 11923  0581  301F               	movlw	31
 11924  0582  0020               	movlb	0	; select bank0
 11925  0583  062E               	xorwf	FLASH_WriteBlock@i,w
 11926  0584  1D03               	btfss	3,2
 11927  0585  2D88               	goto	l3443
 11928                           
 11929                           ;memory.c: 127: {
 11930                           ;memory.c: 129: PMCON1bits.LWLO = 0;
 11931  0586  0023               	movlb	3	; select bank3
 11932  0587  1295               	bcf	21,5	;volatile
 11933  0588                     l3443:	
 11934                           
 11935                           ;memory.c: 130: }
 11936                           ;memory.c: 132: PMCON2 = 0x55;
 11937  0588  3055               	movlw	85
 11938  0589  0023               	movlb	3	; select bank3
 11939  058A  0096               	movwf	22	;volsfr
 11940                           
 11941                           ;memory.c: 133: PMCON2 = 0xAA;
 11942  058B  30AA               	movlw	170
 11943  058C  0096               	movwf	22	;volsfr
 11944                           
 11945                           ;memory.c: 134: PMCON1bits.WR = 1;
 11946  058D  1495               	bsf	21,1	;volatile
 11947                           
 11948                           ;memory.c: 135: __nop();
 11949  058E  0000               	nop
 11950                           
 11951                           ;memory.c: 136: __nop();
 11952  058F  0000               	nop
 11953                           
 11954                           ;memory.c: 138: writeAddr++;
 11955  0590  3001               	movlw	1
 11956  0591  0020               	movlb	0	; select bank0
 11957  0592  07A5               	addwf	FLASH_WriteBlock@writeAddr,f
 11958  0593  3000               	movlw	0
 11959  0594  3DA6               	addwfc	FLASH_WriteBlock@writeAddr+1,f
 11960  0595  3001               	movlw	1
 11961  0596  00A8               	movwf	??_FLASH_WriteBlock
 11962  0597  0828               	movf	??_FLASH_WriteBlock,w
 11963  0598  07AE               	addwf	FLASH_WriteBlock@i,f
 11964  0599  3020               	movlw	32
 11965  059A  022E               	subwf	FLASH_WriteBlock@i,w
 11966  059B  1C03               	skipc
 11967  059C  2D60               	goto	l3431
 11968  059D                     l625:	
 11969                           
 11970                           ;memory.c: 139: }
 11971                           ;memory.c: 141: PMCON1bits.WREN = 0;
 11972  059D  0023               	movlb	3	; select bank3
 11973  059E  1115               	bcf	21,2	;volatile
 11974                           
 11975                           ;memory.c: 142: INTCONbits.GIE = GIEBitValue;
 11976  059F  0020               	movlb	0	; select bank0
 11977  05A0  0C2D               	rrf	FLASH_WriteBlock@GIEBitValue,w
 11978  05A1  1C03               	skipc
 11979  05A2  138B               	bcf	11,7	;volatile
 11980  05A3  1803               	skipnc
 11981  05A4  178B               	bsf	11,7	;volatile
 11982  05A5  0008               	return
 11983  05A6                     __end_of_FLASH_WriteBlock:	
 11984                           ;memory.c: 144: return 0;
 11985                           ;	Return value of _FLASH_WriteBlock is never used
 11986                           
 11987                           
 11988                           	psect	text72
 11989  0B3C                     __ptext72:	
 11990 ;; *************** function _FLASH_EraseBlock *****************
 11991 ;; Defined at:
 11992 ;;		line 147 in file "mcc_generated_files/memory.c"
 11993 ;; Parameters:    Size  Location     Type
 11994 ;;  startAddr       2    2[BANK0 ] unsigned int 
 11995 ;; Auto vars:     Size  Location     Type
 11996 ;;  GIEBitValue     1    4[BANK0 ] unsigned char 
 11997 ;; Return value:  Size  Location     Type
 11998 ;;                  1    wreg      void 
 11999 ;; Registers used:
 12000 ;;		wreg, status,2, status,0
 12001 ;; Tracked objects:
 12002 ;;		On entry : 0/0
 12003 ;;		On exit  : 0/0
 12004 ;;		Unchanged: 0/0
 12005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12006 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12007 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12008 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12009 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12010 ;;Total ram usage:        3 bytes
 12011 ;; Hardware stack levels used:    1
 12012 ;; Hardware stack levels required when called:    6
 12013 ;; This function calls:
 12014 ;;		Nothing
 12015 ;; This function is called by:
 12016 ;;		_FLASH_WriteBlock
 12017 ;; This function uses a non-reentrant model
 12018 ;;
 12019                           
 12020                           
 12021                           ;psect for function _FLASH_EraseBlock
 12022  0B3C                     _FLASH_EraseBlock:	
 12023                           
 12024                           ;memory.c: 149: uint8_t GIEBitValue = INTCONbits.GIE;
 12025                           
 12026                           ;incstack = 0
 12027                           ; Regs used in _FLASH_EraseBlock: [wreg+status,2+status,0]
 12028  0B3C  3000               	movlw	0
 12029  0B3D  1B8B               	btfsc	11,7	;volatile
 12030  0B3E  3001               	movlw	1
 12031  0B3F  0020               	movlb	0	; select bank0
 12032  0B40  00A4               	movwf	FLASH_EraseBlock@GIEBitValue
 12033                           
 12034                           ;memory.c: 152: INTCONbits.GIE = 0;
 12035  0B41  138B               	bcf	11,7	;volatile
 12036                           
 12037                           ;memory.c: 154: PMADRL = (startAddr & 0xFF);
 12038  0B42  0822               	movf	FLASH_EraseBlock@startAddr,w
 12039  0B43  0023               	movlb	3	; select bank3
 12040  0B44  0091               	movwf	17	;volatile
 12041                           
 12042                           ;memory.c: 156: PMADRH = ((startAddr & 0xFF00) >> 8);
 12043  0B45  0020               	movlb	0	; select bank0
 12044  0B46  0823               	movf	FLASH_EraseBlock@startAddr+1,w
 12045  0B47  0023               	movlb	3	; select bank3
 12046  0B48  0092               	movwf	18	;volatile
 12047                           
 12048                           ;memory.c: 159: PMCON1bits.CFGS = 0;
 12049  0B49  1315               	bcf	21,6	;volatile
 12050                           
 12051                           ;memory.c: 160: PMCON1bits.FREE = 1;
 12052  0B4A  1615               	bsf	21,4	;volatile
 12053                           
 12054                           ;memory.c: 161: PMCON1bits.WREN = 1;
 12055  0B4B  1515               	bsf	21,2	;volatile
 12056                           
 12057                           ;memory.c: 164: PMCON2 = 0x55;
 12058  0B4C  3055               	movlw	85
 12059  0B4D  0096               	movwf	22	;volsfr
 12060                           
 12061                           ;memory.c: 165: PMCON2 = 0xAA;
 12062  0B4E  30AA               	movlw	170
 12063  0B4F  0096               	movwf	22	;volsfr
 12064                           
 12065                           ;memory.c: 166: PMCON1bits.WR = 1;
 12066  0B50  1495               	bsf	21,1	;volatile
 12067                           
 12068                           ;memory.c: 167: __nop();
 12069  0B51  0000               	nop
 12070                           
 12071                           ;memory.c: 168: __nop();
 12072  0B52  0000               	nop
 12073                           
 12074                           ;memory.c: 170: PMCON1bits.WREN = 0;
 12075  0B53  0023               	movlb	3	; select bank3
 12076  0B54  1115               	bcf	21,2	;volatile
 12077                           
 12078                           ;memory.c: 171: INTCONbits.GIE = GIEBitValue;
 12079  0B55  0020               	movlb	0	; select bank0
 12080  0B56  0C24               	rrf	FLASH_EraseBlock@GIEBitValue,w
 12081  0B57  1C03               	skipc
 12082  0B58  138B               	bcf	11,7	;volatile
 12083  0B59  1803               	skipnc
 12084  0B5A  178B               	bsf	11,7	;volatile
 12085  0B5B  0008               	return
 12086  0B5C                     __end_of_FLASH_EraseBlock:	
 12087                           
 12088                           	psect	text73
 12089  0B1C                     __ptext73:	
 12090 ;; *************** function _FLASH_ReadWord *****************
 12091 ;; Defined at:
 12092 ;;		line 57 in file "mcc_generated_files/memory.c"
 12093 ;; Parameters:    Size  Location     Type
 12094 ;;  flashAddr       2    2[BANK0 ] unsigned int 
 12095 ;; Auto vars:     Size  Location     Type
 12096 ;;  GIEBitValue     1    4[BANK0 ] unsigned char 
 12097 ;; Return value:  Size  Location     Type
 12098 ;;                  2    2[BANK0 ] unsigned int 
 12099 ;; Registers used:
 12100 ;;		wreg, status,2, status,0
 12101 ;; Tracked objects:
 12102 ;;		On entry : 0/0
 12103 ;;		On exit  : 0/0
 12104 ;;		Unchanged: 0/0
 12105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12106 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12107 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12108 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12109 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12110 ;;Total ram usage:        3 bytes
 12111 ;; Hardware stack levels used:    1
 12112 ;; Hardware stack levels required when called:    6
 12113 ;; This function calls:
 12114 ;;		Nothing
 12115 ;; This function is called by:
 12116 ;;		_FLASH_WriteWord
 12117 ;;		_main
 12118 ;; This function uses a non-reentrant model
 12119 ;;
 12120                           
 12121                           
 12122                           ;psect for function _FLASH_ReadWord
 12123  0B1C                     _FLASH_ReadWord:	
 12124                           
 12125                           ;memory.c: 59: uint8_t GIEBitValue = INTCONbits.GIE;
 12126                           
 12127                           ;incstack = 0
 12128                           ; Regs used in _FLASH_ReadWord: [wreg+status,2+status,0]
 12129  0B1C  3000               	movlw	0
 12130  0B1D  1B8B               	btfsc	11,7	;volatile
 12131  0B1E  3001               	movlw	1
 12132  0B1F  0020               	movlb	0	; select bank0
 12133  0B20  00A4               	movwf	FLASH_ReadWord@GIEBitValue
 12134                           
 12135                           ;memory.c: 61: INTCONbits.GIE = 0;
 12136  0B21  138B               	bcf	11,7	;volatile
 12137                           
 12138                           ;memory.c: 62: PMADRL = (flashAddr & 0x00FF);
 12139  0B22  0822               	movf	FLASH_ReadWord@flashAddr,w
 12140  0B23  0023               	movlb	3	; select bank3
 12141  0B24  0091               	movwf	17	;volatile
 12142                           
 12143                           ;memory.c: 63: PMADRH = ((flashAddr & 0xFF00) >> 8);
 12144  0B25  0020               	movlb	0	; select bank0
 12145  0B26  0823               	movf	FLASH_ReadWord@flashAddr+1,w
 12146  0B27  0023               	movlb	3	; select bank3
 12147  0B28  0092               	movwf	18	;volatile
 12148                           
 12149                           ;memory.c: 65: PMCON1bits.CFGS = 0;
 12150  0B29  1315               	bcf	21,6	;volatile
 12151                           
 12152                           ;memory.c: 66: PMCON1bits.RD = 1;
 12153  0B2A  1415               	bsf	21,0	;volatile
 12154                           
 12155                           ;memory.c: 67: __nop();
 12156  0B2B  0000               	nop
 12157                           
 12158                           ;memory.c: 68: __nop();
 12159  0B2C  0000               	nop
 12160                           
 12161                           ;memory.c: 69: INTCONbits.GIE = GIEBitValue;
 12162  0B2D  0020               	movlb	0	; select bank0
 12163  0B2E  0C24               	rrf	FLASH_ReadWord@GIEBitValue,w
 12164  0B2F  1C03               	skipc
 12165  0B30  138B               	bcf	11,7	;volatile
 12166  0B31  1803               	skipnc
 12167  0B32  178B               	bsf	11,7	;volatile
 12168                           
 12169                           ;memory.c: 71: return ((uint16_t)((PMDATH << 8) | PMDATL));
 12170  0B33  0023               	movlb	3	; select bank3
 12171  0B34  0814               	movf	20,w	;volatile
 12172  0B35  0020               	movlb	0	; select bank0
 12173  0B36  00A3               	movwf	?_FLASH_ReadWord+1
 12174  0B37  0023               	movlb	3	; select bank3
 12175  0B38  0813               	movf	19,w	;volatile
 12176  0B39  0020               	movlb	0	; select bank0
 12177  0B3A  00A2               	movwf	?_FLASH_ReadWord
 12178  0B3B  0008               	return
 12179  0B3C                     __end_of_FLASH_ReadWord:	
 12180                           
 12181                           	psect	text74
 12182  0230                     __ptext74:	
 12183 ;; *************** function _drawPixel *****************
 12184 ;; Defined at:
 12185 ;;		line 310 in file "main.c"
 12186 ;; Parameters:    Size  Location     Type
 12187 ;;  x               1    wreg     unsigned char 
 12188 ;;  y               1    2[BANK0 ] unsigned char 
 12189 ;;  color           1    3[BANK0 ] unsigned char 
 12190 ;; Auto vars:     Size  Location     Type
 12191 ;;  x               1   10[BANK0 ] unsigned char 
 12192 ;; Return value:  Size  Location     Type
 12193 ;;                  1    wreg      void 
 12194 ;; Registers used:
 12195 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12196 ;; Tracked objects:
 12197 ;;		On entry : 0/0
 12198 ;;		On exit  : 0/0
 12199 ;;		Unchanged: 0/0
 12200 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12201 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12202 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12203 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12204 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12205 ;;Total ram usage:        9 bytes
 12206 ;; Hardware stack levels used:    1
 12207 ;; Hardware stack levels required when called:    6
 12208 ;; This function calls:
 12209 ;;		Nothing
 12210 ;; This function is called by:
 12211 ;;		_main
 12212 ;; This function uses a non-reentrant model
 12213 ;;
 12214                           
 12215                           
 12216                           ;psect for function _drawPixel
 12217  0230                     _drawPixel:	
 12218                           
 12219                           ;incstack = 0
 12220                           ; Regs used in _drawPixel: [wreg+fsr1l+fsr1h+status,2+status,0]
 12221                           ;drawPixel@x stored from wreg
 12222  0230  0020               	movlb	0	; select bank0
 12223  0231  00AA               	movwf	drawPixel@x
 12224                           
 12225                           ;main.c: 311: if (color == 1) {
 12226  0232  0323               	decf	drawPixel@color,w
 12227  0233  1D03               	btfss	3,2
 12228  0234  2A62               	goto	l4013
 12229                           
 12230                           ;main.c: 312: pixelbuffer[y] |= 1 << x;
 12231  0235  3001               	movlw	1
 12232  0236  00A4               	movwf	??_drawPixel
 12233  0237  3000               	movlw	0
 12234  0238  00A5               	movwf	??_drawPixel+1
 12235  0239  0A2A               	incf	drawPixel@x,w
 12236  023A  2A3D               	goto	u2534
 12237  023B                     u2535:	
 12238  023B  35A4               	lslf	??_drawPixel,f
 12239  023C  0DA5               	rlf	??_drawPixel+1,f
 12240  023D                     u2534:	
 12241  023D  0B89               	decfsz	9,f
 12242  023E  2A3B               	goto	u2535
 12243  023F  3522               	lslf	drawPixel@y,w
 12244  0240  3E20               	addlw	(low (_pixelbuffer| (0+256)))& (0+255)
 12245  0241  0086               	movwf	6
 12246  0242  3001               	movlw	1	; select bank2/3
 12247  0243  0087               	movwf	7
 12248  0244  0824               	movf	??_drawPixel,w
 12249  0245  0481               	iorwf	1,f
 12250  0246  3141               	addfsr 1,1
 12251  0247  0825               	movf	??_drawPixel+1,w
 12252  0248  0481               	iorwf	1,f
 12253                           
 12254                           ;main.c: 313: pixelbuffer[y] &= ~(1 << (x + 8));
 12255  0249  3001               	movlw	1
 12256  024A  00A4               	movwf	??_drawPixel
 12257  024B  3000               	movlw	0
 12258  024C  00A5               	movwf	??_drawPixel+1
 12259  024D  082A               	movf	drawPixel@x,w
 12260  024E  3E08               	addlw	8
 12261  024F  0A89               	incf	9,f
 12262  0250  2A53               	goto	u2544
 12263  0251                     u2545:	
 12264  0251  35A4               	lslf	??_drawPixel,f
 12265  0252  0DA5               	rlf	??_drawPixel+1,f
 12266  0253                     u2544:	
 12267  0253  0B89               	decfsz	9,f
 12268  0254  2A51               	goto	u2545
 12269  0255  09A4               	comf	??_drawPixel,f
 12270  0256  09A5               	comf	??_drawPixel+1,f
 12271  0257  3522               	lslf	drawPixel@y,w
 12272  0258  3E20               	addlw	(low (_pixelbuffer| (0+256)))& (0+255)
 12273  0259  0086               	movwf	6
 12274  025A  3001               	movlw	1	; select bank2/3
 12275  025B  0087               	movwf	7
 12276  025C  0824               	movf	??_drawPixel,w
 12277  025D  0581               	andwf	1,f
 12278  025E  3141               	addfsr 1,1
 12279  025F  0825               	movf	??_drawPixel+1,w
 12280  0260  0581               	andwf	1,f
 12281                           
 12282                           ;main.c: 314: } else if (color == 2) {
 12283  0261  0008               	return
 12284  0262                     l4013:	
 12285  0262  3002               	movlw	2
 12286  0263  0623               	xorwf	drawPixel@color,w
 12287  0264  1D03               	btfss	3,2
 12288  0265  2A93               	goto	l4017
 12289                           
 12290                           ;main.c: 315: pixelbuffer[y] |= 1 << (x + 8);
 12291  0266  3001               	movlw	1
 12292  0267  00A4               	movwf	??_drawPixel
 12293  0268  3000               	movlw	0
 12294  0269  00A5               	movwf	??_drawPixel+1
 12295  026A  082A               	movf	drawPixel@x,w
 12296  026B  3E08               	addlw	8
 12297  026C  0A89               	incf	9,f
 12298  026D  2A70               	goto	u2564
 12299  026E                     u2565:	
 12300  026E  35A4               	lslf	??_drawPixel,f
 12301  026F  0DA5               	rlf	??_drawPixel+1,f
 12302  0270                     u2564:	
 12303  0270  0B89               	decfsz	9,f
 12304  0271  2A6E               	goto	u2565
 12305  0272  3522               	lslf	drawPixel@y,w
 12306  0273  3E20               	addlw	(low (_pixelbuffer| (0+256)))& (0+255)
 12307  0274  0086               	movwf	6
 12308  0275  3001               	movlw	1	; select bank2/3
 12309  0276  0087               	movwf	7
 12310  0277  0824               	movf	??_drawPixel,w
 12311  0278  0481               	iorwf	1,f
 12312  0279  3141               	addfsr 1,1
 12313  027A  0825               	movf	??_drawPixel+1,w
 12314  027B  0481               	iorwf	1,f
 12315                           
 12316                           ;main.c: 316: pixelbuffer[y] &= ~(1 << x);
 12317  027C  3001               	movlw	1
 12318  027D  00A4               	movwf	??_drawPixel
 12319  027E  3000               	movlw	0
 12320  027F  00A5               	movwf	??_drawPixel+1
 12321  0280  0A2A               	incf	drawPixel@x,w
 12322  0281  2A84               	goto	u2574
 12323  0282                     u2575:	
 12324  0282  35A4               	lslf	??_drawPixel,f
 12325  0283  0DA5               	rlf	??_drawPixel+1,f
 12326  0284                     u2574:	
 12327  0284  0B89               	decfsz	9,f
 12328  0285  2A82               	goto	u2575
 12329  0286  09A4               	comf	??_drawPixel,f
 12330  0287  09A5               	comf	??_drawPixel+1,f
 12331  0288  3522               	lslf	drawPixel@y,w
 12332  0289  3E20               	addlw	(low (_pixelbuffer| (0+256)))& (0+255)
 12333  028A  0086               	movwf	6
 12334  028B  3001               	movlw	1	; select bank2/3
 12335  028C  0087               	movwf	7
 12336  028D  0824               	movf	??_drawPixel,w
 12337  028E  0581               	andwf	1,f
 12338  028F  3141               	addfsr 1,1
 12339  0290  0825               	movf	??_drawPixel+1,w
 12340  0291  0581               	andwf	1,f
 12341                           
 12342                           ;main.c: 317: } else if (color == 3) {
 12343  0292  0008               	return
 12344  0293                     l4017:	
 12345  0293  3003               	movlw	3
 12346  0294  0623               	xorwf	drawPixel@color,w
 12347  0295  1D03               	btfss	3,2
 12348  0296  2ABE               	goto	l4021
 12349                           
 12350                           ;main.c: 318: pixelbuffer[y] |= (1 << (x + 8)) | (1 << x);
 12351  0297  3001               	movlw	1
 12352  0298  00A4               	movwf	??_drawPixel
 12353  0299  3000               	movlw	0
 12354  029A  00A5               	movwf	??_drawPixel+1
 12355  029B  0A2A               	incf	drawPixel@x,w
 12356  029C  2A9F               	goto	u2594
 12357  029D                     u2595:	
 12358  029D  35A4               	lslf	??_drawPixel,f
 12359  029E  0DA5               	rlf	??_drawPixel+1,f
 12360  029F                     u2594:	
 12361  029F  0B89               	decfsz	9,f
 12362  02A0  2A9D               	goto	u2595
 12363  02A1  3001               	movlw	1
 12364  02A2  00A6               	movwf	??_drawPixel+2
 12365  02A3  3000               	movlw	0
 12366  02A4  00A7               	movwf	??_drawPixel+3
 12367  02A5  082A               	movf	drawPixel@x,w
 12368  02A6  3E08               	addlw	8
 12369  02A7  0A89               	incf	9,f
 12370  02A8  2AAB               	goto	u2604
 12371  02A9                     u2605:	
 12372  02A9  35A6               	lslf	??_drawPixel+2,f
 12373  02AA  0DA7               	rlf	??_drawPixel+3,f
 12374  02AB                     u2604:	
 12375  02AB  0B89               	decfsz	9,f
 12376  02AC  2AA9               	goto	u2605
 12377  02AD  0824               	movf	??_drawPixel,w
 12378  02AE  0426               	iorwf	??_drawPixel+2,w
 12379  02AF  00A8               	movwf	??_drawPixel+4
 12380  02B0  0825               	movf	??_drawPixel+1,w
 12381  02B1  0427               	iorwf	??_drawPixel+3,w
 12382  02B2  00A9               	movwf	??_drawPixel+5
 12383  02B3  3522               	lslf	drawPixel@y,w
 12384  02B4  3E20               	addlw	(low (_pixelbuffer| (0+256)))& (0+255)
 12385  02B5  0086               	movwf	6
 12386  02B6  3001               	movlw	1	; select bank2/3
 12387  02B7  0087               	movwf	7
 12388  02B8  0828               	movf	??_drawPixel+4,w
 12389  02B9  0481               	iorwf	1,f
 12390  02BA  3141               	addfsr 1,1
 12391  02BB  0829               	movf	??_drawPixel+5,w
 12392  02BC  0481               	iorwf	1,f
 12393                           
 12394                           ;main.c: 319: } else if (color == 0) {
 12395  02BD  0008               	return
 12396  02BE                     l4021:	
 12397  02BE  0823               	movf	drawPixel@color,w
 12398  02BF  1D03               	btfss	3,2
 12399  02C0  0008               	return
 12400                           
 12401                           ;main.c: 320: pixelbuffer[y] &= ~(1 << x) & ~(1 << (x + 8));
 12402  02C1  3001               	movlw	1
 12403  02C2  00A4               	movwf	??_drawPixel
 12404  02C3  3000               	movlw	0
 12405  02C4  00A5               	movwf	??_drawPixel+1
 12406  02C5  082A               	movf	drawPixel@x,w
 12407  02C6  3E08               	addlw	8
 12408  02C7  0A89               	incf	9,f
 12409  02C8  2ACB               	goto	u2624
 12410  02C9                     u2625:	
 12411  02C9  35A4               	lslf	??_drawPixel,f
 12412  02CA  0DA5               	rlf	??_drawPixel+1,f
 12413  02CB                     u2624:	
 12414  02CB  0B89               	decfsz	9,f
 12415  02CC  2AC9               	goto	u2625
 12416  02CD  09A4               	comf	??_drawPixel,f
 12417  02CE  09A5               	comf	??_drawPixel+1,f
 12418  02CF  3001               	movlw	1
 12419  02D0  00A6               	movwf	??_drawPixel+2
 12420  02D1  3000               	movlw	0
 12421  02D2  00A7               	movwf	??_drawPixel+3
 12422  02D3  0A2A               	incf	drawPixel@x,w
 12423  02D4  2AD7               	goto	u2634
 12424  02D5                     u2635:	
 12425  02D5  35A6               	lslf	??_drawPixel+2,f
 12426  02D6  0DA7               	rlf	??_drawPixel+3,f
 12427  02D7                     u2634:	
 12428  02D7  0B89               	decfsz	9,f
 12429  02D8  2AD5               	goto	u2635
 12430  02D9  09A6               	comf	??_drawPixel+2,f
 12431  02DA  09A7               	comf	??_drawPixel+3,f
 12432  02DB  0824               	movf	??_drawPixel,w
 12433  02DC  0526               	andwf	??_drawPixel+2,w
 12434  02DD  00A8               	movwf	??_drawPixel+4
 12435  02DE  0825               	movf	??_drawPixel+1,w
 12436  02DF  0527               	andwf	??_drawPixel+3,w
 12437  02E0  00A9               	movwf	??_drawPixel+5
 12438  02E1  3522               	lslf	drawPixel@y,w
 12439  02E2  3E20               	addlw	(low (_pixelbuffer| (0+256)))& (0+255)
 12440  02E3  0086               	movwf	6
 12441  02E4  3001               	movlw	1	; select bank2/3
 12442  02E5  0087               	movwf	7
 12443  02E6  0828               	movf	??_drawPixel+4,w
 12444  02E7  0581               	andwf	1,f
 12445  02E8  3141               	addfsr 1,1
 12446  02E9  0829               	movf	??_drawPixel+5,w
 12447  02EA  0581               	andwf	1,f
 12448  02EB  0008               	return
 12449  02EC                     __end_of_drawPixel:	
 12450                           
 12451                           	psect	text75
 12452  088D                     __ptext75:	
 12453 ;; *************** function _SYSTEM_Initialize *****************
 12454 ;; Defined at:
 12455 ;;		line 77 in file "mcc_generated_files/mcc.c"
 12456 ;; Parameters:    Size  Location     Type
 12457 ;;		None
 12458 ;; Auto vars:     Size  Location     Type
 12459 ;;		None
 12460 ;; Return value:  Size  Location     Type
 12461 ;;                  1    wreg      void 
 12462 ;; Registers used:
 12463 ;;		wreg, status,2, status,0, pclath, cstack
 12464 ;; Tracked objects:
 12465 ;;		On entry : 0/0
 12466 ;;		On exit  : 0/0
 12467 ;;		Unchanged: 0/0
 12468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12469 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12470 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12472 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12473 ;;Total ram usage:        0 bytes
 12474 ;; Hardware stack levels used:    1
 12475 ;; Hardware stack levels required when called:    8
 12476 ;; This function calls:
 12477 ;;		_OSCILLATOR_Initialize
 12478 ;;		_PIN_MANAGER_Initialize
 12479 ;; This function is called by:
 12480 ;;		_main
 12481 ;; This function uses a non-reentrant model
 12482 ;;
 12483                           
 12484                           
 12485                           ;psect for function _SYSTEM_Initialize
 12486  088D                     _SYSTEM_Initialize:	
 12487                           
 12488                           ;mcc.c: 79: PIN_MANAGER_Initialize();
 12489                           
 12490                           ;incstack = 0
 12491                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
 12492  088D  318D  25C5  3188   	fcall	_PIN_MANAGER_Initialize
 12493                           
 12494                           ;mcc.c: 80: OSCILLATOR_Initialize();
 12495  0890  3189  211A         	fcall	_OSCILLATOR_Initialize
 12496  0892  0008               	return
 12497  0893                     __end_of_SYSTEM_Initialize:	
 12498                           
 12499                           	psect	text76
 12500  0DC5                     __ptext76:	
 12501 ;; *************** function _PIN_MANAGER_Initialize *****************
 12502 ;; Defined at:
 12503 ;;		line 54 in file "mcc_generated_files/pin_manager.c"
 12504 ;; Parameters:    Size  Location     Type
 12505 ;;		None
 12506 ;; Auto vars:     Size  Location     Type
 12507 ;;		None
 12508 ;; Return value:  Size  Location     Type
 12509 ;;                  1    wreg      void 
 12510 ;; Registers used:
 12511 ;;		wreg, status,2, status,0, pclath, cstack
 12512 ;; Tracked objects:
 12513 ;;		On entry : 0/0
 12514 ;;		On exit  : 0/0
 12515 ;;		Unchanged: 0/0
 12516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12517 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12518 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12519 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12520 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12521 ;;Total ram usage:        0 bytes
 12522 ;; Hardware stack levels used:    1
 12523 ;; Hardware stack levels required when called:    7
 12524 ;; This function calls:
 12525 ;;		_IOCCF4_SetInterruptHandler
 12526 ;; This function is called by:
 12527 ;;		_SYSTEM_Initialize
 12528 ;; This function uses a non-reentrant model
 12529 ;;
 12530                           
 12531                           
 12532                           ;psect for function _PIN_MANAGER_Initialize
 12533  0DC5                     _PIN_MANAGER_Initialize:	
 12534                           
 12535                           ;pin_manager.c: 59: LATA = 0x00;
 12536                           
 12537                           ;incstack = 0
 12538                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0+pclath+cstack]
 12539  0DC5  0022               	movlb	2	; select bank2
 12540  0DC6  018C               	clrf	12	;volatile
 12541                           
 12542                           ;pin_manager.c: 60: LATB = 0x00;
 12543  0DC7  018D               	clrf	13	;volatile
 12544                           
 12545                           ;pin_manager.c: 61: LATC = 0x00;
 12546  0DC8  018E               	clrf	14	;volatile
 12547                           
 12548                           ;pin_manager.c: 66: TRISA = 0x37;
 12549  0DC9  3037               	movlw	55
 12550  0DCA  0021               	movlb	1	; select bank1
 12551  0DCB  008C               	movwf	12	;volatile
 12552                           
 12553                           ;pin_manager.c: 67: TRISB = 0xF0;
 12554  0DCC  30F0               	movlw	240
 12555  0DCD  008D               	movwf	13	;volatile
 12556                           
 12557                           ;pin_manager.c: 68: TRISC = 0xFF;
 12558  0DCE  30FF               	movlw	255
 12559  0DCF  008E               	movwf	14	;volatile
 12560                           
 12561                           ;pin_manager.c: 73: ANSELC = 0xCF;
 12562  0DD0  30CF               	movlw	207
 12563  0DD1  0023               	movlb	3	; select bank3
 12564  0DD2  008E               	movwf	14	;volatile
 12565                           
 12566                           ;pin_manager.c: 74: ANSELB = 0xA0;
 12567  0DD3  30A0               	movlw	160
 12568  0DD4  008D               	movwf	13	;volatile
 12569                           
 12570                           ;pin_manager.c: 75: ANSELA = 0x17;
 12571  0DD5  3017               	movlw	23
 12572  0DD6  008C               	movwf	12	;volatile
 12573                           
 12574                           ;pin_manager.c: 80: WPUB = 0x00;
 12575  0DD7  0024               	movlb	4	; select bank4
 12576  0DD8  018D               	clrf	13	;volatile
 12577                           
 12578                           ;pin_manager.c: 81: WPUA = 0x00;
 12579  0DD9  018C               	clrf	12	;volatile
 12580                           
 12581                           ;pin_manager.c: 82: WPUC = 0x10;
 12582  0DDA  3010               	movlw	16
 12583  0DDB  008E               	movwf	14	;volatile
 12584                           
 12585                           ;pin_manager.c: 83: OPTION_REGbits.nWPUEN = 0;
 12586  0DDC  0021               	movlb	1	; select bank1
 12587  0DDD  1395               	bcf	21,7	;volatile
 12588                           
 12589                           ;pin_manager.c: 88: ODCONA = 0x00;
 12590  0DDE  0025               	movlb	5	; select bank5
 12591  0DDF  018C               	clrf	12	;volatile
 12592                           
 12593                           ;pin_manager.c: 89: ODCONB = 0x00;
 12594  0DE0  018D               	clrf	13	;volatile
 12595                           
 12596                           ;pin_manager.c: 90: ODCONC = 0x00;
 12597  0DE1  018E               	clrf	14	;volatile
 12598                           
 12599                           ;pin_manager.c: 97: IOCCFbits.IOCCF4 = 0;
 12600  0DE2  0027               	movlb	7	; select bank7
 12601  0DE3  1219               	bcf	25,4	;volatile
 12602                           
 12603                           ;pin_manager.c: 99: IOCCNbits.IOCCN4 = 1;
 12604  0DE4  1618               	bsf	24,4	;volatile
 12605                           
 12606                           ;pin_manager.c: 101: IOCCPbits.IOCCP4 = 1;
 12607  0DE5  1617               	bsf	23,4	;volatile
 12608                           
 12609                           ;pin_manager.c: 104: IOCCF4_SetInterruptHandler(IOCCF4_DefaultInterruptHandler);
 12610  0DE6  3002               	movlw	low _IOCCF4_DefaultInterruptHandler
 12611  0DE7  0020               	movlb	0	; select bank0
 12612  0DE8  00A2               	movwf	IOCCF4_SetInterruptHandler@InterruptHandler
 12613  0DE9  3008               	movlw	high _IOCCF4_DefaultInterruptHandler
 12614  0DEA  00A3               	movwf	IOCCF4_SetInterruptHandler@InterruptHandler+1
 12615  0DEB  3188  2087         	fcall	_IOCCF4_SetInterruptHandler
 12616                           
 12617                           ;pin_manager.c: 107: INTCONbits.IOCIE = 1;
 12618  0DED  158B               	bsf	11,3	;volatile
 12619                           
 12620                           ;pin_manager.c: 110: SSPCLKPPS = 0x0E;
 12621  0DEE  300E               	movlw	14
 12622  0DEF  003C               	movlb	28	; select bank28
 12623  0DF0  00A0               	movwf	32	;volatile
 12624                           
 12625                           ;pin_manager.c: 111: SSPDATPPS = 0x0C;
 12626  0DF1  300C               	movlw	12
 12627  0DF2  00A1               	movwf	33	;volatile
 12628                           
 12629                           ;pin_manager.c: 112: RB6PPS = 0x10;
 12630  0DF3  3010               	movlw	16
 12631  0DF4  003D               	movlb	29	; select bank29
 12632  0DF5  009E               	movwf	30	;volatile
 12633                           
 12634                           ;pin_manager.c: 113: RB4PPS = 0x11;
 12635  0DF6  3011               	movlw	17
 12636  0DF7  009C               	movwf	28	;volatile
 12637  0DF8  0008               	return
 12638  0DF9                     __end_of_PIN_MANAGER_Initialize:	
 12639                           
 12640                           	psect	text77
 12641  0887                     __ptext77:	
 12642 ;; *************** function _IOCCF4_SetInterruptHandler *****************
 12643 ;; Defined at:
 12644 ;;		line 146 in file "mcc_generated_files/pin_manager.c"
 12645 ;; Parameters:    Size  Location     Type
 12646 ;;  InterruptHan    2    2[BANK0 ] PTR FTN()void 
 12647 ;;		 -> buttonInterrupt(1), IOCCF4_DefaultInterruptHandler(1), 
 12648 ;; Auto vars:     Size  Location     Type
 12649 ;;		None
 12650 ;; Return value:  Size  Location     Type
 12651 ;;                  1    wreg      void 
 12652 ;; Registers used:
 12653 ;;		wreg
 12654 ;; Tracked objects:
 12655 ;;		On entry : 0/0
 12656 ;;		On exit  : 0/0
 12657 ;;		Unchanged: 0/0
 12658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12659 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12660 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12661 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12662 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12663 ;;Total ram usage:        2 bytes
 12664 ;; Hardware stack levels used:    1
 12665 ;; Hardware stack levels required when called:    6
 12666 ;; This function calls:
 12667 ;;		Nothing
 12668 ;; This function is called by:
 12669 ;;		_PIN_MANAGER_Initialize
 12670 ;;		_main
 12671 ;; This function uses a non-reentrant model
 12672 ;;
 12673                           
 12674                           
 12675                           ;psect for function _IOCCF4_SetInterruptHandler
 12676  0887                     _IOCCF4_SetInterruptHandler:	
 12677                           
 12678                           ;pin_manager.c: 147: IOCCF4_InterruptHandler = InterruptHandler;
 12679                           
 12680                           ;incstack = 0
 12681                           ; Regs used in _IOCCF4_SetInterruptHandler: [wreg]
 12682  0887  0020               	movlb	0	; select bank0
 12683  0888  0823               	movf	IOCCF4_SetInterruptHandler@InterruptHandler+1,w
 12684  0889  00EB               	movwf	_IOCCF4_InterruptHandler+1
 12685  088A  0822               	movf	IOCCF4_SetInterruptHandler@InterruptHandler,w
 12686  088B  00EA               	movwf	_IOCCF4_InterruptHandler
 12687  088C  0008               	return
 12688  088D                     __end_of_IOCCF4_SetInterruptHandler:	
 12689                           
 12690                           	psect	text78
 12691  091A                     __ptext78:	
 12692 ;; *************** function _OSCILLATOR_Initialize *****************
 12693 ;; Defined at:
 12694 ;;		line 83 in file "mcc_generated_files/mcc.c"
 12695 ;; Parameters:    Size  Location     Type
 12696 ;;		None
 12697 ;; Auto vars:     Size  Location     Type
 12698 ;;		None
 12699 ;; Return value:  Size  Location     Type
 12700 ;;                  1    wreg      void 
 12701 ;; Registers used:
 12702 ;;		wreg, status,2
 12703 ;; Tracked objects:
 12704 ;;		On entry : 0/0
 12705 ;;		On exit  : 0/0
 12706 ;;		Unchanged: 0/0
 12707 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12708 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12709 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12710 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12711 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12712 ;;Total ram usage:        0 bytes
 12713 ;; Hardware stack levels used:    1
 12714 ;; Hardware stack levels required when called:    6
 12715 ;; This function calls:
 12716 ;;		Nothing
 12717 ;; This function is called by:
 12718 ;;		_SYSTEM_Initialize
 12719 ;; This function uses a non-reentrant model
 12720 ;;
 12721                           
 12722                           
 12723                           ;psect for function _OSCILLATOR_Initialize
 12724  091A                     _OSCILLATOR_Initialize:	
 12725                           
 12726                           ;mcc.c: 86: OSCCON = 0x78;
 12727                           
 12728                           ;incstack = 0
 12729                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 12730  091A  3078               	movlw	120
 12731  091B  0021               	movlb	1	; select bank1
 12732  091C  0099               	movwf	25	;volatile
 12733                           
 12734                           ;mcc.c: 88: OSCTUNE = 0x00;
 12735  091D  0198               	clrf	24	;volatile
 12736                           
 12737                           ;mcc.c: 90: BORCON = 0x00;
 12738  091E  0022               	movlb	2	; select bank2
 12739  091F  0196               	clrf	22	;volatile
 12740  0920                     l95:	
 12741                           ;mcc.c: 93: {
 12742                           
 12743                           ;mcc.c: 92: while(PLLR == 0)
 12744                           
 12745  0920  0021               	movlb	1	; select bank1
 12746  0921  1B1A               	btfsc	26,6	;volatile
 12747  0922  0008               	return
 12748  0923  2920               	goto	l95
 12749  0924                     __end_of_OSCILLATOR_Initialize:	
 12750                           
 12751                           	psect	intentry
 12752  0004                     __pintentry:	
 12753 ;; *************** function _INTERRUPT_InterruptManager *****************
 12754 ;; Defined at:
 12755 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
 12756 ;; Parameters:    Size  Location     Type
 12757 ;;		None
 12758 ;; Auto vars:     Size  Location     Type
 12759 ;;		None
 12760 ;; Return value:  Size  Location     Type
 12761 ;;                  1    wreg      void 
 12762 ;; Registers used:
 12763 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12764 ;; Tracked objects:
 12765 ;;		On entry : 0/0
 12766 ;;		On exit  : 0/0
 12767 ;;		Unchanged: 0/0
 12768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12770 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12771 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12772 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12773 ;;Total ram usage:        1 bytes
 12774 ;; Hardware stack levels used:    1
 12775 ;; Hardware stack levels required when called:    5
 12776 ;; This function calls:
 12777 ;;		Absolute function
 12778 ;;		_PIN_MANAGER_IOC
 12779 ;;		_i2c_busCollisionISR
 12780 ;;		i1_i2c_ISR
 12781 ;; This function is called by:
 12782 ;;		Interrupt level 1
 12783 ;; This function uses a non-reentrant model
 12784 ;;
 12785                           
 12786  0004                     _INTERRUPT_InterruptManager:	
 12787                           
 12788                           ;incstack = 0
 12789 ;; hardware stack exceeded
 12790  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 12791                           
 12792                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12793  0005  3180               	pagesel	$
 12794  0006  0020               	movlb	0	; select bank0
 12795  0007  087F               	movf	127,w
 12796  0008  00A1               	movwf	??_INTERRUPT_InterruptManager
 12797                           
 12798                           ;interrupt_manager.c: 54: if(INTCONbits.IOCIE == 1 && INTCONbits.IOCIF == 1)
 12799  0009  198B               	btfsc	11,3	;volatile
 12800  000A  1C0B               	btfss	11,0	;volatile
 12801  000B  2810               	goto	i1l359
 12802                           
 12803                           ;interrupt_manager.c: 55: {
 12804                           ;interrupt_manager.c: 56: PIN_MANAGER_IOC();
 12805  000C  3188  207B  3180   	fcall	_PIN_MANAGER_IOC
 12806                           
 12807                           ;interrupt_manager.c: 57: }
 12808  000F  2829               	goto	i1l367
 12809  0010                     i1l359:	
 12810                           
 12811                           ;interrupt_manager.c: 58: else if(INTCONbits.PEIE == 1)
 12812  0010  1F0B               	btfss	11,6	;volatile
 12813  0011  2829               	goto	i1l367
 12814                           
 12815                           ;interrupt_manager.c: 59: {
 12816                           ;interrupt_manager.c: 60: if(PIE2bits.BCL1IE == 1 && PIR2bits.BCL1IF == 1)
 12817  0012  0021               	movlb	1	; select bank1
 12818  0013  1D91               	btfss	17,3	;volatile
 12819  0014  281E               	goto	i1l362
 12820  0015  0020               	movlb	0	; select bank0
 12821  0016  1D91               	btfss	17,3	;volatile
 12822  0017  281E               	goto	i1l362
 12823                           
 12824                           ;interrupt_manager.c: 61: {
 12825                           ;interrupt_manager.c: 62: i2c_driver_busCollisionISR();
 12826  0018  085E               	movf	_i2c_driver_busCollisionISR+1,w
 12827  0019  008A               	movwf	10
 12828  001A  085D               	movf	_i2c_driver_busCollisionISR,w
 12829  001B  000A               	callw
 12830  001C  3180               	pagesel	$
 12831                           
 12832                           ;interrupt_manager.c: 63: }
 12833  001D  2829               	goto	i1l367
 12834  001E                     i1l362:	
 12835                           
 12836                           ;interrupt_manager.c: 64: else if(PIE1bits.SSP1IE == 1 && PIR1bits.SSP1IF == 1)
 12837  001E  0021               	movlb	1	; select bank1
 12838  001F  1D90               	btfss	16,3	;volatile
 12839  0020  2829               	goto	i1l367
 12840  0021  0020               	movlb	0	; select bank0
 12841  0022  1D90               	btfss	16,3	;volatile
 12842  0023  2829               	goto	i1l367
 12843                           
 12844                           ;interrupt_manager.c: 65: {
 12845                           ;interrupt_manager.c: 66: i2c_driver_i2cISR();
 12846  0024  085C               	movf	_i2c_driver_i2cISR+1,w
 12847  0025  008A               	movwf	10
 12848  0026  085B               	movf	_i2c_driver_i2cISR,w
 12849  0027  000A               	callw
 12850  0028  3180               	pagesel	$
 12851  0029                     i1l367:	
 12852                           ;interrupt_manager.c: 73: else
 12853                           ;interrupt_manager.c: 74: {
 12854                           
 12855                           ;interrupt_manager.c: 71: }
 12856                           ;interrupt_manager.c: 72: }
 12857                           
 12858                           ;interrupt_manager.c: 68: else
 12859                           ;interrupt_manager.c: 69: {
 12860                           
 12861                           ;interrupt_manager.c: 67: }
 12862                           
 12863  0029  0020               	movlb	0	; select bank0
 12864  002A  0821               	movf	??_INTERRUPT_InterruptManager,w
 12865  002B  00FF               	movwf	127
 12866  002C  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 12867  002D  0009               	retfie
 12868  002E                     __end_of_INTERRUPT_InterruptManager:	
 12869                           
 12870                           	psect	text80
 12871  0BBC                     __ptext80:	
 12872 ;; *************** function i1_i2c_ISR *****************
 12873 ;; Defined at:
 12874 ;;		line 419 in file "mcc_generated_files/drivers/i2c_master.c"
 12875 ;; Parameters:    Size  Location     Type
 12876 ;;		None
 12877 ;; Auto vars:     Size  Location     Type
 12878 ;;		None
 12879 ;; Return value:  Size  Location     Type
 12880 ;;                  1    wreg      void 
 12881 ;; Registers used:
 12882 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12883 ;; Tracked objects:
 12884 ;;		On entry : 0/0
 12885 ;;		On exit  : 0/0
 12886 ;;		Unchanged: 0/0
 12887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12888 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12889 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12890 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12891 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12892 ;;Total ram usage:        1 bytes
 12893 ;; Hardware stack levels used:    1
 12894 ;; Hardware stack levels required when called:    4
 12895 ;; This function calls:
 12896 ;;		i1_do_I2C_DO_ACK
 12897 ;;		i1_do_I2C_DO_ADDRESS_NACK
 12898 ;;		i1_do_I2C_DO_NACK_RESTART
 12899 ;;		i1_do_I2C_DO_NACK_STOP
 12900 ;;		i1_do_I2C_IDLE
 12901 ;;		i1_do_I2C_RCEN
 12902 ;;		i1_do_I2C_RESET
 12903 ;;		i1_do_I2C_RX
 12904 ;;		i1_do_I2C_SEND_ADR_READ
 12905 ;;		i1_do_I2C_SEND_ADR_WRITE
 12906 ;;		i1_do_I2C_SEND_RESTART
 12907 ;;		i1_do_I2C_SEND_RESTART_READ
 12908 ;;		i1_do_I2C_SEND_RESTART_WRITE
 12909 ;;		i1_do_I2C_SEND_STOP
 12910 ;;		i1_do_I2C_TX
 12911 ;;		i1_do_I2C_TX_EMPTY
 12912 ;;		i1_i2c_driver_isNACK
 12913 ;;		i1_mssp_clearIRQ
 12914 ;; This function is called by:
 12915 ;; This function uses a non-reentrant model
 12916 ;;
 12917                           
 12918                           
 12919                           ;psect for function i1_i2c_ISR
 12920  0BBC                     i1_i2c_ISR:	
 12921  0BBC                     i1l7331:	
 12922                           ;incstack = 0
 12923 ;; hardware stack exceeded
 12924                           ; Regs used in i1_i2c_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12925                           
 12926                           
 12927                           ;i2c_master.c: 421: mssp_clearIRQ();
 12928  0BBC  3188  201E  318B   	fcall	i1_mssp_clearIRQ
 12929                           
 12930                           ;i2c_master.c: 427: if(i2c_status.addressNACKCheck && i2c_driver_isNACK())
 12931  0BBF  0021               	movlb	1	; select bank1
 12932  0BC0  1DA0               	btfss	_i2c_status^(0+128),3
 12933  0BC1  2BCD               	goto	i1l7339
 12934  0BC2  3189  217A  318B   	fcall	i1_i2c_driver_isNACK
 12935  0BC5  1C03               	btfss	3,0
 12936  0BC6  2BCD               	goto	i1l7339
 12937                           
 12938                           ;i2c_master.c: 428: {
 12939                           ;i2c_master.c: 429: i2c_status.state = I2C_ADDRESS_NACK;
 12940  0BC7  300F               	movlw	15
 12941  0BC8  0020               	movlb	0	; select bank0
 12942  0BC9  00A0               	movwf	??i1_i2c_ISR
 12943  0BCA  0820               	movf	??i1_i2c_ISR,w
 12944  0BCB  0021               	movlb	1	; select bank1
 12945  0BCC  00AA               	movwf	(_i2c_status^(0+128)+10)
 12946  0BCD                     i1l7339:	
 12947                           
 12948                           ;i2c_master.c: 430: }
 12949                           ;i2c_master.c: 432: i2c_status.state = fsmStateTable[i2c_status.state]();
 12950  0BCD  0021               	movlb	1	; select bank1
 12951  0BCE  352A               	lslf	(_i2c_status^(0+128)+10),w
 12952  0BCF  3EA0               	addlw	(low (_fsmStateTable| (0+512)))& (0+255)
 12953  0BD0  0086               	movwf	6
 12954  0BD1  3002               	movlw	2	; select bank5/6
 12955  0BD2  0087               	movwf	7
 12956  0BD3  3F41               	moviw [1]fsr1
 12957  0BD4  008A               	movwf	10
 12958  0BD5  3F40               	moviw [0]fsr1
 12959  0BD6  000A               	callw
 12960  0BD7  318B               	pagesel	$
 12961  0BD8  0020               	movlb	0	; select bank0
 12962  0BD9  00A0               	movwf	??i1_i2c_ISR
 12963  0BDA  0820               	movf	??i1_i2c_ISR,w
 12964  0BDB  0021               	movlb	1	; select bank1
 12965  0BDC  00AA               	movwf	(_i2c_status^(0+128)+10)
 12966  0BDD  0008               	return
 12967  0BDE                     __end_ofi1_i2c_ISR:	
 12968                           
 12969                           	psect	text81
 12970  081E                     __ptext81:	
 12971 ;; *************** function i1_mssp_clearIRQ *****************
 12972 ;; Defined at:
 12973 ;;		line 53 in file "mcc_generated_files/i2c_driver.c"
 12974 ;; Parameters:    Size  Location     Type
 12975 ;;		None
 12976 ;; Auto vars:     Size  Location     Type
 12977 ;;		None
 12978 ;; Return value:  Size  Location     Type
 12979 ;;                  1    wreg      void 
 12980 ;; Registers used:
 12981 ;;		None
 12982 ;; Tracked objects:
 12983 ;;		On entry : 0/0
 12984 ;;		On exit  : 0/0
 12985 ;;		Unchanged: 0/0
 12986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12987 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12988 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12989 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12990 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12991 ;;Total ram usage:        0 bytes
 12992 ;; Hardware stack levels used:    1
 12993 ;; This function calls:
 12994 ;;		Nothing
 12995 ;; This function is called by:
 12996 ;;		i1_i2c_ISR
 12997 ;; This function uses a non-reentrant model
 12998 ;;
 12999                           
 13000                           
 13001                           ;psect for function i1_mssp_clearIRQ
 13002  081E                     i1_mssp_clearIRQ:	
 13003                           
 13004                           ;i2c_driver.c: 55: PIR1bits.SSP1IF = 0;
 13005                           
 13006                           ;incstack = 0
 13007                           ; Regs used in i1_mssp_clearIRQ: []
 13008  081E  0020               	movlb	0	; select bank0
 13009  081F  1190               	bcf	16,3	;volatile
 13010  0820  0008               	return
 13011  0821                     __end_ofi1_mssp_clearIRQ:	
 13012                           
 13013                           	psect	text82
 13014  0EA1                     __ptext82:	
 13015 ;; *************** function i1_do_I2C_RX *****************
 13016 ;; Defined at:
 13017 ;;		line 357 in file "mcc_generated_files/drivers/i2c_master.c"
 13018 ;; Parameters:    Size  Location     Type
 13019 ;;		None
 13020 ;; Auto vars:     Size  Location     Type
 13021 ;;		None
 13022 ;; Return value:  Size  Location     Type
 13023 ;;                  1    wreg      enum E12337
 13024 ;; Registers used:
 13025 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13026 ;; Tracked objects:
 13027 ;;		On entry : 0/0
 13028 ;;		On exit  : 0/0
 13029 ;;		Unchanged: 0/0
 13030 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13031 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13032 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13033 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13034 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13035 ;;Total ram usage:        1 bytes
 13036 ;; Hardware stack levels used:    1
 13037 ;; Hardware stack levels required when called:    3
 13038 ;; This function calls:
 13039 ;;		Absolute function
 13040 ;;		i1_do_I2C_DO_NACK_RESTART
 13041 ;;		i1_do_I2C_DO_NACK_STOP
 13042 ;;		i1_i2c_driver_getRXData
 13043 ;;		i1_i2c_driver_sendACK
 13044 ;;		i1_i2c_restartWrite
 13045 ;;		i1_rd1RegCompleteHandler
 13046 ;;		i1_rd2RegCompleteHandler
 13047 ;;		i1_rdBlkRegCompleteHandler
 13048 ;;		i1_returnReset
 13049 ;;		i1_returnStop
 13050 ;;		i1_wr1RegCompleteHandler
 13051 ;;		i1_wr2RegCompleteHandler
 13052 ;; This function is called by:
 13053 ;; This function uses a non-reentrant model
 13054 ;;
 13055                           
 13056                           
 13057                           ;psect for function i1_do_I2C_RX
 13058  0EA1                     i1_do_I2C_RX:	
 13059  0EA1                     i1l7177:	
 13060                           ;incstack = 0
 13061 ;; hardware stack exceeded
 13062                           ; Regs used in i1_do_I2C_RX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13063                           
 13064                           
 13065                           ;i2c_master.c: 359: *i2c_status.data_ptr++ = i2c_driver_getRXData();
 13066  0EA1  3188  2018  318E   	fcall	i1_i2c_driver_getRXData
 13067  0EA4  00FA               	movwf	??i1_do_I2C_RX
 13068  0EA5  0021               	movlb	1	; select bank1
 13069  0EA6  0822               	movf	(low ((_i2c_status| 0+2)))^(0+128),w
 13070  0EA7  0086               	movwf	6
 13071  0EA8  0823               	movf	((low ((_i2c_status| 0+2))+1))^(0+128),w
 13072  0EA9  0087               	movwf	7
 13073  0EAA  087A               	movf	??i1_do_I2C_RX,w
 13074  0EAB  0081               	movwf	1
 13075  0EAC  3001               	movlw	1
 13076  0EAD  07A2               	addwf	(low ((_i2c_status| 0+2)))^(0+128),f
 13077  0EAE  3000               	movlw	0
 13078  0EAF  3DA3               	addwfc	((low ((_i2c_status| 0+2))+1))^(0+128),f
 13079                           
 13080                           ;i2c_master.c: 360: if(--i2c_status.data_length)
 13081  0EB0  3001               	movlw	1
 13082  0EB1  02A4               	subwf	(_i2c_status^(0+128)+4),f
 13083  0EB2  3000               	movlw	0
 13084  0EB3  3BA5               	subwfb	((_i2c_status+1)^(0+128)+4),f
 13085  0EB4  0824               	movf	(_i2c_status^(0+128)+4),w
 13086  0EB5  0425               	iorwf	((_i2c_status+1)^(0+128)+4),w
 13087  0EB6  1903               	btfsc	3,2
 13088  0EB7  2EBC               	goto	i1l540
 13089                           
 13090                           ;i2c_master.c: 361: {
 13091                           ;i2c_master.c: 362: i2c_driver_sendACK();
 13092  0EB8  3188  203C         	fcall	i1_i2c_driver_sendACK
 13093                           
 13094                           ;i2c_master.c: 363: return I2C_RCEN;
 13095  0EBA  3005               	movlw	5
 13096                           
 13097                           ;i2c_master.c: 364: }
 13098  0EBB  0008               	return
 13099  0EBC                     i1l540:	
 13100                           
 13101                           ;i2c_master.c: 365: else
 13102                           ;i2c_master.c: 366: {
 13103                           ;i2c_master.c: 367: i2c_status.bufferFree = 1;
 13104  0EBC  1520               	bsf	_i2c_status^(0+128),2
 13105                           
 13106                           ;i2c_master.c: 368: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
 13107  0EBD  2EC4               	goto	i1l7201
 13108  0EBE                     i1l7191:	
 13109                           ;i2c_master.c: 369: {
 13110                           ;i2c_master.c: 370: case i2c_restart_write:
 13111                           
 13112                           
 13113                           ;i2c_master.c: 371: case i2c_restart_read:
 13114                           ;i2c_master.c: 372: return do_I2C_DO_NACK_RESTART();
 13115  0EBE  3188  205C         	fcall	i1_do_I2C_DO_NACK_RESTART
 13116  0EC0  0008               	return
 13117  0EC1                     i1l7195:	
 13118                           ;i2c_master.c: 374: case i2c_continue:
 13119                           
 13120                           ;i2c_master.c: 373: default:
 13121                           
 13122                           
 13123                           ;i2c_master.c: 375: case i2c_stop:
 13124                           ;i2c_master.c: 376: return do_I2C_DO_NACK_STOP();
 13125  0EC1  3188  2058         	fcall	i1_do_I2C_DO_NACK_STOP
 13126                           
 13127                           ;i2c_master.c: 377: }
 13128  0EC3  0008               	return
 13129  0EC4                     i1l7201:	
 13130  0EC4  0021               	movlb	1	; select bank1
 13131  0EC5  0838               	movf	(low ((_i2c_status| 0+24)))^(0+128),w
 13132  0EC6  00FA               	movwf	??i1_do_I2C_RX
 13133  0EC7  087A               	movf	??i1_do_I2C_RX,w
 13134  0EC8  00F9               	movwf	i1returnStop@p
 13135  0EC9  300C               	movlw	12
 13136  0ECA  3EA0               	addlw	(low (_i2c_status| 0))& (0+255)
 13137  0ECB  0086               	movwf	6
 13138  0ECC  0187               	clrf	7
 13139  0ECD  3F41               	moviw [1]fsr1
 13140  0ECE  008A               	movwf	10
 13141  0ECF  3F40               	moviw [0]fsr1
 13142  0ED0  000A               	callw
 13143  0ED1  318E               	pagesel	$
 13144                           
 13145                           ; Switch size 1, requested type "space"
 13146                           ; Number of cases is 4, Range of values is 1 to 4
 13147                           ; switch strategies available:
 13148                           ; Name         Instructions Cycles
 13149                           ; simple_byte           13     7 (average)
 13150                           ; direct_byte           17     9 (fixed)
 13151                           ; jumptable            263     9 (fixed)
 13152                           ;	Chosen strategy is simple_byte
 13153  0ED2  3A01               	xorlw	1	; case 1
 13154  0ED3  1903               	skipnz
 13155  0ED4  2EC1               	goto	i1l7195
 13156  0ED5  3A03               	xorlw	3	; case 2
 13157  0ED6  1903               	skipnz
 13158  0ED7  2EBE               	goto	i1l7191
 13159  0ED8  3A01               	xorlw	1	; case 3
 13160  0ED9  1903               	skipnz
 13161  0EDA  2EBE               	goto	i1l7191
 13162  0EDB  3A07               	xorlw	7	; case 4
 13163  0EDC  1903               	skipnz
 13164  0EDD  2EC1               	goto	i1l7195
 13165  0EDE  2EC1               	goto	i1l7195
 13166  0EDF  0008               	return
 13167  0EE0                     __end_ofi1_do_I2C_RX:	
 13168                           
 13169                           	psect	text83
 13170  07B3                     __ptext83:	
 13171 ;; *************** function i1_do_I2C_TX *****************
 13172 ;; Defined at:
 13173 ;;		line 333 in file "mcc_generated_files/drivers/i2c_master.c"
 13174 ;; Parameters:    Size  Location     Type
 13175 ;;		None
 13176 ;; Auto vars:     Size  Location     Type
 13177 ;;		None
 13178 ;; Return value:  Size  Location     Type
 13179 ;;                  1    wreg      enum E12337
 13180 ;; Registers used:
 13181 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13182 ;; Tracked objects:
 13183 ;;		On entry : 0/0
 13184 ;;		On exit  : 0/0
 13185 ;;		Unchanged: 0/0
 13186 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13187 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13188 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13189 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13190 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13191 ;;Total ram usage:        4 bytes
 13192 ;; Hardware stack levels used:    1
 13193 ;; Hardware stack levels required when called:    3
 13194 ;; This function calls:
 13195 ;;		Absolute function
 13196 ;;		i1_do_I2C_SEND_RESTART_READ
 13197 ;;		i1_do_I2C_SEND_RESTART_WRITE
 13198 ;;		i1_do_I2C_SEND_STOP
 13199 ;;		i1_i2c_driver_TXData
 13200 ;;		i1_i2c_driver_isNACK
 13201 ;;		i1_i2c_restartWrite
 13202 ;;		i1_rd1RegCompleteHandler
 13203 ;;		i1_rd2RegCompleteHandler
 13204 ;;		i1_rdBlkRegCompleteHandler
 13205 ;;		i1_returnReset
 13206 ;;		i1_returnStop
 13207 ;;		i1_wr1RegCompleteHandler
 13208 ;;		i1_wr2RegCompleteHandler
 13209 ;; This function is called by:
 13210 ;; This function uses a non-reentrant model
 13211 ;;
 13212                           
 13213                           
 13214                           ;psect for function i1_do_I2C_TX
 13215  07B3                     i1_do_I2C_TX:	
 13216  07B3                     i1l7147:	
 13217                           ;incstack = 0
 13218 ;; hardware stack exceeded
 13219                           ; Regs used in i1_do_I2C_TX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13220                           
 13221                           
 13222                           ;i2c_master.c: 335: if(i2c_driver_isNACK())
 13223  07B3  3189  217A  3187   	fcall	i1_i2c_driver_isNACK
 13224  07B6  1803               	btfsc	3,0
 13225  07B7  2FC2               	goto	i1l7165
 13226  07B8  2FDE               	goto	i1l524
 13227  07B9                     i1l7151:	
 13228                           ;i2c_master.c: 338: {
 13229                           ;i2c_master.c: 339: case i2c_restart_read:
 13230                           
 13231                           ;i2c_master.c: 336: {
 13232                           ;i2c_master.c: 337: switch(i2c_status.callbackTable[i2c_dataNACK](i2c_status.callbackPay
      +                          load[i2c_dataNACK]))
 13233                           
 13234                           
 13235                           ;i2c_master.c: 340: return do_I2C_SEND_RESTART_READ();
 13236  07B9  3188  2044         	fcall	i1_do_I2C_SEND_RESTART_READ
 13237  07BB  0008               	return
 13238  07BC                     i1l7155:	
 13239                           ;i2c_master.c: 341: case i2c_restart_write:
 13240                           
 13241                           
 13242                           ;i2c_master.c: 342: return do_I2C_SEND_RESTART_WRITE();
 13243  07BC  3188  2048         	fcall	i1_do_I2C_SEND_RESTART_WRITE
 13244  07BE  0008               	return
 13245  07BF                     i1l7159:	
 13246                           ;i2c_master.c: 344: case i2c_continue:
 13247                           
 13248                           ;i2c_master.c: 343: default:
 13249                           
 13250                           
 13251                           ;i2c_master.c: 345: case i2c_stop:
 13252                           ;i2c_master.c: 346: return do_I2C_SEND_STOP();
 13253  07BF  3188  2050         	fcall	i1_do_I2C_SEND_STOP
 13254                           
 13255                           ;i2c_master.c: 347: }
 13256  07C1  0008               	return
 13257  07C2                     i1l7165:	
 13258  07C2  0021               	movlb	1	; select bank1
 13259  07C3  083B               	movf	(low ((_i2c_status| 0+27)))^(0+128),w
 13260  07C4  00FA               	movwf	??i1_do_I2C_TX
 13261  07C5  087A               	movf	??i1_do_I2C_TX,w
 13262  07C6  00F9               	movwf	i1returnStop@p
 13263  07C7  3012               	movlw	18
 13264  07C8  3EA0               	addlw	(low (_i2c_status| 0))& (0+255)
 13265  07C9  0086               	movwf	6
 13266  07CA  0187               	clrf	7
 13267  07CB  3F41               	moviw [1]fsr1
 13268  07CC  008A               	movwf	10
 13269  07CD  3F40               	moviw [0]fsr1
 13270  07CE  000A               	callw
 13271  07CF  3187               	pagesel	$
 13272                           
 13273                           ; Switch size 1, requested type "space"
 13274                           ; Number of cases is 4, Range of values is 1 to 4
 13275                           ; switch strategies available:
 13276                           ; Name         Instructions Cycles
 13277                           ; simple_byte           13     7 (average)
 13278                           ; direct_byte           17     9 (fixed)
 13279                           ; jumptable            263     9 (fixed)
 13280                           ;	Chosen strategy is simple_byte
 13281  07D0  3A01               	xorlw	1	; case 1
 13282  07D1  1903               	skipnz
 13283  07D2  2FBF               	goto	i1l7159
 13284  07D3  3A03               	xorlw	3	; case 2
 13285  07D4  1903               	skipnz
 13286  07D5  2FB9               	goto	i1l7151
 13287  07D6  3A01               	xorlw	1	; case 3
 13288  07D7  1903               	skipnz
 13289  07D8  2FBC               	goto	i1l7155
 13290  07D9  3A07               	xorlw	7	; case 4
 13291  07DA  1903               	skipnz
 13292  07DB  2FBF               	goto	i1l7159
 13293  07DC  2FBF               	goto	i1l7159
 13294                           
 13295                           ;i2c_master.c: 348: }
 13296  07DD  0008               	return
 13297  07DE                     i1l524:	
 13298                           
 13299                           ;i2c_master.c: 349: else
 13300                           ;i2c_master.c: 350: {
 13301                           ;i2c_master.c: 351: i2c_status.addressNACKCheck = 0;
 13302  07DE  0021               	movlb	1	; select bank1
 13303  07DF  11A0               	bcf	_i2c_status^(0+128),3
 13304                           
 13305                           ;i2c_master.c: 352: i2c_driver_TXData(*i2c_status.data_ptr++);
 13306  07E0  0823               	movf	((low ((_i2c_status| 0+2))+1))^(0+128),w
 13307  07E1  00FB               	movwf	??i1_do_I2C_TX+1
 13308  07E2  0822               	movf	(low ((_i2c_status| 0+2)))^(0+128),w
 13309  07E3  00FA               	movwf	??i1_do_I2C_TX
 13310  07E4  0AA2               	incf	(low ((_i2c_status| 0+2)))^(0+128),f
 13311  07E5  1903               	skipnz
 13312  07E6  0AA3               	incf	((low ((_i2c_status| 0+2))+1))^(0+128),f
 13313  07E7  087A               	movf	??i1_do_I2C_TX,w
 13314  07E8  0086               	movwf	6
 13315  07E9  087B               	movf	??i1_do_I2C_TX+1,w
 13316  07EA  0087               	movwf	7
 13317  07EB  0801               	movf	1,w
 13318  07EC  3188  206C  3187   	fcall	i1_i2c_driver_TXData
 13319                           
 13320                           ;i2c_master.c: 353: return (--i2c_status.data_length)?I2C_TX:I2C_TX_EMPTY;
 13321  07EF  3001               	movlw	1
 13322  07F0  0021               	movlb	1	; select bank1
 13323  07F1  02A4               	subwf	(_i2c_status^(0+128)+4),f
 13324  07F2  3000               	movlw	0
 13325  07F3  3BA5               	subwfb	((_i2c_status+1)^(0+128)+4),f
 13326  07F4  0824               	movf	(_i2c_status^(0+128)+4),w
 13327  07F5  0425               	iorwf	((_i2c_status+1)^(0+128)+4),w
 13328  07F6  1D03               	btfss	3,2
 13329  07F7  2FFA               	goto	i1l7173
 13330  07F8  3006               	movlw	6
 13331  07F9  2FFB               	goto	L8
 13332  07FA                     i1l7173:	
 13333  07FA  3003               	movlw	3
 13334  07FB                     L8:	
 13335  07FB  00FC               	movwf	i1_do_I2C_TX$943
 13336  07FC  3000               	movlw	0
 13337  07FD  00FD               	movwf	i1_do_I2C_TX$943+1
 13338  07FE  087C               	movf	i1_do_I2C_TX$943,w
 13339  07FF  0008               	return
 13340  0800                     __end_ofi1_do_I2C_TX:	
 13341                           
 13342                           	psect	text84
 13343  0BDE                     __ptext84:	
 13344 ;; *************** function i1_do_I2C_DO_ADDRESS_NACK *****************
 13345 ;; Defined at:
 13346 ;;		line 319 in file "mcc_generated_files/drivers/i2c_master.c"
 13347 ;; Parameters:    Size  Location     Type
 13348 ;;		None
 13349 ;; Auto vars:     Size  Location     Type
 13350 ;;		None
 13351 ;; Return value:  Size  Location     Type
 13352 ;;                  1    wreg      enum E12337
 13353 ;; Registers used:
 13354 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13355 ;; Tracked objects:
 13356 ;;		On entry : 0/0
 13357 ;;		On exit  : 0/0
 13358 ;;		Unchanged: 0/0
 13359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13360 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13361 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13362 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13363 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13364 ;;Total ram usage:        1 bytes
 13365 ;; Hardware stack levels used:    1
 13366 ;; Hardware stack levels required when called:    3
 13367 ;; This function calls:
 13368 ;;		Absolute function
 13369 ;;		i1_do_I2C_SEND_RESTART
 13370 ;;		i1_do_I2C_SEND_STOP
 13371 ;;		i1_i2c_restartWrite
 13372 ;;		i1_rd1RegCompleteHandler
 13373 ;;		i1_rd2RegCompleteHandler
 13374 ;;		i1_rdBlkRegCompleteHandler
 13375 ;;		i1_returnReset
 13376 ;;		i1_returnStop
 13377 ;;		i1_wr1RegCompleteHandler
 13378 ;;		i1_wr2RegCompleteHandler
 13379 ;; This function is called by:
 13380 ;; This function uses a non-reentrant model
 13381 ;;
 13382                           
 13383                           
 13384                           ;psect for function i1_do_I2C_DO_ADDRESS_NACK
 13385  0BDE                     i1_do_I2C_DO_ADDRESS_NACK:	
 13386  0BDE                     i1l7131:	
 13387                           ;incstack = 0
 13388 ;; hardware stack exceeded
 13389                           ; Regs used in i1_do_I2C_DO_ADDRESS_NACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13390                           
 13391                           
 13392                           ;i2c_master.c: 321: i2c_status.addressNACKCheck = 0;
 13393  0BDE  0021               	movlb	1	; select bank1
 13394  0BDF  11A0               	bcf	_i2c_status^(0+128),3
 13395                           
 13396                           ;i2c_master.c: 322: i2c_status.error = I2C_FAIL;
 13397  0BE0  3002               	movlw	2
 13398  0BE1  00FA               	movwf	??i1_do_I2C_DO_ADDRESS_NACK
 13399  0BE2  087A               	movf	??i1_do_I2C_DO_ADDRESS_NACK,w
 13400  0BE3  00AB               	movwf	(_i2c_status^(0+128)+11)
 13401                           
 13402                           ;i2c_master.c: 323: switch(i2c_status.callbackTable[i2c_addressNACK](i2c_status.callback
      +                          Payload[i2c_addressNACK]))
 13403  0BE4  2BEB               	goto	i1l7145
 13404  0BE5                     i1l7135:	
 13405                           ;i2c_master.c: 324: {
 13406                           ;i2c_master.c: 325: case i2c_restart_read:
 13407                           
 13408                           
 13409                           ;i2c_master.c: 326: case i2c_restart_write:
 13410                           ;i2c_master.c: 327: return do_I2C_SEND_RESTART();
 13411  0BE5  3188  204C         	fcall	i1_do_I2C_SEND_RESTART
 13412  0BE7  0008               	return
 13413  0BE8                     i1l7139:	
 13414                           ;i2c_master.c: 328: default:
 13415                           
 13416                           
 13417                           ;i2c_master.c: 329: return do_I2C_SEND_STOP();
 13418  0BE8  3188  2050         	fcall	i1_do_I2C_SEND_STOP
 13419                           
 13420                           ;i2c_master.c: 330: }
 13421  0BEA  0008               	return
 13422  0BEB                     i1l7145:	
 13423  0BEB  0021               	movlb	1	; select bank1
 13424  0BEC  083A               	movf	(low ((_i2c_status| 0+26)))^(0+128),w
 13425  0BED  00FA               	movwf	??i1_do_I2C_DO_ADDRESS_NACK
 13426  0BEE  087A               	movf	??i1_do_I2C_DO_ADDRESS_NACK,w
 13427  0BEF  00F9               	movwf	i1returnStop@p
 13428  0BF0  3010               	movlw	16
 13429  0BF1  3EA0               	addlw	(low (_i2c_status| 0))& (0+255)
 13430  0BF2  0086               	movwf	6
 13431  0BF3  0187               	clrf	7
 13432  0BF4  3F41               	moviw [1]fsr1
 13433  0BF5  008A               	movwf	10
 13434  0BF6  3F40               	moviw [0]fsr1
 13435  0BF7  000A               	callw
 13436  0BF8  318B               	pagesel	$
 13437                           
 13438                           ; Switch size 1, requested type "space"
 13439                           ; Number of cases is 2, Range of values is 2 to 3
 13440                           ; switch strategies available:
 13441                           ; Name         Instructions Cycles
 13442                           ; simple_byte            7     4 (average)
 13443                           ; direct_byte           13     9 (fixed)
 13444                           ; jumptable            263     9 (fixed)
 13445                           ;	Chosen strategy is simple_byte
 13446  0BF9  3A02               	xorlw	2	; case 2
 13447  0BFA  1903               	skipnz
 13448  0BFB  2BE5               	goto	i1l7135
 13449  0BFC  3A01               	xorlw	1	; case 3
 13450  0BFD  1903               	skipnz
 13451  0BFE  2BE5               	goto	i1l7135
 13452  0BFF  2BE8               	goto	i1l7139
 13453  0C00  0008               	return
 13454  0C01                     __end_ofi1_do_I2C_DO_ADDRESS_NACK:	
 13455                           
 13456                           	psect	text85
 13457  085C                     __ptext85:	
 13458 ;; *************** function i1_do_I2C_DO_NACK_RESTART *****************
 13459 ;; Defined at:
 13460 ;;		line 311 in file "mcc_generated_files/drivers/i2c_master.c"
 13461 ;; Parameters:    Size  Location     Type
 13462 ;;		None
 13463 ;; Auto vars:     Size  Location     Type
 13464 ;;		None
 13465 ;; Return value:  Size  Location     Type
 13466 ;;                  1    wreg      enum E12337
 13467 ;; Registers used:
 13468 ;;		wreg, status,2, status,0, pclath, cstack
 13469 ;; Tracked objects:
 13470 ;;		On entry : 0/0
 13471 ;;		On exit  : 0/0
 13472 ;;		Unchanged: 0/0
 13473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13474 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13475 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13476 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13477 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13478 ;;Total ram usage:        0 bytes
 13479 ;; Hardware stack levels used:    1
 13480 ;; Hardware stack levels required when called:    1
 13481 ;; This function calls:
 13482 ;;		i1_i2c_driver_sendNACK
 13483 ;; This function is called by:
 13484 ;;		i1_do_I2C_RX
 13485 ;; This function uses a non-reentrant model
 13486 ;;
 13487                           
 13488                           
 13489                           ;psect for function i1_do_I2C_DO_NACK_RESTART
 13490  085C                     i1_do_I2C_DO_NACK_RESTART:	
 13491  085C                     i1l3681:	
 13492                           ;incstack = 0
 13493 ;; hardware stack exceeded
 13494                           ; Regs used in i1_do_I2C_DO_NACK_RESTART: [wreg+status,2+status,0+pclath+cstack]
 13495                           
 13496                           
 13497                           ;i2c_master.c: 313: i2c_driver_sendNACK();
 13498  085C  3188  2040         	fcall	i1_i2c_driver_sendNACK
 13499                           
 13500                           ;i2c_master.c: 314: return I2C_SEND_RESTART;
 13501  085E  3009               	movlw	9
 13502  085F  0008               	return
 13503  0860                     __end_ofi1_do_I2C_DO_NACK_RESTART:	
 13504                           
 13505                           	psect	text86
 13506  0858                     __ptext86:	
 13507 ;; *************** function i1_do_I2C_DO_NACK_STOP *****************
 13508 ;; Defined at:
 13509 ;;		line 305 in file "mcc_generated_files/drivers/i2c_master.c"
 13510 ;; Parameters:    Size  Location     Type
 13511 ;;		None
 13512 ;; Auto vars:     Size  Location     Type
 13513 ;;		None
 13514 ;; Return value:  Size  Location     Type
 13515 ;;                  1    wreg      enum E12337
 13516 ;; Registers used:
 13517 ;;		wreg, status,2, status,0, pclath, cstack
 13518 ;; Tracked objects:
 13519 ;;		On entry : 0/0
 13520 ;;		On exit  : 0/0
 13521 ;;		Unchanged: 0/0
 13522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13523 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13524 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13525 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13526 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13527 ;;Total ram usage:        0 bytes
 13528 ;; Hardware stack levels used:    1
 13529 ;; Hardware stack levels required when called:    1
 13530 ;; This function calls:
 13531 ;;		i1_i2c_driver_sendNACK
 13532 ;; This function is called by:
 13533 ;;		i1_do_I2C_RX
 13534 ;; This function uses a non-reentrant model
 13535 ;;
 13536                           
 13537                           
 13538                           ;psect for function i1_do_I2C_DO_NACK_STOP
 13539  0858                     i1_do_I2C_DO_NACK_STOP:	
 13540  0858                     i1l3675:	
 13541                           ;incstack = 0
 13542 ;; hardware stack exceeded
 13543                           ; Regs used in i1_do_I2C_DO_NACK_STOP: [wreg+status,2+status,0+pclath+cstack]
 13544                           
 13545                           
 13546                           ;i2c_master.c: 307: i2c_driver_sendNACK();
 13547  0858  3188  2040         	fcall	i1_i2c_driver_sendNACK
 13548                           
 13549                           ;i2c_master.c: 308: return I2C_SEND_STOP;
 13550  085A  300A               	movlw	10
 13551  085B  0008               	return
 13552  085C                     __end_ofi1_do_I2C_DO_NACK_STOP:	
 13553                           
 13554                           	psect	text87
 13555  0854                     __ptext87:	
 13556 ;; *************** function i1_do_I2C_DO_ACK *****************
 13557 ;; Defined at:
 13558 ;;		line 299 in file "mcc_generated_files/drivers/i2c_master.c"
 13559 ;; Parameters:    Size  Location     Type
 13560 ;;		None
 13561 ;; Auto vars:     Size  Location     Type
 13562 ;;		None
 13563 ;; Return value:  Size  Location     Type
 13564 ;;                  1    wreg      enum E12337
 13565 ;; Registers used:
 13566 ;;		wreg, status,2, status,0, pclath, cstack
 13567 ;; Tracked objects:
 13568 ;;		On entry : 0/0
 13569 ;;		On exit  : 0/0
 13570 ;;		Unchanged: 0/0
 13571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13572 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13573 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13574 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13575 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13576 ;;Total ram usage:        0 bytes
 13577 ;; Hardware stack levels used:    1
 13578 ;; Hardware stack levels required when called:    1
 13579 ;; This function calls:
 13580 ;;		i1_i2c_driver_sendACK
 13581 ;; This function is called by:
 13582 ;; This function uses a non-reentrant model
 13583 ;;
 13584                           
 13585                           
 13586                           ;psect for function i1_do_I2C_DO_ACK
 13587  0854                     i1_do_I2C_DO_ACK:	
 13588  0854                     i1l3901:	
 13589                           ;incstack = 0
 13590 ;; hardware stack exceeded
 13591                           ; Regs used in i1_do_I2C_DO_ACK: [wreg+status,2+status,0+pclath+cstack]
 13592                           
 13593                           
 13594                           ;i2c_master.c: 301: i2c_driver_sendACK();
 13595  0854  3188  203C         	fcall	i1_i2c_driver_sendACK
 13596                           
 13597                           ;i2c_master.c: 302: return I2C_RCEN;
 13598  0856  3005               	movlw	5
 13599  0857  0008               	return
 13600  0858                     __end_ofi1_do_I2C_DO_ACK:	
 13601                           
 13602                           	psect	text88
 13603  0881                     __ptext88:	
 13604 ;; *************** function i1_do_I2C_RCEN *****************
 13605 ;; Defined at:
 13606 ;;		line 292 in file "mcc_generated_files/drivers/i2c_master.c"
 13607 ;; Parameters:    Size  Location     Type
 13608 ;;		None
 13609 ;; Auto vars:     Size  Location     Type
 13610 ;;		None
 13611 ;; Return value:  Size  Location     Type
 13612 ;;                  1    wreg      enum E12337
 13613 ;; Registers used:
 13614 ;;		wreg, status,2, status,0, pclath, cstack
 13615 ;; Tracked objects:
 13616 ;;		On entry : 0/0
 13617 ;;		On exit  : 0/0
 13618 ;;		Unchanged: 0/0
 13619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13620 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13621 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13622 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13623 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13624 ;;Total ram usage:        0 bytes
 13625 ;; Hardware stack levels used:    1
 13626 ;; Hardware stack levels required when called:    1
 13627 ;; This function calls:
 13628 ;;		i1_i2c_driver_startRX
 13629 ;; This function is called by:
 13630 ;; This function uses a non-reentrant model
 13631 ;;
 13632                           
 13633                           
 13634                           ;psect for function i1_do_I2C_RCEN
 13635  0881                     i1_do_I2C_RCEN:	
 13636  0881                     i1l3893:	
 13637                           ;incstack = 0
 13638 ;; hardware stack exceeded
 13639                           ; Regs used in i1_do_I2C_RCEN: [wreg+status,2+status,0+pclath+cstack]
 13640                           
 13641                           
 13642                           ;i2c_master.c: 294: i2c_status.addressNACKCheck = 0;
 13643  0881  0021               	movlb	1	; select bank1
 13644  0882  11A0               	bcf	_i2c_status^(0+128),3
 13645                           
 13646                           ;i2c_master.c: 295: i2c_driver_startRX();
 13647  0883  3188  2015         	fcall	i1_i2c_driver_startRX
 13648                           
 13649                           ;i2c_master.c: 296: return I2C_RX;
 13650  0885  3004               	movlw	4
 13651  0886  0008               	return
 13652  0887                     __end_ofi1_do_I2C_RCEN:	
 13653                           
 13654                           	psect	text89
 13655  08CA                     __ptext89:	
 13656 ;; *************** function i1_do_I2C_SEND_ADR_WRITE *****************
 13657 ;; Defined at:
 13658 ;;		line 285 in file "mcc_generated_files/drivers/i2c_master.c"
 13659 ;; Parameters:    Size  Location     Type
 13660 ;;		None
 13661 ;; Auto vars:     Size  Location     Type
 13662 ;;		None
 13663 ;; Return value:  Size  Location     Type
 13664 ;;                  1    wreg      enum E12337
 13665 ;; Registers used:
 13666 ;;		wreg, status,2, status,0, pclath, cstack
 13667 ;; Tracked objects:
 13668 ;;		On entry : 0/0
 13669 ;;		On exit  : 0/0
 13670 ;;		Unchanged: 0/0
 13671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13672 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13673 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13674 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13675 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13676 ;;Total ram usage:        0 bytes
 13677 ;; Hardware stack levels used:    1
 13678 ;; Hardware stack levels required when called:    1
 13679 ;; This function calls:
 13680 ;;		i1_i2c_driver_TXData
 13681 ;; This function is called by:
 13682 ;; This function uses a non-reentrant model
 13683 ;;
 13684                           
 13685                           
 13686                           ;psect for function i1_do_I2C_SEND_ADR_WRITE
 13687  08CA                     i1_do_I2C_SEND_ADR_WRITE:	
 13688  08CA                     i1l3885:	
 13689                           ;incstack = 0
 13690 ;; hardware stack exceeded
 13691                           ; Regs used in i1_do_I2C_SEND_ADR_WRITE: [wreg+status,2+status,0+pclath+cstack]
 13692                           
 13693                           
 13694                           ;i2c_master.c: 287: i2c_status.addressNACKCheck = 1;
 13695  08CA  0021               	movlb	1	; select bank1
 13696  08CB  15A0               	bsf	_i2c_status^(0+128),3
 13697                           
 13698                           ;i2c_master.c: 288: i2c_driver_TXData(i2c_status.address << 1);
 13699  08CC  3521               	lslf	(_i2c_status^(0+128)+1),w
 13700  08CD  3188  206C         	fcall	i1_i2c_driver_TXData
 13701                           
 13702                           ;i2c_master.c: 289: return I2C_TX;
 13703  08CF  3003               	movlw	3
 13704  08D0  0008               	return
 13705  08D1                     __end_ofi1_do_I2C_SEND_ADR_WRITE:	
 13706                           
 13707                           	psect	text90
 13708  08D1                     __ptext90:	
 13709 ;; *************** function i1_do_I2C_SEND_ADR_READ *****************
 13710 ;; Defined at:
 13711 ;;		line 278 in file "mcc_generated_files/drivers/i2c_master.c"
 13712 ;; Parameters:    Size  Location     Type
 13713 ;;		None
 13714 ;; Auto vars:     Size  Location     Type
 13715 ;;		None
 13716 ;; Return value:  Size  Location     Type
 13717 ;;                  1    wreg      enum E12337
 13718 ;; Registers used:
 13719 ;;		wreg, status,2, status,0, pclath, cstack
 13720 ;; Tracked objects:
 13721 ;;		On entry : 0/0
 13722 ;;		On exit  : 0/0
 13723 ;;		Unchanged: 0/0
 13724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13725 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13726 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13727 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13728 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13729 ;;Total ram usage:        0 bytes
 13730 ;; Hardware stack levels used:    1
 13731 ;; Hardware stack levels required when called:    1
 13732 ;; This function calls:
 13733 ;;		i1_i2c_driver_TXData
 13734 ;; This function is called by:
 13735 ;; This function uses a non-reentrant model
 13736 ;;
 13737                           
 13738                           
 13739                           ;psect for function i1_do_I2C_SEND_ADR_READ
 13740  08D1                     i1_do_I2C_SEND_ADR_READ:	
 13741  08D1                     i1l3877:	
 13742                           ;incstack = 0
 13743 ;; hardware stack exceeded
 13744                           ; Regs used in i1_do_I2C_SEND_ADR_READ: [wreg+status,2+status,0+pclath+cstack]
 13745                           
 13746                           
 13747                           ;i2c_master.c: 280: i2c_status.addressNACKCheck = 1;
 13748  08D1  0021               	movlb	1	; select bank1
 13749  08D2  15A0               	bsf	_i2c_status^(0+128),3
 13750                           
 13751                           ;i2c_master.c: 281: i2c_driver_TXData(i2c_status.address << 1 | 1);
 13752  08D3  1403               	setc
 13753  08D4  0D21               	rlf	(_i2c_status^(0+128)+1),w
 13754  08D5  3188  206C         	fcall	i1_i2c_driver_TXData
 13755                           
 13756                           ;i2c_master.c: 282: return I2C_RCEN;
 13757  08D7  3005               	movlw	5
 13758  08D8  0008               	return
 13759  08D9                     __end_ofi1_do_I2C_SEND_ADR_READ:	
 13760                           
 13761                           	psect	text91
 13762  0850                     __ptext91:	
 13763 ;; *************** function i1_do_I2C_SEND_STOP *****************
 13764 ;; Defined at:
 13765 ;;		line 272 in file "mcc_generated_files/drivers/i2c_master.c"
 13766 ;; Parameters:    Size  Location     Type
 13767 ;;		None
 13768 ;; Auto vars:     Size  Location     Type
 13769 ;;		None
 13770 ;; Return value:  Size  Location     Type
 13771 ;;                  1    wreg      enum E12337
 13772 ;; Registers used:
 13773 ;;		wreg, status,2, status,0, pclath, cstack
 13774 ;; Tracked objects:
 13775 ;;		On entry : 0/0
 13776 ;;		On exit  : 0/0
 13777 ;;		Unchanged: 0/0
 13778 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13779 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13780 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13781 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13782 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13783 ;;Total ram usage:        0 bytes
 13784 ;; Hardware stack levels used:    1
 13785 ;; Hardware stack levels required when called:    1
 13786 ;; This function calls:
 13787 ;;		i1_i2c_driver_stop
 13788 ;; This function is called by:
 13789 ;;		i1_do_I2C_DO_ADDRESS_NACK
 13790 ;;		i1_do_I2C_TX
 13791 ;;		i1_do_I2C_TX_EMPTY
 13792 ;; This function uses a non-reentrant model
 13793 ;;
 13794                           
 13795                           
 13796                           ;psect for function i1_do_I2C_SEND_STOP
 13797  0850                     i1_do_I2C_SEND_STOP:	
 13798  0850                     i1l3669:	
 13799                           ;incstack = 0
 13800 ;; hardware stack exceeded
 13801                           ; Regs used in i1_do_I2C_SEND_STOP: [wreg+status,2+status,0+pclath+cstack]
 13802                           
 13803                           
 13804                           ;i2c_master.c: 274: i2c_driver_stop();
 13805  0850  3188  2012         	fcall	i1_i2c_driver_stop
 13806                           
 13807                           ;i2c_master.c: 275: return I2C_IDLE;
 13808  0852  3000               	movlw	0
 13809  0853  0008               	return
 13810  0854                     __end_ofi1_do_I2C_SEND_STOP:	
 13811                           
 13812                           	psect	text92
 13813  084C                     __ptext92:	
 13814 ;; *************** function i1_do_I2C_SEND_RESTART *****************
 13815 ;; Defined at:
 13816 ;;		line 266 in file "mcc_generated_files/drivers/i2c_master.c"
 13817 ;; Parameters:    Size  Location     Type
 13818 ;;		None
 13819 ;; Auto vars:     Size  Location     Type
 13820 ;;		None
 13821 ;; Return value:  Size  Location     Type
 13822 ;;                  1    wreg      enum E12337
 13823 ;; Registers used:
 13824 ;;		wreg, status,2, status,0, pclath, cstack
 13825 ;; Tracked objects:
 13826 ;;		On entry : 0/0
 13827 ;;		On exit  : 0/0
 13828 ;;		Unchanged: 0/0
 13829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13830 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13831 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13832 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13833 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13834 ;;Total ram usage:        0 bytes
 13835 ;; Hardware stack levels used:    1
 13836 ;; Hardware stack levels required when called:    1
 13837 ;; This function calls:
 13838 ;;		i1_i2c_driver_restart
 13839 ;; This function is called by:
 13840 ;;		i1_do_I2C_DO_ADDRESS_NACK
 13841 ;;		i1_do_I2C_TX_EMPTY
 13842 ;; This function uses a non-reentrant model
 13843 ;;
 13844                           
 13845                           
 13846                           ;psect for function i1_do_I2C_SEND_RESTART
 13847  084C                     i1_do_I2C_SEND_RESTART:	
 13848  084C                     i1l3663:	
 13849                           ;incstack = 0
 13850 ;; hardware stack exceeded
 13851                           ; Regs used in i1_do_I2C_SEND_RESTART: [wreg+status,2+status,0+pclath+cstack]
 13852                           
 13853                           
 13854                           ;i2c_master.c: 268: i2c_driver_restart();
 13855  084C  3188  200F         	fcall	i1_i2c_driver_restart
 13856                           
 13857                           ;i2c_master.c: 269: return I2C_SEND_ADR_READ;
 13858  084E  3001               	movlw	1
 13859  084F  0008               	return
 13860  0850                     __end_ofi1_do_I2C_SEND_RESTART:	
 13861                           
 13862                           	psect	text93
 13863  0848                     __ptext93:	
 13864 ;; *************** function i1_do_I2C_SEND_RESTART_WRITE *****************
 13865 ;; Defined at:
 13866 ;;		line 260 in file "mcc_generated_files/drivers/i2c_master.c"
 13867 ;; Parameters:    Size  Location     Type
 13868 ;;		None
 13869 ;; Auto vars:     Size  Location     Type
 13870 ;;		None
 13871 ;; Return value:  Size  Location     Type
 13872 ;;                  1    wreg      enum E12337
 13873 ;; Registers used:
 13874 ;;		wreg, status,2, status,0, pclath, cstack
 13875 ;; Tracked objects:
 13876 ;;		On entry : 0/0
 13877 ;;		On exit  : 0/0
 13878 ;;		Unchanged: 0/0
 13879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13880 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13881 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13882 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13883 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13884 ;;Total ram usage:        0 bytes
 13885 ;; Hardware stack levels used:    1
 13886 ;; Hardware stack levels required when called:    1
 13887 ;; This function calls:
 13888 ;;		i1_i2c_driver_restart
 13889 ;; This function is called by:
 13890 ;;		i1_do_I2C_TX
 13891 ;; This function uses a non-reentrant model
 13892 ;;
 13893                           
 13894                           
 13895                           ;psect for function i1_do_I2C_SEND_RESTART_WRITE
 13896  0848                     i1_do_I2C_SEND_RESTART_WRITE:	
 13897  0848                     i1l3657:	
 13898                           ;incstack = 0
 13899 ;; hardware stack exceeded
 13900                           ; Regs used in i1_do_I2C_SEND_RESTART_WRITE: [wreg+status,2+status,0+pclath+cstack]
 13901                           
 13902                           
 13903                           ;i2c_master.c: 262: i2c_driver_restart();
 13904  0848  3188  200F         	fcall	i1_i2c_driver_restart
 13905                           
 13906                           ;i2c_master.c: 263: return I2C_SEND_ADR_WRITE;
 13907  084A  3002               	movlw	2
 13908  084B  0008               	return
 13909  084C                     __end_ofi1_do_I2C_SEND_RESTART_WRITE:	
 13910                           
 13911                           	psect	text94
 13912  0844                     __ptext94:	
 13913 ;; *************** function i1_do_I2C_SEND_RESTART_READ *****************
 13914 ;; Defined at:
 13915 ;;		line 254 in file "mcc_generated_files/drivers/i2c_master.c"
 13916 ;; Parameters:    Size  Location     Type
 13917 ;;		None
 13918 ;; Auto vars:     Size  Location     Type
 13919 ;;		None
 13920 ;; Return value:  Size  Location     Type
 13921 ;;                  1    wreg      enum E12337
 13922 ;; Registers used:
 13923 ;;		wreg, status,2, status,0, pclath, cstack
 13924 ;; Tracked objects:
 13925 ;;		On entry : 0/0
 13926 ;;		On exit  : 0/0
 13927 ;;		Unchanged: 0/0
 13928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13929 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13930 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13931 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13932 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13933 ;;Total ram usage:        0 bytes
 13934 ;; Hardware stack levels used:    1
 13935 ;; Hardware stack levels required when called:    1
 13936 ;; This function calls:
 13937 ;;		i1_i2c_driver_restart
 13938 ;; This function is called by:
 13939 ;;		i1_do_I2C_TX
 13940 ;; This function uses a non-reentrant model
 13941 ;;
 13942                           
 13943                           
 13944                           ;psect for function i1_do_I2C_SEND_RESTART_READ
 13945  0844                     i1_do_I2C_SEND_RESTART_READ:	
 13946  0844                     i1l3651:	
 13947                           ;incstack = 0
 13948 ;; hardware stack exceeded
 13949                           ; Regs used in i1_do_I2C_SEND_RESTART_READ: [wreg+status,2+status,0+pclath+cstack]
 13950                           
 13951                           
 13952                           ;i2c_master.c: 256: i2c_driver_restart();
 13953  0844  3188  200F         	fcall	i1_i2c_driver_restart
 13954                           
 13955                           ;i2c_master.c: 257: return I2C_SEND_ADR_READ;
 13956  0846  3001               	movlw	1
 13957  0847  0008               	return
 13958  0848                     __end_ofi1_do_I2C_SEND_RESTART_READ:	
 13959                           
 13960                           	psect	text95
 13961  0871                     __ptext95:	
 13962 ;; *************** function i1_do_I2C_IDLE *****************
 13963 ;; Defined at:
 13964 ;;		line 247 in file "mcc_generated_files/drivers/i2c_master.c"
 13965 ;; Parameters:    Size  Location     Type
 13966 ;;		None
 13967 ;; Auto vars:     Size  Location     Type
 13968 ;;		None
 13969 ;; Return value:  Size  Location     Type
 13970 ;;                  1    wreg      enum E12337
 13971 ;; Registers used:
 13972 ;;		wreg, status,2
 13973 ;; Tracked objects:
 13974 ;;		On entry : 0/0
 13975 ;;		On exit  : 0/0
 13976 ;;		Unchanged: 0/0
 13977 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13978 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13979 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13980 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13981 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13982 ;;Total ram usage:        0 bytes
 13983 ;; Hardware stack levels used:    1
 13984 ;; This function calls:
 13985 ;;		Nothing
 13986 ;; This function is called by:
 13987 ;; This function uses a non-reentrant model
 13988 ;;
 13989                           
 13990                           
 13991                           ;psect for function i1_do_I2C_IDLE
 13992  0871                     i1_do_I2C_IDLE:	
 13993  0871                     i1l3869:	
 13994                           ;incstack = 0
 13995                           ; Regs used in i1_do_I2C_IDLE: [wreg+status,2]
 13996                           
 13997                           
 13998                           ;i2c_master.c: 249: i2c_status.busy = 0;
 13999  0871  0021               	movlb	1	; select bank1
 14000  0872  1020               	bcf	_i2c_status^(0+128),0
 14001                           
 14002                           ;i2c_master.c: 250: i2c_status.error = I2C_NOERR;
 14003  0873  01AB               	clrf	(_i2c_status^(0+128)+11)
 14004                           
 14005                           ;i2c_master.c: 251: return I2C_RESET;
 14006  0874  300E               	movlw	14
 14007  0875  0008               	return
 14008  0876                     __end_ofi1_do_I2C_IDLE:	
 14009                           
 14010                           	psect	text96
 14011  08C3                     __ptext96:	
 14012 ;; *************** function i1_do_I2C_RESET *****************
 14013 ;; Defined at:
 14014 ;;		line 239 in file "mcc_generated_files/drivers/i2c_master.c"
 14015 ;; Parameters:    Size  Location     Type
 14016 ;;		None
 14017 ;; Auto vars:     Size  Location     Type
 14018 ;;		None
 14019 ;; Return value:  Size  Location     Type
 14020 ;;                  1    wreg      enum E12337
 14021 ;; Registers used:
 14022 ;;		wreg, status,2, status,0, pclath, cstack
 14023 ;; Tracked objects:
 14024 ;;		On entry : 0/0
 14025 ;;		On exit  : 0/0
 14026 ;;		Unchanged: 0/0
 14027 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14028 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14029 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14030 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14031 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14032 ;;Total ram usage:        0 bytes
 14033 ;; Hardware stack levels used:    1
 14034 ;; Hardware stack levels required when called:    1
 14035 ;; This function calls:
 14036 ;;		i1_i2c_driver_resetBus
 14037 ;; This function is called by:
 14038 ;; This function uses a non-reentrant model
 14039 ;;
 14040                           
 14041                           
 14042                           ;psect for function i1_do_I2C_RESET
 14043  08C3                     i1_do_I2C_RESET:	
 14044  08C3                     i1l3859:	
 14045                           ;incstack = 0
 14046 ;; hardware stack exceeded
 14047                           ; Regs used in i1_do_I2C_RESET: [wreg+status,2+status,0+pclath+cstack]
 14048                           
 14049                           
 14050                           ;i2c_master.c: 241: i2c_driver_resetBus();
 14051  08C3  3188  2003         	fcall	i1_i2c_driver_resetBus
 14052                           
 14053                           ;i2c_master.c: 242: i2c_status.busy = 0;
 14054  08C5  0021               	movlb	1	; select bank1
 14055  08C6  1020               	bcf	_i2c_status^(0+128),0
 14056                           
 14057                           ;i2c_master.c: 243: i2c_status.error = I2C_NOERR;
 14058  08C7  01AB               	clrf	(_i2c_status^(0+128)+11)
 14059                           
 14060                           ;i2c_master.c: 244: return I2C_RESET;
 14061  08C8  300E               	movlw	14
 14062  08C9  0008               	return
 14063  08CA                     __end_ofi1_do_I2C_RESET:	
 14064                           
 14065                           	psect	text97
 14066  0C94                     __ptext97:	
 14067 ;; *************** function i1_do_I2C_TX_EMPTY *****************
 14068 ;; Defined at:
 14069 ;;		line 382 in file "mcc_generated_files/drivers/i2c_master.c"
 14070 ;; Parameters:    Size  Location     Type
 14071 ;;		None
 14072 ;; Auto vars:     Size  Location     Type
 14073 ;;		None
 14074 ;; Return value:  Size  Location     Type
 14075 ;;                  1    wreg      enum E12337
 14076 ;; Registers used:
 14077 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14078 ;; Tracked objects:
 14079 ;;		On entry : 0/0
 14080 ;;		On exit  : 0/0
 14081 ;;		Unchanged: 0/0
 14082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14083 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14084 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14085 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14086 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14087 ;;Total ram usage:        1 bytes
 14088 ;; Hardware stack levels used:    1
 14089 ;; Hardware stack levels required when called:    3
 14090 ;; This function calls:
 14091 ;;		Absolute function
 14092 ;;		i1_do_I2C_SEND_RESTART
 14093 ;;		i1_do_I2C_SEND_STOP
 14094 ;;		i1_i2c_restartWrite
 14095 ;;		i1_mssp_setIRQ
 14096 ;;		i1_rd1RegCompleteHandler
 14097 ;;		i1_rd2RegCompleteHandler
 14098 ;;		i1_rdBlkRegCompleteHandler
 14099 ;;		i1_returnReset
 14100 ;;		i1_returnStop
 14101 ;;		i1_wr1RegCompleteHandler
 14102 ;;		i1_wr2RegCompleteHandler
 14103 ;; This function is called by:
 14104 ;; This function uses a non-reentrant model
 14105 ;;
 14106                           
 14107                           
 14108                           ;psect for function i1_do_I2C_TX_EMPTY
 14109  0C94                     i1_do_I2C_TX_EMPTY:	
 14110  0C94                     i1l7203:	
 14111                           ;incstack = 0
 14112 ;; hardware stack exceeded
 14113                           ; Regs used in i1_do_I2C_TX_EMPTY: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14114                           
 14115                           
 14116                           ;i2c_master.c: 384: i2c_status.bufferFree = 1;
 14117  0C94  0021               	movlb	1	; select bank1
 14118  0C95  1520               	bsf	_i2c_status^(0+128),2
 14119                           
 14120                           ;i2c_master.c: 385: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
 14121  0C96  2CA1               	goto	i1l7221
 14122  0C97                     i1l7205:	
 14123                           ;i2c_master.c: 386: {
 14124                           ;i2c_master.c: 387: case i2c_restart_read:
 14125                           
 14126                           
 14127                           ;i2c_master.c: 388: case i2c_restart_write:
 14128                           ;i2c_master.c: 389: return do_I2C_SEND_RESTART();
 14129  0C97  3188  204C         	fcall	i1_do_I2C_SEND_RESTART
 14130  0C99  0008               	return
 14131  0C9A                     i1l7209:	
 14132                           ;i2c_master.c: 390: case i2c_continue:
 14133                           
 14134                           
 14135                           ;i2c_master.c: 391: mssp_setIRQ();
 14136  0C9A  3188  201B         	fcall	i1_mssp_setIRQ
 14137                           
 14138                           ;i2c_master.c: 392: return I2C_TX;
 14139  0C9C  3003               	movlw	3
 14140  0C9D  0008               	return
 14141  0C9E                     i1l7215:	
 14142                           ;i2c_master.c: 394: case i2c_stop:
 14143                           
 14144                           ;i2c_master.c: 393: default:
 14145                           
 14146                           
 14147                           ;i2c_master.c: 395: return do_I2C_SEND_STOP();
 14148  0C9E  3188  2050         	fcall	i1_do_I2C_SEND_STOP
 14149                           
 14150                           ;i2c_master.c: 396: }
 14151  0CA0  0008               	return
 14152  0CA1                     i1l7221:	
 14153  0CA1  0021               	movlb	1	; select bank1
 14154  0CA2  0838               	movf	(low ((_i2c_status| 0+24)))^(0+128),w
 14155  0CA3  00FA               	movwf	??i1_do_I2C_TX_EMPTY
 14156  0CA4  087A               	movf	??i1_do_I2C_TX_EMPTY,w
 14157  0CA5  00F9               	movwf	i1returnStop@p
 14158  0CA6  300C               	movlw	12
 14159  0CA7  3EA0               	addlw	(low (_i2c_status| 0))& (0+255)
 14160  0CA8  0086               	movwf	6
 14161  0CA9  0187               	clrf	7
 14162  0CAA  3F41               	moviw [1]fsr1
 14163  0CAB  008A               	movwf	10
 14164  0CAC  3F40               	moviw [0]fsr1
 14165  0CAD  000A               	callw
 14166  0CAE  318C               	pagesel	$
 14167                           
 14168                           ; Switch size 1, requested type "space"
 14169                           ; Number of cases is 4, Range of values is 1 to 4
 14170                           ; switch strategies available:
 14171                           ; Name         Instructions Cycles
 14172                           ; simple_byte           13     7 (average)
 14173                           ; direct_byte           17     9 (fixed)
 14174                           ; jumptable            263     9 (fixed)
 14175                           ;	Chosen strategy is simple_byte
 14176  0CAF  3A01               	xorlw	1	; case 1
 14177  0CB0  1903               	skipnz
 14178  0CB1  2C9E               	goto	i1l7215
 14179  0CB2  3A03               	xorlw	3	; case 2
 14180  0CB3  1903               	skipnz
 14181  0CB4  2C97               	goto	i1l7205
 14182  0CB5  3A01               	xorlw	1	; case 3
 14183  0CB6  1903               	skipnz
 14184  0CB7  2C97               	goto	i1l7205
 14185  0CB8  3A07               	xorlw	7	; case 4
 14186  0CB9  1903               	skipnz
 14187  0CBA  2C9A               	goto	i1l7209
 14188  0CBB  2C9E               	goto	i1l7215
 14189  0CBC  0008               	return
 14190  0CBD                     __end_ofi1_do_I2C_TX_EMPTY:	
 14191                           
 14192                           	psect	text98
 14193  081B                     __ptext98:	
 14194 ;; *************** function i1_mssp_setIRQ *****************
 14195 ;; Defined at:
 14196 ;;		line 58 in file "mcc_generated_files/i2c_driver.c"
 14197 ;; Parameters:    Size  Location     Type
 14198 ;;		None
 14199 ;; Auto vars:     Size  Location     Type
 14200 ;;		None
 14201 ;; Return value:  Size  Location     Type
 14202 ;;                  1    wreg      void 
 14203 ;; Registers used:
 14204 ;;		None
 14205 ;; Tracked objects:
 14206 ;;		On entry : 0/0
 14207 ;;		On exit  : 0/0
 14208 ;;		Unchanged: 0/0
 14209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14210 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14211 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14212 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14213 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14214 ;;Total ram usage:        0 bytes
 14215 ;; Hardware stack levels used:    1
 14216 ;; This function calls:
 14217 ;;		Nothing
 14218 ;; This function is called by:
 14219 ;;		i1_do_I2C_TX_EMPTY
 14220 ;; This function uses a non-reentrant model
 14221 ;;
 14222                           
 14223                           
 14224                           ;psect for function i1_mssp_setIRQ
 14225  081B                     i1_mssp_setIRQ:	
 14226                           
 14227                           ;i2c_driver.c: 60: PIR1bits.SSP1IF = 1;
 14228                           
 14229                           ;incstack = 0
 14230 ;; hardware stack exceeded
 14231                           ; Regs used in i1_mssp_setIRQ: []
 14232  081B  0020               	movlb	0	; select bank0
 14233  081C  1590               	bsf	16,3	;volatile
 14234  081D  0008               	return
 14235  081E                     __end_ofi1_mssp_setIRQ:	
 14236                           
 14237                           	psect	text99
 14238  097A                     __ptext99:	
 14239 ;; *************** function i1_i2c_driver_isNACK *****************
 14240 ;; Defined at:
 14241 ;;		line 161 in file "mcc_generated_files/i2c_driver.c"
 14242 ;; Parameters:    Size  Location     Type
 14243 ;;		None
 14244 ;; Auto vars:     Size  Location     Type
 14245 ;;		None
 14246 ;; Return value:  Size  Location     Type
 14247 ;;		None               void
 14248 ;; Registers used:
 14249 ;;		wreg, status,2, status,0
 14250 ;; Tracked objects:
 14251 ;;		On entry : 0/0
 14252 ;;		On exit  : 0/0
 14253 ;;		Unchanged: 0/0
 14254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14255 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14256 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14257 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14258 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14259 ;;Total ram usage:        1 bytes
 14260 ;; Hardware stack levels used:    1
 14261 ;; This function calls:
 14262 ;;		Nothing
 14263 ;; This function is called by:
 14264 ;;		i1_do_I2C_TX
 14265 ;;		i1_i2c_ISR
 14266 ;; This function uses a non-reentrant model
 14267 ;;
 14268                           
 14269                           
 14270                           ;psect for function i1_i2c_driver_isNACK
 14271  097A                     i1_i2c_driver_isNACK:	
 14272                           
 14273                           ;i2c_driver.c: 163: return SSP1CON2bits.ACKSTAT = 1;
 14274                           
 14275                           ;incstack = 0
 14276                           ; Regs used in i1_i2c_driver_isNACK: [wreg+status,2+status,0]
 14277  097A  0024               	movlb	4	; select bank4
 14278  097B  0816               	movf	22,w	;volatile
 14279  097C  39BF               	andlw	-65
 14280  097D  3840               	iorlw	64
 14281  097E  0096               	movwf	22	;volatile
 14282  097F  0E16               	swapf	22,w	;volatile
 14283  0980  0C89               	rrf	9,f
 14284  0981  0C89               	rrf	9,f
 14285  0982  3901               	andlw	1
 14286  0983  00F0               	movwf	??i1_i2c_driver_isNACK
 14287  0984  0C70               	rrf	??i1_i2c_driver_isNACK,w
 14288  0985  0008               	return
 14289  0986                     __end_ofi1_i2c_driver_isNACK:	
 14290                           
 14291                           	psect	text100
 14292  086C                     __ptext100:	
 14293 ;; *************** function i1_i2c_driver_TXData *****************
 14294 ;; Defined at:
 14295 ;;		line 186 in file "mcc_generated_files/i2c_driver.c"
 14296 ;; Parameters:    Size  Location     Type
 14297 ;;  d               1    wreg     unsigned char 
 14298 ;; Auto vars:     Size  Location     Type
 14299 ;;  d               1    0[COMMON] unsigned char 
 14300 ;; Return value:  Size  Location     Type
 14301 ;;                  1    wreg      void 
 14302 ;; Registers used:
 14303 ;;		wreg
 14304 ;; Tracked objects:
 14305 ;;		On entry : 0/0
 14306 ;;		On exit  : 0/0
 14307 ;;		Unchanged: 0/0
 14308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14310 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14311 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14312 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14313 ;;Total ram usage:        1 bytes
 14314 ;; Hardware stack levels used:    1
 14315 ;; This function calls:
 14316 ;;		Nothing
 14317 ;; This function is called by:
 14318 ;;		i1_do_I2C_SEND_ADR_READ
 14319 ;;		i1_do_I2C_SEND_ADR_WRITE
 14320 ;;		i1_do_I2C_TX
 14321 ;; This function uses a non-reentrant model
 14322 ;;
 14323                           
 14324                           
 14325                           ;psect for function i1_i2c_driver_TXData
 14326  086C                     i1_i2c_driver_TXData:	
 14327                           
 14328                           ;incstack = 0
 14329 ;; hardware stack exceeded
 14330                           ; Regs used in i1_i2c_driver_TXData: [wreg]
 14331                           ;i1i2c_driver_TXData@d stored from wreg
 14332  086C  00F0               	movwf	i1i2c_driver_TXData@d
 14333                           
 14334                           ;i2c_driver.c: 188: SSP1BUF = d;
 14335  086D  0870               	movf	i1i2c_driver_TXData@d,w
 14336  086E  0024               	movlb	4	; select bank4
 14337  086F  0091               	movwf	17	;volatile
 14338  0870  0008               	return
 14339  0871                     __end_ofi1_i2c_driver_TXData:	
 14340                           
 14341                           	psect	text101
 14342  0818                     __ptext101:	
 14343 ;; *************** function i1_i2c_driver_getRXData *****************
 14344 ;; Defined at:
 14345 ;;		line 171 in file "mcc_generated_files/i2c_driver.c"
 14346 ;; Parameters:    Size  Location     Type
 14347 ;;		None
 14348 ;; Auto vars:     Size  Location     Type
 14349 ;;		None
 14350 ;; Return value:  Size  Location     Type
 14351 ;;                  1    wreg      unsigned char 
 14352 ;; Registers used:
 14353 ;;		wreg
 14354 ;; Tracked objects:
 14355 ;;		On entry : 0/0
 14356 ;;		On exit  : 0/0
 14357 ;;		Unchanged: 0/0
 14358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14359 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14360 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14361 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14362 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14363 ;;Total ram usage:        0 bytes
 14364 ;; Hardware stack levels used:    1
 14365 ;; This function calls:
 14366 ;;		Nothing
 14367 ;; This function is called by:
 14368 ;;		i1_do_I2C_RX
 14369 ;; This function uses a non-reentrant model
 14370 ;;
 14371                           
 14372                           
 14373                           ;psect for function i1_i2c_driver_getRXData
 14374  0818                     i1_i2c_driver_getRXData:	
 14375                           
 14376                           ;i2c_driver.c: 173: return SSP1BUF;
 14377                           
 14378                           ;incstack = 0
 14379 ;; hardware stack exceeded
 14380                           ; Regs used in i1_i2c_driver_getRXData: [wreg]
 14381  0818  0024               	movlb	4	; select bank4
 14382  0819  0811               	movf	17,w	;volatile
 14383  081A  0008               	return
 14384  081B                     __end_ofi1_i2c_driver_getRXData:	
 14385                           
 14386                           	psect	text102
 14387  0840                     __ptext102:	
 14388 ;; *************** function i1_i2c_driver_sendNACK *****************
 14389 ;; Defined at:
 14390 ;;		line 202 in file "mcc_generated_files/i2c_driver.c"
 14391 ;; Parameters:    Size  Location     Type
 14392 ;;		None
 14393 ;; Auto vars:     Size  Location     Type
 14394 ;;		None
 14395 ;; Return value:  Size  Location     Type
 14396 ;;                  1    wreg      void 
 14397 ;; Registers used:
 14398 ;;		None
 14399 ;; Tracked objects:
 14400 ;;		On entry : 0/0
 14401 ;;		On exit  : 0/0
 14402 ;;		Unchanged: 0/0
 14403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14405 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14406 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14407 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14408 ;;Total ram usage:        0 bytes
 14409 ;; Hardware stack levels used:    1
 14410 ;; This function calls:
 14411 ;;		Nothing
 14412 ;; This function is called by:
 14413 ;;		i1_do_I2C_DO_NACK_STOP
 14414 ;;		i1_do_I2C_DO_NACK_RESTART
 14415 ;; This function uses a non-reentrant model
 14416 ;;
 14417                           
 14418                           
 14419                           ;psect for function i1_i2c_driver_sendNACK
 14420  0840                     i1_i2c_driver_sendNACK:	
 14421                           
 14422                           ;i2c_driver.c: 204: SSP1CON2bits.ACKDT = 1;
 14423                           
 14424                           ;incstack = 0
 14425 ;; hardware stack exceeded
 14426                           ; Regs used in i1_i2c_driver_sendNACK: []
 14427  0840  0024               	movlb	4	; select bank4
 14428  0841  1696               	bsf	22,5	;volatile
 14429                           
 14430                           ;i2c_driver.c: 205: SSP1CON2bits.ACKEN = 1;
 14431  0842  1616               	bsf	22,4	;volatile
 14432  0843  0008               	return
 14433  0844                     __end_ofi1_i2c_driver_sendNACK:	
 14434                           
 14435                           	psect	text103
 14436  0803                     __ptext103:	
 14437 ;; *************** function i1_i2c_driver_resetBus *****************
 14438 ;; Defined at:
 14439 ;;		line 141 in file "mcc_generated_files/i2c_driver.c"
 14440 ;; Parameters:    Size  Location     Type
 14441 ;;		None
 14442 ;; Auto vars:     Size  Location     Type
 14443 ;;		None
 14444 ;; Return value:  Size  Location     Type
 14445 ;;                  1    wreg      void 
 14446 ;; Registers used:
 14447 ;;		None
 14448 ;; Tracked objects:
 14449 ;;		On entry : 0/0
 14450 ;;		On exit  : 0/0
 14451 ;;		Unchanged: 0/0
 14452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14453 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14454 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14455 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14456 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14457 ;;Total ram usage:        0 bytes
 14458 ;; Hardware stack levels used:    1
 14459 ;; This function calls:
 14460 ;;		Nothing
 14461 ;; This function is called by:
 14462 ;;		i1_do_I2C_RESET
 14463 ;; This function uses a non-reentrant model
 14464 ;;
 14465                           
 14466                           
 14467                           ;psect for function i1_i2c_driver_resetBus
 14468  0803                     i1_i2c_driver_resetBus:	
 14469                           
 14470                           ;incstack = 0
 14471 ;; hardware stack exceeded
 14472                           ; Regs used in i1_i2c_driver_resetBus: []
 14473  0803  0008               	return
 14474  0804                     __end_ofi1_i2c_driver_resetBus:	
 14475                           
 14476                           	psect	text104
 14477  0815                     __ptext104:	
 14478 ;; *************** function i1_i2c_driver_startRX *****************
 14479 ;; Defined at:
 14480 ;;		line 166 in file "mcc_generated_files/i2c_driver.c"
 14481 ;; Parameters:    Size  Location     Type
 14482 ;;		None
 14483 ;; Auto vars:     Size  Location     Type
 14484 ;;		None
 14485 ;; Return value:  Size  Location     Type
 14486 ;;                  1    wreg      void 
 14487 ;; Registers used:
 14488 ;;		None
 14489 ;; Tracked objects:
 14490 ;;		On entry : 0/0
 14491 ;;		On exit  : 0/0
 14492 ;;		Unchanged: 0/0
 14493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14494 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14495 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14496 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14497 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14498 ;;Total ram usage:        0 bytes
 14499 ;; Hardware stack levels used:    1
 14500 ;; This function calls:
 14501 ;;		Nothing
 14502 ;; This function is called by:
 14503 ;;		i1_do_I2C_RCEN
 14504 ;; This function uses a non-reentrant model
 14505 ;;
 14506                           
 14507                           
 14508                           ;psect for function i1_i2c_driver_startRX
 14509  0815                     i1_i2c_driver_startRX:	
 14510                           
 14511                           ;i2c_driver.c: 168: SSP1CON2bits.RCEN = 1;
 14512                           
 14513                           ;incstack = 0
 14514 ;; hardware stack exceeded
 14515                           ; Regs used in i1_i2c_driver_startRX: []
 14516  0815  0024               	movlb	4	; select bank4
 14517  0816  1596               	bsf	22,3	;volatile
 14518  0817  0008               	return
 14519  0818                     __end_ofi1_i2c_driver_startRX:	
 14520                           
 14521                           	psect	text105
 14522  0002                     __ptext105:	
 14523 ;; *************** function i1_i2c_restartWrite *****************
 14524 ;; Defined at:
 14525 ;;		line 35 in file "mcc_generated_files/drivers/i2c_types.c"
 14526 ;; Parameters:    Size  Location     Type
 14527 ;;  p               1    9[COMMON] PTR void 
 14528 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 14529 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 14530 ;; Auto vars:     Size  Location     Type
 14531 ;;		None
 14532 ;; Return value:  Size  Location     Type
 14533 ;;                  1    wreg      enum E97
 14534 ;; Registers used:
 14535 ;;		wreg
 14536 ;; Tracked objects:
 14537 ;;		On entry : 0/0
 14538 ;;		On exit  : 0/0
 14539 ;;		Unchanged: 0/0
 14540 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14541 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14542 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14543 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14544 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14545 ;;Total ram usage:        1 bytes
 14546 ;; Hardware stack levels used:    1
 14547 ;; This function calls:
 14548 ;;		Nothing
 14549 ;; This function is called by:
 14550 ;; This function uses a non-reentrant model
 14551 ;;
 14552                           
 14553                           
 14554                           ;psect for function i1_i2c_restartWrite
 14555  0002                     i1_i2c_restartWrite:	
 14556  0002                     i1l3695:	
 14557                           ;incstack = 0
 14558 ;; hardware stack exceeded
 14559                           ; Regs used in i1_i2c_restartWrite: [wreg]
 14560                           
 14561                           
 14562                           ;i2c_types.c: 37: return i2c_restart_write;
 14563  0002  3003               	movlw	3
 14564  0003  0008               	return
 14565  0004                     __end_ofi1_i2c_restartWrite:	
 14566                           
 14567                           	psect	text106
 14568  0807                     __ptext106:	
 14569 ;; *************** function i1_returnReset *****************
 14570 ;; Defined at:
 14571 ;;		line 448 in file "mcc_generated_files/drivers/i2c_master.c"
 14572 ;; Parameters:    Size  Location     Type
 14573 ;;  p               1    9[COMMON] PTR void 
 14574 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 14575 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 14576 ;; Auto vars:     Size  Location     Type
 14577 ;;		None
 14578 ;; Return value:  Size  Location     Type
 14579 ;;                  1    wreg      enum E12171
 14580 ;; Registers used:
 14581 ;;		wreg
 14582 ;; Tracked objects:
 14583 ;;		On entry : 0/0
 14584 ;;		On exit  : 0/0
 14585 ;;		Unchanged: 0/0
 14586 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14587 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14588 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14589 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14590 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14591 ;;Total ram usage:        1 bytes
 14592 ;; Hardware stack levels used:    1
 14593 ;; This function calls:
 14594 ;;		Nothing
 14595 ;; This function is called by:
 14596 ;; This function uses a non-reentrant model
 14597 ;;
 14598                           
 14599                           
 14600                           ;psect for function i1_returnReset
 14601  0807                     i1_returnReset:	
 14602  0807                     i1l3691:	
 14603                           ;incstack = 0
 14604 ;; hardware stack exceeded
 14605                           ; Regs used in i1_returnReset: [wreg]
 14606                           
 14607                           
 14608                           ;i2c_master.c: 450: return i2c_reset_link;
 14609  0807  3005               	movlw	5
 14610  0808  0008               	return
 14611  0809                     __end_ofi1_returnReset:	
 14612                           
 14613                           	psect	text107
 14614  0805                     __ptext107:	
 14615 ;; *************** function i1_returnStop *****************
 14616 ;; Defined at:
 14617 ;;		line 443 in file "mcc_generated_files/drivers/i2c_master.c"
 14618 ;; Parameters:    Size  Location     Type
 14619 ;;  p               1    9[COMMON] PTR void 
 14620 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 14621 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 14622 ;; Auto vars:     Size  Location     Type
 14623 ;;		None
 14624 ;; Return value:  Size  Location     Type
 14625 ;;                  1    wreg      enum E12171
 14626 ;; Registers used:
 14627 ;;		wreg
 14628 ;; Tracked objects:
 14629 ;;		On entry : 0/0
 14630 ;;		On exit  : 0/0
 14631 ;;		Unchanged: 0/0
 14632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14633 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14634 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14635 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14636 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14637 ;;Total ram usage:        1 bytes
 14638 ;; Hardware stack levels used:    1
 14639 ;; This function calls:
 14640 ;;		Nothing
 14641 ;; This function is called by:
 14642 ;;		i1_setCallBack
 14643 ;;		_do_I2C_DO_ADDRESS_NACK
 14644 ;;		_do_I2C_TX
 14645 ;;		_do_I2C_RX
 14646 ;;		_do_I2C_TX_EMPTY
 14647 ;;		i1_do_I2C_DO_ADDRESS_NACK
 14648 ;;		i1_do_I2C_TX
 14649 ;;		i1_do_I2C_RX
 14650 ;;		i1_do_I2C_TX_EMPTY
 14651 ;; This function uses a non-reentrant model
 14652 ;;
 14653                           
 14654                           
 14655                           ;psect for function i1_returnStop
 14656  0805                     i1_returnStop:	
 14657  0805                     i1l3687:	
 14658                           ;incstack = 0
 14659 ;; hardware stack exceeded
 14660                           ; Regs used in i1_returnStop: [wreg]
 14661                           
 14662                           
 14663                           ;i2c_master.c: 445: return i2c_stop;
 14664  0805  3001               	movlw	1
 14665  0806  0008               	return
 14666  0807                     __end_ofi1_returnStop:	
 14667                           
 14668                           	psect	text108
 14669  0A5C                     __ptext108:	
 14670 ;; *************** function i1_rdBlkRegCompleteHandler *****************
 14671 ;; Defined at:
 14672 ;;		line 134 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 14673 ;; Parameters:    Size  Location     Type
 14674 ;;  p               1    9[COMMON] PTR void 
 14675 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 14676 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 14677 ;; Auto vars:     Size  Location     Type
 14678 ;;		None
 14679 ;; Return value:  Size  Location     Type
 14680 ;;                  1    wreg      enum E97
 14681 ;; Registers used:
 14682 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14683 ;; Tracked objects:
 14684 ;;		On entry : 0/0
 14685 ;;		On exit  : 0/0
 14686 ;;		Unchanged: 0/0
 14687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14688 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14689 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14690 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14691 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14692 ;;Total ram usage:        1 bytes
 14693 ;; Hardware stack levels used:    1
 14694 ;; Hardware stack levels required when called:    2
 14695 ;; This function calls:
 14696 ;;		i1_i2c_setBuffer
 14697 ;;		i1_i2c_setDataCompleteCallback
 14698 ;; This function is called by:
 14699 ;; This function uses a non-reentrant model
 14700 ;;
 14701                           
 14702                           
 14703                           ;psect for function i1_rdBlkRegCompleteHandler
 14704  0A5C                     i1_rdBlkRegCompleteHandler:	
 14705  0A5C                     i1l3645:	
 14706                           ;incstack = 0
 14707 ;; hardware stack exceeded
 14708                           ; Regs used in i1_rdBlkRegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 14709                           
 14710                           
 14711                           ;i2c_simple_master.c: 136: i2c_setBuffer(((buf_t *)p)->data,((buf_t*)p)->len);
 14712  0A5C  0879               	movf	i1rdBlkRegCompleteHandler@p,w
 14713  0A5D  3E02               	addlw	2
 14714  0A5E  0086               	movwf	6
 14715  0A5F  0187               	clrf	7
 14716  0A60  0801               	movf	1,w
 14717  0A61  00F0               	movwf	i1i2c_setBuffer@buffer
 14718  0A62  3000               	movlw	0
 14719  0A63  00F1               	movwf	i1i2c_setBuffer@buffer+1
 14720  0A64  0879               	movf	i1rdBlkRegCompleteHandler@p,w
 14721  0A65  0086               	movwf	6
 14722  0A66  0187               	clrf	7
 14723  0A67  3F40               	moviw [0]fsr1
 14724  0A68  00F2               	movwf	i1i2c_setBuffer@bufferSize
 14725  0A69  3F41               	moviw [1]fsr1
 14726  0A6A  00F3               	movwf	i1i2c_setBuffer@bufferSize+1
 14727  0A6B  3189  21AC  318A   	fcall	i1_i2c_setBuffer
 14728                           
 14729                           ;i2c_simple_master.c: 137: i2c_setDataCompleteCallback((0),(0));
 14730  0A6E  3000               	movlw	0
 14731  0A6F  00F5               	movwf	i1i2c_setDataCompleteCallback@cb
 14732  0A70  00F6               	movwf	i1i2c_setDataCompleteCallback@cb+1
 14733  0A71  01F7               	clrf	i1i2c_setDataCompleteCallback@p
 14734  0A72  3189  216E         	fcall	i1_i2c_setDataCompleteCallback
 14735                           
 14736                           ;i2c_simple_master.c: 138: return i2c_restart_read;
 14737  0A74  3002               	movlw	2
 14738  0A75  0008               	return
 14739  0A76                     __end_ofi1_rdBlkRegCompleteHandler:	
 14740                           
 14741                           	psect	text109
 14742  0A32                     __ptext109:	
 14743 ;; *************** function i1_rd2RegCompleteHandler *****************
 14744 ;; Defined at:
 14745 ;;		line 87 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 14746 ;; Parameters:    Size  Location     Type
 14747 ;;  p               1    9[COMMON] PTR void 
 14748 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 14749 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 14750 ;; Auto vars:     Size  Location     Type
 14751 ;;		None
 14752 ;; Return value:  Size  Location     Type
 14753 ;;                  1    wreg      enum E97
 14754 ;; Registers used:
 14755 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14756 ;; Tracked objects:
 14757 ;;		On entry : 0/0
 14758 ;;		On exit  : 0/0
 14759 ;;		Unchanged: 0/0
 14760 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14761 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14762 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14763 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14764 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14765 ;;Total ram usage:        1 bytes
 14766 ;; Hardware stack levels used:    1
 14767 ;; Hardware stack levels required when called:    2
 14768 ;; This function calls:
 14769 ;;		i1_i2c_setBuffer
 14770 ;;		i1_i2c_setDataCompleteCallback
 14771 ;; This function is called by:
 14772 ;; This function uses a non-reentrant model
 14773 ;;
 14774                           
 14775                           
 14776                           ;psect for function i1_rd2RegCompleteHandler
 14777  0A32                     i1_rd2RegCompleteHandler:	
 14778  0A32                     i1l3629:	
 14779                           ;incstack = 0
 14780 ;; hardware stack exceeded
 14781                           ; Regs used in i1_rd2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 14782                           
 14783                           
 14784                           ;i2c_simple_master.c: 89: i2c_setBuffer(p,2);
 14785  0A32  0879               	movf	i1rd2RegCompleteHandler@p,w
 14786  0A33  00F0               	movwf	i1i2c_setBuffer@buffer
 14787  0A34  39FF               	andlw	255
 14788  0A35  1D03               	skipz
 14789  0A36  3000               	movlw	0
 14790  0A37  00F1               	movwf	i1i2c_setBuffer@buffer+1
 14791  0A38  3002               	movlw	2
 14792  0A39  00F2               	movwf	i1i2c_setBuffer@bufferSize
 14793  0A3A  3000               	movlw	0
 14794  0A3B  00F3               	movwf	i1i2c_setBuffer@bufferSize+1
 14795  0A3C  3189  21AC  318A   	fcall	i1_i2c_setBuffer
 14796                           
 14797                           ;i2c_simple_master.c: 90: i2c_setDataCompleteCallback((0),(0));
 14798  0A3F  3000               	movlw	0
 14799  0A40  00F5               	movwf	i1i2c_setDataCompleteCallback@cb
 14800  0A41  00F6               	movwf	i1i2c_setDataCompleteCallback@cb+1
 14801  0A42  01F7               	clrf	i1i2c_setDataCompleteCallback@p
 14802  0A43  3189  216E         	fcall	i1_i2c_setDataCompleteCallback
 14803                           
 14804                           ;i2c_simple_master.c: 91: return i2c_restart_read;
 14805  0A45  3002               	movlw	2
 14806  0A46  0008               	return
 14807  0A47                     __end_ofi1_rd2RegCompleteHandler:	
 14808                           
 14809                           	psect	text110
 14810  0A1D                     __ptext110:	
 14811 ;; *************** function i1_rd1RegCompleteHandler *****************
 14812 ;; Defined at:
 14813 ;;		line 58 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 14814 ;; Parameters:    Size  Location     Type
 14815 ;;  p               1    9[COMMON] PTR void 
 14816 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 14817 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 14818 ;; Auto vars:     Size  Location     Type
 14819 ;;		None
 14820 ;; Return value:  Size  Location     Type
 14821 ;;                  1    wreg      enum E97
 14822 ;; Registers used:
 14823 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14824 ;; Tracked objects:
 14825 ;;		On entry : 0/0
 14826 ;;		On exit  : 0/0
 14827 ;;		Unchanged: 0/0
 14828 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14829 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14830 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14831 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14832 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14833 ;;Total ram usage:        1 bytes
 14834 ;; Hardware stack levels used:    1
 14835 ;; Hardware stack levels required when called:    2
 14836 ;; This function calls:
 14837 ;;		i1_i2c_setBuffer
 14838 ;;		i1_i2c_setDataCompleteCallback
 14839 ;; This function is called by:
 14840 ;; This function uses a non-reentrant model
 14841 ;;
 14842                           
 14843                           
 14844                           ;psect for function i1_rd1RegCompleteHandler
 14845  0A1D                     i1_rd1RegCompleteHandler:	
 14846  0A1D                     i1l3621:	
 14847                           ;incstack = 0
 14848 ;; hardware stack exceeded
 14849                           ; Regs used in i1_rd1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 14850                           
 14851                           
 14852                           ;i2c_simple_master.c: 60: i2c_setBuffer(p,1);
 14853  0A1D  0879               	movf	i1rd1RegCompleteHandler@p,w
 14854  0A1E  00F0               	movwf	i1i2c_setBuffer@buffer
 14855  0A1F  39FF               	andlw	255
 14856  0A20  1D03               	skipz
 14857  0A21  3000               	movlw	0
 14858  0A22  00F1               	movwf	i1i2c_setBuffer@buffer+1
 14859  0A23  3001               	movlw	1
 14860  0A24  00F2               	movwf	i1i2c_setBuffer@bufferSize
 14861  0A25  3000               	movlw	0
 14862  0A26  00F3               	movwf	i1i2c_setBuffer@bufferSize+1
 14863  0A27  3189  21AC  318A   	fcall	i1_i2c_setBuffer
 14864                           
 14865                           ;i2c_simple_master.c: 61: i2c_setDataCompleteCallback((0),(0));
 14866  0A2A  3000               	movlw	0
 14867  0A2B  00F5               	movwf	i1i2c_setDataCompleteCallback@cb
 14868  0A2C  00F6               	movwf	i1i2c_setDataCompleteCallback@cb+1
 14869  0A2D  01F7               	clrf	i1i2c_setDataCompleteCallback@p
 14870  0A2E  3189  216E         	fcall	i1_i2c_setDataCompleteCallback
 14871                           
 14872                           ;i2c_simple_master.c: 62: return i2c_restart_read;
 14873  0A30  3002               	movlw	2
 14874  0A31  0008               	return
 14875  0A32                     __end_ofi1_rd1RegCompleteHandler:	
 14876                           
 14877                           	psect	text111
 14878  0A08                     __ptext111:	
 14879 ;; *************** function i1_wr1RegCompleteHandler *****************
 14880 ;; Defined at:
 14881 ;;		line 31 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 14882 ;; Parameters:    Size  Location     Type
 14883 ;;  p               1    9[COMMON] PTR void 
 14884 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 14885 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 14886 ;; Auto vars:     Size  Location     Type
 14887 ;;		None
 14888 ;; Return value:  Size  Location     Type
 14889 ;;                  1    wreg      enum E97
 14890 ;; Registers used:
 14891 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14892 ;; Tracked objects:
 14893 ;;		On entry : 0/0
 14894 ;;		On exit  : 0/0
 14895 ;;		Unchanged: 0/0
 14896 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14897 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14898 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14899 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14900 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14901 ;;Total ram usage:        1 bytes
 14902 ;; Hardware stack levels used:    1
 14903 ;; Hardware stack levels required when called:    2
 14904 ;; This function calls:
 14905 ;;		i1_i2c_setBuffer
 14906 ;;		i1_i2c_setDataCompleteCallback
 14907 ;; This function is called by:
 14908 ;; This function uses a non-reentrant model
 14909 ;;
 14910                           
 14911                           
 14912                           ;psect for function i1_wr1RegCompleteHandler
 14913  0A08                     i1_wr1RegCompleteHandler:	
 14914  0A08                     i1l3613:	
 14915                           ;incstack = 0
 14916 ;; hardware stack exceeded
 14917                           ; Regs used in i1_wr1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 14918                           
 14919                           
 14920                           ;i2c_simple_master.c: 33: i2c_setBuffer(p,1);
 14921  0A08  0879               	movf	i1wr1RegCompleteHandler@p,w
 14922  0A09  00F0               	movwf	i1i2c_setBuffer@buffer
 14923  0A0A  39FF               	andlw	255
 14924  0A0B  1D03               	skipz
 14925  0A0C  3000               	movlw	0
 14926  0A0D  00F1               	movwf	i1i2c_setBuffer@buffer+1
 14927  0A0E  3001               	movlw	1
 14928  0A0F  00F2               	movwf	i1i2c_setBuffer@bufferSize
 14929  0A10  3000               	movlw	0
 14930  0A11  00F3               	movwf	i1i2c_setBuffer@bufferSize+1
 14931  0A12  3189  21AC  318A   	fcall	i1_i2c_setBuffer
 14932                           
 14933                           ;i2c_simple_master.c: 34: i2c_setDataCompleteCallback((0),(0));
 14934  0A15  3000               	movlw	0
 14935  0A16  00F5               	movwf	i1i2c_setDataCompleteCallback@cb
 14936  0A17  00F6               	movwf	i1i2c_setDataCompleteCallback@cb+1
 14937  0A18  01F7               	clrf	i1i2c_setDataCompleteCallback@p
 14938  0A19  3189  216E         	fcall	i1_i2c_setDataCompleteCallback
 14939                           
 14940                           ;i2c_simple_master.c: 35: return i2c_continue;
 14941  0A1B  3004               	movlw	4
 14942  0A1C  0008               	return
 14943  0A1D                     __end_ofi1_wr1RegCompleteHandler:	
 14944                           
 14945                           	psect	text112
 14946  09F3                     __ptext112:	
 14947 ;; *************** function i1_wr2RegCompleteHandler *****************
 14948 ;; Defined at:
 14949 ;;		line 110 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 14950 ;; Parameters:    Size  Location     Type
 14951 ;;  p               1    9[COMMON] PTR void 
 14952 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 14953 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 14954 ;; Auto vars:     Size  Location     Type
 14955 ;;		None
 14956 ;; Return value:  Size  Location     Type
 14957 ;;                  1    wreg      enum E97
 14958 ;; Registers used:
 14959 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14960 ;; Tracked objects:
 14961 ;;		On entry : 0/0
 14962 ;;		On exit  : 0/0
 14963 ;;		Unchanged: 0/0
 14964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14965 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14966 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14967 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14968 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14969 ;;Total ram usage:        1 bytes
 14970 ;; Hardware stack levels used:    1
 14971 ;; Hardware stack levels required when called:    2
 14972 ;; This function calls:
 14973 ;;		i1_i2c_setBuffer
 14974 ;;		i1_i2c_setDataCompleteCallback
 14975 ;; This function is called by:
 14976 ;; This function uses a non-reentrant model
 14977 ;;
 14978                           
 14979                           
 14980                           ;psect for function i1_wr2RegCompleteHandler
 14981  09F3                     i1_wr2RegCompleteHandler:	
 14982  09F3                     i1l3637:	
 14983                           ;incstack = 0
 14984 ;; hardware stack exceeded
 14985                           ; Regs used in i1_wr2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 14986                           
 14987                           
 14988                           ;i2c_simple_master.c: 112: i2c_setBuffer(p,2);
 14989  09F3  0879               	movf	i1wr2RegCompleteHandler@p,w
 14990  09F4  00F0               	movwf	i1i2c_setBuffer@buffer
 14991  09F5  39FF               	andlw	255
 14992  09F6  1D03               	skipz
 14993  09F7  3000               	movlw	0
 14994  09F8  00F1               	movwf	i1i2c_setBuffer@buffer+1
 14995  09F9  3002               	movlw	2
 14996  09FA  00F2               	movwf	i1i2c_setBuffer@bufferSize
 14997  09FB  3000               	movlw	0
 14998  09FC  00F3               	movwf	i1i2c_setBuffer@bufferSize+1
 14999  09FD  3189  21AC  3189   	fcall	i1_i2c_setBuffer
 15000                           
 15001                           ;i2c_simple_master.c: 113: i2c_setDataCompleteCallback((0),(0));
 15002  0A00  3000               	movlw	0
 15003  0A01  00F5               	movwf	i1i2c_setDataCompleteCallback@cb
 15004  0A02  00F6               	movwf	i1i2c_setDataCompleteCallback@cb+1
 15005  0A03  01F7               	clrf	i1i2c_setDataCompleteCallback@p
 15006  0A04  3189  216E         	fcall	i1_i2c_setDataCompleteCallback
 15007                           
 15008                           ;i2c_simple_master.c: 114: return i2c_continue;
 15009  0A06  3004               	movlw	4
 15010  0A07  0008               	return
 15011  0A08                     __end_ofi1_wr2RegCompleteHandler:	
 15012                           
 15013                           	psect	text113
 15014  096E                     __ptext113:	
 15015 ;; *************** function i1_i2c_setDataCompleteCallback *****************
 15016 ;; Defined at:
 15017 ;;		line 89 in file "mcc_generated_files/drivers/i2c_master.c"
 15018 ;; Parameters:    Size  Location     Type
 15019 ;;  cb              2    5[COMMON] PTR FTN(PTR void ,)enum 
 15020 ;;		 -> rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), rd2RegCompleteHandler(1), rd1RegCompleteHandler(1), 
 15021 ;;		 -> wr1RegCompleteHandler(1), Absolute function(1), 
 15022 ;;  p               1    7[COMMON] PTR void 
 15023 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 15024 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 15025 ;; Auto vars:     Size  Location     Type
 15026 ;;		None
 15027 ;; Return value:  Size  Location     Type
 15028 ;;                  1    wreg      void 
 15029 ;; Registers used:
 15030 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15031 ;; Tracked objects:
 15032 ;;		On entry : 0/0
 15033 ;;		On exit  : 0/0
 15034 ;;		Unchanged: 0/0
 15035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15036 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15037 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15038 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15039 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15040 ;;Total ram usage:        4 bytes
 15041 ;; Hardware stack levels used:    1
 15042 ;; Hardware stack levels required when called:    1
 15043 ;; This function calls:
 15044 ;;		i1_setCallBack
 15045 ;; This function is called by:
 15046 ;;		i1_wr1RegCompleteHandler
 15047 ;;		i1_rd1RegCompleteHandler
 15048 ;;		i1_rd2RegCompleteHandler
 15049 ;;		i1_wr2RegCompleteHandler
 15050 ;;		i1_rdBlkRegCompleteHandler
 15051 ;; This function uses a non-reentrant model
 15052 ;;
 15053                           
 15054                           
 15055                           ;psect for function i1_i2c_setDataCompleteCallback
 15056  096E                     i1_i2c_setDataCompleteCallback:	
 15057                           
 15058                           ;i2c_master.c: 91: setCallBack(i2c_dataComplete,cb,p);
 15059                           
 15060                           ;incstack = 0
 15061 ;; hardware stack exceeded
 15062                           ; Regs used in i1_i2c_setDataCompleteCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclat
      +                          h+cstack]
 15063  096E  0876               	movf	i1i2c_setDataCompleteCallback@cb+1,w
 15064  096F  00F1               	movwf	i1setCallBack@cb+1
 15065  0970  0875               	movf	i1i2c_setDataCompleteCallback@cb,w
 15066  0971  00F0               	movwf	i1setCallBack@cb
 15067  0972  0877               	movf	i1i2c_setDataCompleteCallback@p,w
 15068  0973  00F8               	movwf	??i1_i2c_setDataCompleteCallback
 15069  0974  0878               	movf	??i1_i2c_setDataCompleteCallback,w
 15070  0975  00F2               	movwf	i1setCallBack@p
 15071  0976  3000               	movlw	0
 15072  0977  318C  2401         	fcall	i1_setCallBack
 15073  0979  0008               	return
 15074  097A                     __end_ofi1_i2c_setDataCompleteCallback:	
 15075                           
 15076                           	psect	text114
 15077  0C01                     __ptext114:	
 15078 ;; *************** function i1_setCallBack *****************
 15079 ;; Defined at:
 15080 ;;		line 453 in file "mcc_generated_files/drivers/i2c_master.c"
 15081 ;; Parameters:    Size  Location     Type
 15082 ;;  idx             1    wreg     enum E12355
 15083 ;;  cb              2    0[COMMON] PTR FTN(PTR void ,)enum 
 15084 ;;		 -> rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), rd2RegCompleteHandler(1), rd1RegCompleteHandler(1), 
 15085 ;;		 -> i2c_restartWrite(1), wr1RegCompleteHandler(1), Absolute function(1), 
 15086 ;;  p               1    2[COMMON] PTR void 
 15087 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 15088 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 15089 ;; Auto vars:     Size  Location     Type
 15090 ;;  idx             1    4[COMMON] enum E12355
 15091 ;; Return value:  Size  Location     Type
 15092 ;;                  1    wreg      void 
 15093 ;; Registers used:
 15094 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15095 ;; Tracked objects:
 15096 ;;		On entry : 0/0
 15097 ;;		On exit  : 0/0
 15098 ;;		Unchanged: 0/0
 15099 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15100 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15101 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15102 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15103 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15104 ;;Total ram usage:        5 bytes
 15105 ;; Hardware stack levels used:    1
 15106 ;; This function calls:
 15107 ;;		Nothing
 15108 ;; This function is called by:
 15109 ;;		i1_i2c_setDataCompleteCallback
 15110 ;; This function uses a non-reentrant model
 15111 ;;
 15112                           
 15113                           
 15114                           ;psect for function i1_setCallBack
 15115  0C01                     i1_setCallBack:	
 15116                           
 15117                           ;incstack = 0
 15118 ;; hardware stack exceeded
 15119                           ; Regs used in i1_setCallBack: [wreg+fsr1l+fsr1h+status,2+status,0]
 15120                           ;i1setCallBack@idx stored from wreg
 15121  0C01  00F4               	movwf	i1setCallBack@idx
 15122                           
 15123                           ;i2c_master.c: 455: if(cb)
 15124  0C02  0870               	movf	i1setCallBack@cb,w
 15125  0C03  0471               	iorwf	i1setCallBack@cb+1,w
 15126  0C04  1903               	btfsc	3,2
 15127  0C05  2C17               	goto	i1l3283
 15128                           
 15129                           ;i2c_master.c: 456: {
 15130                           ;i2c_master.c: 457: i2c_status.callbackTable[idx] = cb;
 15131  0C06  3574               	lslf	i1setCallBack@idx,w
 15132  0C07  3EAC               	addlw	(low ((_i2c_status| 0+12)))& (0+255)
 15133  0C08  0086               	movwf	6
 15134  0C09  0187               	clrf	7
 15135  0C0A  0870               	movf	i1setCallBack@cb,w
 15136  0C0B  3FC0               	movwi [0]fsr1
 15137  0C0C  0871               	movf	i1setCallBack@cb+1,w
 15138  0C0D  3FC1               	movwi [1]fsr1
 15139                           
 15140                           ;i2c_master.c: 458: i2c_status.callbackPayload[idx] = p;
 15141  0C0E  0872               	movf	i1setCallBack@p,w
 15142  0C0F  00F3               	movwf	??i1_setCallBack
 15143  0C10  0874               	movf	i1setCallBack@idx,w
 15144  0C11  3EB8               	addlw	(low ((_i2c_status| 0+24)))& (0+255)
 15145  0C12  0086               	movwf	6
 15146  0C13  0187               	clrf	7
 15147  0C14  0873               	movf	??i1_setCallBack,w
 15148  0C15  0081               	movwf	1
 15149                           
 15150                           ;i2c_master.c: 459: }
 15151  0C16  0008               	return
 15152  0C17                     i1l3283:	
 15153                           
 15154                           ;i2c_master.c: 460: else
 15155                           ;i2c_master.c: 461: {
 15156                           ;i2c_master.c: 462: i2c_status.callbackTable[idx] = returnStop;
 15157  0C17  3574               	lslf	i1setCallBack@idx,w
 15158  0C18  3EAC               	addlw	(low ((_i2c_status| 0+12)))& (0+255)
 15159  0C19  0086               	movwf	6
 15160  0C1A  0187               	clrf	7
 15161  0C1B  3099               	movlw	low _returnStop
 15162  0C1C  3FC0               	movwi [0]fsr1
 15163  0C1D  3008               	movlw	high _returnStop
 15164  0C1E  3FC1               	movwi [1]fsr1
 15165                           
 15166                           ;i2c_master.c: 463: i2c_status.callbackPayload[idx] = (0);
 15167  0C1F  0874               	movf	i1setCallBack@idx,w
 15168  0C20  3EB8               	addlw	(low ((_i2c_status| 0+24)))& (0+255)
 15169  0C21  0086               	movwf	6
 15170  0C22  0187               	clrf	7
 15171  0C23  0181               	clrf	1
 15172  0C24  0008               	return
 15173  0C25                     __end_ofi1_setCallBack:	
 15174                           
 15175                           	psect	text115
 15176  09AC                     __ptext115:	
 15177 ;; *************** function i1_i2c_setBuffer *****************
 15178 ;; Defined at:
 15179 ;;		line 184 in file "mcc_generated_files/drivers/i2c_master.c"
 15180 ;; Parameters:    Size  Location     Type
 15181 ;;  buffer          2    0[COMMON] PTR void 
 15182 ;;		 -> writebuffer(17), i2c_readDataBlock@reg(1), i2c_readDataBlock@d(3), i2c_write2ByteRegister@reg(1), 
 15183 ;;		 -> i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@reg(1), i2c_read2ByteRegister@result(2), i2c_read1ByteRegi
      +ster@reg(1), 
 15184 ;;		 -> i2c_read1ByteRegister@d2(1), i2c_write1ByteRegister@reg(1), i2c_write1ByteRegister@data(1), NULL(0), 
 15185 ;;  bufferSize      2    2[COMMON] unsigned int 
 15186 ;; Auto vars:     Size  Location     Type
 15187 ;;		None
 15188 ;; Return value:  Size  Location     Type
 15189 ;;                  1    wreg      void 
 15190 ;; Registers used:
 15191 ;;		wreg
 15192 ;; Tracked objects:
 15193 ;;		On entry : 0/0
 15194 ;;		On exit  : 0/0
 15195 ;;		Unchanged: 0/0
 15196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15197 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15198 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15199 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15200 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15201 ;;Total ram usage:        4 bytes
 15202 ;; Hardware stack levels used:    1
 15203 ;; This function calls:
 15204 ;;		Nothing
 15205 ;; This function is called by:
 15206 ;;		i1_wr1RegCompleteHandler
 15207 ;;		i1_rd1RegCompleteHandler
 15208 ;;		i1_rd2RegCompleteHandler
 15209 ;;		i1_wr2RegCompleteHandler
 15210 ;;		i1_rdBlkRegCompleteHandler
 15211 ;; This function uses a non-reentrant model
 15212 ;;
 15213                           
 15214                           
 15215                           ;psect for function i1_i2c_setBuffer
 15216  09AC                     i1_i2c_setBuffer:	
 15217                           
 15218                           ;i2c_master.c: 186: if(i2c_status.bufferFree)
 15219                           
 15220                           ;incstack = 0
 15221 ;; hardware stack exceeded
 15222                           ; Regs used in i1_i2c_setBuffer: [wreg]
 15223  09AC  0021               	movlb	1	; select bank1
 15224  09AD  1D20               	btfss	_i2c_status^(0+128),2
 15225  09AE  0008               	return
 15226                           
 15227                           ;i2c_master.c: 187: {
 15228                           ;i2c_master.c: 188: i2c_status.data_ptr = buffer;
 15229  09AF  0871               	movf	i1i2c_setBuffer@buffer+1,w
 15230  09B0  00A3               	movwf	((low ((_i2c_status| 0+2))+1))^(0+128)
 15231  09B1  0870               	movf	i1i2c_setBuffer@buffer,w
 15232  09B2  00A2               	movwf	(low ((_i2c_status| 0+2)))^(0+128)
 15233                           
 15234                           ;i2c_master.c: 189: i2c_status.data_length = bufferSize;
 15235  09B3  0873               	movf	i1i2c_setBuffer@bufferSize+1,w
 15236  09B4  00A5               	movwf	((_i2c_status+1)^(0+128)+4)
 15237  09B5  0872               	movf	i1i2c_setBuffer@bufferSize,w
 15238  09B6  00A4               	movwf	(_i2c_status^(0+128)+4)
 15239                           
 15240                           ;i2c_master.c: 190: i2c_status.bufferFree = 0;
 15241  09B7  1120               	bcf	_i2c_status^(0+128),2
 15242  09B8  0008               	return
 15243  09B9                     __end_ofi1_i2c_setBuffer:	
 15244                           
 15245                           	psect	text116
 15246  0812                     __ptext116:	
 15247 ;; *************** function i1_i2c_driver_stop *****************
 15248 ;; Defined at:
 15249 ;;		line 156 in file "mcc_generated_files/i2c_driver.c"
 15250 ;; Parameters:    Size  Location     Type
 15251 ;;		None
 15252 ;; Auto vars:     Size  Location     Type
 15253 ;;		None
 15254 ;; Return value:  Size  Location     Type
 15255 ;;                  1    wreg      void 
 15256 ;; Registers used:
 15257 ;;		None
 15258 ;; Tracked objects:
 15259 ;;		On entry : 0/0
 15260 ;;		On exit  : 0/0
 15261 ;;		Unchanged: 0/0
 15262 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15263 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15264 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15265 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15266 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15267 ;;Total ram usage:        0 bytes
 15268 ;; Hardware stack levels used:    1
 15269 ;; This function calls:
 15270 ;;		Nothing
 15271 ;; This function is called by:
 15272 ;;		i1_do_I2C_SEND_STOP
 15273 ;; This function uses a non-reentrant model
 15274 ;;
 15275                           
 15276                           
 15277                           ;psect for function i1_i2c_driver_stop
 15278  0812                     i1_i2c_driver_stop:	
 15279                           
 15280                           ;i2c_driver.c: 158: SSP1CON2bits.PEN = 1;
 15281                           
 15282                           ;incstack = 0
 15283 ;; hardware stack exceeded
 15284                           ; Regs used in i1_i2c_driver_stop: []
 15285  0812  0024               	movlb	4	; select bank4
 15286  0813  1516               	bsf	22,2	;volatile
 15287  0814  0008               	return
 15288  0815                     __end_ofi1_i2c_driver_stop:	
 15289                           
 15290                           	psect	text117
 15291  080F                     __ptext117:	
 15292 ;; *************** function i1_i2c_driver_restart *****************
 15293 ;; Defined at:
 15294 ;;		line 151 in file "mcc_generated_files/i2c_driver.c"
 15295 ;; Parameters:    Size  Location     Type
 15296 ;;		None
 15297 ;; Auto vars:     Size  Location     Type
 15298 ;;		None
 15299 ;; Return value:  Size  Location     Type
 15300 ;;                  1    wreg      void 
 15301 ;; Registers used:
 15302 ;;		None
 15303 ;; Tracked objects:
 15304 ;;		On entry : 0/0
 15305 ;;		On exit  : 0/0
 15306 ;;		Unchanged: 0/0
 15307 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15308 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15309 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15310 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15311 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15312 ;;Total ram usage:        0 bytes
 15313 ;; Hardware stack levels used:    1
 15314 ;; This function calls:
 15315 ;;		Nothing
 15316 ;; This function is called by:
 15317 ;;		i1_do_I2C_SEND_RESTART_READ
 15318 ;;		i1_do_I2C_SEND_RESTART_WRITE
 15319 ;;		i1_do_I2C_SEND_RESTART
 15320 ;; This function uses a non-reentrant model
 15321 ;;
 15322                           
 15323                           
 15324                           ;psect for function i1_i2c_driver_restart
 15325  080F                     i1_i2c_driver_restart:	
 15326                           
 15327                           ;i2c_driver.c: 153: SSP1CON2bits.RSEN = 1;
 15328                           
 15329                           ;incstack = 0
 15330 ;; hardware stack exceeded
 15331                           ; Regs used in i1_i2c_driver_restart: []
 15332  080F  0024               	movlb	4	; select bank4
 15333  0810  1496               	bsf	22,1	;volatile
 15334  0811  0008               	return
 15335  0812                     __end_ofi1_i2c_driver_restart:	
 15336                           
 15337                           	psect	text118
 15338  083C                     __ptext118:	
 15339 ;; *************** function i1_i2c_driver_sendACK *****************
 15340 ;; Defined at:
 15341 ;;		line 196 in file "mcc_generated_files/i2c_driver.c"
 15342 ;; Parameters:    Size  Location     Type
 15343 ;;		None
 15344 ;; Auto vars:     Size  Location     Type
 15345 ;;		None
 15346 ;; Return value:  Size  Location     Type
 15347 ;;                  1    wreg      void 
 15348 ;; Registers used:
 15349 ;;		None
 15350 ;; Tracked objects:
 15351 ;;		On entry : 0/0
 15352 ;;		On exit  : 0/0
 15353 ;;		Unchanged: 0/0
 15354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15355 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15356 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15357 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15358 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15359 ;;Total ram usage:        0 bytes
 15360 ;; Hardware stack levels used:    1
 15361 ;; This function calls:
 15362 ;;		Nothing
 15363 ;; This function is called by:
 15364 ;;		i1_do_I2C_DO_ACK
 15365 ;;		i1_do_I2C_RX
 15366 ;; This function uses a non-reentrant model
 15367 ;;
 15368                           
 15369                           
 15370                           ;psect for function i1_i2c_driver_sendACK
 15371  083C                     i1_i2c_driver_sendACK:	
 15372                           
 15373                           ;i2c_driver.c: 198: SSP1CON2bits.ACKDT = 0;
 15374                           
 15375                           ;incstack = 0
 15376 ;; hardware stack exceeded
 15377                           ; Regs used in i1_i2c_driver_sendACK: []
 15378  083C  0024               	movlb	4	; select bank4
 15379  083D  1296               	bcf	22,5	;volatile
 15380                           
 15381                           ;i2c_driver.c: 199: SSP1CON2bits.ACKEN = 1;
 15382  083E  1616               	bsf	22,4	;volatile
 15383  083F  0008               	return
 15384  0840                     __end_ofi1_i2c_driver_sendACK:	
 15385                           
 15386                           	psect	text119
 15387  080C                     __ptext119:	
 15388 ;; *************** function _i2c_busCollisionISR *****************
 15389 ;; Defined at:
 15390 ;;		line 435 in file "mcc_generated_files/drivers/i2c_master.c"
 15391 ;; Parameters:    Size  Location     Type
 15392 ;;		None
 15393 ;; Auto vars:     Size  Location     Type
 15394 ;;		None
 15395 ;; Return value:  Size  Location     Type
 15396 ;;                  1    wreg      void 
 15397 ;; Registers used:
 15398 ;;		status,2, status,0, pclath, cstack
 15399 ;; Tracked objects:
 15400 ;;		On entry : 0/0
 15401 ;;		On exit  : 0/0
 15402 ;;		Unchanged: 0/0
 15403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15405 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15406 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15407 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15408 ;;Total ram usage:        0 bytes
 15409 ;; Hardware stack levels used:    1
 15410 ;; Hardware stack levels required when called:    1
 15411 ;; This function calls:
 15412 ;;		_i2c_driver_clearBusCollision
 15413 ;; This function is called by:
 15414 ;;		_i2c_open
 15415 ;;		_INTERRUPT_InterruptManager
 15416 ;; This function uses a non-reentrant model
 15417 ;;
 15418                           
 15419                           
 15420                           ;psect for function _i2c_busCollisionISR
 15421  080C                     _i2c_busCollisionISR:	
 15422                           
 15423                           ;i2c_master.c: 437: i2c_driver_clearBusCollision();
 15424                           
 15425                           ;incstack = 0
 15426                           ; Regs used in _i2c_busCollisionISR: [status,2+status,0+pclath+cstack]
 15427  080C  3188  2009         	fcall	_i2c_driver_clearBusCollision
 15428  080E  0008               	return
 15429  080F                     __end_of_i2c_busCollisionISR:	
 15430                           
 15431                           	psect	text120
 15432  0809                     __ptext120:	
 15433 ;; *************** function _i2c_driver_clearBusCollision *****************
 15434 ;; Defined at:
 15435 ;;		line 253 in file "mcc_generated_files/i2c_driver.c"
 15436 ;; Parameters:    Size  Location     Type
 15437 ;;		None
 15438 ;; Auto vars:     Size  Location     Type
 15439 ;;		None
 15440 ;; Return value:  Size  Location     Type
 15441 ;;                  1    wreg      void 
 15442 ;; Registers used:
 15443 ;;		None
 15444 ;; Tracked objects:
 15445 ;;		On entry : 0/0
 15446 ;;		On exit  : 0/0
 15447 ;;		Unchanged: 0/0
 15448 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15449 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15450 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15451 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15452 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15453 ;;Total ram usage:        0 bytes
 15454 ;; Hardware stack levels used:    1
 15455 ;; This function calls:
 15456 ;;		Nothing
 15457 ;; This function is called by:
 15458 ;;		_i2c_busCollisionISR
 15459 ;; This function uses a non-reentrant model
 15460 ;;
 15461                           
 15462                           
 15463                           ;psect for function _i2c_driver_clearBusCollision
 15464  0809                     _i2c_driver_clearBusCollision:	
 15465                           
 15466                           ;i2c_driver.c: 255: PIR2bits.BCL1IF = 0;
 15467                           
 15468                           ;incstack = 0
 15469                           ; Regs used in _i2c_driver_clearBusCollision: []
 15470  0809  0020               	movlb	0	; select bank0
 15471  080A  1191               	bcf	17,3	;volatile
 15472  080B  0008               	return
 15473  080C                     __end_of_i2c_driver_clearBusCollision:	
 15474                           
 15475                           	psect	text121
 15476  087B                     __ptext121:	
 15477 ;; *************** function _PIN_MANAGER_IOC *****************
 15478 ;; Defined at:
 15479 ;;		line 117 in file "mcc_generated_files/pin_manager.c"
 15480 ;; Parameters:    Size  Location     Type
 15481 ;;		None
 15482 ;; Auto vars:     Size  Location     Type
 15483 ;;		None
 15484 ;; Return value:  Size  Location     Type
 15485 ;;                  1    wreg      void 
 15486 ;; Registers used:
 15487 ;;		wreg, status,2, status,0, pclath, cstack
 15488 ;; Tracked objects:
 15489 ;;		On entry : 0/0
 15490 ;;		On exit  : 0/0
 15491 ;;		Unchanged: 0/0
 15492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15494 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15495 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15496 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15497 ;;Total ram usage:        0 bytes
 15498 ;; Hardware stack levels used:    1
 15499 ;; Hardware stack levels required when called:    2
 15500 ;; This function calls:
 15501 ;;		_IOCCF4_ISR
 15502 ;; This function is called by:
 15503 ;;		_INTERRUPT_InterruptManager
 15504 ;; This function uses a non-reentrant model
 15505 ;;
 15506                           
 15507                           
 15508                           ;psect for function _PIN_MANAGER_IOC
 15509  087B                     _PIN_MANAGER_IOC:	
 15510                           
 15511                           ;pin_manager.c: 120: if(IOCCFbits.IOCCF4 == 1)
 15512                           
 15513                           ;incstack = 0
 15514 ;; hardware stack exceeded
 15515                           ; Regs used in _PIN_MANAGER_IOC: [wreg+status,2+status,0+pclath+cstack]
 15516  087B  0027               	movlb	7	; select bank7
 15517  087C  1E19               	btfss	25,4	;volatile
 15518  087D  0008               	return
 15519                           
 15520                           ;pin_manager.c: 121: {
 15521                           ;pin_manager.c: 122: IOCCF4_ISR();
 15522  087E  3189  219F         	fcall	_IOCCF4_ISR
 15523  0880  0008               	return
 15524  0881                     __end_of_PIN_MANAGER_IOC:	
 15525                           
 15526                           	psect	text122
 15527  099F                     __ptext122:	
 15528 ;; *************** function _IOCCF4_ISR *****************
 15529 ;; Defined at:
 15530 ;;		line 131 in file "mcc_generated_files/pin_manager.c"
 15531 ;; Parameters:    Size  Location     Type
 15532 ;;		None
 15533 ;; Auto vars:     Size  Location     Type
 15534 ;;		None
 15535 ;; Return value:  Size  Location     Type
 15536 ;;                  1    wreg      void 
 15537 ;; Registers used:
 15538 ;;		wreg, status,2, status,0, pclath, cstack
 15539 ;; Tracked objects:
 15540 ;;		On entry : 0/0
 15541 ;;		On exit  : 0/0
 15542 ;;		Unchanged: 0/0
 15543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15544 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15545 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15546 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15547 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15548 ;;Total ram usage:        0 bytes
 15549 ;; Hardware stack levels used:    1
 15550 ;; Hardware stack levels required when called:    1
 15551 ;; This function calls:
 15552 ;;		Absolute function
 15553 ;;		_IOCCF4_DefaultInterruptHandler
 15554 ;;		_buttonInterrupt
 15555 ;; This function is called by:
 15556 ;;		_PIN_MANAGER_IOC
 15557 ;; This function uses a non-reentrant model
 15558 ;;
 15559                           
 15560                           
 15561                           ;psect for function _IOCCF4_ISR
 15562  099F                     _IOCCF4_ISR:	
 15563                           
 15564                           ;pin_manager.c: 136: if(IOCCF4_InterruptHandler)
 15565                           
 15566                           ;incstack = 0
 15567 ;; hardware stack exceeded
 15568                           ; Regs used in _IOCCF4_ISR: [wreg+status,2+status,0+pclath+cstack]
 15569  099F  0020               	movlb	0	; select bank0
 15570  09A0  086A               	movf	_IOCCF4_InterruptHandler,w
 15571  09A1  046B               	iorwf	_IOCCF4_InterruptHandler+1,w
 15572  09A2  1903               	btfsc	3,2
 15573  09A3  29A9               	goto	i1l7049
 15574                           
 15575                           ;pin_manager.c: 137: {
 15576                           ;pin_manager.c: 138: IOCCF4_InterruptHandler();
 15577  09A4  086B               	movf	_IOCCF4_InterruptHandler+1,w
 15578  09A5  008A               	movwf	10
 15579  09A6  086A               	movf	_IOCCF4_InterruptHandler,w
 15580  09A7  000A               	callw
 15581  09A8  3189               	pagesel	$
 15582  09A9                     i1l7049:	
 15583                           
 15584                           ;pin_manager.c: 139: }
 15585                           ;pin_manager.c: 140: IOCCFbits.IOCCF4 = 0;
 15586  09A9  0027               	movlb	7	; select bank7
 15587  09AA  1219               	bcf	25,4	;volatile
 15588  09AB  0008               	return
 15589  09AC                     __end_of_IOCCF4_ISR:	
 15590                           
 15591                           	psect	text123
 15592  0802                     __ptext123:	
 15593 ;; *************** function _IOCCF4_DefaultInterruptHandler *****************
 15594 ;; Defined at:
 15595 ;;		line 153 in file "mcc_generated_files/pin_manager.c"
 15596 ;; Parameters:    Size  Location     Type
 15597 ;;		None
 15598 ;; Auto vars:     Size  Location     Type
 15599 ;;		None
 15600 ;; Return value:  Size  Location     Type
 15601 ;;                  1    wreg      void 
 15602 ;; Registers used:
 15603 ;;		None
 15604 ;; Tracked objects:
 15605 ;;		On entry : 0/0
 15606 ;;		On exit  : 0/0
 15607 ;;		Unchanged: 0/0
 15608 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15609 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15610 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15611 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15612 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15613 ;;Total ram usage:        0 bytes
 15614 ;; Hardware stack levels used:    1
 15615 ;; This function calls:
 15616 ;;		Nothing
 15617 ;; This function is called by:
 15618 ;;		_PIN_MANAGER_Initialize
 15619 ;;		_IOCCF4_ISR
 15620 ;; This function uses a non-reentrant model
 15621 ;;
 15622                           
 15623                           
 15624                           ;psect for function _IOCCF4_DefaultInterruptHandler
 15625  0802                     _IOCCF4_DefaultInterruptHandler:	
 15626                           
 15627                           ;incstack = 0
 15628 ;; hardware stack exceeded
 15629                           ; Regs used in _IOCCF4_DefaultInterruptHandler: []
 15630  0802  0008               	return
 15631  0803                     __end_of_IOCCF4_DefaultInterruptHandler:	
 15632                           
 15633                           	psect	text124
 15634  0992                     __ptext124:	
 15635 ;; *************** function _buttonInterrupt *****************
 15636 ;; Defined at:
 15637 ;;		line 395 in file "main.c"
 15638 ;; Parameters:    Size  Location     Type
 15639 ;;		None
 15640 ;; Auto vars:     Size  Location     Type
 15641 ;;		None
 15642 ;; Return value:  Size  Location     Type
 15643 ;;                  1    wreg      void 
 15644 ;; Registers used:
 15645 ;;		wreg, status,2, status,0
 15646 ;; Tracked objects:
 15647 ;;		On entry : 0/0
 15648 ;;		On exit  : 0/0
 15649 ;;		Unchanged: 0/0
 15650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15652 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15653 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15654 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15655 ;;Total ram usage:        1 bytes
 15656 ;; Hardware stack levels used:    1
 15657 ;; This function calls:
 15658 ;;		Nothing
 15659 ;; This function is called by:
 15660 ;;		_main
 15661 ;;		_IOCCF4_ISR
 15662 ;; This function uses a non-reentrant model
 15663 ;;
 15664                           
 15665                           
 15666                           ;psect for function _buttonInterrupt
 15667  0992                     _buttonInterrupt:	
 15668                           
 15669                           ;main.c: 396: start = 1;
 15670                           
 15671                           ;incstack = 0
 15672 ;; hardware stack exceeded
 15673                           ; Regs used in _buttonInterrupt: [wreg+status,2+status,0]
 15674  0992  0021               	movlb	1	; select bank1
 15675  0993  01C2               	clrf	_start^(0+128)
 15676  0994  0AC2               	incf	_start^(0+128),f
 15677                           
 15678                           ;main.c: 397: fall = 0;
 15679  0995  0020               	movlb	0	; select bank0
 15680  0996  01E9               	clrf	_fall
 15681                           
 15682                           ;main.c: 398: if (gravityCounter < 255) {
 15683  0997  0A62               	incf	_gravityCounter,w
 15684  0998  1903               	btfsc	3,2
 15685  0999  0008               	return
 15686                           
 15687                           ;main.c: 399: gravityCounter = 255;
 15688  099A  30FF               	movlw	255
 15689  099B  00F0               	movwf	??_buttonInterrupt
 15690  099C  0870               	movf	??_buttonInterrupt,w
 15691  099D  00E2               	movwf	_gravityCounter
 15692  099E  0008               	return
 15693  099F                     __end_of_buttonInterrupt:	
 15694  007E                     btemp	set	126	;btemp
 15695  007E                     int$flags	set	126
 15696  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        194
    BSS         168
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     57      76
    BANK1            80      0      38
    BANK2            80      0      64
    BANK3            80      0      67
    BANK4            80      0      80
    BANK5            80      0      32
    BANK6            80      0      64
    BANK7            80     70      70
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    i2c_write1ByteRegister@data.data	PTR unsigned char  size(1) Largest target is 0

    i2c_read1ByteRegister@d2.data	PTR unsigned char  size(1) Largest target is 0

    i2c_read2ByteRegister@result.data	PTR unsigned char  size(1) Largest target is 0

    i2c_write2ByteRegister@data.data	PTR unsigned char  size(1) Largest target is 0

    do_I2C_TX$1709$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    do_I2C_RX$1715$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    do_I2C_TX_EMPTY$1721$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    i2c_ISR$1727	PTR const FTN()enum E12337 size(2) Largest target is 1
		 -> do_I2C_TX_EMPTY(), do_I2C_RX(), do_I2C_TX(), do_I2C_DO_ADDRESS_NACK(), 
		 -> do_I2C_DO_NACK_RESTART(), do_I2C_DO_NACK_STOP(), do_I2C_DO_ACK(), do_I2C_RCEN(), 
		 -> do_I2C_SEND_ADR_WRITE(), do_I2C_SEND_ADR_READ(), do_I2C_SEND_STOP(), do_I2C_SEND_RESTART(), 
		 -> do_I2C_SEND_RESTART_WRITE(), do_I2C_SEND_RESTART_READ(), do_I2C_IDLE(), do_I2C_RESET(), 

    do_I2C_TX_EMPTY$1726	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    do_I2C_TX_EMPTY$1721	PTR FTN(PTR void ,)enum E12171 size(2) Largest target is 1
		 -> returnReset(), returnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> rd2RegCompleteHandler(), rd1RegCompleteHandler(), i2c_restartWrite(), wr1RegCompleteHandler(), 
		 -> Absolute function(), 

    do_I2C_RX$1720	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    do_I2C_RX$1715	PTR FTN(PTR void ,)enum E12171 size(2) Largest target is 1
		 -> returnReset(), returnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> rd2RegCompleteHandler(), rd1RegCompleteHandler(), i2c_restartWrite(), wr1RegCompleteHandler(), 
		 -> Absolute function(), 

    do_I2C_TX$1714	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    do_I2C_TX$1709	PTR FTN(PTR void ,)enum E12171 size(2) Largest target is 1
		 -> returnReset(), returnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> rd2RegCompleteHandler(), rd1RegCompleteHandler(), i2c_restartWrite(), wr1RegCompleteHandler(), 
		 -> Absolute function(), 

    returnStop@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    returnReset@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    cb$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    cb$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    i2c_restartWrite@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    cb$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    S741$11$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    mssp_waitForEvent@timeout	PTR unsigned int  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    write@toWrite_1176	PTR unsigned char [7] size(2) Largest target is 8
		 -> write@letter_space(BANK7[8]), letter_r(BANK3[8]), letter_o(BANK2[8]), letter_c(BANK2[8]), 
		 -> letter_s(BANK2[8]), letter_hi(BANK3[8]), letter_w(BANK3[8]), letter_e(BANK2[8]), 
		 -> letter_n(BANK3[8]), letter_space(BANK2[8]), number_9(BANK4[8]), number_8(BANK4[8]), 
		 -> number_7(BANK4[8]), number_6(BANK4[8]), number_5(BANK4[8]), number_4(BANK4[8]), 
		 -> number_3(BANK4[8]), number_2(BANK4[8]), number_1(BANK4[8]), number_0(BANK4[8]), 

    write@toWrite_1170	PTR unsigned char [7] size(2) Largest target is 8
		 -> write@letter_space(BANK7[8]), letter_r(BANK3[8]), letter_o(BANK2[8]), letter_c(BANK2[8]), 
		 -> letter_s(BANK2[8]), letter_hi(BANK3[8]), letter_w(BANK3[8]), letter_e(BANK2[8]), 
		 -> letter_n(BANK3[8]), letter_space(BANK2[8]), number_9(BANK4[8]), number_8(BANK4[8]), 
		 -> number_7(BANK4[8]), number_6(BANK4[8]), number_5(BANK4[8]), number_4(BANK4[8]), 
		 -> number_3(BANK4[8]), number_2(BANK4[8]), number_1(BANK4[8]), number_0(BANK4[8]), 

    write@toWrite_1169	PTR unsigned char [8] size(2) Largest target is 8
		 -> write@letter_space(BANK7[8]), letter_r(BANK3[8]), letter_o(BANK2[8]), letter_c(BANK2[8]), 
		 -> letter_s(BANK2[8]), letter_hi(BANK3[8]), letter_w(BANK3[8]), letter_e(BANK2[8]), 
		 -> letter_n(BANK3[8]), letter_space(BANK2[8]), number_9(BANK4[8]), number_8(BANK4[8]), 
		 -> number_7(BANK4[8]), number_6(BANK4[8]), number_5(BANK4[8]), number_4(BANK4[8]), 
		 -> number_3(BANK4[8]), number_2(BANK4[8]), number_1(BANK4[8]), number_0(BANK4[8]), 

    write@toWrite	PTR unsigned char [5] size(2) Largest target is 8
		 -> write@letter_space(BANK7[8]), letter_r(BANK3[8]), letter_o(BANK2[8]), letter_c(BANK2[8]), 
		 -> letter_s(BANK2[8]), letter_hi(BANK3[8]), letter_w(BANK3[8]), letter_e(BANK2[8]), 
		 -> letter_n(BANK3[8]), letter_space(BANK2[8]), number_9(BANK4[8]), number_8(BANK4[8]), 
		 -> number_7(BANK4[8]), number_6(BANK4[8]), number_5(BANK4[8]), number_4(BANK4[8]), 
		 -> number_3(BANK4[8]), number_2(BANK4[8]), number_1(BANK4[8]), number_0(BANK4[8]), 

    writeWord@text	PTR PTR unsigned char  size(1) Largest target is 16
		 -> write@toWrite_1176(BANK7[14]), write@toWrite_1170(BANK7[14]), write@toWrite_1169(BANK7[16]), write@toWrite(BANK7[10]), 

    numberTable	PTR unsigned char [10] size(1) Largest target is 8
		 -> number_9(BANK4[8]), number_8(BANK4[8]), number_7(BANK4[8]), number_6(BANK4[8]), 
		 -> number_5(BANK4[8]), number_4(BANK4[8]), number_3(BANK4[8]), number_2(BANK4[8]), 
		 -> number_1(BANK4[8]), number_0(BANK4[8]), 

    FLASH_WriteBlock@flashWordArray	PTR unsigned int  size(1) Largest target is 64
		 -> zerobuf(BANK6[64]), 

    FLASH_WriteWord@ramBuf	PTR unsigned int  size(1) Largest target is 64
		 -> zerobuf(BANK6[64]), 

    setCallBack@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    setCallBack@cb	PTR FTN(PTR void ,)enum E12171 size(2) Largest target is 1
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 
		 -> i2c_restartWrite(), wr1RegCompleteHandler(), Absolute function(), 

    fsmStateTable	PTR const FTN()enum E12337[16] size(2) Largest target is 1
		 -> do_I2C_TX_EMPTY(), do_I2C_RX(), do_I2C_TX(), do_I2C_DO_ADDRESS_NACK(), 
		 -> do_I2C_DO_NACK_RESTART(), do_I2C_DO_NACK_STOP(), do_I2C_DO_ACK(), do_I2C_RCEN(), 
		 -> do_I2C_SEND_ADR_WRITE(), do_I2C_SEND_ADR_READ(), do_I2C_SEND_STOP(), do_I2C_SEND_RESTART(), 
		 -> do_I2C_SEND_RESTART_WRITE(), do_I2C_SEND_RESTART_READ(), do_I2C_IDLE(), do_I2C_RESET(), 

    i2c_setBuffer@buffer	PTR void  size(2) Largest target is 17
		 -> writebuffer(BANK3[17]), i2c_readDataBlock@reg(COMMON[1]), i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@reg(COMMON[1]), 
		 -> i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@reg(COMMON[1]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@reg(COMMON[1]), 
		 -> i2c_read1ByteRegister@d2(COMMON[1]), i2c_write1ByteRegister@reg(COMMON[1]), i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    i2c_setAddressNACKCallback@p	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    i2c_setAddressNACKCallback@cb	PTR FTN(PTR void ,)enum E12171 size(2) Largest target is 1
		 -> i2c_restartWrite(), 

    i2c_setDataCompleteCallback@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    i2c_setDataCompleteCallback@cb	PTR FTN(PTR void ,)enum E12171 size(2) Largest target is 1
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), Absolute function(), 

    S741$callbackPayload	PTR void [6] size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    i2c_status.callbackPayload	PTR void [6] size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    S741$callbackTable	PTR FTN(PTR void ,)enum E12171[6] size(2) Largest target is 1
		 -> returnReset(), returnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> rd2RegCompleteHandler(), rd1RegCompleteHandler(), i2c_restartWrite(), wr1RegCompleteHandler(), 
		 -> Absolute function(), 

    i2c_status.callbackTable	PTR FTN(PTR void ,)enum E12171[6] size(2) Largest target is 1
		 -> i1_returnStop(), returnReset(), returnStop(), rdBlkRegCompleteHandler(), 
		 -> wr2RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), i2c_restartWrite(), 
		 -> wr1RegCompleteHandler(), Absolute function(), 

    S741$data_ptr	PTR unsigned char  size(2) Largest target is 17
		 -> writebuffer(BANK3[17]), i2c_readDataBlock@reg(COMMON[1]), i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@reg(COMMON[1]), 
		 -> i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@reg(COMMON[1]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@reg(COMMON[1]), 
		 -> i2c_read1ByteRegister@d2(COMMON[1]), i2c_write1ByteRegister@reg(COMMON[1]), i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    i2c_status.data_ptr	PTR unsigned char  size(2) Largest target is 17
		 -> writebuffer(BANK3[17]), i2c_readDataBlock@reg(COMMON[1]), i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@reg(COMMON[1]), 
		 -> i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@reg(COMMON[1]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@reg(COMMON[1]), 
		 -> i2c_read1ByteRegister@d2(COMMON[1]), i2c_write1ByteRegister@reg(COMMON[1]), i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    d.data	PTR unsigned char  size(1) Largest target is 0

    S560$data	PTR unsigned char  size(1) Largest target is 0

    rdBlkRegCompleteHandler@p.data	PTR unsigned char  size(1) Largest target is 0

    rdBlkRegCompleteHandler@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    wr2RegCompleteHandler@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    rd2RegCompleteHandler@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    rd1RegCompleteHandler@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    i2c_writeNBytes@data	PTR void  size(1) Largest target is 17
		 -> writebuffer(BANK3[17]), 

    wr1RegCompleteHandler@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    i2c_driver_setI2cISR@f	PTR void  size(2) Largest target is 1
		 -> i2c_ISR(), 

    i2c_driver_i2cISR	PTR FTN()void  size(2) Largest target is 1
		 -> i2c_ISR(), Absolute function(), 

    i2c_driver_setBusCollisionISR@f	PTR void  size(2) Largest target is 1
		 -> i2c_busCollisionISR(), 

    i2c_driver_busCollisionISR	PTR FTN()void  size(2) Largest target is 1
		 -> i2c_busCollisionISR(), Absolute function(), 

    IOCCF4_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> buttonInterrupt(), IOCCF4_DefaultInterruptHandler(), 

    IOCCF4_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> buttonInterrupt(), Absolute function(), IOCCF4_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    i1_i2c_ISR->i1_do_I2C_TX
    i1_do_I2C_TX_EMPTY->i1_i2c_restartWrite
    i1_do_I2C_TX_EMPTY->i1_rd1RegCompleteHandler
    i1_do_I2C_TX_EMPTY->i1_rd2RegCompleteHandler
    i1_do_I2C_TX_EMPTY->i1_rdBlkRegCompleteHandler
    i1_do_I2C_TX_EMPTY->i1_returnReset
    i1_do_I2C_TX_EMPTY->i1_returnStop
    i1_do_I2C_TX_EMPTY->i1_wr1RegCompleteHandler
    i1_do_I2C_TX_EMPTY->i1_wr2RegCompleteHandler
    i1_do_I2C_TX->i1_i2c_restartWrite
    i1_do_I2C_TX->i1_rd1RegCompleteHandler
    i1_do_I2C_TX->i1_rd2RegCompleteHandler
    i1_do_I2C_TX->i1_rdBlkRegCompleteHandler
    i1_do_I2C_TX->i1_returnReset
    i1_do_I2C_TX->i1_returnStop
    i1_do_I2C_TX->i1_wr1RegCompleteHandler
    i1_do_I2C_TX->i1_wr2RegCompleteHandler
    i1_do_I2C_SEND_ADR_WRITE->i1_i2c_driver_TXData
    i1_do_I2C_SEND_ADR_READ->i1_i2c_driver_TXData
    i1_do_I2C_RX->i1_i2c_restartWrite
    i1_do_I2C_RX->i1_rd1RegCompleteHandler
    i1_do_I2C_RX->i1_rd2RegCompleteHandler
    i1_do_I2C_RX->i1_rdBlkRegCompleteHandler
    i1_do_I2C_RX->i1_returnReset
    i1_do_I2C_RX->i1_returnStop
    i1_do_I2C_RX->i1_wr1RegCompleteHandler
    i1_do_I2C_RX->i1_wr2RegCompleteHandler
    i1_do_I2C_DO_ADDRESS_NACK->i1_i2c_restartWrite
    i1_do_I2C_DO_ADDRESS_NACK->i1_rd1RegCompleteHandler
    i1_do_I2C_DO_ADDRESS_NACK->i1_rd2RegCompleteHandler
    i1_do_I2C_DO_ADDRESS_NACK->i1_rdBlkRegCompleteHandler
    i1_do_I2C_DO_ADDRESS_NACK->i1_returnReset
    i1_do_I2C_DO_ADDRESS_NACK->i1_returnStop
    i1_do_I2C_DO_ADDRESS_NACK->i1_wr1RegCompleteHandler
    i1_do_I2C_DO_ADDRESS_NACK->i1_wr2RegCompleteHandler
    i1_wr2RegCompleteHandler->i1_i2c_setDataCompleteCallback
    i1_wr1RegCompleteHandler->i1_i2c_setDataCompleteCallback
    i1_rdBlkRegCompleteHandler->i1_i2c_setDataCompleteCallback
    i1_rd2RegCompleteHandler->i1_i2c_setDataCompleteCallback
    i1_rd1RegCompleteHandler->i1_i2c_setDataCompleteCallback
    i1_i2c_setDataCompleteCallback->i1_setCallBack
    _IOCCF4_ISR->_buttonInterrupt

Critical Paths under _main in BANK0

    _main->_endGame
    _shiftWalls->_random
    _random->___awmod
    _rand->___lmul
    ___awmod->_rand
    _initializeDisplay->_i2c_writeNBytes
    _endGame->_write
    _write->_writeWord
    _writeWord->_writeDisplay
    _writeDisplay->_i2c_writeNBytes
    _i2c_setAddressNACKCallback->_setCallBack
    _i2c_open->_i2c_driver_setBusCollisionISR
    _i2c_open->_i2c_driver_setI2cISR
    _i2c_masterWrite->_i2c_masterOperation
    _i2c_poller->_i2c_ISR
    _i2c_ISR->_do_I2C_TX
    _do_I2C_TX_EMPTY->_i2c_restartWrite
    _do_I2C_TX_EMPTY->_rd1RegCompleteHandler
    _do_I2C_TX_EMPTY->_rd2RegCompleteHandler
    _do_I2C_TX_EMPTY->_rdBlkRegCompleteHandler
    _do_I2C_TX_EMPTY->_returnReset
    _do_I2C_TX_EMPTY->_returnStop
    _do_I2C_TX_EMPTY->_wr1RegCompleteHandler
    _do_I2C_TX_EMPTY->_wr2RegCompleteHandler
    _do_I2C_TX->_i2c_restartWrite
    _do_I2C_TX->_rd1RegCompleteHandler
    _do_I2C_TX->_rd2RegCompleteHandler
    _do_I2C_TX->_rdBlkRegCompleteHandler
    _do_I2C_TX->_returnReset
    _do_I2C_TX->_returnStop
    _do_I2C_TX->_wr1RegCompleteHandler
    _do_I2C_TX->_wr2RegCompleteHandler
    _do_I2C_SEND_ADR_WRITE->_i2c_driver_TXData
    _do_I2C_SEND_ADR_READ->_i2c_driver_TXData
    _do_I2C_RX->_i2c_restartWrite
    _do_I2C_RX->_rd1RegCompleteHandler
    _do_I2C_RX->_rd2RegCompleteHandler
    _do_I2C_RX->_rdBlkRegCompleteHandler
    _do_I2C_RX->_returnReset
    _do_I2C_RX->_returnStop
    _do_I2C_RX->_wr1RegCompleteHandler
    _do_I2C_RX->_wr2RegCompleteHandler
    _do_I2C_DO_ADDRESS_NACK->_i2c_restartWrite
    _do_I2C_DO_ADDRESS_NACK->_rd1RegCompleteHandler
    _do_I2C_DO_ADDRESS_NACK->_rd2RegCompleteHandler
    _do_I2C_DO_ADDRESS_NACK->_rdBlkRegCompleteHandler
    _do_I2C_DO_ADDRESS_NACK->_returnReset
    _do_I2C_DO_ADDRESS_NACK->_returnStop
    _do_I2C_DO_ADDRESS_NACK->_wr1RegCompleteHandler
    _do_I2C_DO_ADDRESS_NACK->_wr2RegCompleteHandler
    _wr2RegCompleteHandler->_i2c_setDataCompleteCallback
    _wr1RegCompleteHandler->_i2c_setDataCompleteCallback
    _rdBlkRegCompleteHandler->_i2c_setDataCompleteCallback
    _rd2RegCompleteHandler->_i2c_setDataCompleteCallback
    _rd1RegCompleteHandler->_i2c_setDataCompleteCallback
    _i2c_setDataCompleteCallback->_setCallBack
    _drawWalls->_reverse
    ___lwmod->___lwdiv
    _FLASH_WriteWord->_FLASH_WriteBlock
    _FLASH_WriteBlock->_FLASH_EraseBlock
    _PIN_MANAGER_Initialize->_IOCCF4_SetInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    _INTERRUPT_InterruptManager->i1_i2c_ISR

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    _endGame->_write

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  416806
                                             55 BANK0      2     2      0
                     _FLASH_ReadWord
                    _FLASH_WriteWord
         _IOCCF4_SetInterruptHandler
                  _SYSTEM_Initialize
                        _clearPixels
                          _drawPixel
                          _drawWalls
                            _endGame
                  _initializeDisplay
                         _shiftWalls
                       _writeDisplay
 ---------------------------------------------------------------------------------
 (1) _shiftWalls                                           6     6      0     910
                                             32 BANK0      6     6      0
                             _random
 ---------------------------------------------------------------------------------
 (2) _random                                               4     3      1     910
                                             28 BANK0      4     3      1
                            ___awmod
                               _rand
 ---------------------------------------------------------------------------------
 (3) _rand                                                 7     5      2     244
                                             14 BANK0      7     5      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     244
                                              2 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4     448
                                             21 BANK0      7     3      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (1) _initializeDisplay                                    1     1      0   99626
                                             24 BANK0      1     1      0
                    _i2c_writeNBytes
 ---------------------------------------------------------------------------------
 (1) _endGame                                              3     3      0  212565
                                             52 BANK0      3     3      0
                    _FLASH_WriteWord
                        _clearPixels
                              _write
                       _writeDisplay
 ---------------------------------------------------------------------------------
 (2) _write                                               71    71      0  110131
                                             51 BANK0      1     1      0
                                              0 BANK7     70    70      0
                            ___lwdiv
                            ___lwmod
                          _writeWord
 ---------------------------------------------------------------------------------
 (3) _writeWord                                           22    21      1  103993
                                             29 BANK0     22    21      1
                            ___awdiv
                        _clearPixels
                          _drawWalls
                       _writeDisplay
 ---------------------------------------------------------------------------------
 (1) _writeDisplay                                         5     5      0  100791
                                             24 BANK0      5     5      0
                            ___awdiv
                    _i2c_writeNBytes
 ---------------------------------------------------------------------------------
 (2) _i2c_writeNBytes                                      4     1      3   99626
                                             20 BANK0      4     1      3
                          _i2c_close
                    _i2c_masterWrite
                           _i2c_open
         _i2c_setAddressNACKCallback
                      _i2c_setBuffer
 ---------------------------------------------------------------------------------
 (3) _i2c_setAddressNACKCallback                           4     1      3    2259
                                              7 BANK0      4     1      3
                        _setCallBack
 ---------------------------------------------------------------------------------
 (3) _i2c_open                                             3     3      0     412
                                              4 BANK0      3     3      0
                    _i2c_driver_open
      _i2c_driver_setBusCollisionISR
               _i2c_driver_setI2cISR
                      _mssp_clearIRQ
 ---------------------------------------------------------------------------------
 (4) _i2c_driver_setI2cISR                                 2     0      2     121
                                              2 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _i2c_driver_setBusCollisionISR                        2     0      2     121
                                              2 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _i2c_driver_open                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2c_masterWrite                                      0     0      0   94222
                _i2c_masterOperation
 ---------------------------------------------------------------------------------
 (4) _i2c_masterOperation                                  3     3      0   94222
                                             17 BANK0      3     3      0
                   _i2c_driver_start
                         _i2c_poller
                  _mssp_IRQisEnabled
 ---------------------------------------------------------------------------------
 (5) _mssp_IRQisEnabled                                    2     2      0       0
                                              2 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (5) _i2c_poller                                           0     0      0   94052
                            _i2c_ISR
                  _mssp_waitForEvent
 ---------------------------------------------------------------------------------
 (6) _mssp_waitForEvent                                    1     1      0      55
                                              2 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _i2c_ISR                                              1     1      0   93997
                                             16 BANK0      1     1      0
                      _do_I2C_DO_ACK *
             _do_I2C_DO_ADDRESS_NACK *
             _do_I2C_DO_NACK_RESTART *
                _do_I2C_DO_NACK_STOP *
                        _do_I2C_IDLE *
                        _do_I2C_RCEN *
                       _do_I2C_RESET *
                          _do_I2C_RX *
               _do_I2C_SEND_ADR_READ *
              _do_I2C_SEND_ADR_WRITE *
                _do_I2C_SEND_RESTART *
           _do_I2C_SEND_RESTART_READ *
          _do_I2C_SEND_RESTART_WRITE *
                   _do_I2C_SEND_STOP *
                          _do_I2C_TX *
                    _do_I2C_TX_EMPTY *
                  _i2c_driver_isNACK
                      _mssp_clearIRQ
 ---------------------------------------------------------------------------------
 (7) _do_I2C_TX_EMPTY                                      1     1      0   23451
                                             12 BANK0      1     1      0
                   Absolute function *
                _do_I2C_SEND_RESTART
                   _do_I2C_SEND_STOP
                   _i2c_restartWrite *
                        _mssp_setIRQ
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
                        _returnReset *
                         _returnStop *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (8) _mssp_setIRQ                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_TX                                            4     4      0   23582
                                             12 BANK0      4     4      0
                   Absolute function *
           _do_I2C_SEND_RESTART_READ
          _do_I2C_SEND_RESTART_WRITE
                   _do_I2C_SEND_STOP
                  _i2c_driver_TXData
                  _i2c_driver_isNACK
                   _i2c_restartWrite *
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
                        _returnReset *
                         _returnStop *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (7) _i2c_driver_isNACK                                    1     1      0       0
                                              2 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (8) _do_I2C_SEND_RESTART_WRITE                            0     0      0       0
                 _i2c_driver_restart
 ---------------------------------------------------------------------------------
 (8) _do_I2C_SEND_RESTART_READ                             0     0      0       0
                 _i2c_driver_restart
 ---------------------------------------------------------------------------------
 (7) _do_I2C_SEND_ADR_WRITE                                0     0      0      31
                  _i2c_driver_TXData
 ---------------------------------------------------------------------------------
 (7) _do_I2C_SEND_ADR_READ                                 0     0      0      31
                  _i2c_driver_TXData
 ---------------------------------------------------------------------------------
 (8) _i2c_driver_TXData                                    1     1      0      31
                                              2 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_RX                                            1     1      0   23451
                                             12 BANK0      1     1      0
                   Absolute function *
             _do_I2C_DO_NACK_RESTART
                _do_I2C_DO_NACK_STOP
               _i2c_driver_getRXData
                 _i2c_driver_sendACK
                   _i2c_restartWrite *
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
                        _returnReset *
                         _returnStop *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (8) _i2c_driver_getRXData                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _do_I2C_DO_NACK_STOP                                  0     0      0       0
                _i2c_driver_sendNACK
 ---------------------------------------------------------------------------------
 (8) _do_I2C_DO_NACK_RESTART                               0     0      0       0
                _i2c_driver_sendNACK
 ---------------------------------------------------------------------------------
 (9) _i2c_driver_sendNACK                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_RESET                                         0     0      0       0
                _i2c_driver_resetBus
 ---------------------------------------------------------------------------------
 (8) _i2c_driver_resetBus                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_RCEN                                          0     0      0       0
                 _i2c_driver_startRX
 ---------------------------------------------------------------------------------
 (8) _i2c_driver_startRX                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_IDLE                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_DO_ADDRESS_NACK                               1     1      0   23451
                                             12 BANK0      1     1      0
                   Absolute function *
                _do_I2C_SEND_RESTART
                   _do_I2C_SEND_STOP
                   _i2c_restartWrite *
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
                        _returnReset *
                         _returnStop *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (8) _wr2RegCompleteHandler                                1     0      1    4632
                                             11 BANK0      1     0      1
                      _i2c_setBuffer
        _i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (8) _wr1RegCompleteHandler                                1     0      1    4632
                                             11 BANK0      1     0      1
                      _i2c_setBuffer
        _i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (8) _returnStop                                           1     0      1     108
                                             11 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (8) _returnReset                                          1     0      1     152
                                             11 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (8) _rdBlkRegCompleteHandler                              1     0      1    4663
                                             11 BANK0      1     0      1
                      _i2c_setBuffer
        _i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (8) _rd2RegCompleteHandler                                1     0      1    4632
                                             11 BANK0      1     0      1
                      _i2c_setBuffer
        _i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (8) _rd1RegCompleteHandler                                1     0      1    4632
                                             11 BANK0      1     0      1
                      _i2c_setBuffer
        _i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (9) _i2c_setDataCompleteCallback                          4     1      3    2979
                                              7 BANK0      4     1      3
                        _setCallBack
 ---------------------------------------------------------------------------------
 (4) _setCallBack                                          5     2      3    1117
                                              2 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (3) _i2c_setBuffer                                        4     0      4    1622
                                              2 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (8) _i2c_restartWrite                                     1     0      1       0
                                             11 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (8) _do_I2C_SEND_STOP                                     0     0      0       0
                    _i2c_driver_stop
 ---------------------------------------------------------------------------------
 (9) _i2c_driver_stop                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _do_I2C_SEND_RESTART                                  0     0      0       0
                 _i2c_driver_restart
 ---------------------------------------------------------------------------------
 (9) _i2c_driver_restart                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (17) Absolute function(Fake)                              1     0      1       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_DO_ACK                                        0     0      0       0
                 _i2c_driver_sendACK
 ---------------------------------------------------------------------------------
 (8) _i2c_driver_sendACK                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2c_driver_start                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2c_close                                            2     2      0      37
                                              2 BANK0      2     2      0
                      _mssp_clearIRQ
                    _mssp_disableIRQ
 ---------------------------------------------------------------------------------
 (4) _mssp_disableIRQ                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _mssp_clearIRQ                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4    1165
                                              2 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (4) _drawWalls                                            3     3      0     226
                                              6 BANK0      3     3      0
                            _reverse
 ---------------------------------------------------------------------------------
 (5) _reverse                                              4     4      0     226
                                              2 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _clearPixels                                          1     1      0       0
                                              2 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4    1132
                                             10 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     961
                                              2 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _FLASH_WriteWord                                     10     5      5    1573
                                             15 BANK0     10     5      5
                     _FLASH_ReadWord
                   _FLASH_WriteBlock
 ---------------------------------------------------------------------------------
 (3) _FLASH_WriteBlock                                    10     7      3     608
                                              5 BANK0     10     7      3
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (4) _FLASH_EraseBlock                                     3     1      2     143
                                              2 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _FLASH_ReadWord                                       3     1      2     219
                                              2 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _drawPixel                                            9     7      2     548
                                              2 BANK0      9     7      2
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     174
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0     174
         _IOCCF4_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _IOCCF4_SetInterruptHandler                           2     0      2     174
                                              2 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 17
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (14) _INTERRUPT_InterruptManager                          1     1      0   14890
                                              1 BANK0      1     1      0
                   Absolute function *
                    _PIN_MANAGER_IOC
                _i2c_busCollisionISR *
                          i1_i2c_ISR *
 ---------------------------------------------------------------------------------
 (15) i1_i2c_ISR                                           1     1      0   14890
                                              0 BANK0      1     1      0
                    i1_do_I2C_DO_ACK *
           i1_do_I2C_DO_ADDRESS_NACK *
           i1_do_I2C_DO_NACK_RESTART *
              i1_do_I2C_DO_NACK_STOP *
                      i1_do_I2C_IDLE *
                      i1_do_I2C_RCEN *
                     i1_do_I2C_RESET *
                        i1_do_I2C_RX *
             i1_do_I2C_SEND_ADR_READ *
            i1_do_I2C_SEND_ADR_WRITE *
              i1_do_I2C_SEND_RESTART *
         i1_do_I2C_SEND_RESTART_READ *
        i1_do_I2C_SEND_RESTART_WRITE *
                 i1_do_I2C_SEND_STOP *
                        i1_do_I2C_TX *
                  i1_do_I2C_TX_EMPTY *
                i1_i2c_driver_isNACK
                    i1_mssp_clearIRQ
 ---------------------------------------------------------------------------------
 (16) i1_mssp_clearIRQ                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (16) i1_do_I2C_TX_EMPTY                                   1     1      0    3681
                                             10 COMMON     1     1      0
                   Absolute function *
              i1_do_I2C_SEND_RESTART
                 i1_do_I2C_SEND_STOP
                 i1_i2c_restartWrite *
                      i1_mssp_setIRQ
            i1_rd1RegCompleteHandler *
            i1_rd2RegCompleteHandler *
          i1_rdBlkRegCompleteHandler *
                      i1_returnReset *
                       i1_returnStop *
            i1_wr1RegCompleteHandler *
            i1_wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (17) i1_mssp_setIRQ                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (16) i1_do_I2C_TX                                         4     4      0    3803
                                             10 COMMON     4     4      0
                   Absolute function *
         i1_do_I2C_SEND_RESTART_READ
        i1_do_I2C_SEND_RESTART_WRITE
                 i1_do_I2C_SEND_STOP
                i1_i2c_driver_TXData
                i1_i2c_driver_isNACK
                 i1_i2c_restartWrite *
            i1_rd1RegCompleteHandler *
            i1_rd2RegCompleteHandler *
          i1_rdBlkRegCompleteHandler *
                      i1_returnReset *
                       i1_returnStop *
            i1_wr1RegCompleteHandler *
            i1_wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (16) i1_i2c_driver_isNACK                                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (17) i1_do_I2C_SEND_RESTART_WRITE                         0     0      0       0
               i1_i2c_driver_restart
 ---------------------------------------------------------------------------------
 (17) i1_do_I2C_SEND_RESTART_READ                          0     0      0       0
               i1_i2c_driver_restart
 ---------------------------------------------------------------------------------
 (16) i1_do_I2C_SEND_ADR_WRITE                             0     0      0      22
                i1_i2c_driver_TXData
 ---------------------------------------------------------------------------------
 (16) i1_do_I2C_SEND_ADR_READ                              0     0      0      22
                i1_i2c_driver_TXData
 ---------------------------------------------------------------------------------
 (17) i1_i2c_driver_TXData                                 1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (16) i1_do_I2C_RX                                         1     1      0    3681
                                             10 COMMON     1     1      0
                   Absolute function *
           i1_do_I2C_DO_NACK_RESTART
              i1_do_I2C_DO_NACK_STOP
             i1_i2c_driver_getRXData
               i1_i2c_driver_sendACK
                 i1_i2c_restartWrite *
            i1_rd1RegCompleteHandler *
            i1_rd2RegCompleteHandler *
          i1_rdBlkRegCompleteHandler *
                      i1_returnReset *
                       i1_returnStop *
            i1_wr1RegCompleteHandler *
            i1_wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (17) i1_i2c_driver_getRXData                              0     0      0       0
 ---------------------------------------------------------------------------------
 (17) i1_do_I2C_DO_NACK_STOP                               0     0      0       0
              i1_i2c_driver_sendNACK
 ---------------------------------------------------------------------------------
 (17) i1_do_I2C_DO_NACK_RESTART                            0     0      0       0
              i1_i2c_driver_sendNACK
 ---------------------------------------------------------------------------------
 (18) i1_i2c_driver_sendNACK                               0     0      0       0
 ---------------------------------------------------------------------------------
 (16) i1_do_I2C_RESET                                      0     0      0       0
              i1_i2c_driver_resetBus
 ---------------------------------------------------------------------------------
 (17) i1_i2c_driver_resetBus                               0     0      0       0
 ---------------------------------------------------------------------------------
 (16) i1_do_I2C_RCEN                                       0     0      0       0
               i1_i2c_driver_startRX
 ---------------------------------------------------------------------------------
 (17) i1_i2c_driver_startRX                                0     0      0       0
 ---------------------------------------------------------------------------------
 (16) i1_do_I2C_IDLE                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (16) i1_do_I2C_DO_ADDRESS_NACK                            1     1      0    3681
                                             10 COMMON     1     1      0
                   Absolute function *
              i1_do_I2C_SEND_RESTART
                 i1_do_I2C_SEND_STOP
                 i1_i2c_restartWrite *
            i1_rd1RegCompleteHandler *
            i1_rd2RegCompleteHandler *
          i1_rdBlkRegCompleteHandler *
                      i1_returnReset *
                       i1_returnStop *
            i1_wr1RegCompleteHandler *
            i1_wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (17) i1_wr2RegCompleteHandler                             1     0      1     711
                                              9 COMMON     1     0      1
                    i1_i2c_setBuffer
      i1_i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (17) i1_wr1RegCompleteHandler                             1     0      1     711
                                              9 COMMON     1     0      1
                    i1_i2c_setBuffer
      i1_i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (17) i1_returnStop                                        1     0      1      76
                                              9 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (17) i1_returnReset                                       1     0      1      28
                                              9 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (17) i1_rdBlkRegCompleteHandler                           1     0      1     733
                                              9 COMMON     1     0      1
                    i1_i2c_setBuffer
      i1_i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (17) i1_rd2RegCompleteHandler                             1     0      1     711
                                              9 COMMON     1     0      1
                    i1_i2c_setBuffer
      i1_i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (17) i1_rd1RegCompleteHandler                             1     0      1     711
                                              9 COMMON     1     0      1
                    i1_i2c_setBuffer
      i1_i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (18) i1_i2c_setDataCompleteCallback                       4     1      3     510
                                              5 COMMON     4     1      3
                      i1_setCallBack
 ---------------------------------------------------------------------------------
 (19) i1_setCallBack                                       5     2      3     206
                                              0 COMMON     5     2      3
 ---------------------------------------------------------------------------------
 (18) i1_i2c_setBuffer                                     4     0      4     179
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (17) i1_i2c_restartWrite                                  1     0      1       0
                                              9 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (17) i1_do_I2C_SEND_STOP                                  0     0      0       0
                  i1_i2c_driver_stop
 ---------------------------------------------------------------------------------
 (18) i1_i2c_driver_stop                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (17) i1_do_I2C_SEND_RESTART                               0     0      0       0
               i1_i2c_driver_restart
 ---------------------------------------------------------------------------------
 (18) i1_i2c_driver_restart                                0     0      0       0
 ---------------------------------------------------------------------------------
 (16) i1_do_I2C_DO_ACK                                     0     0      0       0
               i1_i2c_driver_sendACK
 ---------------------------------------------------------------------------------
 (17) i1_i2c_driver_sendACK                                0     0      0       0
 ---------------------------------------------------------------------------------
 (15) _i2c_busCollisionISR                                 0     0      0       0
       _i2c_driver_clearBusCollision
 ---------------------------------------------------------------------------------
 (16) _i2c_driver_clearBusCollision                        0     0      0       0
 ---------------------------------------------------------------------------------
 (15) _PIN_MANAGER_IOC                                     0     0      0       0
                         _IOCCF4_ISR
 ---------------------------------------------------------------------------------
 (16) _IOCCF4_ISR                                          0     0      0       0
                   Absolute function *
     _IOCCF4_DefaultInterruptHandler *
                    _buttonInterrupt *
 ---------------------------------------------------------------------------------
 (17) _buttonInterrupt                                     1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (17) _IOCCF4_DefaultInterruptHandler                      0     0      0       0
 ---------------------------------------------------------------------------------
 (17) Absolute function(Fake)                              1     0      1       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 19
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _FLASH_ReadWord
   _FLASH_WriteWord
     _FLASH_ReadWord
     _FLASH_WriteBlock
       _FLASH_EraseBlock
   _IOCCF4_SetInterruptHandler
   _SYSTEM_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
       _IOCCF4_SetInterruptHandler
   _clearPixels
   _drawPixel
   _drawWalls
     _reverse
   _endGame
     _FLASH_WriteWord
       _FLASH_ReadWord
       _FLASH_WriteBlock
         _FLASH_EraseBlock
     _clearPixels
     _write
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _writeWord
         ___awdiv
         _clearPixels
         _drawWalls
           _reverse
         _writeDisplay
           ___awdiv
           _i2c_writeNBytes
             _i2c_close
               _mssp_clearIRQ
               _mssp_disableIRQ
             _i2c_masterWrite
               _i2c_masterOperation
                 _i2c_driver_start
                 _i2c_poller
                   _i2c_ISR
                     _do_I2C_DO_ACK *
                       _i2c_driver_sendACK
                     _do_I2C_DO_ADDRESS_NACK *
                       Absolute function(Fake) *
                       _do_I2C_SEND_RESTART *
                         _i2c_driver_restart
                       _do_I2C_SEND_STOP *
                         _i2c_driver_stop
                       _i2c_restartWrite *
                       _rd1RegCompleteHandler *
                         _i2c_setBuffer
                         _i2c_setDataCompleteCallback
                           _setCallBack
                       _rd2RegCompleteHandler *
                         _i2c_setBuffer
                         _i2c_setDataCompleteCallback
                           _setCallBack
                       _rdBlkRegCompleteHandler *
                         _i2c_setBuffer
                         _i2c_setDataCompleteCallback
                           _setCallBack
                       _returnReset *
                       _returnStop *
                       _wr1RegCompleteHandler *
                         _i2c_setBuffer
                         _i2c_setDataCompleteCallback
                           _setCallBack
                       _wr2RegCompleteHandler *
                         _i2c_setBuffer
                         _i2c_setDataCompleteCallback
                           _setCallBack
                     _do_I2C_DO_NACK_RESTART *
                       _i2c_driver_sendNACK
                     _do_I2C_DO_NACK_STOP *
                       _i2c_driver_sendNACK
                     _do_I2C_IDLE *
                     _do_I2C_RCEN *
                       _i2c_driver_startRX
                     _do_I2C_RESET *
                       _i2c_driver_resetBus
                     _do_I2C_RX *
                       Absolute function(Fake) *
                       _do_I2C_DO_NACK_RESTART *
                         _i2c_driver_sendNACK
                       _do_I2C_DO_NACK_STOP *
                         _i2c_driver_sendNACK
                       _i2c_driver_getRXData *
                       _i2c_driver_sendACK *
                       _i2c_restartWrite *
                       _rd1RegCompleteHandler *
                         _i2c_setBuffer
                         _i2c_setDataCompleteCallback
                           _setCallBack
                       _rd2RegCompleteHandler *
                         _i2c_setBuffer
                         _i2c_setDataCompleteCallback
                           _setCallBack
                       _rdBlkRegCompleteHandler *
                         _i2c_setBuffer
                         _i2c_setDataCompleteCallback
                           _setCallBack
                       _returnReset *
                       _returnStop *
                       _wr1RegCompleteHandler *
                         _i2c_setBuffer
                         _i2c_setDataCompleteCallback
                           _setCallBack
                       _wr2RegCompleteHandler *
                         _i2c_setBuffer
                         _i2c_setDataCompleteCallback
                           _setCallBack
                     _do_I2C_SEND_ADR_READ *
                       _i2c_driver_TXData
                     _do_I2C_SEND_ADR_WRITE *
                       _i2c_driver_TXData
                     _do_I2C_SEND_RESTART *
                       _i2c_driver_restart
                     _do_I2C_SEND_RESTART_READ *
                       _i2c_driver_restart
                     _do_I2C_SEND_RESTART_WRITE *
                       _i2c_driver_restart
                     _do_I2C_SEND_STOP *
                       _i2c_driver_stop
                     _do_I2C_TX *
                       Absolute function(Fake) *
                       _do_I2C_SEND_RESTART_READ *
                         _i2c_driver_restart
                       _do_I2C_SEND_RESTART_WRITE *
                         _i2c_driver_restart
                       _do_I2C_SEND_STOP *
                         _i2c_driver_stop
                       _i2c_driver_TXData *
                       _i2c_driver_isNACK *
                       _i2c_restartWrite *
                       _rd1RegCompleteHandler *
                         _i2c_setBuffer
                         _i2c_setDataCompleteCallback
                           _setCallBack
                       _rd2RegCompleteHandler *
                         _i2c_setBuffer
                         _i2c_setDataCompleteCallback
                           _setCallBack
                       _rdBlkRegCompleteHandler *
                         _i2c_setBuffer
                         _i2c_setDataCompleteCallback
                           _setCallBack
                       _returnReset *
                       _returnStop *
                       _wr1RegCompleteHandler *
                         _i2c_setBuffer
                         _i2c_setDataCompleteCallback
                           _setCallBack
                       _wr2RegCompleteHandler *
                         _i2c_setBuffer
                         _i2c_setDataCompleteCallback
                           _setCallBack
                     _do_I2C_TX_EMPTY *
                       Absolute function(Fake) *
                       _do_I2C_SEND_RESTART *
                         _i2c_driver_restart
                       _do_I2C_SEND_STOP *
                         _i2c_driver_stop
                       _i2c_restartWrite *
                       _mssp_setIRQ *
                       _rd1RegCompleteHandler *
                         _i2c_setBuffer
                         _i2c_setDataCompleteCallback
                           _setCallBack
                       _rd2RegCompleteHandler *
                         _i2c_setBuffer
                         _i2c_setDataCompleteCallback
                           _setCallBack
                       _rdBlkRegCompleteHandler *
                         _i2c_setBuffer
                         _i2c_setDataCompleteCallback
                           _setCallBack
                       _returnReset *
                       _returnStop *
                       _wr1RegCompleteHandler *
                         _i2c_setBuffer
                         _i2c_setDataCompleteCallback
                           _setCallBack
                       _wr2RegCompleteHandler *
                         _i2c_setBuffer
                         _i2c_setDataCompleteCallback
                           _setCallBack
                     _i2c_driver_isNACK *
                     _mssp_clearIRQ *
                   _mssp_waitForEvent
                 _mssp_IRQisEnabled
             _i2c_open
               _i2c_driver_open
               _i2c_driver_setBusCollisionISR
               _i2c_driver_setI2cISR
               _mssp_clearIRQ
             _i2c_setAddressNACKCallback
               _setCallBack
             _i2c_setBuffer
     _writeDisplay
       ___awdiv
       _i2c_writeNBytes
         _i2c_close
           _mssp_clearIRQ
           _mssp_disableIRQ
         _i2c_masterWrite
           _i2c_masterOperation
             _i2c_driver_start
             _i2c_poller
               _i2c_ISR
                 _do_I2C_DO_ACK *
                   _i2c_driver_sendACK
                 _do_I2C_DO_ADDRESS_NACK *
                   Absolute function(Fake) *
                   _do_I2C_SEND_RESTART *
                     _i2c_driver_restart
                   _do_I2C_SEND_STOP *
                     _i2c_driver_stop
                   _i2c_restartWrite *
                   _rd1RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _rd2RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _rdBlkRegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _returnReset *
                   _returnStop *
                   _wr1RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _wr2RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                 _do_I2C_DO_NACK_RESTART *
                   _i2c_driver_sendNACK
                 _do_I2C_DO_NACK_STOP *
                   _i2c_driver_sendNACK
                 _do_I2C_IDLE *
                 _do_I2C_RCEN *
                   _i2c_driver_startRX
                 _do_I2C_RESET *
                   _i2c_driver_resetBus
                 _do_I2C_RX *
                   Absolute function(Fake) *
                   _do_I2C_DO_NACK_RESTART *
                     _i2c_driver_sendNACK
                   _do_I2C_DO_NACK_STOP *
                     _i2c_driver_sendNACK
                   _i2c_driver_getRXData *
                   _i2c_driver_sendACK *
                   _i2c_restartWrite *
                   _rd1RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _rd2RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _rdBlkRegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _returnReset *
                   _returnStop *
                   _wr1RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _wr2RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                 _do_I2C_SEND_ADR_READ *
                   _i2c_driver_TXData
                 _do_I2C_SEND_ADR_WRITE *
                   _i2c_driver_TXData
                 _do_I2C_SEND_RESTART *
                   _i2c_driver_restart
                 _do_I2C_SEND_RESTART_READ *
                   _i2c_driver_restart
                 _do_I2C_SEND_RESTART_WRITE *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _do_I2C_TX *
                   Absolute function(Fake) *
                   _do_I2C_SEND_RESTART_READ *
                     _i2c_driver_restart
                   _do_I2C_SEND_RESTART_WRITE *
                     _i2c_driver_restart
                   _do_I2C_SEND_STOP *
                     _i2c_driver_stop
                   _i2c_driver_TXData *
                   _i2c_driver_isNACK *
                   _i2c_restartWrite *
                   _rd1RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _rd2RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _rdBlkRegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _returnReset *
                   _returnStop *
                   _wr1RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _wr2RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                 _do_I2C_TX_EMPTY *
                   Absolute function(Fake) *
                   _do_I2C_SEND_RESTART *
                     _i2c_driver_restart
                   _do_I2C_SEND_STOP *
                     _i2c_driver_stop
                   _i2c_restartWrite *
                   _mssp_setIRQ *
                   _rd1RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _rd2RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _rdBlkRegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _returnReset *
                   _returnStop *
                   _wr1RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _wr2RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                 _i2c_driver_isNACK *
                 _mssp_clearIRQ *
               _mssp_waitForEvent
             _mssp_IRQisEnabled
         _i2c_open
           _i2c_driver_open
           _i2c_driver_setBusCollisionISR
           _i2c_driver_setI2cISR
           _mssp_clearIRQ
         _i2c_setAddressNACKCallback
           _setCallBack
         _i2c_setBuffer
   _initializeDisplay
     _i2c_writeNBytes
       _i2c_close
         _mssp_clearIRQ
         _mssp_disableIRQ
       _i2c_masterWrite
         _i2c_masterOperation
           _i2c_driver_start
           _i2c_poller
             _i2c_ISR
               _do_I2C_DO_ACK *
                 _i2c_driver_sendACK
               _do_I2C_DO_ADDRESS_NACK *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_DO_NACK_RESTART *
                 _i2c_driver_sendNACK
               _do_I2C_DO_NACK_STOP *
                 _i2c_driver_sendNACK
               _do_I2C_IDLE *
               _do_I2C_RCEN *
                 _i2c_driver_startRX
               _do_I2C_RESET *
                 _i2c_driver_resetBus
               _do_I2C_RX *
                 Absolute function(Fake) *
                 _do_I2C_DO_NACK_RESTART *
                   _i2c_driver_sendNACK
                 _do_I2C_DO_NACK_STOP *
                   _i2c_driver_sendNACK
                 _i2c_driver_getRXData *
                 _i2c_driver_sendACK *
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_SEND_ADR_READ *
                 _i2c_driver_TXData
               _do_I2C_SEND_ADR_WRITE *
                 _i2c_driver_TXData
               _do_I2C_SEND_RESTART *
                 _i2c_driver_restart
               _do_I2C_SEND_RESTART_READ *
                 _i2c_driver_restart
               _do_I2C_SEND_RESTART_WRITE *
                 _i2c_driver_restart
               _do_I2C_SEND_STOP *
                 _i2c_driver_stop
               _do_I2C_TX *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART_READ *
                   _i2c_driver_restart
                 _do_I2C_SEND_RESTART_WRITE *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_driver_TXData *
                 _i2c_driver_isNACK *
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_TX_EMPTY *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_restartWrite *
                 _mssp_setIRQ *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _i2c_driver_isNACK *
               _mssp_clearIRQ *
             _mssp_waitForEvent
           _mssp_IRQisEnabled
       _i2c_open
         _i2c_driver_open
         _i2c_driver_setBusCollisionISR
         _i2c_driver_setI2cISR
         _mssp_clearIRQ
       _i2c_setAddressNACKCallback
         _setCallBack
       _i2c_setBuffer
   _shiftWalls
     _random
       ___awmod
         _rand (ARG)
           ___lmul
       _rand
         ___lmul
   _writeDisplay
     ___awdiv
     _i2c_writeNBytes
       _i2c_close
         _mssp_clearIRQ
         _mssp_disableIRQ
       _i2c_masterWrite
         _i2c_masterOperation
           _i2c_driver_start
           _i2c_poller
             _i2c_ISR
               _do_I2C_DO_ACK *
                 _i2c_driver_sendACK
               _do_I2C_DO_ADDRESS_NACK *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_DO_NACK_RESTART *
                 _i2c_driver_sendNACK
               _do_I2C_DO_NACK_STOP *
                 _i2c_driver_sendNACK
               _do_I2C_IDLE *
               _do_I2C_RCEN *
                 _i2c_driver_startRX
               _do_I2C_RESET *
                 _i2c_driver_resetBus
               _do_I2C_RX *
                 Absolute function(Fake) *
                 _do_I2C_DO_NACK_RESTART *
                   _i2c_driver_sendNACK
                 _do_I2C_DO_NACK_STOP *
                   _i2c_driver_sendNACK
                 _i2c_driver_getRXData *
                 _i2c_driver_sendACK *
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_SEND_ADR_READ *
                 _i2c_driver_TXData
               _do_I2C_SEND_ADR_WRITE *
                 _i2c_driver_TXData
               _do_I2C_SEND_RESTART *
                 _i2c_driver_restart
               _do_I2C_SEND_RESTART_READ *
                 _i2c_driver_restart
               _do_I2C_SEND_RESTART_WRITE *
                 _i2c_driver_restart
               _do_I2C_SEND_STOP *
                 _i2c_driver_stop
               _do_I2C_TX *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART_READ *
                   _i2c_driver_restart
                 _do_I2C_SEND_RESTART_WRITE *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_driver_TXData *
                 _i2c_driver_isNACK *
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_TX_EMPTY *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_restartWrite *
                 _mssp_setIRQ *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _i2c_driver_isNACK *
               _mssp_clearIRQ *
             _mssp_waitForEvent
           _mssp_IRQisEnabled
       _i2c_open
         _i2c_driver_open
         _i2c_driver_setBusCollisionISR
         _i2c_driver_setI2cISR
         _mssp_clearIRQ
       _i2c_setAddressNACKCallback
         _setCallBack
       _i2c_setBuffer

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _PIN_MANAGER_IOC *
     _IOCCF4_ISR
       Absolute function(Fake) *
       _IOCCF4_DefaultInterruptHandler *
       _buttonInterrupt *
   _i2c_busCollisionISR *
     _i2c_driver_clearBusCollision
   i1_i2c_ISR *
     i1_do_I2C_DO_ACK *
       i1_i2c_driver_sendACK
     i1_do_I2C_DO_ADDRESS_NACK *
       Absolute function(Fake) *
       i1_do_I2C_SEND_RESTART *
         i1_i2c_driver_restart
       i1_do_I2C_SEND_STOP *
         i1_i2c_driver_stop
       i1_i2c_restartWrite *
       i1_rd1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rd2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rdBlkRegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_returnReset *
       i1_returnStop *
       i1_wr1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_wr2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
     i1_do_I2C_DO_NACK_RESTART *
       i1_i2c_driver_sendNACK
     i1_do_I2C_DO_NACK_STOP *
       i1_i2c_driver_sendNACK
     i1_do_I2C_IDLE *
     i1_do_I2C_RCEN *
       i1_i2c_driver_startRX
     i1_do_I2C_RESET *
       i1_i2c_driver_resetBus
     i1_do_I2C_RX *
       Absolute function(Fake) *
       i1_do_I2C_DO_NACK_RESTART *
         i1_i2c_driver_sendNACK
       i1_do_I2C_DO_NACK_STOP *
         i1_i2c_driver_sendNACK
       i1_i2c_driver_getRXData *
       i1_i2c_driver_sendACK *
       i1_i2c_restartWrite *
       i1_rd1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rd2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rdBlkRegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_returnReset *
       i1_returnStop *
       i1_wr1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_wr2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
     i1_do_I2C_SEND_ADR_READ *
       i1_i2c_driver_TXData
     i1_do_I2C_SEND_ADR_WRITE *
       i1_i2c_driver_TXData
     i1_do_I2C_SEND_RESTART *
       i1_i2c_driver_restart
     i1_do_I2C_SEND_RESTART_READ *
       i1_i2c_driver_restart
     i1_do_I2C_SEND_RESTART_WRITE *
       i1_i2c_driver_restart
     i1_do_I2C_SEND_STOP *
       i1_i2c_driver_stop
     i1_do_I2C_TX *
       Absolute function(Fake) *
       i1_do_I2C_SEND_RESTART_READ *
         i1_i2c_driver_restart
       i1_do_I2C_SEND_RESTART_WRITE *
         i1_i2c_driver_restart
       i1_do_I2C_SEND_STOP *
         i1_i2c_driver_stop
       i1_i2c_driver_TXData *
       i1_i2c_driver_isNACK *
       i1_i2c_restartWrite *
       i1_rd1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rd2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rdBlkRegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_returnReset *
       i1_returnStop *
       i1_wr1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_wr2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
     i1_do_I2C_TX_EMPTY *
       Absolute function(Fake) *
       i1_do_I2C_SEND_RESTART *
         i1_i2c_driver_restart
       i1_do_I2C_SEND_STOP *
         i1_i2c_driver_stop
       i1_i2c_restartWrite *
       i1_mssp_setIRQ *
       i1_rd1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rd2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rdBlkRegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_returnReset *
       i1_returnStop *
       i1_wr1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_wr2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
     i1_i2c_driver_isNACK *
     i1_mssp_clearIRQ *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     39      4C       5       95.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      26       7       47.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      40       9       80.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      43      11       83.8%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      50      13      100.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0      20      15       40.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0      40      17       80.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50     46      46      19       87.5%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     1F9      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     1F9      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Apr 16 14:23:31 2018

                __end_of_i2c_driver_restart 082D                         i1_i2c_driver_isNACK 097A  
                              returnReset@p 002B                  __end_of_i2c_driver_startRX 0833  
                                         _i 0061      __end_of_IOCCF4_DefaultInterruptHandler 0803  
   __size_of_IOCCF4_DefaultInterruptHandler 0001              _IOCCF4_DefaultInterruptHandler 0802  
             _do_I2C_SEND_RESTART$intlevel0 08ED                                 __CFG_CP$OFF 0000  
                                        l95 0920                             i1_mssp_clearIRQ 081E  
                              ___awdiv@sign 0028                        __size_of_do_I2C_IDLE 0009  
                       _do_I2C_SEND_RESTART 08E9                        __size_of_do_I2C_RCEN 000A  
                      __end_ofi1_returnStop 0807                        ?i1_i2c_driver_TXData 0070  
                               i1_do_I2C_RX 0EA1                                 i1_do_I2C_TX 07B3  
                               __CFG_LVP$ON 0000                        i1_i2c_driver_sendACK 083C  
                                       l153 095B                                         l450 0A8E  
                                       l443 0FFD                                         l524 0695  
                                       l540 0F8D                                         l625 059D  
                  i1_do_I2C_DO_NACK_RESTART 085C                __size_of_i2c_masterOperation 0024  
                      _returnStop$intlevel0 089D                        i1_i2c_driver_restart 080F  
             i2c_setDataCompleteCallback@cb 0027                                ___awmod@sign 003B  
                  ?i1_rd2RegCompleteHandler 0079                       __size_of_do_I2C_RESET 000B  
                              __CFG_BORV$LO 0000                                         wreg 0009  
                             writeWord@text 0050                                __CFG_IESO$ON 0000  
                          ?_FLASH_WriteWord 002F                        i1_i2c_driver_startRX 0815  
                     __end_ofi1_returnReset 0809                        ?i1_i2c_driver_isNACK 0070  
                  ?i1_wr2RegCompleteHandler 0079             ??i1_i2c_setDataCompleteCallback 0078  
                    i1_i2c_driver_getRXData 0818              FLASH_WriteBlock@flashWordArray 0027  
                     __end_ofi1_mssp_setIRQ 081E                                __CFG_ZCD$OFF 0000  
                   ??_rd2RegCompleteHandler 002C                       i1_i2c_driver_sendNACK 0840  
                                      l4021 02BE                                        l4013 0262  
                                      l4103 04AE                                        l4017 0293  
                                      l3431 0560                                        l4073 0433  
                                      l3443 0588                                        l4403 0ACB  
                                      l4411 0AE6                                        l3531 0F3D  
                                      l3523 0F37                                        l3363 0DA8  
                                      l4091 0475                               i1returnStop@p 0079  
                                      l4501 098A                                        l3533 0F49  
                                      l3541 0F5E                                        l3519 0F30  
                                      l3359 0D9E                                        l4079 0449  
                                      l4433 08DD                                        l7001 0610  
                                      l3545 0F66                                        l3537 0F55  
                                      l4097 0479                                        l4089 0466  
                                      l4363 0C60                                        l4419 0A95  
                                      l4427 0B60                                        l4451 08F5  
                                      l4099 04A6                                        l4445 08ED  
                                      l4509 0951                                        l4517 0928  
                                      l4525 08FD                                        l7021 0301  
                                      l4439 08E5                                        l4463 090D  
                                      l7007 0659                                        l7015 02F3  
                                      l4473 08A3                                        l4457 0905  
                                      l3763 0EF1                                        l4803 075E  
                                      l4395 0AB0                                        l4483 0946  
                                      l7035 037C                                        l7043 0302  
                                      l4901 0E02                                        l4477 0897  
                                      l4469 089D                                        l4493 0915  
                                      l7029 0310                                        l4903 0E0E  
                                      l7311 0519                                        l3769 0F0F  
                                      l4913 0E29                                        l7073 00D8  
                                      l7321 052C                                        l7233 05AC  
                                      l4931 0D59                                        l4771 071C  
                                      l7251 05CF                                        l4909 0E20  
                                      l4925 0D41                                        l4845 06D5  
                                      l7077 0101                                        l7069 00CF  
                                      l7317 0527                                        l7245 05C1  
                                      l7501 041A                                        l4927 0D4D  
                                      l4935 0D62                                        l7263 05E2  
                                      l7239 05BC                                        l4849 06EB  
                                      l4777 0727                                        l7257 05D4  
                                      l4795 074D                                        l4787 072F  
                                      l6811 0CEA                                        l7099 0139  
                                      l7283 04CF                                        l7507 0428  
                                      l4789 073B                                        l6901 0D78  
                                      l7277 04BE                                        l4799 0756  
                                      l6815 0CF3                                        l6831 066F  
                                      l6911 0C83                                        l6903 0C72  
                                      l7471 03D9                                        l6825 0CF9  
                                      l7297 0507                                        l7473 03DD  
                                      l6819 0CF6                                        l6835 0672  
                                      l6827 0669                                        l6931 0C36  
                                      l7299 0509                                        l6853 06B6  
                                      l6845 0678                                        l6933 0C3C  
                                      l7493 0410                                        l7485 03FF  
                                      l6839 0675                                        l6871 0F8F  
                                      l6919 0963                                        l7487 0403  
                                      l6881 0F95                                        l6857 0F6F  
                                      l6937 0C46                                        l7497 0414  
                                      l6883 0D6B                                        l6875 0F92  
                                      l7499 0416                                        l6885 0D6E  
                                      l6895 0D75                                        l6991 0CDF  
                                      l6983 0CBF                                        l6889 0D71  
                                      u2005 0DA9                                        u2015 0DB0  
                                      u2045 054C                                        u2205 0F40  
                                      _LATA 010C                                        _LATB 010D  
                                      _LATC 010E                                        u2225 0F4F  
                                      u2235 0F56                                        u2085 0E94  
                                      u3305 0E34                                        u3315 0E3A  
                                      u2604 02AB                                        u2605 02A9  
                                      u3325 0E47                                        u3405 073C  
                                      u2534 023D                                        u2535 023B  
                                      u3335 0E4D                                        u3415 0746  
                                      u2624 02CB                                        u2544 0253  
                                      u6000 01EA                                        u2625 02C9  
                                      u2545 0251                                        u3345 0E5A  
                                      u3425 074E                                        u2634 02D7  
                                      u2635 02D5                                        u2564 0270  
                                      u2565 026E                                        u2574 0284  
                                      u2575 0282                                        u3615 0E05  
                                      u3705 0D53                                        u3385 0732  
                                      u2745 049A                                        u2594 029F  
                                      u2595 029D                                        u3635 0E0F  
                                      u3715 0D5A                                        u3645 0E19  
                                      u3655 0E21                                        u6145 04E9  
                                      u3685 0D44                                        u6507 095F  
                                      u5914 033D                                        u5915 033C  
                                      u5924 0368                                        u5925 0367  
                      ?_do_I2C_SEND_RESTART 0070                                        u6487 04D8  
                                      u6497 038B                                        _PLLR 04D6  
                                      _WPUA 020C                                        _WPUB 020D  
                                      _WPUC 020E                     ??_wr2RegCompleteHandler 002C  
                              __CFG_WRT$OFF 0000                               __CFG_FCMEN$ON 0000  
                     i1_i2c_driver_resetBus 0803           __size_of_do_I2C_SEND_RESTART_READ 0008  
                                      _fall 0069                   ?_do_I2C_SEND_RESTART_READ 0070  
                           ??_mssp_clearIRQ 0022                                        _main 0398  
                                      _rand 0E65                   __size_of_do_I2C_SEND_STOP 0008  
                    __size_of_do_I2C_DO_ACK 0008                                        fsr0h 0005  
                                      fsr1h 0007                                        indf0 0000  
                                      fsr0l 0004                                        indf1 0001  
                                      fsr1l 0006                                        btemp 007E  
                         ?_FLASH_WriteBlock 0025                           ??i1_do_I2C_DO_ACK 0070  
                             __CFG_BOREN$ON 0000                       ?_do_I2C_SEND_ADR_READ 0070  
                  __size_of_i2c_writeNBytes 0029                                        start 002E  
                             _i2c_setBuffer 0A47                          ??_FLASH_WriteBlock 0028  
                             __CFG_MCLRE$ON 0000                             __end_of_i2c_ISR 0C94  
          __size_of_rdBlkRegCompleteHandler 0020                    ??_do_I2C_DO_NACK_RESTART 0022  
                             i1_do_I2C_IDLE 0871                               i1_do_I2C_RCEN 0881  
                              _do_I2C_RESET 0942                              i1returnReset@p 0079  
                             __CFG_PLLEN$ON 0000              __size_of_OSCILLATOR_Initialize 000A  
               i2c_setAddressNACKCallback@p 0029                       ??i1_i2c_driver_TXData 0070  
             __end_of_OSCILLATOR_Initialize 0924                         __size_of_IOCCF4_ISR 000D  
                     ?i1_i2c_driver_sendACK 0070                                       ?_main 0070  
                                     ?_rand 002E                             __end_of___awdiv 0763  
                             __CFG_WDTE$OFF 0000                             __end_of___awmod 0F6B  
                  __size_of_mssp_disableIRQ 0003                             ___awdiv@divisor 0022  
                           __end_of___lwdiv 0E2E                             __end_of___lwmod 0D67  
                                     i1l362 001E                                       i1l524 07DE  
                                     i1l540 0EBC                                       i1l367 0029  
                                     i1l359 0010                             ___awdiv@counter 0027  
                     ?i1_i2c_driver_restart 0070                                       _TRISA 008C  
                                     _TRISB 008D                                       _TRISC 008E  
                     ?i1_i2c_driver_startRX 0070                             __end_of_endGame 053B  
                       ___lmul@multiplicand 0026                       ??i1_i2c_driver_isNACK 0070  
                               i2c_open@ret 0026                                 _writebuffer 01D2  
                        __size_ofi1_i2c_ISR 0022                     __end_of_PIN_MANAGER_IOC 0881  
                                     _randx 0065                        _i2c_driver_getRXData 0833  
              ?i1_do_I2C_SEND_RESTART_WRITE 0070                  ?_do_I2C_SEND_RESTART_WRITE 0070  
                                     _score 00C0                                       _walls 0130  
                                     _start 00C2                       ??_do_I2C_SEND_RESTART 0022  
                                     _write 00A3                           write@toWrite_1170 03BD  
                         write@toWrite_1176 03CB                           write@toWrite_1169 03AD  
                                     pclath 000A                             __end_of_reverse 0E65  
                _i2c_driver_busCollisionISR 005D                      ?_do_I2C_SEND_ADR_WRITE 0070  
                                     status 0003                                       wtemp0 007E  
                     __size_of_writeDisplay 005E                          i2c_driver_TXData@d 0022  
                 __size_of_i2c_driver_start 0003                              ?_i2c_setBuffer 0022  
                              ?_setCallBack 0022                     __end_ofi1_mssp_clearIRQ 0821  
                             _fsmStateTable 02A0                             __initialization 0030  
                      __size_of_clearPixels 0013              __size_ofi1_do_I2C_SEND_RESTART 0004  
                                _i2c_poller 0963               __end_ofi1_do_I2C_SEND_RESTART 0850  
                                _i2c_status 00A0                              ?i1_do_I2C_IDLE 0070  
                              __end_of_main 042D                                __end_of_rand 0EA1  
                            ?i1_do_I2C_RCEN 0070                  __end_ofi1_do_I2C_SEND_STOP 0854  
                          __end_of_i2c_open 1000                        _i2c_driver_setI2cISR 08B1  
                            __CFG_LPBOR$OFF 0000                 ?_INTERRUPT_InterruptManager 0070  
           __end_ofi1_rd2RegCompleteHandler 0A47                               setCallBack@cb 0022  
                            i1_do_I2C_RESET 08C3                               _do_I2C_DO_ACK 08F9  
                                    ??_main 0057                                      ??_rand 0030  
                             _do_I2C_TX$943 002E                           ?_i2c_restartWrite 002B  
           __end_ofi1_wr2RegCompleteHandler 0A08                                i2c_close@ret 0023  
                   __size_of_FLASH_ReadWord 0020                             _i2c_driver_open 0938  
                        ??_i2c_restartWrite 002C                             _i2c_driver_stop 082D  
                   ?_do_I2C_DO_ADDRESS_NACK 0070                      ?i1_i2c_driver_sendNACK 0070  
                              _writeDisplay 0607                       ?_i2c_driver_getRXData 0070  
                 FLASH_WriteBlock@writeAddr 0025                ??_IOCCF4_SetInterruptHandler 0024  
                          ___awdiv@dividend 0024             i1i2c_setDataCompleteCallback@cb 0075  
                                    _ANSELA 018C                                      _ANSELB 018D  
                                    _ANSELC 018E                                      _BORCON 0116  
                                    ?_write 0070                     ?i1_do_I2C_SEND_ADR_READ 0070  
                    ?i1_i2c_driver_resetBus 0070                                      _RB4PPS 0E9C  
                                    _RB6PPS 0E9E                                      _ODCONA 028C  
                                    _ODCONB 028D                                      _ODCONC 028E  
                                    i1l3283 0C17                                      i1l3613 0A08  
                                    i1l3621 0A1D                                      i1l3651 0844  
                                    i1l3637 09F3                                      i1l3629 0A32  
                                    i1l3645 0A5C                                      i1l3901 0854  
                                    i1l3663 084C                                      i1l3657 0848  
                                    i1l3681 085C                                      i1l7201 0EC4  
                                    i1l3691 0807                                      i1l7203 0C94  
                                    i1l3675 0858                                      i1l7131 0BDE  
                                    i1l7205 0C97                                      i1l7221 0CA1  
                                    i1l3669 0850                                      i1l3687 0805  
                                    i1l3695 0002                                      i1l7215 0C9E  
                                    i1l7135 0BE5                                      i1l7151 07B9  
                                    i1l7049 09A9                                      i1l7209 0C9A  
                                    i1l7145 0BEB                                      i1l3859 08C3  
                                    i1l7139 0BE8                                      i1l7155 07BC  
                                    i1l7147 07B3                                      i1l7331 0BBC  
                                    i1l3869 0871                                      i1l3877 08D1  
                                    i1l3885 08CA                                      i1l3893 0881  
                                    i1l7173 07FA                                      i1l7165 07C2  
                                    i1l7159 07BF                                      i1l7191 0EBE  
                                    i1l7177 0EA1                                      i1l7195 0EC1  
                                    i1l7339 0BCD                                      _PMADRH 0192  
                                    _PMADRL 0191               ??i1_do_I2C_SEND_RESTART_WRITE 0070  
                                    _PMDATH 0194                                      _PMDATL 0193  
                                    _PMCON2 0196                   __size_of_FLASH_EraseBlock 0020  
                        __size_of_i2c_close 001B                                      _OSCCON 0099  
                   i1_rd1RegCompleteHandler 0A1D                      ??_do_I2C_SEND_ADR_READ 0023  
                  rdBlkRegCompleteHandler@p 002B                                   ??_i2c_ISR 0030  
                   i1_wr1RegCompleteHandler 0A08                 ??i1_rdBlkRegCompleteHandler 007A  
                            __CFG_PWRTE$OFF 0000                         _do_I2C_RX$intlevel0 0F6F  
                     __size_ofi1_returnStop 0002                 __end_of_do_I2C_DO_NACK_STOP 0909  
                         __end_ofi1_i2c_ISR 0BDE         __end_of_i2c_setDataCompleteCallback 09C6  
               _i2c_setDataCompleteCallback 09B9                                      ___lmul 0D95  
             FLASH_WriteWord@blockStartAddr 0036                             _i2c_masterWrite 0868  
                                 ??___awdiv 0026                              __CFG_STVREN$ON 0000  
                                 ??___awmod 0039             __size_of_do_I2C_DO_NACK_RESTART 0008  
                     ?_i2c_driver_setI2cISR 0022                                   ??___lwdiv 0026  
                         ??_i2c_writeNBytes 0037                                   ??___lwmod 002E  
                    __end_ofi1_do_I2C_RESET 08CA                             i1_i2c_setBuffer 09AC  
                    ??i1_i2c_driver_sendACK 0070                         FLASH_WriteWord@word 0032  
                                    _random 0AFD                                   ??_endGame 0054  
                          ___awdiv@quotient 0029                              ?_do_I2C_DO_ACK 0070  
                           ___awmod@divisor 0035                             _buttonInterrupt 0992  
               __size_ofi1_i2c_restartWrite 0002                             ___awmod@counter 003A  
                    ??i1_i2c_driver_restart 0070         __size_of_IOCCF4_SetInterruptHandler 0006  
                    ??i1_i2c_driver_startRX 0070              __end_of_do_I2C_DO_ADDRESS_NACK 0D10  
                   FLASH_ReadWord@flashAddr 0022                 ?_i2c_setAddressNACKCallback 0027  
                              ?_returnReset 002B                                   ??_reverse 0022  
             _do_I2C_DO_NACK_STOP$intlevel0 0905                  i1rdBlkRegCompleteHandler@p 0079  
         __size_ofi1_do_I2C_DO_ADDRESS_NACK 0023                                ?_mssp_setIRQ 0070  
            __end_ofi1_do_I2C_SEND_ADR_READ 08D9                           ??_mssp_disableIRQ 0022  
IOCCF4_SetInterruptHandler@InterruptHandler 0022                   ?i1_do_I2C_DO_ADDRESS_NACK 0070  
                          ?_PIN_MANAGER_IOC 0070                                ??_IOCCF4_ISR 0071  
                         i1_do_I2C_TX_EMPTY 0C94                           _SYSTEM_Initialize 088D  
                   __end_of__initialization 009F                             ??_i2c_setBuffer 0026  
            _do_I2C_SEND_ADR_READ$intlevel0 098A                            _do_I2C_SEND_STOP 08F1  
                              i1_returnStop 0805                       i1_do_I2C_DO_NACK_STOP 0858  
                        __size_of_do_I2C_RX 0047                          __size_of_do_I2C_TX 0058  
                        ?i1_do_I2C_TX_EMPTY 0070                          ?_SYSTEM_Initialize 0070  
         _rdBlkRegCompleteHandler$intlevel0 0B60                         _i2c_masterOperation 0C25  
                  __size_of_do_I2C_TX_EMPTY 002E                            ?i1_mssp_clearIRQ 0070  
                           ??i1_do_I2C_IDLE 0070                             ??i1_do_I2C_RCEN 0070  
                   _rdBlkRegCompleteHandler 0B5C                                 ?_i2c_poller 0070  
                            __pcstackCOMMON 0070                  ??i1_do_I2C_DO_NACK_RESTART 0070  
                       _do_I2C_TX$intlevel0 0669                         ??i1_do_I2C_TX_EMPTY 007A  
                              __pidataBANK0 0876                                __pidataBANK1 0839  
                              __pidataBANK2 0B9C                                __pidataBANK3 0D10  
                              __pidataBANK4 0763                                __pidataBANK5 0B7C  
                       ??_SYSTEM_Initialize 0024                            FLASH_WriteWord@i 0038  
                           ?i1_do_I2C_RESET 0070                     __end_of_i2c_driver_open 0942  
                   __end_of_i2c_driver_stop 0830                               __end_of_write 0230  
                         __end_of_i2c_close 0A91                                ?i1_do_I2C_RX 0070  
                              ?i1_do_I2C_TX 0070                              drawPixel@color 0023  
                       i1i2c_restartWrite@p 0079                          __end_of_IOCCF4_ISR 09AC  
                        _i2c_driver_sendACK 0860                   i1_rdBlkRegCompleteHandler 0A5C  
                      ?_i2c_masterOperation 0070              i1i2c_setDataCompleteCallback@p 0077  
                   ?i1_i2c_driver_getRXData 0070                              _OPTION_REGbits 0095  
              ??i1_do_I2C_SEND_RESTART_READ 0070                          _i2c_driver_restart 082A  
                               random@lower 003F                      __size_ofi1_setCallBack 0024  
                        _i2c_driver_startRX 0830                                 random@upper 003C  
                    ??_i2c_driver_getRXData 0022                             i1setCallBack@cb 0070  
                  i1rd1RegCompleteHandler@p 0079                             i1_do_I2C_DO_ACK 0854  
               FLASH_WriteBlock@GIEBitValue 002D                             i1_do_I2C_TX$943 007C  
                        __size_of_drawPixel 00BC                          __size_of_drawWalls 0054  
                       ?_i2c_driver_sendACK 0070                              setCallBack@idx 0026  
                 __end_ofi1_do_I2C_TX_EMPTY 0CBD                      _do_I2C_DO_NACK_RESTART 0909  
                 __end_of_SYSTEM_Initialize 0893                   ??i1_rd1RegCompleteHandler 007A  
                                   ??_write 0053                         ?_i2c_driver_restart 0070  
                                __pbssBANK0 0059                                  __pbssBANK1 00A0  
                                __pbssBANK2 0120                                  __pbssBANK3 01CA  
                                __pbssBANK6 0320                   ??i1_wr1RegCompleteHandler 007A  
                       ?_i2c_driver_startRX 0070              __size_of_rd2RegCompleteHandler 001B  
                                 ?_i2c_open 0070               __end_of_rd2RegCompleteHandler 0AFD  
            __size_of_wr2RegCompleteHandler 001B            __size_ofi1_rd2RegCompleteHandler 0015  
             __end_of_wr2RegCompleteHandler 0AAC                     __end_of_i2c_masterWrite 086C  
                  i1wr1RegCompleteHandler@p 0079                            _i2c_driver_start 0827  
                     _rd1RegCompleteHandler 0AC7                     __end_ofi1_i2c_setBuffer 09B9  
          __size_ofi1_wr2RegCompleteHandler 0015                       _do_I2C_IDLE$intlevel0 0915  
                     _wr1RegCompleteHandler 0AAC                __size_of_i2c_busCollisionISR 0003  
           _wr1RegCompleteHandler$intlevel0 0AB0             _rd1RegCompleteHandler$intlevel0 0ACB  
                   __end_of_buttonInterrupt 099F                                  __pmaintext 0398  
                             ??_do_I2C_IDLE 0022                        __size_of_setCallBack 0025  
                             ??_do_I2C_RCEN 0022                        ??_i2c_driver_sendACK 0022  
                    ??_i2c_driver_setI2cISR 0024                                     ?___lmul 0022  
                           __CFG_PPS1WAY$ON 0000                             ??_do_I2C_DO_ACK 0022  
                                __pintentry 0004                        ??_i2c_driver_restart 0022  
              __size_of_i2c_driver_sendNACK 0004                        ??_i2c_driver_startRX 0022  
                            ___lmul@product 002A                                     ?_random 003C  
                       i2c_setBuffer@buffer 0022                           _initializeDisplay 05A6  
              __size_of_i2c_driver_resetBus 0001                   __size_of_FLASH_WriteBlock 006B  
            __end_ofi1_i2c_driver_getRXData 081B              ?_i2c_driver_setBusCollisionISR 0022  
                     ??_i2c_masterOperation 0031                           __end_of_do_I2C_RX 0FB2  
                         __end_of_do_I2C_TX 06BD                              _FLASH_ReadWord 0B1C  
                                _createWall 0064                          ?_initializeDisplay 0070  
                  ?i1_do_I2C_SEND_ADR_WRITE 0070                             __CFG_WDTCCS$SWC 0000  
                                   _OSCTUNE 0098          __end_of_IOCCF4_SetInterruptHandler 088D  
                _IOCCF4_SetInterruptHandler 0887                                     _SSP1ADD 0212  
                                   _SSP1BUF 0211                                     _SSP1MSK 0213  
                       __size_of_i2c_poller 000B                     ??_do_I2C_SEND_ADR_WRITE 0023  
       _do_I2C_SEND_RESTART_WRITE$intlevel0 08E5                         ??_initializeDisplay 0038  
               ??_do_I2C_SEND_RESTART_WRITE 0022                            _FLASH_EraseBlock 0B3C  
                    ?i1_do_I2C_DO_NACK_STOP 0070                           _mssp_IRQisEnabled 092E  
                                ??_i2c_open 0024                    __size_of_FLASH_WriteWord 0045  
                                   _i2c_ISR 0C6E                   ??_rdBlkRegCompleteHandler 002C  
                         _mssp_waitForEvent 0958                          ?_mssp_IRQisEnabled 0070  
                             endGame@played 0056                          __size_of_writeWord 00AC  
                     __end_of_mssp_clearIRQ 0824                       _returnReset$intlevel0 08A3  
                     _do_I2C_RCEN$intlevel0 0928                               i1_setCallBack 0C01  
                        ?_mssp_waitForEvent 0070            _do_I2C_DO_ADDRESS_NACK$intlevel0 0CEA  
               __end_ofi1_i2c_driver_TXData 0871                           __end_of_drawPixel 02EC  
                         __end_of_drawWalls 0711         __size_of_i2c_setAddressNACKCallback 000D  
                    __size_ofi1_returnReset 0002                         ??_mssp_IRQisEnabled 0022  
                                   ___awdiv 0711                             __size_of___lmul 0030  
                                   ___awmod 0F25                                     ___lwdiv 0DF9  
                                   ___lwmod 0D3A                   __end_of_initializeDisplay 0607  
                    __size_ofi1_mssp_setIRQ 0003                           ??_do_I2C_TX_EMPTY 002C  
                          ?_i2c_driver_open 0070                         ??_mssp_waitForEvent 0022  
                          ?_i2c_driver_stop 0070                      __end_of_FLASH_ReadWord 0B3C  
                                   _endGame 04B4                      i2c_writeNBytes@address 0037  
                           __size_of_random 001F                 __end_ofi1_i2c_driver_isNACK 0986  
                   __end_ofi1_do_I2C_DO_ACK 0858                                     __ptext1 042D  
                                   __ptext2 0AFD                                     __ptext3 0E65  
                                   __ptext4 0D95                                     __ptext5 0F25  
                                   __ptext6 05A6                                     __ptext7 04B4  
                                   __ptext8 00A3                                     __ptext9 02EC  
                       __end_of_do_I2C_IDLE 091A                         __end_of_do_I2C_RCEN 092E  
                                   _hiscore 00BE                       _OSCILLATOR_Initialize 091A  
                   ??i1_i2c_driver_sendNACK 0070                 __end_of_do_I2C_SEND_RESTART 08F1  
                          ___awmod@dividend 0037                    ??_PIN_MANAGER_Initialize 0024  
                                 _IOCCFbits 0399                      i2c_masterOperation@ret 0033  
                   ??i1_i2c_driver_resetBus 0070                                     _reverse 0E2E  
                                 _IOCCNbits 0398                                   _IOCCPbits 0397  
                                   _topHalf 005F                          i1_do_I2C_SEND_STOP 0850  
                _do_I2C_SEND_STOP$intlevel0 08F5                  __size_ofi1_do_I2C_TX_EMPTY 0029  
                  _do_I2C_SEND_RESTART_READ 08D9                  __size_of_SYSTEM_Initialize 0006  
                                   clrloop0 08B8                   __end_of_mssp_IRQisEnabled 0938  
                                   _zerobuf 0320                        __size_of_returnReset 0006  
                      end_of_initialization 009F                        __size_of_mssp_setIRQ 0003  
                 __end_of_mssp_waitForEvent 0963                   __size_of_i2c_restartWrite 0006  
                                   init_ram 08BD                         ?i1_do_I2C_SEND_STOP 0070  
                    ?_rd1RegCompleteHandler 002B                                     initloop 08BE  
                           _i2c_writeNBytes 0CBD                               ??_clearPixels 0022  
                          ?_i2c_masterWrite 0070                      ?_wr1RegCompleteHandler 002B  
                            ?i1_setCallBack 0070                                  _wallHeight 0060  
                                _shiftWalls 042D                            ?i1_i2c_setBuffer 0070  
                          ?_buttonInterrupt 0070                                write@toWrite 03D9  
                 _do_I2C_SEND_RESTART_WRITE 08E1                   FLASH_ReadWord@GIEBitValue 0024  
                     i1_do_I2C_SEND_RESTART 084C            __end_ofi1_do_I2C_DO_ADDRESS_NACK 0C01  
           __end_ofi1_do_I2C_SEND_ADR_WRITE 08D1                             ?_FLASH_ReadWord 0022  
                           _mssp_disableIRQ 0824                                   i1_i2c_ISR 0BBC  
                      ??i1_do_I2C_SEND_STOP 0070                                  _returnStop 0899  
           __end_of_rdBlkRegCompleteHandler 0B7C                    __end_of_do_I2C_SEND_STOP 08F9  
        __end_ofi1_do_I2C_SEND_RESTART_READ 0848                  i1_do_I2C_SEND_RESTART_READ 0844  
                                 _SSPDATPPS 0E21                                   _SSPCLKPPS 0E20  
                         __end_of_writeWord 0398                            __CFG_FOSC$INTOSC 0000  
                      __size_ofi1_do_I2C_RX 003F                        __size_ofi1_do_I2C_TX 004D  
                   _IOCCF4_InterruptHandler 006A        __size_of_i2c_setDataCompleteCallback 000D  
                            _gravityCounter 0062                               i1_returnReset 0807  
                               returnStop@p 002B                               i1_mssp_setIRQ 081B  
        __size_ofi1_rdBlkRegCompleteHandler 001A                i2c_setDataCompleteCallback@p 0029  
                              writeWord@idx 0051                                writeWord@len 003D  
                   i1_rd2RegCompleteHandler 0A32                                  drawPixel@x 002A  
                                drawPixel@y 0022                     i1_wr2RegCompleteHandler 09F3  
             __size_of_do_I2C_SEND_ADR_READ 000C                           FLASH_WriteBlock@i 002E  
                          ??i1_do_I2C_RESET 0070                                ??_i2c_poller 0031  
                         ??_FLASH_WriteWord 0034                                 _do_I2C_IDLE 0911  
                               _do_I2C_RCEN 0924                  __end_ofi1_i2c_restartWrite 0004  
                       __end_of_clearPixels 09F3                  __size_of_initializeDisplay 0061  
                            __end_of___lmul 0DC5        __end_of_i2c_driver_clearBusCollision 080C  
     __size_of_i2c_driver_clearBusCollision 0003                _i2c_driver_clearBusCollision 0809  
                                ?i1_i2c_ISR 0070                            _FLASH_WriteBlock 053B  
                          ?i1_do_I2C_DO_ACK 0070                      ?_OSCILLATOR_Initialize 0070  
             __size_ofi1_i2c_driver_sendACK 0004                              __end_of_random 0B1C  
              __size_of_do_I2C_DO_NACK_STOP 0008                    __end_of_i2c_driver_start 082A  
             __size_ofi1_i2c_driver_restart 0003                     ?_do_I2C_DO_NACK_RESTART 0070  
                       start_initialization 0030                                   _i2c_close 0A76  
             __size_ofi1_i2c_driver_startRX 0003                         _i2c_busCollisionISR 080C  
           __size_of_PIN_MANAGER_Initialize 0034                              ?i1_returnReset 0079  
                   __end_of_i2c_writeNBytes 0CE6         __end_ofi1_do_I2C_SEND_RESTART_WRITE 084C  
               i1_do_I2C_SEND_RESTART_WRITE 0848                              ?i1_mssp_setIRQ 0070  
                __size_of_mssp_IRQisEnabled 000A                                setCallBack@p 0024  
                        __end_of_i2c_poller 096E                         _i2c_driver_sendNACK 0864  
                           i2c_open@address 0025                     i2c_setBuffer@bufferSize 0024  
                __size_of_mssp_waitForEvent 000B                      rd1RegCompleteHandler@p 002B  
                              _hiscore_addr 00C3                         _i2c_driver_resetBus 0804  
                           ??i1_setCallBack 0073                       __end_of_i2c_setBuffer 0A5C  
                         __size_of_i2c_open 004E                    __size_of_PIN_MANAGER_IOC 0006  
     __end_ofi1_i2c_setDataCompleteCallback 097A      __size_ofi1_i2c_setDataCompleteCallback 000C  
             i1_i2c_setDataCompleteCallback 096E                                 ?_shiftWalls 0070  
                      ?_i2c_busCollisionISR 0070                     __end_of_mssp_disableIRQ 0827  
                          i1setCallBack@idx 0074                       __end_ofi1_do_I2C_IDLE 0876  
                                  ??___lmul 002A                       __end_ofi1_do_I2C_RCEN 0887  
                 i1i2c_setBuffer@bufferSize 0072                      ?i1_do_I2C_SEND_RESTART 0070  
                    wr1RegCompleteHandler@p 002B                        ?_i2c_driver_sendNACK 0070  
                             ?_do_I2C_RESET 0070                                 __pdataBANK0 0065  
                               __pdataBANK1 00C3                                 __pdataBANK2 0140  
                               __pdataBANK3 01A0                                 __pdataBANK4 0220  
                               __pdataBANK5 02A0                 FLASH_EraseBlock@GIEBitValue 0024  
                 _do_I2C_TX_EMPTY$intlevel0 0D6B                                    ??_random 003D  
                  __end_of_FLASH_EraseBlock 0B5C                    __size_ofi1_mssp_clearIRQ 0003  
                               ?_returnStop 002B                        ?_i2c_driver_resetBus 0070  
                         _i2c_driver_TXData 08A5              __end_of_do_I2C_DO_NACK_RESTART 0911  
             ?_i2c_driver_clearBusCollision 0070                           _i2c_driver_i2cISR 005B  
                  i1_do_I2C_DO_ADDRESS_NACK 0BDE                          ?_i2c_driver_TXData 0070  
                                ?_i2c_close 0070                                   ___latbits 0002  
                             __pcstackBANK0 0020                               __pcstackBANK7 03A0  
         __size_ofi1_do_I2C_DO_NACK_RESTART 0004                    i1rd2RegCompleteHandler@p 0079  
                                 _do_I2C_RX 0F6B                   ?i1_do_I2C_DO_NACK_RESTART 0070  
                                 _do_I2C_TX 0665                           _i2c_driver_isNACK 09C6  
                   ??i1_do_I2C_DO_NACK_STOP 0070                 ?_IOCCF4_SetInterruptHandler 0022  
                 ??i1_rd2RegCompleteHandler 007A               __size_of_i2c_driver_getRXData 0003  
                        ?_i2c_driver_isNACK 0070                         ??_i2c_driver_TXData 0022  
            __size_of_do_I2C_SEND_ADR_WRITE 000B                   ??i1_wr2RegCompleteHandler 007A  
             __end_of_do_I2C_SEND_ADR_WRITE 0958             ??_i2c_driver_setBusCollisionISR 0024  
                            i1setCallBack@p 0072                            _i2c_restartWrite 0893  
                _i2c_restartWrite$intlevel0 0897                                    ?_i2c_ISR 0070  
           _do_I2C_SEND_ADR_WRITE$intlevel0 0951            __size_ofi1_do_I2C_SEND_ADR_WRITE 0007  
                           _do_I2C_TX_EMPTY 0D67                               ??_setCallBack 0025  
                                 __pnvBANK0 006A                    i1wr2RegCompleteHandler@p 0079  
                     _rd2RegCompleteHandler 0AE2                                 _clearPixels 09E0  
                       ??_i2c_driver_isNACK 0022                       ??_i2c_busCollisionISR 0070  
                          ___lwdiv@dividend 0024                      _PIN_MANAGER_Initialize 0DC5  
                     _wr2RegCompleteHandler 0A91                 __size_of_i2c_driver_sendACK 0004  
                            ??_do_I2C_RESET 0022                                    ?___awdiv 0022  
                                 __ptext100 086C                                   __ptext101 0818  
                                 __ptext110 0A1D                                   __ptext102 0840  
                                 __ptext111 0A08                                   __ptext103 0803  
                                 __ptext120 0809                                   __ptext112 09F3  
                                 __ptext104 0815                                   __ptext121 087B  
                                 __ptext113 096E                                   __ptext105 0002  
                                 __ptext122 099F                                   __ptext114 0C01  
                                 __ptext106 0807                                   __ptext123 0802  
                                 __ptext115 09AC                                   __ptext107 0805  
                                 __ptext124 0992                                   __ptext116 0812  
                                 __ptext108 0A5C                       ??_i2c_driver_sendNACK 0022  
                                 __ptext117 080F                                   __ptext109 0A32  
                                 __ptext118 083C                                   __ptext119 080C  
                                  ?___awmod 0035                 __end_of_i2c_masterOperation 0C49  
                                  ?___lwdiv 0022                    ??_do_I2C_DO_ADDRESS_NACK 002C  
                                  ?___lwmod 002A               __size_of_i2c_driver_setI2cISR 0006  
               __size_of_i2c_driver_restart 0003                   __end_of_i2c_driver_TXData 08AB  
                                  ?_endGame 0070                       __end_of_do_I2C_DO_ACK 0901  
                     ??_i2c_driver_resetBus 0022                 __size_of_i2c_driver_startRX 0003  
                               ??i1_i2c_ISR 0020                ??_INTERRUPT_InterruptManager 0021  
                                 _drawPixel 0230                                 write@F12469 01CA  
                                 _drawWalls 06BD                                   _elevation 0063  
                ??_do_I2C_SEND_RESTART_READ 0022                    ??i1_do_I2C_SEND_ADR_READ 0071  
                           ??i1_returnReset 007A                   __end_of_i2c_driver_isNACK 09D3  
                  ?i1_rd1RegCompleteHandler 0079          __size_of_do_I2C_SEND_RESTART_WRITE 0008  
                           ??i1_mssp_setIRQ 0070              __size_ofi1_i2c_driver_sendNACK 0004  
             __end_ofi1_i2c_driver_sendNACK 0844                         __size_of_shiftWalls 0087  
                                  ?_reverse 0070                    ?i1_wr1RegCompleteHandler 0079  
                                ?_do_I2C_RX 0070                                  ?_do_I2C_TX 0070  
                             ?_writeDisplay 0070                            ___lwdiv@quotient 0028  
                          ?_i2c_writeNBytes 0034              __size_ofi1_i2c_driver_resetBus 0001  
             __end_ofi1_i2c_driver_resetBus 0804                     ??_rd1RegCompleteHandler 002C  
                            __size_of_write 018D                    FLASH_WriteWord@flashAddr 002F  
                         _i2c_ISR$intlevel0 0C72              FLASH_WriteBlock@blockStartAddr 002B  
                                 _letter_hi 01B2                                _letter_space 0138  
          ??_IOCCF4_DefaultInterruptHandler 0070             ?_IOCCF4_DefaultInterruptHandler 0070  
                   ??_wr1RegCompleteHandler 002C                       i2c_driver_setI2cISR@f 0022  
                       __size_of_returnStop 0006                                   clear_ram0 08B7  
                                  _PIE1bits 0090                                    _PIE2bits 0091  
                               write@digit1 03A8                                 write@digit2 03A9  
                               write@digit3 03AA                                 write@digit4 03AB  
                               write@digit5 03AC         __size_of_INTERRUPT_InterruptManager 002A  
                                 _wallColor 00C5                                    _PIR1bits 0010  
                                  _PIR2bits 0011                   FLASH_EraseBlock@startAddr 0022  
                          ??_FLASH_ReadWord 0024                            ?_mssp_disableIRQ 0070  
                               write@number 03E4                        __CFG_WDTCPS$WDTCPS1F 0000  
                                  _SSP1CON1 0215                                    _SSP1CON2 0216  
              ?_i2c_setDataCompleteCallback 0027              ?i1_i2c_setDataCompleteCallback 0075  
                                  _SSP1STAT 0214                         __end_of_setCallBack 0C6E  
                         ??_PIN_MANAGER_IOC 0071                                  ?_drawPixel 0022  
                                ?_drawWalls 0070                __size_ofi1_i2c_driver_TXData 0005  
                         i1_i2c_driver_stop 0812                i2c_setAddressNACKCallback@cb 0027  
                         ?_do_I2C_SEND_STOP 0070                 ?i1_do_I2C_SEND_RESTART_READ 0070  
                        ?i1_i2c_driver_stop 0070                                 ??_i2c_close 0022  
                             ??_returnReset 002C                          ??_do_I2C_SEND_STOP 0022  
                    __size_of_mssp_clearIRQ 0003                              ??_writeDisplay 0038  
                  __size_of_i2c_driver_open 000A                           ??i1_mssp_clearIRQ 0070  
              ??_i2c_setAddressNACKCallback 002A                    __size_of_i2c_driver_stop 0003  
         __end_of_do_I2C_SEND_RESTART_WRITE 08E9                __size_ofi1_i2c_driver_isNACK 000C  
                             ??_mssp_setIRQ 0022              ??_i2c_driver_clearBusCollision 0070  
                   __end_of_do_I2C_TX_EMPTY 0D95                                   _writeWord 02EC  
                         ___lmul@multiplier 0022                    ?_rdBlkRegCompleteHandler 002B  
                       ??i1_i2c_driver_stop 0070                             _FLASH_WriteWord 0EE0  
              __size_of_do_I2C_SEND_RESTART 0008                     _do_I2C_DO_ACK$intlevel0 08FD  
                                  _i2c_open 0FB2                               ?i1_returnStop 0079  
                  __end_of_FLASH_WriteBlock 05A6                      ?_rd2RegCompleteHandler 002B  
                       _do_I2C_DO_NACK_STOP 0901                            __size_of_i2c_ISR 0026  
                    ?_wr2RegCompleteHandler 002B             _wr2RegCompleteHandler$intlevel0 0A95  
           _rd2RegCompleteHandler$intlevel0 0AE6       __end_of_i2c_driver_setBusCollisionISR 08B1  
    __size_of_i2c_driver_setBusCollisionISR 0006               _i2c_driver_setBusCollisionISR 08AB  
                       i2c_writeNBytes@data 0034                                ?_do_I2C_IDLE 0070  
                  ??i1_i2c_driver_getRXData 0070                                ?_do_I2C_RCEN 0070  
                   ??_OSCILLATOR_Initialize 0022                            __size_of___awdiv 0052  
                  __size_of_i2c_masterWrite 0004                            __size_of___awmod 0046  
                __size_of_i2c_driver_TXData 0006             __size_of_do_I2C_DO_ADDRESS_NACK 002A  
                 __end_ofi1_i2c_driver_stop 0815                       i1i2c_setBuffer@buffer 0070  
                          __size_of___lwdiv 0035                            __size_of___lwmod 002D  
             ??_i2c_setDataCompleteCallback 002A             __end_ofi1_rd1RegCompleteHandler 0A32  
                  __size_ofi1_i2c_setBuffer 000D                               ??i1_do_I2C_RX 007A  
                             ??i1_do_I2C_TX 007A          _do_I2C_SEND_RESTART_READ$intlevel0 08DD  
               __size_ofi1_do_I2C_SEND_STOP 0004                            __size_of_endGame 0087  
                  __size_of_buttonInterrupt 000D             __end_ofi1_wr1RegCompleteHandler 0A1D  
                      ?_do_I2C_DO_NACK_STOP 0070                __end_of_do_I2C_SEND_ADR_READ 0992  
           __size_ofi1_do_I2C_SEND_ADR_READ 0008                  __size_of_i2c_driver_isNACK 000D  
                         ?_i2c_driver_start 0070                          i1_i2c_restartWrite 0002  
                           ___lwdiv@divisor 0022                                 ??_do_I2C_RX 002C  
                               ??_do_I2C_TX 002C                             ___lwdiv@counter 0027  
                        ??_i2c_driver_start 0022                                    __ptext10 0607  
                                  __ptext11 0CBD                                    __ptext20 0963  
                                  __ptext12 09D3                                    __ptext21 0958  
                                  __ptext13 0FB2                                    __ptext30 094D  
                                  __ptext22 0C6E                                    __ptext14 08B1  
                                  __ptext31 0986                                    __ptext23 0F6B  
                                  __ptext15 08AB                                    __ptext40 09C6  
                                  __ptext32 08F1                                    __ptext24 0665  
                                  __ptext16 0938                                    __ptext41 08A5  
                                  __ptext33 08E9                                    __ptext25 0CE6  
                                  __ptext17 0868                                    __ptext50 0AC7  
                                  __ptext42 0833                                    __ptext34 08E1  
                                  __ptext26 0909                                    __ptext18 0C25  
                                  __ptext51 0AAC                                    __ptext43 0864  
                                  __ptext35 08D9                                    __ptext27 0901  
                                  __ptext19 092E                                    __ptext60 0827  
                                  __ptext52 0893                                    __ptext44 0804  
                                  __ptext36 0911                                    __ptext28 08F9  
                                  __ptext61 0A76                                    __ptext53 0A91  
                                  __ptext45 0830                                    __ptext37 0942  
                                  __ptext29 0924                                    __ptext70 0EE0  
                                  __ptext62 0824                                    __ptext54 09B9  
                                  __ptext46 089F                                    __ptext38 0D67  
                                  __ptext71 053B                                    __ptext63 0821  
                                  __ptext55 0C49                                    __ptext47 0899  
                                  __ptext39 0836                                    __ptext80 0BBC  
                                  __ptext72 0B3C                                    __ptext64 0711  
                                  __ptext56 0A47                                    __ptext48 0B5C  
                                  __ptext81 081E                                    __ptext73 0B1C  
                                  __ptext65 06BD                                    __ptext57 082D  
                                  __ptext49 0AE2                                    __ptext90 08D1  
                                  __ptext82 0EA1                                    __ptext74 0230  
                                  __ptext66 0E2E                                    __ptext58 082A  
                                  __ptext91 0850                                    __ptext83 07B3  
                                  __ptext75 088D                                    __ptext67 09E0  
                                  __ptext59 0860                                    __ptext92 084C  
                                  __ptext84 0BDE                                    __ptext76 0DC5  
                                  __ptext68 0D3A                                    __ptext93 0848  
                                  __ptext85 085C                                    __ptext77 0887  
                                  __ptext69 0DF9                                    __ptext94 0844  
                                  __ptext86 0858                                    __ptext78 091A  
                                  __ptext95 0871                                    __ptext87 0854  
                                  __ptext96 08C3                                    __ptext88 0881  
                                  __ptext97 0C94                                    __ptext89 08CA  
                                  __ptext98 081B                                    __ptext99 097A  
                              _SSP1CON1bits 0215                            __size_of_reverse 0037  
                              _SSP1CON2bits 0216                                  ?_writeWord 003D  
                              _shiftCounter 0059                       FLASH_WriteWord@ramBuf 0031  
                      __end_of_do_I2C_RESET 094D                       FLASH_WriteWord@offset 0035  
                                _IOCCF4_ISR 099F                              ??i1_returnStop 007A  
                   i1_do_I2C_SEND_ADR_WRITE 08CA                         ?i1_i2c_restartWrite 0079  
              __end_ofi1_i2c_driver_sendACK 0840                         __end_of_returnReset 08A5  
                             __size_of_main 0095                               __size_of_rand 003C  
                       __end_of_mssp_setIRQ 0839                __end_ofi1_i2c_driver_restart 0812  
                                  _letter_c 0148                                    _letter_e 0158  
                                  _letter_n 01C2                                    _letter_o 0140  
                                  _letter_r 01AA                                    _letter_s 0150  
                                  _letter_w 01BA                        i1i2c_driver_TXData@d 0070  
              __end_ofi1_i2c_driver_startRX 0818                        __CFG_WDTCWS$WDTCWSSW 0000  
                               _setCallBack 0C49                                ??_shiftWalls 0040  
                   ??i1_do_I2C_SEND_RESTART 0070                               _mssp_clearIRQ 0821  
                   i2c_masterOperation@read 0032        __size_ofi1_do_I2C_SEND_RESTART_WRITE 0004  
                                  _number_0 0268                                    _number_1 0260  
                                  _number_2 0258                                    _number_3 0250  
                                  _number_4 0248                                    _number_5 0240  
                                  _number_6 0238                                    _number_7 0230  
                                  _number_8 0228                                    _number_9 0220  
                                  int$flags 007E                  ??i1_do_I2C_DO_ADDRESS_NACK 007A  
          __end_ofi1_do_I2C_DO_NACK_RESTART 0860          __end_of_INTERRUPT_InterruptManager 002E  
                _INTERRUPT_InterruptManager 0004                                  writeWord@k 0052  
                            write@selection 03E3                                _SSP1STATbits 0214  
                      ??i1_i2c_restartWrite 007A            __end_of_do_I2C_SEND_RESTART_READ 08E1  
                               ??_drawPixel 0024                                 ??_drawWalls 0026  
                              ??_returnStop 002C                    __end_of_i2c_restartWrite 0899  
                     ??_do_I2C_DO_NACK_STOP 0022                           ?_FLASH_EraseBlock 0022  
                  mssp_waitForEvent@timeout 0022              i2c_driver_setBusCollisionISR@f 0022  
                        ??_FLASH_EraseBlock 0024                                  _INTCONbits 000B  
                   __end_of_FLASH_WriteWord 0F25                          i2c_writeNBytes@len 0035  
                       __end_ofi1_do_I2C_RX 0EE0                         __end_ofi1_do_I2C_TX 0800  
                       writeWord@shiftValue 004F                          __end_of_shiftWalls 04B4  
                  __size_ofi1_do_I2C_DO_ACK 0004                            ?_do_I2C_TX_EMPTY 0070  
                    _do_I2C_DO_ADDRESS_NACK 0CE6              __size_ofi1_do_I2C_DO_NACK_STOP 0004  
                                  intlevel1 0000               __end_ofi1_do_I2C_DO_NACK_STOP 085C  
                    _do_I2C_RESET$intlevel0 0946                      rd2RegCompleteHandler@p 002B  
                         ??_i2c_driver_open 0022                                  _PMCON1bits 0195  
                          ___lwmod@dividend 002C                           ??_i2c_driver_stop 0022  
                   ?_PIN_MANAGER_Initialize 0070                           i2c_restartWrite@p 002B  
                    i1_do_I2C_SEND_ADR_READ 08D1                           __CFG_CLKOUTEN$OFF 0000  
                ?i1_rdBlkRegCompleteHandler 0079                                ?_clearPixels 0070  
                        __end_of_returnStop 089F                              ?_mssp_clearIRQ 0070  
                     __end_ofi1_setCallBack 0C25                           write@letter_space 03A0  
       __size_ofi1_do_I2C_SEND_RESTART_READ 0004                                    reverse@b 0025  
                      __end_of_writeDisplay 0665                __end_of_i2c_driver_getRXData 0836  
           __size_ofi1_i2c_driver_getRXData 0003                      wr2RegCompleteHandler@p 002B  
                __size_ofi1_i2c_driver_stop 0003                                 _pixelbuffer 0120  
                               _numberTable 01A0                     __size_ofi1_do_I2C_RESET 0007  
                           ___lwmod@divisor 002A                           ??_i2c_masterWrite 0034  
        __end_of_i2c_setAddressNACKCallback 09E0                  _i2c_setAddressNACKCallback 09D3  
                           ___lwmod@counter 002F                      __size_of_i2c_setBuffer 0015  
                         ??i1_i2c_setBuffer 0074                                 _returnReset 089F  
          _do_I2C_DO_NACK_RESTART$intlevel0 090D                           ??_buttonInterrupt 0070  
                               _mssp_setIRQ 0836                   ??i1_do_I2C_SEND_ADR_WRITE 0071  
                               ??_writeWord 003E                __end_of_i2c_driver_setI2cISR 08B7  
                    __size_ofi1_do_I2C_IDLE 0005                      __size_ofi1_do_I2C_RCEN 0006  
                               ?_IOCCF4_ISR 0070              __end_of_PIN_MANAGER_Initialize 0DF9  
               __end_of_i2c_busCollisionISR 080F              __size_of_rd1RegCompleteHandler 001B  
             __end_of_rd1RegCompleteHandler 0AE2                         i1_i2c_driver_TXData 086C  
                           _PIN_MANAGER_IOC 087B              __size_of_wr1RegCompleteHandler 001B  
          __size_ofi1_rd1RegCompleteHandler 0015               __end_of_wr1RegCompleteHandler 0AC7  
                     _do_I2C_SEND_ADR_WRITE 094D                 __end_of_i2c_driver_sendNACK 0868  
                      _do_I2C_SEND_ADR_READ 0986           __end_ofi1_rdBlkRegCompleteHandler 0A76  
          __size_ofi1_wr1RegCompleteHandler 0015                  __end_of_i2c_driver_sendACK 0864  
               __end_of_i2c_driver_resetBus 0805  
