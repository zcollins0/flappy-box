

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Wed Apr 11 15:02:17 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F1619
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	inittext,global,class=CODE,delta=2
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    17                           	psect	text1,local,class=CODE,merge=1,delta=2
    18                           	psect	text2,local,class=CODE,merge=1,delta=2
    19                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    20                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    21                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    22                           	psect	text6,local,class=CODE,merge=1,delta=2
    23                           	psect	text7,local,class=CODE,merge=1,delta=2
    24                           	psect	text8,local,class=CODE,merge=1,delta=2
    25                           	psect	text9,local,class=CODE,merge=1,delta=2
    26                           	psect	text10,local,class=CODE,merge=1,delta=2
    27                           	psect	text11,local,class=CODE,merge=1,delta=2
    28                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text13,local,class=CODE,merge=1,inline,delta=2
    30                           	psect	text14,local,class=CODE,merge=1,delta=2
    31                           	psect	text15,local,class=CODE,merge=1,delta=2
    32                           	psect	text16,local,class=CODE,merge=1,delta=2
    33                           	psect	text17,local,class=CODE,merge=1,inline,delta=2
    34                           	psect	text18,local,class=CODE,merge=1,inline,delta=2
    35                           	psect	text19,local,class=CODE,merge=1,inline,delta=2
    36                           	psect	text20,local,class=CODE,merge=1,delta=2
    37                           	psect	text21,local,class=CODE,merge=1,delta=2
    38                           	psect	text22,local,class=CODE,merge=1,delta=2
    39                           	psect	text23,local,class=CODE,merge=1,delta=2
    40                           	psect	text24,local,class=CODE,merge=1,delta=2
    41                           	psect	text25,local,class=CODE,merge=1,delta=2
    42                           	psect	text26,local,class=CODE,merge=1,delta=2
    43                           	psect	text27,local,class=CODE,merge=1,delta=2
    44                           	psect	text28,local,class=CODE,merge=1,delta=2
    45                           	psect	text29,local,class=CODE,merge=1,delta=2
    46                           	psect	text30,local,class=CODE,merge=1,delta=2
    47                           	psect	text31,local,class=CODE,merge=1,delta=2
    48                           	psect	text32,local,class=CODE,merge=1,delta=2
    49                           	psect	text33,local,class=CODE,merge=1,delta=2
    50                           	psect	text34,local,class=CODE,merge=1,delta=2
    51                           	psect	text35,local,class=CODE,merge=1,delta=2
    52                           	psect	text36,local,class=CODE,merge=1,delta=2
    53                           	psect	text37,local,class=CODE,merge=1,inline,delta=2
    54                           	psect	text38,local,class=CODE,merge=1,inline,delta=2
    55                           	psect	text39,local,class=CODE,merge=1,inline,delta=2
    56                           	psect	text40,local,class=CODE,merge=1,inline,delta=2
    57                           	psect	text41,local,class=CODE,merge=1,inline,delta=2
    58                           	psect	text42,local,class=CODE,merge=1,inline,delta=2
    59                           	psect	text43,local,class=CODE,merge=1,inline,delta=2
    60                           	psect	text44,local,class=CODE,merge=1,delta=2
    61                           	psect	text45,local,class=CODE,merge=1,delta=2
    62                           	psect	text46,local,class=CODE,merge=1,delta=2
    63                           	psect	text47,local,class=CODE,merge=1,delta=2
    64                           	psect	text48,local,class=CODE,merge=1,delta=2
    65                           	psect	text49,local,class=CODE,merge=1,delta=2
    66                           	psect	text50,local,class=CODE,merge=1,delta=2
    67                           	psect	text51,local,class=CODE,merge=1,delta=2
    68                           	psect	text52,local,class=CODE,merge=1,delta=2
    69                           	psect	text53,local,class=CODE,merge=1,delta=2
    70                           	psect	text54,local,class=CODE,merge=1,delta=2
    71                           	psect	text55,local,class=CODE,merge=1,inline,delta=2
    72                           	psect	text56,local,class=CODE,merge=1,inline,delta=2
    73                           	psect	text57,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text58,local,class=CODE,merge=1,inline,delta=2
    75                           	psect	text59,local,class=CODE,merge=1,delta=2
    76                           	psect	text60,local,class=CODE,merge=1,inline,delta=2
    77                           	psect	text61,local,class=CODE,merge=1,inline,delta=2
    78                           	psect	text62,local,class=CODE,merge=1,delta=2,group=1
    79                           	psect	text63,local,class=CODE,merge=1,delta=2
    80                           	psect	text64,local,class=CODE,merge=1,delta=2
    81                           	psect	text65,local,class=CODE,merge=1,delta=2
    82                           	psect	text66,local,class=CODE,merge=1,delta=2
    83                           	psect	text67,local,class=CODE,merge=1,delta=2
    84                           	psect	text68,local,class=CODE,merge=1,delta=2
    85                           	psect	text69,local,class=CODE,merge=1,delta=2
    86                           	psect	text70,local,class=CODE,merge=1,delta=2
    87                           	psect	intentry,global,class=CODE,delta=2
    88                           	psect	text72,local,class=CODE,merge=1,delta=2
    89                           	psect	text73,local,class=CODE,merge=1,inline,delta=2
    90                           	psect	text74,local,class=CODE,merge=1,delta=2
    91                           	psect	text75,local,class=CODE,merge=1,delta=2
    92                           	psect	text76,local,class=CODE,merge=1,delta=2
    93                           	psect	text77,local,class=CODE,merge=1,delta=2
    94                           	psect	text78,local,class=CODE,merge=1,delta=2
    95                           	psect	text79,local,class=CODE,merge=1,delta=2
    96                           	psect	text80,local,class=CODE,merge=1,delta=2
    97                           	psect	text81,local,class=CODE,merge=1,delta=2
    98                           	psect	text82,local,class=CODE,merge=1,delta=2
    99                           	psect	text83,local,class=CODE,merge=1,delta=2
   100                           	psect	text84,local,class=CODE,merge=1,delta=2
   101                           	psect	text85,local,class=CODE,merge=1,delta=2
   102                           	psect	text86,local,class=CODE,merge=1,delta=2
   103                           	psect	text87,local,class=CODE,merge=1,delta=2
   104                           	psect	text88,local,class=CODE,merge=1,delta=2
   105                           	psect	text89,local,class=CODE,merge=1,delta=2
   106                           	psect	text90,local,class=CODE,merge=1,inline,delta=2
   107                           	psect	text91,local,class=CODE,merge=1,inline,delta=2
   108                           	psect	text92,local,class=CODE,merge=1,inline,delta=2
   109                           	psect	text93,local,class=CODE,merge=1,inline,delta=2
   110                           	psect	text94,local,class=CODE,merge=1,inline,delta=2
   111                           	psect	text95,local,class=CODE,merge=1,inline,delta=2
   112                           	psect	text96,local,class=CODE,merge=1,inline,delta=2
   113                           	psect	text97,local,class=CODE,merge=1,delta=2
   114                           	psect	text98,local,class=CODE,merge=1,delta=2
   115                           	psect	text99,local,class=CODE,merge=1,delta=2
   116                           	psect	text100,local,class=CODE,merge=1,delta=2
   117                           	psect	text101,local,class=CODE,merge=1,delta=2
   118                           	psect	text102,local,class=CODE,merge=1,delta=2
   119                           	psect	text103,local,class=CODE,merge=1,delta=2
   120                           	psect	text104,local,class=CODE,merge=1,delta=2
   121                           	psect	text105,local,class=CODE,merge=1,delta=2
   122                           	psect	text106,local,class=CODE,merge=1,delta=2
   123                           	psect	text107,local,class=CODE,merge=1,delta=2
   124                           	psect	text108,local,class=CODE,merge=1,inline,delta=2
   125                           	psect	text109,local,class=CODE,merge=1,inline,delta=2
   126                           	psect	text110,local,class=CODE,merge=1,inline,delta=2
   127                           	psect	text111,local,class=CODE,merge=1,delta=2
   128                           	psect	text112,local,class=CODE,merge=1,inline,delta=2
   129                           	psect	text113,local,class=CODE,merge=1,delta=2
   130                           	psect	text114,local,class=CODE,merge=1,delta=2
   131                           	psect	text115,local,class=CODE,merge=1,delta=2
   132                           	psect	text116,local,class=CODE,merge=1,delta=2
   133                           	dabs	1,0x7E,2
   134  0000                     
   135                           ; Version 1.45
   136                           ; Generated 16/11/2017 GMT
   137                           ; 
   138                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   139                           ; All rights reserved.
   140                           ; 
   141                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   142                           ; 
   143                           ; Redistribution and use in source and binary forms, with or without modification, are
   144                           ; permitted provided that the following conditions are met:
   145                           ; 
   146                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   147                           ;        conditions and the following disclaimer.
   148                           ; 
   149                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   150                           ;        of conditions and the following disclaimer in the documentation and/or other
   151                           ;        materials provided with the distribution.
   152                           ; 
   153                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   154                           ;        software without specific prior written permission.
   155                           ; 
   156                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   157                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   158                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   159                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   160                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   161                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   162                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   163                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   164                           ; 
   165                           ; 
   166                           ; Code-generator required, PIC16F1619 Definitions
   167                           ; 
   168                           ; SFR Addresses
   169  0000                     	;# 
   170  0001                     	;# 
   171  0002                     	;# 
   172  0003                     	;# 
   173  0004                     	;# 
   174  0005                     	;# 
   175  0006                     	;# 
   176  0007                     	;# 
   177  0008                     	;# 
   178  0009                     	;# 
   179  000A                     	;# 
   180  000B                     	;# 
   181  000C                     	;# 
   182  000D                     	;# 
   183  000E                     	;# 
   184  0010                     	;# 
   185  0011                     	;# 
   186  0012                     	;# 
   187  0013                     	;# 
   188  0014                     	;# 
   189  0015                     	;# 
   190  0016                     	;# 
   191  0016                     	;# 
   192  0017                     	;# 
   193  0018                     	;# 
   194  0019                     	;# 
   195  001A                     	;# 
   196  001A                     	;# 
   197  001B                     	;# 
   198  001B                     	;# 
   199  001C                     	;# 
   200  001D                     	;# 
   201  001E                     	;# 
   202  001F                     	;# 
   203  008C                     	;# 
   204  008D                     	;# 
   205  008E                     	;# 
   206  0090                     	;# 
   207  0091                     	;# 
   208  0092                     	;# 
   209  0093                     	;# 
   210  0094                     	;# 
   211  0095                     	;# 
   212  0096                     	;# 
   213  0098                     	;# 
   214  0099                     	;# 
   215  009A                     	;# 
   216  009B                     	;# 
   217  009B                     	;# 
   218  009C                     	;# 
   219  009D                     	;# 
   220  009E                     	;# 
   221  009F                     	;# 
   222  010C                     	;# 
   223  010D                     	;# 
   224  010E                     	;# 
   225  0111                     	;# 
   226  0112                     	;# 
   227  0113                     	;# 
   228  0114                     	;# 
   229  0115                     	;# 
   230  0116                     	;# 
   231  0117                     	;# 
   232  0118                     	;# 
   233  0119                     	;# 
   234  011C                     	;# 
   235  018C                     	;# 
   236  018D                     	;# 
   237  018E                     	;# 
   238  0191                     	;# 
   239  0191                     	;# 
   240  0192                     	;# 
   241  0193                     	;# 
   242  0193                     	;# 
   243  0194                     	;# 
   244  0195                     	;# 
   245  0196                     	;# 
   246  0197                     	;# 
   247  0199                     	;# 
   248  0199                     	;# 
   249  0199                     	;# 
   250  019A                     	;# 
   251  019A                     	;# 
   252  019A                     	;# 
   253  019B                     	;# 
   254  019B                     	;# 
   255  019B                     	;# 
   256  019B                     	;# 
   257  019B                     	;# 
   258  019C                     	;# 
   259  019C                     	;# 
   260  019C                     	;# 
   261  019D                     	;# 
   262  019D                     	;# 
   263  019D                     	;# 
   264  019E                     	;# 
   265  019E                     	;# 
   266  019E                     	;# 
   267  019F                     	;# 
   268  019F                     	;# 
   269  019F                     	;# 
   270  019F                     	;# 
   271  019F                     	;# 
   272  020C                     	;# 
   273  020D                     	;# 
   274  020E                     	;# 
   275  0211                     	;# 
   276  0211                     	;# 
   277  0212                     	;# 
   278  0212                     	;# 
   279  0213                     	;# 
   280  0213                     	;# 
   281  0214                     	;# 
   282  0214                     	;# 
   283  0215                     	;# 
   284  0215                     	;# 
   285  0215                     	;# 
   286  0215                     	;# 
   287  0216                     	;# 
   288  0216                     	;# 
   289  0217                     	;# 
   290  0217                     	;# 
   291  028C                     	;# 
   292  028D                     	;# 
   293  028E                     	;# 
   294  0291                     	;# 
   295  0291                     	;# 
   296  0292                     	;# 
   297  0293                     	;# 
   298  0294                     	;# 
   299  0298                     	;# 
   300  0298                     	;# 
   301  0299                     	;# 
   302  029A                     	;# 
   303  029B                     	;# 
   304  029E                     	;# 
   305  030C                     	;# 
   306  030D                     	;# 
   307  030E                     	;# 
   308  038C                     	;# 
   309  038D                     	;# 
   310  038E                     	;# 
   311  0391                     	;# 
   312  0392                     	;# 
   313  0393                     	;# 
   314  0394                     	;# 
   315  0395                     	;# 
   316  0396                     	;# 
   317  0397                     	;# 
   318  0398                     	;# 
   319  0399                     	;# 
   320  040E                     	;# 
   321  0413                     	;# 
   322  0413                     	;# 
   323  0414                     	;# 
   324  0414                     	;# 
   325  0415                     	;# 
   326  0416                     	;# 
   327  0417                     	;# 
   328  0418                     	;# 
   329  041A                     	;# 
   330  041A                     	;# 
   331  041B                     	;# 
   332  041B                     	;# 
   333  041C                     	;# 
   334  041D                     	;# 
   335  041E                     	;# 
   336  041F                     	;# 
   337  0493                     	;# 
   338  0494                     	;# 
   339  0495                     	;# 
   340  0496                     	;# 
   341  049A                     	;# 
   342  049B                     	;# 
   343  049C                     	;# 
   344  049D                     	;# 
   345  058C                     	;# 
   346  058C                     	;# 
   347  058D                     	;# 
   348  058E                     	;# 
   349  058E                     	;# 
   350  058F                     	;# 
   351  0590                     	;# 
   352  0590                     	;# 
   353  0591                     	;# 
   354  0592                     	;# 
   355  0592                     	;# 
   356  0593                     	;# 
   357  0594                     	;# 
   358  0594                     	;# 
   359  0595                     	;# 
   360  0596                     	;# 
   361  0596                     	;# 
   362  0597                     	;# 
   363  0598                     	;# 
   364  0599                     	;# 
   365  059A                     	;# 
   366  059B                     	;# 
   367  059B                     	;# 
   368  059C                     	;# 
   369  059D                     	;# 
   370  060C                     	;# 
   371  060C                     	;# 
   372  060D                     	;# 
   373  060E                     	;# 
   374  060F                     	;# 
   375  060F                     	;# 
   376  0610                     	;# 
   377  0611                     	;# 
   378  0612                     	;# 
   379  0613                     	;# 
   380  0614                     	;# 
   381  0617                     	;# 
   382  0618                     	;# 
   383  0619                     	;# 
   384  061A                     	;# 
   385  061B                     	;# 
   386  061C                     	;# 
   387  0691                     	;# 
   388  0692                     	;# 
   389  0693                     	;# 
   390  0694                     	;# 
   391  0695                     	;# 
   392  0696                     	;# 
   393  0697                     	;# 
   394  0699                     	;# 
   395  069A                     	;# 
   396  0711                     	;# 
   397  0712                     	;# 
   398  0713                     	;# 
   399  0714                     	;# 
   400  0715                     	;# 
   401  0718                     	;# 
   402  0718                     	;# 
   403  0719                     	;# 
   404  071A                     	;# 
   405  071A                     	;# 
   406  071B                     	;# 
   407  071C                     	;# 
   408  071D                     	;# 
   409  0791                     	;# 
   410  0791                     	;# 
   411  0792                     	;# 
   412  0793                     	;# 
   413  0793                     	;# 
   414  0794                     	;# 
   415  0795                     	;# 
   416  0795                     	;# 
   417  0796                     	;# 
   418  0797                     	;# 
   419  0797                     	;# 
   420  0798                     	;# 
   421  0799                     	;# 
   422  079A                     	;# 
   423  080C                     	;# 
   424  080C                     	;# 
   425  080D                     	;# 
   426  080E                     	;# 
   427  080E                     	;# 
   428  080F                     	;# 
   429  0810                     	;# 
   430  0810                     	;# 
   431  0811                     	;# 
   432  0812                     	;# 
   433  0812                     	;# 
   434  0813                     	;# 
   435  0814                     	;# 
   436  0815                     	;# 
   437  0816                     	;# 
   438  0817                     	;# 
   439  0818                     	;# 
   440  0819                     	;# 
   441  081A                     	;# 
   442  081A                     	;# 
   443  081B                     	;# 
   444  081C                     	;# 
   445  081C                     	;# 
   446  081D                     	;# 
   447  088C                     	;# 
   448  088D                     	;# 
   449  088E                     	;# 
   450  088F                     	;# 
   451  088F                     	;# 
   452  0890                     	;# 
   453  0891                     	;# 
   454  0892                     	;# 
   455  0893                     	;# 
   456  0893                     	;# 
   457  0894                     	;# 
   458  0895                     	;# 
   459  0896                     	;# 
   460  0897                     	;# 
   461  0897                     	;# 
   462  0898                     	;# 
   463  0899                     	;# 
   464  0D8C                     	;# 
   465  0D8C                     	;# 
   466  0D8D                     	;# 
   467  0D8E                     	;# 
   468  0D8F                     	;# 
   469  0D8F                     	;# 
   470  0D90                     	;# 
   471  0D91                     	;# 
   472  0D92                     	;# 
   473  0D92                     	;# 
   474  0D93                     	;# 
   475  0D94                     	;# 
   476  0D95                     	;# 
   477  0D95                     	;# 
   478  0D96                     	;# 
   479  0D97                     	;# 
   480  0D98                     	;# 
   481  0D99                     	;# 
   482  0D9A                     	;# 
   483  0D9B                     	;# 
   484  0D9C                     	;# 
   485  0D9D                     	;# 
   486  0D9E                     	;# 
   487  0D9E                     	;# 
   488  0D9F                     	;# 
   489  0DA0                     	;# 
   490  0DA1                     	;# 
   491  0DA1                     	;# 
   492  0DA2                     	;# 
   493  0DA3                     	;# 
   494  0DA4                     	;# 
   495  0DA4                     	;# 
   496  0DA5                     	;# 
   497  0DA6                     	;# 
   498  0DA7                     	;# 
   499  0DA7                     	;# 
   500  0DA8                     	;# 
   501  0DA9                     	;# 
   502  0DAA                     	;# 
   503  0DAB                     	;# 
   504  0DAC                     	;# 
   505  0DAD                     	;# 
   506  0DAE                     	;# 
   507  0DAF                     	;# 
   508  0E0F                     	;# 
   509  0E10                     	;# 
   510  0E11                     	;# 
   511  0E12                     	;# 
   512  0E13                     	;# 
   513  0E14                     	;# 
   514  0E15                     	;# 
   515  0E16                     	;# 
   516  0E17                     	;# 
   517  0E18                     	;# 
   518  0E19                     	;# 
   519  0E1A                     	;# 
   520  0E1B                     	;# 
   521  0E1C                     	;# 
   522  0E1D                     	;# 
   523  0E1E                     	;# 
   524  0E1F                     	;# 
   525  0E20                     	;# 
   526  0E21                     	;# 
   527  0E22                     	;# 
   528  0E23                     	;# 
   529  0E24                     	;# 
   530  0E25                     	;# 
   531  0E26                     	;# 
   532  0E27                     	;# 
   533  0E28                     	;# 
   534  0E29                     	;# 
   535  0E2A                     	;# 
   536  0E2B                     	;# 
   537  0E2C                     	;# 
   538  0E2D                     	;# 
   539  0E2E                     	;# 
   540  0E90                     	;# 
   541  0E91                     	;# 
   542  0E92                     	;# 
   543  0E94                     	;# 
   544  0E95                     	;# 
   545  0E9C                     	;# 
   546  0E9D                     	;# 
   547  0E9E                     	;# 
   548  0E9F                     	;# 
   549  0EA0                     	;# 
   550  0EA1                     	;# 
   551  0EA2                     	;# 
   552  0EA3                     	;# 
   553  0EA4                     	;# 
   554  0EA5                     	;# 
   555  0EA6                     	;# 
   556  0EA7                     	;# 
   557  0F0F                     	;# 
   558  0F10                     	;# 
   559  0F11                     	;# 
   560  0F12                     	;# 
   561  0F13                     	;# 
   562  0F14                     	;# 
   563  0F15                     	;# 
   564  0F16                     	;# 
   565  0F17                     	;# 
   566  0F18                     	;# 
   567  0F19                     	;# 
   568  0F1A                     	;# 
   569  0F1B                     	;# 
   570  0F1C                     	;# 
   571  0F1D                     	;# 
   572  0F1E                     	;# 
   573  0F1F                     	;# 
   574  0F20                     	;# 
   575  0F21                     	;# 
   576  0F22                     	;# 
   577  0F23                     	;# 
   578  0F24                     	;# 
   579  0F25                     	;# 
   580  0F26                     	;# 
   581  0F27                     	;# 
   582  0F28                     	;# 
   583  0F29                     	;# 
   584  0F2A                     	;# 
   585  0F2B                     	;# 
   586  0F2C                     	;# 
   587  0F2D                     	;# 
   588  0F2E                     	;# 
   589  0F2F                     	;# 
   590  0F30                     	;# 
   591  0F31                     	;# 
   592  0F32                     	;# 
   593  0F33                     	;# 
   594  0F34                     	;# 
   595  0F35                     	;# 
   596  0F36                     	;# 
   597  0F37                     	;# 
   598  0FE4                     	;# 
   599  0FE5                     	;# 
   600  0FE6                     	;# 
   601  0FE7                     	;# 
   602  0FE8                     	;# 
   603  0FE9                     	;# 
   604  0FEA                     	;# 
   605  0FEB                     	;# 
   606  0FED                     	;# 
   607  0FEE                     	;# 
   608  0FEF                     	;# 
   609  0000                     	;# 
   610  0001                     	;# 
   611  0002                     	;# 
   612  0003                     	;# 
   613  0004                     	;# 
   614  0005                     	;# 
   615  0006                     	;# 
   616  0007                     	;# 
   617  0008                     	;# 
   618  0009                     	;# 
   619  000A                     	;# 
   620  000B                     	;# 
   621  000C                     	;# 
   622  000D                     	;# 
   623  000E                     	;# 
   624  0010                     	;# 
   625  0011                     	;# 
   626  0012                     	;# 
   627  0013                     	;# 
   628  0014                     	;# 
   629  0015                     	;# 
   630  0016                     	;# 
   631  0016                     	;# 
   632  0017                     	;# 
   633  0018                     	;# 
   634  0019                     	;# 
   635  001A                     	;# 
   636  001A                     	;# 
   637  001B                     	;# 
   638  001B                     	;# 
   639  001C                     	;# 
   640  001D                     	;# 
   641  001E                     	;# 
   642  001F                     	;# 
   643  008C                     	;# 
   644  008D                     	;# 
   645  008E                     	;# 
   646  0090                     	;# 
   647  0091                     	;# 
   648  0092                     	;# 
   649  0093                     	;# 
   650  0094                     	;# 
   651  0095                     	;# 
   652  0096                     	;# 
   653  0098                     	;# 
   654  0099                     	;# 
   655  009A                     	;# 
   656  009B                     	;# 
   657  009B                     	;# 
   658  009C                     	;# 
   659  009D                     	;# 
   660  009E                     	;# 
   661  009F                     	;# 
   662  010C                     	;# 
   663  010D                     	;# 
   664  010E                     	;# 
   665  0111                     	;# 
   666  0112                     	;# 
   667  0113                     	;# 
   668  0114                     	;# 
   669  0115                     	;# 
   670  0116                     	;# 
   671  0117                     	;# 
   672  0118                     	;# 
   673  0119                     	;# 
   674  011C                     	;# 
   675  018C                     	;# 
   676  018D                     	;# 
   677  018E                     	;# 
   678  0191                     	;# 
   679  0191                     	;# 
   680  0192                     	;# 
   681  0193                     	;# 
   682  0193                     	;# 
   683  0194                     	;# 
   684  0195                     	;# 
   685  0196                     	;# 
   686  0197                     	;# 
   687  0199                     	;# 
   688  0199                     	;# 
   689  0199                     	;# 
   690  019A                     	;# 
   691  019A                     	;# 
   692  019A                     	;# 
   693  019B                     	;# 
   694  019B                     	;# 
   695  019B                     	;# 
   696  019B                     	;# 
   697  019B                     	;# 
   698  019C                     	;# 
   699  019C                     	;# 
   700  019C                     	;# 
   701  019D                     	;# 
   702  019D                     	;# 
   703  019D                     	;# 
   704  019E                     	;# 
   705  019E                     	;# 
   706  019E                     	;# 
   707  019F                     	;# 
   708  019F                     	;# 
   709  019F                     	;# 
   710  019F                     	;# 
   711  019F                     	;# 
   712  020C                     	;# 
   713  020D                     	;# 
   714  020E                     	;# 
   715  0211                     	;# 
   716  0211                     	;# 
   717  0212                     	;# 
   718  0212                     	;# 
   719  0213                     	;# 
   720  0213                     	;# 
   721  0214                     	;# 
   722  0214                     	;# 
   723  0215                     	;# 
   724  0215                     	;# 
   725  0215                     	;# 
   726  0215                     	;# 
   727  0216                     	;# 
   728  0216                     	;# 
   729  0217                     	;# 
   730  0217                     	;# 
   731  028C                     	;# 
   732  028D                     	;# 
   733  028E                     	;# 
   734  0291                     	;# 
   735  0291                     	;# 
   736  0292                     	;# 
   737  0293                     	;# 
   738  0294                     	;# 
   739  0298                     	;# 
   740  0298                     	;# 
   741  0299                     	;# 
   742  029A                     	;# 
   743  029B                     	;# 
   744  029E                     	;# 
   745  030C                     	;# 
   746  030D                     	;# 
   747  030E                     	;# 
   748  038C                     	;# 
   749  038D                     	;# 
   750  038E                     	;# 
   751  0391                     	;# 
   752  0392                     	;# 
   753  0393                     	;# 
   754  0394                     	;# 
   755  0395                     	;# 
   756  0396                     	;# 
   757  0397                     	;# 
   758  0398                     	;# 
   759  0399                     	;# 
   760  040E                     	;# 
   761  0413                     	;# 
   762  0413                     	;# 
   763  0414                     	;# 
   764  0414                     	;# 
   765  0415                     	;# 
   766  0416                     	;# 
   767  0417                     	;# 
   768  0418                     	;# 
   769  041A                     	;# 
   770  041A                     	;# 
   771  041B                     	;# 
   772  041B                     	;# 
   773  041C                     	;# 
   774  041D                     	;# 
   775  041E                     	;# 
   776  041F                     	;# 
   777  0493                     	;# 
   778  0494                     	;# 
   779  0495                     	;# 
   780  0496                     	;# 
   781  049A                     	;# 
   782  049B                     	;# 
   783  049C                     	;# 
   784  049D                     	;# 
   785  058C                     	;# 
   786  058C                     	;# 
   787  058D                     	;# 
   788  058E                     	;# 
   789  058E                     	;# 
   790  058F                     	;# 
   791  0590                     	;# 
   792  0590                     	;# 
   793  0591                     	;# 
   794  0592                     	;# 
   795  0592                     	;# 
   796  0593                     	;# 
   797  0594                     	;# 
   798  0594                     	;# 
   799  0595                     	;# 
   800  0596                     	;# 
   801  0596                     	;# 
   802  0597                     	;# 
   803  0598                     	;# 
   804  0599                     	;# 
   805  059A                     	;# 
   806  059B                     	;# 
   807  059B                     	;# 
   808  059C                     	;# 
   809  059D                     	;# 
   810  060C                     	;# 
   811  060C                     	;# 
   812  060D                     	;# 
   813  060E                     	;# 
   814  060F                     	;# 
   815  060F                     	;# 
   816  0610                     	;# 
   817  0611                     	;# 
   818  0612                     	;# 
   819  0613                     	;# 
   820  0614                     	;# 
   821  0617                     	;# 
   822  0618                     	;# 
   823  0619                     	;# 
   824  061A                     	;# 
   825  061B                     	;# 
   826  061C                     	;# 
   827  0691                     	;# 
   828  0692                     	;# 
   829  0693                     	;# 
   830  0694                     	;# 
   831  0695                     	;# 
   832  0696                     	;# 
   833  0697                     	;# 
   834  0699                     	;# 
   835  069A                     	;# 
   836  0711                     	;# 
   837  0712                     	;# 
   838  0713                     	;# 
   839  0714                     	;# 
   840  0715                     	;# 
   841  0718                     	;# 
   842  0718                     	;# 
   843  0719                     	;# 
   844  071A                     	;# 
   845  071A                     	;# 
   846  071B                     	;# 
   847  071C                     	;# 
   848  071D                     	;# 
   849  0791                     	;# 
   850  0791                     	;# 
   851  0792                     	;# 
   852  0793                     	;# 
   853  0793                     	;# 
   854  0794                     	;# 
   855  0795                     	;# 
   856  0795                     	;# 
   857  0796                     	;# 
   858  0797                     	;# 
   859  0797                     	;# 
   860  0798                     	;# 
   861  0799                     	;# 
   862  079A                     	;# 
   863  080C                     	;# 
   864  080C                     	;# 
   865  080D                     	;# 
   866  080E                     	;# 
   867  080E                     	;# 
   868  080F                     	;# 
   869  0810                     	;# 
   870  0810                     	;# 
   871  0811                     	;# 
   872  0812                     	;# 
   873  0812                     	;# 
   874  0813                     	;# 
   875  0814                     	;# 
   876  0815                     	;# 
   877  0816                     	;# 
   878  0817                     	;# 
   879  0818                     	;# 
   880  0819                     	;# 
   881  081A                     	;# 
   882  081A                     	;# 
   883  081B                     	;# 
   884  081C                     	;# 
   885  081C                     	;# 
   886  081D                     	;# 
   887  088C                     	;# 
   888  088D                     	;# 
   889  088E                     	;# 
   890  088F                     	;# 
   891  088F                     	;# 
   892  0890                     	;# 
   893  0891                     	;# 
   894  0892                     	;# 
   895  0893                     	;# 
   896  0893                     	;# 
   897  0894                     	;# 
   898  0895                     	;# 
   899  0896                     	;# 
   900  0897                     	;# 
   901  0897                     	;# 
   902  0898                     	;# 
   903  0899                     	;# 
   904  0D8C                     	;# 
   905  0D8C                     	;# 
   906  0D8D                     	;# 
   907  0D8E                     	;# 
   908  0D8F                     	;# 
   909  0D8F                     	;# 
   910  0D90                     	;# 
   911  0D91                     	;# 
   912  0D92                     	;# 
   913  0D92                     	;# 
   914  0D93                     	;# 
   915  0D94                     	;# 
   916  0D95                     	;# 
   917  0D95                     	;# 
   918  0D96                     	;# 
   919  0D97                     	;# 
   920  0D98                     	;# 
   921  0D99                     	;# 
   922  0D9A                     	;# 
   923  0D9B                     	;# 
   924  0D9C                     	;# 
   925  0D9D                     	;# 
   926  0D9E                     	;# 
   927  0D9E                     	;# 
   928  0D9F                     	;# 
   929  0DA0                     	;# 
   930  0DA1                     	;# 
   931  0DA1                     	;# 
   932  0DA2                     	;# 
   933  0DA3                     	;# 
   934  0DA4                     	;# 
   935  0DA4                     	;# 
   936  0DA5                     	;# 
   937  0DA6                     	;# 
   938  0DA7                     	;# 
   939  0DA7                     	;# 
   940  0DA8                     	;# 
   941  0DA9                     	;# 
   942  0DAA                     	;# 
   943  0DAB                     	;# 
   944  0DAC                     	;# 
   945  0DAD                     	;# 
   946  0DAE                     	;# 
   947  0DAF                     	;# 
   948  0E0F                     	;# 
   949  0E10                     	;# 
   950  0E11                     	;# 
   951  0E12                     	;# 
   952  0E13                     	;# 
   953  0E14                     	;# 
   954  0E15                     	;# 
   955  0E16                     	;# 
   956  0E17                     	;# 
   957  0E18                     	;# 
   958  0E19                     	;# 
   959  0E1A                     	;# 
   960  0E1B                     	;# 
   961  0E1C                     	;# 
   962  0E1D                     	;# 
   963  0E1E                     	;# 
   964  0E1F                     	;# 
   965  0E20                     	;# 
   966  0E21                     	;# 
   967  0E22                     	;# 
   968  0E23                     	;# 
   969  0E24                     	;# 
   970  0E25                     	;# 
   971  0E26                     	;# 
   972  0E27                     	;# 
   973  0E28                     	;# 
   974  0E29                     	;# 
   975  0E2A                     	;# 
   976  0E2B                     	;# 
   977  0E2C                     	;# 
   978  0E2D                     	;# 
   979  0E2E                     	;# 
   980  0E90                     	;# 
   981  0E91                     	;# 
   982  0E92                     	;# 
   983  0E94                     	;# 
   984  0E95                     	;# 
   985  0E9C                     	;# 
   986  0E9D                     	;# 
   987  0E9E                     	;# 
   988  0E9F                     	;# 
   989  0EA0                     	;# 
   990  0EA1                     	;# 
   991  0EA2                     	;# 
   992  0EA3                     	;# 
   993  0EA4                     	;# 
   994  0EA5                     	;# 
   995  0EA6                     	;# 
   996  0EA7                     	;# 
   997  0F0F                     	;# 
   998  0F10                     	;# 
   999  0F11                     	;# 
  1000  0F12                     	;# 
  1001  0F13                     	;# 
  1002  0F14                     	;# 
  1003  0F15                     	;# 
  1004  0F16                     	;# 
  1005  0F17                     	;# 
  1006  0F18                     	;# 
  1007  0F19                     	;# 
  1008  0F1A                     	;# 
  1009  0F1B                     	;# 
  1010  0F1C                     	;# 
  1011  0F1D                     	;# 
  1012  0F1E                     	;# 
  1013  0F1F                     	;# 
  1014  0F20                     	;# 
  1015  0F21                     	;# 
  1016  0F22                     	;# 
  1017  0F23                     	;# 
  1018  0F24                     	;# 
  1019  0F25                     	;# 
  1020  0F26                     	;# 
  1021  0F27                     	;# 
  1022  0F28                     	;# 
  1023  0F29                     	;# 
  1024  0F2A                     	;# 
  1025  0F2B                     	;# 
  1026  0F2C                     	;# 
  1027  0F2D                     	;# 
  1028  0F2E                     	;# 
  1029  0F2F                     	;# 
  1030  0F30                     	;# 
  1031  0F31                     	;# 
  1032  0F32                     	;# 
  1033  0F33                     	;# 
  1034  0F34                     	;# 
  1035  0F35                     	;# 
  1036  0F36                     	;# 
  1037  0F37                     	;# 
  1038  0FE4                     	;# 
  1039  0FE5                     	;# 
  1040  0FE6                     	;# 
  1041  0FE7                     	;# 
  1042  0FE8                     	;# 
  1043  0FE9                     	;# 
  1044  0FEA                     	;# 
  1045  0FEB                     	;# 
  1046  0FED                     	;# 
  1047  0FEE                     	;# 
  1048  0FEF                     	;# 
  1049  0000                     	;# 
  1050  0001                     	;# 
  1051  0002                     	;# 
  1052  0003                     	;# 
  1053  0004                     	;# 
  1054  0005                     	;# 
  1055  0006                     	;# 
  1056  0007                     	;# 
  1057  0008                     	;# 
  1058  0009                     	;# 
  1059  000A                     	;# 
  1060  000B                     	;# 
  1061  000C                     	;# 
  1062  000D                     	;# 
  1063  000E                     	;# 
  1064  0010                     	;# 
  1065  0011                     	;# 
  1066  0012                     	;# 
  1067  0013                     	;# 
  1068  0014                     	;# 
  1069  0015                     	;# 
  1070  0016                     	;# 
  1071  0016                     	;# 
  1072  0017                     	;# 
  1073  0018                     	;# 
  1074  0019                     	;# 
  1075  001A                     	;# 
  1076  001A                     	;# 
  1077  001B                     	;# 
  1078  001B                     	;# 
  1079  001C                     	;# 
  1080  001D                     	;# 
  1081  001E                     	;# 
  1082  001F                     	;# 
  1083  008C                     	;# 
  1084  008D                     	;# 
  1085  008E                     	;# 
  1086  0090                     	;# 
  1087  0091                     	;# 
  1088  0092                     	;# 
  1089  0093                     	;# 
  1090  0094                     	;# 
  1091  0095                     	;# 
  1092  0096                     	;# 
  1093  0098                     	;# 
  1094  0099                     	;# 
  1095  009A                     	;# 
  1096  009B                     	;# 
  1097  009B                     	;# 
  1098  009C                     	;# 
  1099  009D                     	;# 
  1100  009E                     	;# 
  1101  009F                     	;# 
  1102  010C                     	;# 
  1103  010D                     	;# 
  1104  010E                     	;# 
  1105  0111                     	;# 
  1106  0112                     	;# 
  1107  0113                     	;# 
  1108  0114                     	;# 
  1109  0115                     	;# 
  1110  0116                     	;# 
  1111  0117                     	;# 
  1112  0118                     	;# 
  1113  0119                     	;# 
  1114  011C                     	;# 
  1115  018C                     	;# 
  1116  018D                     	;# 
  1117  018E                     	;# 
  1118  0191                     	;# 
  1119  0191                     	;# 
  1120  0192                     	;# 
  1121  0193                     	;# 
  1122  0193                     	;# 
  1123  0194                     	;# 
  1124  0195                     	;# 
  1125  0196                     	;# 
  1126  0197                     	;# 
  1127  0199                     	;# 
  1128  0199                     	;# 
  1129  0199                     	;# 
  1130  019A                     	;# 
  1131  019A                     	;# 
  1132  019A                     	;# 
  1133  019B                     	;# 
  1134  019B                     	;# 
  1135  019B                     	;# 
  1136  019B                     	;# 
  1137  019B                     	;# 
  1138  019C                     	;# 
  1139  019C                     	;# 
  1140  019C                     	;# 
  1141  019D                     	;# 
  1142  019D                     	;# 
  1143  019D                     	;# 
  1144  019E                     	;# 
  1145  019E                     	;# 
  1146  019E                     	;# 
  1147  019F                     	;# 
  1148  019F                     	;# 
  1149  019F                     	;# 
  1150  019F                     	;# 
  1151  019F                     	;# 
  1152  020C                     	;# 
  1153  020D                     	;# 
  1154  020E                     	;# 
  1155  0211                     	;# 
  1156  0211                     	;# 
  1157  0212                     	;# 
  1158  0212                     	;# 
  1159  0213                     	;# 
  1160  0213                     	;# 
  1161  0214                     	;# 
  1162  0214                     	;# 
  1163  0215                     	;# 
  1164  0215                     	;# 
  1165  0215                     	;# 
  1166  0215                     	;# 
  1167  0216                     	;# 
  1168  0216                     	;# 
  1169  0217                     	;# 
  1170  0217                     	;# 
  1171  028C                     	;# 
  1172  028D                     	;# 
  1173  028E                     	;# 
  1174  0291                     	;# 
  1175  0291                     	;# 
  1176  0292                     	;# 
  1177  0293                     	;# 
  1178  0294                     	;# 
  1179  0298                     	;# 
  1180  0298                     	;# 
  1181  0299                     	;# 
  1182  029A                     	;# 
  1183  029B                     	;# 
  1184  029E                     	;# 
  1185  030C                     	;# 
  1186  030D                     	;# 
  1187  030E                     	;# 
  1188  038C                     	;# 
  1189  038D                     	;# 
  1190  038E                     	;# 
  1191  0391                     	;# 
  1192  0392                     	;# 
  1193  0393                     	;# 
  1194  0394                     	;# 
  1195  0395                     	;# 
  1196  0396                     	;# 
  1197  0397                     	;# 
  1198  0398                     	;# 
  1199  0399                     	;# 
  1200  040E                     	;# 
  1201  0413                     	;# 
  1202  0413                     	;# 
  1203  0414                     	;# 
  1204  0414                     	;# 
  1205  0415                     	;# 
  1206  0416                     	;# 
  1207  0417                     	;# 
  1208  0418                     	;# 
  1209  041A                     	;# 
  1210  041A                     	;# 
  1211  041B                     	;# 
  1212  041B                     	;# 
  1213  041C                     	;# 
  1214  041D                     	;# 
  1215  041E                     	;# 
  1216  041F                     	;# 
  1217  0493                     	;# 
  1218  0494                     	;# 
  1219  0495                     	;# 
  1220  0496                     	;# 
  1221  049A                     	;# 
  1222  049B                     	;# 
  1223  049C                     	;# 
  1224  049D                     	;# 
  1225  058C                     	;# 
  1226  058C                     	;# 
  1227  058D                     	;# 
  1228  058E                     	;# 
  1229  058E                     	;# 
  1230  058F                     	;# 
  1231  0590                     	;# 
  1232  0590                     	;# 
  1233  0591                     	;# 
  1234  0592                     	;# 
  1235  0592                     	;# 
  1236  0593                     	;# 
  1237  0594                     	;# 
  1238  0594                     	;# 
  1239  0595                     	;# 
  1240  0596                     	;# 
  1241  0596                     	;# 
  1242  0597                     	;# 
  1243  0598                     	;# 
  1244  0599                     	;# 
  1245  059A                     	;# 
  1246  059B                     	;# 
  1247  059B                     	;# 
  1248  059C                     	;# 
  1249  059D                     	;# 
  1250  060C                     	;# 
  1251  060C                     	;# 
  1252  060D                     	;# 
  1253  060E                     	;# 
  1254  060F                     	;# 
  1255  060F                     	;# 
  1256  0610                     	;# 
  1257  0611                     	;# 
  1258  0612                     	;# 
  1259  0613                     	;# 
  1260  0614                     	;# 
  1261  0617                     	;# 
  1262  0618                     	;# 
  1263  0619                     	;# 
  1264  061A                     	;# 
  1265  061B                     	;# 
  1266  061C                     	;# 
  1267  0691                     	;# 
  1268  0692                     	;# 
  1269  0693                     	;# 
  1270  0694                     	;# 
  1271  0695                     	;# 
  1272  0696                     	;# 
  1273  0697                     	;# 
  1274  0699                     	;# 
  1275  069A                     	;# 
  1276  0711                     	;# 
  1277  0712                     	;# 
  1278  0713                     	;# 
  1279  0714                     	;# 
  1280  0715                     	;# 
  1281  0718                     	;# 
  1282  0718                     	;# 
  1283  0719                     	;# 
  1284  071A                     	;# 
  1285  071A                     	;# 
  1286  071B                     	;# 
  1287  071C                     	;# 
  1288  071D                     	;# 
  1289  0791                     	;# 
  1290  0791                     	;# 
  1291  0792                     	;# 
  1292  0793                     	;# 
  1293  0793                     	;# 
  1294  0794                     	;# 
  1295  0795                     	;# 
  1296  0795                     	;# 
  1297  0796                     	;# 
  1298  0797                     	;# 
  1299  0797                     	;# 
  1300  0798                     	;# 
  1301  0799                     	;# 
  1302  079A                     	;# 
  1303  080C                     	;# 
  1304  080C                     	;# 
  1305  080D                     	;# 
  1306  080E                     	;# 
  1307  080E                     	;# 
  1308  080F                     	;# 
  1309  0810                     	;# 
  1310  0810                     	;# 
  1311  0811                     	;# 
  1312  0812                     	;# 
  1313  0812                     	;# 
  1314  0813                     	;# 
  1315  0814                     	;# 
  1316  0815                     	;# 
  1317  0816                     	;# 
  1318  0817                     	;# 
  1319  0818                     	;# 
  1320  0819                     	;# 
  1321  081A                     	;# 
  1322  081A                     	;# 
  1323  081B                     	;# 
  1324  081C                     	;# 
  1325  081C                     	;# 
  1326  081D                     	;# 
  1327  088C                     	;# 
  1328  088D                     	;# 
  1329  088E                     	;# 
  1330  088F                     	;# 
  1331  088F                     	;# 
  1332  0890                     	;# 
  1333  0891                     	;# 
  1334  0892                     	;# 
  1335  0893                     	;# 
  1336  0893                     	;# 
  1337  0894                     	;# 
  1338  0895                     	;# 
  1339  0896                     	;# 
  1340  0897                     	;# 
  1341  0897                     	;# 
  1342  0898                     	;# 
  1343  0899                     	;# 
  1344  0D8C                     	;# 
  1345  0D8C                     	;# 
  1346  0D8D                     	;# 
  1347  0D8E                     	;# 
  1348  0D8F                     	;# 
  1349  0D8F                     	;# 
  1350  0D90                     	;# 
  1351  0D91                     	;# 
  1352  0D92                     	;# 
  1353  0D92                     	;# 
  1354  0D93                     	;# 
  1355  0D94                     	;# 
  1356  0D95                     	;# 
  1357  0D95                     	;# 
  1358  0D96                     	;# 
  1359  0D97                     	;# 
  1360  0D98                     	;# 
  1361  0D99                     	;# 
  1362  0D9A                     	;# 
  1363  0D9B                     	;# 
  1364  0D9C                     	;# 
  1365  0D9D                     	;# 
  1366  0D9E                     	;# 
  1367  0D9E                     	;# 
  1368  0D9F                     	;# 
  1369  0DA0                     	;# 
  1370  0DA1                     	;# 
  1371  0DA1                     	;# 
  1372  0DA2                     	;# 
  1373  0DA3                     	;# 
  1374  0DA4                     	;# 
  1375  0DA4                     	;# 
  1376  0DA5                     	;# 
  1377  0DA6                     	;# 
  1378  0DA7                     	;# 
  1379  0DA7                     	;# 
  1380  0DA8                     	;# 
  1381  0DA9                     	;# 
  1382  0DAA                     	;# 
  1383  0DAB                     	;# 
  1384  0DAC                     	;# 
  1385  0DAD                     	;# 
  1386  0DAE                     	;# 
  1387  0DAF                     	;# 
  1388  0E0F                     	;# 
  1389  0E10                     	;# 
  1390  0E11                     	;# 
  1391  0E12                     	;# 
  1392  0E13                     	;# 
  1393  0E14                     	;# 
  1394  0E15                     	;# 
  1395  0E16                     	;# 
  1396  0E17                     	;# 
  1397  0E18                     	;# 
  1398  0E19                     	;# 
  1399  0E1A                     	;# 
  1400  0E1B                     	;# 
  1401  0E1C                     	;# 
  1402  0E1D                     	;# 
  1403  0E1E                     	;# 
  1404  0E1F                     	;# 
  1405  0E20                     	;# 
  1406  0E21                     	;# 
  1407  0E22                     	;# 
  1408  0E23                     	;# 
  1409  0E24                     	;# 
  1410  0E25                     	;# 
  1411  0E26                     	;# 
  1412  0E27                     	;# 
  1413  0E28                     	;# 
  1414  0E29                     	;# 
  1415  0E2A                     	;# 
  1416  0E2B                     	;# 
  1417  0E2C                     	;# 
  1418  0E2D                     	;# 
  1419  0E2E                     	;# 
  1420  0E90                     	;# 
  1421  0E91                     	;# 
  1422  0E92                     	;# 
  1423  0E94                     	;# 
  1424  0E95                     	;# 
  1425  0E9C                     	;# 
  1426  0E9D                     	;# 
  1427  0E9E                     	;# 
  1428  0E9F                     	;# 
  1429  0EA0                     	;# 
  1430  0EA1                     	;# 
  1431  0EA2                     	;# 
  1432  0EA3                     	;# 
  1433  0EA4                     	;# 
  1434  0EA5                     	;# 
  1435  0EA6                     	;# 
  1436  0EA7                     	;# 
  1437  0F0F                     	;# 
  1438  0F10                     	;# 
  1439  0F11                     	;# 
  1440  0F12                     	;# 
  1441  0F13                     	;# 
  1442  0F14                     	;# 
  1443  0F15                     	;# 
  1444  0F16                     	;# 
  1445  0F17                     	;# 
  1446  0F18                     	;# 
  1447  0F19                     	;# 
  1448  0F1A                     	;# 
  1449  0F1B                     	;# 
  1450  0F1C                     	;# 
  1451  0F1D                     	;# 
  1452  0F1E                     	;# 
  1453  0F1F                     	;# 
  1454  0F20                     	;# 
  1455  0F21                     	;# 
  1456  0F22                     	;# 
  1457  0F23                     	;# 
  1458  0F24                     	;# 
  1459  0F25                     	;# 
  1460  0F26                     	;# 
  1461  0F27                     	;# 
  1462  0F28                     	;# 
  1463  0F29                     	;# 
  1464  0F2A                     	;# 
  1465  0F2B                     	;# 
  1466  0F2C                     	;# 
  1467  0F2D                     	;# 
  1468  0F2E                     	;# 
  1469  0F2F                     	;# 
  1470  0F30                     	;# 
  1471  0F31                     	;# 
  1472  0F32                     	;# 
  1473  0F33                     	;# 
  1474  0F34                     	;# 
  1475  0F35                     	;# 
  1476  0F36                     	;# 
  1477  0F37                     	;# 
  1478  0FE4                     	;# 
  1479  0FE5                     	;# 
  1480  0FE6                     	;# 
  1481  0FE7                     	;# 
  1482  0FE8                     	;# 
  1483  0FE9                     	;# 
  1484  0FEA                     	;# 
  1485  0FEB                     	;# 
  1486  0FED                     	;# 
  1487  0FEE                     	;# 
  1488  0FEF                     	;# 
  1489  0000                     	;# 
  1490  0001                     	;# 
  1491  0002                     	;# 
  1492  0003                     	;# 
  1493  0004                     	;# 
  1494  0005                     	;# 
  1495  0006                     	;# 
  1496  0007                     	;# 
  1497  0008                     	;# 
  1498  0009                     	;# 
  1499  000A                     	;# 
  1500  000B                     	;# 
  1501  000C                     	;# 
  1502  000D                     	;# 
  1503  000E                     	;# 
  1504  0010                     	;# 
  1505  0011                     	;# 
  1506  0012                     	;# 
  1507  0013                     	;# 
  1508  0014                     	;# 
  1509  0015                     	;# 
  1510  0016                     	;# 
  1511  0016                     	;# 
  1512  0017                     	;# 
  1513  0018                     	;# 
  1514  0019                     	;# 
  1515  001A                     	;# 
  1516  001A                     	;# 
  1517  001B                     	;# 
  1518  001B                     	;# 
  1519  001C                     	;# 
  1520  001D                     	;# 
  1521  001E                     	;# 
  1522  001F                     	;# 
  1523  008C                     	;# 
  1524  008D                     	;# 
  1525  008E                     	;# 
  1526  0090                     	;# 
  1527  0091                     	;# 
  1528  0092                     	;# 
  1529  0093                     	;# 
  1530  0094                     	;# 
  1531  0095                     	;# 
  1532  0096                     	;# 
  1533  0098                     	;# 
  1534  0099                     	;# 
  1535  009A                     	;# 
  1536  009B                     	;# 
  1537  009B                     	;# 
  1538  009C                     	;# 
  1539  009D                     	;# 
  1540  009E                     	;# 
  1541  009F                     	;# 
  1542  010C                     	;# 
  1543  010D                     	;# 
  1544  010E                     	;# 
  1545  0111                     	;# 
  1546  0112                     	;# 
  1547  0113                     	;# 
  1548  0114                     	;# 
  1549  0115                     	;# 
  1550  0116                     	;# 
  1551  0117                     	;# 
  1552  0118                     	;# 
  1553  0119                     	;# 
  1554  011C                     	;# 
  1555  018C                     	;# 
  1556  018D                     	;# 
  1557  018E                     	;# 
  1558  0191                     	;# 
  1559  0191                     	;# 
  1560  0192                     	;# 
  1561  0193                     	;# 
  1562  0193                     	;# 
  1563  0194                     	;# 
  1564  0195                     	;# 
  1565  0196                     	;# 
  1566  0197                     	;# 
  1567  0199                     	;# 
  1568  0199                     	;# 
  1569  0199                     	;# 
  1570  019A                     	;# 
  1571  019A                     	;# 
  1572  019A                     	;# 
  1573  019B                     	;# 
  1574  019B                     	;# 
  1575  019B                     	;# 
  1576  019B                     	;# 
  1577  019B                     	;# 
  1578  019C                     	;# 
  1579  019C                     	;# 
  1580  019C                     	;# 
  1581  019D                     	;# 
  1582  019D                     	;# 
  1583  019D                     	;# 
  1584  019E                     	;# 
  1585  019E                     	;# 
  1586  019E                     	;# 
  1587  019F                     	;# 
  1588  019F                     	;# 
  1589  019F                     	;# 
  1590  019F                     	;# 
  1591  019F                     	;# 
  1592  020C                     	;# 
  1593  020D                     	;# 
  1594  020E                     	;# 
  1595  0211                     	;# 
  1596  0211                     	;# 
  1597  0212                     	;# 
  1598  0212                     	;# 
  1599  0213                     	;# 
  1600  0213                     	;# 
  1601  0214                     	;# 
  1602  0214                     	;# 
  1603  0215                     	;# 
  1604  0215                     	;# 
  1605  0215                     	;# 
  1606  0215                     	;# 
  1607  0216                     	;# 
  1608  0216                     	;# 
  1609  0217                     	;# 
  1610  0217                     	;# 
  1611  028C                     	;# 
  1612  028D                     	;# 
  1613  028E                     	;# 
  1614  0291                     	;# 
  1615  0291                     	;# 
  1616  0292                     	;# 
  1617  0293                     	;# 
  1618  0294                     	;# 
  1619  0298                     	;# 
  1620  0298                     	;# 
  1621  0299                     	;# 
  1622  029A                     	;# 
  1623  029B                     	;# 
  1624  029E                     	;# 
  1625  030C                     	;# 
  1626  030D                     	;# 
  1627  030E                     	;# 
  1628  038C                     	;# 
  1629  038D                     	;# 
  1630  038E                     	;# 
  1631  0391                     	;# 
  1632  0392                     	;# 
  1633  0393                     	;# 
  1634  0394                     	;# 
  1635  0395                     	;# 
  1636  0396                     	;# 
  1637  0397                     	;# 
  1638  0398                     	;# 
  1639  0399                     	;# 
  1640  040E                     	;# 
  1641  0413                     	;# 
  1642  0413                     	;# 
  1643  0414                     	;# 
  1644  0414                     	;# 
  1645  0415                     	;# 
  1646  0416                     	;# 
  1647  0417                     	;# 
  1648  0418                     	;# 
  1649  041A                     	;# 
  1650  041A                     	;# 
  1651  041B                     	;# 
  1652  041B                     	;# 
  1653  041C                     	;# 
  1654  041D                     	;# 
  1655  041E                     	;# 
  1656  041F                     	;# 
  1657  0493                     	;# 
  1658  0494                     	;# 
  1659  0495                     	;# 
  1660  0496                     	;# 
  1661  049A                     	;# 
  1662  049B                     	;# 
  1663  049C                     	;# 
  1664  049D                     	;# 
  1665  058C                     	;# 
  1666  058C                     	;# 
  1667  058D                     	;# 
  1668  058E                     	;# 
  1669  058E                     	;# 
  1670  058F                     	;# 
  1671  0590                     	;# 
  1672  0590                     	;# 
  1673  0591                     	;# 
  1674  0592                     	;# 
  1675  0592                     	;# 
  1676  0593                     	;# 
  1677  0594                     	;# 
  1678  0594                     	;# 
  1679  0595                     	;# 
  1680  0596                     	;# 
  1681  0596                     	;# 
  1682  0597                     	;# 
  1683  0598                     	;# 
  1684  0599                     	;# 
  1685  059A                     	;# 
  1686  059B                     	;# 
  1687  059B                     	;# 
  1688  059C                     	;# 
  1689  059D                     	;# 
  1690  060C                     	;# 
  1691  060C                     	;# 
  1692  060D                     	;# 
  1693  060E                     	;# 
  1694  060F                     	;# 
  1695  060F                     	;# 
  1696  0610                     	;# 
  1697  0611                     	;# 
  1698  0612                     	;# 
  1699  0613                     	;# 
  1700  0614                     	;# 
  1701  0617                     	;# 
  1702  0618                     	;# 
  1703  0619                     	;# 
  1704  061A                     	;# 
  1705  061B                     	;# 
  1706  061C                     	;# 
  1707  0691                     	;# 
  1708  0692                     	;# 
  1709  0693                     	;# 
  1710  0694                     	;# 
  1711  0695                     	;# 
  1712  0696                     	;# 
  1713  0697                     	;# 
  1714  0699                     	;# 
  1715  069A                     	;# 
  1716  0711                     	;# 
  1717  0712                     	;# 
  1718  0713                     	;# 
  1719  0714                     	;# 
  1720  0715                     	;# 
  1721  0718                     	;# 
  1722  0718                     	;# 
  1723  0719                     	;# 
  1724  071A                     	;# 
  1725  071A                     	;# 
  1726  071B                     	;# 
  1727  071C                     	;# 
  1728  071D                     	;# 
  1729  0791                     	;# 
  1730  0791                     	;# 
  1731  0792                     	;# 
  1732  0793                     	;# 
  1733  0793                     	;# 
  1734  0794                     	;# 
  1735  0795                     	;# 
  1736  0795                     	;# 
  1737  0796                     	;# 
  1738  0797                     	;# 
  1739  0797                     	;# 
  1740  0798                     	;# 
  1741  0799                     	;# 
  1742  079A                     	;# 
  1743  080C                     	;# 
  1744  080C                     	;# 
  1745  080D                     	;# 
  1746  080E                     	;# 
  1747  080E                     	;# 
  1748  080F                     	;# 
  1749  0810                     	;# 
  1750  0810                     	;# 
  1751  0811                     	;# 
  1752  0812                     	;# 
  1753  0812                     	;# 
  1754  0813                     	;# 
  1755  0814                     	;# 
  1756  0815                     	;# 
  1757  0816                     	;# 
  1758  0817                     	;# 
  1759  0818                     	;# 
  1760  0819                     	;# 
  1761  081A                     	;# 
  1762  081A                     	;# 
  1763  081B                     	;# 
  1764  081C                     	;# 
  1765  081C                     	;# 
  1766  081D                     	;# 
  1767  088C                     	;# 
  1768  088D                     	;# 
  1769  088E                     	;# 
  1770  088F                     	;# 
  1771  088F                     	;# 
  1772  0890                     	;# 
  1773  0891                     	;# 
  1774  0892                     	;# 
  1775  0893                     	;# 
  1776  0893                     	;# 
  1777  0894                     	;# 
  1778  0895                     	;# 
  1779  0896                     	;# 
  1780  0897                     	;# 
  1781  0897                     	;# 
  1782  0898                     	;# 
  1783  0899                     	;# 
  1784  0D8C                     	;# 
  1785  0D8C                     	;# 
  1786  0D8D                     	;# 
  1787  0D8E                     	;# 
  1788  0D8F                     	;# 
  1789  0D8F                     	;# 
  1790  0D90                     	;# 
  1791  0D91                     	;# 
  1792  0D92                     	;# 
  1793  0D92                     	;# 
  1794  0D93                     	;# 
  1795  0D94                     	;# 
  1796  0D95                     	;# 
  1797  0D95                     	;# 
  1798  0D96                     	;# 
  1799  0D97                     	;# 
  1800  0D98                     	;# 
  1801  0D99                     	;# 
  1802  0D9A                     	;# 
  1803  0D9B                     	;# 
  1804  0D9C                     	;# 
  1805  0D9D                     	;# 
  1806  0D9E                     	;# 
  1807  0D9E                     	;# 
  1808  0D9F                     	;# 
  1809  0DA0                     	;# 
  1810  0DA1                     	;# 
  1811  0DA1                     	;# 
  1812  0DA2                     	;# 
  1813  0DA3                     	;# 
  1814  0DA4                     	;# 
  1815  0DA4                     	;# 
  1816  0DA5                     	;# 
  1817  0DA6                     	;# 
  1818  0DA7                     	;# 
  1819  0DA7                     	;# 
  1820  0DA8                     	;# 
  1821  0DA9                     	;# 
  1822  0DAA                     	;# 
  1823  0DAB                     	;# 
  1824  0DAC                     	;# 
  1825  0DAD                     	;# 
  1826  0DAE                     	;# 
  1827  0DAF                     	;# 
  1828  0E0F                     	;# 
  1829  0E10                     	;# 
  1830  0E11                     	;# 
  1831  0E12                     	;# 
  1832  0E13                     	;# 
  1833  0E14                     	;# 
  1834  0E15                     	;# 
  1835  0E16                     	;# 
  1836  0E17                     	;# 
  1837  0E18                     	;# 
  1838  0E19                     	;# 
  1839  0E1A                     	;# 
  1840  0E1B                     	;# 
  1841  0E1C                     	;# 
  1842  0E1D                     	;# 
  1843  0E1E                     	;# 
  1844  0E1F                     	;# 
  1845  0E20                     	;# 
  1846  0E21                     	;# 
  1847  0E22                     	;# 
  1848  0E23                     	;# 
  1849  0E24                     	;# 
  1850  0E25                     	;# 
  1851  0E26                     	;# 
  1852  0E27                     	;# 
  1853  0E28                     	;# 
  1854  0E29                     	;# 
  1855  0E2A                     	;# 
  1856  0E2B                     	;# 
  1857  0E2C                     	;# 
  1858  0E2D                     	;# 
  1859  0E2E                     	;# 
  1860  0E90                     	;# 
  1861  0E91                     	;# 
  1862  0E92                     	;# 
  1863  0E94                     	;# 
  1864  0E95                     	;# 
  1865  0E9C                     	;# 
  1866  0E9D                     	;# 
  1867  0E9E                     	;# 
  1868  0E9F                     	;# 
  1869  0EA0                     	;# 
  1870  0EA1                     	;# 
  1871  0EA2                     	;# 
  1872  0EA3                     	;# 
  1873  0EA4                     	;# 
  1874  0EA5                     	;# 
  1875  0EA6                     	;# 
  1876  0EA7                     	;# 
  1877  0F0F                     	;# 
  1878  0F10                     	;# 
  1879  0F11                     	;# 
  1880  0F12                     	;# 
  1881  0F13                     	;# 
  1882  0F14                     	;# 
  1883  0F15                     	;# 
  1884  0F16                     	;# 
  1885  0F17                     	;# 
  1886  0F18                     	;# 
  1887  0F19                     	;# 
  1888  0F1A                     	;# 
  1889  0F1B                     	;# 
  1890  0F1C                     	;# 
  1891  0F1D                     	;# 
  1892  0F1E                     	;# 
  1893  0F1F                     	;# 
  1894  0F20                     	;# 
  1895  0F21                     	;# 
  1896  0F22                     	;# 
  1897  0F23                     	;# 
  1898  0F24                     	;# 
  1899  0F25                     	;# 
  1900  0F26                     	;# 
  1901  0F27                     	;# 
  1902  0F28                     	;# 
  1903  0F29                     	;# 
  1904  0F2A                     	;# 
  1905  0F2B                     	;# 
  1906  0F2C                     	;# 
  1907  0F2D                     	;# 
  1908  0F2E                     	;# 
  1909  0F2F                     	;# 
  1910  0F30                     	;# 
  1911  0F31                     	;# 
  1912  0F32                     	;# 
  1913  0F33                     	;# 
  1914  0F34                     	;# 
  1915  0F35                     	;# 
  1916  0F36                     	;# 
  1917  0F37                     	;# 
  1918  0FE4                     	;# 
  1919  0FE5                     	;# 
  1920  0FE6                     	;# 
  1921  0FE7                     	;# 
  1922  0FE8                     	;# 
  1923  0FE9                     	;# 
  1924  0FEA                     	;# 
  1925  0FEB                     	;# 
  1926  0FED                     	;# 
  1927  0FEE                     	;# 
  1928  0FEF                     	;# 
  1929  0000                     	;# 
  1930  0001                     	;# 
  1931  0002                     	;# 
  1932  0003                     	;# 
  1933  0004                     	;# 
  1934  0005                     	;# 
  1935  0006                     	;# 
  1936  0007                     	;# 
  1937  0008                     	;# 
  1938  0009                     	;# 
  1939  000A                     	;# 
  1940  000B                     	;# 
  1941  000C                     	;# 
  1942  000D                     	;# 
  1943  000E                     	;# 
  1944  0010                     	;# 
  1945  0011                     	;# 
  1946  0012                     	;# 
  1947  0013                     	;# 
  1948  0014                     	;# 
  1949  0015                     	;# 
  1950  0016                     	;# 
  1951  0016                     	;# 
  1952  0017                     	;# 
  1953  0018                     	;# 
  1954  0019                     	;# 
  1955  001A                     	;# 
  1956  001A                     	;# 
  1957  001B                     	;# 
  1958  001B                     	;# 
  1959  001C                     	;# 
  1960  001D                     	;# 
  1961  001E                     	;# 
  1962  001F                     	;# 
  1963  008C                     	;# 
  1964  008D                     	;# 
  1965  008E                     	;# 
  1966  0090                     	;# 
  1967  0091                     	;# 
  1968  0092                     	;# 
  1969  0093                     	;# 
  1970  0094                     	;# 
  1971  0095                     	;# 
  1972  0096                     	;# 
  1973  0098                     	;# 
  1974  0099                     	;# 
  1975  009A                     	;# 
  1976  009B                     	;# 
  1977  009B                     	;# 
  1978  009C                     	;# 
  1979  009D                     	;# 
  1980  009E                     	;# 
  1981  009F                     	;# 
  1982  010C                     	;# 
  1983  010D                     	;# 
  1984  010E                     	;# 
  1985  0111                     	;# 
  1986  0112                     	;# 
  1987  0113                     	;# 
  1988  0114                     	;# 
  1989  0115                     	;# 
  1990  0116                     	;# 
  1991  0117                     	;# 
  1992  0118                     	;# 
  1993  0119                     	;# 
  1994  011C                     	;# 
  1995  018C                     	;# 
  1996  018D                     	;# 
  1997  018E                     	;# 
  1998  0191                     	;# 
  1999  0191                     	;# 
  2000  0192                     	;# 
  2001  0193                     	;# 
  2002  0193                     	;# 
  2003  0194                     	;# 
  2004  0195                     	;# 
  2005  0196                     	;# 
  2006  0197                     	;# 
  2007  0199                     	;# 
  2008  0199                     	;# 
  2009  0199                     	;# 
  2010  019A                     	;# 
  2011  019A                     	;# 
  2012  019A                     	;# 
  2013  019B                     	;# 
  2014  019B                     	;# 
  2015  019B                     	;# 
  2016  019B                     	;# 
  2017  019B                     	;# 
  2018  019C                     	;# 
  2019  019C                     	;# 
  2020  019C                     	;# 
  2021  019D                     	;# 
  2022  019D                     	;# 
  2023  019D                     	;# 
  2024  019E                     	;# 
  2025  019E                     	;# 
  2026  019E                     	;# 
  2027  019F                     	;# 
  2028  019F                     	;# 
  2029  019F                     	;# 
  2030  019F                     	;# 
  2031  019F                     	;# 
  2032  020C                     	;# 
  2033  020D                     	;# 
  2034  020E                     	;# 
  2035  0211                     	;# 
  2036  0211                     	;# 
  2037  0212                     	;# 
  2038  0212                     	;# 
  2039  0213                     	;# 
  2040  0213                     	;# 
  2041  0214                     	;# 
  2042  0214                     	;# 
  2043  0215                     	;# 
  2044  0215                     	;# 
  2045  0215                     	;# 
  2046  0215                     	;# 
  2047  0216                     	;# 
  2048  0216                     	;# 
  2049  0217                     	;# 
  2050  0217                     	;# 
  2051  028C                     	;# 
  2052  028D                     	;# 
  2053  028E                     	;# 
  2054  0291                     	;# 
  2055  0291                     	;# 
  2056  0292                     	;# 
  2057  0293                     	;# 
  2058  0294                     	;# 
  2059  0298                     	;# 
  2060  0298                     	;# 
  2061  0299                     	;# 
  2062  029A                     	;# 
  2063  029B                     	;# 
  2064  029E                     	;# 
  2065  030C                     	;# 
  2066  030D                     	;# 
  2067  030E                     	;# 
  2068  038C                     	;# 
  2069  038D                     	;# 
  2070  038E                     	;# 
  2071  0391                     	;# 
  2072  0392                     	;# 
  2073  0393                     	;# 
  2074  0394                     	;# 
  2075  0395                     	;# 
  2076  0396                     	;# 
  2077  0397                     	;# 
  2078  0398                     	;# 
  2079  0399                     	;# 
  2080  040E                     	;# 
  2081  0413                     	;# 
  2082  0413                     	;# 
  2083  0414                     	;# 
  2084  0414                     	;# 
  2085  0415                     	;# 
  2086  0416                     	;# 
  2087  0417                     	;# 
  2088  0418                     	;# 
  2089  041A                     	;# 
  2090  041A                     	;# 
  2091  041B                     	;# 
  2092  041B                     	;# 
  2093  041C                     	;# 
  2094  041D                     	;# 
  2095  041E                     	;# 
  2096  041F                     	;# 
  2097  0493                     	;# 
  2098  0494                     	;# 
  2099  0495                     	;# 
  2100  0496                     	;# 
  2101  049A                     	;# 
  2102  049B                     	;# 
  2103  049C                     	;# 
  2104  049D                     	;# 
  2105  058C                     	;# 
  2106  058C                     	;# 
  2107  058D                     	;# 
  2108  058E                     	;# 
  2109  058E                     	;# 
  2110  058F                     	;# 
  2111  0590                     	;# 
  2112  0590                     	;# 
  2113  0591                     	;# 
  2114  0592                     	;# 
  2115  0592                     	;# 
  2116  0593                     	;# 
  2117  0594                     	;# 
  2118  0594                     	;# 
  2119  0595                     	;# 
  2120  0596                     	;# 
  2121  0596                     	;# 
  2122  0597                     	;# 
  2123  0598                     	;# 
  2124  0599                     	;# 
  2125  059A                     	;# 
  2126  059B                     	;# 
  2127  059B                     	;# 
  2128  059C                     	;# 
  2129  059D                     	;# 
  2130  060C                     	;# 
  2131  060C                     	;# 
  2132  060D                     	;# 
  2133  060E                     	;# 
  2134  060F                     	;# 
  2135  060F                     	;# 
  2136  0610                     	;# 
  2137  0611                     	;# 
  2138  0612                     	;# 
  2139  0613                     	;# 
  2140  0614                     	;# 
  2141  0617                     	;# 
  2142  0618                     	;# 
  2143  0619                     	;# 
  2144  061A                     	;# 
  2145  061B                     	;# 
  2146  061C                     	;# 
  2147  0691                     	;# 
  2148  0692                     	;# 
  2149  0693                     	;# 
  2150  0694                     	;# 
  2151  0695                     	;# 
  2152  0696                     	;# 
  2153  0697                     	;# 
  2154  0699                     	;# 
  2155  069A                     	;# 
  2156  0711                     	;# 
  2157  0712                     	;# 
  2158  0713                     	;# 
  2159  0714                     	;# 
  2160  0715                     	;# 
  2161  0718                     	;# 
  2162  0718                     	;# 
  2163  0719                     	;# 
  2164  071A                     	;# 
  2165  071A                     	;# 
  2166  071B                     	;# 
  2167  071C                     	;# 
  2168  071D                     	;# 
  2169  0791                     	;# 
  2170  0791                     	;# 
  2171  0792                     	;# 
  2172  0793                     	;# 
  2173  0793                     	;# 
  2174  0794                     	;# 
  2175  0795                     	;# 
  2176  0795                     	;# 
  2177  0796                     	;# 
  2178  0797                     	;# 
  2179  0797                     	;# 
  2180  0798                     	;# 
  2181  0799                     	;# 
  2182  079A                     	;# 
  2183  080C                     	;# 
  2184  080C                     	;# 
  2185  080D                     	;# 
  2186  080E                     	;# 
  2187  080E                     	;# 
  2188  080F                     	;# 
  2189  0810                     	;# 
  2190  0810                     	;# 
  2191  0811                     	;# 
  2192  0812                     	;# 
  2193  0812                     	;# 
  2194  0813                     	;# 
  2195  0814                     	;# 
  2196  0815                     	;# 
  2197  0816                     	;# 
  2198  0817                     	;# 
  2199  0818                     	;# 
  2200  0819                     	;# 
  2201  081A                     	;# 
  2202  081A                     	;# 
  2203  081B                     	;# 
  2204  081C                     	;# 
  2205  081C                     	;# 
  2206  081D                     	;# 
  2207  088C                     	;# 
  2208  088D                     	;# 
  2209  088E                     	;# 
  2210  088F                     	;# 
  2211  088F                     	;# 
  2212  0890                     	;# 
  2213  0891                     	;# 
  2214  0892                     	;# 
  2215  0893                     	;# 
  2216  0893                     	;# 
  2217  0894                     	;# 
  2218  0895                     	;# 
  2219  0896                     	;# 
  2220  0897                     	;# 
  2221  0897                     	;# 
  2222  0898                     	;# 
  2223  0899                     	;# 
  2224  0D8C                     	;# 
  2225  0D8C                     	;# 
  2226  0D8D                     	;# 
  2227  0D8E                     	;# 
  2228  0D8F                     	;# 
  2229  0D8F                     	;# 
  2230  0D90                     	;# 
  2231  0D91                     	;# 
  2232  0D92                     	;# 
  2233  0D92                     	;# 
  2234  0D93                     	;# 
  2235  0D94                     	;# 
  2236  0D95                     	;# 
  2237  0D95                     	;# 
  2238  0D96                     	;# 
  2239  0D97                     	;# 
  2240  0D98                     	;# 
  2241  0D99                     	;# 
  2242  0D9A                     	;# 
  2243  0D9B                     	;# 
  2244  0D9C                     	;# 
  2245  0D9D                     	;# 
  2246  0D9E                     	;# 
  2247  0D9E                     	;# 
  2248  0D9F                     	;# 
  2249  0DA0                     	;# 
  2250  0DA1                     	;# 
  2251  0DA1                     	;# 
  2252  0DA2                     	;# 
  2253  0DA3                     	;# 
  2254  0DA4                     	;# 
  2255  0DA4                     	;# 
  2256  0DA5                     	;# 
  2257  0DA6                     	;# 
  2258  0DA7                     	;# 
  2259  0DA7                     	;# 
  2260  0DA8                     	;# 
  2261  0DA9                     	;# 
  2262  0DAA                     	;# 
  2263  0DAB                     	;# 
  2264  0DAC                     	;# 
  2265  0DAD                     	;# 
  2266  0DAE                     	;# 
  2267  0DAF                     	;# 
  2268  0E0F                     	;# 
  2269  0E10                     	;# 
  2270  0E11                     	;# 
  2271  0E12                     	;# 
  2272  0E13                     	;# 
  2273  0E14                     	;# 
  2274  0E15                     	;# 
  2275  0E16                     	;# 
  2276  0E17                     	;# 
  2277  0E18                     	;# 
  2278  0E19                     	;# 
  2279  0E1A                     	;# 
  2280  0E1B                     	;# 
  2281  0E1C                     	;# 
  2282  0E1D                     	;# 
  2283  0E1E                     	;# 
  2284  0E1F                     	;# 
  2285  0E20                     	;# 
  2286  0E21                     	;# 
  2287  0E22                     	;# 
  2288  0E23                     	;# 
  2289  0E24                     	;# 
  2290  0E25                     	;# 
  2291  0E26                     	;# 
  2292  0E27                     	;# 
  2293  0E28                     	;# 
  2294  0E29                     	;# 
  2295  0E2A                     	;# 
  2296  0E2B                     	;# 
  2297  0E2C                     	;# 
  2298  0E2D                     	;# 
  2299  0E2E                     	;# 
  2300  0E90                     	;# 
  2301  0E91                     	;# 
  2302  0E92                     	;# 
  2303  0E94                     	;# 
  2304  0E95                     	;# 
  2305  0E9C                     	;# 
  2306  0E9D                     	;# 
  2307  0E9E                     	;# 
  2308  0E9F                     	;# 
  2309  0EA0                     	;# 
  2310  0EA1                     	;# 
  2311  0EA2                     	;# 
  2312  0EA3                     	;# 
  2313  0EA4                     	;# 
  2314  0EA5                     	;# 
  2315  0EA6                     	;# 
  2316  0EA7                     	;# 
  2317  0F0F                     	;# 
  2318  0F10                     	;# 
  2319  0F11                     	;# 
  2320  0F12                     	;# 
  2321  0F13                     	;# 
  2322  0F14                     	;# 
  2323  0F15                     	;# 
  2324  0F16                     	;# 
  2325  0F17                     	;# 
  2326  0F18                     	;# 
  2327  0F19                     	;# 
  2328  0F1A                     	;# 
  2329  0F1B                     	;# 
  2330  0F1C                     	;# 
  2331  0F1D                     	;# 
  2332  0F1E                     	;# 
  2333  0F1F                     	;# 
  2334  0F20                     	;# 
  2335  0F21                     	;# 
  2336  0F22                     	;# 
  2337  0F23                     	;# 
  2338  0F24                     	;# 
  2339  0F25                     	;# 
  2340  0F26                     	;# 
  2341  0F27                     	;# 
  2342  0F28                     	;# 
  2343  0F29                     	;# 
  2344  0F2A                     	;# 
  2345  0F2B                     	;# 
  2346  0F2C                     	;# 
  2347  0F2D                     	;# 
  2348  0F2E                     	;# 
  2349  0F2F                     	;# 
  2350  0F30                     	;# 
  2351  0F31                     	;# 
  2352  0F32                     	;# 
  2353  0F33                     	;# 
  2354  0F34                     	;# 
  2355  0F35                     	;# 
  2356  0F36                     	;# 
  2357  0F37                     	;# 
  2358  0FE4                     	;# 
  2359  0FE5                     	;# 
  2360  0FE6                     	;# 
  2361  0FE7                     	;# 
  2362  0FE8                     	;# 
  2363  0FE9                     	;# 
  2364  0FEA                     	;# 
  2365  0FEB                     	;# 
  2366  0FED                     	;# 
  2367  0FEE                     	;# 
  2368  0FEF                     	;# 
  2369  0000                     	;# 
  2370  0001                     	;# 
  2371  0002                     	;# 
  2372  0003                     	;# 
  2373  0004                     	;# 
  2374  0005                     	;# 
  2375  0006                     	;# 
  2376  0007                     	;# 
  2377  0008                     	;# 
  2378  0009                     	;# 
  2379  000A                     	;# 
  2380  000B                     	;# 
  2381  000C                     	;# 
  2382  000D                     	;# 
  2383  000E                     	;# 
  2384  0010                     	;# 
  2385  0011                     	;# 
  2386  0012                     	;# 
  2387  0013                     	;# 
  2388  0014                     	;# 
  2389  0015                     	;# 
  2390  0016                     	;# 
  2391  0016                     	;# 
  2392  0017                     	;# 
  2393  0018                     	;# 
  2394  0019                     	;# 
  2395  001A                     	;# 
  2396  001A                     	;# 
  2397  001B                     	;# 
  2398  001B                     	;# 
  2399  001C                     	;# 
  2400  001D                     	;# 
  2401  001E                     	;# 
  2402  001F                     	;# 
  2403  008C                     	;# 
  2404  008D                     	;# 
  2405  008E                     	;# 
  2406  0090                     	;# 
  2407  0091                     	;# 
  2408  0092                     	;# 
  2409  0093                     	;# 
  2410  0094                     	;# 
  2411  0095                     	;# 
  2412  0096                     	;# 
  2413  0098                     	;# 
  2414  0099                     	;# 
  2415  009A                     	;# 
  2416  009B                     	;# 
  2417  009B                     	;# 
  2418  009C                     	;# 
  2419  009D                     	;# 
  2420  009E                     	;# 
  2421  009F                     	;# 
  2422  010C                     	;# 
  2423  010D                     	;# 
  2424  010E                     	;# 
  2425  0111                     	;# 
  2426  0112                     	;# 
  2427  0113                     	;# 
  2428  0114                     	;# 
  2429  0115                     	;# 
  2430  0116                     	;# 
  2431  0117                     	;# 
  2432  0118                     	;# 
  2433  0119                     	;# 
  2434  011C                     	;# 
  2435  018C                     	;# 
  2436  018D                     	;# 
  2437  018E                     	;# 
  2438  0191                     	;# 
  2439  0191                     	;# 
  2440  0192                     	;# 
  2441  0193                     	;# 
  2442  0193                     	;# 
  2443  0194                     	;# 
  2444  0195                     	;# 
  2445  0196                     	;# 
  2446  0197                     	;# 
  2447  0199                     	;# 
  2448  0199                     	;# 
  2449  0199                     	;# 
  2450  019A                     	;# 
  2451  019A                     	;# 
  2452  019A                     	;# 
  2453  019B                     	;# 
  2454  019B                     	;# 
  2455  019B                     	;# 
  2456  019B                     	;# 
  2457  019B                     	;# 
  2458  019C                     	;# 
  2459  019C                     	;# 
  2460  019C                     	;# 
  2461  019D                     	;# 
  2462  019D                     	;# 
  2463  019D                     	;# 
  2464  019E                     	;# 
  2465  019E                     	;# 
  2466  019E                     	;# 
  2467  019F                     	;# 
  2468  019F                     	;# 
  2469  019F                     	;# 
  2470  019F                     	;# 
  2471  019F                     	;# 
  2472  020C                     	;# 
  2473  020D                     	;# 
  2474  020E                     	;# 
  2475  0211                     	;# 
  2476  0211                     	;# 
  2477  0212                     	;# 
  2478  0212                     	;# 
  2479  0213                     	;# 
  2480  0213                     	;# 
  2481  0214                     	;# 
  2482  0214                     	;# 
  2483  0215                     	;# 
  2484  0215                     	;# 
  2485  0215                     	;# 
  2486  0215                     	;# 
  2487  0216                     	;# 
  2488  0216                     	;# 
  2489  0217                     	;# 
  2490  0217                     	;# 
  2491  028C                     	;# 
  2492  028D                     	;# 
  2493  028E                     	;# 
  2494  0291                     	;# 
  2495  0291                     	;# 
  2496  0292                     	;# 
  2497  0293                     	;# 
  2498  0294                     	;# 
  2499  0298                     	;# 
  2500  0298                     	;# 
  2501  0299                     	;# 
  2502  029A                     	;# 
  2503  029B                     	;# 
  2504  029E                     	;# 
  2505  030C                     	;# 
  2506  030D                     	;# 
  2507  030E                     	;# 
  2508  038C                     	;# 
  2509  038D                     	;# 
  2510  038E                     	;# 
  2511  0391                     	;# 
  2512  0392                     	;# 
  2513  0393                     	;# 
  2514  0394                     	;# 
  2515  0395                     	;# 
  2516  0396                     	;# 
  2517  0397                     	;# 
  2518  0398                     	;# 
  2519  0399                     	;# 
  2520  040E                     	;# 
  2521  0413                     	;# 
  2522  0413                     	;# 
  2523  0414                     	;# 
  2524  0414                     	;# 
  2525  0415                     	;# 
  2526  0416                     	;# 
  2527  0417                     	;# 
  2528  0418                     	;# 
  2529  041A                     	;# 
  2530  041A                     	;# 
  2531  041B                     	;# 
  2532  041B                     	;# 
  2533  041C                     	;# 
  2534  041D                     	;# 
  2535  041E                     	;# 
  2536  041F                     	;# 
  2537  0493                     	;# 
  2538  0494                     	;# 
  2539  0495                     	;# 
  2540  0496                     	;# 
  2541  049A                     	;# 
  2542  049B                     	;# 
  2543  049C                     	;# 
  2544  049D                     	;# 
  2545  058C                     	;# 
  2546  058C                     	;# 
  2547  058D                     	;# 
  2548  058E                     	;# 
  2549  058E                     	;# 
  2550  058F                     	;# 
  2551  0590                     	;# 
  2552  0590                     	;# 
  2553  0591                     	;# 
  2554  0592                     	;# 
  2555  0592                     	;# 
  2556  0593                     	;# 
  2557  0594                     	;# 
  2558  0594                     	;# 
  2559  0595                     	;# 
  2560  0596                     	;# 
  2561  0596                     	;# 
  2562  0597                     	;# 
  2563  0598                     	;# 
  2564  0599                     	;# 
  2565  059A                     	;# 
  2566  059B                     	;# 
  2567  059B                     	;# 
  2568  059C                     	;# 
  2569  059D                     	;# 
  2570  060C                     	;# 
  2571  060C                     	;# 
  2572  060D                     	;# 
  2573  060E                     	;# 
  2574  060F                     	;# 
  2575  060F                     	;# 
  2576  0610                     	;# 
  2577  0611                     	;# 
  2578  0612                     	;# 
  2579  0613                     	;# 
  2580  0614                     	;# 
  2581  0617                     	;# 
  2582  0618                     	;# 
  2583  0619                     	;# 
  2584  061A                     	;# 
  2585  061B                     	;# 
  2586  061C                     	;# 
  2587  0691                     	;# 
  2588  0692                     	;# 
  2589  0693                     	;# 
  2590  0694                     	;# 
  2591  0695                     	;# 
  2592  0696                     	;# 
  2593  0697                     	;# 
  2594  0699                     	;# 
  2595  069A                     	;# 
  2596  0711                     	;# 
  2597  0712                     	;# 
  2598  0713                     	;# 
  2599  0714                     	;# 
  2600  0715                     	;# 
  2601  0718                     	;# 
  2602  0718                     	;# 
  2603  0719                     	;# 
  2604  071A                     	;# 
  2605  071A                     	;# 
  2606  071B                     	;# 
  2607  071C                     	;# 
  2608  071D                     	;# 
  2609  0791                     	;# 
  2610  0791                     	;# 
  2611  0792                     	;# 
  2612  0793                     	;# 
  2613  0793                     	;# 
  2614  0794                     	;# 
  2615  0795                     	;# 
  2616  0795                     	;# 
  2617  0796                     	;# 
  2618  0797                     	;# 
  2619  0797                     	;# 
  2620  0798                     	;# 
  2621  0799                     	;# 
  2622  079A                     	;# 
  2623  080C                     	;# 
  2624  080C                     	;# 
  2625  080D                     	;# 
  2626  080E                     	;# 
  2627  080E                     	;# 
  2628  080F                     	;# 
  2629  0810                     	;# 
  2630  0810                     	;# 
  2631  0811                     	;# 
  2632  0812                     	;# 
  2633  0812                     	;# 
  2634  0813                     	;# 
  2635  0814                     	;# 
  2636  0815                     	;# 
  2637  0816                     	;# 
  2638  0817                     	;# 
  2639  0818                     	;# 
  2640  0819                     	;# 
  2641  081A                     	;# 
  2642  081A                     	;# 
  2643  081B                     	;# 
  2644  081C                     	;# 
  2645  081C                     	;# 
  2646  081D                     	;# 
  2647  088C                     	;# 
  2648  088D                     	;# 
  2649  088E                     	;# 
  2650  088F                     	;# 
  2651  088F                     	;# 
  2652  0890                     	;# 
  2653  0891                     	;# 
  2654  0892                     	;# 
  2655  0893                     	;# 
  2656  0893                     	;# 
  2657  0894                     	;# 
  2658  0895                     	;# 
  2659  0896                     	;# 
  2660  0897                     	;# 
  2661  0897                     	;# 
  2662  0898                     	;# 
  2663  0899                     	;# 
  2664  0D8C                     	;# 
  2665  0D8C                     	;# 
  2666  0D8D                     	;# 
  2667  0D8E                     	;# 
  2668  0D8F                     	;# 
  2669  0D8F                     	;# 
  2670  0D90                     	;# 
  2671  0D91                     	;# 
  2672  0D92                     	;# 
  2673  0D92                     	;# 
  2674  0D93                     	;# 
  2675  0D94                     	;# 
  2676  0D95                     	;# 
  2677  0D95                     	;# 
  2678  0D96                     	;# 
  2679  0D97                     	;# 
  2680  0D98                     	;# 
  2681  0D99                     	;# 
  2682  0D9A                     	;# 
  2683  0D9B                     	;# 
  2684  0D9C                     	;# 
  2685  0D9D                     	;# 
  2686  0D9E                     	;# 
  2687  0D9E                     	;# 
  2688  0D9F                     	;# 
  2689  0DA0                     	;# 
  2690  0DA1                     	;# 
  2691  0DA1                     	;# 
  2692  0DA2                     	;# 
  2693  0DA3                     	;# 
  2694  0DA4                     	;# 
  2695  0DA4                     	;# 
  2696  0DA5                     	;# 
  2697  0DA6                     	;# 
  2698  0DA7                     	;# 
  2699  0DA7                     	;# 
  2700  0DA8                     	;# 
  2701  0DA9                     	;# 
  2702  0DAA                     	;# 
  2703  0DAB                     	;# 
  2704  0DAC                     	;# 
  2705  0DAD                     	;# 
  2706  0DAE                     	;# 
  2707  0DAF                     	;# 
  2708  0E0F                     	;# 
  2709  0E10                     	;# 
  2710  0E11                     	;# 
  2711  0E12                     	;# 
  2712  0E13                     	;# 
  2713  0E14                     	;# 
  2714  0E15                     	;# 
  2715  0E16                     	;# 
  2716  0E17                     	;# 
  2717  0E18                     	;# 
  2718  0E19                     	;# 
  2719  0E1A                     	;# 
  2720  0E1B                     	;# 
  2721  0E1C                     	;# 
  2722  0E1D                     	;# 
  2723  0E1E                     	;# 
  2724  0E1F                     	;# 
  2725  0E20                     	;# 
  2726  0E21                     	;# 
  2727  0E22                     	;# 
  2728  0E23                     	;# 
  2729  0E24                     	;# 
  2730  0E25                     	;# 
  2731  0E26                     	;# 
  2732  0E27                     	;# 
  2733  0E28                     	;# 
  2734  0E29                     	;# 
  2735  0E2A                     	;# 
  2736  0E2B                     	;# 
  2737  0E2C                     	;# 
  2738  0E2D                     	;# 
  2739  0E2E                     	;# 
  2740  0E90                     	;# 
  2741  0E91                     	;# 
  2742  0E92                     	;# 
  2743  0E94                     	;# 
  2744  0E95                     	;# 
  2745  0E9C                     	;# 
  2746  0E9D                     	;# 
  2747  0E9E                     	;# 
  2748  0E9F                     	;# 
  2749  0EA0                     	;# 
  2750  0EA1                     	;# 
  2751  0EA2                     	;# 
  2752  0EA3                     	;# 
  2753  0EA4                     	;# 
  2754  0EA5                     	;# 
  2755  0EA6                     	;# 
  2756  0EA7                     	;# 
  2757  0F0F                     	;# 
  2758  0F10                     	;# 
  2759  0F11                     	;# 
  2760  0F12                     	;# 
  2761  0F13                     	;# 
  2762  0F14                     	;# 
  2763  0F15                     	;# 
  2764  0F16                     	;# 
  2765  0F17                     	;# 
  2766  0F18                     	;# 
  2767  0F19                     	;# 
  2768  0F1A                     	;# 
  2769  0F1B                     	;# 
  2770  0F1C                     	;# 
  2771  0F1D                     	;# 
  2772  0F1E                     	;# 
  2773  0F1F                     	;# 
  2774  0F20                     	;# 
  2775  0F21                     	;# 
  2776  0F22                     	;# 
  2777  0F23                     	;# 
  2778  0F24                     	;# 
  2779  0F25                     	;# 
  2780  0F26                     	;# 
  2781  0F27                     	;# 
  2782  0F28                     	;# 
  2783  0F29                     	;# 
  2784  0F2A                     	;# 
  2785  0F2B                     	;# 
  2786  0F2C                     	;# 
  2787  0F2D                     	;# 
  2788  0F2E                     	;# 
  2789  0F2F                     	;# 
  2790  0F30                     	;# 
  2791  0F31                     	;# 
  2792  0F32                     	;# 
  2793  0F33                     	;# 
  2794  0F34                     	;# 
  2795  0F35                     	;# 
  2796  0F36                     	;# 
  2797  0F37                     	;# 
  2798  0FE4                     	;# 
  2799  0FE5                     	;# 
  2800  0FE6                     	;# 
  2801  0FE7                     	;# 
  2802  0FE8                     	;# 
  2803  0FE9                     	;# 
  2804  0FEA                     	;# 
  2805  0FEB                     	;# 
  2806  0FED                     	;# 
  2807  0FEE                     	;# 
  2808  0FEF                     	;# 
  2809                           
  2810                           	psect	idataBANK0
  2811  0DCE                     __pidataBANK0:	
  2812                           
  2813                           ;initializer for _randx
  2814  0DCE  3401               	retlw	1
  2815  0DCF  3400               	retlw	0
  2816  0DD0  3400               	retlw	0
  2817  0DD1  3400               	retlw	0
  2818                           
  2819                           ;initializer for _fall
  2820  0DD2  3401               	retlw	1
  2821                           
  2822                           	psect	idataBANK2
  2823  073C                     __pidataBANK2:	
  2824                           
  2825                           ;initializer for _fsmStateTable
  2826  073C  3469               	retlw	low _do_I2C_IDLE
  2827  073D  340E               	retlw	high _do_I2C_IDLE
  2828  073E  34EA               	retlw	low _do_I2C_SEND_ADR_READ
  2829  073F  340E               	retlw	high _do_I2C_SEND_ADR_READ
  2830  0740  34A5               	retlw	low _do_I2C_SEND_ADR_WRITE
  2831  0741  340E               	retlw	high _do_I2C_SEND_ADR_WRITE
  2832  0742  3456               	retlw	low _do_I2C_TX
  2833  0743  3403               	retlw	high _do_I2C_TX
  2834  0744  3484               	retlw	low _do_I2C_RX
  2835  0745  3404               	retlw	high _do_I2C_RX
  2836  0746  347C               	retlw	low _do_I2C_RCEN
  2837  0747  340E               	retlw	high _do_I2C_RCEN
  2838  0748  34DF               	retlw	low _do_I2C_TX_EMPTY
  2839  0749  3405               	retlw	high _do_I2C_TX_EMPTY
  2840  074A  3431               	retlw	low _do_I2C_SEND_RESTART_READ
  2841  074B  340E               	retlw	high _do_I2C_SEND_RESTART_READ
  2842  074C  3439               	retlw	low _do_I2C_SEND_RESTART_WRITE
  2843  074D  340E               	retlw	high _do_I2C_SEND_RESTART_WRITE
  2844  074E  3441               	retlw	low _do_I2C_SEND_RESTART
  2845  074F  340E               	retlw	high _do_I2C_SEND_RESTART
  2846  0750  3449               	retlw	low _do_I2C_SEND_STOP
  2847  0751  340E               	retlw	high _do_I2C_SEND_STOP
  2848  0752  3451               	retlw	low _do_I2C_DO_ACK
  2849  0753  340E               	retlw	high _do_I2C_DO_ACK
  2850  0754  3459               	retlw	low _do_I2C_DO_NACK_STOP
  2851  0755  340E               	retlw	high _do_I2C_DO_NACK_STOP
  2852  0756  3461               	retlw	low _do_I2C_DO_NACK_RESTART
  2853  0757  340E               	retlw	high _do_I2C_DO_NACK_RESTART
  2854  0758  349A               	retlw	low _do_I2C_RESET
  2855  0759  340E               	retlw	high _do_I2C_RESET
  2856  075A  340D               	retlw	low _do_I2C_DO_ADDRESS_NACK
  2857  075B  3406               	retlw	high _do_I2C_DO_ADDRESS_NACK
  2858                           
  2859                           	psect	nvBANK0
  2860  0065                     __pnvBANK0:	
  2861  0065                     _IOCCF4_InterruptHandler:	
  2862  0065                     	ds	2
  2863  0011                     _PIR2bits	set	17
  2864  0010                     _PIR1bits	set	16
  2865  000B                     _INTCONbits	set	11
  2866  0091                     _PIE2bits	set	145
  2867  0090                     _PIE1bits	set	144
  2868  0098                     _OSCTUNE	set	152
  2869  0099                     _OSCCON	set	153
  2870  0095                     _OPTION_REGbits	set	149
  2871  008E                     _TRISC	set	142
  2872  008D                     _TRISB	set	141
  2873  008C                     _TRISA	set	140
  2874  04D6                     _PLLR	set	1238
  2875  0116                     _BORCON	set	278
  2876  010E                     _LATC	set	270
  2877  010D                     _LATB	set	269
  2878  010C                     _LATA	set	268
  2879  018C                     _ANSELA	set	396
  2880  018D                     _ANSELB	set	397
  2881  018E                     _ANSELC	set	398
  2882  0214                     _SSP1STATbits	set	532
  2883  0213                     _SSP1MSK	set	531
  2884  0211                     _SSP1BUF	set	529
  2885  0216                     _SSP1CON2bits	set	534
  2886  0212                     _SSP1ADD	set	530
  2887  0216                     _SSP1CON2	set	534
  2888  0215                     _SSP1CON1	set	533
  2889  0214                     _SSP1STAT	set	532
  2890  0215                     _SSP1CON1bits	set	533
  2891  020E                     _WPUC	set	526
  2892  020C                     _WPUA	set	524
  2893  020D                     _WPUB	set	525
  2894  028E                     _ODCONC	set	654
  2895  028D                     _ODCONB	set	653
  2896  028C                     _ODCONA	set	652
  2897  0397                     _IOCCPbits	set	919
  2898  0398                     _IOCCNbits	set	920
  2899  0399                     _IOCCFbits	set	921
  2900  0E21                     _SSPDATPPS	set	3617
  2901  0E20                     _SSPCLKPPS	set	3616
  2902  0E9C                     _RB4PPS	set	3740
  2903  0E9E                     _RB6PPS	set	3742
  2904                           
  2905                           ; #config settings
  2906  0000                     
  2907                           	psect	cinit
  2908  0030                     start_initialization:	
  2909  0030                     __initialization:	
  2910                           
  2911                           ; Initialize objects allocated to BANK0
  2912  0030  30CE               	movlw	low __pidataBANK0
  2913  0031  0084               	movwf	4
  2914  0032  308D               	movlw	(high __pidataBANK0)| (0+128)
  2915  0033  0085               	movwf	5
  2916  0034  3060               	movlw	low __pdataBANK0
  2917  0035  0086               	movwf	6
  2918  0036  3000               	movlw	high __pdataBANK0
  2919  0037  0087               	movwf	7
  2920  0038  3005               	movlw	5
  2921  0039  318E  2615  3180   	fcall	init_ram
  2922                           
  2923                           ; Initialize objects allocated to BANK2
  2924  003C  303C               	movlw	low __pidataBANK2
  2925  003D  0084               	movwf	4
  2926  003E  3087               	movlw	(high __pidataBANK2)| (0+128)
  2927  003F  0085               	movwf	5
  2928  0040  3020               	movlw	low __pdataBANK2
  2929  0041  0086               	movwf	6
  2930  0042  3001               	movlw	high __pdataBANK2
  2931  0043  0087               	movwf	7
  2932  0044  3020               	movlw	32
  2933  0045  318E  2615  3180   	fcall	init_ram
  2934                           
  2935                           ; Clear objects allocated to BANK0
  2936  0048  3047               	movlw	low __pbssBANK0
  2937  0049  0084               	movwf	4
  2938  004A  3000               	movlw	high __pbssBANK0
  2939  004B  0085               	movwf	5
  2940  004C  3019               	movlw	25
  2941  004D  318E  260F  3180   	fcall	clear_ram0
  2942                           
  2943                           ; Clear objects allocated to BANK1
  2944  0050  30A0               	movlw	low __pbssBANK1
  2945  0051  0084               	movwf	4
  2946  0052  3000               	movlw	high __pbssBANK1
  2947  0053  0085               	movwf	5
  2948  0054  303E               	movlw	62
  2949  0055  318E  260F         	fcall	clear_ram0
  2950  0057                     end_of_initialization:	
  2951                           ;End of C runtime variable initialization code
  2952                           
  2953  0057                     __end_of__initialization:	
  2954  0057  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2955  0058  0020               	movlb	0
  2956  0059  3181  2992         	ljmp	_main	;jump to C main() function
  2957                           
  2958                           	psect	bssBANK0
  2959  0047                     __pbssBANK0:	
  2960  0047                     _walls:	
  2961  0047                     	ds	8
  2962  004F                     _shiftCounter:	
  2963  004F                     	ds	2
  2964  0051                     _hiscore:	
  2965  0051                     	ds	2
  2966  0053                     _score:	
  2967  0053                     	ds	2
  2968  0055                     _i2c_driver_i2cISR:	
  2969  0055                     	ds	2
  2970  0057                     _i2c_driver_busCollisionISR:	
  2971  0057                     	ds	2
  2972  0059                     _topHalf:	
  2973  0059                     	ds	1
  2974  005A                     _wallHeight:	
  2975  005A                     	ds	1
  2976  005B                     _i:	
  2977  005B                     	ds	1
  2978  005C                     _gravityCounter:	
  2979  005C                     	ds	1
  2980  005D                     _start:	
  2981  005D                     	ds	1
  2982  005E                     _elevation:	
  2983  005E                     	ds	1
  2984  005F                     _createWall:	
  2985  005F                     	ds	1
  2986                           
  2987                           	psect	dataBANK0
  2988  0060                     __pdataBANK0:	
  2989  0060                     _randx:	
  2990  0060                     	ds	4
  2991  0064                     _fall:	
  2992  0064                     	ds	1
  2993                           
  2994                           	psect	bssBANK1
  2995  00A0                     __pbssBANK1:	
  2996  00A0                     _i2c_status:	
  2997  00A0                     	ds	29
  2998  00BD                     _pixelbuffer:	
  2999  00BD                     	ds	16
  3000  00CD                     _writebuffer:	
  3001  00CD                     	ds	17
  3002                           
  3003                           	psect	dataBANK2
  3004  0120                     __pdataBANK2:	
  3005  0120                     _fsmStateTable:	
  3006  0120                     	ds	32
  3007                           
  3008                           	psect	inittext
  3009  0E15                     init_ram:	
  3010  0E15  00FE               	movwf	126
  3011  0E16                     initloop:	
  3012  0E16  0012               	moviw fsr0++
  3013  0E17  001E               	movwi fsr1++
  3014  0E18  0BFE               	decfsz	126,f
  3015  0E19  2E16               	goto	initloop
  3016  0E1A  3400               	retlw	0
  3017                           
  3018                           	psect	clrtext
  3019  0E0F                     clear_ram0:	
  3020                           ;	Called with FSR0 containing the base address, and
  3021                           ;	WREG with the size to clear
  3022                           
  3023  0E0F  0064               	clrwdt	;clear the watchdog before getting into this loop
  3024  0E10                     clrloop0:	
  3025  0E10  0180               	clrf	0	;clear RAM location pointed to by FSR
  3026  0E11  3101               	addfsr 0,1
  3027  0E12  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  3028  0E13  2E10               	goto	clrloop0	;have we reached the end yet?
  3029  0E14  3400               	retlw	0	;all done for this memory range, return
  3030                           
  3031                           	psect	cstackCOMMON
  3032  0070                     __pcstackCOMMON:	
  3033  0070                     ?_mssp_IRQisEnabled:	
  3034  0070                     ?_i2c_driver_open:	
  3035                           ; 1 bit 
  3036                           
  3037  0070                     ?_i2c_driver_isNACK:	
  3038                           ; 1 bit 
  3039                           
  3040  0070                     ?i1_i2c_driver_isNACK:	
  3041                           ; 1 bit 
  3042                           
  3043  0070                     ?_IOCCF4_DefaultInterruptHandler:	
  3044                           ; 1 bit 
  3045                           
  3046  0070                     ??_IOCCF4_DefaultInterruptHandler:	
  3047                           ; 1 bytes @ 0x0
  3048                           
  3049  0070                     ?_IOCCF4_ISR:	
  3050                           ; 1 bytes @ 0x0
  3051                           
  3052  0070                     ?_OSCILLATOR_Initialize:	
  3053                           ; 1 bytes @ 0x0
  3054                           
  3055  0070                     ?_i2c_open:	
  3056                           ; 1 bytes @ 0x0
  3057                           
  3058  0070                     ?_i2c_masterWrite:	
  3059                           ; 1 bytes @ 0x0
  3060                           
  3061  0070                     ?_i2c_close:	
  3062                           ; 1 bytes @ 0x0
  3063                           
  3064  0070                     ?_i2c_busCollisionISR:	
  3065                           ; 1 bytes @ 0x0
  3066                           
  3067  0070                     ??_i2c_busCollisionISR:	
  3068                           ; 1 bytes @ 0x0
  3069                           
  3070  0070                     ?_i2c_ISR:	
  3071                           ; 1 bytes @ 0x0
  3072                           
  3073  0070                     ?_i2c_poller:	
  3074                           ; 1 bytes @ 0x0
  3075                           
  3076  0070                     ?_PIN_MANAGER_Initialize:	
  3077                           ; 1 bytes @ 0x0
  3078                           
  3079  0070                     ?_PIN_MANAGER_IOC:	
  3080                           ; 1 bytes @ 0x0
  3081                           
  3082  0070                     ?_SYSTEM_Initialize:	
  3083                           ; 1 bytes @ 0x0
  3084                           
  3085  0070                     ?_writeDisplay:	
  3086                           ; 1 bytes @ 0x0
  3087                           
  3088  0070                     ?_clearPixels:	
  3089                           ; 1 bytes @ 0x0
  3090                           
  3091  0070                     ?_initializeDisplay:	
  3092                           ; 1 bytes @ 0x0
  3093                           
  3094  0070                     ?_reverse:	
  3095                           ; 1 bytes @ 0x0
  3096                           
  3097  0070                     ?_drawWalls:	
  3098                           ; 1 bytes @ 0x0
  3099                           
  3100  0070                     ?_shiftWalls:	
  3101                           ; 1 bytes @ 0x0
  3102                           
  3103  0070                     ?_buttonInterrupt:	
  3104                           ; 1 bytes @ 0x0
  3105                           
  3106  0070                     ??_buttonInterrupt:	
  3107                           ; 1 bytes @ 0x0
  3108                           
  3109  0070                     ?_endGame:	
  3110                           ; 1 bytes @ 0x0
  3111                           
  3112  0070                     ?_main:	
  3113                           ; 1 bytes @ 0x0
  3114                           
  3115  0070                     ?_mssp_disableIRQ:	
  3116                           ; 1 bytes @ 0x0
  3117                           
  3118  0070                     ?_mssp_clearIRQ:	
  3119                           ; 1 bytes @ 0x0
  3120                           
  3121  0070                     ?_mssp_setIRQ:	
  3122                           ; 1 bytes @ 0x0
  3123                           
  3124  0070                     ?_mssp_waitForEvent:	
  3125                           ; 1 bytes @ 0x0
  3126                           
  3127  0070                     ?_i2c_driver_resetBus:	
  3128                           ; 1 bytes @ 0x0
  3129                           
  3130  0070                     ?_i2c_driver_start:	
  3131                           ; 1 bytes @ 0x0
  3132                           
  3133  0070                     ?_i2c_driver_restart:	
  3134                           ; 1 bytes @ 0x0
  3135                           
  3136  0070                     ?_i2c_driver_stop:	
  3137                           ; 1 bytes @ 0x0
  3138                           
  3139  0070                     ?_i2c_driver_startRX:	
  3140                           ; 1 bytes @ 0x0
  3141                           
  3142  0070                     ?_i2c_driver_getRXData:	
  3143                           ; 1 bytes @ 0x0
  3144                           
  3145  0070                     ?_i2c_driver_TXData:	
  3146                           ; 1 bytes @ 0x0
  3147                           
  3148  0070                     ?_i2c_driver_sendACK:	
  3149                           ; 1 bytes @ 0x0
  3150                           
  3151  0070                     ?_i2c_driver_sendNACK:	
  3152                           ; 1 bytes @ 0x0
  3153                           
  3154  0070                     ?_i2c_driver_clearBusCollision:	
  3155                           ; 1 bytes @ 0x0
  3156                           
  3157  0070                     ??_i2c_driver_clearBusCollision:	
  3158                           ; 1 bytes @ 0x0
  3159                           
  3160  0070                     ?_INTERRUPT_InterruptManager:	
  3161                           ; 1 bytes @ 0x0
  3162                           
  3163  0070                     ?_i2c_masterOperation:	
  3164                           ; 1 bytes @ 0x0
  3165                           
  3166  0070                     ?_do_I2C_RESET:	
  3167                           ; 1 bytes @ 0x0
  3168                           
  3169  0070                     ?_do_I2C_IDLE:	
  3170                           ; 1 bytes @ 0x0
  3171                           
  3172  0070                     ?_do_I2C_SEND_RESTART_READ:	
  3173                           ; 1 bytes @ 0x0
  3174                           
  3175  0070                     ?_do_I2C_SEND_RESTART_WRITE:	
  3176                           ; 1 bytes @ 0x0
  3177                           
  3178  0070                     ?_do_I2C_SEND_RESTART:	
  3179                           ; 1 bytes @ 0x0
  3180                           
  3181  0070                     ?_do_I2C_SEND_STOP:	
  3182                           ; 1 bytes @ 0x0
  3183                           
  3184  0070                     ?_do_I2C_SEND_ADR_READ:	
  3185                           ; 1 bytes @ 0x0
  3186                           
  3187  0070                     ?_do_I2C_SEND_ADR_WRITE:	
  3188                           ; 1 bytes @ 0x0
  3189                           
  3190  0070                     ?_do_I2C_RCEN:	
  3191                           ; 1 bytes @ 0x0
  3192                           
  3193  0070                     ?_do_I2C_DO_ACK:	
  3194                           ; 1 bytes @ 0x0
  3195                           
  3196  0070                     ?_do_I2C_DO_NACK_STOP:	
  3197                           ; 1 bytes @ 0x0
  3198                           
  3199  0070                     ?_do_I2C_DO_NACK_RESTART:	
  3200                           ; 1 bytes @ 0x0
  3201                           
  3202  0070                     ?_do_I2C_DO_ADDRESS_NACK:	
  3203                           ; 1 bytes @ 0x0
  3204                           
  3205  0070                     ?_do_I2C_TX:	
  3206                           ; 1 bytes @ 0x0
  3207                           
  3208  0070                     ?_do_I2C_RX:	
  3209                           ; 1 bytes @ 0x0
  3210                           
  3211  0070                     ?_do_I2C_TX_EMPTY:	
  3212                           ; 1 bytes @ 0x0
  3213                           
  3214  0070                     ?i1_mssp_clearIRQ:	
  3215                           ; 1 bytes @ 0x0
  3216                           
  3217  0070                     ??i1_mssp_clearIRQ:	
  3218                           ; 1 bytes @ 0x0
  3219                           
  3220  0070                     ?i1_mssp_setIRQ:	
  3221                           ; 1 bytes @ 0x0
  3222                           
  3223  0070                     ??i1_mssp_setIRQ:	
  3224                           ; 1 bytes @ 0x0
  3225                           
  3226  0070                     ?i1_i2c_driver_resetBus:	
  3227                           ; 1 bytes @ 0x0
  3228                           
  3229  0070                     ??i1_i2c_driver_resetBus:	
  3230                           ; 1 bytes @ 0x0
  3231                           
  3232  0070                     ?i1_i2c_driver_restart:	
  3233                           ; 1 bytes @ 0x0
  3234                           
  3235  0070                     ??i1_i2c_driver_restart:	
  3236                           ; 1 bytes @ 0x0
  3237                           
  3238  0070                     ?i1_i2c_driver_stop:	
  3239                           ; 1 bytes @ 0x0
  3240                           
  3241  0070                     ??i1_i2c_driver_stop:	
  3242                           ; 1 bytes @ 0x0
  3243                           
  3244  0070                     ??i1_i2c_driver_isNACK:	
  3245                           ; 1 bytes @ 0x0
  3246                           
  3247  0070                     ?i1_i2c_driver_startRX:	
  3248                           ; 1 bytes @ 0x0
  3249                           
  3250  0070                     ??i1_i2c_driver_startRX:	
  3251                           ; 1 bytes @ 0x0
  3252                           
  3253  0070                     ?i1_i2c_driver_getRXData:	
  3254                           ; 1 bytes @ 0x0
  3255                           
  3256  0070                     ??i1_i2c_driver_getRXData:	
  3257                           ; 1 bytes @ 0x0
  3258                           
  3259  0070                     ?i1_i2c_driver_TXData:	
  3260                           ; 1 bytes @ 0x0
  3261                           
  3262  0070                     ??i1_i2c_driver_TXData:	
  3263                           ; 1 bytes @ 0x0
  3264                           
  3265  0070                     ?i1_i2c_driver_sendACK:	
  3266                           ; 1 bytes @ 0x0
  3267                           
  3268  0070                     ??i1_i2c_driver_sendACK:	
  3269                           ; 1 bytes @ 0x0
  3270                           
  3271  0070                     ?i1_i2c_driver_sendNACK:	
  3272                           ; 1 bytes @ 0x0
  3273                           
  3274  0070                     ??i1_i2c_driver_sendNACK:	
  3275                           ; 1 bytes @ 0x0
  3276                           
  3277  0070                     ?i1_i2c_setBuffer:	
  3278                           ; 1 bytes @ 0x0
  3279                           
  3280  0070                     ?i1_do_I2C_RESET:	
  3281                           ; 1 bytes @ 0x0
  3282                           
  3283  0070                     ??i1_do_I2C_RESET:	
  3284                           ; 1 bytes @ 0x0
  3285                           
  3286  0070                     ?i1_do_I2C_IDLE:	
  3287                           ; 1 bytes @ 0x0
  3288                           
  3289  0070                     ??i1_do_I2C_IDLE:	
  3290                           ; 1 bytes @ 0x0
  3291                           
  3292  0070                     ?i1_do_I2C_SEND_RESTART_READ:	
  3293                           ; 1 bytes @ 0x0
  3294                           
  3295  0070                     ??i1_do_I2C_SEND_RESTART_READ:	
  3296                           ; 1 bytes @ 0x0
  3297                           
  3298  0070                     ?i1_do_I2C_SEND_RESTART_WRITE:	
  3299                           ; 1 bytes @ 0x0
  3300                           
  3301  0070                     ??i1_do_I2C_SEND_RESTART_WRITE:	
  3302                           ; 1 bytes @ 0x0
  3303                           
  3304  0070                     ?i1_do_I2C_SEND_RESTART:	
  3305                           ; 1 bytes @ 0x0
  3306                           
  3307  0070                     ??i1_do_I2C_SEND_RESTART:	
  3308                           ; 1 bytes @ 0x0
  3309                           
  3310  0070                     ?i1_do_I2C_SEND_STOP:	
  3311                           ; 1 bytes @ 0x0
  3312                           
  3313  0070                     ??i1_do_I2C_SEND_STOP:	
  3314                           ; 1 bytes @ 0x0
  3315                           
  3316  0070                     ?i1_do_I2C_SEND_ADR_READ:	
  3317                           ; 1 bytes @ 0x0
  3318                           
  3319  0070                     ?i1_do_I2C_SEND_ADR_WRITE:	
  3320                           ; 1 bytes @ 0x0
  3321                           
  3322  0070                     ?i1_do_I2C_RCEN:	
  3323                           ; 1 bytes @ 0x0
  3324                           
  3325  0070                     ??i1_do_I2C_RCEN:	
  3326                           ; 1 bytes @ 0x0
  3327                           
  3328  0070                     ?i1_do_I2C_DO_ACK:	
  3329                           ; 1 bytes @ 0x0
  3330                           
  3331  0070                     ??i1_do_I2C_DO_ACK:	
  3332                           ; 1 bytes @ 0x0
  3333                           
  3334  0070                     ?i1_do_I2C_DO_NACK_STOP:	
  3335                           ; 1 bytes @ 0x0
  3336                           
  3337  0070                     ??i1_do_I2C_DO_NACK_STOP:	
  3338                           ; 1 bytes @ 0x0
  3339                           
  3340  0070                     ?i1_do_I2C_DO_NACK_RESTART:	
  3341                           ; 1 bytes @ 0x0
  3342                           
  3343  0070                     ??i1_do_I2C_DO_NACK_RESTART:	
  3344                           ; 1 bytes @ 0x0
  3345                           
  3346  0070                     ?i1_do_I2C_DO_ADDRESS_NACK:	
  3347                           ; 1 bytes @ 0x0
  3348                           
  3349  0070                     ?i1_do_I2C_TX:	
  3350                           ; 1 bytes @ 0x0
  3351                           
  3352  0070                     ?i1_do_I2C_RX:	
  3353                           ; 1 bytes @ 0x0
  3354                           
  3355  0070                     ?i1_do_I2C_TX_EMPTY:	
  3356                           ; 1 bytes @ 0x0
  3357                           
  3358  0070                     ?i1_i2c_ISR:	
  3359                           ; 1 bytes @ 0x0
  3360                           
  3361  0070                     ?i1_setCallBack:	
  3362                           ; 1 bytes @ 0x0
  3363                           
  3364  0070                     i1i2c_driver_TXData@d:	
  3365                           ; 1 bytes @ 0x0
  3366                           
  3367  0070                     i1i2c_setBuffer@bufferSize:	
  3368                           ; 1 bytes @ 0x0
  3369                           
  3370  0070                     i1setCallBack@cb:	
  3371                           ; 2 bytes @ 0x0
  3372                           
  3373                           
  3374                           ; 2 bytes @ 0x0
  3375  0070                     	ds	1
  3376  0071                     ??_IOCCF4_ISR:	
  3377  0071                     ??_PIN_MANAGER_IOC:	
  3378                           ; 1 bytes @ 0x1
  3379                           
  3380  0071                     ??i1_do_I2C_SEND_ADR_READ:	
  3381                           ; 1 bytes @ 0x1
  3382                           
  3383  0071                     ??i1_do_I2C_SEND_ADR_WRITE:	
  3384                           ; 1 bytes @ 0x1
  3385                           
  3386                           
  3387                           ; 1 bytes @ 0x1
  3388  0071                     	ds	1
  3389  0072                     ??i1_i2c_setBuffer:	
  3390  0072                     i1setCallBack@p:	
  3391                           ; 1 bytes @ 0x2
  3392                           
  3393                           
  3394                           ; 1 bytes @ 0x2
  3395  0072                     	ds	1
  3396  0073                     ??i1_setCallBack:	
  3397  0073                     i1i2c_setBuffer@buffer:	
  3398                           ; 1 bytes @ 0x3
  3399                           
  3400                           
  3401                           ; 1 bytes @ 0x3
  3402  0073                     	ds	1
  3403  0074                     i1setCallBack@idx:	
  3404                           
  3405                           ; 1 bytes @ 0x4
  3406  0074                     	ds	1
  3407  0075                     ?i1_i2c_setDataCompleteCallback:	
  3408  0075                     i1i2c_setDataCompleteCallback@cb:	
  3409                           ; 1 bytes @ 0x5
  3410                           
  3411                           
  3412                           ; 2 bytes @ 0x5
  3413  0075                     	ds	2
  3414  0077                     i1i2c_setDataCompleteCallback@p:	
  3415                           
  3416                           ; 1 bytes @ 0x7
  3417  0077                     	ds	1
  3418  0078                     ??i1_i2c_setDataCompleteCallback:	
  3419                           
  3420                           ; 1 bytes @ 0x8
  3421  0078                     	ds	1
  3422  0079                     ?i1_wr1RegCompleteHandler:	
  3423  0079                     ?i1_rd1RegCompleteHandler:	
  3424                           ; 1 bytes @ 0x9
  3425                           
  3426  0079                     ?i1_rd2RegCompleteHandler:	
  3427                           ; 1 bytes @ 0x9
  3428                           
  3429  0079                     ?i1_wr2RegCompleteHandler:	
  3430                           ; 1 bytes @ 0x9
  3431                           
  3432  0079                     ?i1_rdBlkRegCompleteHandler:	
  3433                           ; 1 bytes @ 0x9
  3434                           
  3435  0079                     ?i1_returnStop:	
  3436                           ; 1 bytes @ 0x9
  3437                           
  3438  0079                     ?i1_returnReset:	
  3439                           ; 1 bytes @ 0x9
  3440                           
  3441  0079                     ?i1_i2c_restartWrite:	
  3442                           ; 1 bytes @ 0x9
  3443                           
  3444  0079                     i1wr1RegCompleteHandler@p:	
  3445                           ; 1 bytes @ 0x9
  3446                           
  3447  0079                     i1rd1RegCompleteHandler@p:	
  3448                           ; 1 bytes @ 0x9
  3449                           
  3450  0079                     i1rd2RegCompleteHandler@p:	
  3451                           ; 1 bytes @ 0x9
  3452                           
  3453  0079                     i1wr2RegCompleteHandler@p:	
  3454                           ; 1 bytes @ 0x9
  3455                           
  3456  0079                     i1rdBlkRegCompleteHandler@p:	
  3457                           ; 1 bytes @ 0x9
  3458                           
  3459  0079                     i1returnStop@p:	
  3460                           ; 1 bytes @ 0x9
  3461                           
  3462  0079                     i1returnReset@p:	
  3463                           ; 1 bytes @ 0x9
  3464                           
  3465  0079                     i1i2c_restartWrite@p:	
  3466                           ; 1 bytes @ 0x9
  3467                           
  3468                           
  3469                           ; 1 bytes @ 0x9
  3470  0079                     	ds	1
  3471  007A                     ??i1_wr1RegCompleteHandler:	
  3472  007A                     ??i1_rd1RegCompleteHandler:	
  3473                           ; 1 bytes @ 0xA
  3474                           
  3475  007A                     ??i1_rd2RegCompleteHandler:	
  3476                           ; 1 bytes @ 0xA
  3477                           
  3478  007A                     ??i1_wr2RegCompleteHandler:	
  3479                           ; 1 bytes @ 0xA
  3480                           
  3481  007A                     ??i1_rdBlkRegCompleteHandler:	
  3482                           ; 1 bytes @ 0xA
  3483                           
  3484  007A                     ??i1_do_I2C_DO_ADDRESS_NACK:	
  3485                           ; 1 bytes @ 0xA
  3486                           
  3487  007A                     ??i1_do_I2C_TX:	
  3488                           ; 1 bytes @ 0xA
  3489                           
  3490  007A                     ??i1_do_I2C_RX:	
  3491                           ; 1 bytes @ 0xA
  3492                           
  3493  007A                     ??i1_do_I2C_TX_EMPTY:	
  3494                           ; 1 bytes @ 0xA
  3495                           
  3496  007A                     ??i1_returnStop:	
  3497                           ; 1 bytes @ 0xA
  3498                           
  3499  007A                     ??i1_returnReset:	
  3500                           ; 1 bytes @ 0xA
  3501                           
  3502  007A                     ??i1_i2c_restartWrite:	
  3503                           ; 1 bytes @ 0xA
  3504                           
  3505                           
  3506                           ; 1 bytes @ 0xA
  3507  007A                     	ds	1
  3508  007B                     i1_do_I2C_TX$1026:	
  3509                           
  3510                           ; 2 bytes @ 0xB
  3511  007B                     	ds	2
  3512  007D                     ??i1_i2c_ISR:	
  3513                           
  3514                           ; 1 bytes @ 0xD
  3515  007D                     	ds	1
  3516                           
  3517                           	psect	cstackBANK0
  3518  0020                     __pcstackBANK0:	
  3519  0020                     ??_INTERRUPT_InterruptManager:	
  3520                           
  3521                           ; 1 bytes @ 0x0
  3522  0020                     	ds	1
  3523  0021                     ?_IOCCF4_SetInterruptHandler:	
  3524  0021                     ??_OSCILLATOR_Initialize:	
  3525                           ; 1 bytes @ 0x1
  3526                           
  3527  0021                     ?_i2c_setBuffer:	
  3528                           ; 1 bytes @ 0x1
  3529                           
  3530  0021                     ??_i2c_close:	
  3531                           ; 1 bytes @ 0x1
  3532                           
  3533  0021                     ?_setCallBack:	
  3534                           ; 1 bytes @ 0x1
  3535                           
  3536  0021                     ?_drawPixel:	
  3537                           ; 1 bytes @ 0x1
  3538                           
  3539  0021                     ??_clearPixels:	
  3540                           ; 1 bytes @ 0x1
  3541                           
  3542  0021                     ??_reverse:	
  3543                           ; 1 bytes @ 0x1
  3544                           
  3545  0021                     ??_mssp_IRQisEnabled:	
  3546                           ; 1 bytes @ 0x1
  3547                           
  3548  0021                     ??_mssp_disableIRQ:	
  3549                           ; 1 bytes @ 0x1
  3550                           
  3551  0021                     ??_mssp_clearIRQ:	
  3552                           ; 1 bytes @ 0x1
  3553                           
  3554  0021                     ??_mssp_setIRQ:	
  3555                           ; 1 bytes @ 0x1
  3556                           
  3557  0021                     ??_mssp_waitForEvent:	
  3558                           ; 1 bytes @ 0x1
  3559                           
  3560  0021                     ??_i2c_driver_open:	
  3561                           ; 1 bytes @ 0x1
  3562                           
  3563  0021                     ??_i2c_driver_resetBus:	
  3564                           ; 1 bytes @ 0x1
  3565                           
  3566  0021                     ??_i2c_driver_start:	
  3567                           ; 1 bytes @ 0x1
  3568                           
  3569  0021                     ??_i2c_driver_restart:	
  3570                           ; 1 bytes @ 0x1
  3571                           
  3572  0021                     ??_i2c_driver_stop:	
  3573                           ; 1 bytes @ 0x1
  3574                           
  3575  0021                     ??_i2c_driver_isNACK:	
  3576                           ; 1 bytes @ 0x1
  3577                           
  3578  0021                     ??_i2c_driver_startRX:	
  3579                           ; 1 bytes @ 0x1
  3580                           
  3581  0021                     ??_i2c_driver_getRXData:	
  3582                           ; 1 bytes @ 0x1
  3583                           
  3584  0021                     ??_i2c_driver_TXData:	
  3585                           ; 1 bytes @ 0x1
  3586                           
  3587  0021                     ??_i2c_driver_sendACK:	
  3588                           ; 1 bytes @ 0x1
  3589                           
  3590  0021                     ??_i2c_driver_sendNACK:	
  3591                           ; 1 bytes @ 0x1
  3592                           
  3593  0021                     ?_i2c_driver_setBusCollisionISR:	
  3594                           ; 1 bytes @ 0x1
  3595                           
  3596  0021                     ?_i2c_driver_setI2cISR:	
  3597                           ; 1 bytes @ 0x1
  3598                           
  3599  0021                     ??_do_I2C_RESET:	
  3600                           ; 1 bytes @ 0x1
  3601                           
  3602  0021                     ??_do_I2C_IDLE:	
  3603                           ; 1 bytes @ 0x1
  3604                           
  3605  0021                     ??_do_I2C_SEND_RESTART_READ:	
  3606                           ; 1 bytes @ 0x1
  3607                           
  3608  0021                     ??_do_I2C_SEND_RESTART_WRITE:	
  3609                           ; 1 bytes @ 0x1
  3610                           
  3611  0021                     ??_do_I2C_SEND_RESTART:	
  3612                           ; 1 bytes @ 0x1
  3613                           
  3614  0021                     ??_do_I2C_SEND_STOP:	
  3615                           ; 1 bytes @ 0x1
  3616                           
  3617  0021                     ??_do_I2C_RCEN:	
  3618                           ; 1 bytes @ 0x1
  3619                           
  3620  0021                     ??_do_I2C_DO_ACK:	
  3621                           ; 1 bytes @ 0x1
  3622                           
  3623  0021                     ??_do_I2C_DO_NACK_STOP:	
  3624                           ; 1 bytes @ 0x1
  3625                           
  3626  0021                     ??_do_I2C_DO_NACK_RESTART:	
  3627                           ; 1 bytes @ 0x1
  3628                           
  3629  0021                     ?___awdiv:	
  3630                           ; 1 bytes @ 0x1
  3631                           
  3632  0021                     ?___lmul:	
  3633                           ; 2 bytes @ 0x1
  3634                           
  3635  0021                     drawPixel@y:	
  3636                           ; 4 bytes @ 0x1
  3637                           
  3638  0021                     mssp_waitForEvent@timeout:	
  3639                           ; 1 bytes @ 0x1
  3640                           
  3641  0021                     i2c_driver_TXData@d:	
  3642                           ; 1 bytes @ 0x1
  3643                           
  3644  0021                     IOCCF4_SetInterruptHandler@InterruptHandler:	
  3645                           ; 1 bytes @ 0x1
  3646                           
  3647  0021                     i2c_driver_setBusCollisionISR@f:	
  3648                           ; 2 bytes @ 0x1
  3649                           
  3650  0021                     i2c_driver_setI2cISR@f:	
  3651                           ; 2 bytes @ 0x1
  3652                           
  3653  0021                     i2c_setBuffer@bufferSize:	
  3654                           ; 2 bytes @ 0x1
  3655                           
  3656  0021                     setCallBack@cb:	
  3657                           ; 2 bytes @ 0x1
  3658                           
  3659  0021                     ___awdiv@divisor:	
  3660                           ; 2 bytes @ 0x1
  3661                           
  3662  0021                     ___lmul@multiplier:	
  3663                           ; 2 bytes @ 0x1
  3664                           
  3665                           
  3666                           ; 4 bytes @ 0x1
  3667  0021                     	ds	1
  3668  0022                     ??_do_I2C_SEND_ADR_READ:	
  3669  0022                     ??_do_I2C_SEND_ADR_WRITE:	
  3670                           ; 1 bytes @ 0x2
  3671                           
  3672  0022                     drawPixel@color:	
  3673                           ; 1 bytes @ 0x2
  3674                           
  3675  0022                     i2c_close@ret:	
  3676                           ; 1 bytes @ 0x2
  3677                           
  3678                           
  3679                           ; 1 bytes @ 0x2
  3680  0022                     	ds	1
  3681  0023                     ??_IOCCF4_SetInterruptHandler:	
  3682  0023                     ??_i2c_setBuffer:	
  3683                           ; 1 bytes @ 0x3
  3684                           
  3685  0023                     ??_i2c_open:	
  3686                           ; 1 bytes @ 0x3
  3687                           
  3688  0023                     ??_PIN_MANAGER_Initialize:	
  3689                           ; 1 bytes @ 0x3
  3690                           
  3691  0023                     ??_SYSTEM_Initialize:	
  3692                           ; 1 bytes @ 0x3
  3693                           
  3694  0023                     ??_drawPixel:	
  3695                           ; 1 bytes @ 0x3
  3696                           
  3697  0023                     ??_i2c_driver_setBusCollisionISR:	
  3698                           ; 1 bytes @ 0x3
  3699                           
  3700  0023                     ??_i2c_driver_setI2cISR:	
  3701                           ; 1 bytes @ 0x3
  3702                           
  3703  0023                     setCallBack@p:	
  3704                           ; 1 bytes @ 0x3
  3705                           
  3706  0023                     ___awdiv@dividend:	
  3707                           ; 1 bytes @ 0x3
  3708                           
  3709                           
  3710                           ; 2 bytes @ 0x3
  3711  0023                     	ds	1
  3712  0024                     ??_setCallBack:	
  3713  0024                     reverse@b:	
  3714                           ; 1 bytes @ 0x4
  3715                           
  3716  0024                     i2c_open@address:	
  3717                           ; 1 bytes @ 0x4
  3718                           
  3719  0024                     i2c_setBuffer@buffer:	
  3720                           ; 1 bytes @ 0x4
  3721                           
  3722                           
  3723                           ; 1 bytes @ 0x4
  3724  0024                     	ds	1
  3725  0025                     ??_drawWalls:	
  3726  0025                     ??___awdiv:	
  3727                           ; 1 bytes @ 0x5
  3728                           
  3729  0025                     i2c_open@ret:	
  3730                           ; 1 bytes @ 0x5
  3731                           
  3732  0025                     setCallBack@idx:	
  3733                           ; 1 bytes @ 0x5
  3734                           
  3735  0025                     ___lmul@multiplicand:	
  3736                           ; 1 bytes @ 0x5
  3737                           
  3738                           
  3739                           ; 4 bytes @ 0x5
  3740  0025                     	ds	1
  3741  0026                     ?_i2c_setDataCompleteCallback:	
  3742  0026                     ?_i2c_setAddressNACKCallback:	
  3743                           ; 1 bytes @ 0x6
  3744                           
  3745  0026                     ___awdiv@counter:	
  3746                           ; 1 bytes @ 0x6
  3747                           
  3748  0026                     i2c_setDataCompleteCallback@cb:	
  3749                           ; 1 bytes @ 0x6
  3750                           
  3751  0026                     i2c_setAddressNACKCallback@cb:	
  3752                           ; 2 bytes @ 0x6
  3753                           
  3754                           
  3755                           ; 2 bytes @ 0x6
  3756  0026                     	ds	1
  3757  0027                     ___awdiv@sign:	
  3758                           
  3759                           ; 1 bytes @ 0x7
  3760  0027                     	ds	1
  3761  0028                     i2c_setDataCompleteCallback@p:	
  3762  0028                     i2c_setAddressNACKCallback@p:	
  3763                           ; 1 bytes @ 0x8
  3764                           
  3765  0028                     ___awdiv@quotient:	
  3766                           ; 1 bytes @ 0x8
  3767                           
  3768                           
  3769                           ; 2 bytes @ 0x8
  3770  0028                     	ds	1
  3771  0029                     ??_i2c_setDataCompleteCallback:	
  3772  0029                     ??_i2c_setAddressNACKCallback:	
  3773                           ; 1 bytes @ 0x9
  3774                           
  3775  0029                     ??___lmul:	
  3776                           ; 1 bytes @ 0x9
  3777                           
  3778  0029                     drawPixel@x:	
  3779                           ; 1 bytes @ 0x9
  3780                           
  3781  0029                     ___lmul@product:	
  3782                           ; 1 bytes @ 0x9
  3783                           
  3784                           
  3785                           ; 4 bytes @ 0x9
  3786  0029                     	ds	1
  3787  002A                     ?_i2c_restartWrite:	
  3788  002A                     ?_returnStop:	
  3789                           ; 1 bytes @ 0xA
  3790                           
  3791  002A                     ?_returnReset:	
  3792                           ; 1 bytes @ 0xA
  3793                           
  3794  002A                     ?_wr1RegCompleteHandler:	
  3795                           ; 1 bytes @ 0xA
  3796                           
  3797  002A                     ?_rd1RegCompleteHandler:	
  3798                           ; 1 bytes @ 0xA
  3799                           
  3800  002A                     ?_rd2RegCompleteHandler:	
  3801                           ; 1 bytes @ 0xA
  3802                           
  3803  002A                     ?_wr2RegCompleteHandler:	
  3804                           ; 1 bytes @ 0xA
  3805                           
  3806  002A                     ?_rdBlkRegCompleteHandler:	
  3807                           ; 1 bytes @ 0xA
  3808                           
  3809  002A                     wr1RegCompleteHandler@p:	
  3810                           ; 1 bytes @ 0xA
  3811                           
  3812  002A                     rd1RegCompleteHandler@p:	
  3813                           ; 1 bytes @ 0xA
  3814                           
  3815  002A                     rd2RegCompleteHandler@p:	
  3816                           ; 1 bytes @ 0xA
  3817                           
  3818  002A                     wr2RegCompleteHandler@p:	
  3819                           ; 1 bytes @ 0xA
  3820                           
  3821  002A                     rdBlkRegCompleteHandler@p:	
  3822                           ; 1 bytes @ 0xA
  3823                           
  3824  002A                     returnStop@p:	
  3825                           ; 1 bytes @ 0xA
  3826                           
  3827  002A                     returnReset@p:	
  3828                           ; 1 bytes @ 0xA
  3829                           
  3830  002A                     i2c_restartWrite@p:	
  3831                           ; 1 bytes @ 0xA
  3832                           
  3833                           
  3834                           ; 1 bytes @ 0xA
  3835  002A                     	ds	1
  3836  002B                     ??_i2c_restartWrite:	
  3837  002B                     ??_returnStop:	
  3838                           ; 1 bytes @ 0xB
  3839                           
  3840  002B                     ??_returnReset:	
  3841                           ; 1 bytes @ 0xB
  3842                           
  3843  002B                     ??_wr1RegCompleteHandler:	
  3844                           ; 1 bytes @ 0xB
  3845                           
  3846  002B                     ??_rd1RegCompleteHandler:	
  3847                           ; 1 bytes @ 0xB
  3848                           
  3849  002B                     ??_rd2RegCompleteHandler:	
  3850                           ; 1 bytes @ 0xB
  3851                           
  3852  002B                     ??_wr2RegCompleteHandler:	
  3853                           ; 1 bytes @ 0xB
  3854                           
  3855  002B                     ??_rdBlkRegCompleteHandler:	
  3856                           ; 1 bytes @ 0xB
  3857                           
  3858  002B                     ??_do_I2C_DO_ADDRESS_NACK:	
  3859                           ; 1 bytes @ 0xB
  3860                           
  3861  002B                     ??_do_I2C_TX:	
  3862                           ; 1 bytes @ 0xB
  3863                           
  3864  002B                     ??_do_I2C_RX:	
  3865                           ; 1 bytes @ 0xB
  3866                           
  3867  002B                     ??_do_I2C_TX_EMPTY:	
  3868                           ; 1 bytes @ 0xB
  3869                           
  3870                           
  3871                           ; 1 bytes @ 0xB
  3872  002B                     	ds	1
  3873  002C                     _do_I2C_TX$1026:	
  3874                           
  3875                           ; 2 bytes @ 0xC
  3876  002C                     	ds	1
  3877  002D                     ?_rand:	
  3878                           
  3879                           ; 2 bytes @ 0xD
  3880  002D                     	ds	1
  3881  002E                     ??_i2c_ISR:	
  3882                           
  3883                           ; 1 bytes @ 0xE
  3884  002E                     	ds	1
  3885  002F                     ??_rand:	
  3886  002F                     ??_i2c_poller:	
  3887                           ; 1 bytes @ 0xF
  3888                           
  3889  002F                     ??_i2c_masterOperation:	
  3890                           ; 1 bytes @ 0xF
  3891                           
  3892                           
  3893                           ; 1 bytes @ 0xF
  3894  002F                     	ds	1
  3895  0030                     i2c_masterOperation@read:	
  3896                           
  3897                           ; 1 bytes @ 0x10
  3898  0030                     	ds	1
  3899  0031                     i2c_masterOperation@ret:	
  3900                           
  3901                           ; 1 bytes @ 0x11
  3902  0031                     	ds	1
  3903  0032                     ?_i2c_writeNBytes:	
  3904  0032                     ??_i2c_masterWrite:	
  3905                           ; 1 bytes @ 0x12
  3906                           
  3907  0032                     i2c_writeNBytes@data:	
  3908                           ; 1 bytes @ 0x12
  3909                           
  3910                           
  3911                           ; 1 bytes @ 0x12
  3912  0032                     	ds	1
  3913  0033                     i2c_writeNBytes@len:	
  3914                           
  3915                           ; 2 bytes @ 0x13
  3916  0033                     	ds	1
  3917  0034                     ?___awmod:	
  3918  0034                     ___awmod@divisor:	
  3919                           ; 2 bytes @ 0x14
  3920                           
  3921                           
  3922                           ; 2 bytes @ 0x14
  3923  0034                     	ds	1
  3924  0035                     ??_i2c_writeNBytes:	
  3925  0035                     i2c_writeNBytes@address:	
  3926                           ; 1 bytes @ 0x15
  3927                           
  3928                           
  3929                           ; 1 bytes @ 0x15
  3930  0035                     	ds	1
  3931  0036                     ??_writeDisplay:	
  3932  0036                     ??_initializeDisplay:	
  3933                           ; 1 bytes @ 0x16
  3934                           
  3935  0036                     ___awmod@dividend:	
  3936                           ; 1 bytes @ 0x16
  3937                           
  3938                           
  3939                           ; 2 bytes @ 0x16
  3940  0036                     	ds	2
  3941  0038                     ??___awmod:	
  3942                           
  3943                           ; 1 bytes @ 0x18
  3944  0038                     	ds	1
  3945  0039                     ___awmod@counter:	
  3946                           
  3947                           ; 1 bytes @ 0x19
  3948  0039                     	ds	1
  3949  003A                     ___awmod@sign:	
  3950                           
  3951                           ; 1 bytes @ 0x1A
  3952  003A                     	ds	1
  3953  003B                     ?_random:	
  3954  003B                     ??_endGame:	
  3955                           ; 1 bytes @ 0x1B
  3956                           
  3957  003B                     random@upper:	
  3958                           ; 1 bytes @ 0x1B
  3959                           
  3960                           
  3961                           ; 1 bytes @ 0x1B
  3962  003B                     	ds	1
  3963  003C                     ??_random:	
  3964                           
  3965                           ; 1 bytes @ 0x1C
  3966  003C                     	ds	2
  3967  003E                     random@lower:	
  3968                           
  3969                           ; 1 bytes @ 0x1E
  3970  003E                     	ds	1
  3971  003F                     ??_shiftWalls:	
  3972                           
  3973                           ; 1 bytes @ 0x1F
  3974  003F                     	ds	6
  3975  0045                     ??_main:	
  3976                           
  3977                           ; 1 bytes @ 0x25
  3978  0045                     	ds	2
  3979                           
  3980                           	psect	maintext
  3981  0192                     __pmaintext:	
  3982 ;;
  3983 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  3984 ;;
  3985 ;; *************** function _main *****************
  3986 ;; Defined at:
  3987 ;;		line 186 in file "main.c"
  3988 ;; Parameters:    Size  Location     Type
  3989 ;;		None
  3990 ;; Auto vars:     Size  Location     Type
  3991 ;;		None
  3992 ;; Return value:  Size  Location     Type
  3993 ;;                  1    wreg      void 
  3994 ;; Registers used:
  3995 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3996 ;; Tracked objects:
  3997 ;;		On entry : B1F/0
  3998 ;;		On exit  : 0/0
  3999 ;;		Unchanged: 0/0
  4000 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4001 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4002 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4003 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4004 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4005 ;;Total ram usage:        2 bytes
  4006 ;; Hardware stack levels required when called:   17
  4007 ;; This function calls:
  4008 ;;		_IOCCF4_SetInterruptHandler
  4009 ;;		_SYSTEM_Initialize
  4010 ;;		_clearPixels
  4011 ;;		_drawPixel
  4012 ;;		_drawWalls
  4013 ;;		_endGame
  4014 ;;		_initializeDisplay
  4015 ;;		_shiftWalls
  4016 ;;		_writeDisplay
  4017 ;; This function is called by:
  4018 ;;		Startup code after reset
  4019 ;; This function uses a non-reentrant model
  4020 ;;
  4021                           
  4022                           
  4023                           ;psect for function _main
  4024  0192                     _main:	
  4025                           
  4026                           ;main.c: 188: SYSTEM_Initialize();
  4027                           
  4028                           ;incstack = 0
  4029 ;; hardware stack exceeded
  4030                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4031  0192  318D  25E5  3181   	fcall	_SYSTEM_Initialize
  4032                           
  4033                           ;main.c: 189: (INTCONbits.GIE = 1);
  4034  0195  178B               	bsf	11,7	;volatile
  4035                           
  4036                           ;main.c: 190: (INTCONbits.PEIE = 1);
  4037  0196  170B               	bsf	11,6	;volatile
  4038                           
  4039                           ;main.c: 192: initializeDisplay();
  4040  0197  3181  21FB  3181   	fcall	_initializeDisplay
  4041                           
  4042                           ;main.c: 194: IOCCF4_SetInterruptHandler(buttonInterrupt);
  4043  019A  30C6               	movlw	low _buttonInterrupt
  4044  019B  0020               	movlb	0	; select bank0
  4045  019C  00A1               	movwf	IOCCF4_SetInterruptHandler@InterruptHandler
  4046  019D  300E               	movlw	high _buttonInterrupt
  4047  019E  00A2               	movwf	IOCCF4_SetInterruptHandler@InterruptHandler+1
  4048  019F  318D  25DF  3181   	fcall	_IOCCF4_SetInterruptHandler
  4049                           
  4050                           ;main.c: 196: elevation = 3;
  4051  01A2  3003               	movlw	3
  4052  01A3  0020               	movlb	0	; select bank0
  4053  01A4  00C5               	movwf	??_main
  4054  01A5  0845               	movf	??_main,w
  4055  01A6  00DE               	movwf	_elevation
  4056                           
  4057                           ;main.c: 197: writeDisplay();
  4058  01A7  3182  2259  3181   	fcall	_writeDisplay
  4059  01AA                     l5744:	
  4060                           ;main.c: 199: while (!start);
  4061                           
  4062  01AA  0020               	movlb	0	; select bank0
  4063  01AB  085D               	movf	_start,w
  4064  01AC  1903               	btfsc	3,2
  4065  01AD  29AA               	goto	l5744
  4066  01AE                     l5746:	
  4067                           ;main.c: 201: while (1)
  4068                           
  4069                           
  4070                           ;main.c: 202: {
  4071                           ;main.c: 203: drawPixel(1, elevation, 3);
  4072  01AE  085E               	movf	_elevation,w
  4073  01AF  00C5               	movwf	??_main
  4074  01B0  0845               	movf	??_main,w
  4075  01B1  00A1               	movwf	drawPixel@y
  4076  01B2  3003               	movlw	3
  4077  01B3  00C6               	movwf	??_main+1
  4078  01B4  0846               	movf	??_main+1,w
  4079  01B5  00A2               	movwf	drawPixel@color
  4080  01B6  3001               	movlw	1
  4081  01B7  3180  205B  3181   	fcall	_drawPixel
  4082                           
  4083                           ;main.c: 204: drawWalls();
  4084  01BA  3187  279B  3181   	fcall	_drawWalls
  4085                           
  4086                           ;main.c: 205: writeDisplay();
  4087  01BD  3182  2259  3181   	fcall	_writeDisplay
  4088                           
  4089                           ;main.c: 206: clearPixels();
  4090  01C0  318F  276A  3181   	fcall	_clearPixels
  4091                           
  4092                           ;main.c: 207: if (elevation < 0 || elevation > 7 || (walls[elevation] & 0b01000000)) {
  4093  01C3  3008               	movlw	8
  4094  01C4  0020               	movlb	0	; select bank0
  4095  01C5  025E               	subwf	_elevation,w
  4096  01C6  1803               	skipnc
  4097  01C7  29CE               	goto	l5756
  4098  01C8  085E               	movf	_elevation,w
  4099  01C9  3E47               	addlw	(low (_walls| 0))& (0+255)
  4100  01CA  0086               	movwf	6
  4101  01CB  0187               	clrf	7
  4102  01CC  1F01               	btfss	1,6
  4103  01CD  29D1               	goto	l5758
  4104  01CE                     l5756:	
  4105                           
  4106                           ;main.c: 208: endGame();
  4107  01CE  3183  2305  3181   	fcall	_endGame
  4108  01D1                     l5758:	
  4109                           
  4110                           ;main.c: 209: }
  4111                           ;main.c: 210: if (gravityCounter >= 80) {
  4112  01D1  3050               	movlw	80
  4113  01D2  0020               	movlb	0	; select bank0
  4114  01D3  025C               	subwf	_gravityCounter,w
  4115  01D4  1C03               	skipc
  4116  01D5  29E4               	goto	l5770
  4117                           
  4118                           ;main.c: 211: if (fall) {
  4119  01D6  0864               	movf	_fall,w
  4120  01D7  1903               	btfsc	3,2
  4121  01D8  29DE               	goto	l5764
  4122                           
  4123                           ;main.c: 212: elevation += 1;
  4124  01D9  3001               	movlw	1
  4125  01DA  00C5               	movwf	??_main
  4126  01DB  0845               	movf	??_main,w
  4127  01DC  07DE               	addwf	_elevation,f
  4128                           
  4129                           ;main.c: 213: } else {
  4130  01DD  29E2               	goto	l5768
  4131  01DE                     l5764:	
  4132                           
  4133                           ;main.c: 214: elevation -= 1;
  4134  01DE  3001               	movlw	1
  4135  01DF  02DE               	subwf	_elevation,f
  4136                           
  4137                           ;main.c: 215: fall = 1;
  4138  01E0  01E4               	clrf	_fall
  4139  01E1  0AE4               	incf	_fall,f
  4140  01E2                     l5768:	
  4141                           
  4142                           ;main.c: 216: }
  4143                           ;main.c: 217: gravityCounter = 0;
  4144  01E2  01DC               	clrf	_gravityCounter
  4145                           
  4146                           ;main.c: 218: } else {
  4147  01E3  29E8               	goto	l5772
  4148  01E4                     l5770:	
  4149                           
  4150                           ;main.c: 219: gravityCounter++;
  4151  01E4  3001               	movlw	1
  4152  01E5  00C5               	movwf	??_main
  4153  01E6  0845               	movf	??_main,w
  4154  01E7  07DC               	addwf	_gravityCounter,f
  4155  01E8                     l5772:	
  4156                           
  4157                           ;main.c: 220: }
  4158                           ;main.c: 221: if (shiftCounter >= 100) {
  4159  01E8  3000               	movlw	0
  4160  01E9  0250               	subwf	_shiftCounter+1,w
  4161  01EA  3064               	movlw	100
  4162  01EB  1903               	skipnz
  4163  01EC  024F               	subwf	_shiftCounter,w
  4164  01ED  1C03               	skipc
  4165  01EE  29F6               	goto	l5778
  4166                           
  4167                           ;main.c: 222: shiftWalls();
  4168  01EF  3181  2111  3181   	fcall	_shiftWalls
  4169                           
  4170                           ;main.c: 223: shiftCounter = 0;
  4171  01F2  0020               	movlb	0	; select bank0
  4172  01F3  01CF               	clrf	_shiftCounter
  4173  01F4  01D0               	clrf	_shiftCounter+1
  4174                           
  4175                           ;main.c: 224: } else {
  4176  01F5  29AE               	goto	l5746
  4177  01F6                     l5778:	
  4178                           
  4179                           ;main.c: 225: shiftCounter++;
  4180  01F6  3001               	movlw	1
  4181  01F7  07CF               	addwf	_shiftCounter,f
  4182  01F8  3000               	movlw	0
  4183  01F9  3DD0               	addwfc	_shiftCounter+1,f
  4184  01FA  29AE               	goto	l5746
  4185  01FB                     __end_of_main:	
  4186                           
  4187                           	psect	text1
  4188  0111                     __ptext1:	
  4189 ;; *************** function _shiftWalls *****************
  4190 ;; Defined at:
  4191 ;;		line 138 in file "main.c"
  4192 ;; Parameters:    Size  Location     Type
  4193 ;;		None
  4194 ;; Auto vars:     Size  Location     Type
  4195 ;;		None
  4196 ;; Return value:  Size  Location     Type
  4197 ;;                  1    wreg      void 
  4198 ;; Registers used:
  4199 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4200 ;; Tracked objects:
  4201 ;;		On entry : 0/0
  4202 ;;		On exit  : 0/0
  4203 ;;		Unchanged: 0/0
  4204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4205 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4206 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4207 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4208 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4209 ;;Total ram usage:        6 bytes
  4210 ;; Hardware stack levels used:    1
  4211 ;; Hardware stack levels required when called:    9
  4212 ;; This function calls:
  4213 ;;		_random
  4214 ;; This function is called by:
  4215 ;;		_main
  4216 ;; This function uses a non-reentrant model
  4217 ;;
  4218                           
  4219                           
  4220                           ;psect for function _shiftWalls
  4221  0111                     _shiftWalls:	
  4222                           
  4223                           ;main.c: 139: for (i = 0; i < 8; i++) {
  4224                           
  4225                           ;incstack = 0
  4226                           ; Regs used in _shiftWalls: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4227  0111  0020               	movlb	0	; select bank0
  4228  0112  01DB               	clrf	_i
  4229  0113  3008               	movlw	8
  4230  0114  025B               	subwf	_i,w
  4231  0115  1803               	btfsc	3,0
  4232  0116  292B               	goto	l3390
  4233  0117                     l3384:	
  4234                           
  4235                           ;main.c: 140: walls[i] = walls[i] << 1;
  4236  0117  085B               	movf	_i,w
  4237  0118  3E47               	addlw	(low (_walls| 0))& (0+255)
  4238  0119  0086               	movwf	6
  4239  011A  0187               	clrf	7
  4240  011B  3501               	lslf	1,w
  4241  011C  00BF               	movwf	??_shiftWalls
  4242  011D  085B               	movf	_i,w
  4243  011E  3E47               	addlw	(low (_walls| 0))& (0+255)
  4244  011F  0086               	movwf	6
  4245  0120  0187               	clrf	7
  4246  0121  083F               	movf	??_shiftWalls,w
  4247  0122  0081               	movwf	1
  4248  0123  3001               	movlw	1
  4249  0124  00BF               	movwf	??_shiftWalls
  4250  0125  083F               	movf	??_shiftWalls,w
  4251  0126  07DB               	addwf	_i,f
  4252  0127  3008               	movlw	8
  4253  0128  025B               	subwf	_i,w
  4254  0129  1C03               	skipc
  4255  012A  2917               	goto	l3384
  4256  012B                     l3390:	
  4257                           
  4258                           ;main.c: 141: }
  4259                           ;main.c: 142: if (createWall == 3) {
  4260  012B  3003               	movlw	3
  4261  012C  065F               	xorwf	_createWall,w
  4262  012D  1D03               	btfss	3,2
  4263  012E  298D               	goto	l3414
  4264                           
  4265                           ;main.c: 143: wallHeight = random(4, 7);
  4266  012F  3007               	movlw	7
  4267  0130  00BF               	movwf	??_shiftWalls
  4268  0131  083F               	movf	??_shiftWalls,w
  4269  0132  00BB               	movwf	random@upper
  4270  0133  3004               	movlw	4
  4271  0134  3187  277C  3181   	fcall	_random
  4272  0137  0020               	movlb	0	; select bank0
  4273  0138  00C0               	movwf	??_shiftWalls+1
  4274  0139  0840               	movf	??_shiftWalls+1,w
  4275  013A  00DA               	movwf	_wallHeight
  4276                           
  4277                           ;main.c: 144: topHalf = random(1, wallHeight);
  4278  013B  085A               	movf	_wallHeight,w
  4279  013C  00BF               	movwf	??_shiftWalls
  4280  013D  083F               	movf	??_shiftWalls,w
  4281  013E  00BB               	movwf	random@upper
  4282  013F  3001               	movlw	1
  4283  0140  3187  277C  3181   	fcall	_random
  4284  0143  0020               	movlb	0	; select bank0
  4285  0144  00C0               	movwf	??_shiftWalls+1
  4286  0145  0840               	movf	??_shiftWalls+1,w
  4287  0146  00D9               	movwf	_topHalf
  4288                           
  4289                           ;main.c: 145: for (i = 0; i < topHalf; i++) {
  4290  0147  01DB               	clrf	_i
  4291  0148                     l3400:	
  4292  0148  0859               	movf	_topHalf,w
  4293  0149  025B               	subwf	_i,w
  4294  014A  1803               	btfsc	3,0
  4295  014B  2956               	goto	l3402
  4296                           
  4297                           ;main.c: 146: walls[i] |= 1;
  4298  014C  085B               	movf	_i,w
  4299  014D  3E47               	addlw	(low (_walls| 0))& (0+255)
  4300  014E  0086               	movwf	6
  4301  014F  0187               	clrf	7
  4302  0150  1401               	bsf	1,0
  4303  0151  3001               	movlw	1
  4304  0152  00BF               	movwf	??_shiftWalls
  4305  0153  083F               	movf	??_shiftWalls,w
  4306  0154  07DB               	addwf	_i,f
  4307  0155  2948               	goto	l3400
  4308  0156                     l3402:	
  4309                           
  4310                           ;main.c: 147: }
  4311                           ;main.c: 148: for (i = 7; i >= 8 - (wallHeight - topHalf); i--) {
  4312  0156  3007               	movlw	7
  4313  0157  00BF               	movwf	??_shiftWalls
  4314  0158  083F               	movf	??_shiftWalls,w
  4315  0159  00DB               	movwf	_i
  4316  015A                     l3408:	
  4317  015A  0859               	movf	_topHalf,w
  4318  015B  00BF               	movwf	??_shiftWalls
  4319  015C  01C0               	clrf	??_shiftWalls+1
  4320  015D  09BF               	comf	??_shiftWalls,f
  4321  015E  09C0               	comf	??_shiftWalls+1,f
  4322  015F  0ABF               	incf	??_shiftWalls,f
  4323  0160  1903               	skipnz
  4324  0161  0AC0               	incf	??_shiftWalls+1,f
  4325  0162  085A               	movf	_wallHeight,w
  4326  0163  073F               	addwf	??_shiftWalls,w
  4327  0164  00C1               	movwf	??_shiftWalls+2
  4328  0165  0840               	movf	??_shiftWalls+1,w
  4329  0166  1803               	skipnc
  4330  0167  0A40               	incf	??_shiftWalls+1,w
  4331  0168  00C2               	movwf	??_shiftWalls+3
  4332  0169  09C1               	comf	??_shiftWalls+2,f
  4333  016A  09C2               	comf	??_shiftWalls+3,f
  4334  016B  0AC1               	incf	??_shiftWalls+2,f
  4335  016C  1903               	skipnz
  4336  016D  0AC2               	incf	??_shiftWalls+3,f
  4337  016E  0841               	movf	??_shiftWalls+2,w
  4338  016F  3E08               	addlw	8
  4339  0170  00C3               	movwf	??_shiftWalls+4
  4340  0171  3000               	movlw	0
  4341  0172  3D42               	addwfc	??_shiftWalls+3,w
  4342  0173  00C4               	movwf	??_shiftWalls+5
  4343  0174  0844               	movf	??_shiftWalls+5,w
  4344  0175  3A80               	xorlw	128
  4345  0176  3C80               	sublw	128
  4346  0177  1D03               	skipz
  4347  0178  297B               	goto	u2065
  4348  0179  0843               	movf	??_shiftWalls+4,w
  4349  017A  025B               	subwf	_i,w
  4350  017B                     u2065:	
  4351  017B  1C03               	btfss	3,0
  4352  017C  2986               	goto	l3410
  4353                           
  4354                           ;main.c: 149: walls[i] |= 1;
  4355  017D  0020               	movlb	0	; select bank0
  4356  017E  085B               	movf	_i,w
  4357  017F  3E47               	addlw	(low (_walls| 0))& (0+255)
  4358  0180  0086               	movwf	6
  4359  0181  0187               	clrf	7
  4360  0182  1401               	bsf	1,0
  4361  0183  3001               	movlw	1
  4362  0184  02DB               	subwf	_i,f
  4363  0185  295A               	goto	l3408
  4364  0186                     l3410:	
  4365                           
  4366                           ;main.c: 150: }
  4367                           ;main.c: 151: createWall = 0;
  4368  0186  0020               	movlb	0	; select bank0
  4369  0187  01DF               	clrf	_createWall
  4370                           
  4371                           ;main.c: 152: score++;
  4372  0188  3001               	movlw	1
  4373  0189  07D3               	addwf	_score,f
  4374  018A  3000               	movlw	0
  4375  018B  3DD4               	addwfc	_score+1,f
  4376                           
  4377                           ;main.c: 153: } else {
  4378  018C  0008               	return
  4379  018D                     l3414:	
  4380                           
  4381                           ;main.c: 154: createWall++;
  4382  018D  3001               	movlw	1
  4383  018E  00BF               	movwf	??_shiftWalls
  4384  018F  083F               	movf	??_shiftWalls,w
  4385  0190  07DF               	addwf	_createWall,f
  4386  0191  0008               	return
  4387  0192                     __end_of_shiftWalls:	
  4388                           
  4389                           	psect	text2
  4390  077C                     __ptext2:	
  4391 ;; *************** function _random *****************
  4392 ;; Defined at:
  4393 ;;		line 118 in file "main.c"
  4394 ;; Parameters:    Size  Location     Type
  4395 ;;  lower           1    wreg     unsigned char 
  4396 ;;  upper           1   27[BANK0 ] unsigned char 
  4397 ;; Auto vars:     Size  Location     Type
  4398 ;;  lower           1   30[BANK0 ] unsigned char 
  4399 ;; Return value:  Size  Location     Type
  4400 ;;                  1    wreg      unsigned char 
  4401 ;; Registers used:
  4402 ;;		wreg, status,2, status,0, pclath, cstack
  4403 ;; Tracked objects:
  4404 ;;		On entry : 0/0
  4405 ;;		On exit  : 0/0
  4406 ;;		Unchanged: 0/0
  4407 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4408 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4409 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4410 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4411 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4412 ;;Total ram usage:        4 bytes
  4413 ;; Hardware stack levels used:    1
  4414 ;; Hardware stack levels required when called:    8
  4415 ;; This function calls:
  4416 ;;		___awmod
  4417 ;;		_rand
  4418 ;; This function is called by:
  4419 ;;		_shiftWalls
  4420 ;; This function uses a non-reentrant model
  4421 ;;
  4422                           
  4423                           
  4424                           ;psect for function _random
  4425  077C                     _random:	
  4426                           
  4427                           ;incstack = 0
  4428                           ; Regs used in _random: [wreg+status,2+status,0+pclath+cstack]
  4429                           ;random@lower stored from wreg
  4430  077C  0020               	movlb	0	; select bank0
  4431  077D  00BE               	movwf	random@lower
  4432                           
  4433                           ;main.c: 119: return rand() % (upper-lower) + lower;
  4434  077E  083E               	movf	random@lower,w
  4435  077F  00BC               	movwf	??_random
  4436  0780  01BD               	clrf	??_random+1
  4437  0781  09BC               	comf	??_random,f
  4438  0782  09BD               	comf	??_random+1,f
  4439  0783  0ABC               	incf	??_random,f
  4440  0784  1903               	skipnz
  4441  0785  0ABD               	incf	??_random+1,f
  4442  0786  083B               	movf	random@upper,w
  4443  0787  073C               	addwf	??_random,w
  4444  0788  00B4               	movwf	___awmod@divisor
  4445  0789  083D               	movf	??_random+1,w
  4446  078A  1803               	skipnc
  4447  078B  0A3D               	incf	??_random+1,w
  4448  078C  00B5               	movwf	___awmod@divisor+1
  4449  078D  3185  2508  3187   	fcall	_rand
  4450  0790  0020               	movlb	0	; select bank0
  4451  0791  082E               	movf	?_rand+1,w
  4452  0792  00B7               	movwf	___awmod@dividend+1
  4453  0793  082D               	movf	?_rand,w
  4454  0794  00B6               	movwf	___awmod@dividend
  4455  0795  3184  243E         	fcall	___awmod
  4456  0797  0020               	movlb	0	; select bank0
  4457  0798  0834               	movf	?___awmod,w
  4458  0799  073E               	addwf	random@lower,w
  4459  079A  0008               	return
  4460  079B                     __end_of_random:	
  4461                           
  4462                           	psect	text3
  4463  0508                     __ptext3:	
  4464 ;; *************** function _rand *****************
  4465 ;; Defined at:
  4466 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\rand.c"
  4467 ;; Parameters:    Size  Location     Type
  4468 ;;		None
  4469 ;; Auto vars:     Size  Location     Type
  4470 ;;		None
  4471 ;; Return value:  Size  Location     Type
  4472 ;;                  2   13[BANK0 ] int 
  4473 ;; Registers used:
  4474 ;;		wreg, status,2, status,0, pclath, cstack
  4475 ;; Tracked objects:
  4476 ;;		On entry : 0/0
  4477 ;;		On exit  : 0/0
  4478 ;;		Unchanged: 0/0
  4479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4480 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4481 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4482 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4483 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4484 ;;Total ram usage:        7 bytes
  4485 ;; Hardware stack levels used:    1
  4486 ;; Hardware stack levels required when called:    7
  4487 ;; This function calls:
  4488 ;;		___lmul
  4489 ;; This function is called by:
  4490 ;;		_random
  4491 ;; This function uses a non-reentrant model
  4492 ;;
  4493                           
  4494                           
  4495                           ;psect for function _rand
  4496  0508                     _rand:	
  4497                           
  4498                           ;incstack = 0
  4499                           ; Regs used in _rand: [wreg+status,2+status,0+pclath+cstack]
  4500  0508  0020               	movlb	0	; select bank0
  4501  0509  0863               	movf	_randx+3,w
  4502  050A  00A4               	movwf	___lmul@multiplier+3
  4503  050B  0862               	movf	_randx+2,w
  4504  050C  00A3               	movwf	___lmul@multiplier+2
  4505  050D  0861               	movf	_randx+1,w
  4506  050E  00A2               	movwf	___lmul@multiplier+1
  4507  050F  0860               	movf	_randx,w
  4508  0510  00A1               	movwf	___lmul@multiplier
  4509  0511  3041               	movlw	65
  4510  0512  00A8               	movwf	___lmul@multiplicand+3
  4511  0513  30C6               	movlw	198
  4512  0514  00A7               	movwf	___lmul@multiplicand+2
  4513  0515  304E               	movlw	78
  4514  0516  00A6               	movwf	___lmul@multiplicand+1
  4515  0517  306D               	movlw	109
  4516  0518  00A5               	movwf	___lmul@multiplicand
  4517  0519  3185  25AF  3185   	fcall	___lmul
  4518  051C  0020               	movlb	0	; select bank0
  4519  051D  0824               	movf	?___lmul+3,w
  4520  051E  00E3               	movwf	_randx+3
  4521  051F  0823               	movf	?___lmul+2,w
  4522  0520  00E2               	movwf	_randx+2
  4523  0521  0822               	movf	?___lmul+1,w
  4524  0522  00E1               	movwf	_randx+1
  4525  0523  0821               	movf	?___lmul,w
  4526  0524  00E0               	movwf	_randx
  4527  0525  3039               	movlw	57
  4528  0526  07E0               	addwf	_randx,f
  4529  0527  3030               	movlw	48
  4530  0528  3DE1               	addwfc	_randx+1,f
  4531  0529  3000               	movlw	0
  4532  052A  3DE2               	addwfc	_randx+2,f
  4533  052B  3000               	movlw	0
  4534  052C  3DE3               	addwfc	_randx+3,f
  4535  052D  0860               	movf	_randx,w
  4536  052E  00AF               	movwf	??_rand
  4537  052F  0861               	movf	_randx+1,w
  4538  0530  00B0               	movwf	??_rand+1
  4539  0531  0862               	movf	_randx+2,w
  4540  0532  00B1               	movwf	??_rand+2
  4541  0533  0863               	movf	_randx+3,w
  4542  0534  00B2               	movwf	??_rand+3
  4543  0535  3010               	movlw	16
  4544  0536  00B3               	movwf	??_rand+4
  4545  0537                     u1465:	
  4546  0537  37B2               	asrf	??_rand+3,f
  4547  0538  0CB1               	rrf	??_rand+2,f
  4548  0539  0CB0               	rrf	??_rand+1,f
  4549  053A  0CAF               	rrf	??_rand,f
  4550  053B  0BB3               	decfsz	??_rand+4,f
  4551  053C  2D37               	goto	u1465
  4552  053D  30FF               	movlw	255
  4553  053E  052F               	andwf	??_rand,w
  4554  053F  00AD               	movwf	?_rand
  4555  0540  307F               	movlw	127
  4556  0541  0530               	andwf	??_rand+1,w
  4557  0542  00AE               	movwf	?_rand+1
  4558  0543  0008               	return
  4559  0544                     __end_of_rand:	
  4560                           
  4561                           	psect	text4
  4562  05AF                     __ptext4:	
  4563 ;; *************** function ___lmul *****************
  4564 ;; Defined at:
  4565 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
  4566 ;; Parameters:    Size  Location     Type
  4567 ;;  multiplier      4    1[BANK0 ] unsigned long 
  4568 ;;  multiplicand    4    5[BANK0 ] unsigned long 
  4569 ;; Auto vars:     Size  Location     Type
  4570 ;;  product         4    9[BANK0 ] unsigned long 
  4571 ;; Return value:  Size  Location     Type
  4572 ;;                  4    1[BANK0 ] unsigned long 
  4573 ;; Registers used:
  4574 ;;		wreg, status,2, status,0
  4575 ;; Tracked objects:
  4576 ;;		On entry : 0/0
  4577 ;;		On exit  : 0/0
  4578 ;;		Unchanged: 0/0
  4579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4580 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4581 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4582 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4583 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4584 ;;Total ram usage:       12 bytes
  4585 ;; Hardware stack levels used:    1
  4586 ;; Hardware stack levels required when called:    6
  4587 ;; This function calls:
  4588 ;;		Nothing
  4589 ;; This function is called by:
  4590 ;;		_rand
  4591 ;; This function uses a non-reentrant model
  4592 ;;
  4593                           
  4594                           
  4595                           ;psect for function ___lmul
  4596  05AF                     ___lmul:	
  4597                           
  4598                           ;incstack = 0
  4599                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  4600  05AF  3000               	movlw	0
  4601  05B0  0020               	movlb	0	; select bank0
  4602  05B1  00AC               	movwf	___lmul@product+3
  4603  05B2  3000               	movlw	0
  4604  05B3  00AB               	movwf	___lmul@product+2
  4605  05B4  3000               	movlw	0
  4606  05B5  00AA               	movwf	___lmul@product+1
  4607  05B6  3000               	movlw	0
  4608  05B7  00A9               	movwf	___lmul@product
  4609  05B8                     l2826:	
  4610  05B8  1C21               	btfss	___lmul@multiplier,0
  4611  05B9  2DC2               	goto	l2830
  4612  05BA  0825               	movf	___lmul@multiplicand,w
  4613  05BB  07A9               	addwf	___lmul@product,f
  4614  05BC  0826               	movf	___lmul@multiplicand+1,w
  4615  05BD  3DAA               	addwfc	___lmul@product+1,f
  4616  05BE  0827               	movf	___lmul@multiplicand+2,w
  4617  05BF  3DAB               	addwfc	___lmul@product+2,f
  4618  05C0  0828               	movf	___lmul@multiplicand+3,w
  4619  05C1  3DAC               	addwfc	___lmul@product+3,f
  4620  05C2                     l2830:	
  4621  05C2  3001               	movlw	1
  4622  05C3                     u1405:	
  4623  05C3  35A5               	lslf	___lmul@multiplicand,f
  4624  05C4  0DA6               	rlf	___lmul@multiplicand+1,f
  4625  05C5  0DA7               	rlf	___lmul@multiplicand+2,f
  4626  05C6  0DA8               	rlf	___lmul@multiplicand+3,f
  4627  05C7  0B89               	decfsz	9,f
  4628  05C8  2DC3               	goto	u1405
  4629  05C9  3001               	movlw	1
  4630  05CA                     u1415:	
  4631  05CA  36A4               	lsrf	___lmul@multiplier+3,f
  4632  05CB  0CA3               	rrf	___lmul@multiplier+2,f
  4633  05CC  0CA2               	rrf	___lmul@multiplier+1,f
  4634  05CD  0CA1               	rrf	___lmul@multiplier,f
  4635  05CE  0B89               	decfsz	9,f
  4636  05CF  2DCA               	goto	u1415
  4637  05D0  0824               	movf	___lmul@multiplier+3,w
  4638  05D1  0423               	iorwf	___lmul@multiplier+2,w
  4639  05D2  0422               	iorwf	___lmul@multiplier+1,w
  4640  05D3  0421               	iorwf	___lmul@multiplier,w
  4641  05D4  1D03               	skipz
  4642  05D5  2DB8               	goto	l2826
  4643  05D6  082C               	movf	___lmul@product+3,w
  4644  05D7  00A4               	movwf	?___lmul+3
  4645  05D8  082B               	movf	___lmul@product+2,w
  4646  05D9  00A3               	movwf	?___lmul+2
  4647  05DA  082A               	movf	___lmul@product+1,w
  4648  05DB  00A2               	movwf	?___lmul+1
  4649  05DC  0829               	movf	___lmul@product,w
  4650  05DD  00A1               	movwf	?___lmul
  4651  05DE  0008               	return
  4652  05DF                     __end_of___lmul:	
  4653                           
  4654                           	psect	text5
  4655  043E                     __ptext5:	
  4656 ;; *************** function ___awmod *****************
  4657 ;; Defined at:
  4658 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
  4659 ;; Parameters:    Size  Location     Type
  4660 ;;  divisor         2   20[BANK0 ] int 
  4661 ;;  dividend        2   22[BANK0 ] int 
  4662 ;; Auto vars:     Size  Location     Type
  4663 ;;  sign            1   26[BANK0 ] unsigned char 
  4664 ;;  counter         1   25[BANK0 ] unsigned char 
  4665 ;; Return value:  Size  Location     Type
  4666 ;;                  2   20[BANK0 ] int 
  4667 ;; Registers used:
  4668 ;;		wreg, status,2, status,0
  4669 ;; Tracked objects:
  4670 ;;		On entry : 0/0
  4671 ;;		On exit  : 0/0
  4672 ;;		Unchanged: 0/0
  4673 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4674 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4675 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4676 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4677 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4678 ;;Total ram usage:        7 bytes
  4679 ;; Hardware stack levels used:    1
  4680 ;; Hardware stack levels required when called:    6
  4681 ;; This function calls:
  4682 ;;		Nothing
  4683 ;; This function is called by:
  4684 ;;		_random
  4685 ;; This function uses a non-reentrant model
  4686 ;;
  4687                           
  4688                           
  4689                           ;psect for function ___awmod
  4690  043E                     ___awmod:	
  4691                           
  4692                           ;incstack = 0
  4693                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  4694  043E  0020               	movlb	0	; select bank0
  4695  043F  01BA               	clrf	___awmod@sign
  4696  0440  1FB7               	btfss	___awmod@dividend+1,7
  4697  0441  2C49               	goto	l2934
  4698  0442  09B6               	comf	___awmod@dividend,f
  4699  0443  09B7               	comf	___awmod@dividend+1,f
  4700  0444  0AB6               	incf	___awmod@dividend,f
  4701  0445  1903               	skipnz
  4702  0446  0AB7               	incf	___awmod@dividend+1,f
  4703  0447  01BA               	clrf	___awmod@sign
  4704  0448  0ABA               	incf	___awmod@sign,f
  4705  0449                     l2934:	
  4706  0449  1FB5               	btfss	___awmod@divisor+1,7
  4707  044A  2C50               	goto	l2938
  4708  044B  09B4               	comf	___awmod@divisor,f
  4709  044C  09B5               	comf	___awmod@divisor+1,f
  4710  044D  0AB4               	incf	___awmod@divisor,f
  4711  044E  1903               	skipnz
  4712  044F  0AB5               	incf	___awmod@divisor+1,f
  4713  0450                     l2938:	
  4714  0450  0834               	movf	___awmod@divisor,w
  4715  0451  0435               	iorwf	___awmod@divisor+1,w
  4716  0452  1903               	btfsc	3,2
  4717  0453  2C77               	goto	l2956
  4718  0454  01B9               	clrf	___awmod@counter
  4719  0455  0AB9               	incf	___awmod@counter,f
  4720  0456                     l2946:	
  4721  0456  1BB5               	btfsc	___awmod@divisor+1,7
  4722  0457  2C62               	goto	l2948
  4723  0458  3001               	movlw	1
  4724  0459                     u1615:	
  4725  0459  35B4               	lslf	___awmod@divisor,f
  4726  045A  0DB5               	rlf	___awmod@divisor+1,f
  4727  045B  0B89               	decfsz	9,f
  4728  045C  2C59               	goto	u1615
  4729  045D  3001               	movlw	1
  4730  045E  00B8               	movwf	??___awmod
  4731  045F  0838               	movf	??___awmod,w
  4732  0460  07B9               	addwf	___awmod@counter,f
  4733  0461  2C56               	goto	l2946
  4734  0462                     l2948:	
  4735  0462  0835               	movf	___awmod@divisor+1,w
  4736  0463  0237               	subwf	___awmod@dividend+1,w
  4737  0464  1D03               	skipz
  4738  0465  2C68               	goto	u1635
  4739  0466  0834               	movf	___awmod@divisor,w
  4740  0467  0236               	subwf	___awmod@dividend,w
  4741  0468                     u1635:	
  4742  0468  1C03               	skipc
  4743  0469  2C6E               	goto	l2952
  4744  046A  0834               	movf	___awmod@divisor,w
  4745  046B  02B6               	subwf	___awmod@dividend,f
  4746  046C  0835               	movf	___awmod@divisor+1,w
  4747  046D  3BB7               	subwfb	___awmod@dividend+1,f
  4748  046E                     l2952:	
  4749  046E  3001               	movlw	1
  4750  046F                     u1645:	
  4751  046F  36B5               	lsrf	___awmod@divisor+1,f
  4752  0470  0CB4               	rrf	___awmod@divisor,f
  4753  0471  0B89               	decfsz	9,f
  4754  0472  2C6F               	goto	u1645
  4755  0473  3001               	movlw	1
  4756  0474  02B9               	subwf	___awmod@counter,f
  4757  0475  1D03               	btfss	3,2
  4758  0476  2C62               	goto	l2948
  4759  0477                     l2956:	
  4760  0477  083A               	movf	___awmod@sign,w
  4761  0478  1903               	btfsc	3,2
  4762  0479  2C7F               	goto	l2960
  4763  047A  09B6               	comf	___awmod@dividend,f
  4764  047B  09B7               	comf	___awmod@dividend+1,f
  4765  047C  0AB6               	incf	___awmod@dividend,f
  4766  047D  1903               	skipnz
  4767  047E  0AB7               	incf	___awmod@dividend+1,f
  4768  047F                     l2960:	
  4769  047F  0837               	movf	___awmod@dividend+1,w
  4770  0480  00B5               	movwf	?___awmod+1
  4771  0481  0836               	movf	___awmod@dividend,w
  4772  0482  00B4               	movwf	?___awmod
  4773  0483  0008               	return
  4774  0484                     __end_of___awmod:	
  4775                           
  4776                           	psect	text6
  4777  01FB                     __ptext6:	
  4778 ;; *************** function _initializeDisplay *****************
  4779 ;; Defined at:
  4780 ;;		line 99 in file "main.c"
  4781 ;; Parameters:    Size  Location     Type
  4782 ;;		None
  4783 ;; Auto vars:     Size  Location     Type
  4784 ;;		None
  4785 ;; Return value:  Size  Location     Type
  4786 ;;                  1    wreg      void 
  4787 ;; Registers used:
  4788 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4789 ;; Tracked objects:
  4790 ;;		On entry : 0/0
  4791 ;;		On exit  : 0/0
  4792 ;;		Unchanged: 0/0
  4793 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4794 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4795 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4796 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4797 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4798 ;;Total ram usage:        1 bytes
  4799 ;; Hardware stack levels used:    1
  4800 ;; Hardware stack levels required when called:   15
  4801 ;; This function calls:
  4802 ;;		_i2c_writeNBytes
  4803 ;; This function is called by:
  4804 ;;		_main
  4805 ;; This function uses a non-reentrant model
  4806 ;;
  4807                           
  4808                           
  4809                           ;psect for function _initializeDisplay
  4810  01FB                     _initializeDisplay:	
  4811                           
  4812                           ;main.c: 100: for (i = 0; i < 8; i++) {
  4813                           
  4814                           ;incstack = 0
  4815                           ; Regs used in _initializeDisplay: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4816  01FB  0020               	movlb	0	; select bank0
  4817  01FC  01DB               	clrf	_i
  4818  01FD  3008               	movlw	8
  4819  01FE  025B               	subwf	_i,w
  4820  01FF  1803               	btfsc	3,0
  4821  0200  2A10               	goto	l5644
  4822  0201                     l5638:	
  4823                           
  4824                           ;main.c: 101: pixelbuffer[i] = 0;
  4825  0201  355B               	lslf	_i,w
  4826  0202  3EBD               	addlw	(low (_pixelbuffer| 0))& (0+255)
  4827  0203  0086               	movwf	6
  4828  0204  0187               	clrf	7
  4829  0205  3000               	movlw	0
  4830  0206  3FC0               	movwi [0]fsr1
  4831  0207  3FC1               	movwi [1]fsr1
  4832  0208  3001               	movlw	1
  4833  0209  00B6               	movwf	??_initializeDisplay
  4834  020A  0836               	movf	??_initializeDisplay,w
  4835  020B  07DB               	addwf	_i,f
  4836  020C  3008               	movlw	8
  4837  020D  025B               	subwf	_i,w
  4838  020E  1C03               	skipc
  4839  020F  2A01               	goto	l5638
  4840  0210                     l5644:	
  4841                           
  4842                           ;main.c: 102: }
  4843                           ;main.c: 103: for (i = 0; i < 8; i++) {
  4844  0210  01DB               	clrf	_i
  4845  0211  3008               	movlw	8
  4846  0212  025B               	subwf	_i,w
  4847  0213  1803               	btfsc	3,0
  4848  0214  2A22               	goto	l5656
  4849  0215                     l5650:	
  4850                           
  4851                           ;main.c: 104: writebuffer[i] = 0;
  4852  0215  085B               	movf	_i,w
  4853  0216  3ECD               	addlw	(low (_writebuffer| 0))& (0+255)
  4854  0217  0086               	movwf	6
  4855  0218  0187               	clrf	7
  4856  0219  0181               	clrf	1
  4857  021A  3001               	movlw	1
  4858  021B  00B6               	movwf	??_initializeDisplay
  4859  021C  0836               	movf	??_initializeDisplay,w
  4860  021D  07DB               	addwf	_i,f
  4861  021E  3008               	movlw	8
  4862  021F  025B               	subwf	_i,w
  4863  0220  1C03               	skipc
  4864  0221  2A15               	goto	l5650
  4865  0222                     l5656:	
  4866                           
  4867                           ;main.c: 105: }
  4868                           ;main.c: 106: for (i = 0; i < 8; i++) {
  4869  0222  01DB               	clrf	_i
  4870  0223  3008               	movlw	8
  4871  0224  025B               	subwf	_i,w
  4872  0225  1803               	btfsc	3,0
  4873  0226  2A34               	goto	l5668
  4874  0227                     l5662:	
  4875                           
  4876                           ;main.c: 107: walls[i] = 0;
  4877  0227  085B               	movf	_i,w
  4878  0228  3E47               	addlw	(low (_walls| 0))& (0+255)
  4879  0229  0086               	movwf	6
  4880  022A  0187               	clrf	7
  4881  022B  0181               	clrf	1
  4882  022C  3001               	movlw	1
  4883  022D  00B6               	movwf	??_initializeDisplay
  4884  022E  0836               	movf	??_initializeDisplay,w
  4885  022F  07DB               	addwf	_i,f
  4886  0230  3008               	movlw	8
  4887  0231  025B               	subwf	_i,w
  4888  0232  1C03               	skipc
  4889  0233  2A27               	goto	l5662
  4890  0234                     l5668:	
  4891                           
  4892                           ;main.c: 108: }
  4893                           ;main.c: 110: writebuffer[0] = 0x21;
  4894  0234  3021               	movlw	33
  4895  0235  00B6               	movwf	??_initializeDisplay
  4896  0236  0836               	movf	??_initializeDisplay,w
  4897  0237  0021               	movlb	1	; select bank1
  4898  0238  00CD               	movwf	_writebuffer^(0+128)
  4899                           
  4900                           ;main.c: 111: i2c_writeNBytes(0x70, writebuffer, 1);
  4901  0239  30CD               	movlw	(low (_writebuffer| 0))& (0+255)
  4902  023A  0020               	movlb	0	; select bank0
  4903  023B  00B6               	movwf	??_initializeDisplay
  4904  023C  0836               	movf	??_initializeDisplay,w
  4905  023D  00B2               	movwf	i2c_writeNBytes@data
  4906  023E  3001               	movlw	1
  4907  023F  00B3               	movwf	i2c_writeNBytes@len
  4908  0240  3000               	movlw	0
  4909  0241  00B4               	movwf	i2c_writeNBytes@len+1
  4910  0242  3070               	movlw	112
  4911  0243  3186  2660  3181   	fcall	_i2c_writeNBytes
  4912                           
  4913                           ;main.c: 114: writebuffer[0] = 0x80 | 0x01;
  4914  0246  3081               	movlw	129
  4915  0247  0020               	movlb	0	; select bank0
  4916  0248  00B6               	movwf	??_initializeDisplay
  4917  0249  0836               	movf	??_initializeDisplay,w
  4918  024A  0021               	movlb	1	; select bank1
  4919  024B  00CD               	movwf	_writebuffer^(0+128)
  4920                           
  4921                           ;main.c: 115: i2c_writeNBytes(0x70, writebuffer, 1);
  4922  024C  30CD               	movlw	(low (_writebuffer| 0))& (0+255)
  4923  024D  0020               	movlb	0	; select bank0
  4924  024E  00B6               	movwf	??_initializeDisplay
  4925  024F  0836               	movf	??_initializeDisplay,w
  4926  0250  00B2               	movwf	i2c_writeNBytes@data
  4927  0251  3001               	movlw	1
  4928  0252  00B3               	movwf	i2c_writeNBytes@len
  4929  0253  3000               	movlw	0
  4930  0254  00B4               	movwf	i2c_writeNBytes@len+1
  4931  0255  3070               	movlw	112
  4932  0256  3186  2660         	fcall	_i2c_writeNBytes
  4933  0258  0008               	return
  4934  0259                     __end_of_initializeDisplay:	
  4935                           
  4936                           	psect	text7
  4937  0305                     __ptext7:	
  4938 ;; *************** function _endGame *****************
  4939 ;; Defined at:
  4940 ;;		line 166 in file "main.c"
  4941 ;; Parameters:    Size  Location     Type
  4942 ;;		None
  4943 ;; Auto vars:     Size  Location     Type
  4944 ;;		None
  4945 ;; Return value:  Size  Location     Type
  4946 ;;                  1    wreg      void 
  4947 ;; Registers used:
  4948 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4949 ;; Tracked objects:
  4950 ;;		On entry : 0/0
  4951 ;;		On exit  : 0/0
  4952 ;;		Unchanged: 0/0
  4953 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4954 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4955 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4956 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4957 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4958 ;;Total ram usage:        2 bytes
  4959 ;; Hardware stack levels used:    1
  4960 ;; Hardware stack levels required when called:   16
  4961 ;; This function calls:
  4962 ;;		_clearPixels
  4963 ;;		_writeDisplay
  4964 ;; This function is called by:
  4965 ;;		_main
  4966 ;; This function uses a non-reentrant model
  4967 ;;
  4968                           
  4969                           
  4970                           ;psect for function _endGame
  4971  0305                     _endGame:	
  4972                           
  4973                           ;main.c: 167: for (i = 0; i < 8; i++) {
  4974                           
  4975                           ;incstack = 0
  4976 ;; hardware stack exceeded
  4977                           ; Regs used in _endGame: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4978  0305  0020               	movlb	0	; select bank0
  4979  0306  01DB               	clrf	_i
  4980  0307  3008               	movlw	8
  4981  0308  025B               	subwf	_i,w
  4982  0309  1803               	btfsc	3,0
  4983  030A  2B1B               	goto	l5686
  4984  030B                     l5680:	
  4985                           
  4986                           ;main.c: 168: pixelbuffer[i] = 0xFF00;
  4987  030B  355B               	lslf	_i,w
  4988  030C  3EBD               	addlw	(low (_pixelbuffer| 0))& (0+255)
  4989  030D  0086               	movwf	6
  4990  030E  0187               	clrf	7
  4991  030F  3000               	movlw	0
  4992  0310  3FC0               	movwi [0]fsr1
  4993  0311  30FF               	movlw	255
  4994  0312  3FC1               	movwi [1]fsr1
  4995  0313  3001               	movlw	1
  4996  0314  00BB               	movwf	??_endGame
  4997  0315  083B               	movf	??_endGame,w
  4998  0316  07DB               	addwf	_i,f
  4999  0317  3008               	movlw	8
  5000  0318  025B               	subwf	_i,w
  5001  0319  1C03               	skipc
  5002  031A  2B0B               	goto	l5680
  5003  031B                     l5686:	
  5004                           
  5005                           ;main.c: 169: }
  5006                           ;main.c: 170: writeDisplay();
  5007  031B  3182  2259  3183   	fcall	_writeDisplay
  5008                           
  5009                           ;main.c: 171: _delay((unsigned long)((200)*(32000000/4000.0)));
  5010  031E  3009               	movlw	9
  5011  031F  0020               	movlb	0	; select bank0
  5012  0320  00BC               	movwf	??_endGame+1
  5013  0321  301E               	movlw	30
  5014  0322  00BB               	movwf	??_endGame
  5015  0323  30E4               	movlw	228
  5016  0324                     u4827:	
  5017  0324  0B89               	decfsz	9,f
  5018  0325  2B24               	goto	u4827
  5019  0326  0BBB               	decfsz	??_endGame,f
  5020  0327  2B24               	goto	u4827
  5021  0328  0BBC               	decfsz	??_endGame+1,f
  5022  0329  2B24               	goto	u4827
  5023  032A  0000               	nop
  5024                           
  5025                           ;main.c: 172: clearPixels();
  5026  032B  318F  276A  3183   	fcall	_clearPixels
  5027                           
  5028                           ;main.c: 173: writeDisplay();
  5029  032E  3182  2259  3183   	fcall	_writeDisplay
  5030                           
  5031                           ;main.c: 174: for (i = 0; i < 8; i++) {
  5032  0331  0020               	movlb	0	; select bank0
  5033  0332  01DB               	clrf	_i
  5034  0333  3008               	movlw	8
  5035  0334  025B               	subwf	_i,w
  5036  0335  1803               	btfsc	3,0
  5037  0336  2B44               	goto	l5706
  5038  0337                     l5700:	
  5039                           
  5040                           ;main.c: 175: walls[i] = 0;
  5041  0337  085B               	movf	_i,w
  5042  0338  3E47               	addlw	(low (_walls| 0))& (0+255)
  5043  0339  0086               	movwf	6
  5044  033A  0187               	clrf	7
  5045  033B  0181               	clrf	1
  5046  033C  3001               	movlw	1
  5047  033D  00BB               	movwf	??_endGame
  5048  033E  083B               	movf	??_endGame,w
  5049  033F  07DB               	addwf	_i,f
  5050  0340  3008               	movlw	8
  5051  0341  025B               	subwf	_i,w
  5052  0342  1C03               	skipc
  5053  0343  2B37               	goto	l5700
  5054  0344                     l5706:	
  5055                           
  5056                           ;main.c: 176: }
  5057                           ;main.c: 177: writeDisplay();
  5058  0344  3182  2259  3183   	fcall	_writeDisplay
  5059                           
  5060                           ;main.c: 178: start = 0;
  5061  0347  0020               	movlb	0	; select bank0
  5062  0348  01DD               	clrf	_start
  5063  0349                     l5710:	
  5064                           ;main.c: 179: while (!start);
  5065                           
  5066  0349  085D               	movf	_start,w
  5067  034A  1903               	btfsc	3,2
  5068  034B  2B49               	goto	l5710
  5069                           
  5070                           ;main.c: 180: elevation = 3;
  5071  034C  3003               	movlw	3
  5072  034D  00BB               	movwf	??_endGame
  5073  034E  083B               	movf	??_endGame,w
  5074  034F  00DE               	movwf	_elevation
  5075                           
  5076                           ;main.c: 181: gravityCounter = 0;
  5077  0350  01DC               	clrf	_gravityCounter
  5078                           
  5079                           ;main.c: 182: shiftCounter = 0;
  5080  0351  01CF               	clrf	_shiftCounter
  5081  0352  01D0               	clrf	_shiftCounter+1
  5082                           
  5083                           ;main.c: 183: score = 0;
  5084  0353  01D3               	clrf	_score
  5085  0354  01D4               	clrf	_score+1
  5086  0355  0008               	return
  5087  0356                     __end_of_endGame:	
  5088                           
  5089                           	psect	text8
  5090  0259                     __ptext8:	
  5091 ;; *************** function _writeDisplay *****************
  5092 ;; Defined at:
  5093 ;;		line 70 in file "main.c"
  5094 ;; Parameters:    Size  Location     Type
  5095 ;;		None
  5096 ;; Auto vars:     Size  Location     Type
  5097 ;;		None
  5098 ;; Return value:  Size  Location     Type
  5099 ;;                  1    wreg      void 
  5100 ;; Registers used:
  5101 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5102 ;; Tracked objects:
  5103 ;;		On entry : 0/0
  5104 ;;		On exit  : 0/0
  5105 ;;		Unchanged: 0/0
  5106 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5107 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5108 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5109 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5110 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5111 ;;Total ram usage:        5 bytes
  5112 ;; Hardware stack levels used:    1
  5113 ;; Hardware stack levels required when called:   15
  5114 ;; This function calls:
  5115 ;;		___awdiv
  5116 ;;		_i2c_writeNBytes
  5117 ;; This function is called by:
  5118 ;;		_endGame
  5119 ;;		_main
  5120 ;; This function uses a non-reentrant model
  5121 ;;
  5122                           
  5123                           
  5124                           ;psect for function _writeDisplay
  5125  0259                     _writeDisplay:	
  5126                           
  5127                           ;main.c: 71: writebuffer[0] = 0;
  5128                           
  5129                           ;incstack = 0
  5130                           ; Regs used in _writeDisplay: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5131  0259  0021               	movlb	1	; select bank1
  5132  025A  01CD               	clrf	_writebuffer^(0+128)
  5133                           
  5134                           ;main.c: 72: for (i = 1; i < 17; i += 2) {
  5135  025B  0020               	movlb	0	; select bank0
  5136  025C  01DB               	clrf	_i
  5137  025D  0ADB               	incf	_i,f
  5138  025E  3011               	movlw	17
  5139  025F  025B               	subwf	_i,w
  5140  0260  1803               	btfsc	3,0
  5141  0261  2AA7               	goto	l5534
  5142  0262                     l5528:	
  5143                           
  5144                           ;main.c: 73: writebuffer[i] = pixelbuffer[i/2] & 0xFF;
  5145  0262  3002               	movlw	2
  5146  0263  00A1               	movwf	___awdiv@divisor
  5147  0264  3000               	movlw	0
  5148  0265  00A2               	movwf	___awdiv@divisor+1
  5149  0266  085B               	movf	_i,w
  5150  0267  00B6               	movwf	??_writeDisplay
  5151  0268  01B7               	clrf	??_writeDisplay+1
  5152  0269  0836               	movf	??_writeDisplay,w
  5153  026A  00A3               	movwf	___awdiv@dividend
  5154  026B  0837               	movf	??_writeDisplay+1,w
  5155  026C  00A4               	movwf	___awdiv@dividend+1
  5156  026D  3182  22B3  3182   	fcall	___awdiv
  5157  0270  0020               	movlb	0	; select bank0
  5158  0271  0821               	movf	?___awdiv,w
  5159  0272  0709               	addwf	9,w
  5160  0273  3EBD               	addlw	(low (_pixelbuffer| 0))& (0+255)
  5161  0274  0086               	movwf	6
  5162  0275  0187               	clrf	7
  5163  0276  0801               	movf	1,w
  5164  0277  00B8               	movwf	??_writeDisplay+2
  5165  0278  085B               	movf	_i,w
  5166  0279  3ECD               	addlw	(low (_writebuffer| 0))& (0+255)
  5167  027A  0086               	movwf	6
  5168  027B  0187               	clrf	7
  5169  027C  0838               	movf	??_writeDisplay+2,w
  5170  027D  0081               	movwf	1
  5171                           
  5172                           ;main.c: 74: writebuffer[i + 1] = pixelbuffer[i/2] >> 8;
  5173  027E  3002               	movlw	2
  5174  027F  00A1               	movwf	___awdiv@divisor
  5175  0280  3000               	movlw	0
  5176  0281  00A2               	movwf	___awdiv@divisor+1
  5177  0282  085B               	movf	_i,w
  5178  0283  00B6               	movwf	??_writeDisplay
  5179  0284  01B7               	clrf	??_writeDisplay+1
  5180  0285  0836               	movf	??_writeDisplay,w
  5181  0286  00A3               	movwf	___awdiv@dividend
  5182  0287  0837               	movf	??_writeDisplay+1,w
  5183  0288  00A4               	movwf	___awdiv@dividend+1
  5184  0289  3182  22B3  3182   	fcall	___awdiv
  5185  028C  0020               	movlb	0	; select bank0
  5186  028D  0821               	movf	?___awdiv,w
  5187  028E  0709               	addwf	9,w
  5188  028F  3EBD               	addlw	(low (_pixelbuffer| 0))& (0+255)
  5189  0290  0086               	movwf	6
  5190  0291  0187               	clrf	7
  5191  0292  3F40               	moviw [0]fsr1
  5192  0293  00B8               	movwf	??_writeDisplay+2
  5193  0294  3F41               	moviw [1]fsr1
  5194  0295  00B9               	movwf	??_writeDisplay+3
  5195  0296  0839               	movf	??_writeDisplay+3,w
  5196  0297  00BA               	movwf	??_writeDisplay+4
  5197  0298  085B               	movf	_i,w
  5198  0299  3E01               	addlw	1
  5199  029A  3ECD               	addlw	(low (_writebuffer| 0))& (0+255)
  5200  029B  0086               	movwf	6
  5201  029C  0187               	clrf	7
  5202  029D  083A               	movf	??_writeDisplay+4,w
  5203  029E  0081               	movwf	1
  5204  029F  3002               	movlw	2
  5205  02A0  00B6               	movwf	??_writeDisplay
  5206  02A1  0836               	movf	??_writeDisplay,w
  5207  02A2  07DB               	addwf	_i,f
  5208  02A3  3011               	movlw	17
  5209  02A4  025B               	subwf	_i,w
  5210  02A5  1C03               	skipc
  5211  02A6  2A62               	goto	l5528
  5212  02A7                     l5534:	
  5213                           
  5214                           ;main.c: 75: }
  5215                           ;main.c: 76: i2c_writeNBytes(0x70, writebuffer, 17);
  5216  02A7  30CD               	movlw	(low (_writebuffer| 0))& (0+255)
  5217  02A8  00B6               	movwf	??_writeDisplay
  5218  02A9  0836               	movf	??_writeDisplay,w
  5219  02AA  00B2               	movwf	i2c_writeNBytes@data
  5220  02AB  3011               	movlw	17
  5221  02AC  00B3               	movwf	i2c_writeNBytes@len
  5222  02AD  3000               	movlw	0
  5223  02AE  00B4               	movwf	i2c_writeNBytes@len+1
  5224  02AF  3070               	movlw	112
  5225  02B0  3186  2660         	fcall	_i2c_writeNBytes
  5226  02B2  0008               	return
  5227  02B3                     __end_of_writeDisplay:	
  5228                           
  5229                           	psect	text9
  5230  0660                     __ptext9:	
  5231 ;; *************** function _i2c_writeNBytes *****************
  5232 ;; Defined at:
  5233 ;;		line 48 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  5234 ;; Parameters:    Size  Location     Type
  5235 ;;  address         1    wreg     unsigned char 
  5236 ;;  data            1   18[BANK0 ] PTR void 
  5237 ;;		 -> writebuffer(17), 
  5238 ;;  len             2   19[BANK0 ] unsigned int 
  5239 ;; Auto vars:     Size  Location     Type
  5240 ;;  address         1   21[BANK0 ] unsigned char 
  5241 ;; Return value:  Size  Location     Type
  5242 ;;                  1    wreg      void 
  5243 ;; Registers used:
  5244 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5245 ;; Tracked objects:
  5246 ;;		On entry : 0/0
  5247 ;;		On exit  : 0/0
  5248 ;;		Unchanged: 0/0
  5249 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5250 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5251 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5252 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5253 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5254 ;;Total ram usage:        4 bytes
  5255 ;; Hardware stack levels used:    1
  5256 ;; Hardware stack levels required when called:   14
  5257 ;; This function calls:
  5258 ;;		_i2c_close
  5259 ;;		_i2c_masterWrite
  5260 ;;		_i2c_open
  5261 ;;		_i2c_setAddressNACKCallback
  5262 ;;		_i2c_setBuffer
  5263 ;; This function is called by:
  5264 ;;		_writeDisplay
  5265 ;;		_initializeDisplay
  5266 ;; This function uses a non-reentrant model
  5267 ;;
  5268                           
  5269                           
  5270                           ;psect for function _i2c_writeNBytes
  5271  0660                     _i2c_writeNBytes:	
  5272                           
  5273                           ;incstack = 0
  5274                           ; Regs used in _i2c_writeNBytes: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5275                           ;i2c_writeNBytes@address stored from wreg
  5276  0660  0020               	movlb	0	; select bank0
  5277  0661  00B5               	movwf	i2c_writeNBytes@address
  5278  0662                     l5504:	
  5279                           ;i2c_simple_master.c: 50: while(!i2c_open(address));
  5280                           
  5281  0662  0020               	movlb	0	; select bank0
  5282  0663  0835               	movf	i2c_writeNBytes@address,w
  5283  0664  3183  23A6  3186   	fcall	_i2c_open
  5284  0667  3A00               	xorlw	0
  5285  0668  1903               	skipnz
  5286  0669  2E62               	goto	l5504
  5287                           
  5288                           ;i2c_simple_master.c: 51: i2c_setBuffer(data,len);
  5289  066A  0020               	movlb	0	; select bank0
  5290  066B  0834               	movf	i2c_writeNBytes@len+1,w
  5291  066C  00A2               	movwf	i2c_setBuffer@bufferSize+1
  5292  066D  0833               	movf	i2c_writeNBytes@len,w
  5293  066E  00A1               	movwf	i2c_setBuffer@bufferSize
  5294  066F  0832               	movf	i2c_writeNBytes@data,w
  5295  0670  318F  277C  3186   	fcall	_i2c_setBuffer
  5296                           
  5297                           ;i2c_simple_master.c: 52: i2c_setAddressNACKCallback(i2c_restartWrite,(0));
  5298  0673  30EB               	movlw	low _i2c_restartWrite
  5299  0674  0020               	movlb	0	; select bank0
  5300  0675  00A6               	movwf	i2c_setAddressNACKCallback@cb
  5301  0676  300D               	movlw	high _i2c_restartWrite
  5302  0677  00A7               	movwf	i2c_setAddressNACKCallback@cb+1
  5303  0678  01A8               	clrf	i2c_setAddressNACKCallback@p
  5304  0679  318F  271D  3186   	fcall	_i2c_setAddressNACKCallback
  5305                           
  5306                           ;i2c_simple_master.c: 53: i2c_masterWrite();
  5307  067C  318D  25C0  3186   	fcall	_i2c_masterWrite
  5308  067F                     l5512:	
  5309                           ;i2c_simple_master.c: 54: while(I2C_BUSY == i2c_close());
  5310                           
  5311  067F  3187  27D7  3186   	fcall	_i2c_close
  5312  0682  3A01               	xorlw	1
  5313  0683  1D03               	btfss	3,2
  5314  0684  0008               	return
  5315  0685  2E7F               	goto	l5512
  5316  0686                     __end_of_i2c_writeNBytes:	
  5317                           
  5318                           	psect	text10
  5319  0F1D                     __ptext10:	
  5320 ;; *************** function _i2c_setAddressNACKCallback *****************
  5321 ;; Defined at:
  5322 ;;		line 99 in file "mcc_generated_files/drivers/i2c_master.c"
  5323 ;; Parameters:    Size  Location     Type
  5324 ;;  cb              2    6[BANK0 ] PTR FTN(PTR void ,)enum 
  5325 ;;		 -> i2c_restartWrite(1), 
  5326 ;;  p               1    8[BANK0 ] PTR void 
  5327 ;;		 -> NULL(0), 
  5328 ;; Auto vars:     Size  Location     Type
  5329 ;;		None
  5330 ;; Return value:  Size  Location     Type
  5331 ;;                  1    wreg      void 
  5332 ;; Registers used:
  5333 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5334 ;; Tracked objects:
  5335 ;;		On entry : 0/0
  5336 ;;		On exit  : 0/0
  5337 ;;		Unchanged: 0/0
  5338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5339 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5340 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5341 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5342 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5343 ;;Total ram usage:        4 bytes
  5344 ;; Hardware stack levels used:    1
  5345 ;; Hardware stack levels required when called:    7
  5346 ;; This function calls:
  5347 ;;		_setCallBack
  5348 ;; This function is called by:
  5349 ;;		_i2c_writeNBytes
  5350 ;;		_i2c_write1ByteRegister
  5351 ;;		_i2c_read1ByteRegister
  5352 ;;		_i2c_read2ByteRegister
  5353 ;;		_i2c_write2ByteRegister
  5354 ;;		_i2c_readDataBlock
  5355 ;; This function uses a non-reentrant model
  5356 ;;
  5357                           
  5358                           
  5359                           ;psect for function _i2c_setAddressNACKCallback
  5360  0F1D                     _i2c_setAddressNACKCallback:	
  5361                           
  5362                           ;i2c_master.c: 101: setCallBack(i2c_addressNACK,cb,p);
  5363                           
  5364                           ;incstack = 0
  5365                           ; Regs used in _i2c_setAddressNACKCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  5366  0F1D  0020               	movlb	0	; select bank0
  5367  0F1E  0827               	movf	i2c_setAddressNACKCallback@cb+1,w
  5368  0F1F  00A2               	movwf	setCallBack@cb+1
  5369  0F20  0826               	movf	i2c_setAddressNACKCallback@cb,w
  5370  0F21  00A1               	movwf	setCallBack@cb
  5371  0F22  0828               	movf	i2c_setAddressNACKCallback@p,w
  5372  0F23  00A9               	movwf	??_i2c_setAddressNACKCallback
  5373  0F24  0829               	movf	??_i2c_setAddressNACKCallback,w
  5374  0F25  00A3               	movwf	setCallBack@p
  5375  0F26  3002               	movlw	2
  5376  0F27  3186  26AC         	fcall	_setCallBack
  5377  0F29  0008               	return
  5378  0F2A                     __end_of_i2c_setAddressNACKCallback:	
  5379                           
  5380                           	psect	text11
  5381  03A6                     __ptext11:	
  5382 ;; *************** function _i2c_open *****************
  5383 ;; Defined at:
  5384 ;;		line 116 in file "mcc_generated_files/drivers/i2c_master.c"
  5385 ;; Parameters:    Size  Location     Type
  5386 ;;  address         1    wreg     unsigned char 
  5387 ;; Auto vars:     Size  Location     Type
  5388 ;;  address         1    4[BANK0 ] unsigned char 
  5389 ;;  ret             1    5[BANK0 ] enum E12166
  5390 ;; Return value:  Size  Location     Type
  5391 ;;                  1    wreg      enum E92
  5392 ;; Registers used:
  5393 ;;		wreg, status,2, status,0, pclath, cstack
  5394 ;; Tracked objects:
  5395 ;;		On entry : 0/0
  5396 ;;		On exit  : 0/0
  5397 ;;		Unchanged: 0/0
  5398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5399 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5400 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5401 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5402 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5403 ;;Total ram usage:        3 bytes
  5404 ;; Hardware stack levels used:    1
  5405 ;; Hardware stack levels required when called:    7
  5406 ;; This function calls:
  5407 ;;		_i2c_driver_open
  5408 ;;		_i2c_driver_setBusCollisionISR
  5409 ;;		_i2c_driver_setI2cISR
  5410 ;;		_mssp_clearIRQ
  5411 ;; This function is called by:
  5412 ;;		_i2c_writeNBytes
  5413 ;;		_i2c_write1ByteRegister
  5414 ;;		_i2c_read1ByteRegister
  5415 ;;		_i2c_read2ByteRegister
  5416 ;;		_i2c_write2ByteRegister
  5417 ;;		_i2c_readDataBlock
  5418 ;;		_i2c_readNBytes
  5419 ;; This function uses a non-reentrant model
  5420 ;;
  5421                           
  5422                           
  5423                           ;psect for function _i2c_open
  5424  03A6                     _i2c_open:	
  5425                           
  5426                           ;incstack = 0
  5427                           ; Regs used in _i2c_open: [wreg+status,2+status,0+pclath+cstack]
  5428                           ;i2c_open@address stored from wreg
  5429  03A6  0020               	movlb	0	; select bank0
  5430  03A7  00A4               	movwf	i2c_open@address
  5431                           
  5432                           ;i2c_master.c: 118: i2c_error_t ret = I2C_BUSY;
  5433  03A8  01A5               	clrf	i2c_open@ret
  5434  03A9  0AA5               	incf	i2c_open@ret,f
  5435                           
  5436                           ;i2c_master.c: 120: if(!i2c_status.inUse)
  5437  03AA  0021               	movlb	1	; select bank1
  5438  03AB  18A0               	btfsc	_i2c_status^(0+128),1
  5439  03AC  2BF1               	goto	l574
  5440                           
  5441                           ;i2c_master.c: 121: {
  5442                           ;i2c_master.c: 122: i2c_status.address = address;
  5443  03AD  0020               	movlb	0	; select bank0
  5444  03AE  0824               	movf	i2c_open@address,w
  5445  03AF  00A3               	movwf	??_i2c_open
  5446  03B0  0823               	movf	??_i2c_open,w
  5447  03B1  0021               	movlb	1	; select bank1
  5448  03B2  00A1               	movwf	(_i2c_status^(0+128)+1)
  5449                           
  5450                           ;i2c_master.c: 123: i2c_status.busy = 0;
  5451  03B3  1020               	bcf	_i2c_status^(0+128),0
  5452                           
  5453                           ;i2c_master.c: 124: i2c_status.inUse = 1;
  5454  03B4  14A0               	bsf	_i2c_status^(0+128),1
  5455                           
  5456                           ;i2c_master.c: 125: i2c_status.addressNACKCheck = 0;
  5457  03B5  11A0               	bcf	_i2c_status^(0+128),3
  5458                           
  5459                           ;i2c_master.c: 126: i2c_status.state = I2C_RESET;
  5460  03B6  300E               	movlw	14
  5461  03B7  0020               	movlb	0	; select bank0
  5462  03B8  00A3               	movwf	??_i2c_open
  5463  03B9  0823               	movf	??_i2c_open,w
  5464  03BA  0021               	movlb	1	; select bank1
  5465  03BB  00A9               	movwf	(_i2c_status^(0+128)+9)
  5466                           
  5467                           ;i2c_master.c: 127: i2c_status.time_out_value = 500;
  5468  03BC  30F4               	movlw	244
  5469  03BD  00A7               	movwf	(_i2c_status^(0+128)+7)
  5470  03BE  3001               	movlw	1
  5471  03BF  00A8               	movwf	(_i2c_status^(0+128)+8)
  5472                           
  5473                           ;i2c_master.c: 128: i2c_status.bufferFree = 1;
  5474  03C0  1520               	bsf	_i2c_status^(0+128),2
  5475                           
  5476                           ;i2c_master.c: 131: i2c_status.callbackTable[i2c_dataComplete]=returnStop;
  5477  03C1  30F1               	movlw	low _returnStop
  5478  03C2  00AB               	movwf	(low ((_i2c_status| 0+11)))^(0+128)
  5479  03C3  300D               	movlw	high _returnStop
  5480  03C4  00AC               	movwf	((low ((_i2c_status| 0+11)))^(0+128)+1)
  5481                           
  5482                           ;i2c_master.c: 132: i2c_status.callbackPayload[i2c_dataComplete] = (0);
  5483  03C5  01B7               	clrf	(low ((_i2c_status| 0+23)))^(0+128)
  5484                           
  5485                           ;i2c_master.c: 133: i2c_status.callbackTable[i2c_writeCollision]=returnStop;
  5486  03C6  30F1               	movlw	low _returnStop
  5487  03C7  00AD               	movwf	(low ((_i2c_status| 0+13)))^(0+128)
  5488  03C8  300D               	movlw	high _returnStop
  5489  03C9  00AE               	movwf	((low ((_i2c_status| 0+13)))^(0+128)+1)
  5490                           
  5491                           ;i2c_master.c: 134: i2c_status.callbackPayload[i2c_writeCollision] = (0);
  5492  03CA  01B8               	clrf	(low ((_i2c_status| 0+24)))^(0+128)
  5493                           
  5494                           ;i2c_master.c: 135: i2c_status.callbackTable[i2c_addressNACK]=returnStop;
  5495  03CB  30F1               	movlw	low _returnStop
  5496  03CC  00AF               	movwf	(low ((_i2c_status| 0+15)))^(0+128)
  5497  03CD  300D               	movlw	high _returnStop
  5498  03CE  00B0               	movwf	((low ((_i2c_status| 0+15)))^(0+128)+1)
  5499                           
  5500                           ;i2c_master.c: 136: i2c_status.callbackPayload[i2c_addressNACK] = (0);
  5501  03CF  01B9               	clrf	(low ((_i2c_status| 0+25)))^(0+128)
  5502                           
  5503                           ;i2c_master.c: 137: i2c_status.callbackTable[i2c_dataNACK]=returnStop;
  5504  03D0  30F1               	movlw	low _returnStop
  5505  03D1  00B1               	movwf	(low ((_i2c_status| 0+17)))^(0+128)
  5506  03D2  300D               	movlw	high _returnStop
  5507  03D3  00B2               	movwf	((low ((_i2c_status| 0+17)))^(0+128)+1)
  5508                           
  5509                           ;i2c_master.c: 138: i2c_status.callbackPayload[i2c_dataNACK] = (0);
  5510  03D4  01BA               	clrf	(low ((_i2c_status| 0+26)))^(0+128)
  5511                           
  5512                           ;i2c_master.c: 139: i2c_status.callbackTable[i2c_timeOut]=returnReset;
  5513  03D5  30F7               	movlw	low _returnReset
  5514  03D6  00B3               	movwf	(low ((_i2c_status| 0+19)))^(0+128)
  5515  03D7  300D               	movlw	high _returnReset
  5516  03D8  00B4               	movwf	((low ((_i2c_status| 0+19)))^(0+128)+1)
  5517                           
  5518                           ;i2c_master.c: 140: i2c_status.callbackPayload[i2c_timeOut] = (0);
  5519  03D9  01BB               	clrf	(low ((_i2c_status| 0+27)))^(0+128)
  5520                           
  5521                           ;i2c_master.c: 142: i2c_driver_open();
  5522  03DA  318E  2690  3183   	fcall	_i2c_driver_open
  5523                           
  5524                           ;i2c_master.c: 143: mssp_clearIRQ();
  5525  03DD  318D  257C  3183   	fcall	_mssp_clearIRQ
  5526                           
  5527                           ;i2c_master.c: 145: i2c_driver_setBusCollisionISR(i2c_busCollisionISR);
  5528  03E0  3067               	movlw	low _i2c_busCollisionISR
  5529  03E1  0020               	movlb	0	; select bank0
  5530  03E2  00A1               	movwf	i2c_driver_setBusCollisionISR@f
  5531  03E3  300D               	movlw	high _i2c_busCollisionISR
  5532  03E4  00A2               	movwf	i2c_driver_setBusCollisionISR@f+1
  5533  03E5  318E  2603  3183   	fcall	_i2c_driver_setBusCollisionISR
  5534                           
  5535                           ;i2c_master.c: 146: i2c_driver_setI2cISR(i2c_ISR);
  5536  03E8  3086               	movlw	low _i2c_ISR
  5537  03E9  0020               	movlb	0	; select bank0
  5538  03EA  00A1               	movwf	i2c_driver_setI2cISR@f
  5539  03EB  3006               	movlw	high _i2c_ISR
  5540  03EC  00A2               	movwf	i2c_driver_setI2cISR@f+1
  5541  03ED  318E  2609         	fcall	_i2c_driver_setI2cISR
  5542                           
  5543                           ;i2c_master.c: 151: ret = I2C_NOERR;
  5544  03EF  0020               	movlb	0	; select bank0
  5545  03F0  01A5               	clrf	i2c_open@ret
  5546  03F1                     l574:	
  5547                           
  5548                           ;i2c_master.c: 152: }
  5549                           ;i2c_master.c: 153: return ret;
  5550  03F1  0020               	movlb	0	; select bank0
  5551  03F2  0825               	movf	i2c_open@ret,w
  5552  03F3  0008               	return
  5553  03F4                     __end_of_i2c_open:	
  5554                           
  5555                           	psect	text12
  5556  0E09                     __ptext12:	
  5557 ;; *************** function _i2c_driver_setI2cISR *****************
  5558 ;; Defined at:
  5559 ;;		line 262 in file "mcc_generated_files/i2c_driver.c"
  5560 ;; Parameters:    Size  Location     Type
  5561 ;;  f               2    1[BANK0 ] PTR void 
  5562 ;;		 -> i2c_ISR(1), 
  5563 ;; Auto vars:     Size  Location     Type
  5564 ;;		None
  5565 ;; Return value:  Size  Location     Type
  5566 ;;                  1    wreg      void 
  5567 ;; Registers used:
  5568 ;;		wreg
  5569 ;; Tracked objects:
  5570 ;;		On entry : 0/0
  5571 ;;		On exit  : 0/0
  5572 ;;		Unchanged: 0/0
  5573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5574 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5575 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5576 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5577 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5578 ;;Total ram usage:        2 bytes
  5579 ;; Hardware stack levels used:    1
  5580 ;; Hardware stack levels required when called:    6
  5581 ;; This function calls:
  5582 ;;		Nothing
  5583 ;; This function is called by:
  5584 ;;		_i2c_open
  5585 ;; This function uses a non-reentrant model
  5586 ;;
  5587                           
  5588                           
  5589                           ;psect for function _i2c_driver_setI2cISR
  5590  0E09                     _i2c_driver_setI2cISR:	
  5591                           
  5592                           ;i2c_driver.c: 263: i2c_driver_i2cISR = f;
  5593                           
  5594                           ;incstack = 0
  5595                           ; Regs used in _i2c_driver_setI2cISR: [wreg]
  5596  0E09  0020               	movlb	0	; select bank0
  5597  0E0A  0822               	movf	i2c_driver_setI2cISR@f+1,w
  5598  0E0B  00D6               	movwf	_i2c_driver_i2cISR+1
  5599  0E0C  0821               	movf	i2c_driver_setI2cISR@f,w
  5600  0E0D  00D5               	movwf	_i2c_driver_i2cISR
  5601  0E0E  0008               	return
  5602  0E0F                     __end_of_i2c_driver_setI2cISR:	
  5603                           
  5604                           	psect	text13
  5605  0E03                     __ptext13:	
  5606 ;; *************** function _i2c_driver_setBusCollisionISR *****************
  5607 ;; Defined at:
  5608 ;;		line 258 in file "mcc_generated_files/i2c_driver.c"
  5609 ;; Parameters:    Size  Location     Type
  5610 ;;  f               2    1[BANK0 ] PTR void 
  5611 ;;		 -> i2c_busCollisionISR(1), 
  5612 ;; Auto vars:     Size  Location     Type
  5613 ;;		None
  5614 ;; Return value:  Size  Location     Type
  5615 ;;                  1    wreg      void 
  5616 ;; Registers used:
  5617 ;;		wreg
  5618 ;; Tracked objects:
  5619 ;;		On entry : 0/0
  5620 ;;		On exit  : 0/0
  5621 ;;		Unchanged: 0/0
  5622 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5623 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5624 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5625 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5626 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5627 ;;Total ram usage:        2 bytes
  5628 ;; Hardware stack levels used:    1
  5629 ;; Hardware stack levels required when called:    6
  5630 ;; This function calls:
  5631 ;;		Nothing
  5632 ;; This function is called by:
  5633 ;;		_i2c_open
  5634 ;; This function uses a non-reentrant model
  5635 ;;
  5636                           
  5637                           
  5638                           ;psect for function _i2c_driver_setBusCollisionISR
  5639  0E03                     _i2c_driver_setBusCollisionISR:	
  5640                           
  5641                           ;i2c_driver.c: 259: i2c_driver_busCollisionISR = f;
  5642                           
  5643                           ;incstack = 0
  5644                           ; Regs used in _i2c_driver_setBusCollisionISR: [wreg]
  5645  0E03  0020               	movlb	0	; select bank0
  5646  0E04  0822               	movf	i2c_driver_setBusCollisionISR@f+1,w
  5647  0E05  00D8               	movwf	_i2c_driver_busCollisionISR+1
  5648  0E06  0821               	movf	i2c_driver_setBusCollisionISR@f,w
  5649  0E07  00D7               	movwf	_i2c_driver_busCollisionISR
  5650  0E08  0008               	return
  5651  0E09                     __end_of_i2c_driver_setBusCollisionISR:	
  5652                           
  5653                           	psect	text14
  5654  0E90                     __ptext14:	
  5655 ;; *************** function _i2c_driver_open *****************
  5656 ;; Defined at:
  5657 ;;		line 83 in file "mcc_generated_files/i2c_driver.c"
  5658 ;; Parameters:    Size  Location     Type
  5659 ;;		None
  5660 ;; Auto vars:     Size  Location     Type
  5661 ;;		None
  5662 ;; Return value:  Size  Location     Type
  5663 ;;		None               void
  5664 ;; Registers used:
  5665 ;;		wreg, status,2
  5666 ;; Tracked objects:
  5667 ;;		On entry : 0/0
  5668 ;;		On exit  : 0/0
  5669 ;;		Unchanged: 0/0
  5670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5671 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5672 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5673 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5674 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5675 ;;Total ram usage:        0 bytes
  5676 ;; Hardware stack levels used:    1
  5677 ;; Hardware stack levels required when called:    6
  5678 ;; This function calls:
  5679 ;;		Nothing
  5680 ;; This function is called by:
  5681 ;;		_i2c_open
  5682 ;; This function uses a non-reentrant model
  5683 ;;
  5684                           
  5685                           
  5686                           ;psect for function _i2c_driver_open
  5687  0E90                     _i2c_driver_open:	
  5688                           
  5689                           ;i2c_driver.c: 85: if(!SSP1CON1bits.SSPEN)
  5690                           
  5691                           ;incstack = 0
  5692                           ; Regs used in _i2c_driver_open: [wreg+status,2]
  5693  0E90  0024               	movlb	4	; select bank4
  5694  0E91  1A95               	btfsc	21,5	;volatile
  5695  0E92  0008               	return
  5696                           
  5697                           ;i2c_driver.c: 86: {
  5698                           ;i2c_driver.c: 87: SSP1STAT = 0x00;
  5699  0E93  0194               	clrf	20	;volatile
  5700                           
  5701                           ;i2c_driver.c: 88: SSP1CON1 = 0x28;
  5702  0E94  3028               	movlw	40
  5703  0E95  0095               	movwf	21	;volatile
  5704                           
  5705                           ;i2c_driver.c: 89: SSP1CON2 = 0x00;
  5706  0E96  0196               	clrf	22	;volatile
  5707                           
  5708                           ;i2c_driver.c: 90: SSP1ADD = 0x4f;
  5709  0E97  304F               	movlw	79
  5710  0E98  0092               	movwf	18	;volatile
  5711                           
  5712                           ;i2c_driver.c: 93: else
  5713                           ;i2c_driver.c: 94: return 0;
  5714                           ;	Return value of _i2c_driver_open is never used
  5715                           
  5716                           ;i2c_driver.c: 92: }
  5717                           
  5718                           ;i2c_driver.c: 91: return 1;
  5719                           ;	Return value of _i2c_driver_open is never used
  5720  0E99  0008               	return
  5721  0E9A                     __end_of_i2c_driver_open:	
  5722                           
  5723                           	psect	text15
  5724  0DC0                     __ptext15:	
  5725 ;; *************** function _i2c_masterWrite *****************
  5726 ;; Defined at:
  5727 ;;		line 222 in file "mcc_generated_files/drivers/i2c_master.c"
  5728 ;; Parameters:    Size  Location     Type
  5729 ;;		None
  5730 ;; Auto vars:     Size  Location     Type
  5731 ;;		None
  5732 ;; Return value:  Size  Location     Type
  5733 ;;                  1    wreg      enum E92
  5734 ;; Registers used:
  5735 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5736 ;; Tracked objects:
  5737 ;;		On entry : 0/0
  5738 ;;		On exit  : 0/0
  5739 ;;		Unchanged: 0/0
  5740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5741 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5742 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5743 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5744 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5745 ;;Total ram usage:        0 bytes
  5746 ;; Hardware stack levels used:    1
  5747 ;; Hardware stack levels required when called:   13
  5748 ;; This function calls:
  5749 ;;		_i2c_masterOperation
  5750 ;; This function is called by:
  5751 ;;		_i2c_writeNBytes
  5752 ;;		_i2c_write1ByteRegister
  5753 ;;		_i2c_read1ByteRegister
  5754 ;;		_i2c_read2ByteRegister
  5755 ;;		_i2c_write2ByteRegister
  5756 ;;		_i2c_readDataBlock
  5757 ;; This function uses a non-reentrant model
  5758 ;;
  5759                           
  5760                           
  5761                           ;psect for function _i2c_masterWrite
  5762  0DC0                     _i2c_masterWrite:	
  5763                           
  5764                           ;i2c_master.c: 224: return i2c_masterOperation(0);
  5765                           ;	Return value of _i2c_masterWrite is never used
  5766                           
  5767                           ;incstack = 0
  5768                           ; Regs used in _i2c_masterWrite: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5769  0DC0  3000               	movlw	0
  5770  0DC1  3186  26D1         	fcall	_i2c_masterOperation
  5771  0DC3  0008               	return
  5772  0DC4                     __end_of_i2c_masterWrite:	
  5773                           
  5774                           	psect	text16
  5775  06D1                     __ptext16:	
  5776 ;; *************** function _i2c_masterOperation *****************
  5777 ;; Defined at:
  5778 ;;		line 193 in file "mcc_generated_files/drivers/i2c_master.c"
  5779 ;; Parameters:    Size  Location     Type
  5780 ;;  read            1    wreg     unsigned char 
  5781 ;; Auto vars:     Size  Location     Type
  5782 ;;  read            1   16[BANK0 ] unsigned char 
  5783 ;;  ret             1   17[BANK0 ] enum E12166
  5784 ;; Return value:  Size  Location     Type
  5785 ;;                  1    wreg      enum E12166
  5786 ;; Registers used:
  5787 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5788 ;; Tracked objects:
  5789 ;;		On entry : 0/0
  5790 ;;		On exit  : 0/0
  5791 ;;		Unchanged: 0/0
  5792 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5793 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5794 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5795 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5796 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5797 ;;Total ram usage:        3 bytes
  5798 ;; Hardware stack levels used:    1
  5799 ;; Hardware stack levels required when called:   12
  5800 ;; This function calls:
  5801 ;;		_i2c_driver_start
  5802 ;;		_i2c_poller
  5803 ;;		_mssp_IRQisEnabled
  5804 ;; This function is called by:
  5805 ;;		_i2c_masterWrite
  5806 ;;		_i2c_masterRead
  5807 ;; This function uses a non-reentrant model
  5808 ;;
  5809                           
  5810                           
  5811                           ;psect for function _i2c_masterOperation
  5812  06D1                     _i2c_masterOperation:	
  5813                           
  5814                           ;incstack = 0
  5815                           ; Regs used in _i2c_masterOperation: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5816                           ;i2c_masterOperation@read stored from wreg
  5817  06D1  0020               	movlb	0	; select bank0
  5818  06D2  00B0               	movwf	i2c_masterOperation@read
  5819                           
  5820                           ;i2c_master.c: 195: i2c_error_t ret = I2C_BUSY;
  5821  06D3  01B1               	clrf	i2c_masterOperation@ret
  5822  06D4  0AB1               	incf	i2c_masterOperation@ret,f
  5823                           
  5824                           ;i2c_master.c: 196: if(!i2c_status.busy)
  5825  06D5  0021               	movlb	1	; select bank1
  5826  06D6  1820               	btfsc	_i2c_status^(0+128),0
  5827  06D7  2EF2               	goto	l5458
  5828                           
  5829                           ;i2c_master.c: 197: {
  5830                           ;i2c_master.c: 198: i2c_status.busy = 1;
  5831  06D8  1420               	bsf	_i2c_status^(0+128),0
  5832                           
  5833                           ;i2c_master.c: 199: ret = I2C_NOERR;
  5834  06D9  0020               	movlb	0	; select bank0
  5835  06DA  01B1               	clrf	i2c_masterOperation@ret
  5836                           
  5837                           ;i2c_master.c: 201: if(read)
  5838  06DB  0830               	movf	i2c_masterOperation@read,w
  5839  06DC  1903               	btfsc	3,2
  5840  06DD  2EE2               	goto	l5452
  5841                           
  5842                           ;i2c_master.c: 202: {
  5843                           ;i2c_master.c: 203: i2c_status.state = I2C_SEND_ADR_READ;
  5844  06DE  0021               	movlb	1	; select bank1
  5845  06DF  01A9               	clrf	(_i2c_status^(0+128)+9)
  5846  06E0  0AA9               	incf	(_i2c_status^(0+128)+9),f
  5847                           
  5848                           ;i2c_master.c: 204: }
  5849  06E1  2EE8               	goto	l5454
  5850  06E2                     l5452:	
  5851                           
  5852                           ;i2c_master.c: 205: else
  5853                           ;i2c_master.c: 206: {
  5854                           ;i2c_master.c: 207: i2c_status.state = I2C_SEND_ADR_WRITE;
  5855  06E2  3002               	movlw	2
  5856  06E3  0020               	movlb	0	; select bank0
  5857  06E4  00AF               	movwf	??_i2c_masterOperation
  5858  06E5  082F               	movf	??_i2c_masterOperation,w
  5859  06E6  0021               	movlb	1	; select bank1
  5860  06E7  00A9               	movwf	(_i2c_status^(0+128)+9)
  5861  06E8                     l5454:	
  5862                           
  5863                           ;i2c_master.c: 208: }
  5864                           ;i2c_master.c: 209: i2c_driver_start();
  5865  06E8  318D  2582  3186   	fcall	_i2c_driver_start
  5866                           
  5867                           ;i2c_master.c: 211: if(! mssp_IRQisEnabled())
  5868  06EB  318E  2686  3186   	fcall	_mssp_IRQisEnabled
  5869  06EE  1803               	btfsc	3,0
  5870  06EF  2EF2               	goto	l5458
  5871                           
  5872                           ;i2c_master.c: 212: i2c_poller();
  5873  06F0  318E  26BB         	fcall	_i2c_poller
  5874  06F2                     l5458:	
  5875                           
  5876                           ;i2c_master.c: 213: }
  5877                           ;i2c_master.c: 214: return ret;
  5878  06F2  0020               	movlb	0	; select bank0
  5879  06F3  0831               	movf	i2c_masterOperation@ret,w
  5880  06F4  0008               	return
  5881  06F5                     __end_of_i2c_masterOperation:	
  5882                           
  5883                           	psect	text17
  5884  0E86                     __ptext17:	
  5885 ;; *************** function _mssp_IRQisEnabled *****************
  5886 ;; Defined at:
  5887 ;;		line 43 in file "mcc_generated_files/i2c_driver.c"
  5888 ;; Parameters:    Size  Location     Type
  5889 ;;		None
  5890 ;; Auto vars:     Size  Location     Type
  5891 ;;		None
  5892 ;; Return value:  Size  Location     Type
  5893 ;;		None               void
  5894 ;; Registers used:
  5895 ;;		wreg, status,2, status,0
  5896 ;; Tracked objects:
  5897 ;;		On entry : 0/0
  5898 ;;		On exit  : 0/0
  5899 ;;		Unchanged: 0/0
  5900 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5901 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5902 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5903 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5904 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5905 ;;Total ram usage:        2 bytes
  5906 ;; Hardware stack levels used:    1
  5907 ;; Hardware stack levels required when called:    6
  5908 ;; This function calls:
  5909 ;;		Nothing
  5910 ;; This function is called by:
  5911 ;;		_i2c_masterOperation
  5912 ;; This function uses a non-reentrant model
  5913 ;;
  5914                           
  5915                           
  5916                           ;psect for function _mssp_IRQisEnabled
  5917  0E86                     _mssp_IRQisEnabled:	
  5918                           
  5919                           ;i2c_driver.c: 45: return PIE1bits.SSP1IE;
  5920                           
  5921                           ;incstack = 0
  5922                           ; Regs used in _mssp_IRQisEnabled: [wreg+status,2+status,0]
  5923  0E86  0021               	movlb	1	; select bank1
  5924  0E87  0C10               	rrf	16,w	;volatile
  5925  0E88  0020               	movlb	0	; select bank0
  5926  0E89  00A1               	movwf	??_mssp_IRQisEnabled
  5927  0E8A  0CA1               	rrf	??_mssp_IRQisEnabled,f
  5928  0E8B  0C21               	rrf	??_mssp_IRQisEnabled,w
  5929  0E8C  3901               	andlw	1
  5930  0E8D  00A2               	movwf	??_mssp_IRQisEnabled+1
  5931  0E8E  0C22               	rrf	??_mssp_IRQisEnabled+1,w
  5932  0E8F  0008               	return
  5933  0E90                     __end_of_mssp_IRQisEnabled:	
  5934                           
  5935                           	psect	text18
  5936  0EBB                     __ptext18:	
  5937 ;; *************** function _i2c_poller *****************
  5938 ;; Defined at:
  5939 ;;		line 230 in file "mcc_generated_files/drivers/i2c_master.c"
  5940 ;; Parameters:    Size  Location     Type
  5941 ;;		None
  5942 ;; Auto vars:     Size  Location     Type
  5943 ;;		None
  5944 ;; Return value:  Size  Location     Type
  5945 ;;                  1    wreg      void 
  5946 ;; Registers used:
  5947 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5948 ;; Tracked objects:
  5949 ;;		On entry : 0/0
  5950 ;;		On exit  : 0/0
  5951 ;;		Unchanged: 0/0
  5952 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5953 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5954 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5955 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5956 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5957 ;;Total ram usage:        0 bytes
  5958 ;; Hardware stack levels used:    1
  5959 ;; Hardware stack levels required when called:   11
  5960 ;; This function calls:
  5961 ;;		_i2c_ISR
  5962 ;;		_mssp_waitForEvent
  5963 ;; This function is called by:
  5964 ;;		_i2c_masterOperation
  5965 ;; This function uses a non-reentrant model
  5966 ;;
  5967                           
  5968                           
  5969                           ;psect for function _i2c_poller
  5970  0EBB                     _i2c_poller:	
  5971  0EBB                     l5440:	
  5972                           ;i2c_master.c: 232: while(i2c_status.busy)
  5973                           
  5974                           ;incstack = 0
  5975                           ; Regs used in _i2c_poller: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5976                           
  5977  0EBB  0021               	movlb	1	; select bank1
  5978  0EBC  1C20               	btfss	_i2c_status^(0+128),0
  5979  0EBD  0008               	return
  5980                           
  5981                           ;i2c_master.c: 233: {
  5982                           ;i2c_master.c: 234: mssp_waitForEvent((0));
  5983  0EBE  3000               	movlw	0
  5984  0EBF  318E  26B0  318E   	fcall	_mssp_waitForEvent
  5985                           
  5986                           ;i2c_master.c: 235: i2c_ISR();
  5987  0EC2  3186  2686  318E   	fcall	_i2c_ISR
  5988  0EC5  2EBB               	goto	l5440
  5989  0EC6                     __end_of_i2c_poller:	
  5990                           
  5991                           	psect	text19
  5992  0EB0                     __ptext19:	
  5993 ;; *************** function _mssp_waitForEvent *****************
  5994 ;; Defined at:
  5995 ;;		line 68 in file "mcc_generated_files/i2c_driver.c"
  5996 ;; Parameters:    Size  Location     Type
  5997 ;;  timeout         1    wreg     PTR unsigned int 
  5998 ;;		 -> NULL(0), 
  5999 ;; Auto vars:     Size  Location     Type
  6000 ;;  timeout         1    1[BANK0 ] PTR unsigned int 
  6001 ;;		 -> NULL(0), 
  6002 ;; Return value:  Size  Location     Type
  6003 ;;                  1    wreg      void 
  6004 ;; Registers used:
  6005 ;;		wreg
  6006 ;; Tracked objects:
  6007 ;;		On entry : 0/0
  6008 ;;		On exit  : 0/0
  6009 ;;		Unchanged: 0/0
  6010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6011 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6012 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6013 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6014 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6015 ;;Total ram usage:        1 bytes
  6016 ;; Hardware stack levels used:    1
  6017 ;; Hardware stack levels required when called:    6
  6018 ;; This function calls:
  6019 ;;		Nothing
  6020 ;; This function is called by:
  6021 ;;		_i2c_poller
  6022 ;; This function uses a non-reentrant model
  6023 ;;
  6024                           
  6025                           
  6026                           ;psect for function _mssp_waitForEvent
  6027  0EB0                     _mssp_waitForEvent:	
  6028                           
  6029                           ;i2c_driver.c: 73: if(PIR1bits.SSP1IF == 0)
  6030                           
  6031                           ;incstack = 0
  6032                           ; Regs used in _mssp_waitForEvent: [wreg]
  6033  0EB0  0020               	movlb	0	; select bank0
  6034  0EB1  1990               	btfsc	16,3	;volatile
  6035  0EB2  0008               	return
  6036  0EB3                     l284:	
  6037                           ;i2c_driver.c: 74: {
  6038                           ;i2c_driver.c: 75: while(1)
  6039                           
  6040                           
  6041                           ;i2c_driver.c: 76: {
  6042                           ;i2c_driver.c: 77: if(PIR1bits.SSP1IF) break;
  6043  0EB3  0020               	movlb	0	; select bank0
  6044  0EB4  1990               	btfsc	16,3	;volatile
  6045  0EB5  0008               	return
  6046                           
  6047                           ;i2c_driver.c: 78: _delay((unsigned long)((100)*(32000000/4000000.0)));
  6048  0EB6  30A0               	movlw	160
  6049  0EB7                     u4837:	
  6050  0EB7  3200               	nop2
  6051  0EB8  0B89               	decfsz	9,f
  6052  0EB9  2EB7               	goto	u4837
  6053  0EBA  2EB3               	goto	l284
  6054  0EBB                     __end_of_mssp_waitForEvent:	
  6055                           
  6056                           	psect	text20
  6057  0686                     __ptext20:	
  6058 ;; *************** function _i2c_ISR *****************
  6059 ;; Defined at:
  6060 ;;		line 419 in file "mcc_generated_files/drivers/i2c_master.c"
  6061 ;; Parameters:    Size  Location     Type
  6062 ;;		None
  6063 ;; Auto vars:     Size  Location     Type
  6064 ;;		None
  6065 ;; Return value:  Size  Location     Type
  6066 ;;                  1    wreg      void 
  6067 ;; Registers used:
  6068 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6069 ;; Tracked objects:
  6070 ;;		On entry : 0/0
  6071 ;;		On exit  : 0/0
  6072 ;;		Unchanged: 0/0
  6073 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6074 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6075 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6076 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6077 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6078 ;;Total ram usage:        1 bytes
  6079 ;; Hardware stack levels used:    1
  6080 ;; Hardware stack levels required when called:   10
  6081 ;; This function calls:
  6082 ;;		_do_I2C_DO_ACK
  6083 ;;		_do_I2C_DO_ADDRESS_NACK
  6084 ;;		_do_I2C_DO_NACK_RESTART
  6085 ;;		_do_I2C_DO_NACK_STOP
  6086 ;;		_do_I2C_IDLE
  6087 ;;		_do_I2C_RCEN
  6088 ;;		_do_I2C_RESET
  6089 ;;		_do_I2C_RX
  6090 ;;		_do_I2C_SEND_ADR_READ
  6091 ;;		_do_I2C_SEND_ADR_WRITE
  6092 ;;		_do_I2C_SEND_RESTART
  6093 ;;		_do_I2C_SEND_RESTART_READ
  6094 ;;		_do_I2C_SEND_RESTART_WRITE
  6095 ;;		_do_I2C_SEND_STOP
  6096 ;;		_do_I2C_TX
  6097 ;;		_do_I2C_TX_EMPTY
  6098 ;;		_i2c_driver_isNACK
  6099 ;;		_mssp_clearIRQ
  6100 ;; This function is called by:
  6101 ;;		_i2c_open
  6102 ;;		_i2c_poller
  6103 ;;		_INTERRUPT_InterruptManager
  6104 ;; This function uses a non-reentrant model
  6105 ;;
  6106                           
  6107                           
  6108                           ;psect for function _i2c_ISR
  6109  0686                     _i2c_ISR:	
  6110                           
  6111                           ;Skip over the trampoline to the duplicate function for level 1
  6112  0686  1C7E               	btfss	126,0
  6113  0687  2E8A               	goto	l5424
  6114  0688  3187  2F5C         	ljmp	i1l5720
  6115  068A                     _i2c_ISR$intlevel0:	
  6116  068A                     l5424:	
  6117                           ;incstack = 0
  6118                           ; Regs used in _i2c_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6119                           
  6120                           
  6121                           ;i2c_master.c: 421: mssp_clearIRQ();
  6122  068A  318D  257C  3186   	fcall	_mssp_clearIRQ
  6123                           
  6124                           ;i2c_master.c: 427: if(i2c_status.addressNACKCheck && i2c_driver_isNACK())
  6125  068D  0021               	movlb	1	; select bank1
  6126  068E  1DA0               	btfss	_i2c_status^(0+128),3
  6127  068F  2E9B               	goto	l5432
  6128  0690  318F  2710  3186   	fcall	_i2c_driver_isNACK
  6129  0693  1C03               	btfss	3,0
  6130  0694  2E9B               	goto	l5432
  6131                           
  6132                           ;i2c_master.c: 428: {
  6133                           ;i2c_master.c: 429: i2c_status.state = I2C_ADDRESS_NACK;
  6134  0695  300F               	movlw	15
  6135  0696  0020               	movlb	0	; select bank0
  6136  0697  00AE               	movwf	??_i2c_ISR
  6137  0698  082E               	movf	??_i2c_ISR,w
  6138  0699  0021               	movlb	1	; select bank1
  6139  069A  00A9               	movwf	(_i2c_status^(0+128)+9)
  6140  069B                     l5432:	
  6141                           
  6142                           ;i2c_master.c: 430: }
  6143                           ;i2c_master.c: 432: i2c_status.state = fsmStateTable[i2c_status.state]();
  6144  069B  0021               	movlb	1	; select bank1
  6145  069C  3529               	lslf	(_i2c_status^(0+128)+9),w
  6146  069D  3E20               	addlw	(low (_fsmStateTable| (0+256)))& (0+255)
  6147  069E  0086               	movwf	6
  6148  069F  3001               	movlw	1	; select bank2/3
  6149  06A0  0087               	movwf	7
  6150  06A1  3F41               	moviw [1]fsr1
  6151  06A2  008A               	movwf	10
  6152  06A3  3F40               	moviw [0]fsr1
  6153  06A4  000A               	callw
  6154  06A5  3186               	pagesel	$
  6155  06A6  0020               	movlb	0	; select bank0
  6156  06A7  00AE               	movwf	??_i2c_ISR
  6157  06A8  082E               	movf	??_i2c_ISR,w
  6158  06A9  0021               	movlb	1	; select bank1
  6159  06AA  00A9               	movwf	(_i2c_status^(0+128)+9)
  6160  06AB  0008               	return
  6161  06AC                     __end_of_i2c_ISR:	
  6162                           
  6163                           	psect	text21
  6164  0484                     __ptext21:	
  6165 ;; *************** function _do_I2C_RX *****************
  6166 ;; Defined at:
  6167 ;;		line 357 in file "mcc_generated_files/drivers/i2c_master.c"
  6168 ;; Parameters:    Size  Location     Type
  6169 ;;		None
  6170 ;; Auto vars:     Size  Location     Type
  6171 ;;		None
  6172 ;; Return value:  Size  Location     Type
  6173 ;;                  1    wreg      enum E12337
  6174 ;; Registers used:
  6175 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6176 ;; Tracked objects:
  6177 ;;		On entry : 0/0
  6178 ;;		On exit  : 0/0
  6179 ;;		Unchanged: 0/0
  6180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6181 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6182 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6183 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6184 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6185 ;;Total ram usage:        1 bytes
  6186 ;; Hardware stack levels used:    1
  6187 ;; Hardware stack levels required when called:    9
  6188 ;; This function calls:
  6189 ;;		Absolute function
  6190 ;;		_do_I2C_DO_NACK_RESTART
  6191 ;;		_do_I2C_DO_NACK_STOP
  6192 ;;		_i2c_driver_getRXData
  6193 ;;		_i2c_driver_sendACK
  6194 ;;		_i2c_restartWrite
  6195 ;;		_rd1RegCompleteHandler
  6196 ;;		_rd2RegCompleteHandler
  6197 ;;		_rdBlkRegCompleteHandler
  6198 ;;		_returnReset
  6199 ;;		_returnStop
  6200 ;;		_wr1RegCompleteHandler
  6201 ;;		_wr2RegCompleteHandler
  6202 ;; This function is called by:
  6203 ;;		_i2c_ISR
  6204 ;;		i1_i2c_ISR
  6205 ;; This function uses a non-reentrant model
  6206 ;;
  6207                           
  6208                           
  6209                           ;psect for function _do_I2C_RX
  6210  0484                     _do_I2C_RX:	
  6211                           
  6212                           ;Skip over the trampoline to the duplicate function for level 1
  6213  0484  1C7E               	btfss	126,0
  6214  0485  2C88               	goto	l5378
  6215  0486  3184  2CCA         	ljmp	i1l5582
  6216  0488                     _do_I2C_RX$intlevel0:	
  6217  0488                     l5378:	
  6218                           ;incstack = 0
  6219                           ; Regs used in _do_I2C_RX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6220                           
  6221                           
  6222                           ;i2c_master.c: 359: *i2c_status.data_ptr++ = i2c_driver_getRXData();
  6223  0488  318D  258E  3184   	fcall	_i2c_driver_getRXData
  6224  048B  0020               	movlb	0	; select bank0
  6225  048C  00AB               	movwf	??_do_I2C_RX
  6226  048D  0021               	movlb	1	; select bank1
  6227  048E  0822               	movf	(low ((_i2c_status| 0+2)))^(0+128),w
  6228  048F  0086               	movwf	6
  6229  0490  0187               	clrf	7
  6230  0491  0020               	movlb	0	; select bank0
  6231  0492  082B               	movf	??_do_I2C_RX,w
  6232  0493  0081               	movwf	1
  6233  0494  3001               	movlw	1
  6234  0495  00AB               	movwf	??_do_I2C_RX
  6235  0496  082B               	movf	??_do_I2C_RX,w
  6236  0497  0021               	movlb	1	; select bank1
  6237  0498  07A2               	addwf	(low ((_i2c_status| 0+2)))^(0+128),f
  6238                           
  6239                           ;i2c_master.c: 360: if(--i2c_status.data_length)
  6240  0499  3001               	movlw	1
  6241  049A  02A3               	subwf	(_i2c_status^(0+128)+3),f
  6242  049B  3000               	movlw	0
  6243  049C  3BA4               	subwfb	((_i2c_status+1)^(0+128)+3),f
  6244  049D  0823               	movf	(_i2c_status^(0+128)+3),w
  6245  049E  0424               	iorwf	((_i2c_status+1)^(0+128)+3),w
  6246  049F  1903               	btfsc	3,2
  6247  04A0  2CA5               	goto	l671
  6248                           
  6249                           ;i2c_master.c: 361: {
  6250                           ;i2c_master.c: 362: i2c_driver_sendACK();
  6251  04A1  318D  25B8         	fcall	_i2c_driver_sendACK
  6252                           
  6253                           ;i2c_master.c: 363: return I2C_RCEN;
  6254  04A3  3005               	movlw	5
  6255                           
  6256                           ;i2c_master.c: 364: }
  6257  04A4  0008               	return
  6258  04A5                     l671:	
  6259                           
  6260                           ;i2c_master.c: 365: else
  6261                           ;i2c_master.c: 366: {
  6262                           ;i2c_master.c: 367: i2c_status.bufferFree = 1;
  6263  04A5  1520               	bsf	_i2c_status^(0+128),2
  6264                           
  6265                           ;i2c_master.c: 368: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
  6266  04A6  2CAD               	goto	l5402
  6267  04A7                     l5392:	
  6268                           ;i2c_master.c: 369: {
  6269                           ;i2c_master.c: 370: case i2c_restart_write:
  6270                           
  6271                           
  6272                           ;i2c_master.c: 371: case i2c_restart_read:
  6273                           ;i2c_master.c: 372: return do_I2C_DO_NACK_RESTART();
  6274  04A7  318E  2661         	fcall	_do_I2C_DO_NACK_RESTART
  6275  04A9  0008               	return
  6276  04AA                     l5396:	
  6277                           ;i2c_master.c: 374: case i2c_continue:
  6278                           
  6279                           ;i2c_master.c: 373: default:
  6280                           
  6281                           
  6282                           ;i2c_master.c: 375: case i2c_stop:
  6283                           ;i2c_master.c: 376: return do_I2C_DO_NACK_STOP();
  6284  04AA  318E  2659         	fcall	_do_I2C_DO_NACK_STOP
  6285                           
  6286                           ;i2c_master.c: 377: }
  6287  04AC  0008               	return
  6288  04AD                     l5402:	
  6289  04AD  0021               	movlb	1	; select bank1
  6290  04AE  0837               	movf	(low ((_i2c_status| 0+23)))^(0+128),w
  6291  04AF  0020               	movlb	0	; select bank0
  6292  04B0  00AB               	movwf	??_do_I2C_RX
  6293  04B1  082B               	movf	??_do_I2C_RX,w
  6294  04B2  00AA               	movwf	returnStop@p
  6295  04B3  300B               	movlw	11
  6296  04B4  3EA0               	addlw	(low (_i2c_status| 0))& (0+255)
  6297  04B5  0086               	movwf	6
  6298  04B6  0187               	clrf	7
  6299  04B7  3F41               	moviw [1]fsr1
  6300  04B8  008A               	movwf	10
  6301  04B9  3F40               	moviw [0]fsr1
  6302  04BA  000A               	callw
  6303  04BB  3184               	pagesel	$
  6304                           
  6305                           ; Switch size 1, requested type "space"
  6306                           ; Number of cases is 4, Range of values is 1 to 4
  6307                           ; switch strategies available:
  6308                           ; Name         Instructions Cycles
  6309                           ; simple_byte           13     7 (average)
  6310                           ; direct_byte           17     9 (fixed)
  6311                           ; jumptable            263     9 (fixed)
  6312                           ;	Chosen strategy is simple_byte
  6313  04BC  3A01               	xorlw	1	; case 1
  6314  04BD  1903               	skipnz
  6315  04BE  2CAA               	goto	l5396
  6316  04BF  3A03               	xorlw	3	; case 2
  6317  04C0  1903               	skipnz
  6318  04C1  2CA7               	goto	l5392
  6319  04C2  3A01               	xorlw	1	; case 3
  6320  04C3  1903               	skipnz
  6321  04C4  2CA7               	goto	l5392
  6322  04C5  3A07               	xorlw	7	; case 4
  6323  04C6  1903               	skipnz
  6324  04C7  2CAA               	goto	l5396
  6325  04C8  2CAA               	goto	l5396
  6326  04C9  0008               	return
  6327  04CA                     __end_of_do_I2C_RX:	
  6328                           
  6329                           	psect	text22
  6330  0356                     __ptext22:	
  6331 ;; *************** function _do_I2C_TX *****************
  6332 ;; Defined at:
  6333 ;;		line 333 in file "mcc_generated_files/drivers/i2c_master.c"
  6334 ;; Parameters:    Size  Location     Type
  6335 ;;		None
  6336 ;; Auto vars:     Size  Location     Type
  6337 ;;		None
  6338 ;; Return value:  Size  Location     Type
  6339 ;;                  1    wreg      enum E12337
  6340 ;; Registers used:
  6341 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6342 ;; Tracked objects:
  6343 ;;		On entry : 0/0
  6344 ;;		On exit  : 0/0
  6345 ;;		Unchanged: 0/0
  6346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6347 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6348 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6349 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6350 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6351 ;;Total ram usage:        3 bytes
  6352 ;; Hardware stack levels used:    1
  6353 ;; Hardware stack levels required when called:    9
  6354 ;; This function calls:
  6355 ;;		Absolute function
  6356 ;;		_do_I2C_SEND_RESTART_READ
  6357 ;;		_do_I2C_SEND_RESTART_WRITE
  6358 ;;		_do_I2C_SEND_STOP
  6359 ;;		_i2c_driver_TXData
  6360 ;;		_i2c_driver_isNACK
  6361 ;;		_i2c_restartWrite
  6362 ;;		_rd1RegCompleteHandler
  6363 ;;		_rd2RegCompleteHandler
  6364 ;;		_rdBlkRegCompleteHandler
  6365 ;;		_returnReset
  6366 ;;		_returnStop
  6367 ;;		_wr1RegCompleteHandler
  6368 ;;		_wr2RegCompleteHandler
  6369 ;; This function is called by:
  6370 ;;		_i2c_ISR
  6371 ;;		i1_i2c_ISR
  6372 ;; This function uses a non-reentrant model
  6373 ;;
  6374                           
  6375                           
  6376                           ;psect for function _do_I2C_TX
  6377  0356                     _do_I2C_TX:	
  6378                           
  6379                           ;Skip over the trampoline to the duplicate function for level 1
  6380  0356  1C7E               	btfss	126,0
  6381  0357  2B5A               	goto	l5348
  6382  0358  3183  2BF4         	ljmp	i1l5552
  6383  035A                     _do_I2C_TX$intlevel0:	
  6384  035A                     l5348:	
  6385                           ;incstack = 0
  6386                           ; Regs used in _do_I2C_TX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6387                           
  6388                           
  6389                           ;i2c_master.c: 335: if(i2c_driver_isNACK())
  6390  035A  318F  2710  3183   	fcall	_i2c_driver_isNACK
  6391  035D  1803               	btfsc	3,0
  6392  035E  2B69               	goto	l5366
  6393  035F  2B86               	goto	l655
  6394  0360                     l5352:	
  6395                           ;i2c_master.c: 338: {
  6396                           ;i2c_master.c: 339: case i2c_restart_read:
  6397                           
  6398                           ;i2c_master.c: 336: {
  6399                           ;i2c_master.c: 337: switch(i2c_status.callbackTable[i2c_dataNACK](i2c_status.callbackPay
      +                          load[i2c_dataNACK]))
  6400                           
  6401                           
  6402                           ;i2c_master.c: 340: return do_I2C_SEND_RESTART_READ();
  6403  0360  318E  2631         	fcall	_do_I2C_SEND_RESTART_READ
  6404  0362  0008               	return
  6405  0363                     l5356:	
  6406                           ;i2c_master.c: 341: case i2c_restart_write:
  6407                           
  6408                           
  6409                           ;i2c_master.c: 342: return do_I2C_SEND_RESTART_WRITE();
  6410  0363  318E  2639         	fcall	_do_I2C_SEND_RESTART_WRITE
  6411  0365  0008               	return
  6412  0366                     l5360:	
  6413                           ;i2c_master.c: 344: case i2c_continue:
  6414                           
  6415                           ;i2c_master.c: 343: default:
  6416                           
  6417                           
  6418                           ;i2c_master.c: 345: case i2c_stop:
  6419                           ;i2c_master.c: 346: return do_I2C_SEND_STOP();
  6420  0366  318E  2649         	fcall	_do_I2C_SEND_STOP
  6421                           
  6422                           ;i2c_master.c: 347: }
  6423  0368  0008               	return
  6424  0369                     l5366:	
  6425  0369  0021               	movlb	1	; select bank1
  6426  036A  083A               	movf	(low ((_i2c_status| 0+26)))^(0+128),w
  6427  036B  0020               	movlb	0	; select bank0
  6428  036C  00AB               	movwf	??_do_I2C_TX
  6429  036D  082B               	movf	??_do_I2C_TX,w
  6430  036E  00AA               	movwf	returnStop@p
  6431  036F  3011               	movlw	17
  6432  0370  3EA0               	addlw	(low (_i2c_status| 0))& (0+255)
  6433  0371  0086               	movwf	6
  6434  0372  0187               	clrf	7
  6435  0373  3F41               	moviw [1]fsr1
  6436  0374  008A               	movwf	10
  6437  0375  3F40               	moviw [0]fsr1
  6438  0376  000A               	callw
  6439  0377  3183               	pagesel	$
  6440                           
  6441                           ; Switch size 1, requested type "space"
  6442                           ; Number of cases is 4, Range of values is 1 to 4
  6443                           ; switch strategies available:
  6444                           ; Name         Instructions Cycles
  6445                           ; simple_byte           13     7 (average)
  6446                           ; direct_byte           17     9 (fixed)
  6447                           ; jumptable            263     9 (fixed)
  6448                           ;	Chosen strategy is simple_byte
  6449  0378  3A01               	xorlw	1	; case 1
  6450  0379  1903               	skipnz
  6451  037A  2B66               	goto	l5360
  6452  037B  3A03               	xorlw	3	; case 2
  6453  037C  1903               	skipnz
  6454  037D  2B60               	goto	l5352
  6455  037E  3A01               	xorlw	1	; case 3
  6456  037F  1903               	skipnz
  6457  0380  2B63               	goto	l5356
  6458  0381  3A07               	xorlw	7	; case 4
  6459  0382  1903               	skipnz
  6460  0383  2B66               	goto	l5360
  6461  0384  2B66               	goto	l5360
  6462                           
  6463                           ;i2c_master.c: 348: }
  6464  0385  0008               	return
  6465  0386                     l655:	
  6466                           
  6467                           ;i2c_master.c: 349: else
  6468                           ;i2c_master.c: 350: {
  6469                           ;i2c_master.c: 351: i2c_status.addressNACKCheck = 0;
  6470  0386  0021               	movlb	1	; select bank1
  6471  0387  11A0               	bcf	_i2c_status^(0+128),3
  6472                           
  6473                           ;i2c_master.c: 352: i2c_driver_TXData(*i2c_status.data_ptr++);
  6474  0388  3002               	movlw	2
  6475  0389  3EA0               	addlw	(low (_i2c_status| 0))& (0+255)
  6476  038A  0086               	movwf	6
  6477  038B  0187               	clrf	7
  6478  038C  3F40               	moviw [0]fsr1
  6479  038D  0084               	movwf	4
  6480  038E  0185               	clrf	5
  6481  038F  0A81               	incf	1,f
  6482  0390  0800               	movf	0,w
  6483  0391  318D  25FD  3183   	fcall	_i2c_driver_TXData
  6484                           
  6485                           ;i2c_master.c: 353: return (--i2c_status.data_length)?I2C_TX:I2C_TX_EMPTY;
  6486  0394  3001               	movlw	1
  6487  0395  0021               	movlb	1	; select bank1
  6488  0396  02A3               	subwf	(_i2c_status^(0+128)+3),f
  6489  0397  3000               	movlw	0
  6490  0398  3BA4               	subwfb	((_i2c_status+1)^(0+128)+3),f
  6491  0399  0823               	movf	(_i2c_status^(0+128)+3),w
  6492  039A  0424               	iorwf	((_i2c_status+1)^(0+128)+3),w
  6493  039B  1D03               	btfss	3,2
  6494  039C  2B9F               	goto	l5374
  6495  039D  3006               	movlw	6
  6496  039E  2BA0               	goto	L1
  6497  039F                     l5374:	
  6498  039F  3003               	movlw	3
  6499  03A0                     L1:	
  6500  03A0  0020               	movlb	0	; select bank0
  6501  03A1  00AC               	movwf	_do_I2C_TX$1026
  6502  03A2  3000               	movlw	0
  6503  03A3  00AD               	movwf	_do_I2C_TX$1026+1
  6504  03A4  082C               	movf	_do_I2C_TX$1026,w
  6505  03A5  0008               	return
  6506  03A6                     __end_of_do_I2C_TX:	
  6507                           
  6508                           	psect	text23
  6509  060D                     __ptext23:	
  6510 ;; *************** function _do_I2C_DO_ADDRESS_NACK *****************
  6511 ;; Defined at:
  6512 ;;		line 319 in file "mcc_generated_files/drivers/i2c_master.c"
  6513 ;; Parameters:    Size  Location     Type
  6514 ;;		None
  6515 ;; Auto vars:     Size  Location     Type
  6516 ;;		None
  6517 ;; Return value:  Size  Location     Type
  6518 ;;                  1    wreg      enum E12337
  6519 ;; Registers used:
  6520 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6521 ;; Tracked objects:
  6522 ;;		On entry : 0/0
  6523 ;;		On exit  : 0/0
  6524 ;;		Unchanged: 0/0
  6525 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6526 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6527 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6528 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6529 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6530 ;;Total ram usage:        1 bytes
  6531 ;; Hardware stack levels used:    1
  6532 ;; Hardware stack levels required when called:    9
  6533 ;; This function calls:
  6534 ;;		Absolute function
  6535 ;;		_do_I2C_SEND_RESTART
  6536 ;;		_do_I2C_SEND_STOP
  6537 ;;		_i2c_restartWrite
  6538 ;;		_rd1RegCompleteHandler
  6539 ;;		_rd2RegCompleteHandler
  6540 ;;		_rdBlkRegCompleteHandler
  6541 ;;		_returnReset
  6542 ;;		_returnStop
  6543 ;;		_wr1RegCompleteHandler
  6544 ;;		_wr2RegCompleteHandler
  6545 ;; This function is called by:
  6546 ;;		_i2c_ISR
  6547 ;;		i1_i2c_ISR
  6548 ;; This function uses a non-reentrant model
  6549 ;;
  6550                           
  6551                           
  6552                           ;psect for function _do_I2C_DO_ADDRESS_NACK
  6553  060D                     _do_I2C_DO_ADDRESS_NACK:	
  6554                           
  6555                           ;Skip over the trampoline to the duplicate function for level 1
  6556  060D  1C7E               	btfss	126,0
  6557  060E  2E11               	goto	l5332
  6558  060F  3187  2F19         	ljmp	i1l5536
  6559  0611                     _do_I2C_DO_ADDRESS_NACK$intlevel0:	
  6560  0611                     l5332:	
  6561                           ;incstack = 0
  6562                           ; Regs used in _do_I2C_DO_ADDRESS_NACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6563                           
  6564                           
  6565                           ;i2c_master.c: 321: i2c_status.addressNACKCheck = 0;
  6566  0611  0021               	movlb	1	; select bank1
  6567  0612  11A0               	bcf	_i2c_status^(0+128),3
  6568                           
  6569                           ;i2c_master.c: 322: i2c_status.error = I2C_FAIL;
  6570  0613  3002               	movlw	2
  6571  0614  0020               	movlb	0	; select bank0
  6572  0615  00AB               	movwf	??_do_I2C_DO_ADDRESS_NACK
  6573  0616  082B               	movf	??_do_I2C_DO_ADDRESS_NACK,w
  6574  0617  0021               	movlb	1	; select bank1
  6575  0618  00AA               	movwf	(_i2c_status^(0+128)+10)
  6576                           
  6577                           ;i2c_master.c: 323: switch(i2c_status.callbackTable[i2c_addressNACK](i2c_status.callback
      +                          Payload[i2c_addressNACK]))
  6578  0619  2E20               	goto	l5346
  6579  061A                     l5336:	
  6580                           ;i2c_master.c: 324: {
  6581                           ;i2c_master.c: 325: case i2c_restart_read:
  6582                           
  6583                           
  6584                           ;i2c_master.c: 326: case i2c_restart_write:
  6585                           ;i2c_master.c: 327: return do_I2C_SEND_RESTART();
  6586  061A  318E  2641         	fcall	_do_I2C_SEND_RESTART
  6587  061C  0008               	return
  6588  061D                     l5340:	
  6589                           ;i2c_master.c: 328: default:
  6590                           
  6591                           
  6592                           ;i2c_master.c: 329: return do_I2C_SEND_STOP();
  6593  061D  318E  2649         	fcall	_do_I2C_SEND_STOP
  6594                           
  6595                           ;i2c_master.c: 330: }
  6596  061F  0008               	return
  6597  0620                     l5346:	
  6598  0620  0021               	movlb	1	; select bank1
  6599  0621  0839               	movf	(low ((_i2c_status| 0+25)))^(0+128),w
  6600  0622  0020               	movlb	0	; select bank0
  6601  0623  00AB               	movwf	??_do_I2C_DO_ADDRESS_NACK
  6602  0624  082B               	movf	??_do_I2C_DO_ADDRESS_NACK,w
  6603  0625  00AA               	movwf	returnStop@p
  6604  0626  300F               	movlw	15
  6605  0627  3EA0               	addlw	(low (_i2c_status| 0))& (0+255)
  6606  0628  0086               	movwf	6
  6607  0629  0187               	clrf	7
  6608  062A  3F41               	moviw [1]fsr1
  6609  062B  008A               	movwf	10
  6610  062C  3F40               	moviw [0]fsr1
  6611  062D  000A               	callw
  6612  062E  3186               	pagesel	$
  6613                           
  6614                           ; Switch size 1, requested type "space"
  6615                           ; Number of cases is 2, Range of values is 2 to 3
  6616                           ; switch strategies available:
  6617                           ; Name         Instructions Cycles
  6618                           ; simple_byte            7     4 (average)
  6619                           ; direct_byte           13     9 (fixed)
  6620                           ; jumptable            263     9 (fixed)
  6621                           ;	Chosen strategy is simple_byte
  6622  062F  3A02               	xorlw	2	; case 2
  6623  0630  1903               	skipnz
  6624  0631  2E1A               	goto	l5336
  6625  0632  3A01               	xorlw	1	; case 3
  6626  0633  1903               	skipnz
  6627  0634  2E1A               	goto	l5336
  6628  0635  2E1D               	goto	l5340
  6629  0636  0008               	return
  6630  0637                     __end_of_do_I2C_DO_ADDRESS_NACK:	
  6631                           
  6632                           	psect	text24
  6633  0E61                     __ptext24:	
  6634 ;; *************** function _do_I2C_DO_NACK_RESTART *****************
  6635 ;; Defined at:
  6636 ;;		line 311 in file "mcc_generated_files/drivers/i2c_master.c"
  6637 ;; Parameters:    Size  Location     Type
  6638 ;;		None
  6639 ;; Auto vars:     Size  Location     Type
  6640 ;;		None
  6641 ;; Return value:  Size  Location     Type
  6642 ;;                  1    wreg      enum E12337
  6643 ;; Registers used:
  6644 ;;		wreg, status,2, status,0, pclath, cstack
  6645 ;; Tracked objects:
  6646 ;;		On entry : 0/0
  6647 ;;		On exit  : 0/0
  6648 ;;		Unchanged: 0/0
  6649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6650 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6651 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6652 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6653 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6654 ;;Total ram usage:        0 bytes
  6655 ;; Hardware stack levels used:    1
  6656 ;; Hardware stack levels required when called:    7
  6657 ;; This function calls:
  6658 ;;		_i2c_driver_sendNACK
  6659 ;; This function is called by:
  6660 ;;		_do_I2C_RX
  6661 ;;		_i2c_ISR
  6662 ;;		i1_i2c_ISR
  6663 ;; This function uses a non-reentrant model
  6664 ;;
  6665                           
  6666                           
  6667                           ;psect for function _do_I2C_DO_NACK_RESTART
  6668  0E61                     _do_I2C_DO_NACK_RESTART:	
  6669                           
  6670                           ;Skip over the trampoline to the duplicate function for level 1
  6671  0E61  1C7E               	btfss	126,0
  6672  0E62  2E65               	goto	l2536
  6673  0E63  318D  2DB4         	ljmp	i1l3048
  6674  0E65                     _do_I2C_DO_NACK_RESTART$intlevel0:	
  6675  0E65                     l2536:	
  6676                           ;incstack = 0
  6677                           ; Regs used in _do_I2C_DO_NACK_RESTART: [wreg+status,2+status,0+pclath+cstack]
  6678                           
  6679                           
  6680                           ;i2c_master.c: 313: i2c_driver_sendNACK();
  6681  0E65  318D  25BC         	fcall	_i2c_driver_sendNACK
  6682                           
  6683                           ;i2c_master.c: 314: return I2C_SEND_RESTART;
  6684  0E67  3009               	movlw	9
  6685  0E68  0008               	return
  6686  0E69                     __end_of_do_I2C_DO_NACK_RESTART:	
  6687                           
  6688                           	psect	text25
  6689  0E59                     __ptext25:	
  6690 ;; *************** function _do_I2C_DO_NACK_STOP *****************
  6691 ;; Defined at:
  6692 ;;		line 305 in file "mcc_generated_files/drivers/i2c_master.c"
  6693 ;; Parameters:    Size  Location     Type
  6694 ;;		None
  6695 ;; Auto vars:     Size  Location     Type
  6696 ;;		None
  6697 ;; Return value:  Size  Location     Type
  6698 ;;                  1    wreg      enum E12337
  6699 ;; Registers used:
  6700 ;;		wreg, status,2, status,0, pclath, cstack
  6701 ;; Tracked objects:
  6702 ;;		On entry : 0/0
  6703 ;;		On exit  : 0/0
  6704 ;;		Unchanged: 0/0
  6705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6706 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6707 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6708 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6709 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6710 ;;Total ram usage:        0 bytes
  6711 ;; Hardware stack levels used:    1
  6712 ;; Hardware stack levels required when called:    7
  6713 ;; This function calls:
  6714 ;;		_i2c_driver_sendNACK
  6715 ;; This function is called by:
  6716 ;;		_do_I2C_RX
  6717 ;;		_i2c_ISR
  6718 ;;		i1_i2c_ISR
  6719 ;; This function uses a non-reentrant model
  6720 ;;
  6721                           
  6722                           
  6723                           ;psect for function _do_I2C_DO_NACK_STOP
  6724  0E59                     _do_I2C_DO_NACK_STOP:	
  6725                           
  6726                           ;Skip over the trampoline to the duplicate function for level 1
  6727  0E59  1C7E               	btfss	126,0
  6728  0E5A  2E5D               	goto	l2530
  6729  0E5B  318D  2DB0         	ljmp	i1l3042
  6730  0E5D                     _do_I2C_DO_NACK_STOP$intlevel0:	
  6731  0E5D                     l2530:	
  6732                           ;incstack = 0
  6733                           ; Regs used in _do_I2C_DO_NACK_STOP: [wreg+status,2+status,0+pclath+cstack]
  6734                           
  6735                           
  6736                           ;i2c_master.c: 307: i2c_driver_sendNACK();
  6737  0E5D  318D  25BC         	fcall	_i2c_driver_sendNACK
  6738                           
  6739                           ;i2c_master.c: 308: return I2C_SEND_STOP;
  6740  0E5F  300A               	movlw	10
  6741  0E60  0008               	return
  6742  0E61                     __end_of_do_I2C_DO_NACK_STOP:	
  6743                           
  6744                           	psect	text26
  6745  0E51                     __ptext26:	
  6746 ;; *************** function _do_I2C_DO_ACK *****************
  6747 ;; Defined at:
  6748 ;;		line 299 in file "mcc_generated_files/drivers/i2c_master.c"
  6749 ;; Parameters:    Size  Location     Type
  6750 ;;		None
  6751 ;; Auto vars:     Size  Location     Type
  6752 ;;		None
  6753 ;; Return value:  Size  Location     Type
  6754 ;;                  1    wreg      enum E12337
  6755 ;; Registers used:
  6756 ;;		wreg, status,2, status,0, pclath, cstack
  6757 ;; Tracked objects:
  6758 ;;		On entry : 0/0
  6759 ;;		On exit  : 0/0
  6760 ;;		Unchanged: 0/0
  6761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6762 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6763 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6764 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6765 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6766 ;;Total ram usage:        0 bytes
  6767 ;; Hardware stack levels used:    1
  6768 ;; Hardware stack levels required when called:    7
  6769 ;; This function calls:
  6770 ;;		_i2c_driver_sendACK
  6771 ;; This function is called by:
  6772 ;;		_i2c_ISR
  6773 ;;		i1_i2c_ISR
  6774 ;; This function uses a non-reentrant model
  6775 ;;
  6776                           
  6777                           
  6778                           ;psect for function _do_I2C_DO_ACK
  6779  0E51                     _do_I2C_DO_ACK:	
  6780                           
  6781                           ;Skip over the trampoline to the duplicate function for level 1
  6782  0E51  1C7E               	btfss	126,0
  6783  0E52  2E55               	goto	l2598
  6784  0E53  318D  2DAC         	ljmp	i1l3204
  6785  0E55                     _do_I2C_DO_ACK$intlevel0:	
  6786  0E55                     l2598:	
  6787                           ;incstack = 0
  6788                           ; Regs used in _do_I2C_DO_ACK: [wreg+status,2+status,0+pclath+cstack]
  6789                           
  6790                           
  6791                           ;i2c_master.c: 301: i2c_driver_sendACK();
  6792  0E55  318D  25B8         	fcall	_i2c_driver_sendACK
  6793                           
  6794                           ;i2c_master.c: 302: return I2C_RCEN;
  6795  0E57  3005               	movlw	5
  6796  0E58  0008               	return
  6797  0E59                     __end_of_do_I2C_DO_ACK:	
  6798                           
  6799                           	psect	text27
  6800  0E7C                     __ptext27:	
  6801 ;; *************** function _do_I2C_RCEN *****************
  6802 ;; Defined at:
  6803 ;;		line 292 in file "mcc_generated_files/drivers/i2c_master.c"
  6804 ;; Parameters:    Size  Location     Type
  6805 ;;		None
  6806 ;; Auto vars:     Size  Location     Type
  6807 ;;		None
  6808 ;; Return value:  Size  Location     Type
  6809 ;;                  1    wreg      enum E12337
  6810 ;; Registers used:
  6811 ;;		wreg, status,2, status,0, pclath, cstack
  6812 ;; Tracked objects:
  6813 ;;		On entry : 0/0
  6814 ;;		On exit  : 0/0
  6815 ;;		Unchanged: 0/0
  6816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6818 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6819 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6820 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6821 ;;Total ram usage:        0 bytes
  6822 ;; Hardware stack levels used:    1
  6823 ;; Hardware stack levels required when called:    7
  6824 ;; This function calls:
  6825 ;;		_i2c_driver_startRX
  6826 ;; This function is called by:
  6827 ;;		_i2c_ISR
  6828 ;;		i1_i2c_ISR
  6829 ;; This function uses a non-reentrant model
  6830 ;;
  6831                           
  6832                           
  6833                           ;psect for function _do_I2C_RCEN
  6834  0E7C                     _do_I2C_RCEN:	
  6835                           
  6836                           ;Skip over the trampoline to the duplicate function for level 1
  6837  0E7C  1C7E               	btfss	126,0
  6838  0E7D  2E80               	goto	l2590
  6839  0E7E  318D  2DD9         	ljmp	i1l3196
  6840  0E80                     _do_I2C_RCEN$intlevel0:	
  6841  0E80                     l2590:	
  6842                           ;incstack = 0
  6843                           ; Regs used in _do_I2C_RCEN: [wreg+status,2+status,0+pclath+cstack]
  6844                           
  6845                           
  6846                           ;i2c_master.c: 294: i2c_status.addressNACKCheck = 0;
  6847  0E80  0021               	movlb	1	; select bank1
  6848  0E81  11A0               	bcf	_i2c_status^(0+128),3
  6849                           
  6850                           ;i2c_master.c: 295: i2c_driver_startRX();
  6851  0E82  318D  258B         	fcall	_i2c_driver_startRX
  6852                           
  6853                           ;i2c_master.c: 296: return I2C_RX;
  6854  0E84  3004               	movlw	4
  6855  0E85  0008               	return
  6856  0E86                     __end_of_do_I2C_RCEN:	
  6857                           
  6858                           	psect	text28
  6859  0EA5                     __ptext28:	
  6860 ;; *************** function _do_I2C_SEND_ADR_WRITE *****************
  6861 ;; Defined at:
  6862 ;;		line 285 in file "mcc_generated_files/drivers/i2c_master.c"
  6863 ;; Parameters:    Size  Location     Type
  6864 ;;		None
  6865 ;; Auto vars:     Size  Location     Type
  6866 ;;		None
  6867 ;; Return value:  Size  Location     Type
  6868 ;;                  1    wreg      enum E12337
  6869 ;; Registers used:
  6870 ;;		wreg, status,2, status,0, pclath, cstack
  6871 ;; Tracked objects:
  6872 ;;		On entry : 0/0
  6873 ;;		On exit  : 0/0
  6874 ;;		Unchanged: 0/0
  6875 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6876 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6877 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6878 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6879 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6880 ;;Total ram usage:        0 bytes
  6881 ;; Hardware stack levels used:    1
  6882 ;; Hardware stack levels required when called:    7
  6883 ;; This function calls:
  6884 ;;		_i2c_driver_TXData
  6885 ;; This function is called by:
  6886 ;;		_i2c_ISR
  6887 ;;		i1_i2c_ISR
  6888 ;; This function uses a non-reentrant model
  6889 ;;
  6890                           
  6891                           
  6892                           ;psect for function _do_I2C_SEND_ADR_WRITE
  6893  0EA5                     _do_I2C_SEND_ADR_WRITE:	
  6894                           
  6895                           ;Skip over the trampoline to the duplicate function for level 1
  6896  0EA5  1C7E               	btfss	126,0
  6897  0EA6  2EA9               	goto	l2582
  6898  0EA7  318E  2E22         	ljmp	i1l3188
  6899  0EA9                     _do_I2C_SEND_ADR_WRITE$intlevel0:	
  6900  0EA9                     l2582:	
  6901                           ;incstack = 0
  6902                           ; Regs used in _do_I2C_SEND_ADR_WRITE: [wreg+status,2+status,0+pclath+cstack]
  6903                           
  6904                           
  6905                           ;i2c_master.c: 287: i2c_status.addressNACKCheck = 1;
  6906  0EA9  0021               	movlb	1	; select bank1
  6907  0EAA  15A0               	bsf	_i2c_status^(0+128),3
  6908                           
  6909                           ;i2c_master.c: 288: i2c_driver_TXData(i2c_status.address << 1);
  6910  0EAB  3521               	lslf	(_i2c_status^(0+128)+1),w
  6911  0EAC  318D  25FD         	fcall	_i2c_driver_TXData
  6912                           
  6913                           ;i2c_master.c: 289: return I2C_TX;
  6914  0EAE  3003               	movlw	3
  6915  0EAF  0008               	return
  6916  0EB0                     __end_of_do_I2C_SEND_ADR_WRITE:	
  6917                           
  6918                           	psect	text29
  6919  0EEA                     __ptext29:	
  6920 ;; *************** function _do_I2C_SEND_ADR_READ *****************
  6921 ;; Defined at:
  6922 ;;		line 278 in file "mcc_generated_files/drivers/i2c_master.c"
  6923 ;; Parameters:    Size  Location     Type
  6924 ;;		None
  6925 ;; Auto vars:     Size  Location     Type
  6926 ;;		None
  6927 ;; Return value:  Size  Location     Type
  6928 ;;                  1    wreg      enum E12337
  6929 ;; Registers used:
  6930 ;;		wreg, status,2, status,0, pclath, cstack
  6931 ;; Tracked objects:
  6932 ;;		On entry : 0/0
  6933 ;;		On exit  : 0/0
  6934 ;;		Unchanged: 0/0
  6935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6936 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6937 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6938 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6939 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6940 ;;Total ram usage:        0 bytes
  6941 ;; Hardware stack levels used:    1
  6942 ;; Hardware stack levels required when called:    7
  6943 ;; This function calls:
  6944 ;;		_i2c_driver_TXData
  6945 ;; This function is called by:
  6946 ;;		_i2c_ISR
  6947 ;;		i1_i2c_ISR
  6948 ;; This function uses a non-reentrant model
  6949 ;;
  6950                           
  6951                           
  6952                           ;psect for function _do_I2C_SEND_ADR_READ
  6953  0EEA                     _do_I2C_SEND_ADR_READ:	
  6954                           
  6955                           ;Skip over the trampoline to the duplicate function for level 1
  6956  0EEA  1C7E               	btfss	126,0
  6957  0EEB  2EEE               	goto	l2574
  6958  0EEC  318E  2E29         	ljmp	i1l3180
  6959  0EEE                     _do_I2C_SEND_ADR_READ$intlevel0:	
  6960  0EEE                     l2574:	
  6961                           ;incstack = 0
  6962                           ; Regs used in _do_I2C_SEND_ADR_READ: [wreg+status,2+status,0+pclath+cstack]
  6963                           
  6964                           
  6965                           ;i2c_master.c: 280: i2c_status.addressNACKCheck = 1;
  6966  0EEE  0021               	movlb	1	; select bank1
  6967  0EEF  15A0               	bsf	_i2c_status^(0+128),3
  6968                           
  6969                           ;i2c_master.c: 281: i2c_driver_TXData(i2c_status.address << 1 | 1);
  6970  0EF0  1403               	setc
  6971  0EF1  0D21               	rlf	(_i2c_status^(0+128)+1),w
  6972  0EF2  318D  25FD         	fcall	_i2c_driver_TXData
  6973                           
  6974                           ;i2c_master.c: 282: return I2C_RCEN;
  6975  0EF4  3005               	movlw	5
  6976  0EF5  0008               	return
  6977  0EF6                     __end_of_do_I2C_SEND_ADR_READ:	
  6978                           
  6979                           	psect	text30
  6980  0E49                     __ptext30:	
  6981 ;; *************** function _do_I2C_SEND_STOP *****************
  6982 ;; Defined at:
  6983 ;;		line 272 in file "mcc_generated_files/drivers/i2c_master.c"
  6984 ;; Parameters:    Size  Location     Type
  6985 ;;		None
  6986 ;; Auto vars:     Size  Location     Type
  6987 ;;		None
  6988 ;; Return value:  Size  Location     Type
  6989 ;;                  1    wreg      enum E12337
  6990 ;; Registers used:
  6991 ;;		wreg, status,2, status,0, pclath, cstack
  6992 ;; Tracked objects:
  6993 ;;		On entry : 0/0
  6994 ;;		On exit  : 0/0
  6995 ;;		Unchanged: 0/0
  6996 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6997 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6998 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6999 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7000 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7001 ;;Total ram usage:        0 bytes
  7002 ;; Hardware stack levels used:    1
  7003 ;; Hardware stack levels required when called:    7
  7004 ;; This function calls:
  7005 ;;		_i2c_driver_stop
  7006 ;; This function is called by:
  7007 ;;		_do_I2C_DO_ADDRESS_NACK
  7008 ;;		_do_I2C_TX
  7009 ;;		_do_I2C_TX_EMPTY
  7010 ;;		_i2c_ISR
  7011 ;;		i1_i2c_ISR
  7012 ;; This function uses a non-reentrant model
  7013 ;;
  7014                           
  7015                           
  7016                           ;psect for function _do_I2C_SEND_STOP
  7017  0E49                     _do_I2C_SEND_STOP:	
  7018                           
  7019                           ;Skip over the trampoline to the duplicate function for level 1
  7020  0E49  1C7E               	btfss	126,0
  7021  0E4A  2E4D               	goto	l2524
  7022  0E4B  318D  2DA8         	ljmp	i1l3036
  7023  0E4D                     _do_I2C_SEND_STOP$intlevel0:	
  7024  0E4D                     l2524:	
  7025                           ;incstack = 0
  7026                           ; Regs used in _do_I2C_SEND_STOP: [wreg+status,2+status,0+pclath+cstack]
  7027                           
  7028                           
  7029                           ;i2c_master.c: 274: i2c_driver_stop();
  7030  0E4D  318D  2588         	fcall	_i2c_driver_stop
  7031                           
  7032                           ;i2c_master.c: 275: return I2C_IDLE;
  7033  0E4F  3000               	movlw	0
  7034  0E50  0008               	return
  7035  0E51                     __end_of_do_I2C_SEND_STOP:	
  7036                           
  7037                           	psect	text31
  7038  0E41                     __ptext31:	
  7039 ;; *************** function _do_I2C_SEND_RESTART *****************
  7040 ;; Defined at:
  7041 ;;		line 266 in file "mcc_generated_files/drivers/i2c_master.c"
  7042 ;; Parameters:    Size  Location     Type
  7043 ;;		None
  7044 ;; Auto vars:     Size  Location     Type
  7045 ;;		None
  7046 ;; Return value:  Size  Location     Type
  7047 ;;                  1    wreg      enum E12337
  7048 ;; Registers used:
  7049 ;;		wreg, status,2, status,0, pclath, cstack
  7050 ;; Tracked objects:
  7051 ;;		On entry : 0/0
  7052 ;;		On exit  : 0/0
  7053 ;;		Unchanged: 0/0
  7054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7055 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7056 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7057 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7058 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7059 ;;Total ram usage:        0 bytes
  7060 ;; Hardware stack levels used:    1
  7061 ;; Hardware stack levels required when called:    7
  7062 ;; This function calls:
  7063 ;;		_i2c_driver_restart
  7064 ;; This function is called by:
  7065 ;;		_do_I2C_DO_ADDRESS_NACK
  7066 ;;		_do_I2C_TX_EMPTY
  7067 ;;		_i2c_ISR
  7068 ;;		i1_i2c_ISR
  7069 ;; This function uses a non-reentrant model
  7070 ;;
  7071                           
  7072                           
  7073                           ;psect for function _do_I2C_SEND_RESTART
  7074  0E41                     _do_I2C_SEND_RESTART:	
  7075                           
  7076                           ;Skip over the trampoline to the duplicate function for level 1
  7077  0E41  1C7E               	btfss	126,0
  7078  0E42  2E45               	goto	l2518
  7079  0E43  318D  2DA4         	ljmp	i1l3030
  7080  0E45                     _do_I2C_SEND_RESTART$intlevel0:	
  7081  0E45                     l2518:	
  7082                           ;incstack = 0
  7083                           ; Regs used in _do_I2C_SEND_RESTART: [wreg+status,2+status,0+pclath+cstack]
  7084                           
  7085                           
  7086                           ;i2c_master.c: 268: i2c_driver_restart();
  7087  0E45  318D  2585         	fcall	_i2c_driver_restart
  7088                           
  7089                           ;i2c_master.c: 269: return I2C_SEND_ADR_READ;
  7090  0E47  3001               	movlw	1
  7091  0E48  0008               	return
  7092  0E49                     __end_of_do_I2C_SEND_RESTART:	
  7093                           
  7094                           	psect	text32
  7095  0E39                     __ptext32:	
  7096 ;; *************** function _do_I2C_SEND_RESTART_WRITE *****************
  7097 ;; Defined at:
  7098 ;;		line 260 in file "mcc_generated_files/drivers/i2c_master.c"
  7099 ;; Parameters:    Size  Location     Type
  7100 ;;		None
  7101 ;; Auto vars:     Size  Location     Type
  7102 ;;		None
  7103 ;; Return value:  Size  Location     Type
  7104 ;;                  1    wreg      enum E12337
  7105 ;; Registers used:
  7106 ;;		wreg, status,2, status,0, pclath, cstack
  7107 ;; Tracked objects:
  7108 ;;		On entry : 0/0
  7109 ;;		On exit  : 0/0
  7110 ;;		Unchanged: 0/0
  7111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7112 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7113 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7114 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7115 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7116 ;;Total ram usage:        0 bytes
  7117 ;; Hardware stack levels used:    1
  7118 ;; Hardware stack levels required when called:    7
  7119 ;; This function calls:
  7120 ;;		_i2c_driver_restart
  7121 ;; This function is called by:
  7122 ;;		_do_I2C_TX
  7123 ;;		_i2c_ISR
  7124 ;;		i1_i2c_ISR
  7125 ;; This function uses a non-reentrant model
  7126 ;;
  7127                           
  7128                           
  7129                           ;psect for function _do_I2C_SEND_RESTART_WRITE
  7130  0E39                     _do_I2C_SEND_RESTART_WRITE:	
  7131                           
  7132                           ;Skip over the trampoline to the duplicate function for level 1
  7133  0E39  1C7E               	btfss	126,0
  7134  0E3A  2E3D               	goto	l2512
  7135  0E3B  318D  2DA0         	ljmp	i1l3024
  7136  0E3D                     _do_I2C_SEND_RESTART_WRITE$intlevel0:	
  7137  0E3D                     l2512:	
  7138                           ;incstack = 0
  7139                           ; Regs used in _do_I2C_SEND_RESTART_WRITE: [wreg+status,2+status,0+pclath+cstack]
  7140                           
  7141                           
  7142                           ;i2c_master.c: 262: i2c_driver_restart();
  7143  0E3D  318D  2585         	fcall	_i2c_driver_restart
  7144                           
  7145                           ;i2c_master.c: 263: return I2C_SEND_ADR_WRITE;
  7146  0E3F  3002               	movlw	2
  7147  0E40  0008               	return
  7148  0E41                     __end_of_do_I2C_SEND_RESTART_WRITE:	
  7149                           
  7150                           	psect	text33
  7151  0E31                     __ptext33:	
  7152 ;; *************** function _do_I2C_SEND_RESTART_READ *****************
  7153 ;; Defined at:
  7154 ;;		line 254 in file "mcc_generated_files/drivers/i2c_master.c"
  7155 ;; Parameters:    Size  Location     Type
  7156 ;;		None
  7157 ;; Auto vars:     Size  Location     Type
  7158 ;;		None
  7159 ;; Return value:  Size  Location     Type
  7160 ;;                  1    wreg      enum E12337
  7161 ;; Registers used:
  7162 ;;		wreg, status,2, status,0, pclath, cstack
  7163 ;; Tracked objects:
  7164 ;;		On entry : 0/0
  7165 ;;		On exit  : 0/0
  7166 ;;		Unchanged: 0/0
  7167 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7168 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7169 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7170 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7171 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7172 ;;Total ram usage:        0 bytes
  7173 ;; Hardware stack levels used:    1
  7174 ;; Hardware stack levels required when called:    7
  7175 ;; This function calls:
  7176 ;;		_i2c_driver_restart
  7177 ;; This function is called by:
  7178 ;;		_do_I2C_TX
  7179 ;;		_i2c_ISR
  7180 ;;		i1_i2c_ISR
  7181 ;; This function uses a non-reentrant model
  7182 ;;
  7183                           
  7184                           
  7185                           ;psect for function _do_I2C_SEND_RESTART_READ
  7186  0E31                     _do_I2C_SEND_RESTART_READ:	
  7187                           
  7188                           ;Skip over the trampoline to the duplicate function for level 1
  7189  0E31  1C7E               	btfss	126,0
  7190  0E32  2E35               	goto	l2506
  7191  0E33  318D  2D9C         	ljmp	i1l3018
  7192  0E35                     _do_I2C_SEND_RESTART_READ$intlevel0:	
  7193  0E35                     l2506:	
  7194                           ;incstack = 0
  7195                           ; Regs used in _do_I2C_SEND_RESTART_READ: [wreg+status,2+status,0+pclath+cstack]
  7196                           
  7197                           
  7198                           ;i2c_master.c: 256: i2c_driver_restart();
  7199  0E35  318D  2585         	fcall	_i2c_driver_restart
  7200                           
  7201                           ;i2c_master.c: 257: return I2C_SEND_ADR_READ;
  7202  0E37  3001               	movlw	1
  7203  0E38  0008               	return
  7204  0E39                     __end_of_do_I2C_SEND_RESTART_READ:	
  7205                           
  7206                           	psect	text34
  7207  0E69                     __ptext34:	
  7208 ;; *************** function _do_I2C_IDLE *****************
  7209 ;; Defined at:
  7210 ;;		line 247 in file "mcc_generated_files/drivers/i2c_master.c"
  7211 ;; Parameters:    Size  Location     Type
  7212 ;;		None
  7213 ;; Auto vars:     Size  Location     Type
  7214 ;;		None
  7215 ;; Return value:  Size  Location     Type
  7216 ;;                  1    wreg      enum E12337
  7217 ;; Registers used:
  7218 ;;		wreg, status,2
  7219 ;; Tracked objects:
  7220 ;;		On entry : 0/0
  7221 ;;		On exit  : 0/0
  7222 ;;		Unchanged: 0/0
  7223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7225 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7226 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7227 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7228 ;;Total ram usage:        0 bytes
  7229 ;; Hardware stack levels used:    1
  7230 ;; Hardware stack levels required when called:    6
  7231 ;; This function calls:
  7232 ;;		Nothing
  7233 ;; This function is called by:
  7234 ;;		_i2c_ISR
  7235 ;;		i1_i2c_ISR
  7236 ;; This function uses a non-reentrant model
  7237 ;;
  7238                           
  7239                           
  7240                           ;psect for function _do_I2C_IDLE
  7241  0E69                     _do_I2C_IDLE:	
  7242                           
  7243                           ;Skip over the trampoline to the duplicate function for level 1
  7244  0E69  1C7E               	btfss	126,0
  7245  0E6A  2E6D               	goto	l2566
  7246  0E6B  318D  2DC9         	ljmp	i1l3172
  7247  0E6D                     _do_I2C_IDLE$intlevel0:	
  7248  0E6D                     l2566:	
  7249                           ;incstack = 0
  7250                           ; Regs used in _do_I2C_IDLE: [wreg+status,2]
  7251                           
  7252                           
  7253                           ;i2c_master.c: 249: i2c_status.busy = 0;
  7254  0E6D  0021               	movlb	1	; select bank1
  7255  0E6E  1020               	bcf	_i2c_status^(0+128),0
  7256                           
  7257                           ;i2c_master.c: 250: i2c_status.error = I2C_NOERR;
  7258  0E6F  01AA               	clrf	(_i2c_status^(0+128)+10)
  7259                           
  7260                           ;i2c_master.c: 251: return I2C_RESET;
  7261  0E70  300E               	movlw	14
  7262  0E71  0008               	return
  7263  0E72                     __end_of_do_I2C_IDLE:	
  7264                           
  7265                           	psect	text35
  7266  0E9A                     __ptext35:	
  7267 ;; *************** function _do_I2C_RESET *****************
  7268 ;; Defined at:
  7269 ;;		line 239 in file "mcc_generated_files/drivers/i2c_master.c"
  7270 ;; Parameters:    Size  Location     Type
  7271 ;;		None
  7272 ;; Auto vars:     Size  Location     Type
  7273 ;;		None
  7274 ;; Return value:  Size  Location     Type
  7275 ;;                  1    wreg      enum E12337
  7276 ;; Registers used:
  7277 ;;		wreg, status,2, status,0, pclath, cstack
  7278 ;; Tracked objects:
  7279 ;;		On entry : 0/0
  7280 ;;		On exit  : 0/0
  7281 ;;		Unchanged: 0/0
  7282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7283 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7284 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7285 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7286 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7287 ;;Total ram usage:        0 bytes
  7288 ;; Hardware stack levels used:    1
  7289 ;; Hardware stack levels required when called:    7
  7290 ;; This function calls:
  7291 ;;		_i2c_driver_resetBus
  7292 ;; This function is called by:
  7293 ;;		_i2c_ISR
  7294 ;;		i1_i2c_ISR
  7295 ;; This function uses a non-reentrant model
  7296 ;;
  7297                           
  7298                           
  7299                           ;psect for function _do_I2C_RESET
  7300  0E9A                     _do_I2C_RESET:	
  7301                           
  7302                           ;Skip over the trampoline to the duplicate function for level 1
  7303  0E9A  1C7E               	btfss	126,0
  7304  0E9B  2E9E               	goto	l2556
  7305  0E9C  318E  2E1B         	ljmp	i1l3162
  7306  0E9E                     _do_I2C_RESET$intlevel0:	
  7307  0E9E                     l2556:	
  7308                           ;incstack = 0
  7309                           ; Regs used in _do_I2C_RESET: [wreg+status,2+status,0+pclath+cstack]
  7310                           
  7311                           
  7312                           ;i2c_master.c: 241: i2c_driver_resetBus();
  7313  0E9E  318D  255F         	fcall	_i2c_driver_resetBus
  7314                           
  7315                           ;i2c_master.c: 242: i2c_status.busy = 0;
  7316  0EA0  0021               	movlb	1	; select bank1
  7317  0EA1  1020               	bcf	_i2c_status^(0+128),0
  7318                           
  7319                           ;i2c_master.c: 243: i2c_status.error = I2C_NOERR;
  7320  0EA2  01AA               	clrf	(_i2c_status^(0+128)+10)
  7321                           
  7322                           ;i2c_master.c: 244: return I2C_RESET;
  7323  0EA3  300E               	movlw	14
  7324  0EA4  0008               	return
  7325  0EA5                     __end_of_do_I2C_RESET:	
  7326                           
  7327                           	psect	text36
  7328  05DF                     __ptext36:	
  7329 ;; *************** function _do_I2C_TX_EMPTY *****************
  7330 ;; Defined at:
  7331 ;;		line 382 in file "mcc_generated_files/drivers/i2c_master.c"
  7332 ;; Parameters:    Size  Location     Type
  7333 ;;		None
  7334 ;; Auto vars:     Size  Location     Type
  7335 ;;		None
  7336 ;; Return value:  Size  Location     Type
  7337 ;;                  1    wreg      enum E12337
  7338 ;; Registers used:
  7339 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7340 ;; Tracked objects:
  7341 ;;		On entry : 0/0
  7342 ;;		On exit  : 0/0
  7343 ;;		Unchanged: 0/0
  7344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7345 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7346 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7347 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7348 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7349 ;;Total ram usage:        1 bytes
  7350 ;; Hardware stack levels used:    1
  7351 ;; Hardware stack levels required when called:    9
  7352 ;; This function calls:
  7353 ;;		Absolute function
  7354 ;;		_do_I2C_SEND_RESTART
  7355 ;;		_do_I2C_SEND_STOP
  7356 ;;		_i2c_restartWrite
  7357 ;;		_mssp_setIRQ
  7358 ;;		_rd1RegCompleteHandler
  7359 ;;		_rd2RegCompleteHandler
  7360 ;;		_rdBlkRegCompleteHandler
  7361 ;;		_returnReset
  7362 ;;		_returnStop
  7363 ;;		_wr1RegCompleteHandler
  7364 ;;		_wr2RegCompleteHandler
  7365 ;; This function is called by:
  7366 ;;		_i2c_ISR
  7367 ;;		i1_i2c_ISR
  7368 ;; This function uses a non-reentrant model
  7369 ;;
  7370                           
  7371                           
  7372                           ;psect for function _do_I2C_TX_EMPTY
  7373  05DF                     _do_I2C_TX_EMPTY:	
  7374                           
  7375                           ;Skip over the trampoline to the duplicate function for level 1
  7376  05DF  1C7E               	btfss	126,0
  7377  05E0  2DE3               	goto	l5404
  7378  05E1  3186  2E37         	ljmp	i1l5608
  7379  05E3                     _do_I2C_TX_EMPTY$intlevel0:	
  7380  05E3                     l5404:	
  7381                           ;incstack = 0
  7382                           ; Regs used in _do_I2C_TX_EMPTY: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7383                           
  7384                           
  7385                           ;i2c_master.c: 384: i2c_status.bufferFree = 1;
  7386  05E3  0021               	movlb	1	; select bank1
  7387  05E4  1520               	bsf	_i2c_status^(0+128),2
  7388                           
  7389                           ;i2c_master.c: 385: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
  7390  05E5  2DF0               	goto	l5422
  7391  05E6                     l5406:	
  7392                           ;i2c_master.c: 386: {
  7393                           ;i2c_master.c: 387: case i2c_restart_read:
  7394                           
  7395                           
  7396                           ;i2c_master.c: 388: case i2c_restart_write:
  7397                           ;i2c_master.c: 389: return do_I2C_SEND_RESTART();
  7398  05E6  318E  2641         	fcall	_do_I2C_SEND_RESTART
  7399  05E8  0008               	return
  7400  05E9                     l5410:	
  7401                           ;i2c_master.c: 390: case i2c_continue:
  7402                           
  7403                           
  7404                           ;i2c_master.c: 391: mssp_setIRQ();
  7405  05E9  318D  2591         	fcall	_mssp_setIRQ
  7406                           
  7407                           ;i2c_master.c: 392: return I2C_TX;
  7408  05EB  3003               	movlw	3
  7409  05EC  0008               	return
  7410  05ED                     l5416:	
  7411                           ;i2c_master.c: 394: case i2c_stop:
  7412                           
  7413                           ;i2c_master.c: 393: default:
  7414                           
  7415                           
  7416                           ;i2c_master.c: 395: return do_I2C_SEND_STOP();
  7417  05ED  318E  2649         	fcall	_do_I2C_SEND_STOP
  7418                           
  7419                           ;i2c_master.c: 396: }
  7420  05EF  0008               	return
  7421  05F0                     l5422:	
  7422  05F0  0021               	movlb	1	; select bank1
  7423  05F1  0837               	movf	(low ((_i2c_status| 0+23)))^(0+128),w
  7424  05F2  0020               	movlb	0	; select bank0
  7425  05F3  00AB               	movwf	??_do_I2C_TX_EMPTY
  7426  05F4  082B               	movf	??_do_I2C_TX_EMPTY,w
  7427  05F5  00AA               	movwf	returnStop@p
  7428  05F6  300B               	movlw	11
  7429  05F7  3EA0               	addlw	(low (_i2c_status| 0))& (0+255)
  7430  05F8  0086               	movwf	6
  7431  05F9  0187               	clrf	7
  7432  05FA  3F41               	moviw [1]fsr1
  7433  05FB  008A               	movwf	10
  7434  05FC  3F40               	moviw [0]fsr1
  7435  05FD  000A               	callw
  7436  05FE  3185               	pagesel	$
  7437                           
  7438                           ; Switch size 1, requested type "space"
  7439                           ; Number of cases is 4, Range of values is 1 to 4
  7440                           ; switch strategies available:
  7441                           ; Name         Instructions Cycles
  7442                           ; simple_byte           13     7 (average)
  7443                           ; direct_byte           17     9 (fixed)
  7444                           ; jumptable            263     9 (fixed)
  7445                           ;	Chosen strategy is simple_byte
  7446  05FF  3A01               	xorlw	1	; case 1
  7447  0600  1903               	skipnz
  7448  0601  2DED               	goto	l5416
  7449  0602  3A03               	xorlw	3	; case 2
  7450  0603  1903               	skipnz
  7451  0604  2DE6               	goto	l5406
  7452  0605  3A01               	xorlw	1	; case 3
  7453  0606  1903               	skipnz
  7454  0607  2DE6               	goto	l5406
  7455  0608  3A07               	xorlw	7	; case 4
  7456  0609  1903               	skipnz
  7457  060A  2DE9               	goto	l5410
  7458  060B  2DED               	goto	l5416
  7459  060C  0008               	return
  7460  060D                     __end_of_do_I2C_TX_EMPTY:	
  7461                           
  7462                           	psect	text37
  7463  0D91                     __ptext37:	
  7464 ;; *************** function _mssp_setIRQ *****************
  7465 ;; Defined at:
  7466 ;;		line 58 in file "mcc_generated_files/i2c_driver.c"
  7467 ;; Parameters:    Size  Location     Type
  7468 ;;		None
  7469 ;; Auto vars:     Size  Location     Type
  7470 ;;		None
  7471 ;; Return value:  Size  Location     Type
  7472 ;;                  1    wreg      void 
  7473 ;; Registers used:
  7474 ;;		None
  7475 ;; Tracked objects:
  7476 ;;		On entry : 0/0
  7477 ;;		On exit  : 0/0
  7478 ;;		Unchanged: 0/0
  7479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7480 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7481 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7483 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7484 ;;Total ram usage:        0 bytes
  7485 ;; Hardware stack levels used:    1
  7486 ;; Hardware stack levels required when called:    6
  7487 ;; This function calls:
  7488 ;;		Nothing
  7489 ;; This function is called by:
  7490 ;;		_do_I2C_TX_EMPTY
  7491 ;; This function uses a non-reentrant model
  7492 ;;
  7493                           
  7494                           
  7495                           ;psect for function _mssp_setIRQ
  7496  0D91                     _mssp_setIRQ:	
  7497                           
  7498                           ;i2c_driver.c: 60: PIR1bits.SSP1IF = 1;
  7499                           
  7500                           ;incstack = 0
  7501                           ; Regs used in _mssp_setIRQ: []
  7502  0D91  0020               	movlb	0	; select bank0
  7503  0D92  1590               	bsf	16,3	;volatile
  7504  0D93  0008               	return
  7505  0D94                     __end_of_mssp_setIRQ:	
  7506                           
  7507                           	psect	text38
  7508  0F10                     __ptext38:	
  7509 ;; *************** function _i2c_driver_isNACK *****************
  7510 ;; Defined at:
  7511 ;;		line 161 in file "mcc_generated_files/i2c_driver.c"
  7512 ;; Parameters:    Size  Location     Type
  7513 ;;		None
  7514 ;; Auto vars:     Size  Location     Type
  7515 ;;		None
  7516 ;; Return value:  Size  Location     Type
  7517 ;;		None               void
  7518 ;; Registers used:
  7519 ;;		wreg, status,2, status,0
  7520 ;; Tracked objects:
  7521 ;;		On entry : 0/0
  7522 ;;		On exit  : 0/0
  7523 ;;		Unchanged: 0/0
  7524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7525 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7526 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7527 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7528 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7529 ;;Total ram usage:        1 bytes
  7530 ;; Hardware stack levels used:    1
  7531 ;; Hardware stack levels required when called:    6
  7532 ;; This function calls:
  7533 ;;		Nothing
  7534 ;; This function is called by:
  7535 ;;		_do_I2C_TX
  7536 ;;		_i2c_ISR
  7537 ;; This function uses a non-reentrant model
  7538 ;;
  7539                           
  7540                           
  7541                           ;psect for function _i2c_driver_isNACK
  7542  0F10                     _i2c_driver_isNACK:	
  7543                           
  7544                           ;i2c_driver.c: 163: return SSP1CON2bits.ACKSTAT = 1;
  7545                           
  7546                           ;incstack = 0
  7547                           ; Regs used in _i2c_driver_isNACK: [wreg+status,2+status,0]
  7548  0F10  0024               	movlb	4	; select bank4
  7549  0F11  0816               	movf	22,w	;volatile
  7550  0F12  39BF               	andlw	-65
  7551  0F13  3840               	iorlw	64
  7552  0F14  0096               	movwf	22	;volatile
  7553  0F15  0E16               	swapf	22,w	;volatile
  7554  0F16  0C89               	rrf	9,f
  7555  0F17  0C89               	rrf	9,f
  7556  0F18  3901               	andlw	1
  7557  0F19  0020               	movlb	0	; select bank0
  7558  0F1A  00A1               	movwf	??_i2c_driver_isNACK
  7559  0F1B  0C21               	rrf	??_i2c_driver_isNACK,w
  7560  0F1C  0008               	return
  7561  0F1D                     __end_of_i2c_driver_isNACK:	
  7562                           
  7563                           	psect	text39
  7564  0DFD                     __ptext39:	
  7565 ;; *************** function _i2c_driver_TXData *****************
  7566 ;; Defined at:
  7567 ;;		line 186 in file "mcc_generated_files/i2c_driver.c"
  7568 ;; Parameters:    Size  Location     Type
  7569 ;;  d               1    wreg     unsigned char 
  7570 ;; Auto vars:     Size  Location     Type
  7571 ;;  d               1    1[BANK0 ] unsigned char 
  7572 ;; Return value:  Size  Location     Type
  7573 ;;                  1    wreg      void 
  7574 ;; Registers used:
  7575 ;;		wreg
  7576 ;; Tracked objects:
  7577 ;;		On entry : 0/0
  7578 ;;		On exit  : 0/0
  7579 ;;		Unchanged: 0/0
  7580 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7581 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7582 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7583 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7584 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7585 ;;Total ram usage:        1 bytes
  7586 ;; Hardware stack levels used:    1
  7587 ;; Hardware stack levels required when called:    6
  7588 ;; This function calls:
  7589 ;;		Nothing
  7590 ;; This function is called by:
  7591 ;;		_do_I2C_SEND_ADR_READ
  7592 ;;		_do_I2C_SEND_ADR_WRITE
  7593 ;;		_do_I2C_TX
  7594 ;; This function uses a non-reentrant model
  7595 ;;
  7596                           
  7597                           
  7598                           ;psect for function _i2c_driver_TXData
  7599  0DFD                     _i2c_driver_TXData:	
  7600                           
  7601                           ;incstack = 0
  7602                           ; Regs used in _i2c_driver_TXData: [wreg]
  7603                           ;i2c_driver_TXData@d stored from wreg
  7604  0DFD  0020               	movlb	0	; select bank0
  7605  0DFE  00A1               	movwf	i2c_driver_TXData@d
  7606                           
  7607                           ;i2c_driver.c: 188: SSP1BUF = d;
  7608  0DFF  0821               	movf	i2c_driver_TXData@d,w
  7609  0E00  0024               	movlb	4	; select bank4
  7610  0E01  0091               	movwf	17	;volatile
  7611  0E02  0008               	return
  7612  0E03                     __end_of_i2c_driver_TXData:	
  7613                           
  7614                           	psect	text40
  7615  0D8E                     __ptext40:	
  7616 ;; *************** function _i2c_driver_getRXData *****************
  7617 ;; Defined at:
  7618 ;;		line 171 in file "mcc_generated_files/i2c_driver.c"
  7619 ;; Parameters:    Size  Location     Type
  7620 ;;		None
  7621 ;; Auto vars:     Size  Location     Type
  7622 ;;		None
  7623 ;; Return value:  Size  Location     Type
  7624 ;;                  1    wreg      unsigned char 
  7625 ;; Registers used:
  7626 ;;		wreg
  7627 ;; Tracked objects:
  7628 ;;		On entry : 0/0
  7629 ;;		On exit  : 0/0
  7630 ;;		Unchanged: 0/0
  7631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7632 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7633 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7634 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7635 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7636 ;;Total ram usage:        0 bytes
  7637 ;; Hardware stack levels used:    1
  7638 ;; Hardware stack levels required when called:    6
  7639 ;; This function calls:
  7640 ;;		Nothing
  7641 ;; This function is called by:
  7642 ;;		_do_I2C_RX
  7643 ;; This function uses a non-reentrant model
  7644 ;;
  7645                           
  7646                           
  7647                           ;psect for function _i2c_driver_getRXData
  7648  0D8E                     _i2c_driver_getRXData:	
  7649                           
  7650                           ;i2c_driver.c: 173: return SSP1BUF;
  7651                           
  7652                           ;incstack = 0
  7653                           ; Regs used in _i2c_driver_getRXData: [wreg]
  7654  0D8E  0024               	movlb	4	; select bank4
  7655  0D8F  0811               	movf	17,w	;volatile
  7656  0D90  0008               	return
  7657  0D91                     __end_of_i2c_driver_getRXData:	
  7658                           
  7659                           	psect	text41
  7660  0DBC                     __ptext41:	
  7661 ;; *************** function _i2c_driver_sendNACK *****************
  7662 ;; Defined at:
  7663 ;;		line 202 in file "mcc_generated_files/i2c_driver.c"
  7664 ;; Parameters:    Size  Location     Type
  7665 ;;		None
  7666 ;; Auto vars:     Size  Location     Type
  7667 ;;		None
  7668 ;; Return value:  Size  Location     Type
  7669 ;;                  1    wreg      void 
  7670 ;; Registers used:
  7671 ;;		None
  7672 ;; Tracked objects:
  7673 ;;		On entry : 0/0
  7674 ;;		On exit  : 0/0
  7675 ;;		Unchanged: 0/0
  7676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7677 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7678 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7679 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7680 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7681 ;;Total ram usage:        0 bytes
  7682 ;; Hardware stack levels used:    1
  7683 ;; Hardware stack levels required when called:    6
  7684 ;; This function calls:
  7685 ;;		Nothing
  7686 ;; This function is called by:
  7687 ;;		_do_I2C_DO_NACK_STOP
  7688 ;;		_do_I2C_DO_NACK_RESTART
  7689 ;; This function uses a non-reentrant model
  7690 ;;
  7691                           
  7692                           
  7693                           ;psect for function _i2c_driver_sendNACK
  7694  0DBC                     _i2c_driver_sendNACK:	
  7695                           
  7696                           ;i2c_driver.c: 204: SSP1CON2bits.ACKDT = 1;
  7697                           
  7698                           ;incstack = 0
  7699                           ; Regs used in _i2c_driver_sendNACK: []
  7700  0DBC  0024               	movlb	4	; select bank4
  7701  0DBD  1696               	bsf	22,5	;volatile
  7702                           
  7703                           ;i2c_driver.c: 205: SSP1CON2bits.ACKEN = 1;
  7704  0DBE  1616               	bsf	22,4	;volatile
  7705  0DBF  0008               	return
  7706  0DC0                     __end_of_i2c_driver_sendNACK:	
  7707                           
  7708                           	psect	text42
  7709  0D5F                     __ptext42:	
  7710 ;; *************** function _i2c_driver_resetBus *****************
  7711 ;; Defined at:
  7712 ;;		line 141 in file "mcc_generated_files/i2c_driver.c"
  7713 ;; Parameters:    Size  Location     Type
  7714 ;;		None
  7715 ;; Auto vars:     Size  Location     Type
  7716 ;;		None
  7717 ;; Return value:  Size  Location     Type
  7718 ;;                  1    wreg      void 
  7719 ;; Registers used:
  7720 ;;		None
  7721 ;; Tracked objects:
  7722 ;;		On entry : 0/0
  7723 ;;		On exit  : 0/0
  7724 ;;		Unchanged: 0/0
  7725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7726 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7727 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7728 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7729 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7730 ;;Total ram usage:        0 bytes
  7731 ;; Hardware stack levels used:    1
  7732 ;; Hardware stack levels required when called:    6
  7733 ;; This function calls:
  7734 ;;		Nothing
  7735 ;; This function is called by:
  7736 ;;		_do_I2C_RESET
  7737 ;; This function uses a non-reentrant model
  7738 ;;
  7739                           
  7740                           
  7741                           ;psect for function _i2c_driver_resetBus
  7742  0D5F                     _i2c_driver_resetBus:	
  7743                           
  7744                           ;incstack = 0
  7745                           ; Regs used in _i2c_driver_resetBus: []
  7746  0D5F  0008               	return
  7747  0D60                     __end_of_i2c_driver_resetBus:	
  7748                           
  7749                           	psect	text43
  7750  0D8B                     __ptext43:	
  7751 ;; *************** function _i2c_driver_startRX *****************
  7752 ;; Defined at:
  7753 ;;		line 166 in file "mcc_generated_files/i2c_driver.c"
  7754 ;; Parameters:    Size  Location     Type
  7755 ;;		None
  7756 ;; Auto vars:     Size  Location     Type
  7757 ;;		None
  7758 ;; Return value:  Size  Location     Type
  7759 ;;                  1    wreg      void 
  7760 ;; Registers used:
  7761 ;;		None
  7762 ;; Tracked objects:
  7763 ;;		On entry : 0/0
  7764 ;;		On exit  : 0/0
  7765 ;;		Unchanged: 0/0
  7766 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7768 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7769 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7770 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7771 ;;Total ram usage:        0 bytes
  7772 ;; Hardware stack levels used:    1
  7773 ;; Hardware stack levels required when called:    6
  7774 ;; This function calls:
  7775 ;;		Nothing
  7776 ;; This function is called by:
  7777 ;;		_do_I2C_RCEN
  7778 ;; This function uses a non-reentrant model
  7779 ;;
  7780                           
  7781                           
  7782                           ;psect for function _i2c_driver_startRX
  7783  0D8B                     _i2c_driver_startRX:	
  7784                           
  7785                           ;i2c_driver.c: 168: SSP1CON2bits.RCEN = 1;
  7786                           
  7787                           ;incstack = 0
  7788                           ; Regs used in _i2c_driver_startRX: []
  7789  0D8B  0024               	movlb	4	; select bank4
  7790  0D8C  1596               	bsf	22,3	;volatile
  7791  0D8D  0008               	return
  7792  0D8E                     __end_of_i2c_driver_startRX:	
  7793                           
  7794                           	psect	text44
  7795  0DF7                     __ptext44:	
  7796 ;; *************** function _returnReset *****************
  7797 ;; Defined at:
  7798 ;;		line 448 in file "mcc_generated_files/drivers/i2c_master.c"
  7799 ;; Parameters:    Size  Location     Type
  7800 ;;  p               1   10[BANK0 ] PTR void 
  7801 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  7802 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  7803 ;; Auto vars:     Size  Location     Type
  7804 ;;		None
  7805 ;; Return value:  Size  Location     Type
  7806 ;;                  1    wreg      enum E12171
  7807 ;; Registers used:
  7808 ;;		wreg
  7809 ;; Tracked objects:
  7810 ;;		On entry : 0/0
  7811 ;;		On exit  : 0/0
  7812 ;;		Unchanged: 0/0
  7813 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7814 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7815 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7816 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7817 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7818 ;;Total ram usage:        1 bytes
  7819 ;; Hardware stack levels used:    1
  7820 ;; Hardware stack levels required when called:    6
  7821 ;; This function calls:
  7822 ;;		Nothing
  7823 ;; This function is called by:
  7824 ;;		_i2c_open
  7825 ;;		_do_I2C_DO_ADDRESS_NACK
  7826 ;;		_do_I2C_TX
  7827 ;;		_do_I2C_RX
  7828 ;;		_do_I2C_TX_EMPTY
  7829 ;;		i1_do_I2C_DO_ADDRESS_NACK
  7830 ;;		i1_do_I2C_TX
  7831 ;;		i1_do_I2C_RX
  7832 ;;		i1_do_I2C_TX_EMPTY
  7833 ;; This function uses a non-reentrant model
  7834 ;;
  7835                           
  7836                           
  7837                           ;psect for function _returnReset
  7838  0DF7                     _returnReset:	
  7839                           
  7840                           ;Skip over the trampoline to the duplicate function for level 1
  7841  0DF7  1C7E               	btfss	126,0
  7842  0DF8  2DFB               	goto	l2546
  7843  0DF9  318D  2D62         	ljmp	i1l3058
  7844  0DFB                     _returnReset$intlevel0:	
  7845  0DFB                     l2546:	
  7846                           ;incstack = 0
  7847                           ; Regs used in _returnReset: [wreg]
  7848                           
  7849                           
  7850                           ;i2c_master.c: 450: return i2c_reset_link;
  7851  0DFB  3005               	movlw	5
  7852  0DFC  0008               	return
  7853  0DFD                     __end_of_returnReset:	
  7854                           
  7855                           	psect	text45
  7856  0DF1                     __ptext45:	
  7857 ;; *************** function _returnStop *****************
  7858 ;; Defined at:
  7859 ;;		line 443 in file "mcc_generated_files/drivers/i2c_master.c"
  7860 ;; Parameters:    Size  Location     Type
  7861 ;;  p               1   10[BANK0 ] PTR void 
  7862 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  7863 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  7864 ;; Auto vars:     Size  Location     Type
  7865 ;;		None
  7866 ;; Return value:  Size  Location     Type
  7867 ;;                  1    wreg      enum E12171
  7868 ;; Registers used:
  7869 ;;		wreg
  7870 ;; Tracked objects:
  7871 ;;		On entry : 0/0
  7872 ;;		On exit  : 0/0
  7873 ;;		Unchanged: 0/0
  7874 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7875 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7876 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7877 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7878 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7879 ;;Total ram usage:        1 bytes
  7880 ;; Hardware stack levels used:    1
  7881 ;; Hardware stack levels required when called:    6
  7882 ;; This function calls:
  7883 ;;		Nothing
  7884 ;; This function is called by:
  7885 ;;		_i2c_open
  7886 ;;		_setCallBack
  7887 ;;		_do_I2C_DO_ADDRESS_NACK
  7888 ;;		_do_I2C_TX
  7889 ;;		_do_I2C_RX
  7890 ;;		_do_I2C_TX_EMPTY
  7891 ;;		i1_do_I2C_DO_ADDRESS_NACK
  7892 ;;		i1_do_I2C_TX
  7893 ;;		i1_do_I2C_RX
  7894 ;;		i1_do_I2C_TX_EMPTY
  7895 ;; This function uses a non-reentrant model
  7896 ;;
  7897                           
  7898                           
  7899                           ;psect for function _returnStop
  7900  0DF1                     _returnStop:	
  7901                           
  7902                           ;Skip over the trampoline to the duplicate function for level 1
  7903  0DF1  1C7E               	btfss	126,0
  7904  0DF2  2DF5               	goto	l2542
  7905  0DF3  318D  2D60         	ljmp	i1l3054
  7906  0DF5                     _returnStop$intlevel0:	
  7907  0DF5                     l2542:	
  7908                           ;incstack = 0
  7909                           ; Regs used in _returnStop: [wreg]
  7910                           
  7911                           
  7912                           ;i2c_master.c: 445: return i2c_stop;
  7913  0DF5  3001               	movlw	1
  7914  0DF6  0008               	return
  7915  0DF7                     __end_of_returnStop:	
  7916                           
  7917                           	psect	text46
  7918  07BA                     __ptext46:	
  7919 ;; *************** function _rdBlkRegCompleteHandler *****************
  7920 ;; Defined at:
  7921 ;;		line 134 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  7922 ;; Parameters:    Size  Location     Type
  7923 ;;  p               1   10[BANK0 ] PTR void 
  7924 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  7925 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  7926 ;; Auto vars:     Size  Location     Type
  7927 ;;		None
  7928 ;; Return value:  Size  Location     Type
  7929 ;;                  1    wreg      enum E97
  7930 ;; Registers used:
  7931 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7932 ;; Tracked objects:
  7933 ;;		On entry : 0/0
  7934 ;;		On exit  : 0/0
  7935 ;;		Unchanged: 0/0
  7936 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7937 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7938 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7939 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7940 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7941 ;;Total ram usage:        1 bytes
  7942 ;; Hardware stack levels used:    1
  7943 ;; Hardware stack levels required when called:    8
  7944 ;; This function calls:
  7945 ;;		_i2c_setBuffer
  7946 ;;		_i2c_setDataCompleteCallback
  7947 ;; This function is called by:
  7948 ;;		_i2c_readDataBlock
  7949 ;;		_do_I2C_DO_ADDRESS_NACK
  7950 ;;		_do_I2C_TX
  7951 ;;		_do_I2C_RX
  7952 ;;		_do_I2C_TX_EMPTY
  7953 ;;		i1_do_I2C_DO_ADDRESS_NACK
  7954 ;;		i1_do_I2C_TX
  7955 ;;		i1_do_I2C_RX
  7956 ;;		i1_do_I2C_TX_EMPTY
  7957 ;; This function uses a non-reentrant model
  7958 ;;
  7959                           
  7960                           
  7961                           ;psect for function _rdBlkRegCompleteHandler
  7962  07BA                     _rdBlkRegCompleteHandler:	
  7963                           
  7964                           ;Skip over the trampoline to the duplicate function for level 1
  7965  07BA  1C7E               	btfss	126,0
  7966  07BB  2FBE               	goto	l2500
  7967  07BC  318F  2FE9         	ljmp	i1l3012
  7968  07BE                     _rdBlkRegCompleteHandler$intlevel0:	
  7969  07BE                     l2500:	
  7970                           ;incstack = 0
  7971                           ; Regs used in _rdBlkRegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  7972                           
  7973                           
  7974                           ;i2c_simple_master.c: 136: i2c_setBuffer(((buf_t *)p)->data,((buf_t*)p)->len);
  7975  07BE  0020               	movlb	0	; select bank0
  7976  07BF  082A               	movf	rdBlkRegCompleteHandler@p,w
  7977  07C0  0086               	movwf	6
  7978  07C1  0187               	clrf	7
  7979  07C2  3F40               	moviw [0]fsr1
  7980  07C3  00A1               	movwf	i2c_setBuffer@bufferSize
  7981  07C4  3F41               	moviw [1]fsr1
  7982  07C5  00A2               	movwf	i2c_setBuffer@bufferSize+1
  7983  07C6  082A               	movf	rdBlkRegCompleteHandler@p,w
  7984  07C7  3E02               	addlw	2
  7985  07C8  0086               	movwf	6
  7986  07C9  0187               	clrf	7
  7987  07CA  0801               	movf	1,w
  7988  07CB  318F  277C  3187   	fcall	_i2c_setBuffer
  7989                           
  7990                           ;i2c_simple_master.c: 137: i2c_setDataCompleteCallback((0),(0));
  7991  07CE  3000               	movlw	0
  7992  07CF  0020               	movlb	0	; select bank0
  7993  07D0  00A6               	movwf	i2c_setDataCompleteCallback@cb
  7994  07D1  00A7               	movwf	i2c_setDataCompleteCallback@cb+1
  7995  07D2  01A8               	clrf	i2c_setDataCompleteCallback@p
  7996  07D3  318F  2703         	fcall	_i2c_setDataCompleteCallback
  7997                           
  7998                           ;i2c_simple_master.c: 138: return i2c_restart_read;
  7999  07D5  3002               	movlw	2
  8000  07D6  0008               	return
  8001  07D7                     __end_of_rdBlkRegCompleteHandler:	
  8002                           
  8003                           	psect	text47
  8004  0FD3                     __ptext47:	
  8005 ;; *************** function _rd2RegCompleteHandler *****************
  8006 ;; Defined at:
  8007 ;;		line 87 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  8008 ;; Parameters:    Size  Location     Type
  8009 ;;  p               1   10[BANK0 ] PTR void 
  8010 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  8011 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  8012 ;; Auto vars:     Size  Location     Type
  8013 ;;		None
  8014 ;; Return value:  Size  Location     Type
  8015 ;;                  1    wreg      enum E97
  8016 ;; Registers used:
  8017 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8018 ;; Tracked objects:
  8019 ;;		On entry : 0/0
  8020 ;;		On exit  : 0/0
  8021 ;;		Unchanged: 0/0
  8022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8023 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8024 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8025 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8026 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8027 ;;Total ram usage:        1 bytes
  8028 ;; Hardware stack levels used:    1
  8029 ;; Hardware stack levels required when called:    8
  8030 ;; This function calls:
  8031 ;;		_i2c_setBuffer
  8032 ;;		_i2c_setDataCompleteCallback
  8033 ;; This function is called by:
  8034 ;;		_i2c_read2ByteRegister
  8035 ;;		_do_I2C_DO_ADDRESS_NACK
  8036 ;;		_do_I2C_TX
  8037 ;;		_do_I2C_RX
  8038 ;;		_do_I2C_TX_EMPTY
  8039 ;;		i1_do_I2C_DO_ADDRESS_NACK
  8040 ;;		i1_do_I2C_TX
  8041 ;;		i1_do_I2C_RX
  8042 ;;		i1_do_I2C_TX_EMPTY
  8043 ;; This function uses a non-reentrant model
  8044 ;;
  8045                           
  8046                           
  8047                           ;psect for function _rd2RegCompleteHandler
  8048  0FD3                     _rd2RegCompleteHandler:	
  8049                           
  8050                           ;Skip over the trampoline to the duplicate function for level 1
  8051  0FD3  1C7E               	btfss	126,0
  8052  0FD4  2FD7               	goto	l2484
  8053  0FD5  318F  2F5A         	ljmp	i1l2996
  8054  0FD7                     _rd2RegCompleteHandler$intlevel0:	
  8055  0FD7                     l2484:	
  8056                           ;incstack = 0
  8057                           ; Regs used in _rd2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8058                           
  8059                           
  8060                           ;i2c_simple_master.c: 89: i2c_setBuffer(p,2);
  8061  0FD7  3002               	movlw	2
  8062  0FD8  0020               	movlb	0	; select bank0
  8063  0FD9  00A1               	movwf	i2c_setBuffer@bufferSize
  8064  0FDA  3000               	movlw	0
  8065  0FDB  00A2               	movwf	i2c_setBuffer@bufferSize+1
  8066  0FDC  082A               	movf	rd2RegCompleteHandler@p,w
  8067  0FDD  318F  277C  318F   	fcall	_i2c_setBuffer
  8068                           
  8069                           ;i2c_simple_master.c: 90: i2c_setDataCompleteCallback((0),(0));
  8070  0FE0  3000               	movlw	0
  8071  0FE1  0020               	movlb	0	; select bank0
  8072  0FE2  00A6               	movwf	i2c_setDataCompleteCallback@cb
  8073  0FE3  00A7               	movwf	i2c_setDataCompleteCallback@cb+1
  8074  0FE4  01A8               	clrf	i2c_setDataCompleteCallback@p
  8075  0FE5  318F  2703         	fcall	_i2c_setDataCompleteCallback
  8076                           
  8077                           ;i2c_simple_master.c: 91: return i2c_restart_read;
  8078  0FE7  3002               	movlw	2
  8079  0FE8  0008               	return
  8080  0FE9                     __end_of_rd2RegCompleteHandler:	
  8081                           
  8082                           	psect	text48
  8083  0FBD                     __ptext48:	
  8084 ;; *************** function _rd1RegCompleteHandler *****************
  8085 ;; Defined at:
  8086 ;;		line 58 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  8087 ;; Parameters:    Size  Location     Type
  8088 ;;  p               1   10[BANK0 ] PTR void 
  8089 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  8090 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  8091 ;; Auto vars:     Size  Location     Type
  8092 ;;		None
  8093 ;; Return value:  Size  Location     Type
  8094 ;;                  1    wreg      enum E97
  8095 ;; Registers used:
  8096 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8097 ;; Tracked objects:
  8098 ;;		On entry : 0/0
  8099 ;;		On exit  : 0/0
  8100 ;;		Unchanged: 0/0
  8101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8102 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8103 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8104 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8105 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8106 ;;Total ram usage:        1 bytes
  8107 ;; Hardware stack levels used:    1
  8108 ;; Hardware stack levels required when called:    8
  8109 ;; This function calls:
  8110 ;;		_i2c_setBuffer
  8111 ;;		_i2c_setDataCompleteCallback
  8112 ;; This function is called by:
  8113 ;;		_i2c_read1ByteRegister
  8114 ;;		_do_I2C_DO_ADDRESS_NACK
  8115 ;;		_do_I2C_TX
  8116 ;;		_do_I2C_RX
  8117 ;;		_do_I2C_TX_EMPTY
  8118 ;;		i1_do_I2C_DO_ADDRESS_NACK
  8119 ;;		i1_do_I2C_TX
  8120 ;;		i1_do_I2C_RX
  8121 ;;		i1_do_I2C_TX_EMPTY
  8122 ;; This function uses a non-reentrant model
  8123 ;;
  8124                           
  8125                           
  8126                           ;psect for function _rd1RegCompleteHandler
  8127  0FBD                     _rd1RegCompleteHandler:	
  8128                           
  8129                           ;Skip over the trampoline to the duplicate function for level 1
  8130  0FBD  1C7E               	btfss	126,0
  8131  0FBE  2FC1               	goto	l2476
  8132  0FBF  318F  2F4A         	ljmp	i1l2988
  8133  0FC1                     _rd1RegCompleteHandler$intlevel0:	
  8134  0FC1                     l2476:	
  8135                           ;incstack = 0
  8136                           ; Regs used in _rd1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8137                           
  8138                           
  8139                           ;i2c_simple_master.c: 60: i2c_setBuffer(p,1);
  8140  0FC1  3001               	movlw	1
  8141  0FC2  0020               	movlb	0	; select bank0
  8142  0FC3  00A1               	movwf	i2c_setBuffer@bufferSize
  8143  0FC4  3000               	movlw	0
  8144  0FC5  00A2               	movwf	i2c_setBuffer@bufferSize+1
  8145  0FC6  082A               	movf	rd1RegCompleteHandler@p,w
  8146  0FC7  318F  277C  318F   	fcall	_i2c_setBuffer
  8147                           
  8148                           ;i2c_simple_master.c: 61: i2c_setDataCompleteCallback((0),(0));
  8149  0FCA  3000               	movlw	0
  8150  0FCB  0020               	movlb	0	; select bank0
  8151  0FCC  00A6               	movwf	i2c_setDataCompleteCallback@cb
  8152  0FCD  00A7               	movwf	i2c_setDataCompleteCallback@cb+1
  8153  0FCE  01A8               	clrf	i2c_setDataCompleteCallback@p
  8154  0FCF  318F  2703         	fcall	_i2c_setDataCompleteCallback
  8155                           
  8156                           ;i2c_simple_master.c: 62: return i2c_restart_read;
  8157  0FD1  3002               	movlw	2
  8158  0FD2  0008               	return
  8159  0FD3                     __end_of_rd1RegCompleteHandler:	
  8160                           
  8161                           	psect	text49
  8162  0FA7                     __ptext49:	
  8163 ;; *************** function _wr1RegCompleteHandler *****************
  8164 ;; Defined at:
  8165 ;;		line 31 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  8166 ;; Parameters:    Size  Location     Type
  8167 ;;  p               1   10[BANK0 ] PTR void 
  8168 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  8169 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  8170 ;; Auto vars:     Size  Location     Type
  8171 ;;		None
  8172 ;; Return value:  Size  Location     Type
  8173 ;;                  1    wreg      enum E97
  8174 ;; Registers used:
  8175 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8176 ;; Tracked objects:
  8177 ;;		On entry : 0/0
  8178 ;;		On exit  : 0/0
  8179 ;;		Unchanged: 0/0
  8180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8181 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8182 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8183 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8184 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8185 ;;Total ram usage:        1 bytes
  8186 ;; Hardware stack levels used:    1
  8187 ;; Hardware stack levels required when called:    8
  8188 ;; This function calls:
  8189 ;;		_i2c_setBuffer
  8190 ;;		_i2c_setDataCompleteCallback
  8191 ;; This function is called by:
  8192 ;;		_i2c_write1ByteRegister
  8193 ;;		_do_I2C_DO_ADDRESS_NACK
  8194 ;;		_do_I2C_TX
  8195 ;;		_do_I2C_RX
  8196 ;;		_do_I2C_TX_EMPTY
  8197 ;;		i1_do_I2C_DO_ADDRESS_NACK
  8198 ;;		i1_do_I2C_TX
  8199 ;;		i1_do_I2C_RX
  8200 ;;		i1_do_I2C_TX_EMPTY
  8201 ;; This function uses a non-reentrant model
  8202 ;;
  8203                           
  8204                           
  8205                           ;psect for function _wr1RegCompleteHandler
  8206  0FA7                     _wr1RegCompleteHandler:	
  8207                           
  8208                           ;Skip over the trampoline to the duplicate function for level 1
  8209  0FA7  1C7E               	btfss	126,0
  8210  0FA8  2FAB               	goto	l2468
  8211  0FA9  318F  2F3A         	ljmp	i1l2980
  8212  0FAB                     _wr1RegCompleteHandler$intlevel0:	
  8213  0FAB                     l2468:	
  8214                           ;incstack = 0
  8215                           ; Regs used in _wr1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8216                           
  8217                           
  8218                           ;i2c_simple_master.c: 33: i2c_setBuffer(p,1);
  8219  0FAB  3001               	movlw	1
  8220  0FAC  0020               	movlb	0	; select bank0
  8221  0FAD  00A1               	movwf	i2c_setBuffer@bufferSize
  8222  0FAE  3000               	movlw	0
  8223  0FAF  00A2               	movwf	i2c_setBuffer@bufferSize+1
  8224  0FB0  082A               	movf	wr1RegCompleteHandler@p,w
  8225  0FB1  318F  277C  318F   	fcall	_i2c_setBuffer
  8226                           
  8227                           ;i2c_simple_master.c: 34: i2c_setDataCompleteCallback((0),(0));
  8228  0FB4  3000               	movlw	0
  8229  0FB5  0020               	movlb	0	; select bank0
  8230  0FB6  00A6               	movwf	i2c_setDataCompleteCallback@cb
  8231  0FB7  00A7               	movwf	i2c_setDataCompleteCallback@cb+1
  8232  0FB8  01A8               	clrf	i2c_setDataCompleteCallback@p
  8233  0FB9  318F  2703         	fcall	_i2c_setDataCompleteCallback
  8234                           
  8235                           ;i2c_simple_master.c: 35: return i2c_continue;
  8236  0FBB  3004               	movlw	4
  8237  0FBC  0008               	return
  8238  0FBD                     __end_of_wr1RegCompleteHandler:	
  8239                           
  8240                           	psect	text50
  8241  0DEB                     __ptext50:	
  8242 ;; *************** function _i2c_restartWrite *****************
  8243 ;; Defined at:
  8244 ;;		line 35 in file "mcc_generated_files/drivers/i2c_types.c"
  8245 ;; Parameters:    Size  Location     Type
  8246 ;;  p               1   10[BANK0 ] PTR void 
  8247 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  8248 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  8249 ;; Auto vars:     Size  Location     Type
  8250 ;;		None
  8251 ;; Return value:  Size  Location     Type
  8252 ;;                  1    wreg      enum E97
  8253 ;; Registers used:
  8254 ;;		wreg
  8255 ;; Tracked objects:
  8256 ;;		On entry : 0/0
  8257 ;;		On exit  : 0/0
  8258 ;;		Unchanged: 0/0
  8259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8260 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8261 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8262 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8263 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8264 ;;Total ram usage:        1 bytes
  8265 ;; Hardware stack levels used:    1
  8266 ;; Hardware stack levels required when called:    6
  8267 ;; This function calls:
  8268 ;;		Nothing
  8269 ;; This function is called by:
  8270 ;;		_i2c_writeNBytes
  8271 ;;		_i2c_write1ByteRegister
  8272 ;;		_i2c_read1ByteRegister
  8273 ;;		_i2c_read2ByteRegister
  8274 ;;		_i2c_write2ByteRegister
  8275 ;;		_i2c_readDataBlock
  8276 ;;		_do_I2C_DO_ADDRESS_NACK
  8277 ;;		_do_I2C_TX
  8278 ;;		_do_I2C_RX
  8279 ;;		_do_I2C_TX_EMPTY
  8280 ;;		i1_do_I2C_DO_ADDRESS_NACK
  8281 ;;		i1_do_I2C_TX
  8282 ;;		i1_do_I2C_RX
  8283 ;;		i1_do_I2C_TX_EMPTY
  8284 ;; This function uses a non-reentrant model
  8285 ;;
  8286                           
  8287                           
  8288                           ;psect for function _i2c_restartWrite
  8289  0DEB                     _i2c_restartWrite:	
  8290                           
  8291                           ;Skip over the trampoline to the duplicate function for level 1
  8292  0DEB  1C7E               	btfss	126,0
  8293  0DEC  2DEF               	goto	l2550
  8294  0DED  3180  2802         	ljmp	i1l3062
  8295  0DEF                     _i2c_restartWrite$intlevel0:	
  8296  0DEF                     l2550:	
  8297                           ;incstack = 0
  8298                           ; Regs used in _i2c_restartWrite: [wreg]
  8299                           
  8300                           
  8301                           ;i2c_types.c: 37: return i2c_restart_write;
  8302  0DEF  3003               	movlw	3
  8303  0DF0  0008               	return
  8304  0DF1                     __end_of_i2c_restartWrite:	
  8305                           
  8306                           	psect	text51
  8307  0F91                     __ptext51:	
  8308 ;; *************** function _wr2RegCompleteHandler *****************
  8309 ;; Defined at:
  8310 ;;		line 110 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  8311 ;; Parameters:    Size  Location     Type
  8312 ;;  p               1   10[BANK0 ] PTR void 
  8313 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  8314 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  8315 ;; Auto vars:     Size  Location     Type
  8316 ;;		None
  8317 ;; Return value:  Size  Location     Type
  8318 ;;                  1    wreg      enum E97
  8319 ;; Registers used:
  8320 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8321 ;; Tracked objects:
  8322 ;;		On entry : 0/0
  8323 ;;		On exit  : 0/0
  8324 ;;		Unchanged: 0/0
  8325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8326 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8327 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8328 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8329 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8330 ;;Total ram usage:        1 bytes
  8331 ;; Hardware stack levels used:    1
  8332 ;; Hardware stack levels required when called:    8
  8333 ;; This function calls:
  8334 ;;		_i2c_setBuffer
  8335 ;;		_i2c_setDataCompleteCallback
  8336 ;; This function is called by:
  8337 ;;		_i2c_write2ByteRegister
  8338 ;;		_do_I2C_DO_ADDRESS_NACK
  8339 ;;		_do_I2C_TX
  8340 ;;		_do_I2C_RX
  8341 ;;		_do_I2C_TX_EMPTY
  8342 ;;		i1_do_I2C_DO_ADDRESS_NACK
  8343 ;;		i1_do_I2C_TX
  8344 ;;		i1_do_I2C_RX
  8345 ;;		i1_do_I2C_TX_EMPTY
  8346 ;; This function uses a non-reentrant model
  8347 ;;
  8348                           
  8349                           
  8350                           ;psect for function _wr2RegCompleteHandler
  8351  0F91                     _wr2RegCompleteHandler:	
  8352                           
  8353                           ;Skip over the trampoline to the duplicate function for level 1
  8354  0F91  1C7E               	btfss	126,0
  8355  0F92  2F95               	goto	l2492
  8356  0F93  318F  2F2A         	ljmp	i1l3004
  8357  0F95                     _wr2RegCompleteHandler$intlevel0:	
  8358  0F95                     l2492:	
  8359                           ;incstack = 0
  8360                           ; Regs used in _wr2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8361                           
  8362                           
  8363                           ;i2c_simple_master.c: 112: i2c_setBuffer(p,2);
  8364  0F95  3002               	movlw	2
  8365  0F96  0020               	movlb	0	; select bank0
  8366  0F97  00A1               	movwf	i2c_setBuffer@bufferSize
  8367  0F98  3000               	movlw	0
  8368  0F99  00A2               	movwf	i2c_setBuffer@bufferSize+1
  8369  0F9A  082A               	movf	wr2RegCompleteHandler@p,w
  8370  0F9B  318F  277C  318F   	fcall	_i2c_setBuffer
  8371                           
  8372                           ;i2c_simple_master.c: 113: i2c_setDataCompleteCallback((0),(0));
  8373  0F9E  3000               	movlw	0
  8374  0F9F  0020               	movlb	0	; select bank0
  8375  0FA0  00A6               	movwf	i2c_setDataCompleteCallback@cb
  8376  0FA1  00A7               	movwf	i2c_setDataCompleteCallback@cb+1
  8377  0FA2  01A8               	clrf	i2c_setDataCompleteCallback@p
  8378  0FA3  318F  2703         	fcall	_i2c_setDataCompleteCallback
  8379                           
  8380                           ;i2c_simple_master.c: 114: return i2c_continue;
  8381  0FA5  3004               	movlw	4
  8382  0FA6  0008               	return
  8383  0FA7                     __end_of_wr2RegCompleteHandler:	
  8384                           
  8385                           	psect	text52
  8386  0F03                     __ptext52:	
  8387 ;; *************** function _i2c_setDataCompleteCallback *****************
  8388 ;; Defined at:
  8389 ;;		line 89 in file "mcc_generated_files/drivers/i2c_master.c"
  8390 ;; Parameters:    Size  Location     Type
  8391 ;;  cb              2    6[BANK0 ] PTR FTN(PTR void ,)enum 
  8392 ;;		 -> rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), rd2RegCompleteHandler(1), rd1RegCompleteHandler(1), 
  8393 ;;		 -> wr1RegCompleteHandler(1), Absolute function(1), 
  8394 ;;  p               1    8[BANK0 ] PTR void 
  8395 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  8396 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  8397 ;; Auto vars:     Size  Location     Type
  8398 ;;		None
  8399 ;; Return value:  Size  Location     Type
  8400 ;;                  1    wreg      void 
  8401 ;; Registers used:
  8402 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8403 ;; Tracked objects:
  8404 ;;		On entry : 0/0
  8405 ;;		On exit  : 0/0
  8406 ;;		Unchanged: 0/0
  8407 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8408 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8409 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8410 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8411 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8412 ;;Total ram usage:        4 bytes
  8413 ;; Hardware stack levels used:    1
  8414 ;; Hardware stack levels required when called:    7
  8415 ;; This function calls:
  8416 ;;		_setCallBack
  8417 ;; This function is called by:
  8418 ;;		_wr1RegCompleteHandler
  8419 ;;		_rd1RegCompleteHandler
  8420 ;;		_rd2RegCompleteHandler
  8421 ;;		_wr2RegCompleteHandler
  8422 ;;		_rdBlkRegCompleteHandler
  8423 ;;		_i2c_write1ByteRegister
  8424 ;;		_i2c_read1ByteRegister
  8425 ;;		_i2c_read2ByteRegister
  8426 ;;		_i2c_write2ByteRegister
  8427 ;;		_i2c_readDataBlock
  8428 ;; This function uses a non-reentrant model
  8429 ;;
  8430                           
  8431                           
  8432                           ;psect for function _i2c_setDataCompleteCallback
  8433  0F03                     _i2c_setDataCompleteCallback:	
  8434                           
  8435                           ;i2c_master.c: 91: setCallBack(i2c_dataComplete,cb,p);
  8436                           
  8437                           ;incstack = 0
  8438                           ; Regs used in _i2c_setDataCompleteCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  8439  0F03  0020               	movlb	0	; select bank0
  8440  0F04  0827               	movf	i2c_setDataCompleteCallback@cb+1,w
  8441  0F05  00A2               	movwf	setCallBack@cb+1
  8442  0F06  0826               	movf	i2c_setDataCompleteCallback@cb,w
  8443  0F07  00A1               	movwf	setCallBack@cb
  8444  0F08  0828               	movf	i2c_setDataCompleteCallback@p,w
  8445  0F09  00A9               	movwf	??_i2c_setDataCompleteCallback
  8446  0F0A  0829               	movf	??_i2c_setDataCompleteCallback,w
  8447  0F0B  00A3               	movwf	setCallBack@p
  8448  0F0C  3000               	movlw	0
  8449  0F0D  3186  26AC         	fcall	_setCallBack
  8450  0F0F  0008               	return
  8451  0F10                     __end_of_i2c_setDataCompleteCallback:	
  8452                           
  8453                           	psect	text53
  8454  06AC                     __ptext53:	
  8455 ;; *************** function _setCallBack *****************
  8456 ;; Defined at:
  8457 ;;		line 453 in file "mcc_generated_files/drivers/i2c_master.c"
  8458 ;; Parameters:    Size  Location     Type
  8459 ;;  idx             1    wreg     enum E12355
  8460 ;;  cb              2    1[BANK0 ] PTR FTN(PTR void ,)enum 
  8461 ;;		 -> rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), rd2RegCompleteHandler(1), rd1RegCompleteHandler(1), 
  8462 ;;		 -> i2c_restartWrite(1), wr1RegCompleteHandler(1), Absolute function(1), 
  8463 ;;  p               1    3[BANK0 ] PTR void 
  8464 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  8465 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  8466 ;; Auto vars:     Size  Location     Type
  8467 ;;  idx             1    5[BANK0 ] enum E12355
  8468 ;; Return value:  Size  Location     Type
  8469 ;;                  1    wreg      void 
  8470 ;; Registers used:
  8471 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8472 ;; Tracked objects:
  8473 ;;		On entry : 0/0
  8474 ;;		On exit  : 0/0
  8475 ;;		Unchanged: 0/0
  8476 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8477 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8478 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8479 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8480 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8481 ;;Total ram usage:        5 bytes
  8482 ;; Hardware stack levels used:    1
  8483 ;; Hardware stack levels required when called:    6
  8484 ;; This function calls:
  8485 ;;		Nothing
  8486 ;; This function is called by:
  8487 ;;		_i2c_setDataCompleteCallback
  8488 ;;		_i2c_setAddressNACKCallback
  8489 ;;		_i2c_setWriteCollisionCallback
  8490 ;;		_i2c_setDataNACKCallback
  8491 ;;		_i2c_setTimeOutCallback
  8492 ;; This function uses a non-reentrant model
  8493 ;;
  8494                           
  8495                           
  8496                           ;psect for function _setCallBack
  8497  06AC                     _setCallBack:	
  8498                           
  8499                           ;incstack = 0
  8500                           ; Regs used in _setCallBack: [wreg+fsr1l+fsr1h+status,2+status,0]
  8501                           ;setCallBack@idx stored from wreg
  8502  06AC  0020               	movlb	0	; select bank0
  8503  06AD  00A5               	movwf	setCallBack@idx
  8504                           
  8505                           ;i2c_master.c: 455: if(cb)
  8506  06AE  0821               	movf	setCallBack@cb,w
  8507  06AF  0422               	iorwf	setCallBack@cb+1,w
  8508  06B0  1903               	btfsc	3,2
  8509  06B1  2EC3               	goto	l2436
  8510                           
  8511                           ;i2c_master.c: 456: {
  8512                           ;i2c_master.c: 457: i2c_status.callbackTable[idx] = cb;
  8513  06B2  3525               	lslf	setCallBack@idx,w
  8514  06B3  3EAB               	addlw	(low ((_i2c_status| 0+11)))& (0+255)
  8515  06B4  0086               	movwf	6
  8516  06B5  0187               	clrf	7
  8517  06B6  0821               	movf	setCallBack@cb,w
  8518  06B7  3FC0               	movwi [0]fsr1
  8519  06B8  0822               	movf	setCallBack@cb+1,w
  8520  06B9  3FC1               	movwi [1]fsr1
  8521                           
  8522                           ;i2c_master.c: 458: i2c_status.callbackPayload[idx] = p;
  8523  06BA  0823               	movf	setCallBack@p,w
  8524  06BB  00A4               	movwf	??_setCallBack
  8525  06BC  0825               	movf	setCallBack@idx,w
  8526  06BD  3EB7               	addlw	(low ((_i2c_status| 0+23)))& (0+255)
  8527  06BE  0086               	movwf	6
  8528  06BF  0187               	clrf	7
  8529  06C0  0824               	movf	??_setCallBack,w
  8530  06C1  0081               	movwf	1
  8531                           
  8532                           ;i2c_master.c: 459: }
  8533  06C2  0008               	return
  8534  06C3                     l2436:	
  8535                           
  8536                           ;i2c_master.c: 460: else
  8537                           ;i2c_master.c: 461: {
  8538                           ;i2c_master.c: 462: i2c_status.callbackTable[idx] = returnStop;
  8539  06C3  3525               	lslf	setCallBack@idx,w
  8540  06C4  3EAB               	addlw	(low ((_i2c_status| 0+11)))& (0+255)
  8541  06C5  0086               	movwf	6
  8542  06C6  0187               	clrf	7
  8543  06C7  30F1               	movlw	low _returnStop
  8544  06C8  3FC0               	movwi [0]fsr1
  8545  06C9  300D               	movlw	high _returnStop
  8546  06CA  3FC1               	movwi [1]fsr1
  8547                           
  8548                           ;i2c_master.c: 463: i2c_status.callbackPayload[idx] = (0);
  8549  06CB  0825               	movf	setCallBack@idx,w
  8550  06CC  3EB7               	addlw	(low ((_i2c_status| 0+23)))& (0+255)
  8551  06CD  0086               	movwf	6
  8552  06CE  0187               	clrf	7
  8553  06CF  0181               	clrf	1
  8554  06D0  0008               	return
  8555  06D1                     __end_of_setCallBack:	
  8556                           
  8557                           	psect	text54
  8558  0F7C                     __ptext54:	
  8559 ;; *************** function _i2c_setBuffer *****************
  8560 ;; Defined at:
  8561 ;;		line 184 in file "mcc_generated_files/drivers/i2c_master.c"
  8562 ;; Parameters:    Size  Location     Type
  8563 ;;  buffer          1    wreg     PTR void 
  8564 ;;		 -> i2c_readDataBlock@reg(1), i2c_readDataBlock@d(3), i2c_write2ByteRegister@reg(1), i2c_write2ByteRegister@data(2),
      + 
  8565 ;;		 -> i2c_read2ByteRegister@reg(1), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@reg(1), i2c_read1ByteRegist
      +er@d2(1), 
  8566 ;;		 -> i2c_write1ByteRegister@reg(1), i2c_write1ByteRegister@data(1), NULL(0), writebuffer(17), 
  8567 ;;  bufferSize      2    1[BANK0 ] unsigned int 
  8568 ;; Auto vars:     Size  Location     Type
  8569 ;;  buffer          1    4[BANK0 ] PTR void 
  8570 ;;		 -> i2c_readDataBlock@reg(1), i2c_readDataBlock@d(3), i2c_write2ByteRegister@reg(1), i2c_write2ByteRegister@data(2),
      + 
  8571 ;;		 -> i2c_read2ByteRegister@reg(1), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@reg(1), i2c_read1ByteRegist
      +er@d2(1), 
  8572 ;;		 -> i2c_write1ByteRegister@reg(1), i2c_write1ByteRegister@data(1), NULL(0), writebuffer(17), 
  8573 ;; Return value:  Size  Location     Type
  8574 ;;                  1    wreg      void 
  8575 ;; Registers used:
  8576 ;;		wreg
  8577 ;; Tracked objects:
  8578 ;;		On entry : 0/0
  8579 ;;		On exit  : 0/0
  8580 ;;		Unchanged: 0/0
  8581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8582 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8583 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8584 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8585 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8586 ;;Total ram usage:        4 bytes
  8587 ;; Hardware stack levels used:    1
  8588 ;; Hardware stack levels required when called:    6
  8589 ;; This function calls:
  8590 ;;		Nothing
  8591 ;; This function is called by:
  8592 ;;		_wr1RegCompleteHandler
  8593 ;;		_i2c_writeNBytes
  8594 ;;		_rd1RegCompleteHandler
  8595 ;;		_rd2RegCompleteHandler
  8596 ;;		_wr2RegCompleteHandler
  8597 ;;		_rdBlkRegCompleteHandler
  8598 ;;		_i2c_write1ByteRegister
  8599 ;;		_i2c_read1ByteRegister
  8600 ;;		_i2c_read2ByteRegister
  8601 ;;		_i2c_write2ByteRegister
  8602 ;;		_i2c_readDataBlock
  8603 ;;		_i2c_readNBytes
  8604 ;; This function uses a non-reentrant model
  8605 ;;
  8606                           
  8607                           
  8608                           ;psect for function _i2c_setBuffer
  8609  0F7C                     _i2c_setBuffer:	
  8610                           
  8611                           ;incstack = 0
  8612                           ; Regs used in _i2c_setBuffer: [wreg]
  8613                           ;i2c_setBuffer@buffer stored from wreg
  8614  0F7C  0020               	movlb	0	; select bank0
  8615  0F7D  00A4               	movwf	i2c_setBuffer@buffer
  8616                           
  8617                           ;i2c_master.c: 186: if(i2c_status.bufferFree)
  8618  0F7E  0021               	movlb	1	; select bank1
  8619  0F7F  1D20               	btfss	_i2c_status^(0+128),2
  8620  0F80  0008               	return
  8621                           
  8622                           ;i2c_master.c: 187: {
  8623                           ;i2c_master.c: 188: i2c_status.data_ptr = buffer;
  8624  0F81  0020               	movlb	0	; select bank0
  8625  0F82  0824               	movf	i2c_setBuffer@buffer,w
  8626  0F83  00A3               	movwf	??_i2c_setBuffer
  8627  0F84  0823               	movf	??_i2c_setBuffer,w
  8628  0F85  0021               	movlb	1	; select bank1
  8629  0F86  00A2               	movwf	(low ((_i2c_status| 0+2)))^(0+128)
  8630                           
  8631                           ;i2c_master.c: 189: i2c_status.data_length = bufferSize;
  8632  0F87  0020               	movlb	0	; select bank0
  8633  0F88  0822               	movf	i2c_setBuffer@bufferSize+1,w
  8634  0F89  0021               	movlb	1	; select bank1
  8635  0F8A  00A4               	movwf	((_i2c_status+1)^(0+128)+3)
  8636  0F8B  0020               	movlb	0	; select bank0
  8637  0F8C  0821               	movf	i2c_setBuffer@bufferSize,w
  8638  0F8D  0021               	movlb	1	; select bank1
  8639  0F8E  00A3               	movwf	(_i2c_status^(0+128)+3)
  8640                           
  8641                           ;i2c_master.c: 190: i2c_status.bufferFree = 0;
  8642  0F8F  1120               	bcf	_i2c_status^(0+128),2
  8643  0F90  0008               	return
  8644  0F91                     __end_of_i2c_setBuffer:	
  8645                           
  8646                           	psect	text55
  8647  0D88                     __ptext55:	
  8648 ;; *************** function _i2c_driver_stop *****************
  8649 ;; Defined at:
  8650 ;;		line 156 in file "mcc_generated_files/i2c_driver.c"
  8651 ;; Parameters:    Size  Location     Type
  8652 ;;		None
  8653 ;; Auto vars:     Size  Location     Type
  8654 ;;		None
  8655 ;; Return value:  Size  Location     Type
  8656 ;;                  1    wreg      void 
  8657 ;; Registers used:
  8658 ;;		None
  8659 ;; Tracked objects:
  8660 ;;		On entry : 0/0
  8661 ;;		On exit  : 0/0
  8662 ;;		Unchanged: 0/0
  8663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8664 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8665 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8666 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8667 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8668 ;;Total ram usage:        0 bytes
  8669 ;; Hardware stack levels used:    1
  8670 ;; Hardware stack levels required when called:    6
  8671 ;; This function calls:
  8672 ;;		Nothing
  8673 ;; This function is called by:
  8674 ;;		_do_I2C_SEND_STOP
  8675 ;; This function uses a non-reentrant model
  8676 ;;
  8677                           
  8678                           
  8679                           ;psect for function _i2c_driver_stop
  8680  0D88                     _i2c_driver_stop:	
  8681                           
  8682                           ;i2c_driver.c: 158: SSP1CON2bits.PEN = 1;
  8683                           
  8684                           ;incstack = 0
  8685                           ; Regs used in _i2c_driver_stop: []
  8686  0D88  0024               	movlb	4	; select bank4
  8687  0D89  1516               	bsf	22,2	;volatile
  8688  0D8A  0008               	return
  8689  0D8B                     __end_of_i2c_driver_stop:	
  8690                           
  8691                           	psect	text56
  8692  0D85                     __ptext56:	
  8693 ;; *************** function _i2c_driver_restart *****************
  8694 ;; Defined at:
  8695 ;;		line 151 in file "mcc_generated_files/i2c_driver.c"
  8696 ;; Parameters:    Size  Location     Type
  8697 ;;		None
  8698 ;; Auto vars:     Size  Location     Type
  8699 ;;		None
  8700 ;; Return value:  Size  Location     Type
  8701 ;;                  1    wreg      void 
  8702 ;; Registers used:
  8703 ;;		None
  8704 ;; Tracked objects:
  8705 ;;		On entry : 0/0
  8706 ;;		On exit  : 0/0
  8707 ;;		Unchanged: 0/0
  8708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8709 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8710 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8711 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8712 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8713 ;;Total ram usage:        0 bytes
  8714 ;; Hardware stack levels used:    1
  8715 ;; Hardware stack levels required when called:    6
  8716 ;; This function calls:
  8717 ;;		Nothing
  8718 ;; This function is called by:
  8719 ;;		_do_I2C_SEND_RESTART_READ
  8720 ;;		_do_I2C_SEND_RESTART_WRITE
  8721 ;;		_do_I2C_SEND_RESTART
  8722 ;; This function uses a non-reentrant model
  8723 ;;
  8724                           
  8725                           
  8726                           ;psect for function _i2c_driver_restart
  8727  0D85                     _i2c_driver_restart:	
  8728                           
  8729                           ;i2c_driver.c: 153: SSP1CON2bits.RSEN = 1;
  8730                           
  8731                           ;incstack = 0
  8732                           ; Regs used in _i2c_driver_restart: []
  8733  0D85  0024               	movlb	4	; select bank4
  8734  0D86  1496               	bsf	22,1	;volatile
  8735  0D87  0008               	return
  8736  0D88                     __end_of_i2c_driver_restart:	
  8737                           
  8738                           	psect	text57
  8739  0DB8                     __ptext57:	
  8740 ;; *************** function _i2c_driver_sendACK *****************
  8741 ;; Defined at:
  8742 ;;		line 196 in file "mcc_generated_files/i2c_driver.c"
  8743 ;; Parameters:    Size  Location     Type
  8744 ;;		None
  8745 ;; Auto vars:     Size  Location     Type
  8746 ;;		None
  8747 ;; Return value:  Size  Location     Type
  8748 ;;                  1    wreg      void 
  8749 ;; Registers used:
  8750 ;;		None
  8751 ;; Tracked objects:
  8752 ;;		On entry : 0/0
  8753 ;;		On exit  : 0/0
  8754 ;;		Unchanged: 0/0
  8755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8756 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8757 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8758 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8759 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8760 ;;Total ram usage:        0 bytes
  8761 ;; Hardware stack levels used:    1
  8762 ;; Hardware stack levels required when called:    6
  8763 ;; This function calls:
  8764 ;;		Nothing
  8765 ;; This function is called by:
  8766 ;;		_do_I2C_DO_ACK
  8767 ;;		_do_I2C_RX
  8768 ;; This function uses a non-reentrant model
  8769 ;;
  8770                           
  8771                           
  8772                           ;psect for function _i2c_driver_sendACK
  8773  0DB8                     _i2c_driver_sendACK:	
  8774                           
  8775                           ;i2c_driver.c: 198: SSP1CON2bits.ACKDT = 0;
  8776                           
  8777                           ;incstack = 0
  8778                           ; Regs used in _i2c_driver_sendACK: []
  8779  0DB8  0024               	movlb	4	; select bank4
  8780  0DB9  1296               	bcf	22,5	;volatile
  8781                           
  8782                           ;i2c_driver.c: 199: SSP1CON2bits.ACKEN = 1;
  8783  0DBA  1616               	bsf	22,4	;volatile
  8784  0DBB  0008               	return
  8785  0DBC                     __end_of_i2c_driver_sendACK:	
  8786                           
  8787                           	psect	text58
  8788  0D82                     __ptext58:	
  8789 ;; *************** function _i2c_driver_start *****************
  8790 ;; Defined at:
  8791 ;;		line 146 in file "mcc_generated_files/i2c_driver.c"
  8792 ;; Parameters:    Size  Location     Type
  8793 ;;		None
  8794 ;; Auto vars:     Size  Location     Type
  8795 ;;		None
  8796 ;; Return value:  Size  Location     Type
  8797 ;;                  1    wreg      void 
  8798 ;; Registers used:
  8799 ;;		None
  8800 ;; Tracked objects:
  8801 ;;		On entry : 0/0
  8802 ;;		On exit  : 0/0
  8803 ;;		Unchanged: 0/0
  8804 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8805 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8806 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8807 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8808 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8809 ;;Total ram usage:        0 bytes
  8810 ;; Hardware stack levels used:    1
  8811 ;; Hardware stack levels required when called:    6
  8812 ;; This function calls:
  8813 ;;		Nothing
  8814 ;; This function is called by:
  8815 ;;		_i2c_masterOperation
  8816 ;; This function uses a non-reentrant model
  8817 ;;
  8818                           
  8819                           
  8820                           ;psect for function _i2c_driver_start
  8821  0D82                     _i2c_driver_start:	
  8822                           
  8823                           ;i2c_driver.c: 148: SSP1CON2bits.SEN = 1;
  8824                           
  8825                           ;incstack = 0
  8826                           ; Regs used in _i2c_driver_start: []
  8827  0D82  0024               	movlb	4	; select bank4
  8828  0D83  1416               	bsf	22,0	;volatile
  8829  0D84  0008               	return
  8830  0D85                     __end_of_i2c_driver_start:	
  8831                           
  8832                           	psect	text59
  8833  07D7                     __ptext59:	
  8834 ;; *************** function _i2c_close *****************
  8835 ;; Defined at:
  8836 ;;		line 162 in file "mcc_generated_files/drivers/i2c_master.c"
  8837 ;; Parameters:    Size  Location     Type
  8838 ;;		None
  8839 ;; Auto vars:     Size  Location     Type
  8840 ;;  ret             1    2[BANK0 ] enum E12166
  8841 ;; Return value:  Size  Location     Type
  8842 ;;                  1    wreg      enum E92
  8843 ;; Registers used:
  8844 ;;		wreg, status,2, status,0, pclath, cstack
  8845 ;; Tracked objects:
  8846 ;;		On entry : 0/0
  8847 ;;		On exit  : 0/0
  8848 ;;		Unchanged: 0/0
  8849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8850 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8851 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8852 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8853 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8854 ;;Total ram usage:        2 bytes
  8855 ;; Hardware stack levels used:    1
  8856 ;; Hardware stack levels required when called:    7
  8857 ;; This function calls:
  8858 ;;		_mssp_clearIRQ
  8859 ;;		_mssp_disableIRQ
  8860 ;; This function is called by:
  8861 ;;		_i2c_writeNBytes
  8862 ;;		_i2c_write1ByteRegister
  8863 ;;		_i2c_read1ByteRegister
  8864 ;;		_i2c_read2ByteRegister
  8865 ;;		_i2c_write2ByteRegister
  8866 ;;		_i2c_readDataBlock
  8867 ;;		_i2c_readNBytes
  8868 ;; This function uses a non-reentrant model
  8869 ;;
  8870                           
  8871                           
  8872                           ;psect for function _i2c_close
  8873  07D7                     _i2c_close:	
  8874                           
  8875                           ;i2c_master.c: 164: i2c_error_t ret = I2C_BUSY;
  8876                           
  8877                           ;incstack = 0
  8878                           ; Regs used in _i2c_close: [wreg+status,2+status,0+pclath+cstack]
  8879  07D7  0020               	movlb	0	; select bank0
  8880  07D8  01A2               	clrf	i2c_close@ret
  8881  07D9  0AA2               	incf	i2c_close@ret,f
  8882                           
  8883                           ;i2c_master.c: 165: if(!i2c_status.busy)
  8884  07DA  0021               	movlb	1	; select bank1
  8885  07DB  1820               	btfsc	_i2c_status^(0+128),0
  8886  07DC  2FEF               	goto	l581
  8887                           
  8888                           ;i2c_master.c: 166: {
  8889                           ;i2c_master.c: 167: i2c_status.inUse = 0;
  8890  07DD  10A0               	bcf	_i2c_status^(0+128),1
  8891                           
  8892                           ;i2c_master.c: 169: i2c_status.address = 0xff;
  8893  07DE  30FF               	movlw	255
  8894  07DF  0020               	movlb	0	; select bank0
  8895  07E0  00A1               	movwf	??_i2c_close
  8896  07E1  0821               	movf	??_i2c_close,w
  8897  07E2  0021               	movlb	1	; select bank1
  8898  07E3  00A1               	movwf	(_i2c_status^(0+128)+1)
  8899                           
  8900                           ;i2c_master.c: 170: mssp_clearIRQ();
  8901  07E4  318D  257C  3187   	fcall	_mssp_clearIRQ
  8902                           
  8903                           ;i2c_master.c: 171: mssp_disableIRQ();
  8904  07E7  318D  257F         	fcall	_mssp_disableIRQ
  8905                           
  8906                           ;i2c_master.c: 172: ret = i2c_status.error;
  8907  07E9  0021               	movlb	1	; select bank1
  8908  07EA  082A               	movf	(_i2c_status^(0+128)+10),w
  8909  07EB  0020               	movlb	0	; select bank0
  8910  07EC  00A1               	movwf	??_i2c_close
  8911  07ED  0821               	movf	??_i2c_close,w
  8912  07EE  00A2               	movwf	i2c_close@ret
  8913  07EF                     l581:	
  8914                           
  8915                           ;i2c_master.c: 173: }
  8916                           ;i2c_master.c: 174: return ret;
  8917  07EF  0020               	movlb	0	; select bank0
  8918  07F0  0822               	movf	i2c_close@ret,w
  8919  07F1  0008               	return
  8920  07F2                     __end_of_i2c_close:	
  8921                           
  8922                           	psect	text60
  8923  0D7F                     __ptext60:	
  8924 ;; *************** function _mssp_disableIRQ *****************
  8925 ;; Defined at:
  8926 ;;		line 48 in file "mcc_generated_files/i2c_driver.c"
  8927 ;; Parameters:    Size  Location     Type
  8928 ;;		None
  8929 ;; Auto vars:     Size  Location     Type
  8930 ;;		None
  8931 ;; Return value:  Size  Location     Type
  8932 ;;                  1    wreg      void 
  8933 ;; Registers used:
  8934 ;;		None
  8935 ;; Tracked objects:
  8936 ;;		On entry : 0/0
  8937 ;;		On exit  : 0/0
  8938 ;;		Unchanged: 0/0
  8939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8940 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8941 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8942 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8943 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8944 ;;Total ram usage:        0 bytes
  8945 ;; Hardware stack levels used:    1
  8946 ;; Hardware stack levels required when called:    6
  8947 ;; This function calls:
  8948 ;;		Nothing
  8949 ;; This function is called by:
  8950 ;;		_i2c_close
  8951 ;;		_i2c_setTimeOut
  8952 ;; This function uses a non-reentrant model
  8953 ;;
  8954                           
  8955                           
  8956                           ;psect for function _mssp_disableIRQ
  8957  0D7F                     _mssp_disableIRQ:	
  8958                           
  8959                           ;i2c_driver.c: 50: PIE1bits.SSP1IE = 0;
  8960                           
  8961                           ;incstack = 0
  8962                           ; Regs used in _mssp_disableIRQ: []
  8963  0D7F  0021               	movlb	1	; select bank1
  8964  0D80  1190               	bcf	16,3	;volatile
  8965  0D81  0008               	return
  8966  0D82                     __end_of_mssp_disableIRQ:	
  8967                           
  8968                           	psect	text61
  8969  0D7C                     __ptext61:	
  8970 ;; *************** function _mssp_clearIRQ *****************
  8971 ;; Defined at:
  8972 ;;		line 53 in file "mcc_generated_files/i2c_driver.c"
  8973 ;; Parameters:    Size  Location     Type
  8974 ;;		None
  8975 ;; Auto vars:     Size  Location     Type
  8976 ;;		None
  8977 ;; Return value:  Size  Location     Type
  8978 ;;                  1    wreg      void 
  8979 ;; Registers used:
  8980 ;;		None
  8981 ;; Tracked objects:
  8982 ;;		On entry : 0/0
  8983 ;;		On exit  : 0/0
  8984 ;;		Unchanged: 0/0
  8985 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8986 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8987 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8988 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8989 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8990 ;;Total ram usage:        0 bytes
  8991 ;; Hardware stack levels used:    1
  8992 ;; Hardware stack levels required when called:    6
  8993 ;; This function calls:
  8994 ;;		Nothing
  8995 ;; This function is called by:
  8996 ;;		_i2c_open
  8997 ;;		_i2c_close
  8998 ;;		_i2c_ISR
  8999 ;; This function uses a non-reentrant model
  9000 ;;
  9001                           
  9002                           
  9003                           ;psect for function _mssp_clearIRQ
  9004  0D7C                     _mssp_clearIRQ:	
  9005                           
  9006                           ;i2c_driver.c: 55: PIR1bits.SSP1IF = 0;
  9007                           
  9008                           ;incstack = 0
  9009                           ; Regs used in _mssp_clearIRQ: []
  9010  0D7C  0020               	movlb	0	; select bank0
  9011  0D7D  1190               	bcf	16,3	;volatile
  9012  0D7E  0008               	return
  9013  0D7F                     __end_of_mssp_clearIRQ:	
  9014                           
  9015                           	psect	text62
  9016  02B3                     __ptext62:	
  9017 ;; *************** function ___awdiv *****************
  9018 ;; Defined at:
  9019 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  9020 ;; Parameters:    Size  Location     Type
  9021 ;;  divisor         2    1[BANK0 ] int 
  9022 ;;  dividend        2    3[BANK0 ] int 
  9023 ;; Auto vars:     Size  Location     Type
  9024 ;;  quotient        2    8[BANK0 ] int 
  9025 ;;  sign            1    7[BANK0 ] unsigned char 
  9026 ;;  counter         1    6[BANK0 ] unsigned char 
  9027 ;; Return value:  Size  Location     Type
  9028 ;;                  2    1[BANK0 ] int 
  9029 ;; Registers used:
  9030 ;;		wreg, status,2, status,0
  9031 ;; Tracked objects:
  9032 ;;		On entry : 0/0
  9033 ;;		On exit  : 0/0
  9034 ;;		Unchanged: 0/0
  9035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9036 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9037 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9038 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9039 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9040 ;;Total ram usage:        9 bytes
  9041 ;; Hardware stack levels used:    1
  9042 ;; Hardware stack levels required when called:    6
  9043 ;; This function calls:
  9044 ;;		Nothing
  9045 ;; This function is called by:
  9046 ;;		_writeDisplay
  9047 ;; This function uses a non-reentrant model
  9048 ;;
  9049                           
  9050                           
  9051                           ;psect for function ___awdiv
  9052  02B3                     ___awdiv:	
  9053                           
  9054                           ;incstack = 0
  9055                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  9056  02B3  0020               	movlb	0	; select bank0
  9057  02B4  01A7               	clrf	___awdiv@sign
  9058  02B5  1FA2               	btfss	___awdiv@divisor+1,7
  9059  02B6  2ABE               	goto	l2890
  9060  02B7  09A1               	comf	___awdiv@divisor,f
  9061  02B8  09A2               	comf	___awdiv@divisor+1,f
  9062  02B9  0AA1               	incf	___awdiv@divisor,f
  9063  02BA  1903               	skipnz
  9064  02BB  0AA2               	incf	___awdiv@divisor+1,f
  9065  02BC  01A7               	clrf	___awdiv@sign
  9066  02BD  0AA7               	incf	___awdiv@sign,f
  9067  02BE                     l2890:	
  9068  02BE  1FA4               	btfss	___awdiv@dividend+1,7
  9069  02BF  2AC9               	goto	l2896
  9070  02C0  09A3               	comf	___awdiv@dividend,f
  9071  02C1  09A4               	comf	___awdiv@dividend+1,f
  9072  02C2  0AA3               	incf	___awdiv@dividend,f
  9073  02C3  1903               	skipnz
  9074  02C4  0AA4               	incf	___awdiv@dividend+1,f
  9075  02C5  3001               	movlw	1
  9076  02C6  00A5               	movwf	??___awdiv
  9077  02C7  0825               	movf	??___awdiv,w
  9078  02C8  06A7               	xorwf	___awdiv@sign,f
  9079  02C9                     l2896:	
  9080  02C9  01A8               	clrf	___awdiv@quotient
  9081  02CA  01A9               	clrf	___awdiv@quotient+1
  9082  02CB  0821               	movf	___awdiv@divisor,w
  9083  02CC  0422               	iorwf	___awdiv@divisor+1,w
  9084  02CD  1903               	btfsc	3,2
  9085  02CE  2AF8               	goto	l2918
  9086  02CF  01A6               	clrf	___awdiv@counter
  9087  02D0  0AA6               	incf	___awdiv@counter,f
  9088  02D1                     l2906:	
  9089  02D1  1BA2               	btfsc	___awdiv@divisor+1,7
  9090  02D2  2ADD               	goto	l2908
  9091  02D3  3001               	movlw	1
  9092  02D4                     u1515:	
  9093  02D4  35A1               	lslf	___awdiv@divisor,f
  9094  02D5  0DA2               	rlf	___awdiv@divisor+1,f
  9095  02D6  0B89               	decfsz	9,f
  9096  02D7  2AD4               	goto	u1515
  9097  02D8  3001               	movlw	1
  9098  02D9  00A5               	movwf	??___awdiv
  9099  02DA  0825               	movf	??___awdiv,w
  9100  02DB  07A6               	addwf	___awdiv@counter,f
  9101  02DC  2AD1               	goto	l2906
  9102  02DD                     l2908:	
  9103  02DD  3001               	movlw	1
  9104  02DE                     u1535:	
  9105  02DE  35A8               	lslf	___awdiv@quotient,f
  9106  02DF  0DA9               	rlf	___awdiv@quotient+1,f
  9107  02E0  0B89               	decfsz	9,f
  9108  02E1  2ADE               	goto	u1535
  9109  02E2  0822               	movf	___awdiv@divisor+1,w
  9110  02E3  0224               	subwf	___awdiv@dividend+1,w
  9111  02E4  1D03               	skipz
  9112  02E5  2AE8               	goto	u1545
  9113  02E6  0821               	movf	___awdiv@divisor,w
  9114  02E7  0223               	subwf	___awdiv@dividend,w
  9115  02E8                     u1545:	
  9116  02E8  1C03               	skipc
  9117  02E9  2AEF               	goto	l2914
  9118  02EA  0821               	movf	___awdiv@divisor,w
  9119  02EB  02A3               	subwf	___awdiv@dividend,f
  9120  02EC  0822               	movf	___awdiv@divisor+1,w
  9121  02ED  3BA4               	subwfb	___awdiv@dividend+1,f
  9122  02EE  1428               	bsf	___awdiv@quotient,0
  9123  02EF                     l2914:	
  9124  02EF  3001               	movlw	1
  9125  02F0                     u1555:	
  9126  02F0  36A2               	lsrf	___awdiv@divisor+1,f
  9127  02F1  0CA1               	rrf	___awdiv@divisor,f
  9128  02F2  0B89               	decfsz	9,f
  9129  02F3  2AF0               	goto	u1555
  9130  02F4  3001               	movlw	1
  9131  02F5  02A6               	subwf	___awdiv@counter,f
  9132  02F6  1D03               	btfss	3,2
  9133  02F7  2ADD               	goto	l2908
  9134  02F8                     l2918:	
  9135  02F8  0827               	movf	___awdiv@sign,w
  9136  02F9  1903               	btfsc	3,2
  9137  02FA  2B00               	goto	l2922
  9138  02FB  09A8               	comf	___awdiv@quotient,f
  9139  02FC  09A9               	comf	___awdiv@quotient+1,f
  9140  02FD  0AA8               	incf	___awdiv@quotient,f
  9141  02FE  1903               	skipnz
  9142  02FF  0AA9               	incf	___awdiv@quotient+1,f
  9143  0300                     l2922:	
  9144  0300  0829               	movf	___awdiv@quotient+1,w
  9145  0301  00A2               	movwf	?___awdiv+1
  9146  0302  0828               	movf	___awdiv@quotient,w
  9147  0303  00A1               	movwf	?___awdiv
  9148  0304  0008               	return
  9149  0305                     __end_of___awdiv:	
  9150                           
  9151                           	psect	text63
  9152  0F6A                     __ptext63:	
  9153 ;; *************** function _clearPixels *****************
  9154 ;; Defined at:
  9155 ;;		line 93 in file "main.c"
  9156 ;; Parameters:    Size  Location     Type
  9157 ;;		None
  9158 ;; Auto vars:     Size  Location     Type
  9159 ;;		None
  9160 ;; Return value:  Size  Location     Type
  9161 ;;                  1    wreg      void 
  9162 ;; Registers used:
  9163 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9164 ;; Tracked objects:
  9165 ;;		On entry : 0/0
  9166 ;;		On exit  : 0/0
  9167 ;;		Unchanged: 0/0
  9168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9169 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9170 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9171 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9172 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9173 ;;Total ram usage:        1 bytes
  9174 ;; Hardware stack levels used:    1
  9175 ;; Hardware stack levels required when called:    6
  9176 ;; This function calls:
  9177 ;;		Nothing
  9178 ;; This function is called by:
  9179 ;;		_endGame
  9180 ;;		_main
  9181 ;; This function uses a non-reentrant model
  9182 ;;
  9183                           
  9184                           
  9185                           ;psect for function _clearPixels
  9186  0F6A                     _clearPixels:	
  9187                           
  9188                           ;main.c: 94: for (i = 0; i < 8; i++) {
  9189                           
  9190                           ;incstack = 0
  9191                           ; Regs used in _clearPixels: [wreg+fsr1l+fsr1h+status,2+status,0]
  9192  0F6A  0020               	movlb	0	; select bank0
  9193  0F6B  01DB               	clrf	_i
  9194  0F6C                     L2:	
  9195  0F6C  3008               	movlw	8
  9196  0F6D  025B               	subwf	_i,w
  9197  0F6E  1803               	btfsc	3,0
  9198  0F6F  0008               	return
  9199                           
  9200                           ;main.c: 95: pixelbuffer[i] = 0;
  9201  0F70  355B               	lslf	_i,w
  9202  0F71  3EBD               	addlw	(low (_pixelbuffer| 0))& (0+255)
  9203  0F72  0086               	movwf	6
  9204  0F73  0187               	clrf	7
  9205  0F74  3000               	movlw	0
  9206  0F75  3FC0               	movwi [0]fsr1
  9207  0F76  3FC1               	movwi [1]fsr1
  9208  0F77  3001               	movlw	1
  9209  0F78  00A1               	movwf	??_clearPixels
  9210  0F79  0821               	movf	??_clearPixels,w
  9211  0F7A  07DB               	addwf	_i,f
  9212  0F7B  2F6C               	goto	L2
  9213  0F7C                     __end_of_clearPixels:	
  9214                           
  9215                           	psect	text64
  9216  079B                     __ptext64:	
  9217 ;; *************** function _drawWalls *****************
  9218 ;; Defined at:
  9219 ;;		line 129 in file "main.c"
  9220 ;; Parameters:    Size  Location     Type
  9221 ;;		None
  9222 ;; Auto vars:     Size  Location     Type
  9223 ;;		None
  9224 ;; Return value:  Size  Location     Type
  9225 ;;                  1    wreg      void 
  9226 ;; Registers used:
  9227 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9228 ;; Tracked objects:
  9229 ;;		On entry : 0/0
  9230 ;;		On exit  : 0/0
  9231 ;;		Unchanged: 0/0
  9232 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9233 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9234 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9235 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9236 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9237 ;;Total ram usage:        2 bytes
  9238 ;; Hardware stack levels used:    1
  9239 ;; Hardware stack levels required when called:    7
  9240 ;; This function calls:
  9241 ;;		_reverse
  9242 ;; This function is called by:
  9243 ;;		_main
  9244 ;; This function uses a non-reentrant model
  9245 ;;
  9246                           
  9247                           
  9248                           ;psect for function _drawWalls
  9249  079B                     _drawWalls:	
  9250                           
  9251                           ;main.c: 130: for (i = 0; i < 8; i++) {
  9252                           
  9253                           ;incstack = 0
  9254                           ; Regs used in _drawWalls: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9255  079B  0020               	movlb	0	; select bank0
  9256  079C  01DB               	clrf	_i
  9257  079D                     L3:	
  9258  079D  3008               	movlw	8
  9259  079E  025B               	subwf	_i,w
  9260  079F  1803               	btfsc	3,0
  9261  07A0  0008               	return
  9262                           
  9263                           ;main.c: 131: pixelbuffer[i] |= reverse(walls[i]);
  9264  07A1  085B               	movf	_i,w
  9265  07A2  3E47               	addlw	(low (_walls| 0))& (0+255)
  9266  07A3  0086               	movwf	6
  9267  07A4  0187               	clrf	7
  9268  07A5  0801               	movf	1,w
  9269  07A6  3185  2544  3187   	fcall	_reverse
  9270  07A9  0020               	movlb	0	; select bank0
  9271  07AA  00A5               	movwf	??_drawWalls
  9272  07AB  01A6               	clrf	??_drawWalls+1
  9273  07AC  355B               	lslf	_i,w
  9274  07AD  3EBD               	addlw	(low (_pixelbuffer| 0))& (0+255)
  9275  07AE  0086               	movwf	6
  9276  07AF  0187               	clrf	7
  9277  07B0  0825               	movf	??_drawWalls,w
  9278  07B1  0481               	iorwf	1,f
  9279  07B2  3141               	addfsr 1,1
  9280  07B3  0826               	movf	??_drawWalls+1,w
  9281  07B4  0481               	iorwf	1,f
  9282  07B5  3001               	movlw	1
  9283  07B6  00A5               	movwf	??_drawWalls
  9284  07B7  0825               	movf	??_drawWalls,w
  9285  07B8  07DB               	addwf	_i,f
  9286  07B9  2F9D               	goto	L3
  9287  07BA                     __end_of_drawWalls:	
  9288                           
  9289                           	psect	text65
  9290  0544                     __ptext65:	
  9291 ;; *************** function _reverse *****************
  9292 ;; Defined at:
  9293 ;;		line 122 in file "main.c"
  9294 ;; Parameters:    Size  Location     Type
  9295 ;;  b               1    wreg     unsigned char 
  9296 ;; Auto vars:     Size  Location     Type
  9297 ;;  b               1    4[BANK0 ] unsigned char 
  9298 ;; Return value:  Size  Location     Type
  9299 ;;                  1    wreg      unsigned char 
  9300 ;; Registers used:
  9301 ;;		wreg, status,2, status,0
  9302 ;; Tracked objects:
  9303 ;;		On entry : 0/0
  9304 ;;		On exit  : 0/0
  9305 ;;		Unchanged: 0/0
  9306 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9307 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9308 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9309 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9310 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9311 ;;Total ram usage:        4 bytes
  9312 ;; Hardware stack levels used:    1
  9313 ;; Hardware stack levels required when called:    6
  9314 ;; This function calls:
  9315 ;;		Nothing
  9316 ;; This function is called by:
  9317 ;;		_drawWalls
  9318 ;; This function uses a non-reentrant model
  9319 ;;
  9320                           
  9321                           
  9322                           ;psect for function _reverse
  9323  0544                     _reverse:	
  9324                           
  9325                           ;incstack = 0
  9326                           ; Regs used in _reverse: [wreg+status,2+status,0]
  9327                           ;reverse@b stored from wreg
  9328  0544  0020               	movlb	0	; select bank0
  9329  0545  00A4               	movwf	reverse@b
  9330                           
  9331                           ;main.c: 123: b = (b & 0xF0) >> 4 | (b & 0x0F) << 4;
  9332  0546  0824               	movf	reverse@b,w
  9333  0547  390F               	andlw	15
  9334  0548  00A1               	movwf	??_reverse
  9335  0549  3004               	movlw	4
  9336  054A                     u1735:	
  9337  054A  35A1               	lslf	??_reverse,f
  9338  054B  0B89               	decfsz	9,f
  9339  054C  2D4A               	goto	u1735
  9340  054D  0824               	movf	reverse@b,w
  9341  054E  00A2               	movwf	??_reverse+1
  9342  054F  3004               	movlw	4
  9343  0550                     u1745:	
  9344  0550  36A2               	lsrf	??_reverse+1,f
  9345  0551  0B89               	decfsz	9,f
  9346  0552  2D50               	goto	u1745
  9347  0553  0822               	movf	??_reverse+1,w
  9348  0554  390F               	andlw	15
  9349  0555  0421               	iorwf	??_reverse,w
  9350  0556  00A3               	movwf	??_reverse+2
  9351  0557  0823               	movf	??_reverse+2,w
  9352  0558  00A4               	movwf	reverse@b
  9353                           
  9354                           ;main.c: 124: b = (b & 0xCC) >> 2 | (b & 0x33) << 2;
  9355  0559  0824               	movf	reverse@b,w
  9356  055A  3933               	andlw	51
  9357  055B  00A1               	movwf	??_reverse
  9358  055C  3002               	movlw	2
  9359  055D                     u1755:	
  9360  055D  35A1               	lslf	??_reverse,f
  9361  055E  0B89               	decfsz	9,f
  9362  055F  2D5D               	goto	u1755
  9363  0560  0824               	movf	reverse@b,w
  9364  0561  00A2               	movwf	??_reverse+1
  9365  0562  3002               	movlw	2
  9366  0563                     u1765:	
  9367  0563  36A2               	lsrf	??_reverse+1,f
  9368  0564  0B89               	decfsz	9,f
  9369  0565  2D63               	goto	u1765
  9370  0566  0822               	movf	??_reverse+1,w
  9371  0567  3933               	andlw	51
  9372  0568  0421               	iorwf	??_reverse,w
  9373  0569  00A3               	movwf	??_reverse+2
  9374  056A  0823               	movf	??_reverse+2,w
  9375  056B  00A4               	movwf	reverse@b
  9376                           
  9377                           ;main.c: 125: b = (b & 0xAA) >> 1 | (b & 0x55) << 1;
  9378  056C  0824               	movf	reverse@b,w
  9379  056D  3955               	andlw	85
  9380  056E  00A1               	movwf	??_reverse
  9381  056F  3001               	movlw	1
  9382  0570                     u1775:	
  9383  0570  35A1               	lslf	??_reverse,f
  9384  0571  0B89               	decfsz	9,f
  9385  0572  2D70               	goto	u1775
  9386  0573  3624               	lsrf	reverse@b,w
  9387  0574  3955               	andlw	85
  9388  0575  0421               	iorwf	??_reverse,w
  9389  0576  00A2               	movwf	??_reverse+1
  9390  0577  0822               	movf	??_reverse+1,w
  9391  0578  00A4               	movwf	reverse@b
  9392                           
  9393                           ;main.c: 126: return b;
  9394  0579  0824               	movf	reverse@b,w
  9395  057A  0008               	return
  9396  057B                     __end_of_reverse:	
  9397                           
  9398                           	psect	text66
  9399  005B                     __ptext66:	
  9400 ;; *************** function _drawPixel *****************
  9401 ;; Defined at:
  9402 ;;		line 79 in file "main.c"
  9403 ;; Parameters:    Size  Location     Type
  9404 ;;  x               1    wreg     unsigned char 
  9405 ;;  y               1    1[BANK0 ] unsigned char 
  9406 ;;  color           1    2[BANK0 ] unsigned char 
  9407 ;; Auto vars:     Size  Location     Type
  9408 ;;  x               1    9[BANK0 ] unsigned char 
  9409 ;; Return value:  Size  Location     Type
  9410 ;;                  1    wreg      void 
  9411 ;; Registers used:
  9412 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9413 ;; Tracked objects:
  9414 ;;		On entry : 0/0
  9415 ;;		On exit  : 0/0
  9416 ;;		Unchanged: 0/0
  9417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9418 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9419 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9420 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9421 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9422 ;;Total ram usage:        9 bytes
  9423 ;; Hardware stack levels used:    1
  9424 ;; Hardware stack levels required when called:    6
  9425 ;; This function calls:
  9426 ;;		Nothing
  9427 ;; This function is called by:
  9428 ;;		_main
  9429 ;; This function uses a non-reentrant model
  9430 ;;
  9431                           
  9432                           
  9433                           ;psect for function _drawPixel
  9434  005B                     _drawPixel:	
  9435                           
  9436                           ;incstack = 0
  9437                           ; Regs used in _drawPixel: [wreg+fsr1l+fsr1h+status,2+status,0]
  9438                           ;drawPixel@x stored from wreg
  9439  005B  0020               	movlb	0	; select bank0
  9440  005C  00A9               	movwf	drawPixel@x
  9441                           
  9442                           ;main.c: 80: if (color == 1) {
  9443  005D  0322               	decf	drawPixel@color,w
  9444  005E  1D03               	btfss	3,2
  9445  005F  288B               	goto	l3312
  9446                           
  9447                           ;main.c: 81: pixelbuffer[y] |= 1 << x;
  9448  0060  3001               	movlw	1
  9449  0061  00A3               	movwf	??_drawPixel
  9450  0062  3000               	movlw	0
  9451  0063  00A4               	movwf	??_drawPixel+1
  9452  0064  0A29               	incf	drawPixel@x,w
  9453  0065  2868               	goto	u1834
  9454  0066                     u1835:	
  9455  0066  35A3               	lslf	??_drawPixel,f
  9456  0067  0DA4               	rlf	??_drawPixel+1,f
  9457  0068                     u1834:	
  9458  0068  0B89               	decfsz	9,f
  9459  0069  2866               	goto	u1835
  9460  006A  3521               	lslf	drawPixel@y,w
  9461  006B  3EBD               	addlw	(low (_pixelbuffer| 0))& (0+255)
  9462  006C  0086               	movwf	6
  9463  006D  0187               	clrf	7
  9464  006E  0823               	movf	??_drawPixel,w
  9465  006F  0481               	iorwf	1,f
  9466  0070  3141               	addfsr 1,1
  9467  0071  0824               	movf	??_drawPixel+1,w
  9468  0072  0481               	iorwf	1,f
  9469                           
  9470                           ;main.c: 82: pixelbuffer[y] &= ~(1 << (x + 8));
  9471  0073  3001               	movlw	1
  9472  0074  00A3               	movwf	??_drawPixel
  9473  0075  3000               	movlw	0
  9474  0076  00A4               	movwf	??_drawPixel+1
  9475  0077  0829               	movf	drawPixel@x,w
  9476  0078  3E08               	addlw	8
  9477  0079  0A89               	incf	9,f
  9478  007A  287D               	goto	u1844
  9479  007B                     u1845:	
  9480  007B  35A3               	lslf	??_drawPixel,f
  9481  007C  0DA4               	rlf	??_drawPixel+1,f
  9482  007D                     u1844:	
  9483  007D  0B89               	decfsz	9,f
  9484  007E  287B               	goto	u1845
  9485  007F  09A3               	comf	??_drawPixel,f
  9486  0080  09A4               	comf	??_drawPixel+1,f
  9487  0081  3521               	lslf	drawPixel@y,w
  9488  0082  3EBD               	addlw	(low (_pixelbuffer| 0))& (0+255)
  9489  0083  0086               	movwf	6
  9490  0084  0187               	clrf	7
  9491  0085  0823               	movf	??_drawPixel,w
  9492  0086  0581               	andwf	1,f
  9493  0087  3141               	addfsr 1,1
  9494  0088  0824               	movf	??_drawPixel+1,w
  9495  0089  0581               	andwf	1,f
  9496                           
  9497                           ;main.c: 83: } else if (color == 2) {
  9498  008A  0008               	return
  9499  008B                     l3312:	
  9500  008B  3002               	movlw	2
  9501  008C  0622               	xorwf	drawPixel@color,w
  9502  008D  1D03               	btfss	3,2
  9503  008E  28BA               	goto	l3316
  9504                           
  9505                           ;main.c: 84: pixelbuffer[y] |= 1 << (x + 8);
  9506  008F  3001               	movlw	1
  9507  0090  00A3               	movwf	??_drawPixel
  9508  0091  3000               	movlw	0
  9509  0092  00A4               	movwf	??_drawPixel+1
  9510  0093  0829               	movf	drawPixel@x,w
  9511  0094  3E08               	addlw	8
  9512  0095  0A89               	incf	9,f
  9513  0096  2899               	goto	u1864
  9514  0097                     u1865:	
  9515  0097  35A3               	lslf	??_drawPixel,f
  9516  0098  0DA4               	rlf	??_drawPixel+1,f
  9517  0099                     u1864:	
  9518  0099  0B89               	decfsz	9,f
  9519  009A  2897               	goto	u1865
  9520  009B  3521               	lslf	drawPixel@y,w
  9521  009C  3EBD               	addlw	(low (_pixelbuffer| 0))& (0+255)
  9522  009D  0086               	movwf	6
  9523  009E  0187               	clrf	7
  9524  009F  0823               	movf	??_drawPixel,w
  9525  00A0  0481               	iorwf	1,f
  9526  00A1  3141               	addfsr 1,1
  9527  00A2  0824               	movf	??_drawPixel+1,w
  9528  00A3  0481               	iorwf	1,f
  9529                           
  9530                           ;main.c: 85: pixelbuffer[y] &= ~(1 << x);
  9531  00A4  3001               	movlw	1
  9532  00A5  00A3               	movwf	??_drawPixel
  9533  00A6  3000               	movlw	0
  9534  00A7  00A4               	movwf	??_drawPixel+1
  9535  00A8  0A29               	incf	drawPixel@x,w
  9536  00A9  28AC               	goto	u1874
  9537  00AA                     u1875:	
  9538  00AA  35A3               	lslf	??_drawPixel,f
  9539  00AB  0DA4               	rlf	??_drawPixel+1,f
  9540  00AC                     u1874:	
  9541  00AC  0B89               	decfsz	9,f
  9542  00AD  28AA               	goto	u1875
  9543  00AE  09A3               	comf	??_drawPixel,f
  9544  00AF  09A4               	comf	??_drawPixel+1,f
  9545  00B0  3521               	lslf	drawPixel@y,w
  9546  00B1  3EBD               	addlw	(low (_pixelbuffer| 0))& (0+255)
  9547  00B2  0086               	movwf	6
  9548  00B3  0187               	clrf	7
  9549  00B4  0823               	movf	??_drawPixel,w
  9550  00B5  0581               	andwf	1,f
  9551  00B6  3141               	addfsr 1,1
  9552  00B7  0824               	movf	??_drawPixel+1,w
  9553  00B8  0581               	andwf	1,f
  9554                           
  9555                           ;main.c: 86: } else if (color == 3) {
  9556  00B9  0008               	return
  9557  00BA                     l3316:	
  9558  00BA  3003               	movlw	3
  9559  00BB  0622               	xorwf	drawPixel@color,w
  9560  00BC  1D03               	btfss	3,2
  9561  00BD  28E4               	goto	l3320
  9562                           
  9563                           ;main.c: 87: pixelbuffer[y] |= (1 << (x + 8)) | (1 << x);
  9564  00BE  3001               	movlw	1
  9565  00BF  00A3               	movwf	??_drawPixel
  9566  00C0  3000               	movlw	0
  9567  00C1  00A4               	movwf	??_drawPixel+1
  9568  00C2  0A29               	incf	drawPixel@x,w
  9569  00C3  28C6               	goto	u1894
  9570  00C4                     u1895:	
  9571  00C4  35A3               	lslf	??_drawPixel,f
  9572  00C5  0DA4               	rlf	??_drawPixel+1,f
  9573  00C6                     u1894:	
  9574  00C6  0B89               	decfsz	9,f
  9575  00C7  28C4               	goto	u1895
  9576  00C8  3001               	movlw	1
  9577  00C9  00A5               	movwf	??_drawPixel+2
  9578  00CA  3000               	movlw	0
  9579  00CB  00A6               	movwf	??_drawPixel+3
  9580  00CC  0829               	movf	drawPixel@x,w
  9581  00CD  3E08               	addlw	8
  9582  00CE  0A89               	incf	9,f
  9583  00CF  28D2               	goto	u1904
  9584  00D0                     u1905:	
  9585  00D0  35A5               	lslf	??_drawPixel+2,f
  9586  00D1  0DA6               	rlf	??_drawPixel+3,f
  9587  00D2                     u1904:	
  9588  00D2  0B89               	decfsz	9,f
  9589  00D3  28D0               	goto	u1905
  9590  00D4  0823               	movf	??_drawPixel,w
  9591  00D5  0425               	iorwf	??_drawPixel+2,w
  9592  00D6  00A7               	movwf	??_drawPixel+4
  9593  00D7  0824               	movf	??_drawPixel+1,w
  9594  00D8  0426               	iorwf	??_drawPixel+3,w
  9595  00D9  00A8               	movwf	??_drawPixel+5
  9596  00DA  3521               	lslf	drawPixel@y,w
  9597  00DB  3EBD               	addlw	(low (_pixelbuffer| 0))& (0+255)
  9598  00DC  0086               	movwf	6
  9599  00DD  0187               	clrf	7
  9600  00DE  0827               	movf	??_drawPixel+4,w
  9601  00DF  0481               	iorwf	1,f
  9602  00E0  3141               	addfsr 1,1
  9603  00E1  0828               	movf	??_drawPixel+5,w
  9604  00E2  0481               	iorwf	1,f
  9605                           
  9606                           ;main.c: 88: } else if (color == 0) {
  9607  00E3  0008               	return
  9608  00E4                     l3320:	
  9609  00E4  0822               	movf	drawPixel@color,w
  9610  00E5  1D03               	btfss	3,2
  9611  00E6  0008               	return
  9612                           
  9613                           ;main.c: 89: pixelbuffer[y] &= ~(1 << x) & ~(1 << (x + 8));
  9614  00E7  3001               	movlw	1
  9615  00E8  00A3               	movwf	??_drawPixel
  9616  00E9  3000               	movlw	0
  9617  00EA  00A4               	movwf	??_drawPixel+1
  9618  00EB  0829               	movf	drawPixel@x,w
  9619  00EC  3E08               	addlw	8
  9620  00ED  0A89               	incf	9,f
  9621  00EE  28F1               	goto	u1924
  9622  00EF                     u1925:	
  9623  00EF  35A3               	lslf	??_drawPixel,f
  9624  00F0  0DA4               	rlf	??_drawPixel+1,f
  9625  00F1                     u1924:	
  9626  00F1  0B89               	decfsz	9,f
  9627  00F2  28EF               	goto	u1925
  9628  00F3  09A3               	comf	??_drawPixel,f
  9629  00F4  09A4               	comf	??_drawPixel+1,f
  9630  00F5  3001               	movlw	1
  9631  00F6  00A5               	movwf	??_drawPixel+2
  9632  00F7  3000               	movlw	0
  9633  00F8  00A6               	movwf	??_drawPixel+3
  9634  00F9  0A29               	incf	drawPixel@x,w
  9635  00FA  28FD               	goto	u1934
  9636  00FB                     u1935:	
  9637  00FB  35A5               	lslf	??_drawPixel+2,f
  9638  00FC  0DA6               	rlf	??_drawPixel+3,f
  9639  00FD                     u1934:	
  9640  00FD  0B89               	decfsz	9,f
  9641  00FE  28FB               	goto	u1935
  9642  00FF  09A5               	comf	??_drawPixel+2,f
  9643  0100  09A6               	comf	??_drawPixel+3,f
  9644  0101  0823               	movf	??_drawPixel,w
  9645  0102  0525               	andwf	??_drawPixel+2,w
  9646  0103  00A7               	movwf	??_drawPixel+4
  9647  0104  0824               	movf	??_drawPixel+1,w
  9648  0105  0526               	andwf	??_drawPixel+3,w
  9649  0106  00A8               	movwf	??_drawPixel+5
  9650  0107  3521               	lslf	drawPixel@y,w
  9651  0108  3EBD               	addlw	(low (_pixelbuffer| 0))& (0+255)
  9652  0109  0086               	movwf	6
  9653  010A  0187               	clrf	7
  9654  010B  0827               	movf	??_drawPixel+4,w
  9655  010C  0581               	andwf	1,f
  9656  010D  3141               	addfsr 1,1
  9657  010E  0828               	movf	??_drawPixel+5,w
  9658  010F  0581               	andwf	1,f
  9659  0110  0008               	return
  9660  0111                     __end_of_drawPixel:	
  9661                           
  9662                           	psect	text67
  9663  0DE5                     __ptext67:	
  9664 ;; *************** function _SYSTEM_Initialize *****************
  9665 ;; Defined at:
  9666 ;;		line 77 in file "mcc_generated_files/mcc.c"
  9667 ;; Parameters:    Size  Location     Type
  9668 ;;		None
  9669 ;; Auto vars:     Size  Location     Type
  9670 ;;		None
  9671 ;; Return value:  Size  Location     Type
  9672 ;;                  1    wreg      void 
  9673 ;; Registers used:
  9674 ;;		wreg, status,2, status,0, pclath, cstack
  9675 ;; Tracked objects:
  9676 ;;		On entry : 0/0
  9677 ;;		On exit  : 0/0
  9678 ;;		Unchanged: 0/0
  9679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9680 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9681 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9682 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9683 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9684 ;;Total ram usage:        0 bytes
  9685 ;; Hardware stack levels used:    1
  9686 ;; Hardware stack levels required when called:    8
  9687 ;; This function calls:
  9688 ;;		_OSCILLATOR_Initialize
  9689 ;;		_PIN_MANAGER_Initialize
  9690 ;; This function is called by:
  9691 ;;		_main
  9692 ;; This function uses a non-reentrant model
  9693 ;;
  9694                           
  9695                           
  9696                           ;psect for function _SYSTEM_Initialize
  9697  0DE5                     _SYSTEM_Initialize:	
  9698                           
  9699                           ;mcc.c: 79: PIN_MANAGER_Initialize();
  9700                           
  9701                           ;incstack = 0
  9702                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  9703  0DE5  3185  257B  318D   	fcall	_PIN_MANAGER_Initialize
  9704                           
  9705                           ;mcc.c: 80: OSCILLATOR_Initialize();
  9706  0DE8  318E  2672         	fcall	_OSCILLATOR_Initialize
  9707  0DEA  0008               	return
  9708  0DEB                     __end_of_SYSTEM_Initialize:	
  9709                           
  9710                           	psect	text68
  9711  057B                     __ptext68:	
  9712 ;; *************** function _PIN_MANAGER_Initialize *****************
  9713 ;; Defined at:
  9714 ;;		line 54 in file "mcc_generated_files/pin_manager.c"
  9715 ;; Parameters:    Size  Location     Type
  9716 ;;		None
  9717 ;; Auto vars:     Size  Location     Type
  9718 ;;		None
  9719 ;; Return value:  Size  Location     Type
  9720 ;;                  1    wreg      void 
  9721 ;; Registers used:
  9722 ;;		wreg, status,2, status,0, pclath, cstack
  9723 ;; Tracked objects:
  9724 ;;		On entry : 0/0
  9725 ;;		On exit  : 0/0
  9726 ;;		Unchanged: 0/0
  9727 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9728 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9729 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9730 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9731 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9732 ;;Total ram usage:        0 bytes
  9733 ;; Hardware stack levels used:    1
  9734 ;; Hardware stack levels required when called:    7
  9735 ;; This function calls:
  9736 ;;		_IOCCF4_SetInterruptHandler
  9737 ;; This function is called by:
  9738 ;;		_SYSTEM_Initialize
  9739 ;; This function uses a non-reentrant model
  9740 ;;
  9741                           
  9742                           
  9743                           ;psect for function _PIN_MANAGER_Initialize
  9744  057B                     _PIN_MANAGER_Initialize:	
  9745                           
  9746                           ;pin_manager.c: 59: LATA = 0x00;
  9747                           
  9748                           ;incstack = 0
  9749                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0+pclath+cstack]
  9750  057B  0022               	movlb	2	; select bank2
  9751  057C  018C               	clrf	12	;volatile
  9752                           
  9753                           ;pin_manager.c: 60: LATB = 0x00;
  9754  057D  018D               	clrf	13	;volatile
  9755                           
  9756                           ;pin_manager.c: 61: LATC = 0x00;
  9757  057E  018E               	clrf	14	;volatile
  9758                           
  9759                           ;pin_manager.c: 66: TRISA = 0x37;
  9760  057F  3037               	movlw	55
  9761  0580  0021               	movlb	1	; select bank1
  9762  0581  008C               	movwf	12	;volatile
  9763                           
  9764                           ;pin_manager.c: 67: TRISB = 0xF0;
  9765  0582  30F0               	movlw	240
  9766  0583  008D               	movwf	13	;volatile
  9767                           
  9768                           ;pin_manager.c: 68: TRISC = 0xFF;
  9769  0584  30FF               	movlw	255
  9770  0585  008E               	movwf	14	;volatile
  9771                           
  9772                           ;pin_manager.c: 73: ANSELC = 0xCF;
  9773  0586  30CF               	movlw	207
  9774  0587  0023               	movlb	3	; select bank3
  9775  0588  008E               	movwf	14	;volatile
  9776                           
  9777                           ;pin_manager.c: 74: ANSELB = 0xA0;
  9778  0589  30A0               	movlw	160
  9779  058A  008D               	movwf	13	;volatile
  9780                           
  9781                           ;pin_manager.c: 75: ANSELA = 0x17;
  9782  058B  3017               	movlw	23
  9783  058C  008C               	movwf	12	;volatile
  9784                           
  9785                           ;pin_manager.c: 80: WPUB = 0x00;
  9786  058D  0024               	movlb	4	; select bank4
  9787  058E  018D               	clrf	13	;volatile
  9788                           
  9789                           ;pin_manager.c: 81: WPUA = 0x00;
  9790  058F  018C               	clrf	12	;volatile
  9791                           
  9792                           ;pin_manager.c: 82: WPUC = 0x10;
  9793  0590  3010               	movlw	16
  9794  0591  008E               	movwf	14	;volatile
  9795                           
  9796                           ;pin_manager.c: 83: OPTION_REGbits.nWPUEN = 0;
  9797  0592  0021               	movlb	1	; select bank1
  9798  0593  1395               	bcf	21,7	;volatile
  9799                           
  9800                           ;pin_manager.c: 88: ODCONA = 0x00;
  9801  0594  0025               	movlb	5	; select bank5
  9802  0595  018C               	clrf	12	;volatile
  9803                           
  9804                           ;pin_manager.c: 89: ODCONB = 0x00;
  9805  0596  018D               	clrf	13	;volatile
  9806                           
  9807                           ;pin_manager.c: 90: ODCONC = 0x00;
  9808  0597  018E               	clrf	14	;volatile
  9809                           
  9810                           ;pin_manager.c: 97: IOCCFbits.IOCCF4 = 0;
  9811  0598  0027               	movlb	7	; select bank7
  9812  0599  1219               	bcf	25,4	;volatile
  9813                           
  9814                           ;pin_manager.c: 99: IOCCNbits.IOCCN4 = 1;
  9815  059A  1618               	bsf	24,4	;volatile
  9816                           
  9817                           ;pin_manager.c: 101: IOCCPbits.IOCCP4 = 1;
  9818  059B  1617               	bsf	23,4	;volatile
  9819                           
  9820                           ;pin_manager.c: 104: IOCCF4_SetInterruptHandler(IOCCF4_DefaultInterruptHandler);
  9821  059C  305D               	movlw	low _IOCCF4_DefaultInterruptHandler
  9822  059D  0020               	movlb	0	; select bank0
  9823  059E  00A1               	movwf	IOCCF4_SetInterruptHandler@InterruptHandler
  9824  059F  300D               	movlw	high _IOCCF4_DefaultInterruptHandler
  9825  05A0  00A2               	movwf	IOCCF4_SetInterruptHandler@InterruptHandler+1
  9826  05A1  318D  25DF         	fcall	_IOCCF4_SetInterruptHandler
  9827                           
  9828                           ;pin_manager.c: 107: INTCONbits.IOCIE = 1;
  9829  05A3  158B               	bsf	11,3	;volatile
  9830                           
  9831                           ;pin_manager.c: 110: SSPCLKPPS = 0x0E;
  9832  05A4  300E               	movlw	14
  9833  05A5  003C               	movlb	28	; select bank28
  9834  05A6  00A0               	movwf	32	;volatile
  9835                           
  9836                           ;pin_manager.c: 111: SSPDATPPS = 0x0C;
  9837  05A7  300C               	movlw	12
  9838  05A8  00A1               	movwf	33	;volatile
  9839                           
  9840                           ;pin_manager.c: 112: RB6PPS = 0x10;
  9841  05A9  3010               	movlw	16
  9842  05AA  003D               	movlb	29	; select bank29
  9843  05AB  009E               	movwf	30	;volatile
  9844                           
  9845                           ;pin_manager.c: 113: RB4PPS = 0x11;
  9846  05AC  3011               	movlw	17
  9847  05AD  009C               	movwf	28	;volatile
  9848  05AE  0008               	return
  9849  05AF                     __end_of_PIN_MANAGER_Initialize:	
  9850                           
  9851                           	psect	text69
  9852  0DDF                     __ptext69:	
  9853 ;; *************** function _IOCCF4_SetInterruptHandler *****************
  9854 ;; Defined at:
  9855 ;;		line 146 in file "mcc_generated_files/pin_manager.c"
  9856 ;; Parameters:    Size  Location     Type
  9857 ;;  InterruptHan    2    1[BANK0 ] PTR FTN()void 
  9858 ;;		 -> buttonInterrupt(1), IOCCF4_DefaultInterruptHandler(1), 
  9859 ;; Auto vars:     Size  Location     Type
  9860 ;;		None
  9861 ;; Return value:  Size  Location     Type
  9862 ;;                  1    wreg      void 
  9863 ;; Registers used:
  9864 ;;		wreg
  9865 ;; Tracked objects:
  9866 ;;		On entry : 0/0
  9867 ;;		On exit  : 0/0
  9868 ;;		Unchanged: 0/0
  9869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9870 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9871 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9872 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9873 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9874 ;;Total ram usage:        2 bytes
  9875 ;; Hardware stack levels used:    1
  9876 ;; Hardware stack levels required when called:    6
  9877 ;; This function calls:
  9878 ;;		Nothing
  9879 ;; This function is called by:
  9880 ;;		_PIN_MANAGER_Initialize
  9881 ;;		_main
  9882 ;; This function uses a non-reentrant model
  9883 ;;
  9884                           
  9885                           
  9886                           ;psect for function _IOCCF4_SetInterruptHandler
  9887  0DDF                     _IOCCF4_SetInterruptHandler:	
  9888                           
  9889                           ;pin_manager.c: 147: IOCCF4_InterruptHandler = InterruptHandler;
  9890                           
  9891                           ;incstack = 0
  9892                           ; Regs used in _IOCCF4_SetInterruptHandler: [wreg]
  9893  0DDF  0020               	movlb	0	; select bank0
  9894  0DE0  0822               	movf	IOCCF4_SetInterruptHandler@InterruptHandler+1,w
  9895  0DE1  00E6               	movwf	_IOCCF4_InterruptHandler+1
  9896  0DE2  0821               	movf	IOCCF4_SetInterruptHandler@InterruptHandler,w
  9897  0DE3  00E5               	movwf	_IOCCF4_InterruptHandler
  9898  0DE4  0008               	return
  9899  0DE5                     __end_of_IOCCF4_SetInterruptHandler:	
  9900                           
  9901                           	psect	text70
  9902  0E72                     __ptext70:	
  9903 ;; *************** function _OSCILLATOR_Initialize *****************
  9904 ;; Defined at:
  9905 ;;		line 83 in file "mcc_generated_files/mcc.c"
  9906 ;; Parameters:    Size  Location     Type
  9907 ;;		None
  9908 ;; Auto vars:     Size  Location     Type
  9909 ;;		None
  9910 ;; Return value:  Size  Location     Type
  9911 ;;                  1    wreg      void 
  9912 ;; Registers used:
  9913 ;;		wreg, status,2
  9914 ;; Tracked objects:
  9915 ;;		On entry : 0/0
  9916 ;;		On exit  : 0/0
  9917 ;;		Unchanged: 0/0
  9918 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9919 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9920 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9921 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9922 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9923 ;;Total ram usage:        0 bytes
  9924 ;; Hardware stack levels used:    1
  9925 ;; Hardware stack levels required when called:    6
  9926 ;; This function calls:
  9927 ;;		Nothing
  9928 ;; This function is called by:
  9929 ;;		_SYSTEM_Initialize
  9930 ;; This function uses a non-reentrant model
  9931 ;;
  9932                           
  9933                           
  9934                           ;psect for function _OSCILLATOR_Initialize
  9935  0E72                     _OSCILLATOR_Initialize:	
  9936                           
  9937                           ;mcc.c: 86: OSCCON = 0x78;
  9938                           
  9939                           ;incstack = 0
  9940                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  9941  0E72  3078               	movlw	120
  9942  0E73  0021               	movlb	1	; select bank1
  9943  0E74  0099               	movwf	25	;volatile
  9944                           
  9945                           ;mcc.c: 88: OSCTUNE = 0x00;
  9946  0E75  0198               	clrf	24	;volatile
  9947                           
  9948                           ;mcc.c: 90: BORCON = 0x00;
  9949  0E76  0022               	movlb	2	; select bank2
  9950  0E77  0196               	clrf	22	;volatile
  9951  0E78                     l95:	
  9952                           ;mcc.c: 93: {
  9953                           
  9954                           ;mcc.c: 92: while(PLLR == 0)
  9955                           
  9956  0E78  0021               	movlb	1	; select bank1
  9957  0E79  1B1A               	btfsc	26,6	;volatile
  9958  0E7A  0008               	return
  9959  0E7B  2E78               	goto	l95
  9960  0E7C                     __end_of_OSCILLATOR_Initialize:	
  9961                           
  9962                           	psect	intentry
  9963  0004                     __pintentry:	
  9964 ;; *************** function _INTERRUPT_InterruptManager *****************
  9965 ;; Defined at:
  9966 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  9967 ;; Parameters:    Size  Location     Type
  9968 ;;		None
  9969 ;; Auto vars:     Size  Location     Type
  9970 ;;		None
  9971 ;; Return value:  Size  Location     Type
  9972 ;;                  1    wreg      void 
  9973 ;; Registers used:
  9974 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9975 ;; Tracked objects:
  9976 ;;		On entry : 0/0
  9977 ;;		On exit  : 0/0
  9978 ;;		Unchanged: 0/0
  9979 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9980 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9981 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9982 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9983 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9984 ;;Total ram usage:        1 bytes
  9985 ;; Hardware stack levels used:    1
  9986 ;; Hardware stack levels required when called:    5
  9987 ;; This function calls:
  9988 ;;		Absolute function
  9989 ;;		_PIN_MANAGER_IOC
  9990 ;;		_i2c_busCollisionISR
  9991 ;;		i1_i2c_ISR
  9992 ;; This function is called by:
  9993 ;;		Interrupt level 1
  9994 ;; This function uses a non-reentrant model
  9995 ;;
  9996                           
  9997  0004                     _INTERRUPT_InterruptManager:	
  9998                           
  9999                           ;incstack = 0
 10000 ;; hardware stack exceeded
 10001  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 10002                           
 10003                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10004  0005  3180               	pagesel	$
 10005  0006  0020               	movlb	0	; select bank0
 10006  0007  087F               	movf	127,w
 10007  0008  00A0               	movwf	??_INTERRUPT_InterruptManager
 10008                           
 10009                           ;interrupt_manager.c: 54: if(INTCONbits.IOCIE == 1 && INTCONbits.IOCIF == 1)
 10010  0009  198B               	btfsc	11,3	;volatile
 10011  000A  1C0B               	btfss	11,0	;volatile
 10012  000B  2810               	goto	i1l490
 10013                           
 10014                           ;interrupt_manager.c: 55: {
 10015                           ;interrupt_manager.c: 56: PIN_MANAGER_IOC();
 10016  000C  318D  25D3  3180   	fcall	_PIN_MANAGER_IOC
 10017                           
 10018                           ;interrupt_manager.c: 57: }
 10019  000F  2829               	goto	i1l498
 10020  0010                     i1l490:	
 10021                           
 10022                           ;interrupt_manager.c: 58: else if(INTCONbits.PEIE == 1)
 10023  0010  1F0B               	btfss	11,6	;volatile
 10024  0011  2829               	goto	i1l498
 10025                           
 10026                           ;interrupt_manager.c: 59: {
 10027                           ;interrupt_manager.c: 60: if(PIE2bits.BCL1IE == 1 && PIR2bits.BCL1IF == 1)
 10028  0012  0021               	movlb	1	; select bank1
 10029  0013  1D91               	btfss	17,3	;volatile
 10030  0014  281E               	goto	i1l493
 10031  0015  0020               	movlb	0	; select bank0
 10032  0016  1D91               	btfss	17,3	;volatile
 10033  0017  281E               	goto	i1l493
 10034                           
 10035                           ;interrupt_manager.c: 61: {
 10036                           ;interrupt_manager.c: 62: i2c_driver_busCollisionISR();
 10037  0018  0858               	movf	_i2c_driver_busCollisionISR+1,w
 10038  0019  008A               	movwf	10
 10039  001A  0857               	movf	_i2c_driver_busCollisionISR,w
 10040  001B  000A               	callw
 10041  001C  3180               	pagesel	$
 10042                           
 10043                           ;interrupt_manager.c: 63: }
 10044  001D  2829               	goto	i1l498
 10045  001E                     i1l493:	
 10046                           
 10047                           ;interrupt_manager.c: 64: else if(PIE1bits.SSP1IE == 1 && PIR1bits.SSP1IF == 1)
 10048  001E  0021               	movlb	1	; select bank1
 10049  001F  1D90               	btfss	16,3	;volatile
 10050  0020  2829               	goto	i1l498
 10051  0021  0020               	movlb	0	; select bank0
 10052  0022  1D90               	btfss	16,3	;volatile
 10053  0023  2829               	goto	i1l498
 10054                           
 10055                           ;interrupt_manager.c: 65: {
 10056                           ;interrupt_manager.c: 66: i2c_driver_i2cISR();
 10057  0024  0856               	movf	_i2c_driver_i2cISR+1,w
 10058  0025  008A               	movwf	10
 10059  0026  0855               	movf	_i2c_driver_i2cISR,w
 10060  0027  000A               	callw
 10061  0028  3180               	pagesel	$
 10062  0029                     i1l498:	
 10063                           ;interrupt_manager.c: 73: else
 10064                           ;interrupt_manager.c: 74: {
 10065                           
 10066                           ;interrupt_manager.c: 71: }
 10067                           ;interrupt_manager.c: 72: }
 10068                           
 10069                           ;interrupt_manager.c: 68: else
 10070                           ;interrupt_manager.c: 69: {
 10071                           
 10072                           ;interrupt_manager.c: 67: }
 10073                           
 10074  0029  0020               	movlb	0	; select bank0
 10075  002A  0820               	movf	??_INTERRUPT_InterruptManager,w
 10076  002B  00FF               	movwf	127
 10077  002C  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 10078  002D  0009               	retfie
 10079  002E                     __end_of_INTERRUPT_InterruptManager:	
 10080                           
 10081                           	psect	text72
 10082  075C                     __ptext72:	
 10083 ;; *************** function i1_i2c_ISR *****************
 10084 ;; Defined at:
 10085 ;;		line 419 in file "mcc_generated_files/drivers/i2c_master.c"
 10086 ;; Parameters:    Size  Location     Type
 10087 ;;		None
 10088 ;; Auto vars:     Size  Location     Type
 10089 ;;		None
 10090 ;; Return value:  Size  Location     Type
 10091 ;;                  1    wreg      void 
 10092 ;; Registers used:
 10093 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10094 ;; Tracked objects:
 10095 ;;		On entry : 0/0
 10096 ;;		On exit  : 0/0
 10097 ;;		Unchanged: 0/0
 10098 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10099 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10100 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10101 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10102 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10103 ;;Total ram usage:        1 bytes
 10104 ;; Hardware stack levels used:    1
 10105 ;; Hardware stack levels required when called:    4
 10106 ;; This function calls:
 10107 ;;		i1_do_I2C_DO_ACK
 10108 ;;		i1_do_I2C_DO_ADDRESS_NACK
 10109 ;;		i1_do_I2C_DO_NACK_RESTART
 10110 ;;		i1_do_I2C_DO_NACK_STOP
 10111 ;;		i1_do_I2C_IDLE
 10112 ;;		i1_do_I2C_RCEN
 10113 ;;		i1_do_I2C_RESET
 10114 ;;		i1_do_I2C_RX
 10115 ;;		i1_do_I2C_SEND_ADR_READ
 10116 ;;		i1_do_I2C_SEND_ADR_WRITE
 10117 ;;		i1_do_I2C_SEND_RESTART
 10118 ;;		i1_do_I2C_SEND_RESTART_READ
 10119 ;;		i1_do_I2C_SEND_RESTART_WRITE
 10120 ;;		i1_do_I2C_SEND_STOP
 10121 ;;		i1_do_I2C_TX
 10122 ;;		i1_do_I2C_TX_EMPTY
 10123 ;;		i1_i2c_driver_isNACK
 10124 ;;		i1_mssp_clearIRQ
 10125 ;; This function is called by:
 10126 ;; This function uses a non-reentrant model
 10127 ;;
 10128                           
 10129                           
 10130                           ;psect for function i1_i2c_ISR
 10131  075C                     i1_i2c_ISR:	
 10132  075C                     i1l5720:	
 10133                           ;incstack = 0
 10134 ;; hardware stack exceeded
 10135                           ; Regs used in i1_i2c_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10136                           
 10137                           
 10138                           ;i2c_master.c: 421: mssp_clearIRQ();
 10139  075C  318D  2579  3187   	fcall	i1_mssp_clearIRQ
 10140                           
 10141                           ;i2c_master.c: 427: if(i2c_status.addressNACKCheck && i2c_driver_isNACK())
 10142  075F  0021               	movlb	1	; select bank1
 10143  0760  1DA0               	btfss	_i2c_status^(0+128),3
 10144  0761  2F6C               	goto	i1l5728
 10145  0762  318E  26DE  3187   	fcall	i1_i2c_driver_isNACK
 10146  0765  1C03               	btfss	3,0
 10147  0766  2F6C               	goto	i1l5728
 10148                           
 10149                           ;i2c_master.c: 428: {
 10150                           ;i2c_master.c: 429: i2c_status.state = I2C_ADDRESS_NACK;
 10151  0767  300F               	movlw	15
 10152  0768  00FD               	movwf	??i1_i2c_ISR
 10153  0769  087D               	movf	??i1_i2c_ISR,w
 10154  076A  0021               	movlb	1	; select bank1
 10155  076B  00A9               	movwf	(_i2c_status^(0+128)+9)
 10156  076C                     i1l5728:	
 10157                           
 10158                           ;i2c_master.c: 430: }
 10159                           ;i2c_master.c: 432: i2c_status.state = fsmStateTable[i2c_status.state]();
 10160  076C  0021               	movlb	1	; select bank1
 10161  076D  3529               	lslf	(_i2c_status^(0+128)+9),w
 10162  076E  3E20               	addlw	(low (_fsmStateTable| (0+256)))& (0+255)
 10163  076F  0086               	movwf	6
 10164  0770  3001               	movlw	1	; select bank2/3
 10165  0771  0087               	movwf	7
 10166  0772  3F41               	moviw [1]fsr1
 10167  0773  008A               	movwf	10
 10168  0774  3F40               	moviw [0]fsr1
 10169  0775  000A               	callw
 10170  0776  3187               	pagesel	$
 10171  0777  00FD               	movwf	??i1_i2c_ISR
 10172  0778  087D               	movf	??i1_i2c_ISR,w
 10173  0779  0021               	movlb	1	; select bank1
 10174  077A  00A9               	movwf	(_i2c_status^(0+128)+9)
 10175  077B  0008               	return
 10176  077C                     __end_ofi1_i2c_ISR:	
 10177                           
 10178                           	psect	text73
 10179  0D79                     __ptext73:	
 10180 ;; *************** function i1_mssp_clearIRQ *****************
 10181 ;; Defined at:
 10182 ;;		line 53 in file "mcc_generated_files/i2c_driver.c"
 10183 ;; Parameters:    Size  Location     Type
 10184 ;;		None
 10185 ;; Auto vars:     Size  Location     Type
 10186 ;;		None
 10187 ;; Return value:  Size  Location     Type
 10188 ;;                  1    wreg      void 
 10189 ;; Registers used:
 10190 ;;		None
 10191 ;; Tracked objects:
 10192 ;;		On entry : 0/0
 10193 ;;		On exit  : 0/0
 10194 ;;		Unchanged: 0/0
 10195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10196 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10197 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10198 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10199 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10200 ;;Total ram usage:        0 bytes
 10201 ;; Hardware stack levels used:    1
 10202 ;; This function calls:
 10203 ;;		Nothing
 10204 ;; This function is called by:
 10205 ;;		i1_i2c_ISR
 10206 ;; This function uses a non-reentrant model
 10207 ;;
 10208                           
 10209                           
 10210                           ;psect for function i1_mssp_clearIRQ
 10211  0D79                     i1_mssp_clearIRQ:	
 10212                           
 10213                           ;i2c_driver.c: 55: PIR1bits.SSP1IF = 0;
 10214                           
 10215                           ;incstack = 0
 10216                           ; Regs used in i1_mssp_clearIRQ: []
 10217  0D79  0020               	movlb	0	; select bank0
 10218  0D7A  1190               	bcf	16,3	;volatile
 10219  0D7B  0008               	return
 10220  0D7C                     __end_ofi1_mssp_clearIRQ:	
 10221                           
 10222                           	psect	text74
 10223  04CA                     __ptext74:	
 10224 ;; *************** function i1_do_I2C_RX *****************
 10225 ;; Defined at:
 10226 ;;		line 357 in file "mcc_generated_files/drivers/i2c_master.c"
 10227 ;; Parameters:    Size  Location     Type
 10228 ;;		None
 10229 ;; Auto vars:     Size  Location     Type
 10230 ;;		None
 10231 ;; Return value:  Size  Location     Type
 10232 ;;                  1    wreg      enum E12337
 10233 ;; Registers used:
 10234 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10235 ;; Tracked objects:
 10236 ;;		On entry : 0/0
 10237 ;;		On exit  : 0/0
 10238 ;;		Unchanged: 0/0
 10239 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10240 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10241 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10242 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10243 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10244 ;;Total ram usage:        1 bytes
 10245 ;; Hardware stack levels used:    1
 10246 ;; Hardware stack levels required when called:    3
 10247 ;; This function calls:
 10248 ;;		Absolute function
 10249 ;;		i1_do_I2C_DO_NACK_RESTART
 10250 ;;		i1_do_I2C_DO_NACK_STOP
 10251 ;;		i1_i2c_driver_getRXData
 10252 ;;		i1_i2c_driver_sendACK
 10253 ;;		i1_i2c_restartWrite
 10254 ;;		i1_rd1RegCompleteHandler
 10255 ;;		i1_rd2RegCompleteHandler
 10256 ;;		i1_rdBlkRegCompleteHandler
 10257 ;;		i1_returnReset
 10258 ;;		i1_returnStop
 10259 ;;		i1_wr1RegCompleteHandler
 10260 ;;		i1_wr2RegCompleteHandler
 10261 ;; This function is called by:
 10262 ;; This function uses a non-reentrant model
 10263 ;;
 10264                           
 10265                           
 10266                           ;psect for function i1_do_I2C_RX
 10267  04CA                     i1_do_I2C_RX:	
 10268  04CA                     i1l5582:	
 10269                           ;incstack = 0
 10270 ;; hardware stack exceeded
 10271                           ; Regs used in i1_do_I2C_RX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10272                           
 10273                           
 10274                           ;i2c_master.c: 359: *i2c_status.data_ptr++ = i2c_driver_getRXData();
 10275  04CA  318D  2573  3184   	fcall	i1_i2c_driver_getRXData
 10276  04CD  00FA               	movwf	??i1_do_I2C_RX
 10277  04CE  0021               	movlb	1	; select bank1
 10278  04CF  0822               	movf	(low ((_i2c_status| 0+2)))^(0+128),w
 10279  04D0  0086               	movwf	6
 10280  04D1  0187               	clrf	7
 10281  04D2  087A               	movf	??i1_do_I2C_RX,w
 10282  04D3  0081               	movwf	1
 10283  04D4  3001               	movlw	1
 10284  04D5  00FA               	movwf	??i1_do_I2C_RX
 10285  04D6  087A               	movf	??i1_do_I2C_RX,w
 10286  04D7  07A2               	addwf	(low ((_i2c_status| 0+2)))^(0+128),f
 10287                           
 10288                           ;i2c_master.c: 360: if(--i2c_status.data_length)
 10289  04D8  3001               	movlw	1
 10290  04D9  02A3               	subwf	(_i2c_status^(0+128)+3),f
 10291  04DA  3000               	movlw	0
 10292  04DB  3BA4               	subwfb	((_i2c_status+1)^(0+128)+3),f
 10293  04DC  0823               	movf	(_i2c_status^(0+128)+3),w
 10294  04DD  0424               	iorwf	((_i2c_status+1)^(0+128)+3),w
 10295  04DE  1903               	btfsc	3,2
 10296  04DF  2CE4               	goto	i1l671
 10297                           
 10298                           ;i2c_master.c: 361: {
 10299                           ;i2c_master.c: 362: i2c_driver_sendACK();
 10300  04E0  318D  2594         	fcall	i1_i2c_driver_sendACK
 10301                           
 10302                           ;i2c_master.c: 363: return I2C_RCEN;
 10303  04E2  3005               	movlw	5
 10304                           
 10305                           ;i2c_master.c: 364: }
 10306  04E3  0008               	return
 10307  04E4                     i1l671:	
 10308                           
 10309                           ;i2c_master.c: 365: else
 10310                           ;i2c_master.c: 366: {
 10311                           ;i2c_master.c: 367: i2c_status.bufferFree = 1;
 10312  04E4  1520               	bsf	_i2c_status^(0+128),2
 10313                           
 10314                           ;i2c_master.c: 368: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
 10315  04E5  2CEC               	goto	i1l5606
 10316  04E6                     i1l5596:	
 10317                           ;i2c_master.c: 369: {
 10318                           ;i2c_master.c: 370: case i2c_restart_write:
 10319                           
 10320                           
 10321                           ;i2c_master.c: 371: case i2c_restart_read:
 10322                           ;i2c_master.c: 372: return do_I2C_DO_NACK_RESTART();
 10323  04E6  318D  25B4         	fcall	i1_do_I2C_DO_NACK_RESTART
 10324  04E8  0008               	return
 10325  04E9                     i1l5600:	
 10326                           ;i2c_master.c: 374: case i2c_continue:
 10327                           
 10328                           ;i2c_master.c: 373: default:
 10329                           
 10330                           
 10331                           ;i2c_master.c: 375: case i2c_stop:
 10332                           ;i2c_master.c: 376: return do_I2C_DO_NACK_STOP();
 10333  04E9  318D  25B0         	fcall	i1_do_I2C_DO_NACK_STOP
 10334                           
 10335                           ;i2c_master.c: 377: }
 10336  04EB  0008               	return
 10337  04EC                     i1l5606:	
 10338  04EC  0021               	movlb	1	; select bank1
 10339  04ED  0837               	movf	(low ((_i2c_status| 0+23)))^(0+128),w
 10340  04EE  00FA               	movwf	??i1_do_I2C_RX
 10341  04EF  087A               	movf	??i1_do_I2C_RX,w
 10342  04F0  00F9               	movwf	i1returnStop@p
 10343  04F1  300B               	movlw	11
 10344  04F2  3EA0               	addlw	(low (_i2c_status| 0))& (0+255)
 10345  04F3  0086               	movwf	6
 10346  04F4  0187               	clrf	7
 10347  04F5  3F41               	moviw [1]fsr1
 10348  04F6  008A               	movwf	10
 10349  04F7  3F40               	moviw [0]fsr1
 10350  04F8  000A               	callw
 10351  04F9  3184               	pagesel	$
 10352                           
 10353                           ; Switch size 1, requested type "space"
 10354                           ; Number of cases is 4, Range of values is 1 to 4
 10355                           ; switch strategies available:
 10356                           ; Name         Instructions Cycles
 10357                           ; simple_byte           13     7 (average)
 10358                           ; direct_byte           17     9 (fixed)
 10359                           ; jumptable            263     9 (fixed)
 10360                           ;	Chosen strategy is simple_byte
 10361  04FA  3A01               	xorlw	1	; case 1
 10362  04FB  1903               	skipnz
 10363  04FC  2CE9               	goto	i1l5600
 10364  04FD  3A03               	xorlw	3	; case 2
 10365  04FE  1903               	skipnz
 10366  04FF  2CE6               	goto	i1l5596
 10367  0500  3A01               	xorlw	1	; case 3
 10368  0501  1903               	skipnz
 10369  0502  2CE6               	goto	i1l5596
 10370  0503  3A07               	xorlw	7	; case 4
 10371  0504  1903               	skipnz
 10372  0505  2CE9               	goto	i1l5600
 10373  0506  2CE9               	goto	i1l5600
 10374  0507  0008               	return
 10375  0508                     __end_ofi1_do_I2C_RX:	
 10376                           
 10377                           	psect	text75
 10378  03F4                     __ptext75:	
 10379 ;; *************** function i1_do_I2C_TX *****************
 10380 ;; Defined at:
 10381 ;;		line 333 in file "mcc_generated_files/drivers/i2c_master.c"
 10382 ;; Parameters:    Size  Location     Type
 10383 ;;		None
 10384 ;; Auto vars:     Size  Location     Type
 10385 ;;		None
 10386 ;; Return value:  Size  Location     Type
 10387 ;;                  1    wreg      enum E12337
 10388 ;; Registers used:
 10389 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10390 ;; Tracked objects:
 10391 ;;		On entry : 0/0
 10392 ;;		On exit  : 0/0
 10393 ;;		Unchanged: 0/0
 10394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10395 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10396 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10397 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10398 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10399 ;;Total ram usage:        3 bytes
 10400 ;; Hardware stack levels used:    1
 10401 ;; Hardware stack levels required when called:    3
 10402 ;; This function calls:
 10403 ;;		Absolute function
 10404 ;;		i1_do_I2C_SEND_RESTART_READ
 10405 ;;		i1_do_I2C_SEND_RESTART_WRITE
 10406 ;;		i1_do_I2C_SEND_STOP
 10407 ;;		i1_i2c_driver_TXData
 10408 ;;		i1_i2c_driver_isNACK
 10409 ;;		i1_i2c_restartWrite
 10410 ;;		i1_rd1RegCompleteHandler
 10411 ;;		i1_rd2RegCompleteHandler
 10412 ;;		i1_rdBlkRegCompleteHandler
 10413 ;;		i1_returnReset
 10414 ;;		i1_returnStop
 10415 ;;		i1_wr1RegCompleteHandler
 10416 ;;		i1_wr2RegCompleteHandler
 10417 ;; This function is called by:
 10418 ;; This function uses a non-reentrant model
 10419 ;;
 10420                           
 10421                           
 10422                           ;psect for function i1_do_I2C_TX
 10423  03F4                     i1_do_I2C_TX:	
 10424  03F4                     i1l5552:	
 10425                           ;incstack = 0
 10426 ;; hardware stack exceeded
 10427                           ; Regs used in i1_do_I2C_TX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10428                           
 10429                           
 10430                           ;i2c_master.c: 335: if(i2c_driver_isNACK())
 10431  03F4  318E  26DE  3183   	fcall	i1_i2c_driver_isNACK
 10432  03F7  1803               	btfsc	3,0
 10433  03F8  2C03               	goto	i1l5570
 10434  03F9  2C1F               	goto	i1l655
 10435  03FA                     i1l5556:	
 10436                           ;i2c_master.c: 338: {
 10437                           ;i2c_master.c: 339: case i2c_restart_read:
 10438                           
 10439                           ;i2c_master.c: 336: {
 10440                           ;i2c_master.c: 337: switch(i2c_status.callbackTable[i2c_dataNACK](i2c_status.callbackPay
      +                          load[i2c_dataNACK]))
 10441                           
 10442                           
 10443                           ;i2c_master.c: 340: return do_I2C_SEND_RESTART_READ();
 10444  03FA  318D  259C         	fcall	i1_do_I2C_SEND_RESTART_READ
 10445  03FC  0008               	return
 10446  03FD                     i1l5560:	
 10447                           ;i2c_master.c: 341: case i2c_restart_write:
 10448                           
 10449                           
 10450                           ;i2c_master.c: 342: return do_I2C_SEND_RESTART_WRITE();
 10451  03FD  318D  25A0         	fcall	i1_do_I2C_SEND_RESTART_WRITE
 10452  03FF  0008               	return
 10453  0400                     i1l5564:	
 10454                           ;i2c_master.c: 344: case i2c_continue:
 10455                           
 10456                           ;i2c_master.c: 343: default:
 10457                           
 10458                           
 10459                           ;i2c_master.c: 345: case i2c_stop:
 10460                           ;i2c_master.c: 346: return do_I2C_SEND_STOP();
 10461  0400  318D  25A8         	fcall	i1_do_I2C_SEND_STOP
 10462                           
 10463                           ;i2c_master.c: 347: }
 10464  0402  0008               	return
 10465  0403                     i1l5570:	
 10466  0403  0021               	movlb	1	; select bank1
 10467  0404  083A               	movf	(low ((_i2c_status| 0+26)))^(0+128),w
 10468  0405  00FA               	movwf	??i1_do_I2C_TX
 10469  0406  087A               	movf	??i1_do_I2C_TX,w
 10470  0407  00F9               	movwf	i1returnStop@p
 10471  0408  3011               	movlw	17
 10472  0409  3EA0               	addlw	(low (_i2c_status| 0))& (0+255)
 10473  040A  0086               	movwf	6
 10474  040B  0187               	clrf	7
 10475  040C  3F41               	moviw [1]fsr1
 10476  040D  008A               	movwf	10
 10477  040E  3F40               	moviw [0]fsr1
 10478  040F  000A               	callw
 10479  0410  3183               	pagesel	$
 10480                           
 10481                           ; Switch size 1, requested type "space"
 10482                           ; Number of cases is 4, Range of values is 1 to 4
 10483                           ; switch strategies available:
 10484                           ; Name         Instructions Cycles
 10485                           ; simple_byte           13     7 (average)
 10486                           ; direct_byte           17     9 (fixed)
 10487                           ; jumptable            263     9 (fixed)
 10488                           ;	Chosen strategy is simple_byte
 10489  0411  3A01               	xorlw	1	; case 1
 10490  0412  1903               	skipnz
 10491  0413  2C00               	goto	i1l5564
 10492  0414  3A03               	xorlw	3	; case 2
 10493  0415  1903               	skipnz
 10494  0416  2BFA               	goto	i1l5556
 10495  0417  3A01               	xorlw	1	; case 3
 10496  0418  1903               	skipnz
 10497  0419  2BFD               	goto	i1l5560
 10498  041A  3A07               	xorlw	7	; case 4
 10499  041B  1903               	skipnz
 10500  041C  2C00               	goto	i1l5564
 10501  041D  2C00               	goto	i1l5564
 10502                           
 10503                           ;i2c_master.c: 348: }
 10504  041E  0008               	return
 10505  041F                     i1l655:	
 10506                           
 10507                           ;i2c_master.c: 349: else
 10508                           ;i2c_master.c: 350: {
 10509                           ;i2c_master.c: 351: i2c_status.addressNACKCheck = 0;
 10510  041F  0021               	movlb	1	; select bank1
 10511  0420  11A0               	bcf	_i2c_status^(0+128),3
 10512                           
 10513                           ;i2c_master.c: 352: i2c_driver_TXData(*i2c_status.data_ptr++);
 10514  0421  3002               	movlw	2
 10515  0422  3EA0               	addlw	(low (_i2c_status| 0))& (0+255)
 10516  0423  0086               	movwf	6
 10517  0424  0187               	clrf	7
 10518  0425  3F40               	moviw [0]fsr1
 10519  0426  0084               	movwf	4
 10520  0427  0185               	clrf	5
 10521  0428  0A81               	incf	1,f
 10522  0429  0800               	movf	0,w
 10523  042A  318D  25C4  3183   	fcall	i1_i2c_driver_TXData
 10524                           
 10525                           ;i2c_master.c: 353: return (--i2c_status.data_length)?I2C_TX:I2C_TX_EMPTY;
 10526  042D  3001               	movlw	1
 10527  042E  0021               	movlb	1	; select bank1
 10528  042F  02A3               	subwf	(_i2c_status^(0+128)+3),f
 10529  0430  3000               	movlw	0
 10530  0431  3BA4               	subwfb	((_i2c_status+1)^(0+128)+3),f
 10531  0432  0823               	movf	(_i2c_status^(0+128)+3),w
 10532  0433  0424               	iorwf	((_i2c_status+1)^(0+128)+3),w
 10533  0434  1D03               	btfss	3,2
 10534  0435  2C38               	goto	i1l5578
 10535  0436  3006               	movlw	6
 10536  0437  2C39               	goto	L4
 10537  0438                     i1l5578:	
 10538  0438  3003               	movlw	3
 10539  0439                     L4:	
 10540  0439  00FB               	movwf	i1_do_I2C_TX$1026
 10541  043A  3000               	movlw	0
 10542  043B  00FC               	movwf	i1_do_I2C_TX$1026+1
 10543  043C  087B               	movf	i1_do_I2C_TX$1026,w
 10544  043D  0008               	return
 10545  043E                     __end_ofi1_do_I2C_TX:	
 10546                           
 10547                           	psect	text76
 10548  0719                     __ptext76:	
 10549 ;; *************** function i1_do_I2C_DO_ADDRESS_NACK *****************
 10550 ;; Defined at:
 10551 ;;		line 319 in file "mcc_generated_files/drivers/i2c_master.c"
 10552 ;; Parameters:    Size  Location     Type
 10553 ;;		None
 10554 ;; Auto vars:     Size  Location     Type
 10555 ;;		None
 10556 ;; Return value:  Size  Location     Type
 10557 ;;                  1    wreg      enum E12337
 10558 ;; Registers used:
 10559 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10560 ;; Tracked objects:
 10561 ;;		On entry : 0/0
 10562 ;;		On exit  : 0/0
 10563 ;;		Unchanged: 0/0
 10564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10565 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10566 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10567 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10568 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10569 ;;Total ram usage:        1 bytes
 10570 ;; Hardware stack levels used:    1
 10571 ;; Hardware stack levels required when called:    3
 10572 ;; This function calls:
 10573 ;;		Absolute function
 10574 ;;		i1_do_I2C_SEND_RESTART
 10575 ;;		i1_do_I2C_SEND_STOP
 10576 ;;		i1_i2c_restartWrite
 10577 ;;		i1_rd1RegCompleteHandler
 10578 ;;		i1_rd2RegCompleteHandler
 10579 ;;		i1_rdBlkRegCompleteHandler
 10580 ;;		i1_returnReset
 10581 ;;		i1_returnStop
 10582 ;;		i1_wr1RegCompleteHandler
 10583 ;;		i1_wr2RegCompleteHandler
 10584 ;; This function is called by:
 10585 ;; This function uses a non-reentrant model
 10586 ;;
 10587                           
 10588                           
 10589                           ;psect for function i1_do_I2C_DO_ADDRESS_NACK
 10590  0719                     i1_do_I2C_DO_ADDRESS_NACK:	
 10591  0719                     i1l5536:	
 10592                           ;incstack = 0
 10593 ;; hardware stack exceeded
 10594                           ; Regs used in i1_do_I2C_DO_ADDRESS_NACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10595                           
 10596                           
 10597                           ;i2c_master.c: 321: i2c_status.addressNACKCheck = 0;
 10598  0719  0021               	movlb	1	; select bank1
 10599  071A  11A0               	bcf	_i2c_status^(0+128),3
 10600                           
 10601                           ;i2c_master.c: 322: i2c_status.error = I2C_FAIL;
 10602  071B  3002               	movlw	2
 10603  071C  00FA               	movwf	??i1_do_I2C_DO_ADDRESS_NACK
 10604  071D  087A               	movf	??i1_do_I2C_DO_ADDRESS_NACK,w
 10605  071E  00AA               	movwf	(_i2c_status^(0+128)+10)
 10606                           
 10607                           ;i2c_master.c: 323: switch(i2c_status.callbackTable[i2c_addressNACK](i2c_status.callback
      +                          Payload[i2c_addressNACK]))
 10608  071F  2F26               	goto	i1l5550
 10609  0720                     i1l5540:	
 10610                           ;i2c_master.c: 324: {
 10611                           ;i2c_master.c: 325: case i2c_restart_read:
 10612                           
 10613                           
 10614                           ;i2c_master.c: 326: case i2c_restart_write:
 10615                           ;i2c_master.c: 327: return do_I2C_SEND_RESTART();
 10616  0720  318D  25A4         	fcall	i1_do_I2C_SEND_RESTART
 10617  0722  0008               	return
 10618  0723                     i1l5544:	
 10619                           ;i2c_master.c: 328: default:
 10620                           
 10621                           
 10622                           ;i2c_master.c: 329: return do_I2C_SEND_STOP();
 10623  0723  318D  25A8         	fcall	i1_do_I2C_SEND_STOP
 10624                           
 10625                           ;i2c_master.c: 330: }
 10626  0725  0008               	return
 10627  0726                     i1l5550:	
 10628  0726  0021               	movlb	1	; select bank1
 10629  0727  0839               	movf	(low ((_i2c_status| 0+25)))^(0+128),w
 10630  0728  00FA               	movwf	??i1_do_I2C_DO_ADDRESS_NACK
 10631  0729  087A               	movf	??i1_do_I2C_DO_ADDRESS_NACK,w
 10632  072A  00F9               	movwf	i1returnStop@p
 10633  072B  300F               	movlw	15
 10634  072C  3EA0               	addlw	(low (_i2c_status| 0))& (0+255)
 10635  072D  0086               	movwf	6
 10636  072E  0187               	clrf	7
 10637  072F  3F41               	moviw [1]fsr1
 10638  0730  008A               	movwf	10
 10639  0731  3F40               	moviw [0]fsr1
 10640  0732  000A               	callw
 10641  0733  3187               	pagesel	$
 10642                           
 10643                           ; Switch size 1, requested type "space"
 10644                           ; Number of cases is 2, Range of values is 2 to 3
 10645                           ; switch strategies available:
 10646                           ; Name         Instructions Cycles
 10647                           ; simple_byte            7     4 (average)
 10648                           ; direct_byte           13     9 (fixed)
 10649                           ; jumptable            263     9 (fixed)
 10650                           ;	Chosen strategy is simple_byte
 10651  0734  3A02               	xorlw	2	; case 2
 10652  0735  1903               	skipnz
 10653  0736  2F20               	goto	i1l5540
 10654  0737  3A01               	xorlw	1	; case 3
 10655  0738  1903               	skipnz
 10656  0739  2F20               	goto	i1l5540
 10657  073A  2F23               	goto	i1l5544
 10658  073B  0008               	return
 10659  073C                     __end_ofi1_do_I2C_DO_ADDRESS_NACK:	
 10660                           
 10661                           	psect	text77
 10662  0DB4                     __ptext77:	
 10663 ;; *************** function i1_do_I2C_DO_NACK_RESTART *****************
 10664 ;; Defined at:
 10665 ;;		line 311 in file "mcc_generated_files/drivers/i2c_master.c"
 10666 ;; Parameters:    Size  Location     Type
 10667 ;;		None
 10668 ;; Auto vars:     Size  Location     Type
 10669 ;;		None
 10670 ;; Return value:  Size  Location     Type
 10671 ;;                  1    wreg      enum E12337
 10672 ;; Registers used:
 10673 ;;		wreg, status,2, status,0, pclath, cstack
 10674 ;; Tracked objects:
 10675 ;;		On entry : 0/0
 10676 ;;		On exit  : 0/0
 10677 ;;		Unchanged: 0/0
 10678 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10679 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10680 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10681 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10682 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10683 ;;Total ram usage:        0 bytes
 10684 ;; Hardware stack levels used:    1
 10685 ;; Hardware stack levels required when called:    1
 10686 ;; This function calls:
 10687 ;;		i1_i2c_driver_sendNACK
 10688 ;; This function is called by:
 10689 ;;		i1_do_I2C_RX
 10690 ;; This function uses a non-reentrant model
 10691 ;;
 10692                           
 10693                           
 10694                           ;psect for function i1_do_I2C_DO_NACK_RESTART
 10695  0DB4                     i1_do_I2C_DO_NACK_RESTART:	
 10696  0DB4                     i1l3048:	
 10697                           ;incstack = 0
 10698                           ; Regs used in i1_do_I2C_DO_NACK_RESTART: [wreg+status,2+status,0+pclath+cstack]
 10699                           
 10700                           
 10701                           ;i2c_master.c: 313: i2c_driver_sendNACK();
 10702  0DB4  318D  2598         	fcall	i1_i2c_driver_sendNACK
 10703                           
 10704                           ;i2c_master.c: 314: return I2C_SEND_RESTART;
 10705  0DB6  3009               	movlw	9
 10706  0DB7  0008               	return
 10707  0DB8                     __end_ofi1_do_I2C_DO_NACK_RESTART:	
 10708                           
 10709                           	psect	text78
 10710  0DB0                     __ptext78:	
 10711 ;; *************** function i1_do_I2C_DO_NACK_STOP *****************
 10712 ;; Defined at:
 10713 ;;		line 305 in file "mcc_generated_files/drivers/i2c_master.c"
 10714 ;; Parameters:    Size  Location     Type
 10715 ;;		None
 10716 ;; Auto vars:     Size  Location     Type
 10717 ;;		None
 10718 ;; Return value:  Size  Location     Type
 10719 ;;                  1    wreg      enum E12337
 10720 ;; Registers used:
 10721 ;;		wreg, status,2, status,0, pclath, cstack
 10722 ;; Tracked objects:
 10723 ;;		On entry : 0/0
 10724 ;;		On exit  : 0/0
 10725 ;;		Unchanged: 0/0
 10726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10727 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10728 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10729 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10730 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10731 ;;Total ram usage:        0 bytes
 10732 ;; Hardware stack levels used:    1
 10733 ;; Hardware stack levels required when called:    1
 10734 ;; This function calls:
 10735 ;;		i1_i2c_driver_sendNACK
 10736 ;; This function is called by:
 10737 ;;		i1_do_I2C_RX
 10738 ;; This function uses a non-reentrant model
 10739 ;;
 10740                           
 10741                           
 10742                           ;psect for function i1_do_I2C_DO_NACK_STOP
 10743  0DB0                     i1_do_I2C_DO_NACK_STOP:	
 10744  0DB0                     i1l3042:	
 10745                           ;incstack = 0
 10746                           ; Regs used in i1_do_I2C_DO_NACK_STOP: [wreg+status,2+status,0+pclath+cstack]
 10747                           
 10748                           
 10749                           ;i2c_master.c: 307: i2c_driver_sendNACK();
 10750  0DB0  318D  2598         	fcall	i1_i2c_driver_sendNACK
 10751                           
 10752                           ;i2c_master.c: 308: return I2C_SEND_STOP;
 10753  0DB2  300A               	movlw	10
 10754  0DB3  0008               	return
 10755  0DB4                     __end_ofi1_do_I2C_DO_NACK_STOP:	
 10756                           
 10757                           	psect	text79
 10758  0DAC                     __ptext79:	
 10759 ;; *************** function i1_do_I2C_DO_ACK *****************
 10760 ;; Defined at:
 10761 ;;		line 299 in file "mcc_generated_files/drivers/i2c_master.c"
 10762 ;; Parameters:    Size  Location     Type
 10763 ;;		None
 10764 ;; Auto vars:     Size  Location     Type
 10765 ;;		None
 10766 ;; Return value:  Size  Location     Type
 10767 ;;                  1    wreg      enum E12337
 10768 ;; Registers used:
 10769 ;;		wreg, status,2, status,0, pclath, cstack
 10770 ;; Tracked objects:
 10771 ;;		On entry : 0/0
 10772 ;;		On exit  : 0/0
 10773 ;;		Unchanged: 0/0
 10774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10775 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10776 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10777 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10778 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10779 ;;Total ram usage:        0 bytes
 10780 ;; Hardware stack levels used:    1
 10781 ;; Hardware stack levels required when called:    1
 10782 ;; This function calls:
 10783 ;;		i1_i2c_driver_sendACK
 10784 ;; This function is called by:
 10785 ;; This function uses a non-reentrant model
 10786 ;;
 10787                           
 10788                           
 10789                           ;psect for function i1_do_I2C_DO_ACK
 10790  0DAC                     i1_do_I2C_DO_ACK:	
 10791  0DAC                     i1l3204:	
 10792                           ;incstack = 0
 10793                           ; Regs used in i1_do_I2C_DO_ACK: [wreg+status,2+status,0+pclath+cstack]
 10794                           
 10795                           
 10796                           ;i2c_master.c: 301: i2c_driver_sendACK();
 10797  0DAC  318D  2594         	fcall	i1_i2c_driver_sendACK
 10798                           
 10799                           ;i2c_master.c: 302: return I2C_RCEN;
 10800  0DAE  3005               	movlw	5
 10801  0DAF  0008               	return
 10802  0DB0                     __end_ofi1_do_I2C_DO_ACK:	
 10803                           
 10804                           	psect	text80
 10805  0DD9                     __ptext80:	
 10806 ;; *************** function i1_do_I2C_RCEN *****************
 10807 ;; Defined at:
 10808 ;;		line 292 in file "mcc_generated_files/drivers/i2c_master.c"
 10809 ;; Parameters:    Size  Location     Type
 10810 ;;		None
 10811 ;; Auto vars:     Size  Location     Type
 10812 ;;		None
 10813 ;; Return value:  Size  Location     Type
 10814 ;;                  1    wreg      enum E12337
 10815 ;; Registers used:
 10816 ;;		wreg, status,2, status,0, pclath, cstack
 10817 ;; Tracked objects:
 10818 ;;		On entry : 0/0
 10819 ;;		On exit  : 0/0
 10820 ;;		Unchanged: 0/0
 10821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10822 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10823 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10824 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10825 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10826 ;;Total ram usage:        0 bytes
 10827 ;; Hardware stack levels used:    1
 10828 ;; Hardware stack levels required when called:    1
 10829 ;; This function calls:
 10830 ;;		i1_i2c_driver_startRX
 10831 ;; This function is called by:
 10832 ;; This function uses a non-reentrant model
 10833 ;;
 10834                           
 10835                           
 10836                           ;psect for function i1_do_I2C_RCEN
 10837  0DD9                     i1_do_I2C_RCEN:	
 10838  0DD9                     i1l3196:	
 10839                           ;incstack = 0
 10840                           ; Regs used in i1_do_I2C_RCEN: [wreg+status,2+status,0+pclath+cstack]
 10841                           
 10842                           
 10843                           ;i2c_master.c: 294: i2c_status.addressNACKCheck = 0;
 10844  0DD9  0021               	movlb	1	; select bank1
 10845  0DDA  11A0               	bcf	_i2c_status^(0+128),3
 10846                           
 10847                           ;i2c_master.c: 295: i2c_driver_startRX();
 10848  0DDB  318D  2570         	fcall	i1_i2c_driver_startRX
 10849                           
 10850                           ;i2c_master.c: 296: return I2C_RX;
 10851  0DDD  3004               	movlw	4
 10852  0DDE  0008               	return
 10853  0DDF                     __end_ofi1_do_I2C_RCEN:	
 10854                           
 10855                           	psect	text81
 10856  0E22                     __ptext81:	
 10857 ;; *************** function i1_do_I2C_SEND_ADR_WRITE *****************
 10858 ;; Defined at:
 10859 ;;		line 285 in file "mcc_generated_files/drivers/i2c_master.c"
 10860 ;; Parameters:    Size  Location     Type
 10861 ;;		None
 10862 ;; Auto vars:     Size  Location     Type
 10863 ;;		None
 10864 ;; Return value:  Size  Location     Type
 10865 ;;                  1    wreg      enum E12337
 10866 ;; Registers used:
 10867 ;;		wreg, status,2, status,0, pclath, cstack
 10868 ;; Tracked objects:
 10869 ;;		On entry : 0/0
 10870 ;;		On exit  : 0/0
 10871 ;;		Unchanged: 0/0
 10872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10873 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10874 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10875 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10876 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10877 ;;Total ram usage:        0 bytes
 10878 ;; Hardware stack levels used:    1
 10879 ;; Hardware stack levels required when called:    1
 10880 ;; This function calls:
 10881 ;;		i1_i2c_driver_TXData
 10882 ;; This function is called by:
 10883 ;; This function uses a non-reentrant model
 10884 ;;
 10885                           
 10886                           
 10887                           ;psect for function i1_do_I2C_SEND_ADR_WRITE
 10888  0E22                     i1_do_I2C_SEND_ADR_WRITE:	
 10889  0E22                     i1l3188:	
 10890                           ;incstack = 0
 10891                           ; Regs used in i1_do_I2C_SEND_ADR_WRITE: [wreg+status,2+status,0+pclath+cstack]
 10892                           
 10893                           
 10894                           ;i2c_master.c: 287: i2c_status.addressNACKCheck = 1;
 10895  0E22  0021               	movlb	1	; select bank1
 10896  0E23  15A0               	bsf	_i2c_status^(0+128),3
 10897                           
 10898                           ;i2c_master.c: 288: i2c_driver_TXData(i2c_status.address << 1);
 10899  0E24  3521               	lslf	(_i2c_status^(0+128)+1),w
 10900  0E25  318D  25C4         	fcall	i1_i2c_driver_TXData
 10901                           
 10902                           ;i2c_master.c: 289: return I2C_TX;
 10903  0E27  3003               	movlw	3
 10904  0E28  0008               	return
 10905  0E29                     __end_ofi1_do_I2C_SEND_ADR_WRITE:	
 10906                           
 10907                           	psect	text82
 10908  0E29                     __ptext82:	
 10909 ;; *************** function i1_do_I2C_SEND_ADR_READ *****************
 10910 ;; Defined at:
 10911 ;;		line 278 in file "mcc_generated_files/drivers/i2c_master.c"
 10912 ;; Parameters:    Size  Location     Type
 10913 ;;		None
 10914 ;; Auto vars:     Size  Location     Type
 10915 ;;		None
 10916 ;; Return value:  Size  Location     Type
 10917 ;;                  1    wreg      enum E12337
 10918 ;; Registers used:
 10919 ;;		wreg, status,2, status,0, pclath, cstack
 10920 ;; Tracked objects:
 10921 ;;		On entry : 0/0
 10922 ;;		On exit  : 0/0
 10923 ;;		Unchanged: 0/0
 10924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10925 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10926 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10927 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10928 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10929 ;;Total ram usage:        0 bytes
 10930 ;; Hardware stack levels used:    1
 10931 ;; Hardware stack levels required when called:    1
 10932 ;; This function calls:
 10933 ;;		i1_i2c_driver_TXData
 10934 ;; This function is called by:
 10935 ;; This function uses a non-reentrant model
 10936 ;;
 10937                           
 10938                           
 10939                           ;psect for function i1_do_I2C_SEND_ADR_READ
 10940  0E29                     i1_do_I2C_SEND_ADR_READ:	
 10941  0E29                     i1l3180:	
 10942                           ;incstack = 0
 10943                           ; Regs used in i1_do_I2C_SEND_ADR_READ: [wreg+status,2+status,0+pclath+cstack]
 10944                           
 10945                           
 10946                           ;i2c_master.c: 280: i2c_status.addressNACKCheck = 1;
 10947  0E29  0021               	movlb	1	; select bank1
 10948  0E2A  15A0               	bsf	_i2c_status^(0+128),3
 10949                           
 10950                           ;i2c_master.c: 281: i2c_driver_TXData(i2c_status.address << 1 | 1);
 10951  0E2B  1403               	setc
 10952  0E2C  0D21               	rlf	(_i2c_status^(0+128)+1),w
 10953  0E2D  318D  25C4         	fcall	i1_i2c_driver_TXData
 10954                           
 10955                           ;i2c_master.c: 282: return I2C_RCEN;
 10956  0E2F  3005               	movlw	5
 10957  0E30  0008               	return
 10958  0E31                     __end_ofi1_do_I2C_SEND_ADR_READ:	
 10959                           
 10960                           	psect	text83
 10961  0DA8                     __ptext83:	
 10962 ;; *************** function i1_do_I2C_SEND_STOP *****************
 10963 ;; Defined at:
 10964 ;;		line 272 in file "mcc_generated_files/drivers/i2c_master.c"
 10965 ;; Parameters:    Size  Location     Type
 10966 ;;		None
 10967 ;; Auto vars:     Size  Location     Type
 10968 ;;		None
 10969 ;; Return value:  Size  Location     Type
 10970 ;;                  1    wreg      enum E12337
 10971 ;; Registers used:
 10972 ;;		wreg, status,2, status,0, pclath, cstack
 10973 ;; Tracked objects:
 10974 ;;		On entry : 0/0
 10975 ;;		On exit  : 0/0
 10976 ;;		Unchanged: 0/0
 10977 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10978 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10979 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10980 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10981 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10982 ;;Total ram usage:        0 bytes
 10983 ;; Hardware stack levels used:    1
 10984 ;; Hardware stack levels required when called:    1
 10985 ;; This function calls:
 10986 ;;		i1_i2c_driver_stop
 10987 ;; This function is called by:
 10988 ;;		i1_do_I2C_DO_ADDRESS_NACK
 10989 ;;		i1_do_I2C_TX
 10990 ;;		i1_do_I2C_TX_EMPTY
 10991 ;; This function uses a non-reentrant model
 10992 ;;
 10993                           
 10994                           
 10995                           ;psect for function i1_do_I2C_SEND_STOP
 10996  0DA8                     i1_do_I2C_SEND_STOP:	
 10997  0DA8                     i1l3036:	
 10998                           ;incstack = 0
 10999                           ; Regs used in i1_do_I2C_SEND_STOP: [wreg+status,2+status,0+pclath+cstack]
 11000                           
 11001                           
 11002                           ;i2c_master.c: 274: i2c_driver_stop();
 11003  0DA8  318D  256D         	fcall	i1_i2c_driver_stop
 11004                           
 11005                           ;i2c_master.c: 275: return I2C_IDLE;
 11006  0DAA  3000               	movlw	0
 11007  0DAB  0008               	return
 11008  0DAC                     __end_ofi1_do_I2C_SEND_STOP:	
 11009                           
 11010                           	psect	text84
 11011  0DA4                     __ptext84:	
 11012 ;; *************** function i1_do_I2C_SEND_RESTART *****************
 11013 ;; Defined at:
 11014 ;;		line 266 in file "mcc_generated_files/drivers/i2c_master.c"
 11015 ;; Parameters:    Size  Location     Type
 11016 ;;		None
 11017 ;; Auto vars:     Size  Location     Type
 11018 ;;		None
 11019 ;; Return value:  Size  Location     Type
 11020 ;;                  1    wreg      enum E12337
 11021 ;; Registers used:
 11022 ;;		wreg, status,2, status,0, pclath, cstack
 11023 ;; Tracked objects:
 11024 ;;		On entry : 0/0
 11025 ;;		On exit  : 0/0
 11026 ;;		Unchanged: 0/0
 11027 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11028 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11029 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11030 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11031 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11032 ;;Total ram usage:        0 bytes
 11033 ;; Hardware stack levels used:    1
 11034 ;; Hardware stack levels required when called:    1
 11035 ;; This function calls:
 11036 ;;		i1_i2c_driver_restart
 11037 ;; This function is called by:
 11038 ;;		i1_do_I2C_DO_ADDRESS_NACK
 11039 ;;		i1_do_I2C_TX_EMPTY
 11040 ;; This function uses a non-reentrant model
 11041 ;;
 11042                           
 11043                           
 11044                           ;psect for function i1_do_I2C_SEND_RESTART
 11045  0DA4                     i1_do_I2C_SEND_RESTART:	
 11046  0DA4                     i1l3030:	
 11047                           ;incstack = 0
 11048                           ; Regs used in i1_do_I2C_SEND_RESTART: [wreg+status,2+status,0+pclath+cstack]
 11049                           
 11050                           
 11051                           ;i2c_master.c: 268: i2c_driver_restart();
 11052  0DA4  318D  256A         	fcall	i1_i2c_driver_restart
 11053                           
 11054                           ;i2c_master.c: 269: return I2C_SEND_ADR_READ;
 11055  0DA6  3001               	movlw	1
 11056  0DA7  0008               	return
 11057  0DA8                     __end_ofi1_do_I2C_SEND_RESTART:	
 11058                           
 11059                           	psect	text85
 11060  0DA0                     __ptext85:	
 11061 ;; *************** function i1_do_I2C_SEND_RESTART_WRITE *****************
 11062 ;; Defined at:
 11063 ;;		line 260 in file "mcc_generated_files/drivers/i2c_master.c"
 11064 ;; Parameters:    Size  Location     Type
 11065 ;;		None
 11066 ;; Auto vars:     Size  Location     Type
 11067 ;;		None
 11068 ;; Return value:  Size  Location     Type
 11069 ;;                  1    wreg      enum E12337
 11070 ;; Registers used:
 11071 ;;		wreg, status,2, status,0, pclath, cstack
 11072 ;; Tracked objects:
 11073 ;;		On entry : 0/0
 11074 ;;		On exit  : 0/0
 11075 ;;		Unchanged: 0/0
 11076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11077 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11078 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11079 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11080 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11081 ;;Total ram usage:        0 bytes
 11082 ;; Hardware stack levels used:    1
 11083 ;; Hardware stack levels required when called:    1
 11084 ;; This function calls:
 11085 ;;		i1_i2c_driver_restart
 11086 ;; This function is called by:
 11087 ;;		i1_do_I2C_TX
 11088 ;; This function uses a non-reentrant model
 11089 ;;
 11090                           
 11091                           
 11092                           ;psect for function i1_do_I2C_SEND_RESTART_WRITE
 11093  0DA0                     i1_do_I2C_SEND_RESTART_WRITE:	
 11094  0DA0                     i1l3024:	
 11095                           ;incstack = 0
 11096                           ; Regs used in i1_do_I2C_SEND_RESTART_WRITE: [wreg+status,2+status,0+pclath+cstack]
 11097                           
 11098                           
 11099                           ;i2c_master.c: 262: i2c_driver_restart();
 11100  0DA0  318D  256A         	fcall	i1_i2c_driver_restart
 11101                           
 11102                           ;i2c_master.c: 263: return I2C_SEND_ADR_WRITE;
 11103  0DA2  3002               	movlw	2
 11104  0DA3  0008               	return
 11105  0DA4                     __end_ofi1_do_I2C_SEND_RESTART_WRITE:	
 11106                           
 11107                           	psect	text86
 11108  0D9C                     __ptext86:	
 11109 ;; *************** function i1_do_I2C_SEND_RESTART_READ *****************
 11110 ;; Defined at:
 11111 ;;		line 254 in file "mcc_generated_files/drivers/i2c_master.c"
 11112 ;; Parameters:    Size  Location     Type
 11113 ;;		None
 11114 ;; Auto vars:     Size  Location     Type
 11115 ;;		None
 11116 ;; Return value:  Size  Location     Type
 11117 ;;                  1    wreg      enum E12337
 11118 ;; Registers used:
 11119 ;;		wreg, status,2, status,0, pclath, cstack
 11120 ;; Tracked objects:
 11121 ;;		On entry : 0/0
 11122 ;;		On exit  : 0/0
 11123 ;;		Unchanged: 0/0
 11124 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11125 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11126 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11127 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11128 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11129 ;;Total ram usage:        0 bytes
 11130 ;; Hardware stack levels used:    1
 11131 ;; Hardware stack levels required when called:    1
 11132 ;; This function calls:
 11133 ;;		i1_i2c_driver_restart
 11134 ;; This function is called by:
 11135 ;;		i1_do_I2C_TX
 11136 ;; This function uses a non-reentrant model
 11137 ;;
 11138                           
 11139                           
 11140                           ;psect for function i1_do_I2C_SEND_RESTART_READ
 11141  0D9C                     i1_do_I2C_SEND_RESTART_READ:	
 11142  0D9C                     i1l3018:	
 11143                           ;incstack = 0
 11144                           ; Regs used in i1_do_I2C_SEND_RESTART_READ: [wreg+status,2+status,0+pclath+cstack]
 11145                           
 11146                           
 11147                           ;i2c_master.c: 256: i2c_driver_restart();
 11148  0D9C  318D  256A         	fcall	i1_i2c_driver_restart
 11149                           
 11150                           ;i2c_master.c: 257: return I2C_SEND_ADR_READ;
 11151  0D9E  3001               	movlw	1
 11152  0D9F  0008               	return
 11153  0DA0                     __end_ofi1_do_I2C_SEND_RESTART_READ:	
 11154                           
 11155                           	psect	text87
 11156  0DC9                     __ptext87:	
 11157 ;; *************** function i1_do_I2C_IDLE *****************
 11158 ;; Defined at:
 11159 ;;		line 247 in file "mcc_generated_files/drivers/i2c_master.c"
 11160 ;; Parameters:    Size  Location     Type
 11161 ;;		None
 11162 ;; Auto vars:     Size  Location     Type
 11163 ;;		None
 11164 ;; Return value:  Size  Location     Type
 11165 ;;                  1    wreg      enum E12337
 11166 ;; Registers used:
 11167 ;;		wreg, status,2
 11168 ;; Tracked objects:
 11169 ;;		On entry : 0/0
 11170 ;;		On exit  : 0/0
 11171 ;;		Unchanged: 0/0
 11172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11173 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11174 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11175 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11176 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11177 ;;Total ram usage:        0 bytes
 11178 ;; Hardware stack levels used:    1
 11179 ;; This function calls:
 11180 ;;		Nothing
 11181 ;; This function is called by:
 11182 ;; This function uses a non-reentrant model
 11183 ;;
 11184                           
 11185                           
 11186                           ;psect for function i1_do_I2C_IDLE
 11187  0DC9                     i1_do_I2C_IDLE:	
 11188  0DC9                     i1l3172:	
 11189                           ;incstack = 0
 11190                           ; Regs used in i1_do_I2C_IDLE: [wreg+status,2]
 11191                           
 11192                           
 11193                           ;i2c_master.c: 249: i2c_status.busy = 0;
 11194  0DC9  0021               	movlb	1	; select bank1
 11195  0DCA  1020               	bcf	_i2c_status^(0+128),0
 11196                           
 11197                           ;i2c_master.c: 250: i2c_status.error = I2C_NOERR;
 11198  0DCB  01AA               	clrf	(_i2c_status^(0+128)+10)
 11199                           
 11200                           ;i2c_master.c: 251: return I2C_RESET;
 11201  0DCC  300E               	movlw	14
 11202  0DCD  0008               	return
 11203  0DCE                     __end_ofi1_do_I2C_IDLE:	
 11204                           
 11205                           	psect	text88
 11206  0E1B                     __ptext88:	
 11207 ;; *************** function i1_do_I2C_RESET *****************
 11208 ;; Defined at:
 11209 ;;		line 239 in file "mcc_generated_files/drivers/i2c_master.c"
 11210 ;; Parameters:    Size  Location     Type
 11211 ;;		None
 11212 ;; Auto vars:     Size  Location     Type
 11213 ;;		None
 11214 ;; Return value:  Size  Location     Type
 11215 ;;                  1    wreg      enum E12337
 11216 ;; Registers used:
 11217 ;;		wreg, status,2, status,0, pclath, cstack
 11218 ;; Tracked objects:
 11219 ;;		On entry : 0/0
 11220 ;;		On exit  : 0/0
 11221 ;;		Unchanged: 0/0
 11222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11223 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11224 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11225 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11226 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11227 ;;Total ram usage:        0 bytes
 11228 ;; Hardware stack levels used:    1
 11229 ;; Hardware stack levels required when called:    1
 11230 ;; This function calls:
 11231 ;;		i1_i2c_driver_resetBus
 11232 ;; This function is called by:
 11233 ;; This function uses a non-reentrant model
 11234 ;;
 11235                           
 11236                           
 11237                           ;psect for function i1_do_I2C_RESET
 11238  0E1B                     i1_do_I2C_RESET:	
 11239  0E1B                     i1l3162:	
 11240                           ;incstack = 0
 11241                           ; Regs used in i1_do_I2C_RESET: [wreg+status,2+status,0+pclath+cstack]
 11242                           
 11243                           
 11244                           ;i2c_master.c: 241: i2c_driver_resetBus();
 11245  0E1B  318D  255E         	fcall	i1_i2c_driver_resetBus
 11246                           
 11247                           ;i2c_master.c: 242: i2c_status.busy = 0;
 11248  0E1D  0021               	movlb	1	; select bank1
 11249  0E1E  1020               	bcf	_i2c_status^(0+128),0
 11250                           
 11251                           ;i2c_master.c: 243: i2c_status.error = I2C_NOERR;
 11252  0E1F  01AA               	clrf	(_i2c_status^(0+128)+10)
 11253                           
 11254                           ;i2c_master.c: 244: return I2C_RESET;
 11255  0E20  300E               	movlw	14
 11256  0E21  0008               	return
 11257  0E22                     __end_ofi1_do_I2C_RESET:	
 11258                           
 11259                           	psect	text89
 11260  0637                     __ptext89:	
 11261 ;; *************** function i1_do_I2C_TX_EMPTY *****************
 11262 ;; Defined at:
 11263 ;;		line 382 in file "mcc_generated_files/drivers/i2c_master.c"
 11264 ;; Parameters:    Size  Location     Type
 11265 ;;		None
 11266 ;; Auto vars:     Size  Location     Type
 11267 ;;		None
 11268 ;; Return value:  Size  Location     Type
 11269 ;;                  1    wreg      enum E12337
 11270 ;; Registers used:
 11271 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11272 ;; Tracked objects:
 11273 ;;		On entry : 0/0
 11274 ;;		On exit  : 0/0
 11275 ;;		Unchanged: 0/0
 11276 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11277 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11278 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11279 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11280 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11281 ;;Total ram usage:        1 bytes
 11282 ;; Hardware stack levels used:    1
 11283 ;; Hardware stack levels required when called:    3
 11284 ;; This function calls:
 11285 ;;		Absolute function
 11286 ;;		i1_do_I2C_SEND_RESTART
 11287 ;;		i1_do_I2C_SEND_STOP
 11288 ;;		i1_i2c_restartWrite
 11289 ;;		i1_mssp_setIRQ
 11290 ;;		i1_rd1RegCompleteHandler
 11291 ;;		i1_rd2RegCompleteHandler
 11292 ;;		i1_rdBlkRegCompleteHandler
 11293 ;;		i1_returnReset
 11294 ;;		i1_returnStop
 11295 ;;		i1_wr1RegCompleteHandler
 11296 ;;		i1_wr2RegCompleteHandler
 11297 ;; This function is called by:
 11298 ;; This function uses a non-reentrant model
 11299 ;;
 11300                           
 11301                           
 11302                           ;psect for function i1_do_I2C_TX_EMPTY
 11303  0637                     i1_do_I2C_TX_EMPTY:	
 11304  0637                     i1l5608:	
 11305                           ;incstack = 0
 11306 ;; hardware stack exceeded
 11307                           ; Regs used in i1_do_I2C_TX_EMPTY: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11308                           
 11309                           
 11310                           ;i2c_master.c: 384: i2c_status.bufferFree = 1;
 11311  0637  0021               	movlb	1	; select bank1
 11312  0638  1520               	bsf	_i2c_status^(0+128),2
 11313                           
 11314                           ;i2c_master.c: 385: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
 11315  0639  2E44               	goto	i1l5626
 11316  063A                     i1l5610:	
 11317                           ;i2c_master.c: 386: {
 11318                           ;i2c_master.c: 387: case i2c_restart_read:
 11319                           
 11320                           
 11321                           ;i2c_master.c: 388: case i2c_restart_write:
 11322                           ;i2c_master.c: 389: return do_I2C_SEND_RESTART();
 11323  063A  318D  25A4         	fcall	i1_do_I2C_SEND_RESTART
 11324  063C  0008               	return
 11325  063D                     i1l5614:	
 11326                           ;i2c_master.c: 390: case i2c_continue:
 11327                           
 11328                           
 11329                           ;i2c_master.c: 391: mssp_setIRQ();
 11330  063D  318D  2576         	fcall	i1_mssp_setIRQ
 11331                           
 11332                           ;i2c_master.c: 392: return I2C_TX;
 11333  063F  3003               	movlw	3
 11334  0640  0008               	return
 11335  0641                     i1l5620:	
 11336                           ;i2c_master.c: 394: case i2c_stop:
 11337                           
 11338                           ;i2c_master.c: 393: default:
 11339                           
 11340                           
 11341                           ;i2c_master.c: 395: return do_I2C_SEND_STOP();
 11342  0641  318D  25A8         	fcall	i1_do_I2C_SEND_STOP
 11343                           
 11344                           ;i2c_master.c: 396: }
 11345  0643  0008               	return
 11346  0644                     i1l5626:	
 11347  0644  0021               	movlb	1	; select bank1
 11348  0645  0837               	movf	(low ((_i2c_status| 0+23)))^(0+128),w
 11349  0646  00FA               	movwf	??i1_do_I2C_TX_EMPTY
 11350  0647  087A               	movf	??i1_do_I2C_TX_EMPTY,w
 11351  0648  00F9               	movwf	i1returnStop@p
 11352  0649  300B               	movlw	11
 11353  064A  3EA0               	addlw	(low (_i2c_status| 0))& (0+255)
 11354  064B  0086               	movwf	6
 11355  064C  0187               	clrf	7
 11356  064D  3F41               	moviw [1]fsr1
 11357  064E  008A               	movwf	10
 11358  064F  3F40               	moviw [0]fsr1
 11359  0650  000A               	callw
 11360  0651  3186               	pagesel	$
 11361                           
 11362                           ; Switch size 1, requested type "space"
 11363                           ; Number of cases is 4, Range of values is 1 to 4
 11364                           ; switch strategies available:
 11365                           ; Name         Instructions Cycles
 11366                           ; simple_byte           13     7 (average)
 11367                           ; direct_byte           17     9 (fixed)
 11368                           ; jumptable            263     9 (fixed)
 11369                           ;	Chosen strategy is simple_byte
 11370  0652  3A01               	xorlw	1	; case 1
 11371  0653  1903               	skipnz
 11372  0654  2E41               	goto	i1l5620
 11373  0655  3A03               	xorlw	3	; case 2
 11374  0656  1903               	skipnz
 11375  0657  2E3A               	goto	i1l5610
 11376  0658  3A01               	xorlw	1	; case 3
 11377  0659  1903               	skipnz
 11378  065A  2E3A               	goto	i1l5610
 11379  065B  3A07               	xorlw	7	; case 4
 11380  065C  1903               	skipnz
 11381  065D  2E3D               	goto	i1l5614
 11382  065E  2E41               	goto	i1l5620
 11383  065F  0008               	return
 11384  0660                     __end_ofi1_do_I2C_TX_EMPTY:	
 11385                           
 11386                           	psect	text90
 11387  0D76                     __ptext90:	
 11388 ;; *************** function i1_mssp_setIRQ *****************
 11389 ;; Defined at:
 11390 ;;		line 58 in file "mcc_generated_files/i2c_driver.c"
 11391 ;; Parameters:    Size  Location     Type
 11392 ;;		None
 11393 ;; Auto vars:     Size  Location     Type
 11394 ;;		None
 11395 ;; Return value:  Size  Location     Type
 11396 ;;                  1    wreg      void 
 11397 ;; Registers used:
 11398 ;;		None
 11399 ;; Tracked objects:
 11400 ;;		On entry : 0/0
 11401 ;;		On exit  : 0/0
 11402 ;;		Unchanged: 0/0
 11403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11405 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11406 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11407 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11408 ;;Total ram usage:        0 bytes
 11409 ;; Hardware stack levels used:    1
 11410 ;; This function calls:
 11411 ;;		Nothing
 11412 ;; This function is called by:
 11413 ;;		i1_do_I2C_TX_EMPTY
 11414 ;; This function uses a non-reentrant model
 11415 ;;
 11416                           
 11417                           
 11418                           ;psect for function i1_mssp_setIRQ
 11419  0D76                     i1_mssp_setIRQ:	
 11420                           
 11421                           ;i2c_driver.c: 60: PIR1bits.SSP1IF = 1;
 11422                           
 11423                           ;incstack = 0
 11424                           ; Regs used in i1_mssp_setIRQ: []
 11425  0D76  0020               	movlb	0	; select bank0
 11426  0D77  1590               	bsf	16,3	;volatile
 11427  0D78  0008               	return
 11428  0D79                     __end_ofi1_mssp_setIRQ:	
 11429                           
 11430                           	psect	text91
 11431  0EDE                     __ptext91:	
 11432 ;; *************** function i1_i2c_driver_isNACK *****************
 11433 ;; Defined at:
 11434 ;;		line 161 in file "mcc_generated_files/i2c_driver.c"
 11435 ;; Parameters:    Size  Location     Type
 11436 ;;		None
 11437 ;; Auto vars:     Size  Location     Type
 11438 ;;		None
 11439 ;; Return value:  Size  Location     Type
 11440 ;;		None               void
 11441 ;; Registers used:
 11442 ;;		wreg, status,2, status,0
 11443 ;; Tracked objects:
 11444 ;;		On entry : 0/0
 11445 ;;		On exit  : 0/0
 11446 ;;		Unchanged: 0/0
 11447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11448 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11449 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11450 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11451 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11452 ;;Total ram usage:        1 bytes
 11453 ;; Hardware stack levels used:    1
 11454 ;; This function calls:
 11455 ;;		Nothing
 11456 ;; This function is called by:
 11457 ;;		i1_do_I2C_TX
 11458 ;;		i1_i2c_ISR
 11459 ;; This function uses a non-reentrant model
 11460 ;;
 11461                           
 11462                           
 11463                           ;psect for function i1_i2c_driver_isNACK
 11464  0EDE                     i1_i2c_driver_isNACK:	
 11465                           
 11466                           ;i2c_driver.c: 163: return SSP1CON2bits.ACKSTAT = 1;
 11467                           
 11468                           ;incstack = 0
 11469                           ; Regs used in i1_i2c_driver_isNACK: [wreg+status,2+status,0]
 11470  0EDE  0024               	movlb	4	; select bank4
 11471  0EDF  0816               	movf	22,w	;volatile
 11472  0EE0  39BF               	andlw	-65
 11473  0EE1  3840               	iorlw	64
 11474  0EE2  0096               	movwf	22	;volatile
 11475  0EE3  0E16               	swapf	22,w	;volatile
 11476  0EE4  0C89               	rrf	9,f
 11477  0EE5  0C89               	rrf	9,f
 11478  0EE6  3901               	andlw	1
 11479  0EE7  00F0               	movwf	??i1_i2c_driver_isNACK
 11480  0EE8  0C70               	rrf	??i1_i2c_driver_isNACK,w
 11481  0EE9  0008               	return
 11482  0EEA                     __end_ofi1_i2c_driver_isNACK:	
 11483                           
 11484                           	psect	text92
 11485  0DC4                     __ptext92:	
 11486 ;; *************** function i1_i2c_driver_TXData *****************
 11487 ;; Defined at:
 11488 ;;		line 186 in file "mcc_generated_files/i2c_driver.c"
 11489 ;; Parameters:    Size  Location     Type
 11490 ;;  d               1    wreg     unsigned char 
 11491 ;; Auto vars:     Size  Location     Type
 11492 ;;  d               1    0[COMMON] unsigned char 
 11493 ;; Return value:  Size  Location     Type
 11494 ;;                  1    wreg      void 
 11495 ;; Registers used:
 11496 ;;		wreg
 11497 ;; Tracked objects:
 11498 ;;		On entry : 0/0
 11499 ;;		On exit  : 0/0
 11500 ;;		Unchanged: 0/0
 11501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11502 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11503 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11504 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11505 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11506 ;;Total ram usage:        1 bytes
 11507 ;; Hardware stack levels used:    1
 11508 ;; This function calls:
 11509 ;;		Nothing
 11510 ;; This function is called by:
 11511 ;;		i1_do_I2C_SEND_ADR_READ
 11512 ;;		i1_do_I2C_SEND_ADR_WRITE
 11513 ;;		i1_do_I2C_TX
 11514 ;; This function uses a non-reentrant model
 11515 ;;
 11516                           
 11517                           
 11518                           ;psect for function i1_i2c_driver_TXData
 11519  0DC4                     i1_i2c_driver_TXData:	
 11520                           
 11521                           ;incstack = 0
 11522                           ; Regs used in i1_i2c_driver_TXData: [wreg]
 11523                           ;i1i2c_driver_TXData@d stored from wreg
 11524  0DC4  00F0               	movwf	i1i2c_driver_TXData@d
 11525                           
 11526                           ;i2c_driver.c: 188: SSP1BUF = d;
 11527  0DC5  0870               	movf	i1i2c_driver_TXData@d,w
 11528  0DC6  0024               	movlb	4	; select bank4
 11529  0DC7  0091               	movwf	17	;volatile
 11530  0DC8  0008               	return
 11531  0DC9                     __end_ofi1_i2c_driver_TXData:	
 11532                           
 11533                           	psect	text93
 11534  0D73                     __ptext93:	
 11535 ;; *************** function i1_i2c_driver_getRXData *****************
 11536 ;; Defined at:
 11537 ;;		line 171 in file "mcc_generated_files/i2c_driver.c"
 11538 ;; Parameters:    Size  Location     Type
 11539 ;;		None
 11540 ;; Auto vars:     Size  Location     Type
 11541 ;;		None
 11542 ;; Return value:  Size  Location     Type
 11543 ;;                  1    wreg      unsigned char 
 11544 ;; Registers used:
 11545 ;;		wreg
 11546 ;; Tracked objects:
 11547 ;;		On entry : 0/0
 11548 ;;		On exit  : 0/0
 11549 ;;		Unchanged: 0/0
 11550 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11551 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11552 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11553 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11554 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11555 ;;Total ram usage:        0 bytes
 11556 ;; Hardware stack levels used:    1
 11557 ;; This function calls:
 11558 ;;		Nothing
 11559 ;; This function is called by:
 11560 ;;		i1_do_I2C_RX
 11561 ;; This function uses a non-reentrant model
 11562 ;;
 11563                           
 11564                           
 11565                           ;psect for function i1_i2c_driver_getRXData
 11566  0D73                     i1_i2c_driver_getRXData:	
 11567                           
 11568                           ;i2c_driver.c: 173: return SSP1BUF;
 11569                           
 11570                           ;incstack = 0
 11571                           ; Regs used in i1_i2c_driver_getRXData: [wreg]
 11572  0D73  0024               	movlb	4	; select bank4
 11573  0D74  0811               	movf	17,w	;volatile
 11574  0D75  0008               	return
 11575  0D76                     __end_ofi1_i2c_driver_getRXData:	
 11576                           
 11577                           	psect	text94
 11578  0D98                     __ptext94:	
 11579 ;; *************** function i1_i2c_driver_sendNACK *****************
 11580 ;; Defined at:
 11581 ;;		line 202 in file "mcc_generated_files/i2c_driver.c"
 11582 ;; Parameters:    Size  Location     Type
 11583 ;;		None
 11584 ;; Auto vars:     Size  Location     Type
 11585 ;;		None
 11586 ;; Return value:  Size  Location     Type
 11587 ;;                  1    wreg      void 
 11588 ;; Registers used:
 11589 ;;		None
 11590 ;; Tracked objects:
 11591 ;;		On entry : 0/0
 11592 ;;		On exit  : 0/0
 11593 ;;		Unchanged: 0/0
 11594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11595 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11596 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11597 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11598 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11599 ;;Total ram usage:        0 bytes
 11600 ;; Hardware stack levels used:    1
 11601 ;; This function calls:
 11602 ;;		Nothing
 11603 ;; This function is called by:
 11604 ;;		i1_do_I2C_DO_NACK_STOP
 11605 ;;		i1_do_I2C_DO_NACK_RESTART
 11606 ;; This function uses a non-reentrant model
 11607 ;;
 11608                           
 11609                           
 11610                           ;psect for function i1_i2c_driver_sendNACK
 11611  0D98                     i1_i2c_driver_sendNACK:	
 11612                           
 11613                           ;i2c_driver.c: 204: SSP1CON2bits.ACKDT = 1;
 11614                           
 11615                           ;incstack = 0
 11616                           ; Regs used in i1_i2c_driver_sendNACK: []
 11617  0D98  0024               	movlb	4	; select bank4
 11618  0D99  1696               	bsf	22,5	;volatile
 11619                           
 11620                           ;i2c_driver.c: 205: SSP1CON2bits.ACKEN = 1;
 11621  0D9A  1616               	bsf	22,4	;volatile
 11622  0D9B  0008               	return
 11623  0D9C                     __end_ofi1_i2c_driver_sendNACK:	
 11624                           
 11625                           	psect	text95
 11626  0D5E                     __ptext95:	
 11627 ;; *************** function i1_i2c_driver_resetBus *****************
 11628 ;; Defined at:
 11629 ;;		line 141 in file "mcc_generated_files/i2c_driver.c"
 11630 ;; Parameters:    Size  Location     Type
 11631 ;;		None
 11632 ;; Auto vars:     Size  Location     Type
 11633 ;;		None
 11634 ;; Return value:  Size  Location     Type
 11635 ;;                  1    wreg      void 
 11636 ;; Registers used:
 11637 ;;		None
 11638 ;; Tracked objects:
 11639 ;;		On entry : 0/0
 11640 ;;		On exit  : 0/0
 11641 ;;		Unchanged: 0/0
 11642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11643 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11644 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11645 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11646 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11647 ;;Total ram usage:        0 bytes
 11648 ;; Hardware stack levels used:    1
 11649 ;; This function calls:
 11650 ;;		Nothing
 11651 ;; This function is called by:
 11652 ;;		i1_do_I2C_RESET
 11653 ;; This function uses a non-reentrant model
 11654 ;;
 11655                           
 11656                           
 11657                           ;psect for function i1_i2c_driver_resetBus
 11658  0D5E                     i1_i2c_driver_resetBus:	
 11659                           
 11660                           ;incstack = 0
 11661                           ; Regs used in i1_i2c_driver_resetBus: []
 11662  0D5E  0008               	return
 11663  0D5F                     __end_ofi1_i2c_driver_resetBus:	
 11664                           
 11665                           	psect	text96
 11666  0D70                     __ptext96:	
 11667 ;; *************** function i1_i2c_driver_startRX *****************
 11668 ;; Defined at:
 11669 ;;		line 166 in file "mcc_generated_files/i2c_driver.c"
 11670 ;; Parameters:    Size  Location     Type
 11671 ;;		None
 11672 ;; Auto vars:     Size  Location     Type
 11673 ;;		None
 11674 ;; Return value:  Size  Location     Type
 11675 ;;                  1    wreg      void 
 11676 ;; Registers used:
 11677 ;;		None
 11678 ;; Tracked objects:
 11679 ;;		On entry : 0/0
 11680 ;;		On exit  : 0/0
 11681 ;;		Unchanged: 0/0
 11682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11683 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11684 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11685 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11686 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11687 ;;Total ram usage:        0 bytes
 11688 ;; Hardware stack levels used:    1
 11689 ;; This function calls:
 11690 ;;		Nothing
 11691 ;; This function is called by:
 11692 ;;		i1_do_I2C_RCEN
 11693 ;; This function uses a non-reentrant model
 11694 ;;
 11695                           
 11696                           
 11697                           ;psect for function i1_i2c_driver_startRX
 11698  0D70                     i1_i2c_driver_startRX:	
 11699                           
 11700                           ;i2c_driver.c: 168: SSP1CON2bits.RCEN = 1;
 11701                           
 11702                           ;incstack = 0
 11703                           ; Regs used in i1_i2c_driver_startRX: []
 11704  0D70  0024               	movlb	4	; select bank4
 11705  0D71  1596               	bsf	22,3	;volatile
 11706  0D72  0008               	return
 11707  0D73                     __end_ofi1_i2c_driver_startRX:	
 11708                           
 11709                           	psect	text97
 11710  0002                     __ptext97:	
 11711 ;; *************** function i1_i2c_restartWrite *****************
 11712 ;; Defined at:
 11713 ;;		line 35 in file "mcc_generated_files/drivers/i2c_types.c"
 11714 ;; Parameters:    Size  Location     Type
 11715 ;;  p               1    9[COMMON] PTR void 
 11716 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 11717 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 11718 ;; Auto vars:     Size  Location     Type
 11719 ;;		None
 11720 ;; Return value:  Size  Location     Type
 11721 ;;                  1    wreg      enum E97
 11722 ;; Registers used:
 11723 ;;		wreg
 11724 ;; Tracked objects:
 11725 ;;		On entry : 0/0
 11726 ;;		On exit  : 0/0
 11727 ;;		Unchanged: 0/0
 11728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11729 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11730 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11731 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11732 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11733 ;;Total ram usage:        1 bytes
 11734 ;; Hardware stack levels used:    1
 11735 ;; This function calls:
 11736 ;;		Nothing
 11737 ;; This function is called by:
 11738 ;; This function uses a non-reentrant model
 11739 ;;
 11740                           
 11741                           
 11742                           ;psect for function i1_i2c_restartWrite
 11743  0002                     i1_i2c_restartWrite:	
 11744  0002                     i1l3062:	
 11745                           ;incstack = 0
 11746                           ; Regs used in i1_i2c_restartWrite: [wreg]
 11747                           
 11748                           
 11749                           ;i2c_types.c: 37: return i2c_restart_write;
 11750  0002  3003               	movlw	3
 11751  0003  0008               	return
 11752  0004                     __end_ofi1_i2c_restartWrite:	
 11753                           
 11754                           	psect	text98
 11755  0D62                     __ptext98:	
 11756 ;; *************** function i1_returnReset *****************
 11757 ;; Defined at:
 11758 ;;		line 448 in file "mcc_generated_files/drivers/i2c_master.c"
 11759 ;; Parameters:    Size  Location     Type
 11760 ;;  p               1    9[COMMON] PTR void 
 11761 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 11762 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 11763 ;; Auto vars:     Size  Location     Type
 11764 ;;		None
 11765 ;; Return value:  Size  Location     Type
 11766 ;;                  1    wreg      enum E12171
 11767 ;; Registers used:
 11768 ;;		wreg
 11769 ;; Tracked objects:
 11770 ;;		On entry : 0/0
 11771 ;;		On exit  : 0/0
 11772 ;;		Unchanged: 0/0
 11773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11774 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11775 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11776 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11777 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11778 ;;Total ram usage:        1 bytes
 11779 ;; Hardware stack levels used:    1
 11780 ;; This function calls:
 11781 ;;		Nothing
 11782 ;; This function is called by:
 11783 ;; This function uses a non-reentrant model
 11784 ;;
 11785                           
 11786                           
 11787                           ;psect for function i1_returnReset
 11788  0D62                     i1_returnReset:	
 11789  0D62                     i1l3058:	
 11790                           ;incstack = 0
 11791                           ; Regs used in i1_returnReset: [wreg]
 11792                           
 11793                           
 11794                           ;i2c_master.c: 450: return i2c_reset_link;
 11795  0D62  3005               	movlw	5
 11796  0D63  0008               	return
 11797  0D64                     __end_ofi1_returnReset:	
 11798                           
 11799                           	psect	text99
 11800  0D60                     __ptext99:	
 11801 ;; *************** function i1_returnStop *****************
 11802 ;; Defined at:
 11803 ;;		line 443 in file "mcc_generated_files/drivers/i2c_master.c"
 11804 ;; Parameters:    Size  Location     Type
 11805 ;;  p               1    9[COMMON] PTR void 
 11806 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 11807 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 11808 ;; Auto vars:     Size  Location     Type
 11809 ;;		None
 11810 ;; Return value:  Size  Location     Type
 11811 ;;                  1    wreg      enum E12171
 11812 ;; Registers used:
 11813 ;;		wreg
 11814 ;; Tracked objects:
 11815 ;;		On entry : 0/0
 11816 ;;		On exit  : 0/0
 11817 ;;		Unchanged: 0/0
 11818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11819 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11820 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11821 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11822 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11823 ;;Total ram usage:        1 bytes
 11824 ;; Hardware stack levels used:    1
 11825 ;; This function calls:
 11826 ;;		Nothing
 11827 ;; This function is called by:
 11828 ;;		i1_setCallBack
 11829 ;;		_do_I2C_DO_ADDRESS_NACK
 11830 ;;		_do_I2C_TX
 11831 ;;		_do_I2C_RX
 11832 ;;		_do_I2C_TX_EMPTY
 11833 ;;		i1_do_I2C_DO_ADDRESS_NACK
 11834 ;;		i1_do_I2C_TX
 11835 ;;		i1_do_I2C_RX
 11836 ;;		i1_do_I2C_TX_EMPTY
 11837 ;; This function uses a non-reentrant model
 11838 ;;
 11839                           
 11840                           
 11841                           ;psect for function i1_returnStop
 11842  0D60                     i1_returnStop:	
 11843  0D60                     i1l3054:	
 11844                           ;incstack = 0
 11845                           ; Regs used in i1_returnStop: [wreg]
 11846                           
 11847                           
 11848                           ;i2c_master.c: 445: return i2c_stop;
 11849  0D60  3001               	movlw	1
 11850  0D61  0008               	return
 11851  0D62                     __end_ofi1_returnStop:	
 11852                           
 11853                           	psect	text100
 11854  0FE9                     __ptext100:	
 11855 ;; *************** function i1_rdBlkRegCompleteHandler *****************
 11856 ;; Defined at:
 11857 ;;		line 134 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 11858 ;; Parameters:    Size  Location     Type
 11859 ;;  p               1    9[COMMON] PTR void 
 11860 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 11861 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 11862 ;; Auto vars:     Size  Location     Type
 11863 ;;		None
 11864 ;; Return value:  Size  Location     Type
 11865 ;;                  1    wreg      enum E97
 11866 ;; Registers used:
 11867 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11868 ;; Tracked objects:
 11869 ;;		On entry : 0/0
 11870 ;;		On exit  : 0/0
 11871 ;;		Unchanged: 0/0
 11872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11873 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11874 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11875 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11876 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11877 ;;Total ram usage:        1 bytes
 11878 ;; Hardware stack levels used:    1
 11879 ;; Hardware stack levels required when called:    2
 11880 ;; This function calls:
 11881 ;;		i1_i2c_setBuffer
 11882 ;;		i1_i2c_setDataCompleteCallback
 11883 ;; This function is called by:
 11884 ;; This function uses a non-reentrant model
 11885 ;;
 11886                           
 11887                           
 11888                           ;psect for function i1_rdBlkRegCompleteHandler
 11889  0FE9                     i1_rdBlkRegCompleteHandler:	
 11890  0FE9                     i1l3012:	
 11891                           ;incstack = 0
 11892 ;; hardware stack exceeded
 11893                           ; Regs used in i1_rdBlkRegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 11894                           
 11895                           
 11896                           ;i2c_simple_master.c: 136: i2c_setBuffer(((buf_t *)p)->data,((buf_t*)p)->len);
 11897  0FE9  0879               	movf	i1rdBlkRegCompleteHandler@p,w
 11898  0FEA  0086               	movwf	6
 11899  0FEB  0187               	clrf	7
 11900  0FEC  3F40               	moviw [0]fsr1
 11901  0FED  00F0               	movwf	i1i2c_setBuffer@bufferSize
 11902  0FEE  3F41               	moviw [1]fsr1
 11903  0FEF  00F1               	movwf	i1i2c_setBuffer@bufferSize+1
 11904  0FF0  0879               	movf	i1rdBlkRegCompleteHandler@p,w
 11905  0FF1  3E02               	addlw	2
 11906  0FF2  0086               	movwf	6
 11907  0FF3  0187               	clrf	7
 11908  0FF4  0801               	movf	1,w
 11909  0FF5  3187  27F2  318F   	fcall	i1_i2c_setBuffer
 11910                           
 11911                           ;i2c_simple_master.c: 137: i2c_setDataCompleteCallback((0),(0));
 11912  0FF8  3000               	movlw	0
 11913  0FF9  00F5               	movwf	i1i2c_setDataCompleteCallback@cb
 11914  0FFA  00F6               	movwf	i1i2c_setDataCompleteCallback@cb+1
 11915  0FFB  01F7               	clrf	i1i2c_setDataCompleteCallback@p
 11916  0FFC  318E  26D2         	fcall	i1_i2c_setDataCompleteCallback
 11917                           
 11918                           ;i2c_simple_master.c: 138: return i2c_restart_read;
 11919  0FFE  3002               	movlw	2
 11920  0FFF  0008               	return
 11921  1000                     __end_ofi1_rdBlkRegCompleteHandler:	
 11922                           
 11923                           	psect	text101
 11924  0F5A                     __ptext101:	
 11925 ;; *************** function i1_rd2RegCompleteHandler *****************
 11926 ;; Defined at:
 11927 ;;		line 87 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 11928 ;; Parameters:    Size  Location     Type
 11929 ;;  p               1    9[COMMON] PTR void 
 11930 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 11931 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 11932 ;; Auto vars:     Size  Location     Type
 11933 ;;		None
 11934 ;; Return value:  Size  Location     Type
 11935 ;;                  1    wreg      enum E97
 11936 ;; Registers used:
 11937 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11938 ;; Tracked objects:
 11939 ;;		On entry : 0/0
 11940 ;;		On exit  : 0/0
 11941 ;;		Unchanged: 0/0
 11942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11943 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11944 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11945 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11946 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11947 ;;Total ram usage:        1 bytes
 11948 ;; Hardware stack levels used:    1
 11949 ;; Hardware stack levels required when called:    2
 11950 ;; This function calls:
 11951 ;;		i1_i2c_setBuffer
 11952 ;;		i1_i2c_setDataCompleteCallback
 11953 ;; This function is called by:
 11954 ;; This function uses a non-reentrant model
 11955 ;;
 11956                           
 11957                           
 11958                           ;psect for function i1_rd2RegCompleteHandler
 11959  0F5A                     i1_rd2RegCompleteHandler:	
 11960  0F5A                     i1l2996:	
 11961                           ;incstack = 0
 11962 ;; hardware stack exceeded
 11963                           ; Regs used in i1_rd2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 11964                           
 11965                           
 11966                           ;i2c_simple_master.c: 89: i2c_setBuffer(p,2);
 11967  0F5A  3002               	movlw	2
 11968  0F5B  00F0               	movwf	i1i2c_setBuffer@bufferSize
 11969  0F5C  3000               	movlw	0
 11970  0F5D  00F1               	movwf	i1i2c_setBuffer@bufferSize+1
 11971  0F5E  0879               	movf	i1rd2RegCompleteHandler@p,w
 11972  0F5F  3187  27F2  318F   	fcall	i1_i2c_setBuffer
 11973                           
 11974                           ;i2c_simple_master.c: 90: i2c_setDataCompleteCallback((0),(0));
 11975  0F62  3000               	movlw	0
 11976  0F63  00F5               	movwf	i1i2c_setDataCompleteCallback@cb
 11977  0F64  00F6               	movwf	i1i2c_setDataCompleteCallback@cb+1
 11978  0F65  01F7               	clrf	i1i2c_setDataCompleteCallback@p
 11979  0F66  318E  26D2         	fcall	i1_i2c_setDataCompleteCallback
 11980                           
 11981                           ;i2c_simple_master.c: 91: return i2c_restart_read;
 11982  0F68  3002               	movlw	2
 11983  0F69  0008               	return
 11984  0F6A                     __end_ofi1_rd2RegCompleteHandler:	
 11985                           
 11986                           	psect	text102
 11987  0F4A                     __ptext102:	
 11988 ;; *************** function i1_rd1RegCompleteHandler *****************
 11989 ;; Defined at:
 11990 ;;		line 58 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 11991 ;; Parameters:    Size  Location     Type
 11992 ;;  p               1    9[COMMON] PTR void 
 11993 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 11994 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 11995 ;; Auto vars:     Size  Location     Type
 11996 ;;		None
 11997 ;; Return value:  Size  Location     Type
 11998 ;;                  1    wreg      enum E97
 11999 ;; Registers used:
 12000 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12001 ;; Tracked objects:
 12002 ;;		On entry : 0/0
 12003 ;;		On exit  : 0/0
 12004 ;;		Unchanged: 0/0
 12005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12006 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12007 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12008 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12009 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12010 ;;Total ram usage:        1 bytes
 12011 ;; Hardware stack levels used:    1
 12012 ;; Hardware stack levels required when called:    2
 12013 ;; This function calls:
 12014 ;;		i1_i2c_setBuffer
 12015 ;;		i1_i2c_setDataCompleteCallback
 12016 ;; This function is called by:
 12017 ;; This function uses a non-reentrant model
 12018 ;;
 12019                           
 12020                           
 12021                           ;psect for function i1_rd1RegCompleteHandler
 12022  0F4A                     i1_rd1RegCompleteHandler:	
 12023  0F4A                     i1l2988:	
 12024                           ;incstack = 0
 12025 ;; hardware stack exceeded
 12026                           ; Regs used in i1_rd1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 12027                           
 12028                           
 12029                           ;i2c_simple_master.c: 60: i2c_setBuffer(p,1);
 12030  0F4A  3001               	movlw	1
 12031  0F4B  00F0               	movwf	i1i2c_setBuffer@bufferSize
 12032  0F4C  3000               	movlw	0
 12033  0F4D  00F1               	movwf	i1i2c_setBuffer@bufferSize+1
 12034  0F4E  0879               	movf	i1rd1RegCompleteHandler@p,w
 12035  0F4F  3187  27F2  318F   	fcall	i1_i2c_setBuffer
 12036                           
 12037                           ;i2c_simple_master.c: 61: i2c_setDataCompleteCallback((0),(0));
 12038  0F52  3000               	movlw	0
 12039  0F53  00F5               	movwf	i1i2c_setDataCompleteCallback@cb
 12040  0F54  00F6               	movwf	i1i2c_setDataCompleteCallback@cb+1
 12041  0F55  01F7               	clrf	i1i2c_setDataCompleteCallback@p
 12042  0F56  318E  26D2         	fcall	i1_i2c_setDataCompleteCallback
 12043                           
 12044                           ;i2c_simple_master.c: 62: return i2c_restart_read;
 12045  0F58  3002               	movlw	2
 12046  0F59  0008               	return
 12047  0F5A                     __end_ofi1_rd1RegCompleteHandler:	
 12048                           
 12049                           	psect	text103
 12050  0F3A                     __ptext103:	
 12051 ;; *************** function i1_wr1RegCompleteHandler *****************
 12052 ;; Defined at:
 12053 ;;		line 31 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 12054 ;; Parameters:    Size  Location     Type
 12055 ;;  p               1    9[COMMON] PTR void 
 12056 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 12057 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 12058 ;; Auto vars:     Size  Location     Type
 12059 ;;		None
 12060 ;; Return value:  Size  Location     Type
 12061 ;;                  1    wreg      enum E97
 12062 ;; Registers used:
 12063 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12064 ;; Tracked objects:
 12065 ;;		On entry : 0/0
 12066 ;;		On exit  : 0/0
 12067 ;;		Unchanged: 0/0
 12068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12069 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12070 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12071 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12072 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12073 ;;Total ram usage:        1 bytes
 12074 ;; Hardware stack levels used:    1
 12075 ;; Hardware stack levels required when called:    2
 12076 ;; This function calls:
 12077 ;;		i1_i2c_setBuffer
 12078 ;;		i1_i2c_setDataCompleteCallback
 12079 ;; This function is called by:
 12080 ;; This function uses a non-reentrant model
 12081 ;;
 12082                           
 12083                           
 12084                           ;psect for function i1_wr1RegCompleteHandler
 12085  0F3A                     i1_wr1RegCompleteHandler:	
 12086  0F3A                     i1l2980:	
 12087                           ;incstack = 0
 12088 ;; hardware stack exceeded
 12089                           ; Regs used in i1_wr1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 12090                           
 12091                           
 12092                           ;i2c_simple_master.c: 33: i2c_setBuffer(p,1);
 12093  0F3A  3001               	movlw	1
 12094  0F3B  00F0               	movwf	i1i2c_setBuffer@bufferSize
 12095  0F3C  3000               	movlw	0
 12096  0F3D  00F1               	movwf	i1i2c_setBuffer@bufferSize+1
 12097  0F3E  0879               	movf	i1wr1RegCompleteHandler@p,w
 12098  0F3F  3187  27F2  318F   	fcall	i1_i2c_setBuffer
 12099                           
 12100                           ;i2c_simple_master.c: 34: i2c_setDataCompleteCallback((0),(0));
 12101  0F42  3000               	movlw	0
 12102  0F43  00F5               	movwf	i1i2c_setDataCompleteCallback@cb
 12103  0F44  00F6               	movwf	i1i2c_setDataCompleteCallback@cb+1
 12104  0F45  01F7               	clrf	i1i2c_setDataCompleteCallback@p
 12105  0F46  318E  26D2         	fcall	i1_i2c_setDataCompleteCallback
 12106                           
 12107                           ;i2c_simple_master.c: 35: return i2c_continue;
 12108  0F48  3004               	movlw	4
 12109  0F49  0008               	return
 12110  0F4A                     __end_ofi1_wr1RegCompleteHandler:	
 12111                           
 12112                           	psect	text104
 12113  0F2A                     __ptext104:	
 12114 ;; *************** function i1_wr2RegCompleteHandler *****************
 12115 ;; Defined at:
 12116 ;;		line 110 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 12117 ;; Parameters:    Size  Location     Type
 12118 ;;  p               1    9[COMMON] PTR void 
 12119 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 12120 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 12121 ;; Auto vars:     Size  Location     Type
 12122 ;;		None
 12123 ;; Return value:  Size  Location     Type
 12124 ;;                  1    wreg      enum E97
 12125 ;; Registers used:
 12126 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12127 ;; Tracked objects:
 12128 ;;		On entry : 0/0
 12129 ;;		On exit  : 0/0
 12130 ;;		Unchanged: 0/0
 12131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12132 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12133 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12134 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12135 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12136 ;;Total ram usage:        1 bytes
 12137 ;; Hardware stack levels used:    1
 12138 ;; Hardware stack levels required when called:    2
 12139 ;; This function calls:
 12140 ;;		i1_i2c_setBuffer
 12141 ;;		i1_i2c_setDataCompleteCallback
 12142 ;; This function is called by:
 12143 ;; This function uses a non-reentrant model
 12144 ;;
 12145                           
 12146                           
 12147                           ;psect for function i1_wr2RegCompleteHandler
 12148  0F2A                     i1_wr2RegCompleteHandler:	
 12149  0F2A                     i1l3004:	
 12150                           ;incstack = 0
 12151 ;; hardware stack exceeded
 12152                           ; Regs used in i1_wr2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 12153                           
 12154                           
 12155                           ;i2c_simple_master.c: 112: i2c_setBuffer(p,2);
 12156  0F2A  3002               	movlw	2
 12157  0F2B  00F0               	movwf	i1i2c_setBuffer@bufferSize
 12158  0F2C  3000               	movlw	0
 12159  0F2D  00F1               	movwf	i1i2c_setBuffer@bufferSize+1
 12160  0F2E  0879               	movf	i1wr2RegCompleteHandler@p,w
 12161  0F2F  3187  27F2  318F   	fcall	i1_i2c_setBuffer
 12162                           
 12163                           ;i2c_simple_master.c: 113: i2c_setDataCompleteCallback((0),(0));
 12164  0F32  3000               	movlw	0
 12165  0F33  00F5               	movwf	i1i2c_setDataCompleteCallback@cb
 12166  0F34  00F6               	movwf	i1i2c_setDataCompleteCallback@cb+1
 12167  0F35  01F7               	clrf	i1i2c_setDataCompleteCallback@p
 12168  0F36  318E  26D2         	fcall	i1_i2c_setDataCompleteCallback
 12169                           
 12170                           ;i2c_simple_master.c: 114: return i2c_continue;
 12171  0F38  3004               	movlw	4
 12172  0F39  0008               	return
 12173  0F3A                     __end_ofi1_wr2RegCompleteHandler:	
 12174                           
 12175                           	psect	text105
 12176  0ED2                     __ptext105:	
 12177 ;; *************** function i1_i2c_setDataCompleteCallback *****************
 12178 ;; Defined at:
 12179 ;;		line 89 in file "mcc_generated_files/drivers/i2c_master.c"
 12180 ;; Parameters:    Size  Location     Type
 12181 ;;  cb              2    5[COMMON] PTR FTN(PTR void ,)enum 
 12182 ;;		 -> rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), rd2RegCompleteHandler(1), rd1RegCompleteHandler(1), 
 12183 ;;		 -> wr1RegCompleteHandler(1), Absolute function(1), 
 12184 ;;  p               1    7[COMMON] PTR void 
 12185 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 12186 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 12187 ;; Auto vars:     Size  Location     Type
 12188 ;;		None
 12189 ;; Return value:  Size  Location     Type
 12190 ;;                  1    wreg      void 
 12191 ;; Registers used:
 12192 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12193 ;; Tracked objects:
 12194 ;;		On entry : 0/0
 12195 ;;		On exit  : 0/0
 12196 ;;		Unchanged: 0/0
 12197 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12198 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12199 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12200 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12201 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12202 ;;Total ram usage:        4 bytes
 12203 ;; Hardware stack levels used:    1
 12204 ;; Hardware stack levels required when called:    1
 12205 ;; This function calls:
 12206 ;;		i1_setCallBack
 12207 ;; This function is called by:
 12208 ;;		i1_wr1RegCompleteHandler
 12209 ;;		i1_rd1RegCompleteHandler
 12210 ;;		i1_rd2RegCompleteHandler
 12211 ;;		i1_wr2RegCompleteHandler
 12212 ;;		i1_rdBlkRegCompleteHandler
 12213 ;; This function uses a non-reentrant model
 12214 ;;
 12215                           
 12216                           
 12217                           ;psect for function i1_i2c_setDataCompleteCallback
 12218  0ED2                     i1_i2c_setDataCompleteCallback:	
 12219                           
 12220                           ;i2c_master.c: 91: setCallBack(i2c_dataComplete,cb,p);
 12221                           
 12222                           ;incstack = 0
 12223 ;; hardware stack exceeded
 12224                           ; Regs used in i1_i2c_setDataCompleteCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclat
      +                          h+cstack]
 12225  0ED2  0876               	movf	i1i2c_setDataCompleteCallback@cb+1,w
 12226  0ED3  00F1               	movwf	i1setCallBack@cb+1
 12227  0ED4  0875               	movf	i1i2c_setDataCompleteCallback@cb,w
 12228  0ED5  00F0               	movwf	i1setCallBack@cb
 12229  0ED6  0877               	movf	i1i2c_setDataCompleteCallback@p,w
 12230  0ED7  00F8               	movwf	??i1_i2c_setDataCompleteCallback
 12231  0ED8  0878               	movf	??i1_i2c_setDataCompleteCallback,w
 12232  0ED9  00F2               	movwf	i1setCallBack@p
 12233  0EDA  3000               	movlw	0
 12234  0EDB  3186  26F5         	fcall	i1_setCallBack
 12235  0EDD  0008               	return
 12236  0EDE                     __end_ofi1_i2c_setDataCompleteCallback:	
 12237                           
 12238                           	psect	text106
 12239  06F5                     __ptext106:	
 12240 ;; *************** function i1_setCallBack *****************
 12241 ;; Defined at:
 12242 ;;		line 453 in file "mcc_generated_files/drivers/i2c_master.c"
 12243 ;; Parameters:    Size  Location     Type
 12244 ;;  idx             1    wreg     enum E12355
 12245 ;;  cb              2    0[COMMON] PTR FTN(PTR void ,)enum 
 12246 ;;		 -> rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), rd2RegCompleteHandler(1), rd1RegCompleteHandler(1), 
 12247 ;;		 -> i2c_restartWrite(1), wr1RegCompleteHandler(1), Absolute function(1), 
 12248 ;;  p               1    2[COMMON] PTR void 
 12249 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 12250 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 12251 ;; Auto vars:     Size  Location     Type
 12252 ;;  idx             1    4[COMMON] enum E12355
 12253 ;; Return value:  Size  Location     Type
 12254 ;;                  1    wreg      void 
 12255 ;; Registers used:
 12256 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12257 ;; Tracked objects:
 12258 ;;		On entry : 0/0
 12259 ;;		On exit  : 0/0
 12260 ;;		Unchanged: 0/0
 12261 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12262 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12263 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12264 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12265 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12266 ;;Total ram usage:        5 bytes
 12267 ;; Hardware stack levels used:    1
 12268 ;; This function calls:
 12269 ;;		Nothing
 12270 ;; This function is called by:
 12271 ;;		i1_i2c_setDataCompleteCallback
 12272 ;; This function uses a non-reentrant model
 12273 ;;
 12274                           
 12275                           
 12276                           ;psect for function i1_setCallBack
 12277  06F5                     i1_setCallBack:	
 12278                           
 12279                           ;incstack = 0
 12280 ;; hardware stack exceeded
 12281                           ; Regs used in i1_setCallBack: [wreg+fsr1l+fsr1h+status,2+status,0]
 12282                           ;i1setCallBack@idx stored from wreg
 12283  06F5  00F4               	movwf	i1setCallBack@idx
 12284                           
 12285                           ;i2c_master.c: 455: if(cb)
 12286  06F6  0870               	movf	i1setCallBack@cb,w
 12287  06F7  0471               	iorwf	i1setCallBack@cb+1,w
 12288  06F8  1903               	btfsc	3,2
 12289  06F9  2F0B               	goto	i1l2768
 12290                           
 12291                           ;i2c_master.c: 456: {
 12292                           ;i2c_master.c: 457: i2c_status.callbackTable[idx] = cb;
 12293  06FA  3574               	lslf	i1setCallBack@idx,w
 12294  06FB  3EAB               	addlw	(low ((_i2c_status| 0+11)))& (0+255)
 12295  06FC  0086               	movwf	6
 12296  06FD  0187               	clrf	7
 12297  06FE  0870               	movf	i1setCallBack@cb,w
 12298  06FF  3FC0               	movwi [0]fsr1
 12299  0700  0871               	movf	i1setCallBack@cb+1,w
 12300  0701  3FC1               	movwi [1]fsr1
 12301                           
 12302                           ;i2c_master.c: 458: i2c_status.callbackPayload[idx] = p;
 12303  0702  0872               	movf	i1setCallBack@p,w
 12304  0703  00F3               	movwf	??i1_setCallBack
 12305  0704  0874               	movf	i1setCallBack@idx,w
 12306  0705  3EB7               	addlw	(low ((_i2c_status| 0+23)))& (0+255)
 12307  0706  0086               	movwf	6
 12308  0707  0187               	clrf	7
 12309  0708  0873               	movf	??i1_setCallBack,w
 12310  0709  0081               	movwf	1
 12311                           
 12312                           ;i2c_master.c: 459: }
 12313  070A  0008               	return
 12314  070B                     i1l2768:	
 12315                           
 12316                           ;i2c_master.c: 460: else
 12317                           ;i2c_master.c: 461: {
 12318                           ;i2c_master.c: 462: i2c_status.callbackTable[idx] = returnStop;
 12319  070B  3574               	lslf	i1setCallBack@idx,w
 12320  070C  3EAB               	addlw	(low ((_i2c_status| 0+11)))& (0+255)
 12321  070D  0086               	movwf	6
 12322  070E  0187               	clrf	7
 12323  070F  30F1               	movlw	low _returnStop
 12324  0710  3FC0               	movwi [0]fsr1
 12325  0711  300D               	movlw	high _returnStop
 12326  0712  3FC1               	movwi [1]fsr1
 12327                           
 12328                           ;i2c_master.c: 463: i2c_status.callbackPayload[idx] = (0);
 12329  0713  0874               	movf	i1setCallBack@idx,w
 12330  0714  3EB7               	addlw	(low ((_i2c_status| 0+23)))& (0+255)
 12331  0715  0086               	movwf	6
 12332  0716  0187               	clrf	7
 12333  0717  0181               	clrf	1
 12334  0718  0008               	return
 12335  0719                     __end_ofi1_setCallBack:	
 12336                           
 12337                           	psect	text107
 12338  07F2                     __ptext107:	
 12339 ;; *************** function i1_i2c_setBuffer *****************
 12340 ;; Defined at:
 12341 ;;		line 184 in file "mcc_generated_files/drivers/i2c_master.c"
 12342 ;; Parameters:    Size  Location     Type
 12343 ;;  buffer          1    wreg     PTR void 
 12344 ;;		 -> i2c_readDataBlock@reg(1), i2c_readDataBlock@d(3), i2c_write2ByteRegister@reg(1), i2c_write2ByteRegister@data(2),
      + 
 12345 ;;		 -> i2c_read2ByteRegister@reg(1), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@reg(1), i2c_read1ByteRegist
      +er@d2(1), 
 12346 ;;		 -> i2c_write1ByteRegister@reg(1), i2c_write1ByteRegister@data(1), NULL(0), writebuffer(17), 
 12347 ;;  bufferSize      2    0[COMMON] unsigned int 
 12348 ;; Auto vars:     Size  Location     Type
 12349 ;;  buffer          1    3[COMMON] PTR void 
 12350 ;;		 -> i2c_readDataBlock@reg(1), i2c_readDataBlock@d(3), i2c_write2ByteRegister@reg(1), i2c_write2ByteRegister@data(2),
      + 
 12351 ;;		 -> i2c_read2ByteRegister@reg(1), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@reg(1), i2c_read1ByteRegist
      +er@d2(1), 
 12352 ;;		 -> i2c_write1ByteRegister@reg(1), i2c_write1ByteRegister@data(1), NULL(0), writebuffer(17), 
 12353 ;; Return value:  Size  Location     Type
 12354 ;;                  1    wreg      void 
 12355 ;; Registers used:
 12356 ;;		wreg
 12357 ;; Tracked objects:
 12358 ;;		On entry : 0/0
 12359 ;;		On exit  : 0/0
 12360 ;;		Unchanged: 0/0
 12361 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12362 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12363 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12364 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12365 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12366 ;;Total ram usage:        4 bytes
 12367 ;; Hardware stack levels used:    1
 12368 ;; This function calls:
 12369 ;;		Nothing
 12370 ;; This function is called by:
 12371 ;;		i1_wr1RegCompleteHandler
 12372 ;;		i1_rd1RegCompleteHandler
 12373 ;;		i1_rd2RegCompleteHandler
 12374 ;;		i1_wr2RegCompleteHandler
 12375 ;;		i1_rdBlkRegCompleteHandler
 12376 ;; This function uses a non-reentrant model
 12377 ;;
 12378                           
 12379                           
 12380                           ;psect for function i1_i2c_setBuffer
 12381  07F2                     i1_i2c_setBuffer:	
 12382                           
 12383                           ;incstack = 0
 12384                           ; Regs used in i1_i2c_setBuffer: [wreg]
 12385                           ;i1i2c_setBuffer@buffer stored from wreg
 12386  07F2  00F3               	movwf	i1i2c_setBuffer@buffer
 12387                           
 12388                           ;i2c_master.c: 186: if(i2c_status.bufferFree)
 12389  07F3  0021               	movlb	1	; select bank1
 12390  07F4  1D20               	btfss	_i2c_status^(0+128),2
 12391  07F5  0008               	return
 12392                           
 12393                           ;i2c_master.c: 187: {
 12394                           ;i2c_master.c: 188: i2c_status.data_ptr = buffer;
 12395  07F6  0873               	movf	i1i2c_setBuffer@buffer,w
 12396  07F7  00F2               	movwf	??i1_i2c_setBuffer
 12397  07F8  0872               	movf	??i1_i2c_setBuffer,w
 12398  07F9  00A2               	movwf	(low ((_i2c_status| 0+2)))^(0+128)
 12399                           
 12400                           ;i2c_master.c: 189: i2c_status.data_length = bufferSize;
 12401  07FA  0871               	movf	i1i2c_setBuffer@bufferSize+1,w
 12402  07FB  00A4               	movwf	((_i2c_status+1)^(0+128)+3)
 12403  07FC  0870               	movf	i1i2c_setBuffer@bufferSize,w
 12404  07FD  00A3               	movwf	(_i2c_status^(0+128)+3)
 12405                           
 12406                           ;i2c_master.c: 190: i2c_status.bufferFree = 0;
 12407  07FE  1120               	bcf	_i2c_status^(0+128),2
 12408  07FF  0008               	return
 12409  0800                     __end_ofi1_i2c_setBuffer:	
 12410                           
 12411                           	psect	text108
 12412  0D6D                     __ptext108:	
 12413 ;; *************** function i1_i2c_driver_stop *****************
 12414 ;; Defined at:
 12415 ;;		line 156 in file "mcc_generated_files/i2c_driver.c"
 12416 ;; Parameters:    Size  Location     Type
 12417 ;;		None
 12418 ;; Auto vars:     Size  Location     Type
 12419 ;;		None
 12420 ;; Return value:  Size  Location     Type
 12421 ;;                  1    wreg      void 
 12422 ;; Registers used:
 12423 ;;		None
 12424 ;; Tracked objects:
 12425 ;;		On entry : 0/0
 12426 ;;		On exit  : 0/0
 12427 ;;		Unchanged: 0/0
 12428 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12429 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12430 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12431 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12432 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12433 ;;Total ram usage:        0 bytes
 12434 ;; Hardware stack levels used:    1
 12435 ;; This function calls:
 12436 ;;		Nothing
 12437 ;; This function is called by:
 12438 ;;		i1_do_I2C_SEND_STOP
 12439 ;; This function uses a non-reentrant model
 12440 ;;
 12441                           
 12442                           
 12443                           ;psect for function i1_i2c_driver_stop
 12444  0D6D                     i1_i2c_driver_stop:	
 12445                           
 12446                           ;i2c_driver.c: 158: SSP1CON2bits.PEN = 1;
 12447                           
 12448                           ;incstack = 0
 12449                           ; Regs used in i1_i2c_driver_stop: []
 12450  0D6D  0024               	movlb	4	; select bank4
 12451  0D6E  1516               	bsf	22,2	;volatile
 12452  0D6F  0008               	return
 12453  0D70                     __end_ofi1_i2c_driver_stop:	
 12454                           
 12455                           	psect	text109
 12456  0D6A                     __ptext109:	
 12457 ;; *************** function i1_i2c_driver_restart *****************
 12458 ;; Defined at:
 12459 ;;		line 151 in file "mcc_generated_files/i2c_driver.c"
 12460 ;; Parameters:    Size  Location     Type
 12461 ;;		None
 12462 ;; Auto vars:     Size  Location     Type
 12463 ;;		None
 12464 ;; Return value:  Size  Location     Type
 12465 ;;                  1    wreg      void 
 12466 ;; Registers used:
 12467 ;;		None
 12468 ;; Tracked objects:
 12469 ;;		On entry : 0/0
 12470 ;;		On exit  : 0/0
 12471 ;;		Unchanged: 0/0
 12472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12473 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12474 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12475 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12476 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12477 ;;Total ram usage:        0 bytes
 12478 ;; Hardware stack levels used:    1
 12479 ;; This function calls:
 12480 ;;		Nothing
 12481 ;; This function is called by:
 12482 ;;		i1_do_I2C_SEND_RESTART_READ
 12483 ;;		i1_do_I2C_SEND_RESTART_WRITE
 12484 ;;		i1_do_I2C_SEND_RESTART
 12485 ;; This function uses a non-reentrant model
 12486 ;;
 12487                           
 12488                           
 12489                           ;psect for function i1_i2c_driver_restart
 12490  0D6A                     i1_i2c_driver_restart:	
 12491                           
 12492                           ;i2c_driver.c: 153: SSP1CON2bits.RSEN = 1;
 12493                           
 12494                           ;incstack = 0
 12495                           ; Regs used in i1_i2c_driver_restart: []
 12496  0D6A  0024               	movlb	4	; select bank4
 12497  0D6B  1496               	bsf	22,1	;volatile
 12498  0D6C  0008               	return
 12499  0D6D                     __end_ofi1_i2c_driver_restart:	
 12500                           
 12501                           	psect	text110
 12502  0D94                     __ptext110:	
 12503 ;; *************** function i1_i2c_driver_sendACK *****************
 12504 ;; Defined at:
 12505 ;;		line 196 in file "mcc_generated_files/i2c_driver.c"
 12506 ;; Parameters:    Size  Location     Type
 12507 ;;		None
 12508 ;; Auto vars:     Size  Location     Type
 12509 ;;		None
 12510 ;; Return value:  Size  Location     Type
 12511 ;;                  1    wreg      void 
 12512 ;; Registers used:
 12513 ;;		None
 12514 ;; Tracked objects:
 12515 ;;		On entry : 0/0
 12516 ;;		On exit  : 0/0
 12517 ;;		Unchanged: 0/0
 12518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12520 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12521 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12522 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12523 ;;Total ram usage:        0 bytes
 12524 ;; Hardware stack levels used:    1
 12525 ;; This function calls:
 12526 ;;		Nothing
 12527 ;; This function is called by:
 12528 ;;		i1_do_I2C_DO_ACK
 12529 ;;		i1_do_I2C_RX
 12530 ;; This function uses a non-reentrant model
 12531 ;;
 12532                           
 12533                           
 12534                           ;psect for function i1_i2c_driver_sendACK
 12535  0D94                     i1_i2c_driver_sendACK:	
 12536                           
 12537                           ;i2c_driver.c: 198: SSP1CON2bits.ACKDT = 0;
 12538                           
 12539                           ;incstack = 0
 12540                           ; Regs used in i1_i2c_driver_sendACK: []
 12541  0D94  0024               	movlb	4	; select bank4
 12542  0D95  1296               	bcf	22,5	;volatile
 12543                           
 12544                           ;i2c_driver.c: 199: SSP1CON2bits.ACKEN = 1;
 12545  0D96  1616               	bsf	22,4	;volatile
 12546  0D97  0008               	return
 12547  0D98                     __end_ofi1_i2c_driver_sendACK:	
 12548                           
 12549                           	psect	text111
 12550  0D67                     __ptext111:	
 12551 ;; *************** function _i2c_busCollisionISR *****************
 12552 ;; Defined at:
 12553 ;;		line 435 in file "mcc_generated_files/drivers/i2c_master.c"
 12554 ;; Parameters:    Size  Location     Type
 12555 ;;		None
 12556 ;; Auto vars:     Size  Location     Type
 12557 ;;		None
 12558 ;; Return value:  Size  Location     Type
 12559 ;;                  1    wreg      void 
 12560 ;; Registers used:
 12561 ;;		status,2, status,0, pclath, cstack
 12562 ;; Tracked objects:
 12563 ;;		On entry : 0/0
 12564 ;;		On exit  : 0/0
 12565 ;;		Unchanged: 0/0
 12566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12567 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12568 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12569 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12570 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12571 ;;Total ram usage:        0 bytes
 12572 ;; Hardware stack levels used:    1
 12573 ;; Hardware stack levels required when called:    1
 12574 ;; This function calls:
 12575 ;;		_i2c_driver_clearBusCollision
 12576 ;; This function is called by:
 12577 ;;		_i2c_open
 12578 ;;		_INTERRUPT_InterruptManager
 12579 ;; This function uses a non-reentrant model
 12580 ;;
 12581                           
 12582                           
 12583                           ;psect for function _i2c_busCollisionISR
 12584  0D67                     _i2c_busCollisionISR:	
 12585                           
 12586                           ;i2c_master.c: 437: i2c_driver_clearBusCollision();
 12587                           
 12588                           ;incstack = 0
 12589                           ; Regs used in _i2c_busCollisionISR: [status,2+status,0+pclath+cstack]
 12590  0D67  318D  2564         	fcall	_i2c_driver_clearBusCollision
 12591  0D69  0008               	return
 12592  0D6A                     __end_of_i2c_busCollisionISR:	
 12593                           
 12594                           	psect	text112
 12595  0D64                     __ptext112:	
 12596 ;; *************** function _i2c_driver_clearBusCollision *****************
 12597 ;; Defined at:
 12598 ;;		line 253 in file "mcc_generated_files/i2c_driver.c"
 12599 ;; Parameters:    Size  Location     Type
 12600 ;;		None
 12601 ;; Auto vars:     Size  Location     Type
 12602 ;;		None
 12603 ;; Return value:  Size  Location     Type
 12604 ;;                  1    wreg      void 
 12605 ;; Registers used:
 12606 ;;		None
 12607 ;; Tracked objects:
 12608 ;;		On entry : 0/0
 12609 ;;		On exit  : 0/0
 12610 ;;		Unchanged: 0/0
 12611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12612 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12613 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12614 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12615 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12616 ;;Total ram usage:        0 bytes
 12617 ;; Hardware stack levels used:    1
 12618 ;; This function calls:
 12619 ;;		Nothing
 12620 ;; This function is called by:
 12621 ;;		_i2c_busCollisionISR
 12622 ;; This function uses a non-reentrant model
 12623 ;;
 12624                           
 12625                           
 12626                           ;psect for function _i2c_driver_clearBusCollision
 12627  0D64                     _i2c_driver_clearBusCollision:	
 12628                           
 12629                           ;i2c_driver.c: 255: PIR2bits.BCL1IF = 0;
 12630                           
 12631                           ;incstack = 0
 12632                           ; Regs used in _i2c_driver_clearBusCollision: []
 12633  0D64  0020               	movlb	0	; select bank0
 12634  0D65  1191               	bcf	17,3	;volatile
 12635  0D66  0008               	return
 12636  0D67                     __end_of_i2c_driver_clearBusCollision:	
 12637                           
 12638                           	psect	text113
 12639  0DD3                     __ptext113:	
 12640 ;; *************** function _PIN_MANAGER_IOC *****************
 12641 ;; Defined at:
 12642 ;;		line 117 in file "mcc_generated_files/pin_manager.c"
 12643 ;; Parameters:    Size  Location     Type
 12644 ;;		None
 12645 ;; Auto vars:     Size  Location     Type
 12646 ;;		None
 12647 ;; Return value:  Size  Location     Type
 12648 ;;                  1    wreg      void 
 12649 ;; Registers used:
 12650 ;;		wreg, status,2, status,0, pclath, cstack
 12651 ;; Tracked objects:
 12652 ;;		On entry : 0/0
 12653 ;;		On exit  : 0/0
 12654 ;;		Unchanged: 0/0
 12655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12656 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12657 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12658 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12659 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12660 ;;Total ram usage:        0 bytes
 12661 ;; Hardware stack levels used:    1
 12662 ;; Hardware stack levels required when called:    2
 12663 ;; This function calls:
 12664 ;;		_IOCCF4_ISR
 12665 ;; This function is called by:
 12666 ;;		_INTERRUPT_InterruptManager
 12667 ;; This function uses a non-reentrant model
 12668 ;;
 12669                           
 12670                           
 12671                           ;psect for function _PIN_MANAGER_IOC
 12672  0DD3                     _PIN_MANAGER_IOC:	
 12673                           
 12674                           ;pin_manager.c: 120: if(IOCCFbits.IOCCF4 == 1)
 12675                           
 12676                           ;incstack = 0
 12677                           ; Regs used in _PIN_MANAGER_IOC: [wreg+status,2+status,0+pclath+cstack]
 12678  0DD3  0027               	movlb	7	; select bank7
 12679  0DD4  1E19               	btfss	25,4	;volatile
 12680  0DD5  0008               	return
 12681                           
 12682                           ;pin_manager.c: 121: {
 12683                           ;pin_manager.c: 122: IOCCF4_ISR();
 12684  0DD6  318E  26F6         	fcall	_IOCCF4_ISR
 12685  0DD8  0008               	return
 12686  0DD9                     __end_of_PIN_MANAGER_IOC:	
 12687                           
 12688                           	psect	text114
 12689  0EF6                     __ptext114:	
 12690 ;; *************** function _IOCCF4_ISR *****************
 12691 ;; Defined at:
 12692 ;;		line 131 in file "mcc_generated_files/pin_manager.c"
 12693 ;; Parameters:    Size  Location     Type
 12694 ;;		None
 12695 ;; Auto vars:     Size  Location     Type
 12696 ;;		None
 12697 ;; Return value:  Size  Location     Type
 12698 ;;                  1    wreg      void 
 12699 ;; Registers used:
 12700 ;;		wreg, status,2, status,0, pclath, cstack
 12701 ;; Tracked objects:
 12702 ;;		On entry : 0/0
 12703 ;;		On exit  : 0/0
 12704 ;;		Unchanged: 0/0
 12705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12706 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12707 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12708 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12709 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12710 ;;Total ram usage:        0 bytes
 12711 ;; Hardware stack levels used:    1
 12712 ;; Hardware stack levels required when called:    1
 12713 ;; This function calls:
 12714 ;;		Absolute function
 12715 ;;		_IOCCF4_DefaultInterruptHandler
 12716 ;;		_buttonInterrupt
 12717 ;; This function is called by:
 12718 ;;		_PIN_MANAGER_IOC
 12719 ;; This function uses a non-reentrant model
 12720 ;;
 12721                           
 12722                           
 12723                           ;psect for function _IOCCF4_ISR
 12724  0EF6                     _IOCCF4_ISR:	
 12725                           
 12726                           ;pin_manager.c: 136: if(IOCCF4_InterruptHandler)
 12727                           
 12728                           ;incstack = 0
 12729                           ; Regs used in _IOCCF4_ISR: [wreg+status,2+status,0+pclath+cstack]
 12730  0EF6  0020               	movlb	0	; select bank0
 12731  0EF7  0865               	movf	_IOCCF4_InterruptHandler,w
 12732  0EF8  0466               	iorwf	_IOCCF4_InterruptHandler+1,w
 12733  0EF9  1903               	btfsc	3,2
 12734  0EFA  2F00               	goto	i1l5518
 12735                           
 12736                           ;pin_manager.c: 137: {
 12737                           ;pin_manager.c: 138: IOCCF4_InterruptHandler();
 12738  0EFB  0866               	movf	_IOCCF4_InterruptHandler+1,w
 12739  0EFC  008A               	movwf	10
 12740  0EFD  0865               	movf	_IOCCF4_InterruptHandler,w
 12741  0EFE  000A               	callw
 12742  0EFF  318E               	pagesel	$
 12743  0F00                     i1l5518:	
 12744                           
 12745                           ;pin_manager.c: 139: }
 12746                           ;pin_manager.c: 140: IOCCFbits.IOCCF4 = 0;
 12747  0F00  0027               	movlb	7	; select bank7
 12748  0F01  1219               	bcf	25,4	;volatile
 12749  0F02  0008               	return
 12750  0F03                     __end_of_IOCCF4_ISR:	
 12751                           
 12752                           	psect	text115
 12753  0D5D                     __ptext115:	
 12754 ;; *************** function _IOCCF4_DefaultInterruptHandler *****************
 12755 ;; Defined at:
 12756 ;;		line 153 in file "mcc_generated_files/pin_manager.c"
 12757 ;; Parameters:    Size  Location     Type
 12758 ;;		None
 12759 ;; Auto vars:     Size  Location     Type
 12760 ;;		None
 12761 ;; Return value:  Size  Location     Type
 12762 ;;                  1    wreg      void 
 12763 ;; Registers used:
 12764 ;;		None
 12765 ;; Tracked objects:
 12766 ;;		On entry : 0/0
 12767 ;;		On exit  : 0/0
 12768 ;;		Unchanged: 0/0
 12769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12770 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12771 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12772 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12773 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12774 ;;Total ram usage:        0 bytes
 12775 ;; Hardware stack levels used:    1
 12776 ;; This function calls:
 12777 ;;		Nothing
 12778 ;; This function is called by:
 12779 ;;		_PIN_MANAGER_Initialize
 12780 ;;		_IOCCF4_ISR
 12781 ;; This function uses a non-reentrant model
 12782 ;;
 12783                           
 12784                           
 12785                           ;psect for function _IOCCF4_DefaultInterruptHandler
 12786  0D5D                     _IOCCF4_DefaultInterruptHandler:	
 12787                           
 12788                           ;incstack = 0
 12789                           ; Regs used in _IOCCF4_DefaultInterruptHandler: []
 12790  0D5D  0008               	return
 12791  0D5E                     __end_of_IOCCF4_DefaultInterruptHandler:	
 12792                           
 12793                           	psect	text116
 12794  0EC6                     __ptext116:	
 12795 ;; *************** function _buttonInterrupt *****************
 12796 ;; Defined at:
 12797 ;;		line 158 in file "main.c"
 12798 ;; Parameters:    Size  Location     Type
 12799 ;;		None
 12800 ;; Auto vars:     Size  Location     Type
 12801 ;;		None
 12802 ;; Return value:  Size  Location     Type
 12803 ;;                  1    wreg      void 
 12804 ;; Registers used:
 12805 ;;		wreg, status,2, status,0
 12806 ;; Tracked objects:
 12807 ;;		On entry : 0/0
 12808 ;;		On exit  : 0/0
 12809 ;;		Unchanged: 0/0
 12810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12811 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12812 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12813 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12814 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12815 ;;Total ram usage:        1 bytes
 12816 ;; Hardware stack levels used:    1
 12817 ;; This function calls:
 12818 ;;		Nothing
 12819 ;; This function is called by:
 12820 ;;		_main
 12821 ;;		_IOCCF4_ISR
 12822 ;; This function uses a non-reentrant model
 12823 ;;
 12824                           
 12825                           
 12826                           ;psect for function _buttonInterrupt
 12827  0EC6                     _buttonInterrupt:	
 12828                           
 12829                           ;main.c: 159: start = 1;
 12830                           
 12831                           ;incstack = 0
 12832                           ; Regs used in _buttonInterrupt: [wreg+status,2+status,0]
 12833  0EC6  0020               	movlb	0	; select bank0
 12834  0EC7  01DD               	clrf	_start
 12835  0EC8  0ADD               	incf	_start,f
 12836                           
 12837                           ;main.c: 160: fall = 0;
 12838  0EC9  01E4               	clrf	_fall
 12839                           
 12840                           ;main.c: 161: if (gravityCounter < 255) {
 12841  0ECA  0A5C               	incf	_gravityCounter,w
 12842  0ECB  1903               	btfsc	3,2
 12843  0ECC  0008               	return
 12844                           
 12845                           ;main.c: 162: gravityCounter = 255;
 12846  0ECD  30FF               	movlw	255
 12847  0ECE  00F0               	movwf	??_buttonInterrupt
 12848  0ECF  0870               	movf	??_buttonInterrupt,w
 12849  0ED0  00DC               	movwf	_gravityCounter
 12850  0ED1  0008               	return
 12851  0ED2                     __end_of_buttonInterrupt:	
 12852  007E                     btemp	set	126	;btemp
 12853  007E                     int$flags	set	126
 12854  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        37
    BSS         87
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     39      71
    BANK1            80      0      62
    BANK2            80      0      32
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    i2c_write1ByteRegister@data.data	PTR unsigned char  size(1) Largest target is 0

    i2c_read1ByteRegister@d2.data	PTR unsigned char  size(1) Largest target is 0

    i2c_read2ByteRegister@result.data	PTR unsigned char  size(1) Largest target is 0

    i2c_write2ByteRegister@data.data	PTR unsigned char  size(1) Largest target is 0

    do_I2C_TX$1571$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    do_I2C_RX$1577$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    do_I2C_TX_EMPTY$1583$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    i2c_ISR$1589	PTR const FTN()enum E12337 size(2) Largest target is 1
		 -> do_I2C_TX_EMPTY(), do_I2C_RX(), do_I2C_TX(), do_I2C_DO_ADDRESS_NACK(), 
		 -> do_I2C_DO_NACK_RESTART(), do_I2C_DO_NACK_STOP(), do_I2C_DO_ACK(), do_I2C_RCEN(), 
		 -> do_I2C_SEND_ADR_WRITE(), do_I2C_SEND_ADR_READ(), do_I2C_SEND_STOP(), do_I2C_SEND_RESTART(), 
		 -> do_I2C_SEND_RESTART_WRITE(), do_I2C_SEND_RESTART_READ(), do_I2C_IDLE(), do_I2C_RESET(), 

    do_I2C_TX_EMPTY$1588	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    do_I2C_TX_EMPTY$1583	PTR FTN(PTR void ,)enum E12171 size(2) Largest target is 1
		 -> returnReset(), returnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> rd2RegCompleteHandler(), rd1RegCompleteHandler(), i2c_restartWrite(), wr1RegCompleteHandler(), 
		 -> Absolute function(), 

    do_I2C_RX$1582	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    do_I2C_RX$1577	PTR FTN(PTR void ,)enum E12171 size(2) Largest target is 1
		 -> returnReset(), returnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> rd2RegCompleteHandler(), rd1RegCompleteHandler(), i2c_restartWrite(), wr1RegCompleteHandler(), 
		 -> Absolute function(), 

    do_I2C_TX$1576	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    do_I2C_TX$1571	PTR FTN(PTR void ,)enum E12171 size(2) Largest target is 1
		 -> returnReset(), returnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> rd2RegCompleteHandler(), rd1RegCompleteHandler(), i2c_restartWrite(), wr1RegCompleteHandler(), 
		 -> Absolute function(), 

    returnStop@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    returnReset@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    cb$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    cb$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    i2c_restartWrite@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    cb$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    S824$11$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    mssp_waitForEvent@timeout	PTR unsigned int  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    setCallBack@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    setCallBack@cb	PTR FTN(PTR void ,)enum E12171 size(2) Largest target is 1
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 
		 -> i2c_restartWrite(), wr1RegCompleteHandler(), Absolute function(), 

    fsmStateTable	PTR const FTN()enum E12337[16] size(2) Largest target is 1
		 -> do_I2C_TX_EMPTY(), do_I2C_RX(), do_I2C_TX(), do_I2C_DO_ADDRESS_NACK(), 
		 -> do_I2C_DO_NACK_RESTART(), do_I2C_DO_NACK_STOP(), do_I2C_DO_ACK(), do_I2C_RCEN(), 
		 -> do_I2C_SEND_ADR_WRITE(), do_I2C_SEND_ADR_READ(), do_I2C_SEND_STOP(), do_I2C_SEND_RESTART(), 
		 -> do_I2C_SEND_RESTART_WRITE(), do_I2C_SEND_RESTART_READ(), do_I2C_IDLE(), do_I2C_RESET(), 

    i2c_setBuffer@buffer	PTR void  size(1) Largest target is 17
		 -> i2c_readDataBlock@reg(COMMON[1]), i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@reg(COMMON[1]), i2c_write2ByteRegister@data(COMMON[2]), 
		 -> i2c_read2ByteRegister@reg(COMMON[1]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@reg(COMMON[1]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@reg(COMMON[1]), i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), writebuffer(BANK1[17]), 

    i2c_setAddressNACKCallback@p	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    i2c_setAddressNACKCallback@cb	PTR FTN(PTR void ,)enum E12171 size(2) Largest target is 1
		 -> i2c_restartWrite(), 

    i2c_setDataCompleteCallback@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    i2c_setDataCompleteCallback@cb	PTR FTN(PTR void ,)enum E12171 size(2) Largest target is 1
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), Absolute function(), 

    S824$callbackPayload	PTR void [6] size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    i2c_status.callbackPayload	PTR void [6] size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    S824$callbackTable	PTR FTN(PTR void ,)enum E12171[6] size(2) Largest target is 1
		 -> returnReset(), returnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> rd2RegCompleteHandler(), rd1RegCompleteHandler(), i2c_restartWrite(), wr1RegCompleteHandler(), 
		 -> Absolute function(), 

    i2c_status.callbackTable	PTR FTN(PTR void ,)enum E12171[6] size(2) Largest target is 1
		 -> i1_returnStop(), returnReset(), returnStop(), rdBlkRegCompleteHandler(), 
		 -> wr2RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), i2c_restartWrite(), 
		 -> wr1RegCompleteHandler(), Absolute function(), 

    S824$data_ptr	PTR unsigned char  size(1) Largest target is 17
		 -> i2c_readDataBlock@reg(COMMON[1]), i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@reg(COMMON[1]), i2c_write2ByteRegister@data(COMMON[2]), 
		 -> i2c_read2ByteRegister@reg(COMMON[1]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@reg(COMMON[1]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@reg(COMMON[1]), i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), writebuffer(BANK1[17]), 

    i2c_status.data_ptr	PTR unsigned char  size(1) Largest target is 17
		 -> i2c_readDataBlock@reg(COMMON[1]), i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@reg(COMMON[1]), i2c_write2ByteRegister@data(COMMON[2]), 
		 -> i2c_read2ByteRegister@reg(COMMON[1]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@reg(COMMON[1]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@reg(COMMON[1]), i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), writebuffer(BANK1[17]), 

    d.data	PTR unsigned char  size(1) Largest target is 0

    S643$data	PTR unsigned char  size(1) Largest target is 0

    rdBlkRegCompleteHandler@p.data	PTR unsigned char  size(1) Largest target is 0

    rdBlkRegCompleteHandler@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    wr2RegCompleteHandler@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    rd2RegCompleteHandler@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    rd1RegCompleteHandler@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    i2c_writeNBytes@data	PTR void  size(1) Largest target is 17
		 -> writebuffer(BANK1[17]), 

    wr1RegCompleteHandler@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    i2c_driver_setI2cISR@f	PTR void  size(2) Largest target is 1
		 -> i2c_ISR(), 

    i2c_driver_i2cISR	PTR FTN()void  size(2) Largest target is 1
		 -> i2c_ISR(), Absolute function(), 

    i2c_driver_setBusCollisionISR@f	PTR void  size(2) Largest target is 1
		 -> i2c_busCollisionISR(), 

    i2c_driver_busCollisionISR	PTR FTN()void  size(2) Largest target is 1
		 -> i2c_busCollisionISR(), Absolute function(), 

    IOCCF4_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> buttonInterrupt(), IOCCF4_DefaultInterruptHandler(), 

    IOCCF4_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> buttonInterrupt(), Absolute function(), IOCCF4_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->i1_i2c_ISR
    i1_i2c_ISR->i1_do_I2C_TX
    i1_do_I2C_TX_EMPTY->i1_i2c_restartWrite
    i1_do_I2C_TX_EMPTY->i1_rd1RegCompleteHandler
    i1_do_I2C_TX_EMPTY->i1_rd2RegCompleteHandler
    i1_do_I2C_TX_EMPTY->i1_rdBlkRegCompleteHandler
    i1_do_I2C_TX_EMPTY->i1_returnReset
    i1_do_I2C_TX_EMPTY->i1_returnStop
    i1_do_I2C_TX_EMPTY->i1_wr1RegCompleteHandler
    i1_do_I2C_TX_EMPTY->i1_wr2RegCompleteHandler
    i1_do_I2C_TX->i1_i2c_restartWrite
    i1_do_I2C_TX->i1_rd1RegCompleteHandler
    i1_do_I2C_TX->i1_rd2RegCompleteHandler
    i1_do_I2C_TX->i1_rdBlkRegCompleteHandler
    i1_do_I2C_TX->i1_returnReset
    i1_do_I2C_TX->i1_returnStop
    i1_do_I2C_TX->i1_wr1RegCompleteHandler
    i1_do_I2C_TX->i1_wr2RegCompleteHandler
    i1_do_I2C_SEND_ADR_WRITE->i1_i2c_driver_TXData
    i1_do_I2C_SEND_ADR_READ->i1_i2c_driver_TXData
    i1_do_I2C_RX->i1_i2c_restartWrite
    i1_do_I2C_RX->i1_rd1RegCompleteHandler
    i1_do_I2C_RX->i1_rd2RegCompleteHandler
    i1_do_I2C_RX->i1_rdBlkRegCompleteHandler
    i1_do_I2C_RX->i1_returnReset
    i1_do_I2C_RX->i1_returnStop
    i1_do_I2C_RX->i1_wr1RegCompleteHandler
    i1_do_I2C_RX->i1_wr2RegCompleteHandler
    i1_do_I2C_DO_ADDRESS_NACK->i1_i2c_restartWrite
    i1_do_I2C_DO_ADDRESS_NACK->i1_rd1RegCompleteHandler
    i1_do_I2C_DO_ADDRESS_NACK->i1_rd2RegCompleteHandler
    i1_do_I2C_DO_ADDRESS_NACK->i1_rdBlkRegCompleteHandler
    i1_do_I2C_DO_ADDRESS_NACK->i1_returnReset
    i1_do_I2C_DO_ADDRESS_NACK->i1_returnStop
    i1_do_I2C_DO_ADDRESS_NACK->i1_wr1RegCompleteHandler
    i1_do_I2C_DO_ADDRESS_NACK->i1_wr2RegCompleteHandler
    i1_wr2RegCompleteHandler->i1_i2c_setDataCompleteCallback
    i1_wr1RegCompleteHandler->i1_i2c_setDataCompleteCallback
    i1_rdBlkRegCompleteHandler->i1_i2c_setDataCompleteCallback
    i1_rd2RegCompleteHandler->i1_i2c_setDataCompleteCallback
    i1_rd1RegCompleteHandler->i1_i2c_setDataCompleteCallback
    i1_i2c_setDataCompleteCallback->i1_setCallBack
    _IOCCF4_ISR->_buttonInterrupt

Critical Paths under _main in BANK0

    _main->_shiftWalls
    _shiftWalls->_random
    _random->___awmod
    _rand->___lmul
    ___awmod->_rand
    _initializeDisplay->_i2c_writeNBytes
    _endGame->_writeDisplay
    _writeDisplay->_i2c_writeNBytes
    _i2c_setAddressNACKCallback->_setCallBack
    _i2c_open->_i2c_driver_setBusCollisionISR
    _i2c_open->_i2c_driver_setI2cISR
    _i2c_masterWrite->_i2c_masterOperation
    _i2c_poller->_i2c_ISR
    _i2c_ISR->_do_I2C_TX
    _do_I2C_TX_EMPTY->_i2c_restartWrite
    _do_I2C_TX_EMPTY->_rd1RegCompleteHandler
    _do_I2C_TX_EMPTY->_rd2RegCompleteHandler
    _do_I2C_TX_EMPTY->_rdBlkRegCompleteHandler
    _do_I2C_TX_EMPTY->_returnReset
    _do_I2C_TX_EMPTY->_returnStop
    _do_I2C_TX_EMPTY->_wr1RegCompleteHandler
    _do_I2C_TX_EMPTY->_wr2RegCompleteHandler
    _do_I2C_TX->_i2c_restartWrite
    _do_I2C_TX->_rd1RegCompleteHandler
    _do_I2C_TX->_rd2RegCompleteHandler
    _do_I2C_TX->_rdBlkRegCompleteHandler
    _do_I2C_TX->_returnReset
    _do_I2C_TX->_returnStop
    _do_I2C_TX->_wr1RegCompleteHandler
    _do_I2C_TX->_wr2RegCompleteHandler
    _do_I2C_SEND_ADR_WRITE->_i2c_driver_TXData
    _do_I2C_SEND_ADR_READ->_i2c_driver_TXData
    _do_I2C_RX->_i2c_restartWrite
    _do_I2C_RX->_rd1RegCompleteHandler
    _do_I2C_RX->_rd2RegCompleteHandler
    _do_I2C_RX->_rdBlkRegCompleteHandler
    _do_I2C_RX->_returnReset
    _do_I2C_RX->_returnStop
    _do_I2C_RX->_wr1RegCompleteHandler
    _do_I2C_RX->_wr2RegCompleteHandler
    _do_I2C_DO_ADDRESS_NACK->_i2c_restartWrite
    _do_I2C_DO_ADDRESS_NACK->_rd1RegCompleteHandler
    _do_I2C_DO_ADDRESS_NACK->_rd2RegCompleteHandler
    _do_I2C_DO_ADDRESS_NACK->_rdBlkRegCompleteHandler
    _do_I2C_DO_ADDRESS_NACK->_returnReset
    _do_I2C_DO_ADDRESS_NACK->_returnStop
    _do_I2C_DO_ADDRESS_NACK->_wr1RegCompleteHandler
    _do_I2C_DO_ADDRESS_NACK->_wr2RegCompleteHandler
    _wr2RegCompleteHandler->_i2c_setDataCompleteCallback
    _wr1RegCompleteHandler->_i2c_setDataCompleteCallback
    _rdBlkRegCompleteHandler->_i2c_setDataCompleteCallback
    _rd2RegCompleteHandler->_i2c_setDataCompleteCallback
    _rd1RegCompleteHandler->_i2c_setDataCompleteCallback
    _i2c_setDataCompleteCallback->_setCallBack
    _drawWalls->_reverse
    _PIN_MANAGER_Initialize->_IOCCF4_SetInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  252315
                                             37 BANK0      2     2      0
         _IOCCF4_SetInterruptHandler
                  _SYSTEM_Initialize
                        _clearPixels
                          _drawPixel
                          _drawWalls
                            _endGame
                  _initializeDisplay
                         _shiftWalls
                       _writeDisplay
 ---------------------------------------------------------------------------------
 (1) _shiftWalls                                           6     6      0     910
                                             31 BANK0      6     6      0
                             _random
 ---------------------------------------------------------------------------------
 (2) _random                                               4     3      1     910
                                             27 BANK0      4     3      1
                            ___awmod
                               _rand
 ---------------------------------------------------------------------------------
 (3) _rand                                                 7     5      2     244
                                             13 BANK0      7     5      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     244
                                              1 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4     448
                                             20 BANK0      7     3      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (1) _initializeDisplay                                    1     1      0   83048
                                             22 BANK0      1     1      0
                    _i2c_writeNBytes
 ---------------------------------------------------------------------------------
 (1) _endGame                                              2     2      0   83652
                                             27 BANK0      2     2      0
                        _clearPixels
                       _writeDisplay
 ---------------------------------------------------------------------------------
 (1) _writeDisplay                                         5     5      0   83652
                                             22 BANK0      5     5      0
                            ___awdiv
                    _i2c_writeNBytes
 ---------------------------------------------------------------------------------
 (2) _i2c_writeNBytes                                      4     1      3   83048
                                             18 BANK0      4     1      3
                          _i2c_close
                    _i2c_masterWrite
                           _i2c_open
         _i2c_setAddressNACKCallback
                      _i2c_setBuffer
 ---------------------------------------------------------------------------------
 (3) _i2c_setAddressNACKCallback                           4     1      3    1870
                                              6 BANK0      4     1      3
                        _setCallBack
 ---------------------------------------------------------------------------------
 (3) _i2c_open                                             3     3      0     366
                                              3 BANK0      3     3      0
                    _i2c_driver_open
      _i2c_driver_setBusCollisionISR
               _i2c_driver_setI2cISR
                      _mssp_clearIRQ
 ---------------------------------------------------------------------------------
 (4) _i2c_driver_setI2cISR                                 2     0      2      98
                                              1 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _i2c_driver_setBusCollisionISR                        2     0      2      98
                                              1 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _i2c_driver_open                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2c_masterWrite                                      0     0      0   78362
                _i2c_masterOperation
 ---------------------------------------------------------------------------------
 (4) _i2c_masterOperation                                  3     3      0   78362
                                             15 BANK0      3     3      0
                   _i2c_driver_start
                         _i2c_poller
                  _mssp_IRQisEnabled
 ---------------------------------------------------------------------------------
 (5) _mssp_IRQisEnabled                                    2     2      0       0
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (5) _i2c_poller                                           0     0      0   78192
                            _i2c_ISR
                  _mssp_waitForEvent
 ---------------------------------------------------------------------------------
 (6) _mssp_waitForEvent                                    1     1      0      50
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _i2c_ISR                                              1     1      0   78142
                                             14 BANK0      1     1      0
                      _do_I2C_DO_ACK *
             _do_I2C_DO_ADDRESS_NACK *
             _do_I2C_DO_NACK_RESTART *
                _do_I2C_DO_NACK_STOP *
                        _do_I2C_IDLE *
                        _do_I2C_RCEN *
                       _do_I2C_RESET *
                          _do_I2C_RX *
               _do_I2C_SEND_ADR_READ *
              _do_I2C_SEND_ADR_WRITE *
                _do_I2C_SEND_RESTART *
           _do_I2C_SEND_RESTART_READ *
          _do_I2C_SEND_RESTART_WRITE *
                   _do_I2C_SEND_STOP *
                          _do_I2C_TX *
                    _do_I2C_TX_EMPTY *
                  _i2c_driver_isNACK
                      _mssp_clearIRQ
 ---------------------------------------------------------------------------------
 (7) _do_I2C_TX_EMPTY                                      1     1      0   19494
                                             11 BANK0      1     1      0
                   Absolute function *
                _do_I2C_SEND_RESTART
                   _do_I2C_SEND_STOP
                   _i2c_restartWrite *
                        _mssp_setIRQ
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
                        _returnReset *
                         _returnStop *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (8) _mssp_setIRQ                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_TX                                            3     3      0   19616
                                             11 BANK0      3     3      0
                   Absolute function *
           _do_I2C_SEND_RESTART_READ
          _do_I2C_SEND_RESTART_WRITE
                   _do_I2C_SEND_STOP
                  _i2c_driver_TXData
                  _i2c_driver_isNACK
                   _i2c_restartWrite *
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
                        _returnReset *
                         _returnStop *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (7) _i2c_driver_isNACK                                    1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (8) _do_I2C_SEND_RESTART_WRITE                            0     0      0       0
                 _i2c_driver_restart
 ---------------------------------------------------------------------------------
 (8) _do_I2C_SEND_RESTART_READ                             0     0      0       0
                 _i2c_driver_restart
 ---------------------------------------------------------------------------------
 (7) _do_I2C_SEND_ADR_WRITE                                0     0      0      22
                  _i2c_driver_TXData
 ---------------------------------------------------------------------------------
 (7) _do_I2C_SEND_ADR_READ                                 0     0      0      22
                  _i2c_driver_TXData
 ---------------------------------------------------------------------------------
 (8) _i2c_driver_TXData                                    1     1      0      22
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_RX                                            1     1      0   19494
                                             11 BANK0      1     1      0
                   Absolute function *
             _do_I2C_DO_NACK_RESTART
                _do_I2C_DO_NACK_STOP
               _i2c_driver_getRXData
                 _i2c_driver_sendACK
                   _i2c_restartWrite *
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
                        _returnReset *
                         _returnStop *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (8) _i2c_driver_getRXData                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _do_I2C_DO_NACK_STOP                                  0     0      0       0
                _i2c_driver_sendNACK
 ---------------------------------------------------------------------------------
 (8) _do_I2C_DO_NACK_RESTART                               0     0      0       0
                _i2c_driver_sendNACK
 ---------------------------------------------------------------------------------
 (9) _i2c_driver_sendNACK                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_RESET                                         0     0      0       0
                _i2c_driver_resetBus
 ---------------------------------------------------------------------------------
 (8) _i2c_driver_resetBus                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_RCEN                                          0     0      0       0
                 _i2c_driver_startRX
 ---------------------------------------------------------------------------------
 (8) _i2c_driver_startRX                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_IDLE                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_DO_ADDRESS_NACK                               1     1      0   19494
                                             11 BANK0      1     1      0
                   Absolute function *
                _do_I2C_SEND_RESTART
                   _do_I2C_SEND_STOP
                   _i2c_restartWrite *
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
                        _returnReset *
                         _returnStop *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (8) _wr2RegCompleteHandler                                1     0      1    3852
                                             10 BANK0      1     0      1
                      _i2c_setBuffer
        _i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (8) _wr1RegCompleteHandler                                1     0      1    3852
                                             10 BANK0      1     0      1
                      _i2c_setBuffer
        _i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (8) _returnStop                                           1     0      1      76
                                             10 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (8) _returnReset                                          1     0      1     136
                                             10 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (8) _rdBlkRegCompleteHandler                              1     0      1    3874
                                             10 BANK0      1     0      1
                      _i2c_setBuffer
        _i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (8) _rd2RegCompleteHandler                                1     0      1    3852
                                             10 BANK0      1     0      1
                      _i2c_setBuffer
        _i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (8) _rd1RegCompleteHandler                                1     0      1    3852
                                             10 BANK0      1     0      1
                      _i2c_setBuffer
        _i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (9) _i2c_setDataCompleteCallback                          4     1      3    2478
                                              6 BANK0      4     1      3
                        _setCallBack
 ---------------------------------------------------------------------------------
 (4) _setCallBack                                          5     2      3     914
                                              1 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (3) _i2c_setBuffer                                        4     2      2    1352
                                              1 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (8) _i2c_restartWrite                                     1     0      1       0
                                             10 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (8) _do_I2C_SEND_STOP                                     0     0      0       0
                    _i2c_driver_stop
 ---------------------------------------------------------------------------------
 (9) _i2c_driver_stop                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _do_I2C_SEND_RESTART                                  0     0      0       0
                 _i2c_driver_restart
 ---------------------------------------------------------------------------------
 (9) _i2c_driver_restart                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (15) Absolute function(Fake)                              1     0      1       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_DO_ACK                                        0     0      0       0
                 _i2c_driver_sendACK
 ---------------------------------------------------------------------------------
 (8) _i2c_driver_sendACK                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2c_driver_start                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2c_close                                            2     2      0      24
                                              1 BANK0      2     2      0
                      _mssp_clearIRQ
                    _mssp_disableIRQ
 ---------------------------------------------------------------------------------
 (4) _mssp_disableIRQ                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _mssp_clearIRQ                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     604
                                              1 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (2) _clearPixels                                          1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _drawWalls                                            2     2      0     157
                                              5 BANK0      2     2      0
                            _reverse
 ---------------------------------------------------------------------------------
 (2) _reverse                                              4     4      0     157
                                              1 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _drawPixel                                            9     7      2     548
                                              1 BANK0      9     7      2
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     174
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0     174
         _IOCCF4_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _IOCCF4_SetInterruptHandler                           2     0      2     174
                                              1 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _INTERRUPT_InterruptManager                          1     1      0   14790
                                              0 BANK0      1     1      0
                   Absolute function *
                    _PIN_MANAGER_IOC
                _i2c_busCollisionISR *
                          i1_i2c_ISR *
 ---------------------------------------------------------------------------------
 (13) i1_i2c_ISR                                           1     1      0   14790
                                             13 COMMON     1     1      0
                    i1_do_I2C_DO_ACK *
           i1_do_I2C_DO_ADDRESS_NACK *
           i1_do_I2C_DO_NACK_RESTART *
              i1_do_I2C_DO_NACK_STOP *
                      i1_do_I2C_IDLE *
                      i1_do_I2C_RCEN *
                     i1_do_I2C_RESET *
                        i1_do_I2C_RX *
             i1_do_I2C_SEND_ADR_READ *
            i1_do_I2C_SEND_ADR_WRITE *
              i1_do_I2C_SEND_RESTART *
         i1_do_I2C_SEND_RESTART_READ *
        i1_do_I2C_SEND_RESTART_WRITE *
                 i1_do_I2C_SEND_STOP *
                        i1_do_I2C_TX *
                  i1_do_I2C_TX_EMPTY *
                i1_i2c_driver_isNACK
                    i1_mssp_clearIRQ
 ---------------------------------------------------------------------------------
 (14) i1_mssp_clearIRQ                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i1_do_I2C_TX_EMPTY                                   1     1      0    3656
                                             10 COMMON     1     1      0
                   Absolute function *
              i1_do_I2C_SEND_RESTART
                 i1_do_I2C_SEND_STOP
                 i1_i2c_restartWrite *
                      i1_mssp_setIRQ
            i1_rd1RegCompleteHandler *
            i1_rd2RegCompleteHandler *
          i1_rdBlkRegCompleteHandler *
                      i1_returnReset *
                       i1_returnStop *
            i1_wr1RegCompleteHandler *
            i1_wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (15) i1_mssp_setIRQ                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i1_do_I2C_TX                                         3     3      0    3778
                                             10 COMMON     3     3      0
                   Absolute function *
         i1_do_I2C_SEND_RESTART_READ
        i1_do_I2C_SEND_RESTART_WRITE
                 i1_do_I2C_SEND_STOP
                i1_i2c_driver_TXData
                i1_i2c_driver_isNACK
                 i1_i2c_restartWrite *
            i1_rd1RegCompleteHandler *
            i1_rd2RegCompleteHandler *
          i1_rdBlkRegCompleteHandler *
                      i1_returnReset *
                       i1_returnStop *
            i1_wr1RegCompleteHandler *
            i1_wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (14) i1_i2c_driver_isNACK                                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (15) i1_do_I2C_SEND_RESTART_WRITE                         0     0      0       0
               i1_i2c_driver_restart
 ---------------------------------------------------------------------------------
 (15) i1_do_I2C_SEND_RESTART_READ                          0     0      0       0
               i1_i2c_driver_restart
 ---------------------------------------------------------------------------------
 (14) i1_do_I2C_SEND_ADR_WRITE                             0     0      0      22
                i1_i2c_driver_TXData
 ---------------------------------------------------------------------------------
 (14) i1_do_I2C_SEND_ADR_READ                              0     0      0      22
                i1_i2c_driver_TXData
 ---------------------------------------------------------------------------------
 (15) i1_i2c_driver_TXData                                 1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (14) i1_do_I2C_RX                                         1     1      0    3656
                                             10 COMMON     1     1      0
                   Absolute function *
           i1_do_I2C_DO_NACK_RESTART
              i1_do_I2C_DO_NACK_STOP
             i1_i2c_driver_getRXData
               i1_i2c_driver_sendACK
                 i1_i2c_restartWrite *
            i1_rd1RegCompleteHandler *
            i1_rd2RegCompleteHandler *
          i1_rdBlkRegCompleteHandler *
                      i1_returnReset *
                       i1_returnStop *
            i1_wr1RegCompleteHandler *
            i1_wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (15) i1_i2c_driver_getRXData                              0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i1_do_I2C_DO_NACK_STOP                               0     0      0       0
              i1_i2c_driver_sendNACK
 ---------------------------------------------------------------------------------
 (15) i1_do_I2C_DO_NACK_RESTART                            0     0      0       0
              i1_i2c_driver_sendNACK
 ---------------------------------------------------------------------------------
 (16) i1_i2c_driver_sendNACK                               0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i1_do_I2C_RESET                                      0     0      0       0
              i1_i2c_driver_resetBus
 ---------------------------------------------------------------------------------
 (15) i1_i2c_driver_resetBus                               0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i1_do_I2C_RCEN                                       0     0      0       0
               i1_i2c_driver_startRX
 ---------------------------------------------------------------------------------
 (15) i1_i2c_driver_startRX                                0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i1_do_I2C_IDLE                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i1_do_I2C_DO_ADDRESS_NACK                            1     1      0    3656
                                             10 COMMON     1     1      0
                   Absolute function *
              i1_do_I2C_SEND_RESTART
                 i1_do_I2C_SEND_STOP
                 i1_i2c_restartWrite *
            i1_rd1RegCompleteHandler *
            i1_rd2RegCompleteHandler *
          i1_rdBlkRegCompleteHandler *
                      i1_returnReset *
                       i1_returnStop *
            i1_wr1RegCompleteHandler *
            i1_wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (15) i1_wr2RegCompleteHandler                             1     0      1     706
                                              9 COMMON     1     0      1
                    i1_i2c_setBuffer
      i1_i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (15) i1_wr1RegCompleteHandler                             1     0      1     706
                                              9 COMMON     1     0      1
                    i1_i2c_setBuffer
      i1_i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (15) i1_returnStop                                        1     0      1      76
                                              9 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (15) i1_returnReset                                       1     0      1      28
                                              9 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (15) i1_rdBlkRegCompleteHandler                           1     0      1     728
                                              9 COMMON     1     0      1
                    i1_i2c_setBuffer
      i1_i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (15) i1_rd2RegCompleteHandler                             1     0      1     706
                                              9 COMMON     1     0      1
                    i1_i2c_setBuffer
      i1_i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (15) i1_rd1RegCompleteHandler                             1     0      1     706
                                              9 COMMON     1     0      1
                    i1_i2c_setBuffer
      i1_i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (16) i1_i2c_setDataCompleteCallback                       4     1      3     510
                                              5 COMMON     4     1      3
                      i1_setCallBack
 ---------------------------------------------------------------------------------
 (17) i1_setCallBack                                       5     2      3     206
                                              0 COMMON     5     2      3
 ---------------------------------------------------------------------------------
 (16) i1_i2c_setBuffer                                     4     2      2     174
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (15) i1_i2c_restartWrite                                  1     0      1       0
                                              9 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (15) i1_do_I2C_SEND_STOP                                  0     0      0       0
                  i1_i2c_driver_stop
 ---------------------------------------------------------------------------------
 (16) i1_i2c_driver_stop                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i1_do_I2C_SEND_RESTART                               0     0      0       0
               i1_i2c_driver_restart
 ---------------------------------------------------------------------------------
 (16) i1_i2c_driver_restart                                0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i1_do_I2C_DO_ACK                                     0     0      0       0
               i1_i2c_driver_sendACK
 ---------------------------------------------------------------------------------
 (15) i1_i2c_driver_sendACK                                0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _i2c_busCollisionISR                                 0     0      0       0
       _i2c_driver_clearBusCollision
 ---------------------------------------------------------------------------------
 (14) _i2c_driver_clearBusCollision                        0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _PIN_MANAGER_IOC                                     0     0      0       0
                         _IOCCF4_ISR
 ---------------------------------------------------------------------------------
 (14) _IOCCF4_ISR                                          0     0      0       0
                   Absolute function *
     _IOCCF4_DefaultInterruptHandler *
                    _buttonInterrupt *
 ---------------------------------------------------------------------------------
 (15) _buttonInterrupt                                     1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (15) _IOCCF4_DefaultInterruptHandler                      0     0      0       0
 ---------------------------------------------------------------------------------
 (15) Absolute function(Fake)                              1     0      1       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 17
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _IOCCF4_SetInterruptHandler
   _SYSTEM_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
       _IOCCF4_SetInterruptHandler
   _clearPixels
   _drawPixel
   _drawWalls
     _reverse
   _endGame
     _clearPixels
     _writeDisplay
       ___awdiv
       _i2c_writeNBytes
         _i2c_close
           _mssp_clearIRQ
           _mssp_disableIRQ
         _i2c_masterWrite
           _i2c_masterOperation
             _i2c_driver_start
             _i2c_poller
               _i2c_ISR
                 _do_I2C_DO_ACK *
                   _i2c_driver_sendACK
                 _do_I2C_DO_ADDRESS_NACK *
                   Absolute function(Fake) *
                   _do_I2C_SEND_RESTART *
                     _i2c_driver_restart
                   _do_I2C_SEND_STOP *
                     _i2c_driver_stop
                   _i2c_restartWrite *
                   _rd1RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _rd2RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _rdBlkRegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _returnReset *
                   _returnStop *
                   _wr1RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _wr2RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                 _do_I2C_DO_NACK_RESTART *
                   _i2c_driver_sendNACK
                 _do_I2C_DO_NACK_STOP *
                   _i2c_driver_sendNACK
                 _do_I2C_IDLE *
                 _do_I2C_RCEN *
                   _i2c_driver_startRX
                 _do_I2C_RESET *
                   _i2c_driver_resetBus
                 _do_I2C_RX *
                   Absolute function(Fake) *
                   _do_I2C_DO_NACK_RESTART *
                     _i2c_driver_sendNACK
                   _do_I2C_DO_NACK_STOP *
                     _i2c_driver_sendNACK
                   _i2c_driver_getRXData *
                   _i2c_driver_sendACK *
                   _i2c_restartWrite *
                   _rd1RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _rd2RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _rdBlkRegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _returnReset *
                   _returnStop *
                   _wr1RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _wr2RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                 _do_I2C_SEND_ADR_READ *
                   _i2c_driver_TXData
                 _do_I2C_SEND_ADR_WRITE *
                   _i2c_driver_TXData
                 _do_I2C_SEND_RESTART *
                   _i2c_driver_restart
                 _do_I2C_SEND_RESTART_READ *
                   _i2c_driver_restart
                 _do_I2C_SEND_RESTART_WRITE *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _do_I2C_TX *
                   Absolute function(Fake) *
                   _do_I2C_SEND_RESTART_READ *
                     _i2c_driver_restart
                   _do_I2C_SEND_RESTART_WRITE *
                     _i2c_driver_restart
                   _do_I2C_SEND_STOP *
                     _i2c_driver_stop
                   _i2c_driver_TXData *
                   _i2c_driver_isNACK *
                   _i2c_restartWrite *
                   _rd1RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _rd2RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _rdBlkRegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _returnReset *
                   _returnStop *
                   _wr1RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _wr2RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                 _do_I2C_TX_EMPTY *
                   Absolute function(Fake) *
                   _do_I2C_SEND_RESTART *
                     _i2c_driver_restart
                   _do_I2C_SEND_STOP *
                     _i2c_driver_stop
                   _i2c_restartWrite *
                   _mssp_setIRQ *
                   _rd1RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _rd2RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _rdBlkRegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _returnReset *
                   _returnStop *
                   _wr1RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _wr2RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                 _i2c_driver_isNACK *
                 _mssp_clearIRQ *
               _mssp_waitForEvent
             _mssp_IRQisEnabled
         _i2c_open
           _i2c_driver_open
           _i2c_driver_setBusCollisionISR
           _i2c_driver_setI2cISR
           _mssp_clearIRQ
         _i2c_setAddressNACKCallback
           _setCallBack
         _i2c_setBuffer
   _initializeDisplay
     _i2c_writeNBytes
       _i2c_close
         _mssp_clearIRQ
         _mssp_disableIRQ
       _i2c_masterWrite
         _i2c_masterOperation
           _i2c_driver_start
           _i2c_poller
             _i2c_ISR
               _do_I2C_DO_ACK *
                 _i2c_driver_sendACK
               _do_I2C_DO_ADDRESS_NACK *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_DO_NACK_RESTART *
                 _i2c_driver_sendNACK
               _do_I2C_DO_NACK_STOP *
                 _i2c_driver_sendNACK
               _do_I2C_IDLE *
               _do_I2C_RCEN *
                 _i2c_driver_startRX
               _do_I2C_RESET *
                 _i2c_driver_resetBus
               _do_I2C_RX *
                 Absolute function(Fake) *
                 _do_I2C_DO_NACK_RESTART *
                   _i2c_driver_sendNACK
                 _do_I2C_DO_NACK_STOP *
                   _i2c_driver_sendNACK
                 _i2c_driver_getRXData *
                 _i2c_driver_sendACK *
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_SEND_ADR_READ *
                 _i2c_driver_TXData
               _do_I2C_SEND_ADR_WRITE *
                 _i2c_driver_TXData
               _do_I2C_SEND_RESTART *
                 _i2c_driver_restart
               _do_I2C_SEND_RESTART_READ *
                 _i2c_driver_restart
               _do_I2C_SEND_RESTART_WRITE *
                 _i2c_driver_restart
               _do_I2C_SEND_STOP *
                 _i2c_driver_stop
               _do_I2C_TX *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART_READ *
                   _i2c_driver_restart
                 _do_I2C_SEND_RESTART_WRITE *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_driver_TXData *
                 _i2c_driver_isNACK *
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_TX_EMPTY *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_restartWrite *
                 _mssp_setIRQ *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _i2c_driver_isNACK *
               _mssp_clearIRQ *
             _mssp_waitForEvent
           _mssp_IRQisEnabled
       _i2c_open
         _i2c_driver_open
         _i2c_driver_setBusCollisionISR
         _i2c_driver_setI2cISR
         _mssp_clearIRQ
       _i2c_setAddressNACKCallback
         _setCallBack
       _i2c_setBuffer
   _shiftWalls
     _random
       ___awmod
         _rand (ARG)
           ___lmul
       _rand
         ___lmul
   _writeDisplay
     ___awdiv
     _i2c_writeNBytes
       _i2c_close
         _mssp_clearIRQ
         _mssp_disableIRQ
       _i2c_masterWrite
         _i2c_masterOperation
           _i2c_driver_start
           _i2c_poller
             _i2c_ISR
               _do_I2C_DO_ACK *
                 _i2c_driver_sendACK
               _do_I2C_DO_ADDRESS_NACK *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_DO_NACK_RESTART *
                 _i2c_driver_sendNACK
               _do_I2C_DO_NACK_STOP *
                 _i2c_driver_sendNACK
               _do_I2C_IDLE *
               _do_I2C_RCEN *
                 _i2c_driver_startRX
               _do_I2C_RESET *
                 _i2c_driver_resetBus
               _do_I2C_RX *
                 Absolute function(Fake) *
                 _do_I2C_DO_NACK_RESTART *
                   _i2c_driver_sendNACK
                 _do_I2C_DO_NACK_STOP *
                   _i2c_driver_sendNACK
                 _i2c_driver_getRXData *
                 _i2c_driver_sendACK *
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_SEND_ADR_READ *
                 _i2c_driver_TXData
               _do_I2C_SEND_ADR_WRITE *
                 _i2c_driver_TXData
               _do_I2C_SEND_RESTART *
                 _i2c_driver_restart
               _do_I2C_SEND_RESTART_READ *
                 _i2c_driver_restart
               _do_I2C_SEND_RESTART_WRITE *
                 _i2c_driver_restart
               _do_I2C_SEND_STOP *
                 _i2c_driver_stop
               _do_I2C_TX *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART_READ *
                   _i2c_driver_restart
                 _do_I2C_SEND_RESTART_WRITE *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_driver_TXData *
                 _i2c_driver_isNACK *
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_TX_EMPTY *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_restartWrite *
                 _mssp_setIRQ *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _i2c_driver_isNACK *
               _mssp_clearIRQ *
             _mssp_waitForEvent
           _mssp_IRQisEnabled
       _i2c_open
         _i2c_driver_open
         _i2c_driver_setBusCollisionISR
         _i2c_driver_setI2cISR
         _mssp_clearIRQ
       _i2c_setAddressNACKCallback
         _setCallBack
       _i2c_setBuffer

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _PIN_MANAGER_IOC *
     _IOCCF4_ISR
       Absolute function(Fake) *
       _IOCCF4_DefaultInterruptHandler *
       _buttonInterrupt *
   _i2c_busCollisionISR *
     _i2c_driver_clearBusCollision
   i1_i2c_ISR *
     i1_do_I2C_DO_ACK *
       i1_i2c_driver_sendACK
     i1_do_I2C_DO_ADDRESS_NACK *
       Absolute function(Fake) *
       i1_do_I2C_SEND_RESTART *
         i1_i2c_driver_restart
       i1_do_I2C_SEND_STOP *
         i1_i2c_driver_stop
       i1_i2c_restartWrite *
       i1_rd1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rd2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rdBlkRegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_returnReset *
       i1_returnStop *
       i1_wr1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_wr2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
     i1_do_I2C_DO_NACK_RESTART *
       i1_i2c_driver_sendNACK
     i1_do_I2C_DO_NACK_STOP *
       i1_i2c_driver_sendNACK
     i1_do_I2C_IDLE *
     i1_do_I2C_RCEN *
       i1_i2c_driver_startRX
     i1_do_I2C_RESET *
       i1_i2c_driver_resetBus
     i1_do_I2C_RX *
       Absolute function(Fake) *
       i1_do_I2C_DO_NACK_RESTART *
         i1_i2c_driver_sendNACK
       i1_do_I2C_DO_NACK_STOP *
         i1_i2c_driver_sendNACK
       i1_i2c_driver_getRXData *
       i1_i2c_driver_sendACK *
       i1_i2c_restartWrite *
       i1_rd1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rd2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rdBlkRegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_returnReset *
       i1_returnStop *
       i1_wr1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_wr2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
     i1_do_I2C_SEND_ADR_READ *
       i1_i2c_driver_TXData
     i1_do_I2C_SEND_ADR_WRITE *
       i1_i2c_driver_TXData
     i1_do_I2C_SEND_RESTART *
       i1_i2c_driver_restart
     i1_do_I2C_SEND_RESTART_READ *
       i1_i2c_driver_restart
     i1_do_I2C_SEND_RESTART_WRITE *
       i1_i2c_driver_restart
     i1_do_I2C_SEND_STOP *
       i1_i2c_driver_stop
     i1_do_I2C_TX *
       Absolute function(Fake) *
       i1_do_I2C_SEND_RESTART_READ *
         i1_i2c_driver_restart
       i1_do_I2C_SEND_RESTART_WRITE *
         i1_i2c_driver_restart
       i1_do_I2C_SEND_STOP *
         i1_i2c_driver_stop
       i1_i2c_driver_TXData *
       i1_i2c_driver_isNACK *
       i1_i2c_restartWrite *
       i1_rd1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rd2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rdBlkRegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_returnReset *
       i1_returnStop *
       i1_wr1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_wr2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
     i1_do_I2C_TX_EMPTY *
       Absolute function(Fake) *
       i1_do_I2C_SEND_RESTART *
         i1_i2c_driver_restart
       i1_do_I2C_SEND_STOP *
         i1_i2c_driver_stop
       i1_i2c_restartWrite *
       i1_mssp_setIRQ *
       i1_rd1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rd2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rdBlkRegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_returnReset *
       i1_returnStop *
       i1_wr1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_wr2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
     i1_i2c_driver_isNACK *
     i1_mssp_clearIRQ *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     27      47       5       88.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      3E       7       77.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      20       9       40.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      B3      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      B3      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Apr 11 15:02:17 2018

                __end_of_i2c_driver_restart 0D88                         i1_i2c_driver_isNACK 0EDE  
                              returnReset@p 002A                  __end_of_i2c_driver_startRX 0D8E  
                                         _i 005B      __end_of_IOCCF4_DefaultInterruptHandler 0D5E  
   __size_of_IOCCF4_DefaultInterruptHandler 0001              _IOCCF4_DefaultInterruptHandler 0D5D  
             _do_I2C_SEND_RESTART$intlevel0 0E45                                 __CFG_CP$OFF 0000  
                                        l95 0E78                             i1_mssp_clearIRQ 0D79  
                              ___awdiv@sign 0027                        __size_of_do_I2C_IDLE 0009  
                       _do_I2C_SEND_RESTART 0E41                        __size_of_do_I2C_RCEN 000A  
                      __end_ofi1_returnStop 0D62                        ?i1_i2c_driver_TXData 0070  
                               i1_do_I2C_RX 04CA                                 i1_do_I2C_TX 03F4  
                               __CFG_LVP$ON 0000                        i1_i2c_driver_sendACK 0D94  
                                       l284 0EB3                                         l581 07EF  
                                       l574 03F1                                         l655 0386  
                                       l671 04A5                    i1_do_I2C_DO_NACK_RESTART 0DB4  
              __size_of_i2c_masterOperation 0024                        _returnStop$intlevel0 0DF5  
                      i1_i2c_driver_restart 0D6A               i2c_setDataCompleteCallback@cb 0026  
                              ___awmod@sign 003A                    ?i1_rd2RegCompleteHandler 0079  
                     __size_of_do_I2C_RESET 000B                                __CFG_BORV$LO 0000  
                                       wreg 0009                                __CFG_IESO$ON 0000  
                      i1_i2c_driver_startRX 0D70                       __end_ofi1_returnReset 0D64  
                      ?i1_i2c_driver_isNACK 0070                    ?i1_wr2RegCompleteHandler 0079  
           ??i1_i2c_setDataCompleteCallback 0078                      i1_i2c_driver_getRXData 0D73  
                     __end_ofi1_mssp_setIRQ 0D79                                __CFG_ZCD$OFF 0000  
                   ??_rd2RegCompleteHandler 002B                       i1_i2c_driver_sendNACK 0D98  
                                      l2500 07BE                                        l3320 00E4  
                                      l3312 008B                                        l2512 0E3D  
                                      l3400 0148                                        l2506 0E35  
                                      l2530 0E5D                                        l3410 0186  
                                      l3402 0156                                        l3316 00BA  
                                      l2436 06C3                                        l2524 0E4D  
                                      l2550 0DEF                                        l2542 0DF5  
                                      l2518 0E45                                        l3414 018D  
                                      l2536 0E65                                        l3408 015A  
                                      l2546 0DFB                               i1returnStop@p 0079  
                                      l2492 0F95                                        l2468 0FAB  
                                      l2476 0FC1                                        l2484 0FD7  
                                      l2556 0E9E                                        l2566 0E6D  
                                      l2574 0EEE                                        l2582 0EA9  
                                      l2590 0E80                                        l2830 05C2  
                                      l3390 012B                                        l3384 0117  
                                      l2922 0300                                        l2914 02EF  
                                      l2906 02D1                                        l5410 05E9  
                                      l5402 04AD                                        l2826 05B8  
                                      l2908 02DD                                        l5404 05E3  
                                      l5340 061D                                        l5332 0611  
                                      l2918 02F8                                        l5406 05E6  
                                      l5422 05F0                                        l2598 0E55  
                                      l2934 0449                                        l5416 05ED  
                                      l5336 061A                                        l5360 0366  
                                      l5352 0360                                        l5432 069B  
                                      l5424 068A                                        l5440 0EBB  
                                      l5512 067F                                        l5504 0662  
                                      l2960 047F                                        l2952 046E  
                                      l2890 02BE                                        l5346 0620  
                                      l2946 0456                                        l2938 0450  
                                      l5356 0363                                        l5348 035A  
                                      l5452 06E2                                        l5700 0337  
                                      l2948 0462                                        l2956 0477  
                                      l5374 039F                                        l5366 0369  
                                      l5454 06E8                                        l5534 02A7  
                                      l5710 0349                                        l2896 02C9  
                                      l5392 04A7                                        l5528 0262  
                                      l5378 0488                                        l5458 06F2  
                                      l5706 0344                                        l5650 0215  
                                      l5396 04AA                                        l5644 0210  
                                      l5662 0227                                        l5638 0201  
                                      l5680 030B                                        l5656 0222  
                                      l5744 01AA                                        l5770 01E4  
                                      l5746 01AE                                        l5668 0234  
                                      l5772 01E8                                        l5764 01DE  
                                      l5756 01CE                                        l5686 031B  
                                      l5758 01D1                                        l5768 01E2  
                                      l5778 01F6                                        u1405 05C3  
                                      _LATA 010C                                        _LATB 010D  
                                      u1415 05CA                                        _LATC 010E  
                                      u2065 017B                                        u1515 02D4  
                                      u1535 02DE                                        u1615 0459  
                                      u1545 02E8                                        u1465 0537  
                                      u1555 02F0                                        u1635 0468  
                                      u1645 046F                                        u1735 054A  
                                      u1904 00D2                                        u1905 00D0  
                                      u1745 0550                                        u1834 0068  
                                      u1835 0066                                        u1755 055D  
                                      u1924 00F1                                        u1844 007D  
                                      u1925 00EF                                        u1845 007B  
                                      u1765 0563                                        u1934 00FD  
                                      u1935 00FB                                        u1775 0570  
                                      u1864 0099                                        u1865 0097  
                                      u1874 00AC                                        u1875 00AA  
                                      u1894 00C6                                        u1895 00C4  
                                      u4827 0324                                        u4837 0EB7  
                      ?_do_I2C_SEND_RESTART 0070                                        _PLLR 04D6  
                                      _WPUA 020C                                        _WPUB 020D  
                                      _WPUC 020E                     ??_wr2RegCompleteHandler 002B  
                              __CFG_WRT$OFF 0000                               __CFG_FCMEN$ON 0000  
                     i1_i2c_driver_resetBus 0D5E           __size_of_do_I2C_SEND_RESTART_READ 0008  
                                      _fall 0064                   ?_do_I2C_SEND_RESTART_READ 0070  
                           ??_mssp_clearIRQ 0021                                        _main 0192  
                                      _rand 0508                   __size_of_do_I2C_SEND_STOP 0008  
                    __size_of_do_I2C_DO_ACK 0008                                        fsr0h 0005  
                                      fsr1h 0007                                        indf0 0000  
                                      fsr0l 0004                                        indf1 0001  
                                      fsr1l 0006                                        btemp 007E  
                         ??i1_do_I2C_DO_ACK 0070                               __CFG_BOREN$ON 0000  
                     ?_do_I2C_SEND_ADR_READ 0070                    __size_of_i2c_writeNBytes 0026  
                                      start 002E                               _i2c_setBuffer 0F7C  
                             __CFG_MCLRE$ON 0000                             __end_of_i2c_ISR 06AC  
          __size_of_rdBlkRegCompleteHandler 001D                    ??_do_I2C_DO_NACK_RESTART 0021  
                             i1_do_I2C_IDLE 0DC9                               i1_do_I2C_RCEN 0DD9  
                              _do_I2C_RESET 0E9A                              i1returnReset@p 0079  
                             __CFG_PLLEN$ON 0000              __size_of_OSCILLATOR_Initialize 000A  
               i2c_setAddressNACKCallback@p 0028                       ??i1_i2c_driver_TXData 0070  
             __end_of_OSCILLATOR_Initialize 0E7C                         __size_of_IOCCF4_ISR 000D  
                     ?i1_i2c_driver_sendACK 0070                                       ?_main 0070  
                                     ?_rand 002D                             __end_of___awdiv 0305  
                             __CFG_WDTE$OFF 0000                             __end_of___awmod 0484  
                  __size_of_mssp_disableIRQ 0003                             ___awdiv@divisor 0021  
                                     i1l490 0010                                       i1l493 001E  
                                     i1l655 041F                                       i1l671 04E4  
                                     i1l498 0029                             ___awdiv@counter 0026  
                     ?i1_i2c_driver_restart 0070                                       _TRISA 008C  
                                     _TRISB 008D                                       _TRISC 008E  
                     ?i1_i2c_driver_startRX 0070                             __end_of_endGame 0356  
                       ___lmul@multiplicand 0025                       ??i1_i2c_driver_isNACK 0070  
                               i2c_open@ret 0025                                 _writebuffer 00CD  
                        __size_ofi1_i2c_ISR 0020                     __end_of_PIN_MANAGER_IOC 0DD9  
                                     _randx 0060                        _i2c_driver_getRXData 0D8E  
              ?i1_do_I2C_SEND_RESTART_WRITE 0070                  ?_do_I2C_SEND_RESTART_WRITE 0070  
                                     _score 0053                                       _walls 0047  
                                     _start 005D                       ??_do_I2C_SEND_RESTART 0021  
                                     pclath 000A                             __end_of_reverse 057B  
                _i2c_driver_busCollisionISR 0057                      ?_do_I2C_SEND_ADR_WRITE 0070  
                                     status 0003                                       wtemp0 007E  
                     __size_of_writeDisplay 005A                          i2c_driver_TXData@d 0021  
                 __size_of_i2c_driver_start 0003                              ?_i2c_setBuffer 0021  
                              ?_setCallBack 0021                     __end_ofi1_mssp_clearIRQ 0D7C  
                             _fsmStateTable 0120                             __initialization 0030  
                      __size_of_clearPixels 0012              __size_ofi1_do_I2C_SEND_RESTART 0004  
                                _i2c_poller 0EBB               __end_ofi1_do_I2C_SEND_RESTART 0DA8  
                                _i2c_status 00A0                              ?i1_do_I2C_IDLE 0070  
                              __end_of_main 01FB                                __end_of_rand 0544  
                            ?i1_do_I2C_RCEN 0070                  __end_ofi1_do_I2C_SEND_STOP 0DAC  
                          __end_of_i2c_open 03F4                        _i2c_driver_setI2cISR 0E09  
                            __CFG_LPBOR$OFF 0000                 ?_INTERRUPT_InterruptManager 0070  
           __end_ofi1_rd2RegCompleteHandler 0F6A                               setCallBack@cb 0021  
                            i1_do_I2C_RESET 0E1B                               _do_I2C_DO_ACK 0E51  
                                    ??_main 0045                                      ??_rand 002F  
                         ?_i2c_restartWrite 002A             __end_ofi1_wr2RegCompleteHandler 0F3A  
                              i2c_close@ret 0022                             _i2c_driver_open 0E90  
                        ??_i2c_restartWrite 002B                             _i2c_driver_stop 0D88  
                   ?_do_I2C_DO_ADDRESS_NACK 0070                      ?i1_i2c_driver_sendNACK 0070  
                              _writeDisplay 0259                       ?_i2c_driver_getRXData 0070  
              ??_IOCCF4_SetInterruptHandler 0023                            ___awdiv@dividend 0023  
           i1i2c_setDataCompleteCallback@cb 0075                                      _ANSELA 018C  
                                    _ANSELB 018D                                      _ANSELC 018E  
                                    _BORCON 0116                     ?i1_do_I2C_SEND_ADR_READ 0070  
                    ?i1_i2c_driver_resetBus 0070                                      _RB4PPS 0E9C  
                                    _RB6PPS 0E9E                                      i1l3004 0F2A  
                                    i1l3012 0FE9                                      i1l3030 0DA4  
                                    i1l3024 0DA0                                      _ODCONA 028C  
                                    i1l3018 0D9C                                      i1l3042 0DB0  
                                    _ODCONB 028D                                      _ODCONC 028E  
                                    i1l3036 0DA8                                      i1l3204 0DAC  
                                    i1l3054 0D60                                      i1l3062 0002  
                                    i1l3048 0DB4                                      i1l3058 0D62  
                                    i1l3162 0E1B                                      i1l3172 0DC9  
                                    i1l3180 0E29                                      i1l3188 0E22  
                                    i1l3196 0DD9                                      i1l2768 070B  
                                    i1l5600 04E9                                      i1l5610 063A  
                                    i1l2980 0F3A                                      i1l5620 0641  
                                    i1l5540 0720                                      i1l5518 0F00  
                                    i1l5614 063D                                      i1l5550 0726  
                                    i1l5606 04EC                                      i1l5608 0637  
                                    i1l5544 0723                                      i1l5536 0719  
                                    i1l5560 03FD                                      i1l5552 03F4  
                                    i1l5720 075C                                      i1l5626 0644  
                                    i1l5570 0403                                      i1l2988 0F4A  
                                    i1l2996 0F5A                                      i1l5564 0400  
                                    i1l5556 03FA                                      i1l5582 04CA  
                                    i1l5728 076C                                      i1l5578 0438  
                                    i1l5596 04E6               ??i1_do_I2C_SEND_RESTART_WRITE 0070  
                        __size_of_i2c_close 001B                                      _OSCCON 0099  
                   i1_rd1RegCompleteHandler 0F4A                      ??_do_I2C_SEND_ADR_READ 0022  
                  rdBlkRegCompleteHandler@p 002A                                   ??_i2c_ISR 002E  
                   i1_wr1RegCompleteHandler 0F3A                 ??i1_rdBlkRegCompleteHandler 007A  
                            __CFG_PWRTE$OFF 0000                         _do_I2C_RX$intlevel0 0488  
                     __size_ofi1_returnStop 0002                 __end_of_do_I2C_DO_NACK_STOP 0E61  
                         __end_ofi1_i2c_ISR 077C         __end_of_i2c_setDataCompleteCallback 0F10  
               _i2c_setDataCompleteCallback 0F03                                      ___lmul 05AF  
                           _i2c_masterWrite 0DC0                                   ??___awdiv 0025  
                            __CFG_STVREN$ON 0000                                   ??___awmod 0038  
           __size_of_do_I2C_DO_NACK_RESTART 0008                       ?_i2c_driver_setI2cISR 0021  
                         ??_i2c_writeNBytes 0035                      __end_ofi1_do_I2C_RESET 0E22  
                           i1_i2c_setBuffer 07F2                      ??i1_i2c_driver_sendACK 0070  
                                    _random 077C                                   ??_endGame 003B  
                          ___awdiv@quotient 0028                              ?_do_I2C_DO_ACK 0070  
                           ___awmod@divisor 0034                             _buttonInterrupt 0EC6  
               __size_ofi1_i2c_restartWrite 0002                             ___awmod@counter 0039  
                    ??i1_i2c_driver_restart 0070         __size_of_IOCCF4_SetInterruptHandler 0006  
                    ??i1_i2c_driver_startRX 0070              __end_of_do_I2C_DO_ADDRESS_NACK 0637  
               ?_i2c_setAddressNACKCallback 0026                                ?_returnReset 002A  
                                 ??_reverse 0021               _do_I2C_DO_NACK_STOP$intlevel0 0E5D  
                i1rdBlkRegCompleteHandler@p 0079           __size_ofi1_do_I2C_DO_ADDRESS_NACK 0023  
                              ?_mssp_setIRQ 0070              __end_ofi1_do_I2C_SEND_ADR_READ 0E31  
                         ??_mssp_disableIRQ 0021  IOCCF4_SetInterruptHandler@InterruptHandler 0021  
                 ?i1_do_I2C_DO_ADDRESS_NACK 0070                            ?_PIN_MANAGER_IOC 0070  
                              ??_IOCCF4_ISR 0071                           i1_do_I2C_TX_EMPTY 0637  
                         _SYSTEM_Initialize 0DE5                     __end_of__initialization 0057  
                           ??_i2c_setBuffer 0023              _do_I2C_SEND_ADR_READ$intlevel0 0EEE  
                          _do_I2C_SEND_STOP 0E49                                i1_returnStop 0D60  
                     i1_do_I2C_DO_NACK_STOP 0DB0                          __size_of_do_I2C_RX 0046  
                        __size_of_do_I2C_TX 0050                          ?i1_do_I2C_TX_EMPTY 0070  
                        ?_SYSTEM_Initialize 0070           _rdBlkRegCompleteHandler$intlevel0 07BE  
                       _i2c_masterOperation 06D1                    __size_of_do_I2C_TX_EMPTY 002E  
                          ?i1_mssp_clearIRQ 0070                             ??i1_do_I2C_IDLE 0070  
                           ??i1_do_I2C_RCEN 0070                     _rdBlkRegCompleteHandler 07BA  
                               ?_i2c_poller 0070                              __pcstackCOMMON 0070  
                ??i1_do_I2C_DO_NACK_RESTART 0070                         _do_I2C_TX$intlevel0 035A  
                       ??i1_do_I2C_TX_EMPTY 007A                                __pidataBANK0 0DCE  
                              __pidataBANK2 073C                         ??_SYSTEM_Initialize 0023  
                           ?i1_do_I2C_RESET 0070                     __end_of_i2c_driver_open 0E9A  
                   __end_of_i2c_driver_stop 0D8B                           __end_of_i2c_close 07F2  
                              ?i1_do_I2C_RX 0070                                ?i1_do_I2C_TX 0070  
                            drawPixel@color 0022                         i1i2c_restartWrite@p 0079  
                        __end_of_IOCCF4_ISR 0F03                          _i2c_driver_sendACK 0DB8  
                 i1_rdBlkRegCompleteHandler 0FE9                        ?_i2c_masterOperation 0070  
            i1i2c_setDataCompleteCallback@p 0077                     ?i1_i2c_driver_getRXData 0070  
                            _OPTION_REGbits 0095                ??i1_do_I2C_SEND_RESTART_READ 0070  
                        _i2c_driver_restart 0D85                                 random@lower 003E  
                    __size_ofi1_setCallBack 0024                          _i2c_driver_startRX 0D8B  
                               random@upper 003B                      ??_i2c_driver_getRXData 0021  
                           i1setCallBack@cb 0070                    i1rd1RegCompleteHandler@p 0079  
                           i1_do_I2C_DO_ACK 0DAC                          __size_of_drawPixel 00B6  
                        __size_of_drawWalls 001F                         ?_i2c_driver_sendACK 0070  
                            setCallBack@idx 0025                   __end_ofi1_do_I2C_TX_EMPTY 0660  
                    _do_I2C_DO_NACK_RESTART 0E61                              _do_I2C_TX$1026 002C  
                 __end_of_SYSTEM_Initialize 0DEB                   ??i1_rd1RegCompleteHandler 007A  
                       ?_i2c_driver_restart 0070                                  __pbssBANK0 0047  
                                __pbssBANK1 00A0                   ??i1_wr1RegCompleteHandler 007A  
                       ?_i2c_driver_startRX 0070              __size_of_rd2RegCompleteHandler 0016  
                                 ?_i2c_open 0070               __end_of_rd2RegCompleteHandler 0FE9  
            __size_of_wr2RegCompleteHandler 0016            __size_ofi1_rd2RegCompleteHandler 0010  
             __end_of_wr2RegCompleteHandler 0FA7                     __end_of_i2c_masterWrite 0DC4  
                  i1wr1RegCompleteHandler@p 0079                            _i2c_driver_start 0D82  
                     _rd1RegCompleteHandler 0FBD                     __end_ofi1_i2c_setBuffer 0800  
          __size_ofi1_wr2RegCompleteHandler 0010                       _do_I2C_IDLE$intlevel0 0E6D  
                     _wr1RegCompleteHandler 0FA7                __size_of_i2c_busCollisionISR 0003  
           _wr1RegCompleteHandler$intlevel0 0FAB             _rd1RegCompleteHandler$intlevel0 0FC1  
                   __end_of_buttonInterrupt 0ED2                                  __pmaintext 0192  
                             ??_do_I2C_IDLE 0021                        __size_of_setCallBack 0025  
                             ??_do_I2C_RCEN 0021                        ??_i2c_driver_sendACK 0021  
                    ??_i2c_driver_setI2cISR 0023                                     ?___lmul 0021  
                           __CFG_PPS1WAY$ON 0000                             ??_do_I2C_DO_ACK 0021  
                                __pintentry 0004                        ??_i2c_driver_restart 0021  
              __size_of_i2c_driver_sendNACK 0004                        ??_i2c_driver_startRX 0021  
                            ___lmul@product 0029                                     ?_random 003B  
                       i2c_setBuffer@buffer 0024                           _initializeDisplay 01FB  
              __size_of_i2c_driver_resetBus 0001              __end_ofi1_i2c_driver_getRXData 0D76  
            ?_i2c_driver_setBusCollisionISR 0021                       ??_i2c_masterOperation 002F  
                         __end_of_do_I2C_RX 04CA                           __end_of_do_I2C_TX 03A6  
                                _createWall 005F                          ?_initializeDisplay 0070  
                  ?i1_do_I2C_SEND_ADR_WRITE 0070                             __CFG_WDTCCS$SWC 0000  
                                   _OSCTUNE 0098          __end_of_IOCCF4_SetInterruptHandler 0DE5  
                _IOCCF4_SetInterruptHandler 0DDF                                     _SSP1ADD 0212  
                                   _SSP1BUF 0211                                     _SSP1MSK 0213  
                       __size_of_i2c_poller 000B                     ??_do_I2C_SEND_ADR_WRITE 0022  
       _do_I2C_SEND_RESTART_WRITE$intlevel0 0E3D                         ??_initializeDisplay 0036  
               ??_do_I2C_SEND_RESTART_WRITE 0021                      ?i1_do_I2C_DO_NACK_STOP 0070  
                         _mssp_IRQisEnabled 0E86                                  ??_i2c_open 0023  
                                   _i2c_ISR 0686                   ??_rdBlkRegCompleteHandler 002B  
                         _mssp_waitForEvent 0EB0                          ?_mssp_IRQisEnabled 0070  
                     __end_of_mssp_clearIRQ 0D7F                       _returnReset$intlevel0 0DFB  
                     _do_I2C_RCEN$intlevel0 0E80                               i1_setCallBack 06F5  
                        ?_mssp_waitForEvent 0070            _do_I2C_DO_ADDRESS_NACK$intlevel0 0611  
               __end_ofi1_i2c_driver_TXData 0DC9                           __end_of_drawPixel 0111  
                         __end_of_drawWalls 07BA         __size_of_i2c_setAddressNACKCallback 000D  
                    __size_ofi1_returnReset 0002                         ??_mssp_IRQisEnabled 0021  
                                   ___awdiv 02B3                             __size_of___lmul 0030  
                                   ___awmod 043E                   __end_of_initializeDisplay 0259  
                    __size_ofi1_mssp_setIRQ 0003                           ??_do_I2C_TX_EMPTY 002B  
                          ?_i2c_driver_open 0070                         ??_mssp_waitForEvent 0021  
                          ?_i2c_driver_stop 0070                                     _endGame 0305  
                    i2c_writeNBytes@address 0035                             __size_of_random 001F  
               __end_ofi1_i2c_driver_isNACK 0EEA                     __end_ofi1_do_I2C_DO_ACK 0DB0  
                                   __ptext1 0111                                     __ptext2 077C  
                                   __ptext3 0508                                     __ptext4 05AF  
                                   __ptext5 043E                                     __ptext6 01FB  
                                   __ptext7 0305                                     __ptext8 0259  
                                   __ptext9 0660                         __end_of_do_I2C_IDLE 0E72  
                       __end_of_do_I2C_RCEN 0E86                                     _hiscore 0051  
                     _OSCILLATOR_Initialize 0E72                     ??i1_i2c_driver_sendNACK 0070  
               __end_of_do_I2C_SEND_RESTART 0E49                            ___awmod@dividend 0036  
                  ??_PIN_MANAGER_Initialize 0023                                   _IOCCFbits 0399  
                    i2c_masterOperation@ret 0031                     ??i1_i2c_driver_resetBus 0070  
                                   _reverse 0544                                   _IOCCNbits 0398  
                                 _IOCCPbits 0397                                     _topHalf 0059  
                        i1_do_I2C_SEND_STOP 0DA8                  _do_I2C_SEND_STOP$intlevel0 0E4D  
                __size_ofi1_do_I2C_TX_EMPTY 0029                    _do_I2C_SEND_RESTART_READ 0E31  
                __size_of_SYSTEM_Initialize 0006                                     clrloop0 0E10  
                 __end_of_mssp_IRQisEnabled 0E90                        __size_of_returnReset 0006  
                      end_of_initialization 0057                        __size_of_mssp_setIRQ 0003  
                 __end_of_mssp_waitForEvent 0EBB                   __size_of_i2c_restartWrite 0006  
                                   init_ram 0E15                         ?i1_do_I2C_SEND_STOP 0070  
                    ?_rd1RegCompleteHandler 002A                                     initloop 0E16  
                           _i2c_writeNBytes 0660                               ??_clearPixels 0021  
                          ?_i2c_masterWrite 0070                      ?_wr1RegCompleteHandler 002A  
                            ?i1_setCallBack 0070                                  _wallHeight 005A  
                                _shiftWalls 0111                            ?i1_i2c_setBuffer 0070  
                          ?_buttonInterrupt 0070                   _do_I2C_SEND_RESTART_WRITE 0E39  
                     i1_do_I2C_SEND_RESTART 0DA4            __end_ofi1_do_I2C_DO_ADDRESS_NACK 073C  
           __end_ofi1_do_I2C_SEND_ADR_WRITE 0E29                             _mssp_disableIRQ 0D7F  
                                 i1_i2c_ISR 075C                        ??i1_do_I2C_SEND_STOP 0070  
                                _returnStop 0DF1             __end_of_rdBlkRegCompleteHandler 07D7  
                  __end_of_do_I2C_SEND_STOP 0E51          __end_ofi1_do_I2C_SEND_RESTART_READ 0DA0  
                i1_do_I2C_SEND_RESTART_READ 0D9C                                   _SSPDATPPS 0E21  
                                 _SSPCLKPPS 0E20                            __CFG_FOSC$INTOSC 0000  
                      __size_ofi1_do_I2C_RX 003E                        __size_ofi1_do_I2C_TX 004A  
                   _IOCCF4_InterruptHandler 0065        __size_of_i2c_setDataCompleteCallback 000D  
                            _gravityCounter 005C                               i1_returnReset 0D62  
                               returnStop@p 002A                               i1_mssp_setIRQ 0D76  
        __size_ofi1_rdBlkRegCompleteHandler 0017                i2c_setDataCompleteCallback@p 0028  
                   i1_rd2RegCompleteHandler 0F5A                                  drawPixel@x 0029  
                                drawPixel@y 0021                     i1_wr2RegCompleteHandler 0F2A  
             __size_of_do_I2C_SEND_ADR_READ 000C                            ??i1_do_I2C_RESET 0070  
                              ??_i2c_poller 002F                                 _do_I2C_IDLE 0E69  
                               _do_I2C_RCEN 0E7C                  __end_ofi1_i2c_restartWrite 0004  
                       __end_of_clearPixels 0F7C                  __size_of_initializeDisplay 005E  
                            __end_of___lmul 05DF        __end_of_i2c_driver_clearBusCollision 0D67  
     __size_of_i2c_driver_clearBusCollision 0003                _i2c_driver_clearBusCollision 0D64  
                                ?i1_i2c_ISR 0070                            ?i1_do_I2C_DO_ACK 0070  
                    ?_OSCILLATOR_Initialize 0070               __size_ofi1_i2c_driver_sendACK 0004  
                            __end_of_random 079B                __size_of_do_I2C_DO_NACK_STOP 0008  
                  __end_of_i2c_driver_start 0D85               __size_ofi1_i2c_driver_restart 0003  
                   ?_do_I2C_DO_NACK_RESTART 0070                         start_initialization 0030  
                                 _i2c_close 07D7               __size_ofi1_i2c_driver_startRX 0003  
                       _i2c_busCollisionISR 0D67             __size_of_PIN_MANAGER_Initialize 0034  
                            ?i1_returnReset 0079                     __end_of_i2c_writeNBytes 0686  
       __end_ofi1_do_I2C_SEND_RESTART_WRITE 0DA4                 i1_do_I2C_SEND_RESTART_WRITE 0DA0  
                            ?i1_mssp_setIRQ 0070                  __size_of_mssp_IRQisEnabled 000A  
                              setCallBack@p 0023                          __end_of_i2c_poller 0EC6  
                       _i2c_driver_sendNACK 0DBC                             i2c_open@address 0024  
                   i2c_setBuffer@bufferSize 0021                  __size_of_mssp_waitForEvent 000B  
                    rd1RegCompleteHandler@p 002A                         _i2c_driver_resetBus 0D5F  
                           ??i1_setCallBack 0073                       __end_of_i2c_setBuffer 0F91  
                         __size_of_i2c_open 004E                    __size_of_PIN_MANAGER_IOC 0006  
     __end_ofi1_i2c_setDataCompleteCallback 0EDE      __size_ofi1_i2c_setDataCompleteCallback 000C  
             i1_i2c_setDataCompleteCallback 0ED2                                 ?_shiftWalls 0070  
                      ?_i2c_busCollisionISR 0070                     __end_of_mssp_disableIRQ 0D82  
                          i1setCallBack@idx 0074                            i1_do_I2C_TX$1026 007B  
                     __end_ofi1_do_I2C_IDLE 0DCE                                    ??___lmul 0029  
                     __end_ofi1_do_I2C_RCEN 0DDF                   i1i2c_setBuffer@bufferSize 0070  
                    ?i1_do_I2C_SEND_RESTART 0070                      wr1RegCompleteHandler@p 002A  
                      ?_i2c_driver_sendNACK 0070                               ?_do_I2C_RESET 0070  
                               __pdataBANK0 0060                                 __pdataBANK2 0120  
                 _do_I2C_TX_EMPTY$intlevel0 05E3                                    ??_random 003C  
                  __size_ofi1_mssp_clearIRQ 0003                                 ?_returnStop 002A  
                      ?_i2c_driver_resetBus 0070                           _i2c_driver_TXData 0DFD  
            __end_of_do_I2C_DO_NACK_RESTART 0E69               ?_i2c_driver_clearBusCollision 0070  
                         _i2c_driver_i2cISR 0055                    i1_do_I2C_DO_ADDRESS_NACK 0719  
                        ?_i2c_driver_TXData 0070                                  ?_i2c_close 0070  
                                 ___latbits 0002                               __pcstackBANK0 0020  
         __size_ofi1_do_I2C_DO_NACK_RESTART 0004                    i1rd2RegCompleteHandler@p 0079  
                                 _do_I2C_RX 0484                   ?i1_do_I2C_DO_NACK_RESTART 0070  
                                 _do_I2C_TX 0356                           _i2c_driver_isNACK 0F10  
                   ??i1_do_I2C_DO_NACK_STOP 0070                 ?_IOCCF4_SetInterruptHandler 0021  
                 ??i1_rd2RegCompleteHandler 007A               __size_of_i2c_driver_getRXData 0003  
                        ?_i2c_driver_isNACK 0070                         ??_i2c_driver_TXData 0021  
            __size_of_do_I2C_SEND_ADR_WRITE 000B                   ??i1_wr2RegCompleteHandler 007A  
             __end_of_do_I2C_SEND_ADR_WRITE 0EB0             ??_i2c_driver_setBusCollisionISR 0023  
                            i1setCallBack@p 0072                            _i2c_restartWrite 0DEB  
                _i2c_restartWrite$intlevel0 0DEF                                    ?_i2c_ISR 0070  
           _do_I2C_SEND_ADR_WRITE$intlevel0 0EA9            __size_ofi1_do_I2C_SEND_ADR_WRITE 0007  
                           _do_I2C_TX_EMPTY 05DF                               ??_setCallBack 0024  
                                 __pnvBANK0 0065                    i1wr2RegCompleteHandler@p 0079  
                     _rd2RegCompleteHandler 0FD3                                 _clearPixels 0F6A  
                       ??_i2c_driver_isNACK 0021                       ??_i2c_busCollisionISR 0070  
                    _PIN_MANAGER_Initialize 057B                       _wr2RegCompleteHandler 0F91  
               __size_of_i2c_driver_sendACK 0004                              ??_do_I2C_RESET 0021  
                                  ?___awdiv 0021                                   __ptext100 0FE9  
                                 __ptext101 0F5A                                   __ptext110 0D94  
                                 __ptext102 0F4A                                   __ptext111 0D67  
                                 __ptext103 0F3A                                   __ptext112 0D64  
                                 __ptext104 0F2A                                   __ptext113 0DD3  
                                 __ptext105 0ED2                                   __ptext114 0EF6  
                                 __ptext106 06F5                                   __ptext115 0D5D  
                                 __ptext107 07F2                                   __ptext116 0EC6  
                                 __ptext108 0D6D                       ??_i2c_driver_sendNACK 0021  
                                 __ptext109 0D6A                                    ?___awmod 0034  
               __end_of_i2c_masterOperation 06F5                    ??_do_I2C_DO_ADDRESS_NACK 002B  
             __size_of_i2c_driver_setI2cISR 0006                 __size_of_i2c_driver_restart 0003  
                 __end_of_i2c_driver_TXData 0E03                                    ?_endGame 0070  
                     __end_of_do_I2C_DO_ACK 0E59                       ??_i2c_driver_resetBus 0021  
               __size_of_i2c_driver_startRX 0003                                 ??i1_i2c_ISR 007D  
              ??_INTERRUPT_InterruptManager 0020                                   _drawPixel 005B  
                                 _drawWalls 079B                                   _elevation 005E  
                ??_do_I2C_SEND_RESTART_READ 0021                    ??i1_do_I2C_SEND_ADR_READ 0071  
                           ??i1_returnReset 007A                   __end_of_i2c_driver_isNACK 0F1D  
                  ?i1_rd1RegCompleteHandler 0079          __size_of_do_I2C_SEND_RESTART_WRITE 0008  
                           ??i1_mssp_setIRQ 0070              __size_ofi1_i2c_driver_sendNACK 0004  
             __end_ofi1_i2c_driver_sendNACK 0D9C                         __size_of_shiftWalls 0081  
                                  ?_reverse 0070                    ?i1_wr1RegCompleteHandler 0079  
                                ?_do_I2C_RX 0070                                  ?_do_I2C_TX 0070  
                             ?_writeDisplay 0070                            ?_i2c_writeNBytes 0032  
            __size_ofi1_i2c_driver_resetBus 0001               __end_ofi1_i2c_driver_resetBus 0D5F  
                   ??_rd1RegCompleteHandler 002B                           _i2c_ISR$intlevel0 068A  
          ??_IOCCF4_DefaultInterruptHandler 0070             ?_IOCCF4_DefaultInterruptHandler 0070  
                   ??_wr1RegCompleteHandler 002B                       i2c_driver_setI2cISR@f 0021  
                       __size_of_returnStop 0006                                   clear_ram0 0E0F  
                                  _PIE1bits 0090                                    _PIE2bits 0091  
       __size_of_INTERRUPT_InterruptManager 002A                                    _PIR1bits 0010  
                                  _PIR2bits 0011                            ?_mssp_disableIRQ 0070  
                      __CFG_WDTCPS$WDTCPS1F 0000                                    _SSP1CON1 0215  
                                  _SSP1CON2 0216                ?_i2c_setDataCompleteCallback 0026  
            ?i1_i2c_setDataCompleteCallback 0075                                    _SSP1STAT 0214  
                       __end_of_setCallBack 06D1                           ??_PIN_MANAGER_IOC 0071  
                                ?_drawPixel 0021                                  ?_drawWalls 0070  
              __size_ofi1_i2c_driver_TXData 0005                           i1_i2c_driver_stop 0D6D  
              i2c_setAddressNACKCallback@cb 0026                           ?_do_I2C_SEND_STOP 0070  
               ?i1_do_I2C_SEND_RESTART_READ 0070                          ?i1_i2c_driver_stop 0070  
                               ??_i2c_close 0021                               ??_returnReset 002B  
                        ??_do_I2C_SEND_STOP 0021                      __size_of_mssp_clearIRQ 0003  
                            ??_writeDisplay 0036                    __size_of_i2c_driver_open 000A  
                         ??i1_mssp_clearIRQ 0070                ??_i2c_setAddressNACKCallback 0029  
                  __size_of_i2c_driver_stop 0003           __end_of_do_I2C_SEND_RESTART_WRITE 0E41  
              __size_ofi1_i2c_driver_isNACK 000C                               ??_mssp_setIRQ 0021  
            ??_i2c_driver_clearBusCollision 0070                     __end_of_do_I2C_TX_EMPTY 060D  
                         ___lmul@multiplier 0021                    ?_rdBlkRegCompleteHandler 002A  
                       ??i1_i2c_driver_stop 0070                __size_of_do_I2C_SEND_RESTART 0008  
                   _do_I2C_DO_ACK$intlevel0 0E55                                    _i2c_open 03A6  
                             ?i1_returnStop 0079                      ?_rd2RegCompleteHandler 002A  
                       _do_I2C_DO_NACK_STOP 0E59                            __size_of_i2c_ISR 0026  
                    ?_wr2RegCompleteHandler 002A             _wr2RegCompleteHandler$intlevel0 0F95  
           _rd2RegCompleteHandler$intlevel0 0FD7       __end_of_i2c_driver_setBusCollisionISR 0E09  
    __size_of_i2c_driver_setBusCollisionISR 0006               _i2c_driver_setBusCollisionISR 0E03  
                       i2c_writeNBytes@data 0032                                ?_do_I2C_IDLE 0070  
                  ??i1_i2c_driver_getRXData 0070                                ?_do_I2C_RCEN 0070  
                   ??_OSCILLATOR_Initialize 0021                            __size_of___awdiv 0052  
                  __size_of_i2c_masterWrite 0004                            __size_of___awmod 0046  
                __size_of_i2c_driver_TXData 0006             __size_of_do_I2C_DO_ADDRESS_NACK 002A  
                 __end_ofi1_i2c_driver_stop 0D70                       i1i2c_setBuffer@buffer 0073  
             ??_i2c_setDataCompleteCallback 0029             __end_ofi1_rd1RegCompleteHandler 0F5A  
                  __size_ofi1_i2c_setBuffer 000E                               ??i1_do_I2C_RX 007A  
                             ??i1_do_I2C_TX 007A          _do_I2C_SEND_RESTART_READ$intlevel0 0E35  
               __size_ofi1_do_I2C_SEND_STOP 0004                            __size_of_endGame 0051  
                  __size_of_buttonInterrupt 000C             __end_ofi1_wr1RegCompleteHandler 0F4A  
                      ?_do_I2C_DO_NACK_STOP 0070                __end_of_do_I2C_SEND_ADR_READ 0EF6  
           __size_ofi1_do_I2C_SEND_ADR_READ 0008                  __size_of_i2c_driver_isNACK 000D  
                         ?_i2c_driver_start 0070                          i1_i2c_restartWrite 0002  
                               ??_do_I2C_RX 002B                                 ??_do_I2C_TX 002B  
                        ??_i2c_driver_start 0021                                    __ptext10 0F1D  
                                  __ptext11 03A6                                    __ptext20 0686  
                                  __ptext12 0E09                                    __ptext21 0484  
                                  __ptext13 0E03                                    __ptext30 0E49  
                                  __ptext22 0356                                    __ptext14 0E90  
                                  __ptext31 0E41                                    __ptext23 060D  
                                  __ptext15 0DC0                                    __ptext40 0D8E  
                                  __ptext32 0E39                                    __ptext24 0E61  
                                  __ptext16 06D1                                    __ptext41 0DBC  
                                  __ptext33 0E31                                    __ptext25 0E59  
                                  __ptext17 0E86                                    __ptext50 0DEB  
                                  __ptext42 0D5F                                    __ptext34 0E69  
                                  __ptext26 0E51                                    __ptext18 0EBB  
                                  __ptext51 0F91                                    __ptext43 0D8B  
                                  __ptext35 0E9A                                    __ptext27 0E7C  
                                  __ptext19 0EB0                                    __ptext60 0D7F  
                                  __ptext52 0F03                                    __ptext44 0DF7  
                                  __ptext36 05DF                                    __ptext28 0EA5  
                                  __ptext61 0D7C                                    __ptext53 06AC  
                                  __ptext45 0DF1                                    __ptext37 0D91  
                                  __ptext29 0EEA                                    __ptext70 0E72  
                                  __ptext62 02B3                                    __ptext54 0F7C  
                                  __ptext46 07BA                                    __ptext38 0F10  
                                  __ptext63 0F6A                                    __ptext55 0D88  
                                  __ptext47 0FD3                                    __ptext39 0DFD  
                                  __ptext80 0DD9                                    __ptext72 075C  
                                  __ptext64 079B                                    __ptext56 0D85  
                                  __ptext48 0FBD                                    __ptext81 0E22  
                                  __ptext73 0D79                                    __ptext65 0544  
                                  __ptext57 0DB8                                    __ptext49 0FA7  
                                  __ptext90 0D76                                    __ptext82 0E29  
                                  __ptext74 04CA                                    __ptext66 005B  
                                  __ptext58 0D82                                    __ptext91 0EDE  
                                  __ptext83 0DA8                                    __ptext75 03F4  
                                  __ptext67 0DE5                                    __ptext59 07D7  
                                  __ptext92 0DC4                                    __ptext84 0DA4  
                                  __ptext76 0719                                    __ptext68 057B  
                                  __ptext93 0D73                                    __ptext85 0DA0  
                                  __ptext77 0DB4                                    __ptext69 0DDF  
                                  __ptext94 0D98                                    __ptext86 0D9C  
                                  __ptext78 0DB0                                    __ptext95 0D5E  
                                  __ptext87 0DC9                                    __ptext79 0DAC  
                                  __ptext96 0D70                                    __ptext88 0E1B  
                                  __ptext97 0002                                    __ptext89 0637  
                                  __ptext98 0D62                                    __ptext99 0D60  
                              _SSP1CON1bits 0215                            __size_of_reverse 0037  
                              _SSP1CON2bits 0216                                _shiftCounter 004F  
                      __end_of_do_I2C_RESET 0EA5                                  _IOCCF4_ISR 0EF6  
                            ??i1_returnStop 007A                     i1_do_I2C_SEND_ADR_WRITE 0E22  
                       ?i1_i2c_restartWrite 0079                __end_ofi1_i2c_driver_sendACK 0D98  
                       __end_of_returnReset 0DFD                               __size_of_main 0069  
                             __size_of_rand 003C                         __end_of_mssp_setIRQ 0D94  
              __end_ofi1_i2c_driver_restart 0D6D                        i1i2c_driver_TXData@d 0070  
              __end_ofi1_i2c_driver_startRX 0D73                        __CFG_WDTCWS$WDTCWSSW 0000  
                               _setCallBack 06AC                                ??_shiftWalls 003F  
                   ??i1_do_I2C_SEND_RESTART 0070                               _mssp_clearIRQ 0D7C  
                   i2c_masterOperation@read 0030        __size_ofi1_do_I2C_SEND_RESTART_WRITE 0004  
                                  int$flags 007E                  ??i1_do_I2C_DO_ADDRESS_NACK 007A  
          __end_ofi1_do_I2C_DO_NACK_RESTART 0DB8          __end_of_INTERRUPT_InterruptManager 002E  
                _INTERRUPT_InterruptManager 0004                                _SSP1STATbits 0214  
                      ??i1_i2c_restartWrite 007A            __end_of_do_I2C_SEND_RESTART_READ 0E39  
                               ??_drawPixel 0023                                 ??_drawWalls 0025  
                              ??_returnStop 002B                    __end_of_i2c_restartWrite 0DF1  
                     ??_do_I2C_DO_NACK_STOP 0021                    mssp_waitForEvent@timeout 0021  
            i2c_driver_setBusCollisionISR@f 0021                                  _INTCONbits 000B  
                        i2c_writeNBytes@len 0033                         __end_ofi1_do_I2C_RX 0508  
                       __end_ofi1_do_I2C_TX 043E                          __end_of_shiftWalls 0192  
                  __size_ofi1_do_I2C_DO_ACK 0004                            ?_do_I2C_TX_EMPTY 0070  
                    _do_I2C_DO_ADDRESS_NACK 060D              __size_ofi1_do_I2C_DO_NACK_STOP 0004  
                                  intlevel1 0000               __end_ofi1_do_I2C_DO_NACK_STOP 0DB4  
                    _do_I2C_RESET$intlevel0 0E9E                      rd2RegCompleteHandler@p 002A  
                         ??_i2c_driver_open 0021                           ??_i2c_driver_stop 0021  
                   ?_PIN_MANAGER_Initialize 0070                           i2c_restartWrite@p 002A  
                    i1_do_I2C_SEND_ADR_READ 0E29                           __CFG_CLKOUTEN$OFF 0000  
                ?i1_rdBlkRegCompleteHandler 0079                                ?_clearPixels 0070  
                        __end_of_returnStop 0DF7                              ?_mssp_clearIRQ 0070  
                     __end_ofi1_setCallBack 0719         __size_ofi1_do_I2C_SEND_RESTART_READ 0004  
                                  reverse@b 0024                        __end_of_writeDisplay 02B3  
              __end_of_i2c_driver_getRXData 0D91             __size_ofi1_i2c_driver_getRXData 0003  
                    wr2RegCompleteHandler@p 002A                  __size_ofi1_i2c_driver_stop 0003  
                               _pixelbuffer 00BD                     __size_ofi1_do_I2C_RESET 0007  
                         ??_i2c_masterWrite 0032          __end_of_i2c_setAddressNACKCallback 0F2A  
                _i2c_setAddressNACKCallback 0F1D                      __size_of_i2c_setBuffer 0015  
                         ??i1_i2c_setBuffer 0072                                 _returnReset 0DF7  
          _do_I2C_DO_NACK_RESTART$intlevel0 0E65                           ??_buttonInterrupt 0070  
                               _mssp_setIRQ 0D91                   ??i1_do_I2C_SEND_ADR_WRITE 0071  
              __end_of_i2c_driver_setI2cISR 0E0F                      __size_ofi1_do_I2C_IDLE 0005  
                    __size_ofi1_do_I2C_RCEN 0006                                 ?_IOCCF4_ISR 0070  
            __end_of_PIN_MANAGER_Initialize 05AF                 __end_of_i2c_busCollisionISR 0D6A  
            __size_of_rd1RegCompleteHandler 0016               __end_of_rd1RegCompleteHandler 0FD3  
                       i1_i2c_driver_TXData 0DC4                             _PIN_MANAGER_IOC 0DD3  
            __size_of_wr1RegCompleteHandler 0016            __size_ofi1_rd1RegCompleteHandler 0010  
             __end_of_wr1RegCompleteHandler 0FBD                       _do_I2C_SEND_ADR_WRITE 0EA5  
               __end_of_i2c_driver_sendNACK 0DC0                        _do_I2C_SEND_ADR_READ 0EEA  
         __end_ofi1_rdBlkRegCompleteHandler 1000            __size_ofi1_wr1RegCompleteHandler 0010  
                __end_of_i2c_driver_sendACK 0DBC                 __end_of_i2c_driver_resetBus 0D60  
