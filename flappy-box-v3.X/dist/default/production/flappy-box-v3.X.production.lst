

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Apr 16 11:53:57 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F1619
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	idataBANK3,global,class=CODE,delta=2
     7                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	clrtext,global,class=CODE,delta=2
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    24                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    25                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,inline,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,inline,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,inline,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,inline,delta=2
    60                           	psect	text40,local,class=CODE,merge=1,inline,delta=2
    61                           	psect	text41,local,class=CODE,merge=1,inline,delta=2
    62                           	psect	text42,local,class=CODE,merge=1,inline,delta=2
    63                           	psect	text43,local,class=CODE,merge=1,inline,delta=2
    64                           	psect	text44,local,class=CODE,merge=1,inline,delta=2
    65                           	psect	text45,local,class=CODE,merge=1,inline,delta=2
    66                           	psect	text46,local,class=CODE,merge=1,delta=2
    67                           	psect	text47,local,class=CODE,merge=1,delta=2
    68                           	psect	text48,local,class=CODE,merge=1,delta=2
    69                           	psect	text49,local,class=CODE,merge=1,delta=2
    70                           	psect	text50,local,class=CODE,merge=1,delta=2
    71                           	psect	text51,local,class=CODE,merge=1,delta=2
    72                           	psect	text52,local,class=CODE,merge=1,delta=2
    73                           	psect	text53,local,class=CODE,merge=1,delta=2
    74                           	psect	text54,local,class=CODE,merge=1,delta=2
    75                           	psect	text55,local,class=CODE,merge=1,delta=2
    76                           	psect	text56,local,class=CODE,merge=1,delta=2
    77                           	psect	text57,local,class=CODE,merge=1,inline,delta=2
    78                           	psect	text58,local,class=CODE,merge=1,inline,delta=2
    79                           	psect	text59,local,class=CODE,merge=1,inline,delta=2
    80                           	psect	text60,local,class=CODE,merge=1,inline,delta=2
    81                           	psect	text61,local,class=CODE,merge=1,delta=2
    82                           	psect	text62,local,class=CODE,merge=1,inline,delta=2
    83                           	psect	text63,local,class=CODE,merge=1,inline,delta=2
    84                           	psect	text64,local,class=CODE,merge=1,delta=2,group=1
    85                           	psect	text65,local,class=CODE,merge=1,delta=2
    86                           	psect	text66,local,class=CODE,merge=1,delta=2
    87                           	psect	text67,local,class=CODE,merge=1,delta=2
    88                           	psect	text68,local,class=CODE,merge=1,delta=2
    89                           	psect	text69,local,class=CODE,merge=1,delta=2
    90                           	psect	text70,local,class=CODE,merge=1,delta=2
    91                           	psect	text71,local,class=CODE,merge=1,delta=2
    92                           	psect	text72,local,class=CODE,merge=1,delta=2
    93                           	psect	intentry,global,class=CODE,delta=2
    94                           	psect	text74,local,class=CODE,merge=1,delta=2
    95                           	psect	text75,local,class=CODE,merge=1,inline,delta=2
    96                           	psect	text76,local,class=CODE,merge=1,delta=2
    97                           	psect	text77,local,class=CODE,merge=1,delta=2
    98                           	psect	text78,local,class=CODE,merge=1,delta=2
    99                           	psect	text79,local,class=CODE,merge=1,delta=2
   100                           	psect	text80,local,class=CODE,merge=1,delta=2
   101                           	psect	text81,local,class=CODE,merge=1,delta=2
   102                           	psect	text82,local,class=CODE,merge=1,delta=2
   103                           	psect	text83,local,class=CODE,merge=1,delta=2
   104                           	psect	text84,local,class=CODE,merge=1,delta=2
   105                           	psect	text85,local,class=CODE,merge=1,delta=2
   106                           	psect	text86,local,class=CODE,merge=1,delta=2
   107                           	psect	text87,local,class=CODE,merge=1,delta=2
   108                           	psect	text88,local,class=CODE,merge=1,delta=2
   109                           	psect	text89,local,class=CODE,merge=1,delta=2
   110                           	psect	text90,local,class=CODE,merge=1,delta=2
   111                           	psect	text91,local,class=CODE,merge=1,delta=2
   112                           	psect	text92,local,class=CODE,merge=1,inline,delta=2
   113                           	psect	text93,local,class=CODE,merge=1,inline,delta=2
   114                           	psect	text94,local,class=CODE,merge=1,inline,delta=2
   115                           	psect	text95,local,class=CODE,merge=1,inline,delta=2
   116                           	psect	text96,local,class=CODE,merge=1,inline,delta=2
   117                           	psect	text97,local,class=CODE,merge=1,inline,delta=2
   118                           	psect	text98,local,class=CODE,merge=1,inline,delta=2
   119                           	psect	text99,local,class=CODE,merge=1,delta=2
   120                           	psect	text100,local,class=CODE,merge=1,delta=2
   121                           	psect	text101,local,class=CODE,merge=1,delta=2
   122                           	psect	text102,local,class=CODE,merge=1,delta=2
   123                           	psect	text103,local,class=CODE,merge=1,delta=2
   124                           	psect	text104,local,class=CODE,merge=1,delta=2
   125                           	psect	text105,local,class=CODE,merge=1,delta=2
   126                           	psect	text106,local,class=CODE,merge=1,delta=2
   127                           	psect	text107,local,class=CODE,merge=1,delta=2
   128                           	psect	text108,local,class=CODE,merge=1,delta=2
   129                           	psect	text109,local,class=CODE,merge=1,delta=2
   130                           	psect	text110,local,class=CODE,merge=1,inline,delta=2
   131                           	psect	text111,local,class=CODE,merge=1,inline,delta=2
   132                           	psect	text112,local,class=CODE,merge=1,inline,delta=2
   133                           	psect	text113,local,class=CODE,merge=1,delta=2
   134                           	psect	text114,local,class=CODE,merge=1,inline,delta=2
   135                           	psect	text115,local,class=CODE,merge=1,delta=2
   136                           	psect	text116,local,class=CODE,merge=1,delta=2
   137                           	psect	text117,local,class=CODE,merge=1,delta=2
   138                           	psect	text118,local,class=CODE,merge=1,delta=2
   139                           	dabs	1,0x7E,2
   140  0000                     
   141                           ; Version 1.45
   142                           ; Generated 16/11/2017 GMT
   143                           ; 
   144                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   145                           ; All rights reserved.
   146                           ; 
   147                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   148                           ; 
   149                           ; Redistribution and use in source and binary forms, with or without modification, are
   150                           ; permitted provided that the following conditions are met:
   151                           ; 
   152                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   153                           ;        conditions and the following disclaimer.
   154                           ; 
   155                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   156                           ;        of conditions and the following disclaimer in the documentation and/or other
   157                           ;        materials provided with the distribution.
   158                           ; 
   159                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   160                           ;        software without specific prior written permission.
   161                           ; 
   162                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   163                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   164                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   165                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   166                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   167                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   168                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   169                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   170                           ; 
   171                           ; 
   172                           ; Code-generator required, PIC16F1619 Definitions
   173                           ; 
   174                           ; SFR Addresses
   175  0000                     	;# 
   176  0001                     	;# 
   177  0002                     	;# 
   178  0003                     	;# 
   179  0004                     	;# 
   180  0005                     	;# 
   181  0006                     	;# 
   182  0007                     	;# 
   183  0008                     	;# 
   184  0009                     	;# 
   185  000A                     	;# 
   186  000B                     	;# 
   187  000C                     	;# 
   188  000D                     	;# 
   189  000E                     	;# 
   190  0010                     	;# 
   191  0011                     	;# 
   192  0012                     	;# 
   193  0013                     	;# 
   194  0014                     	;# 
   195  0015                     	;# 
   196  0016                     	;# 
   197  0016                     	;# 
   198  0017                     	;# 
   199  0018                     	;# 
   200  0019                     	;# 
   201  001A                     	;# 
   202  001A                     	;# 
   203  001B                     	;# 
   204  001B                     	;# 
   205  001C                     	;# 
   206  001D                     	;# 
   207  001E                     	;# 
   208  001F                     	;# 
   209  008C                     	;# 
   210  008D                     	;# 
   211  008E                     	;# 
   212  0090                     	;# 
   213  0091                     	;# 
   214  0092                     	;# 
   215  0093                     	;# 
   216  0094                     	;# 
   217  0095                     	;# 
   218  0096                     	;# 
   219  0098                     	;# 
   220  0099                     	;# 
   221  009A                     	;# 
   222  009B                     	;# 
   223  009B                     	;# 
   224  009C                     	;# 
   225  009D                     	;# 
   226  009E                     	;# 
   227  009F                     	;# 
   228  010C                     	;# 
   229  010D                     	;# 
   230  010E                     	;# 
   231  0111                     	;# 
   232  0112                     	;# 
   233  0113                     	;# 
   234  0114                     	;# 
   235  0115                     	;# 
   236  0116                     	;# 
   237  0117                     	;# 
   238  0118                     	;# 
   239  0119                     	;# 
   240  011C                     	;# 
   241  018C                     	;# 
   242  018D                     	;# 
   243  018E                     	;# 
   244  0191                     	;# 
   245  0191                     	;# 
   246  0192                     	;# 
   247  0193                     	;# 
   248  0193                     	;# 
   249  0194                     	;# 
   250  0195                     	;# 
   251  0196                     	;# 
   252  0197                     	;# 
   253  0199                     	;# 
   254  0199                     	;# 
   255  0199                     	;# 
   256  019A                     	;# 
   257  019A                     	;# 
   258  019A                     	;# 
   259  019B                     	;# 
   260  019B                     	;# 
   261  019B                     	;# 
   262  019B                     	;# 
   263  019B                     	;# 
   264  019C                     	;# 
   265  019C                     	;# 
   266  019C                     	;# 
   267  019D                     	;# 
   268  019D                     	;# 
   269  019D                     	;# 
   270  019E                     	;# 
   271  019E                     	;# 
   272  019E                     	;# 
   273  019F                     	;# 
   274  019F                     	;# 
   275  019F                     	;# 
   276  019F                     	;# 
   277  019F                     	;# 
   278  020C                     	;# 
   279  020D                     	;# 
   280  020E                     	;# 
   281  0211                     	;# 
   282  0211                     	;# 
   283  0212                     	;# 
   284  0212                     	;# 
   285  0213                     	;# 
   286  0213                     	;# 
   287  0214                     	;# 
   288  0214                     	;# 
   289  0215                     	;# 
   290  0215                     	;# 
   291  0215                     	;# 
   292  0215                     	;# 
   293  0216                     	;# 
   294  0216                     	;# 
   295  0217                     	;# 
   296  0217                     	;# 
   297  028C                     	;# 
   298  028D                     	;# 
   299  028E                     	;# 
   300  0291                     	;# 
   301  0291                     	;# 
   302  0292                     	;# 
   303  0293                     	;# 
   304  0294                     	;# 
   305  0298                     	;# 
   306  0298                     	;# 
   307  0299                     	;# 
   308  029A                     	;# 
   309  029B                     	;# 
   310  029E                     	;# 
   311  030C                     	;# 
   312  030D                     	;# 
   313  030E                     	;# 
   314  038C                     	;# 
   315  038D                     	;# 
   316  038E                     	;# 
   317  0391                     	;# 
   318  0392                     	;# 
   319  0393                     	;# 
   320  0394                     	;# 
   321  0395                     	;# 
   322  0396                     	;# 
   323  0397                     	;# 
   324  0398                     	;# 
   325  0399                     	;# 
   326  040E                     	;# 
   327  0413                     	;# 
   328  0413                     	;# 
   329  0414                     	;# 
   330  0414                     	;# 
   331  0415                     	;# 
   332  0416                     	;# 
   333  0417                     	;# 
   334  0418                     	;# 
   335  041A                     	;# 
   336  041A                     	;# 
   337  041B                     	;# 
   338  041B                     	;# 
   339  041C                     	;# 
   340  041D                     	;# 
   341  041E                     	;# 
   342  041F                     	;# 
   343  0493                     	;# 
   344  0494                     	;# 
   345  0495                     	;# 
   346  0496                     	;# 
   347  049A                     	;# 
   348  049B                     	;# 
   349  049C                     	;# 
   350  049D                     	;# 
   351  058C                     	;# 
   352  058C                     	;# 
   353  058D                     	;# 
   354  058E                     	;# 
   355  058E                     	;# 
   356  058F                     	;# 
   357  0590                     	;# 
   358  0590                     	;# 
   359  0591                     	;# 
   360  0592                     	;# 
   361  0592                     	;# 
   362  0593                     	;# 
   363  0594                     	;# 
   364  0594                     	;# 
   365  0595                     	;# 
   366  0596                     	;# 
   367  0596                     	;# 
   368  0597                     	;# 
   369  0598                     	;# 
   370  0599                     	;# 
   371  059A                     	;# 
   372  059B                     	;# 
   373  059B                     	;# 
   374  059C                     	;# 
   375  059D                     	;# 
   376  060C                     	;# 
   377  060C                     	;# 
   378  060D                     	;# 
   379  060E                     	;# 
   380  060F                     	;# 
   381  060F                     	;# 
   382  0610                     	;# 
   383  0611                     	;# 
   384  0612                     	;# 
   385  0613                     	;# 
   386  0614                     	;# 
   387  0617                     	;# 
   388  0618                     	;# 
   389  0619                     	;# 
   390  061A                     	;# 
   391  061B                     	;# 
   392  061C                     	;# 
   393  0691                     	;# 
   394  0692                     	;# 
   395  0693                     	;# 
   396  0694                     	;# 
   397  0695                     	;# 
   398  0696                     	;# 
   399  0697                     	;# 
   400  0699                     	;# 
   401  069A                     	;# 
   402  0711                     	;# 
   403  0712                     	;# 
   404  0713                     	;# 
   405  0714                     	;# 
   406  0715                     	;# 
   407  0718                     	;# 
   408  0718                     	;# 
   409  0719                     	;# 
   410  071A                     	;# 
   411  071A                     	;# 
   412  071B                     	;# 
   413  071C                     	;# 
   414  071D                     	;# 
   415  0791                     	;# 
   416  0791                     	;# 
   417  0792                     	;# 
   418  0793                     	;# 
   419  0793                     	;# 
   420  0794                     	;# 
   421  0795                     	;# 
   422  0795                     	;# 
   423  0796                     	;# 
   424  0797                     	;# 
   425  0797                     	;# 
   426  0798                     	;# 
   427  0799                     	;# 
   428  079A                     	;# 
   429  080C                     	;# 
   430  080C                     	;# 
   431  080D                     	;# 
   432  080E                     	;# 
   433  080E                     	;# 
   434  080F                     	;# 
   435  0810                     	;# 
   436  0810                     	;# 
   437  0811                     	;# 
   438  0812                     	;# 
   439  0812                     	;# 
   440  0813                     	;# 
   441  0814                     	;# 
   442  0815                     	;# 
   443  0816                     	;# 
   444  0817                     	;# 
   445  0818                     	;# 
   446  0819                     	;# 
   447  081A                     	;# 
   448  081A                     	;# 
   449  081B                     	;# 
   450  081C                     	;# 
   451  081C                     	;# 
   452  081D                     	;# 
   453  088C                     	;# 
   454  088D                     	;# 
   455  088E                     	;# 
   456  088F                     	;# 
   457  088F                     	;# 
   458  0890                     	;# 
   459  0891                     	;# 
   460  0892                     	;# 
   461  0893                     	;# 
   462  0893                     	;# 
   463  0894                     	;# 
   464  0895                     	;# 
   465  0896                     	;# 
   466  0897                     	;# 
   467  0897                     	;# 
   468  0898                     	;# 
   469  0899                     	;# 
   470  0D8C                     	;# 
   471  0D8C                     	;# 
   472  0D8D                     	;# 
   473  0D8E                     	;# 
   474  0D8F                     	;# 
   475  0D8F                     	;# 
   476  0D90                     	;# 
   477  0D91                     	;# 
   478  0D92                     	;# 
   479  0D92                     	;# 
   480  0D93                     	;# 
   481  0D94                     	;# 
   482  0D95                     	;# 
   483  0D95                     	;# 
   484  0D96                     	;# 
   485  0D97                     	;# 
   486  0D98                     	;# 
   487  0D99                     	;# 
   488  0D9A                     	;# 
   489  0D9B                     	;# 
   490  0D9C                     	;# 
   491  0D9D                     	;# 
   492  0D9E                     	;# 
   493  0D9E                     	;# 
   494  0D9F                     	;# 
   495  0DA0                     	;# 
   496  0DA1                     	;# 
   497  0DA1                     	;# 
   498  0DA2                     	;# 
   499  0DA3                     	;# 
   500  0DA4                     	;# 
   501  0DA4                     	;# 
   502  0DA5                     	;# 
   503  0DA6                     	;# 
   504  0DA7                     	;# 
   505  0DA7                     	;# 
   506  0DA8                     	;# 
   507  0DA9                     	;# 
   508  0DAA                     	;# 
   509  0DAB                     	;# 
   510  0DAC                     	;# 
   511  0DAD                     	;# 
   512  0DAE                     	;# 
   513  0DAF                     	;# 
   514  0E0F                     	;# 
   515  0E10                     	;# 
   516  0E11                     	;# 
   517  0E12                     	;# 
   518  0E13                     	;# 
   519  0E14                     	;# 
   520  0E15                     	;# 
   521  0E16                     	;# 
   522  0E17                     	;# 
   523  0E18                     	;# 
   524  0E19                     	;# 
   525  0E1A                     	;# 
   526  0E1B                     	;# 
   527  0E1C                     	;# 
   528  0E1D                     	;# 
   529  0E1E                     	;# 
   530  0E1F                     	;# 
   531  0E20                     	;# 
   532  0E21                     	;# 
   533  0E22                     	;# 
   534  0E23                     	;# 
   535  0E24                     	;# 
   536  0E25                     	;# 
   537  0E26                     	;# 
   538  0E27                     	;# 
   539  0E28                     	;# 
   540  0E29                     	;# 
   541  0E2A                     	;# 
   542  0E2B                     	;# 
   543  0E2C                     	;# 
   544  0E2D                     	;# 
   545  0E2E                     	;# 
   546  0E90                     	;# 
   547  0E91                     	;# 
   548  0E92                     	;# 
   549  0E94                     	;# 
   550  0E95                     	;# 
   551  0E9C                     	;# 
   552  0E9D                     	;# 
   553  0E9E                     	;# 
   554  0E9F                     	;# 
   555  0EA0                     	;# 
   556  0EA1                     	;# 
   557  0EA2                     	;# 
   558  0EA3                     	;# 
   559  0EA4                     	;# 
   560  0EA5                     	;# 
   561  0EA6                     	;# 
   562  0EA7                     	;# 
   563  0F0F                     	;# 
   564  0F10                     	;# 
   565  0F11                     	;# 
   566  0F12                     	;# 
   567  0F13                     	;# 
   568  0F14                     	;# 
   569  0F15                     	;# 
   570  0F16                     	;# 
   571  0F17                     	;# 
   572  0F18                     	;# 
   573  0F19                     	;# 
   574  0F1A                     	;# 
   575  0F1B                     	;# 
   576  0F1C                     	;# 
   577  0F1D                     	;# 
   578  0F1E                     	;# 
   579  0F1F                     	;# 
   580  0F20                     	;# 
   581  0F21                     	;# 
   582  0F22                     	;# 
   583  0F23                     	;# 
   584  0F24                     	;# 
   585  0F25                     	;# 
   586  0F26                     	;# 
   587  0F27                     	;# 
   588  0F28                     	;# 
   589  0F29                     	;# 
   590  0F2A                     	;# 
   591  0F2B                     	;# 
   592  0F2C                     	;# 
   593  0F2D                     	;# 
   594  0F2E                     	;# 
   595  0F2F                     	;# 
   596  0F30                     	;# 
   597  0F31                     	;# 
   598  0F32                     	;# 
   599  0F33                     	;# 
   600  0F34                     	;# 
   601  0F35                     	;# 
   602  0F36                     	;# 
   603  0F37                     	;# 
   604  0FE4                     	;# 
   605  0FE5                     	;# 
   606  0FE6                     	;# 
   607  0FE7                     	;# 
   608  0FE8                     	;# 
   609  0FE9                     	;# 
   610  0FEA                     	;# 
   611  0FEB                     	;# 
   612  0FED                     	;# 
   613  0FEE                     	;# 
   614  0FEF                     	;# 
   615  0000                     	;# 
   616  0001                     	;# 
   617  0002                     	;# 
   618  0003                     	;# 
   619  0004                     	;# 
   620  0005                     	;# 
   621  0006                     	;# 
   622  0007                     	;# 
   623  0008                     	;# 
   624  0009                     	;# 
   625  000A                     	;# 
   626  000B                     	;# 
   627  000C                     	;# 
   628  000D                     	;# 
   629  000E                     	;# 
   630  0010                     	;# 
   631  0011                     	;# 
   632  0012                     	;# 
   633  0013                     	;# 
   634  0014                     	;# 
   635  0015                     	;# 
   636  0016                     	;# 
   637  0016                     	;# 
   638  0017                     	;# 
   639  0018                     	;# 
   640  0019                     	;# 
   641  001A                     	;# 
   642  001A                     	;# 
   643  001B                     	;# 
   644  001B                     	;# 
   645  001C                     	;# 
   646  001D                     	;# 
   647  001E                     	;# 
   648  001F                     	;# 
   649  008C                     	;# 
   650  008D                     	;# 
   651  008E                     	;# 
   652  0090                     	;# 
   653  0091                     	;# 
   654  0092                     	;# 
   655  0093                     	;# 
   656  0094                     	;# 
   657  0095                     	;# 
   658  0096                     	;# 
   659  0098                     	;# 
   660  0099                     	;# 
   661  009A                     	;# 
   662  009B                     	;# 
   663  009B                     	;# 
   664  009C                     	;# 
   665  009D                     	;# 
   666  009E                     	;# 
   667  009F                     	;# 
   668  010C                     	;# 
   669  010D                     	;# 
   670  010E                     	;# 
   671  0111                     	;# 
   672  0112                     	;# 
   673  0113                     	;# 
   674  0114                     	;# 
   675  0115                     	;# 
   676  0116                     	;# 
   677  0117                     	;# 
   678  0118                     	;# 
   679  0119                     	;# 
   680  011C                     	;# 
   681  018C                     	;# 
   682  018D                     	;# 
   683  018E                     	;# 
   684  0191                     	;# 
   685  0191                     	;# 
   686  0192                     	;# 
   687  0193                     	;# 
   688  0193                     	;# 
   689  0194                     	;# 
   690  0195                     	;# 
   691  0196                     	;# 
   692  0197                     	;# 
   693  0199                     	;# 
   694  0199                     	;# 
   695  0199                     	;# 
   696  019A                     	;# 
   697  019A                     	;# 
   698  019A                     	;# 
   699  019B                     	;# 
   700  019B                     	;# 
   701  019B                     	;# 
   702  019B                     	;# 
   703  019B                     	;# 
   704  019C                     	;# 
   705  019C                     	;# 
   706  019C                     	;# 
   707  019D                     	;# 
   708  019D                     	;# 
   709  019D                     	;# 
   710  019E                     	;# 
   711  019E                     	;# 
   712  019E                     	;# 
   713  019F                     	;# 
   714  019F                     	;# 
   715  019F                     	;# 
   716  019F                     	;# 
   717  019F                     	;# 
   718  020C                     	;# 
   719  020D                     	;# 
   720  020E                     	;# 
   721  0211                     	;# 
   722  0211                     	;# 
   723  0212                     	;# 
   724  0212                     	;# 
   725  0213                     	;# 
   726  0213                     	;# 
   727  0214                     	;# 
   728  0214                     	;# 
   729  0215                     	;# 
   730  0215                     	;# 
   731  0215                     	;# 
   732  0215                     	;# 
   733  0216                     	;# 
   734  0216                     	;# 
   735  0217                     	;# 
   736  0217                     	;# 
   737  028C                     	;# 
   738  028D                     	;# 
   739  028E                     	;# 
   740  0291                     	;# 
   741  0291                     	;# 
   742  0292                     	;# 
   743  0293                     	;# 
   744  0294                     	;# 
   745  0298                     	;# 
   746  0298                     	;# 
   747  0299                     	;# 
   748  029A                     	;# 
   749  029B                     	;# 
   750  029E                     	;# 
   751  030C                     	;# 
   752  030D                     	;# 
   753  030E                     	;# 
   754  038C                     	;# 
   755  038D                     	;# 
   756  038E                     	;# 
   757  0391                     	;# 
   758  0392                     	;# 
   759  0393                     	;# 
   760  0394                     	;# 
   761  0395                     	;# 
   762  0396                     	;# 
   763  0397                     	;# 
   764  0398                     	;# 
   765  0399                     	;# 
   766  040E                     	;# 
   767  0413                     	;# 
   768  0413                     	;# 
   769  0414                     	;# 
   770  0414                     	;# 
   771  0415                     	;# 
   772  0416                     	;# 
   773  0417                     	;# 
   774  0418                     	;# 
   775  041A                     	;# 
   776  041A                     	;# 
   777  041B                     	;# 
   778  041B                     	;# 
   779  041C                     	;# 
   780  041D                     	;# 
   781  041E                     	;# 
   782  041F                     	;# 
   783  0493                     	;# 
   784  0494                     	;# 
   785  0495                     	;# 
   786  0496                     	;# 
   787  049A                     	;# 
   788  049B                     	;# 
   789  049C                     	;# 
   790  049D                     	;# 
   791  058C                     	;# 
   792  058C                     	;# 
   793  058D                     	;# 
   794  058E                     	;# 
   795  058E                     	;# 
   796  058F                     	;# 
   797  0590                     	;# 
   798  0590                     	;# 
   799  0591                     	;# 
   800  0592                     	;# 
   801  0592                     	;# 
   802  0593                     	;# 
   803  0594                     	;# 
   804  0594                     	;# 
   805  0595                     	;# 
   806  0596                     	;# 
   807  0596                     	;# 
   808  0597                     	;# 
   809  0598                     	;# 
   810  0599                     	;# 
   811  059A                     	;# 
   812  059B                     	;# 
   813  059B                     	;# 
   814  059C                     	;# 
   815  059D                     	;# 
   816  060C                     	;# 
   817  060C                     	;# 
   818  060D                     	;# 
   819  060E                     	;# 
   820  060F                     	;# 
   821  060F                     	;# 
   822  0610                     	;# 
   823  0611                     	;# 
   824  0612                     	;# 
   825  0613                     	;# 
   826  0614                     	;# 
   827  0617                     	;# 
   828  0618                     	;# 
   829  0619                     	;# 
   830  061A                     	;# 
   831  061B                     	;# 
   832  061C                     	;# 
   833  0691                     	;# 
   834  0692                     	;# 
   835  0693                     	;# 
   836  0694                     	;# 
   837  0695                     	;# 
   838  0696                     	;# 
   839  0697                     	;# 
   840  0699                     	;# 
   841  069A                     	;# 
   842  0711                     	;# 
   843  0712                     	;# 
   844  0713                     	;# 
   845  0714                     	;# 
   846  0715                     	;# 
   847  0718                     	;# 
   848  0718                     	;# 
   849  0719                     	;# 
   850  071A                     	;# 
   851  071A                     	;# 
   852  071B                     	;# 
   853  071C                     	;# 
   854  071D                     	;# 
   855  0791                     	;# 
   856  0791                     	;# 
   857  0792                     	;# 
   858  0793                     	;# 
   859  0793                     	;# 
   860  0794                     	;# 
   861  0795                     	;# 
   862  0795                     	;# 
   863  0796                     	;# 
   864  0797                     	;# 
   865  0797                     	;# 
   866  0798                     	;# 
   867  0799                     	;# 
   868  079A                     	;# 
   869  080C                     	;# 
   870  080C                     	;# 
   871  080D                     	;# 
   872  080E                     	;# 
   873  080E                     	;# 
   874  080F                     	;# 
   875  0810                     	;# 
   876  0810                     	;# 
   877  0811                     	;# 
   878  0812                     	;# 
   879  0812                     	;# 
   880  0813                     	;# 
   881  0814                     	;# 
   882  0815                     	;# 
   883  0816                     	;# 
   884  0817                     	;# 
   885  0818                     	;# 
   886  0819                     	;# 
   887  081A                     	;# 
   888  081A                     	;# 
   889  081B                     	;# 
   890  081C                     	;# 
   891  081C                     	;# 
   892  081D                     	;# 
   893  088C                     	;# 
   894  088D                     	;# 
   895  088E                     	;# 
   896  088F                     	;# 
   897  088F                     	;# 
   898  0890                     	;# 
   899  0891                     	;# 
   900  0892                     	;# 
   901  0893                     	;# 
   902  0893                     	;# 
   903  0894                     	;# 
   904  0895                     	;# 
   905  0896                     	;# 
   906  0897                     	;# 
   907  0897                     	;# 
   908  0898                     	;# 
   909  0899                     	;# 
   910  0D8C                     	;# 
   911  0D8C                     	;# 
   912  0D8D                     	;# 
   913  0D8E                     	;# 
   914  0D8F                     	;# 
   915  0D8F                     	;# 
   916  0D90                     	;# 
   917  0D91                     	;# 
   918  0D92                     	;# 
   919  0D92                     	;# 
   920  0D93                     	;# 
   921  0D94                     	;# 
   922  0D95                     	;# 
   923  0D95                     	;# 
   924  0D96                     	;# 
   925  0D97                     	;# 
   926  0D98                     	;# 
   927  0D99                     	;# 
   928  0D9A                     	;# 
   929  0D9B                     	;# 
   930  0D9C                     	;# 
   931  0D9D                     	;# 
   932  0D9E                     	;# 
   933  0D9E                     	;# 
   934  0D9F                     	;# 
   935  0DA0                     	;# 
   936  0DA1                     	;# 
   937  0DA1                     	;# 
   938  0DA2                     	;# 
   939  0DA3                     	;# 
   940  0DA4                     	;# 
   941  0DA4                     	;# 
   942  0DA5                     	;# 
   943  0DA6                     	;# 
   944  0DA7                     	;# 
   945  0DA7                     	;# 
   946  0DA8                     	;# 
   947  0DA9                     	;# 
   948  0DAA                     	;# 
   949  0DAB                     	;# 
   950  0DAC                     	;# 
   951  0DAD                     	;# 
   952  0DAE                     	;# 
   953  0DAF                     	;# 
   954  0E0F                     	;# 
   955  0E10                     	;# 
   956  0E11                     	;# 
   957  0E12                     	;# 
   958  0E13                     	;# 
   959  0E14                     	;# 
   960  0E15                     	;# 
   961  0E16                     	;# 
   962  0E17                     	;# 
   963  0E18                     	;# 
   964  0E19                     	;# 
   965  0E1A                     	;# 
   966  0E1B                     	;# 
   967  0E1C                     	;# 
   968  0E1D                     	;# 
   969  0E1E                     	;# 
   970  0E1F                     	;# 
   971  0E20                     	;# 
   972  0E21                     	;# 
   973  0E22                     	;# 
   974  0E23                     	;# 
   975  0E24                     	;# 
   976  0E25                     	;# 
   977  0E26                     	;# 
   978  0E27                     	;# 
   979  0E28                     	;# 
   980  0E29                     	;# 
   981  0E2A                     	;# 
   982  0E2B                     	;# 
   983  0E2C                     	;# 
   984  0E2D                     	;# 
   985  0E2E                     	;# 
   986  0E90                     	;# 
   987  0E91                     	;# 
   988  0E92                     	;# 
   989  0E94                     	;# 
   990  0E95                     	;# 
   991  0E9C                     	;# 
   992  0E9D                     	;# 
   993  0E9E                     	;# 
   994  0E9F                     	;# 
   995  0EA0                     	;# 
   996  0EA1                     	;# 
   997  0EA2                     	;# 
   998  0EA3                     	;# 
   999  0EA4                     	;# 
  1000  0EA5                     	;# 
  1001  0EA6                     	;# 
  1002  0EA7                     	;# 
  1003  0F0F                     	;# 
  1004  0F10                     	;# 
  1005  0F11                     	;# 
  1006  0F12                     	;# 
  1007  0F13                     	;# 
  1008  0F14                     	;# 
  1009  0F15                     	;# 
  1010  0F16                     	;# 
  1011  0F17                     	;# 
  1012  0F18                     	;# 
  1013  0F19                     	;# 
  1014  0F1A                     	;# 
  1015  0F1B                     	;# 
  1016  0F1C                     	;# 
  1017  0F1D                     	;# 
  1018  0F1E                     	;# 
  1019  0F1F                     	;# 
  1020  0F20                     	;# 
  1021  0F21                     	;# 
  1022  0F22                     	;# 
  1023  0F23                     	;# 
  1024  0F24                     	;# 
  1025  0F25                     	;# 
  1026  0F26                     	;# 
  1027  0F27                     	;# 
  1028  0F28                     	;# 
  1029  0F29                     	;# 
  1030  0F2A                     	;# 
  1031  0F2B                     	;# 
  1032  0F2C                     	;# 
  1033  0F2D                     	;# 
  1034  0F2E                     	;# 
  1035  0F2F                     	;# 
  1036  0F30                     	;# 
  1037  0F31                     	;# 
  1038  0F32                     	;# 
  1039  0F33                     	;# 
  1040  0F34                     	;# 
  1041  0F35                     	;# 
  1042  0F36                     	;# 
  1043  0F37                     	;# 
  1044  0FE4                     	;# 
  1045  0FE5                     	;# 
  1046  0FE6                     	;# 
  1047  0FE7                     	;# 
  1048  0FE8                     	;# 
  1049  0FE9                     	;# 
  1050  0FEA                     	;# 
  1051  0FEB                     	;# 
  1052  0FED                     	;# 
  1053  0FEE                     	;# 
  1054  0FEF                     	;# 
  1055  0000                     	;# 
  1056  0001                     	;# 
  1057  0002                     	;# 
  1058  0003                     	;# 
  1059  0004                     	;# 
  1060  0005                     	;# 
  1061  0006                     	;# 
  1062  0007                     	;# 
  1063  0008                     	;# 
  1064  0009                     	;# 
  1065  000A                     	;# 
  1066  000B                     	;# 
  1067  000C                     	;# 
  1068  000D                     	;# 
  1069  000E                     	;# 
  1070  0010                     	;# 
  1071  0011                     	;# 
  1072  0012                     	;# 
  1073  0013                     	;# 
  1074  0014                     	;# 
  1075  0015                     	;# 
  1076  0016                     	;# 
  1077  0016                     	;# 
  1078  0017                     	;# 
  1079  0018                     	;# 
  1080  0019                     	;# 
  1081  001A                     	;# 
  1082  001A                     	;# 
  1083  001B                     	;# 
  1084  001B                     	;# 
  1085  001C                     	;# 
  1086  001D                     	;# 
  1087  001E                     	;# 
  1088  001F                     	;# 
  1089  008C                     	;# 
  1090  008D                     	;# 
  1091  008E                     	;# 
  1092  0090                     	;# 
  1093  0091                     	;# 
  1094  0092                     	;# 
  1095  0093                     	;# 
  1096  0094                     	;# 
  1097  0095                     	;# 
  1098  0096                     	;# 
  1099  0098                     	;# 
  1100  0099                     	;# 
  1101  009A                     	;# 
  1102  009B                     	;# 
  1103  009B                     	;# 
  1104  009C                     	;# 
  1105  009D                     	;# 
  1106  009E                     	;# 
  1107  009F                     	;# 
  1108  010C                     	;# 
  1109  010D                     	;# 
  1110  010E                     	;# 
  1111  0111                     	;# 
  1112  0112                     	;# 
  1113  0113                     	;# 
  1114  0114                     	;# 
  1115  0115                     	;# 
  1116  0116                     	;# 
  1117  0117                     	;# 
  1118  0118                     	;# 
  1119  0119                     	;# 
  1120  011C                     	;# 
  1121  018C                     	;# 
  1122  018D                     	;# 
  1123  018E                     	;# 
  1124  0191                     	;# 
  1125  0191                     	;# 
  1126  0192                     	;# 
  1127  0193                     	;# 
  1128  0193                     	;# 
  1129  0194                     	;# 
  1130  0195                     	;# 
  1131  0196                     	;# 
  1132  0197                     	;# 
  1133  0199                     	;# 
  1134  0199                     	;# 
  1135  0199                     	;# 
  1136  019A                     	;# 
  1137  019A                     	;# 
  1138  019A                     	;# 
  1139  019B                     	;# 
  1140  019B                     	;# 
  1141  019B                     	;# 
  1142  019B                     	;# 
  1143  019B                     	;# 
  1144  019C                     	;# 
  1145  019C                     	;# 
  1146  019C                     	;# 
  1147  019D                     	;# 
  1148  019D                     	;# 
  1149  019D                     	;# 
  1150  019E                     	;# 
  1151  019E                     	;# 
  1152  019E                     	;# 
  1153  019F                     	;# 
  1154  019F                     	;# 
  1155  019F                     	;# 
  1156  019F                     	;# 
  1157  019F                     	;# 
  1158  020C                     	;# 
  1159  020D                     	;# 
  1160  020E                     	;# 
  1161  0211                     	;# 
  1162  0211                     	;# 
  1163  0212                     	;# 
  1164  0212                     	;# 
  1165  0213                     	;# 
  1166  0213                     	;# 
  1167  0214                     	;# 
  1168  0214                     	;# 
  1169  0215                     	;# 
  1170  0215                     	;# 
  1171  0215                     	;# 
  1172  0215                     	;# 
  1173  0216                     	;# 
  1174  0216                     	;# 
  1175  0217                     	;# 
  1176  0217                     	;# 
  1177  028C                     	;# 
  1178  028D                     	;# 
  1179  028E                     	;# 
  1180  0291                     	;# 
  1181  0291                     	;# 
  1182  0292                     	;# 
  1183  0293                     	;# 
  1184  0294                     	;# 
  1185  0298                     	;# 
  1186  0298                     	;# 
  1187  0299                     	;# 
  1188  029A                     	;# 
  1189  029B                     	;# 
  1190  029E                     	;# 
  1191  030C                     	;# 
  1192  030D                     	;# 
  1193  030E                     	;# 
  1194  038C                     	;# 
  1195  038D                     	;# 
  1196  038E                     	;# 
  1197  0391                     	;# 
  1198  0392                     	;# 
  1199  0393                     	;# 
  1200  0394                     	;# 
  1201  0395                     	;# 
  1202  0396                     	;# 
  1203  0397                     	;# 
  1204  0398                     	;# 
  1205  0399                     	;# 
  1206  040E                     	;# 
  1207  0413                     	;# 
  1208  0413                     	;# 
  1209  0414                     	;# 
  1210  0414                     	;# 
  1211  0415                     	;# 
  1212  0416                     	;# 
  1213  0417                     	;# 
  1214  0418                     	;# 
  1215  041A                     	;# 
  1216  041A                     	;# 
  1217  041B                     	;# 
  1218  041B                     	;# 
  1219  041C                     	;# 
  1220  041D                     	;# 
  1221  041E                     	;# 
  1222  041F                     	;# 
  1223  0493                     	;# 
  1224  0494                     	;# 
  1225  0495                     	;# 
  1226  0496                     	;# 
  1227  049A                     	;# 
  1228  049B                     	;# 
  1229  049C                     	;# 
  1230  049D                     	;# 
  1231  058C                     	;# 
  1232  058C                     	;# 
  1233  058D                     	;# 
  1234  058E                     	;# 
  1235  058E                     	;# 
  1236  058F                     	;# 
  1237  0590                     	;# 
  1238  0590                     	;# 
  1239  0591                     	;# 
  1240  0592                     	;# 
  1241  0592                     	;# 
  1242  0593                     	;# 
  1243  0594                     	;# 
  1244  0594                     	;# 
  1245  0595                     	;# 
  1246  0596                     	;# 
  1247  0596                     	;# 
  1248  0597                     	;# 
  1249  0598                     	;# 
  1250  0599                     	;# 
  1251  059A                     	;# 
  1252  059B                     	;# 
  1253  059B                     	;# 
  1254  059C                     	;# 
  1255  059D                     	;# 
  1256  060C                     	;# 
  1257  060C                     	;# 
  1258  060D                     	;# 
  1259  060E                     	;# 
  1260  060F                     	;# 
  1261  060F                     	;# 
  1262  0610                     	;# 
  1263  0611                     	;# 
  1264  0612                     	;# 
  1265  0613                     	;# 
  1266  0614                     	;# 
  1267  0617                     	;# 
  1268  0618                     	;# 
  1269  0619                     	;# 
  1270  061A                     	;# 
  1271  061B                     	;# 
  1272  061C                     	;# 
  1273  0691                     	;# 
  1274  0692                     	;# 
  1275  0693                     	;# 
  1276  0694                     	;# 
  1277  0695                     	;# 
  1278  0696                     	;# 
  1279  0697                     	;# 
  1280  0699                     	;# 
  1281  069A                     	;# 
  1282  0711                     	;# 
  1283  0712                     	;# 
  1284  0713                     	;# 
  1285  0714                     	;# 
  1286  0715                     	;# 
  1287  0718                     	;# 
  1288  0718                     	;# 
  1289  0719                     	;# 
  1290  071A                     	;# 
  1291  071A                     	;# 
  1292  071B                     	;# 
  1293  071C                     	;# 
  1294  071D                     	;# 
  1295  0791                     	;# 
  1296  0791                     	;# 
  1297  0792                     	;# 
  1298  0793                     	;# 
  1299  0793                     	;# 
  1300  0794                     	;# 
  1301  0795                     	;# 
  1302  0795                     	;# 
  1303  0796                     	;# 
  1304  0797                     	;# 
  1305  0797                     	;# 
  1306  0798                     	;# 
  1307  0799                     	;# 
  1308  079A                     	;# 
  1309  080C                     	;# 
  1310  080C                     	;# 
  1311  080D                     	;# 
  1312  080E                     	;# 
  1313  080E                     	;# 
  1314  080F                     	;# 
  1315  0810                     	;# 
  1316  0810                     	;# 
  1317  0811                     	;# 
  1318  0812                     	;# 
  1319  0812                     	;# 
  1320  0813                     	;# 
  1321  0814                     	;# 
  1322  0815                     	;# 
  1323  0816                     	;# 
  1324  0817                     	;# 
  1325  0818                     	;# 
  1326  0819                     	;# 
  1327  081A                     	;# 
  1328  081A                     	;# 
  1329  081B                     	;# 
  1330  081C                     	;# 
  1331  081C                     	;# 
  1332  081D                     	;# 
  1333  088C                     	;# 
  1334  088D                     	;# 
  1335  088E                     	;# 
  1336  088F                     	;# 
  1337  088F                     	;# 
  1338  0890                     	;# 
  1339  0891                     	;# 
  1340  0892                     	;# 
  1341  0893                     	;# 
  1342  0893                     	;# 
  1343  0894                     	;# 
  1344  0895                     	;# 
  1345  0896                     	;# 
  1346  0897                     	;# 
  1347  0897                     	;# 
  1348  0898                     	;# 
  1349  0899                     	;# 
  1350  0D8C                     	;# 
  1351  0D8C                     	;# 
  1352  0D8D                     	;# 
  1353  0D8E                     	;# 
  1354  0D8F                     	;# 
  1355  0D8F                     	;# 
  1356  0D90                     	;# 
  1357  0D91                     	;# 
  1358  0D92                     	;# 
  1359  0D92                     	;# 
  1360  0D93                     	;# 
  1361  0D94                     	;# 
  1362  0D95                     	;# 
  1363  0D95                     	;# 
  1364  0D96                     	;# 
  1365  0D97                     	;# 
  1366  0D98                     	;# 
  1367  0D99                     	;# 
  1368  0D9A                     	;# 
  1369  0D9B                     	;# 
  1370  0D9C                     	;# 
  1371  0D9D                     	;# 
  1372  0D9E                     	;# 
  1373  0D9E                     	;# 
  1374  0D9F                     	;# 
  1375  0DA0                     	;# 
  1376  0DA1                     	;# 
  1377  0DA1                     	;# 
  1378  0DA2                     	;# 
  1379  0DA3                     	;# 
  1380  0DA4                     	;# 
  1381  0DA4                     	;# 
  1382  0DA5                     	;# 
  1383  0DA6                     	;# 
  1384  0DA7                     	;# 
  1385  0DA7                     	;# 
  1386  0DA8                     	;# 
  1387  0DA9                     	;# 
  1388  0DAA                     	;# 
  1389  0DAB                     	;# 
  1390  0DAC                     	;# 
  1391  0DAD                     	;# 
  1392  0DAE                     	;# 
  1393  0DAF                     	;# 
  1394  0E0F                     	;# 
  1395  0E10                     	;# 
  1396  0E11                     	;# 
  1397  0E12                     	;# 
  1398  0E13                     	;# 
  1399  0E14                     	;# 
  1400  0E15                     	;# 
  1401  0E16                     	;# 
  1402  0E17                     	;# 
  1403  0E18                     	;# 
  1404  0E19                     	;# 
  1405  0E1A                     	;# 
  1406  0E1B                     	;# 
  1407  0E1C                     	;# 
  1408  0E1D                     	;# 
  1409  0E1E                     	;# 
  1410  0E1F                     	;# 
  1411  0E20                     	;# 
  1412  0E21                     	;# 
  1413  0E22                     	;# 
  1414  0E23                     	;# 
  1415  0E24                     	;# 
  1416  0E25                     	;# 
  1417  0E26                     	;# 
  1418  0E27                     	;# 
  1419  0E28                     	;# 
  1420  0E29                     	;# 
  1421  0E2A                     	;# 
  1422  0E2B                     	;# 
  1423  0E2C                     	;# 
  1424  0E2D                     	;# 
  1425  0E2E                     	;# 
  1426  0E90                     	;# 
  1427  0E91                     	;# 
  1428  0E92                     	;# 
  1429  0E94                     	;# 
  1430  0E95                     	;# 
  1431  0E9C                     	;# 
  1432  0E9D                     	;# 
  1433  0E9E                     	;# 
  1434  0E9F                     	;# 
  1435  0EA0                     	;# 
  1436  0EA1                     	;# 
  1437  0EA2                     	;# 
  1438  0EA3                     	;# 
  1439  0EA4                     	;# 
  1440  0EA5                     	;# 
  1441  0EA6                     	;# 
  1442  0EA7                     	;# 
  1443  0F0F                     	;# 
  1444  0F10                     	;# 
  1445  0F11                     	;# 
  1446  0F12                     	;# 
  1447  0F13                     	;# 
  1448  0F14                     	;# 
  1449  0F15                     	;# 
  1450  0F16                     	;# 
  1451  0F17                     	;# 
  1452  0F18                     	;# 
  1453  0F19                     	;# 
  1454  0F1A                     	;# 
  1455  0F1B                     	;# 
  1456  0F1C                     	;# 
  1457  0F1D                     	;# 
  1458  0F1E                     	;# 
  1459  0F1F                     	;# 
  1460  0F20                     	;# 
  1461  0F21                     	;# 
  1462  0F22                     	;# 
  1463  0F23                     	;# 
  1464  0F24                     	;# 
  1465  0F25                     	;# 
  1466  0F26                     	;# 
  1467  0F27                     	;# 
  1468  0F28                     	;# 
  1469  0F29                     	;# 
  1470  0F2A                     	;# 
  1471  0F2B                     	;# 
  1472  0F2C                     	;# 
  1473  0F2D                     	;# 
  1474  0F2E                     	;# 
  1475  0F2F                     	;# 
  1476  0F30                     	;# 
  1477  0F31                     	;# 
  1478  0F32                     	;# 
  1479  0F33                     	;# 
  1480  0F34                     	;# 
  1481  0F35                     	;# 
  1482  0F36                     	;# 
  1483  0F37                     	;# 
  1484  0FE4                     	;# 
  1485  0FE5                     	;# 
  1486  0FE6                     	;# 
  1487  0FE7                     	;# 
  1488  0FE8                     	;# 
  1489  0FE9                     	;# 
  1490  0FEA                     	;# 
  1491  0FEB                     	;# 
  1492  0FED                     	;# 
  1493  0FEE                     	;# 
  1494  0FEF                     	;# 
  1495  0000                     	;# 
  1496  0001                     	;# 
  1497  0002                     	;# 
  1498  0003                     	;# 
  1499  0004                     	;# 
  1500  0005                     	;# 
  1501  0006                     	;# 
  1502  0007                     	;# 
  1503  0008                     	;# 
  1504  0009                     	;# 
  1505  000A                     	;# 
  1506  000B                     	;# 
  1507  000C                     	;# 
  1508  000D                     	;# 
  1509  000E                     	;# 
  1510  0010                     	;# 
  1511  0011                     	;# 
  1512  0012                     	;# 
  1513  0013                     	;# 
  1514  0014                     	;# 
  1515  0015                     	;# 
  1516  0016                     	;# 
  1517  0016                     	;# 
  1518  0017                     	;# 
  1519  0018                     	;# 
  1520  0019                     	;# 
  1521  001A                     	;# 
  1522  001A                     	;# 
  1523  001B                     	;# 
  1524  001B                     	;# 
  1525  001C                     	;# 
  1526  001D                     	;# 
  1527  001E                     	;# 
  1528  001F                     	;# 
  1529  008C                     	;# 
  1530  008D                     	;# 
  1531  008E                     	;# 
  1532  0090                     	;# 
  1533  0091                     	;# 
  1534  0092                     	;# 
  1535  0093                     	;# 
  1536  0094                     	;# 
  1537  0095                     	;# 
  1538  0096                     	;# 
  1539  0098                     	;# 
  1540  0099                     	;# 
  1541  009A                     	;# 
  1542  009B                     	;# 
  1543  009B                     	;# 
  1544  009C                     	;# 
  1545  009D                     	;# 
  1546  009E                     	;# 
  1547  009F                     	;# 
  1548  010C                     	;# 
  1549  010D                     	;# 
  1550  010E                     	;# 
  1551  0111                     	;# 
  1552  0112                     	;# 
  1553  0113                     	;# 
  1554  0114                     	;# 
  1555  0115                     	;# 
  1556  0116                     	;# 
  1557  0117                     	;# 
  1558  0118                     	;# 
  1559  0119                     	;# 
  1560  011C                     	;# 
  1561  018C                     	;# 
  1562  018D                     	;# 
  1563  018E                     	;# 
  1564  0191                     	;# 
  1565  0191                     	;# 
  1566  0192                     	;# 
  1567  0193                     	;# 
  1568  0193                     	;# 
  1569  0194                     	;# 
  1570  0195                     	;# 
  1571  0196                     	;# 
  1572  0197                     	;# 
  1573  0199                     	;# 
  1574  0199                     	;# 
  1575  0199                     	;# 
  1576  019A                     	;# 
  1577  019A                     	;# 
  1578  019A                     	;# 
  1579  019B                     	;# 
  1580  019B                     	;# 
  1581  019B                     	;# 
  1582  019B                     	;# 
  1583  019B                     	;# 
  1584  019C                     	;# 
  1585  019C                     	;# 
  1586  019C                     	;# 
  1587  019D                     	;# 
  1588  019D                     	;# 
  1589  019D                     	;# 
  1590  019E                     	;# 
  1591  019E                     	;# 
  1592  019E                     	;# 
  1593  019F                     	;# 
  1594  019F                     	;# 
  1595  019F                     	;# 
  1596  019F                     	;# 
  1597  019F                     	;# 
  1598  020C                     	;# 
  1599  020D                     	;# 
  1600  020E                     	;# 
  1601  0211                     	;# 
  1602  0211                     	;# 
  1603  0212                     	;# 
  1604  0212                     	;# 
  1605  0213                     	;# 
  1606  0213                     	;# 
  1607  0214                     	;# 
  1608  0214                     	;# 
  1609  0215                     	;# 
  1610  0215                     	;# 
  1611  0215                     	;# 
  1612  0215                     	;# 
  1613  0216                     	;# 
  1614  0216                     	;# 
  1615  0217                     	;# 
  1616  0217                     	;# 
  1617  028C                     	;# 
  1618  028D                     	;# 
  1619  028E                     	;# 
  1620  0291                     	;# 
  1621  0291                     	;# 
  1622  0292                     	;# 
  1623  0293                     	;# 
  1624  0294                     	;# 
  1625  0298                     	;# 
  1626  0298                     	;# 
  1627  0299                     	;# 
  1628  029A                     	;# 
  1629  029B                     	;# 
  1630  029E                     	;# 
  1631  030C                     	;# 
  1632  030D                     	;# 
  1633  030E                     	;# 
  1634  038C                     	;# 
  1635  038D                     	;# 
  1636  038E                     	;# 
  1637  0391                     	;# 
  1638  0392                     	;# 
  1639  0393                     	;# 
  1640  0394                     	;# 
  1641  0395                     	;# 
  1642  0396                     	;# 
  1643  0397                     	;# 
  1644  0398                     	;# 
  1645  0399                     	;# 
  1646  040E                     	;# 
  1647  0413                     	;# 
  1648  0413                     	;# 
  1649  0414                     	;# 
  1650  0414                     	;# 
  1651  0415                     	;# 
  1652  0416                     	;# 
  1653  0417                     	;# 
  1654  0418                     	;# 
  1655  041A                     	;# 
  1656  041A                     	;# 
  1657  041B                     	;# 
  1658  041B                     	;# 
  1659  041C                     	;# 
  1660  041D                     	;# 
  1661  041E                     	;# 
  1662  041F                     	;# 
  1663  0493                     	;# 
  1664  0494                     	;# 
  1665  0495                     	;# 
  1666  0496                     	;# 
  1667  049A                     	;# 
  1668  049B                     	;# 
  1669  049C                     	;# 
  1670  049D                     	;# 
  1671  058C                     	;# 
  1672  058C                     	;# 
  1673  058D                     	;# 
  1674  058E                     	;# 
  1675  058E                     	;# 
  1676  058F                     	;# 
  1677  0590                     	;# 
  1678  0590                     	;# 
  1679  0591                     	;# 
  1680  0592                     	;# 
  1681  0592                     	;# 
  1682  0593                     	;# 
  1683  0594                     	;# 
  1684  0594                     	;# 
  1685  0595                     	;# 
  1686  0596                     	;# 
  1687  0596                     	;# 
  1688  0597                     	;# 
  1689  0598                     	;# 
  1690  0599                     	;# 
  1691  059A                     	;# 
  1692  059B                     	;# 
  1693  059B                     	;# 
  1694  059C                     	;# 
  1695  059D                     	;# 
  1696  060C                     	;# 
  1697  060C                     	;# 
  1698  060D                     	;# 
  1699  060E                     	;# 
  1700  060F                     	;# 
  1701  060F                     	;# 
  1702  0610                     	;# 
  1703  0611                     	;# 
  1704  0612                     	;# 
  1705  0613                     	;# 
  1706  0614                     	;# 
  1707  0617                     	;# 
  1708  0618                     	;# 
  1709  0619                     	;# 
  1710  061A                     	;# 
  1711  061B                     	;# 
  1712  061C                     	;# 
  1713  0691                     	;# 
  1714  0692                     	;# 
  1715  0693                     	;# 
  1716  0694                     	;# 
  1717  0695                     	;# 
  1718  0696                     	;# 
  1719  0697                     	;# 
  1720  0699                     	;# 
  1721  069A                     	;# 
  1722  0711                     	;# 
  1723  0712                     	;# 
  1724  0713                     	;# 
  1725  0714                     	;# 
  1726  0715                     	;# 
  1727  0718                     	;# 
  1728  0718                     	;# 
  1729  0719                     	;# 
  1730  071A                     	;# 
  1731  071A                     	;# 
  1732  071B                     	;# 
  1733  071C                     	;# 
  1734  071D                     	;# 
  1735  0791                     	;# 
  1736  0791                     	;# 
  1737  0792                     	;# 
  1738  0793                     	;# 
  1739  0793                     	;# 
  1740  0794                     	;# 
  1741  0795                     	;# 
  1742  0795                     	;# 
  1743  0796                     	;# 
  1744  0797                     	;# 
  1745  0797                     	;# 
  1746  0798                     	;# 
  1747  0799                     	;# 
  1748  079A                     	;# 
  1749  080C                     	;# 
  1750  080C                     	;# 
  1751  080D                     	;# 
  1752  080E                     	;# 
  1753  080E                     	;# 
  1754  080F                     	;# 
  1755  0810                     	;# 
  1756  0810                     	;# 
  1757  0811                     	;# 
  1758  0812                     	;# 
  1759  0812                     	;# 
  1760  0813                     	;# 
  1761  0814                     	;# 
  1762  0815                     	;# 
  1763  0816                     	;# 
  1764  0817                     	;# 
  1765  0818                     	;# 
  1766  0819                     	;# 
  1767  081A                     	;# 
  1768  081A                     	;# 
  1769  081B                     	;# 
  1770  081C                     	;# 
  1771  081C                     	;# 
  1772  081D                     	;# 
  1773  088C                     	;# 
  1774  088D                     	;# 
  1775  088E                     	;# 
  1776  088F                     	;# 
  1777  088F                     	;# 
  1778  0890                     	;# 
  1779  0891                     	;# 
  1780  0892                     	;# 
  1781  0893                     	;# 
  1782  0893                     	;# 
  1783  0894                     	;# 
  1784  0895                     	;# 
  1785  0896                     	;# 
  1786  0897                     	;# 
  1787  0897                     	;# 
  1788  0898                     	;# 
  1789  0899                     	;# 
  1790  0D8C                     	;# 
  1791  0D8C                     	;# 
  1792  0D8D                     	;# 
  1793  0D8E                     	;# 
  1794  0D8F                     	;# 
  1795  0D8F                     	;# 
  1796  0D90                     	;# 
  1797  0D91                     	;# 
  1798  0D92                     	;# 
  1799  0D92                     	;# 
  1800  0D93                     	;# 
  1801  0D94                     	;# 
  1802  0D95                     	;# 
  1803  0D95                     	;# 
  1804  0D96                     	;# 
  1805  0D97                     	;# 
  1806  0D98                     	;# 
  1807  0D99                     	;# 
  1808  0D9A                     	;# 
  1809  0D9B                     	;# 
  1810  0D9C                     	;# 
  1811  0D9D                     	;# 
  1812  0D9E                     	;# 
  1813  0D9E                     	;# 
  1814  0D9F                     	;# 
  1815  0DA0                     	;# 
  1816  0DA1                     	;# 
  1817  0DA1                     	;# 
  1818  0DA2                     	;# 
  1819  0DA3                     	;# 
  1820  0DA4                     	;# 
  1821  0DA4                     	;# 
  1822  0DA5                     	;# 
  1823  0DA6                     	;# 
  1824  0DA7                     	;# 
  1825  0DA7                     	;# 
  1826  0DA8                     	;# 
  1827  0DA9                     	;# 
  1828  0DAA                     	;# 
  1829  0DAB                     	;# 
  1830  0DAC                     	;# 
  1831  0DAD                     	;# 
  1832  0DAE                     	;# 
  1833  0DAF                     	;# 
  1834  0E0F                     	;# 
  1835  0E10                     	;# 
  1836  0E11                     	;# 
  1837  0E12                     	;# 
  1838  0E13                     	;# 
  1839  0E14                     	;# 
  1840  0E15                     	;# 
  1841  0E16                     	;# 
  1842  0E17                     	;# 
  1843  0E18                     	;# 
  1844  0E19                     	;# 
  1845  0E1A                     	;# 
  1846  0E1B                     	;# 
  1847  0E1C                     	;# 
  1848  0E1D                     	;# 
  1849  0E1E                     	;# 
  1850  0E1F                     	;# 
  1851  0E20                     	;# 
  1852  0E21                     	;# 
  1853  0E22                     	;# 
  1854  0E23                     	;# 
  1855  0E24                     	;# 
  1856  0E25                     	;# 
  1857  0E26                     	;# 
  1858  0E27                     	;# 
  1859  0E28                     	;# 
  1860  0E29                     	;# 
  1861  0E2A                     	;# 
  1862  0E2B                     	;# 
  1863  0E2C                     	;# 
  1864  0E2D                     	;# 
  1865  0E2E                     	;# 
  1866  0E90                     	;# 
  1867  0E91                     	;# 
  1868  0E92                     	;# 
  1869  0E94                     	;# 
  1870  0E95                     	;# 
  1871  0E9C                     	;# 
  1872  0E9D                     	;# 
  1873  0E9E                     	;# 
  1874  0E9F                     	;# 
  1875  0EA0                     	;# 
  1876  0EA1                     	;# 
  1877  0EA2                     	;# 
  1878  0EA3                     	;# 
  1879  0EA4                     	;# 
  1880  0EA5                     	;# 
  1881  0EA6                     	;# 
  1882  0EA7                     	;# 
  1883  0F0F                     	;# 
  1884  0F10                     	;# 
  1885  0F11                     	;# 
  1886  0F12                     	;# 
  1887  0F13                     	;# 
  1888  0F14                     	;# 
  1889  0F15                     	;# 
  1890  0F16                     	;# 
  1891  0F17                     	;# 
  1892  0F18                     	;# 
  1893  0F19                     	;# 
  1894  0F1A                     	;# 
  1895  0F1B                     	;# 
  1896  0F1C                     	;# 
  1897  0F1D                     	;# 
  1898  0F1E                     	;# 
  1899  0F1F                     	;# 
  1900  0F20                     	;# 
  1901  0F21                     	;# 
  1902  0F22                     	;# 
  1903  0F23                     	;# 
  1904  0F24                     	;# 
  1905  0F25                     	;# 
  1906  0F26                     	;# 
  1907  0F27                     	;# 
  1908  0F28                     	;# 
  1909  0F29                     	;# 
  1910  0F2A                     	;# 
  1911  0F2B                     	;# 
  1912  0F2C                     	;# 
  1913  0F2D                     	;# 
  1914  0F2E                     	;# 
  1915  0F2F                     	;# 
  1916  0F30                     	;# 
  1917  0F31                     	;# 
  1918  0F32                     	;# 
  1919  0F33                     	;# 
  1920  0F34                     	;# 
  1921  0F35                     	;# 
  1922  0F36                     	;# 
  1923  0F37                     	;# 
  1924  0FE4                     	;# 
  1925  0FE5                     	;# 
  1926  0FE6                     	;# 
  1927  0FE7                     	;# 
  1928  0FE8                     	;# 
  1929  0FE9                     	;# 
  1930  0FEA                     	;# 
  1931  0FEB                     	;# 
  1932  0FED                     	;# 
  1933  0FEE                     	;# 
  1934  0FEF                     	;# 
  1935  0000                     	;# 
  1936  0001                     	;# 
  1937  0002                     	;# 
  1938  0003                     	;# 
  1939  0004                     	;# 
  1940  0005                     	;# 
  1941  0006                     	;# 
  1942  0007                     	;# 
  1943  0008                     	;# 
  1944  0009                     	;# 
  1945  000A                     	;# 
  1946  000B                     	;# 
  1947  000C                     	;# 
  1948  000D                     	;# 
  1949  000E                     	;# 
  1950  0010                     	;# 
  1951  0011                     	;# 
  1952  0012                     	;# 
  1953  0013                     	;# 
  1954  0014                     	;# 
  1955  0015                     	;# 
  1956  0016                     	;# 
  1957  0016                     	;# 
  1958  0017                     	;# 
  1959  0018                     	;# 
  1960  0019                     	;# 
  1961  001A                     	;# 
  1962  001A                     	;# 
  1963  001B                     	;# 
  1964  001B                     	;# 
  1965  001C                     	;# 
  1966  001D                     	;# 
  1967  001E                     	;# 
  1968  001F                     	;# 
  1969  008C                     	;# 
  1970  008D                     	;# 
  1971  008E                     	;# 
  1972  0090                     	;# 
  1973  0091                     	;# 
  1974  0092                     	;# 
  1975  0093                     	;# 
  1976  0094                     	;# 
  1977  0095                     	;# 
  1978  0096                     	;# 
  1979  0098                     	;# 
  1980  0099                     	;# 
  1981  009A                     	;# 
  1982  009B                     	;# 
  1983  009B                     	;# 
  1984  009C                     	;# 
  1985  009D                     	;# 
  1986  009E                     	;# 
  1987  009F                     	;# 
  1988  010C                     	;# 
  1989  010D                     	;# 
  1990  010E                     	;# 
  1991  0111                     	;# 
  1992  0112                     	;# 
  1993  0113                     	;# 
  1994  0114                     	;# 
  1995  0115                     	;# 
  1996  0116                     	;# 
  1997  0117                     	;# 
  1998  0118                     	;# 
  1999  0119                     	;# 
  2000  011C                     	;# 
  2001  018C                     	;# 
  2002  018D                     	;# 
  2003  018E                     	;# 
  2004  0191                     	;# 
  2005  0191                     	;# 
  2006  0192                     	;# 
  2007  0193                     	;# 
  2008  0193                     	;# 
  2009  0194                     	;# 
  2010  0195                     	;# 
  2011  0196                     	;# 
  2012  0197                     	;# 
  2013  0199                     	;# 
  2014  0199                     	;# 
  2015  0199                     	;# 
  2016  019A                     	;# 
  2017  019A                     	;# 
  2018  019A                     	;# 
  2019  019B                     	;# 
  2020  019B                     	;# 
  2021  019B                     	;# 
  2022  019B                     	;# 
  2023  019B                     	;# 
  2024  019C                     	;# 
  2025  019C                     	;# 
  2026  019C                     	;# 
  2027  019D                     	;# 
  2028  019D                     	;# 
  2029  019D                     	;# 
  2030  019E                     	;# 
  2031  019E                     	;# 
  2032  019E                     	;# 
  2033  019F                     	;# 
  2034  019F                     	;# 
  2035  019F                     	;# 
  2036  019F                     	;# 
  2037  019F                     	;# 
  2038  020C                     	;# 
  2039  020D                     	;# 
  2040  020E                     	;# 
  2041  0211                     	;# 
  2042  0211                     	;# 
  2043  0212                     	;# 
  2044  0212                     	;# 
  2045  0213                     	;# 
  2046  0213                     	;# 
  2047  0214                     	;# 
  2048  0214                     	;# 
  2049  0215                     	;# 
  2050  0215                     	;# 
  2051  0215                     	;# 
  2052  0215                     	;# 
  2053  0216                     	;# 
  2054  0216                     	;# 
  2055  0217                     	;# 
  2056  0217                     	;# 
  2057  028C                     	;# 
  2058  028D                     	;# 
  2059  028E                     	;# 
  2060  0291                     	;# 
  2061  0291                     	;# 
  2062  0292                     	;# 
  2063  0293                     	;# 
  2064  0294                     	;# 
  2065  0298                     	;# 
  2066  0298                     	;# 
  2067  0299                     	;# 
  2068  029A                     	;# 
  2069  029B                     	;# 
  2070  029E                     	;# 
  2071  030C                     	;# 
  2072  030D                     	;# 
  2073  030E                     	;# 
  2074  038C                     	;# 
  2075  038D                     	;# 
  2076  038E                     	;# 
  2077  0391                     	;# 
  2078  0392                     	;# 
  2079  0393                     	;# 
  2080  0394                     	;# 
  2081  0395                     	;# 
  2082  0396                     	;# 
  2083  0397                     	;# 
  2084  0398                     	;# 
  2085  0399                     	;# 
  2086  040E                     	;# 
  2087  0413                     	;# 
  2088  0413                     	;# 
  2089  0414                     	;# 
  2090  0414                     	;# 
  2091  0415                     	;# 
  2092  0416                     	;# 
  2093  0417                     	;# 
  2094  0418                     	;# 
  2095  041A                     	;# 
  2096  041A                     	;# 
  2097  041B                     	;# 
  2098  041B                     	;# 
  2099  041C                     	;# 
  2100  041D                     	;# 
  2101  041E                     	;# 
  2102  041F                     	;# 
  2103  0493                     	;# 
  2104  0494                     	;# 
  2105  0495                     	;# 
  2106  0496                     	;# 
  2107  049A                     	;# 
  2108  049B                     	;# 
  2109  049C                     	;# 
  2110  049D                     	;# 
  2111  058C                     	;# 
  2112  058C                     	;# 
  2113  058D                     	;# 
  2114  058E                     	;# 
  2115  058E                     	;# 
  2116  058F                     	;# 
  2117  0590                     	;# 
  2118  0590                     	;# 
  2119  0591                     	;# 
  2120  0592                     	;# 
  2121  0592                     	;# 
  2122  0593                     	;# 
  2123  0594                     	;# 
  2124  0594                     	;# 
  2125  0595                     	;# 
  2126  0596                     	;# 
  2127  0596                     	;# 
  2128  0597                     	;# 
  2129  0598                     	;# 
  2130  0599                     	;# 
  2131  059A                     	;# 
  2132  059B                     	;# 
  2133  059B                     	;# 
  2134  059C                     	;# 
  2135  059D                     	;# 
  2136  060C                     	;# 
  2137  060C                     	;# 
  2138  060D                     	;# 
  2139  060E                     	;# 
  2140  060F                     	;# 
  2141  060F                     	;# 
  2142  0610                     	;# 
  2143  0611                     	;# 
  2144  0612                     	;# 
  2145  0613                     	;# 
  2146  0614                     	;# 
  2147  0617                     	;# 
  2148  0618                     	;# 
  2149  0619                     	;# 
  2150  061A                     	;# 
  2151  061B                     	;# 
  2152  061C                     	;# 
  2153  0691                     	;# 
  2154  0692                     	;# 
  2155  0693                     	;# 
  2156  0694                     	;# 
  2157  0695                     	;# 
  2158  0696                     	;# 
  2159  0697                     	;# 
  2160  0699                     	;# 
  2161  069A                     	;# 
  2162  0711                     	;# 
  2163  0712                     	;# 
  2164  0713                     	;# 
  2165  0714                     	;# 
  2166  0715                     	;# 
  2167  0718                     	;# 
  2168  0718                     	;# 
  2169  0719                     	;# 
  2170  071A                     	;# 
  2171  071A                     	;# 
  2172  071B                     	;# 
  2173  071C                     	;# 
  2174  071D                     	;# 
  2175  0791                     	;# 
  2176  0791                     	;# 
  2177  0792                     	;# 
  2178  0793                     	;# 
  2179  0793                     	;# 
  2180  0794                     	;# 
  2181  0795                     	;# 
  2182  0795                     	;# 
  2183  0796                     	;# 
  2184  0797                     	;# 
  2185  0797                     	;# 
  2186  0798                     	;# 
  2187  0799                     	;# 
  2188  079A                     	;# 
  2189  080C                     	;# 
  2190  080C                     	;# 
  2191  080D                     	;# 
  2192  080E                     	;# 
  2193  080E                     	;# 
  2194  080F                     	;# 
  2195  0810                     	;# 
  2196  0810                     	;# 
  2197  0811                     	;# 
  2198  0812                     	;# 
  2199  0812                     	;# 
  2200  0813                     	;# 
  2201  0814                     	;# 
  2202  0815                     	;# 
  2203  0816                     	;# 
  2204  0817                     	;# 
  2205  0818                     	;# 
  2206  0819                     	;# 
  2207  081A                     	;# 
  2208  081A                     	;# 
  2209  081B                     	;# 
  2210  081C                     	;# 
  2211  081C                     	;# 
  2212  081D                     	;# 
  2213  088C                     	;# 
  2214  088D                     	;# 
  2215  088E                     	;# 
  2216  088F                     	;# 
  2217  088F                     	;# 
  2218  0890                     	;# 
  2219  0891                     	;# 
  2220  0892                     	;# 
  2221  0893                     	;# 
  2222  0893                     	;# 
  2223  0894                     	;# 
  2224  0895                     	;# 
  2225  0896                     	;# 
  2226  0897                     	;# 
  2227  0897                     	;# 
  2228  0898                     	;# 
  2229  0899                     	;# 
  2230  0D8C                     	;# 
  2231  0D8C                     	;# 
  2232  0D8D                     	;# 
  2233  0D8E                     	;# 
  2234  0D8F                     	;# 
  2235  0D8F                     	;# 
  2236  0D90                     	;# 
  2237  0D91                     	;# 
  2238  0D92                     	;# 
  2239  0D92                     	;# 
  2240  0D93                     	;# 
  2241  0D94                     	;# 
  2242  0D95                     	;# 
  2243  0D95                     	;# 
  2244  0D96                     	;# 
  2245  0D97                     	;# 
  2246  0D98                     	;# 
  2247  0D99                     	;# 
  2248  0D9A                     	;# 
  2249  0D9B                     	;# 
  2250  0D9C                     	;# 
  2251  0D9D                     	;# 
  2252  0D9E                     	;# 
  2253  0D9E                     	;# 
  2254  0D9F                     	;# 
  2255  0DA0                     	;# 
  2256  0DA1                     	;# 
  2257  0DA1                     	;# 
  2258  0DA2                     	;# 
  2259  0DA3                     	;# 
  2260  0DA4                     	;# 
  2261  0DA4                     	;# 
  2262  0DA5                     	;# 
  2263  0DA6                     	;# 
  2264  0DA7                     	;# 
  2265  0DA7                     	;# 
  2266  0DA8                     	;# 
  2267  0DA9                     	;# 
  2268  0DAA                     	;# 
  2269  0DAB                     	;# 
  2270  0DAC                     	;# 
  2271  0DAD                     	;# 
  2272  0DAE                     	;# 
  2273  0DAF                     	;# 
  2274  0E0F                     	;# 
  2275  0E10                     	;# 
  2276  0E11                     	;# 
  2277  0E12                     	;# 
  2278  0E13                     	;# 
  2279  0E14                     	;# 
  2280  0E15                     	;# 
  2281  0E16                     	;# 
  2282  0E17                     	;# 
  2283  0E18                     	;# 
  2284  0E19                     	;# 
  2285  0E1A                     	;# 
  2286  0E1B                     	;# 
  2287  0E1C                     	;# 
  2288  0E1D                     	;# 
  2289  0E1E                     	;# 
  2290  0E1F                     	;# 
  2291  0E20                     	;# 
  2292  0E21                     	;# 
  2293  0E22                     	;# 
  2294  0E23                     	;# 
  2295  0E24                     	;# 
  2296  0E25                     	;# 
  2297  0E26                     	;# 
  2298  0E27                     	;# 
  2299  0E28                     	;# 
  2300  0E29                     	;# 
  2301  0E2A                     	;# 
  2302  0E2B                     	;# 
  2303  0E2C                     	;# 
  2304  0E2D                     	;# 
  2305  0E2E                     	;# 
  2306  0E90                     	;# 
  2307  0E91                     	;# 
  2308  0E92                     	;# 
  2309  0E94                     	;# 
  2310  0E95                     	;# 
  2311  0E9C                     	;# 
  2312  0E9D                     	;# 
  2313  0E9E                     	;# 
  2314  0E9F                     	;# 
  2315  0EA0                     	;# 
  2316  0EA1                     	;# 
  2317  0EA2                     	;# 
  2318  0EA3                     	;# 
  2319  0EA4                     	;# 
  2320  0EA5                     	;# 
  2321  0EA6                     	;# 
  2322  0EA7                     	;# 
  2323  0F0F                     	;# 
  2324  0F10                     	;# 
  2325  0F11                     	;# 
  2326  0F12                     	;# 
  2327  0F13                     	;# 
  2328  0F14                     	;# 
  2329  0F15                     	;# 
  2330  0F16                     	;# 
  2331  0F17                     	;# 
  2332  0F18                     	;# 
  2333  0F19                     	;# 
  2334  0F1A                     	;# 
  2335  0F1B                     	;# 
  2336  0F1C                     	;# 
  2337  0F1D                     	;# 
  2338  0F1E                     	;# 
  2339  0F1F                     	;# 
  2340  0F20                     	;# 
  2341  0F21                     	;# 
  2342  0F22                     	;# 
  2343  0F23                     	;# 
  2344  0F24                     	;# 
  2345  0F25                     	;# 
  2346  0F26                     	;# 
  2347  0F27                     	;# 
  2348  0F28                     	;# 
  2349  0F29                     	;# 
  2350  0F2A                     	;# 
  2351  0F2B                     	;# 
  2352  0F2C                     	;# 
  2353  0F2D                     	;# 
  2354  0F2E                     	;# 
  2355  0F2F                     	;# 
  2356  0F30                     	;# 
  2357  0F31                     	;# 
  2358  0F32                     	;# 
  2359  0F33                     	;# 
  2360  0F34                     	;# 
  2361  0F35                     	;# 
  2362  0F36                     	;# 
  2363  0F37                     	;# 
  2364  0FE4                     	;# 
  2365  0FE5                     	;# 
  2366  0FE6                     	;# 
  2367  0FE7                     	;# 
  2368  0FE8                     	;# 
  2369  0FE9                     	;# 
  2370  0FEA                     	;# 
  2371  0FEB                     	;# 
  2372  0FED                     	;# 
  2373  0FEE                     	;# 
  2374  0FEF                     	;# 
  2375  0000                     	;# 
  2376  0001                     	;# 
  2377  0002                     	;# 
  2378  0003                     	;# 
  2379  0004                     	;# 
  2380  0005                     	;# 
  2381  0006                     	;# 
  2382  0007                     	;# 
  2383  0008                     	;# 
  2384  0009                     	;# 
  2385  000A                     	;# 
  2386  000B                     	;# 
  2387  000C                     	;# 
  2388  000D                     	;# 
  2389  000E                     	;# 
  2390  0010                     	;# 
  2391  0011                     	;# 
  2392  0012                     	;# 
  2393  0013                     	;# 
  2394  0014                     	;# 
  2395  0015                     	;# 
  2396  0016                     	;# 
  2397  0016                     	;# 
  2398  0017                     	;# 
  2399  0018                     	;# 
  2400  0019                     	;# 
  2401  001A                     	;# 
  2402  001A                     	;# 
  2403  001B                     	;# 
  2404  001B                     	;# 
  2405  001C                     	;# 
  2406  001D                     	;# 
  2407  001E                     	;# 
  2408  001F                     	;# 
  2409  008C                     	;# 
  2410  008D                     	;# 
  2411  008E                     	;# 
  2412  0090                     	;# 
  2413  0091                     	;# 
  2414  0092                     	;# 
  2415  0093                     	;# 
  2416  0094                     	;# 
  2417  0095                     	;# 
  2418  0096                     	;# 
  2419  0098                     	;# 
  2420  0099                     	;# 
  2421  009A                     	;# 
  2422  009B                     	;# 
  2423  009B                     	;# 
  2424  009C                     	;# 
  2425  009D                     	;# 
  2426  009E                     	;# 
  2427  009F                     	;# 
  2428  010C                     	;# 
  2429  010D                     	;# 
  2430  010E                     	;# 
  2431  0111                     	;# 
  2432  0112                     	;# 
  2433  0113                     	;# 
  2434  0114                     	;# 
  2435  0115                     	;# 
  2436  0116                     	;# 
  2437  0117                     	;# 
  2438  0118                     	;# 
  2439  0119                     	;# 
  2440  011C                     	;# 
  2441  018C                     	;# 
  2442  018D                     	;# 
  2443  018E                     	;# 
  2444  0191                     	;# 
  2445  0191                     	;# 
  2446  0192                     	;# 
  2447  0193                     	;# 
  2448  0193                     	;# 
  2449  0194                     	;# 
  2450  0195                     	;# 
  2451  0196                     	;# 
  2452  0197                     	;# 
  2453  0199                     	;# 
  2454  0199                     	;# 
  2455  0199                     	;# 
  2456  019A                     	;# 
  2457  019A                     	;# 
  2458  019A                     	;# 
  2459  019B                     	;# 
  2460  019B                     	;# 
  2461  019B                     	;# 
  2462  019B                     	;# 
  2463  019B                     	;# 
  2464  019C                     	;# 
  2465  019C                     	;# 
  2466  019C                     	;# 
  2467  019D                     	;# 
  2468  019D                     	;# 
  2469  019D                     	;# 
  2470  019E                     	;# 
  2471  019E                     	;# 
  2472  019E                     	;# 
  2473  019F                     	;# 
  2474  019F                     	;# 
  2475  019F                     	;# 
  2476  019F                     	;# 
  2477  019F                     	;# 
  2478  020C                     	;# 
  2479  020D                     	;# 
  2480  020E                     	;# 
  2481  0211                     	;# 
  2482  0211                     	;# 
  2483  0212                     	;# 
  2484  0212                     	;# 
  2485  0213                     	;# 
  2486  0213                     	;# 
  2487  0214                     	;# 
  2488  0214                     	;# 
  2489  0215                     	;# 
  2490  0215                     	;# 
  2491  0215                     	;# 
  2492  0215                     	;# 
  2493  0216                     	;# 
  2494  0216                     	;# 
  2495  0217                     	;# 
  2496  0217                     	;# 
  2497  028C                     	;# 
  2498  028D                     	;# 
  2499  028E                     	;# 
  2500  0291                     	;# 
  2501  0291                     	;# 
  2502  0292                     	;# 
  2503  0293                     	;# 
  2504  0294                     	;# 
  2505  0298                     	;# 
  2506  0298                     	;# 
  2507  0299                     	;# 
  2508  029A                     	;# 
  2509  029B                     	;# 
  2510  029E                     	;# 
  2511  030C                     	;# 
  2512  030D                     	;# 
  2513  030E                     	;# 
  2514  038C                     	;# 
  2515  038D                     	;# 
  2516  038E                     	;# 
  2517  0391                     	;# 
  2518  0392                     	;# 
  2519  0393                     	;# 
  2520  0394                     	;# 
  2521  0395                     	;# 
  2522  0396                     	;# 
  2523  0397                     	;# 
  2524  0398                     	;# 
  2525  0399                     	;# 
  2526  040E                     	;# 
  2527  0413                     	;# 
  2528  0413                     	;# 
  2529  0414                     	;# 
  2530  0414                     	;# 
  2531  0415                     	;# 
  2532  0416                     	;# 
  2533  0417                     	;# 
  2534  0418                     	;# 
  2535  041A                     	;# 
  2536  041A                     	;# 
  2537  041B                     	;# 
  2538  041B                     	;# 
  2539  041C                     	;# 
  2540  041D                     	;# 
  2541  041E                     	;# 
  2542  041F                     	;# 
  2543  0493                     	;# 
  2544  0494                     	;# 
  2545  0495                     	;# 
  2546  0496                     	;# 
  2547  049A                     	;# 
  2548  049B                     	;# 
  2549  049C                     	;# 
  2550  049D                     	;# 
  2551  058C                     	;# 
  2552  058C                     	;# 
  2553  058D                     	;# 
  2554  058E                     	;# 
  2555  058E                     	;# 
  2556  058F                     	;# 
  2557  0590                     	;# 
  2558  0590                     	;# 
  2559  0591                     	;# 
  2560  0592                     	;# 
  2561  0592                     	;# 
  2562  0593                     	;# 
  2563  0594                     	;# 
  2564  0594                     	;# 
  2565  0595                     	;# 
  2566  0596                     	;# 
  2567  0596                     	;# 
  2568  0597                     	;# 
  2569  0598                     	;# 
  2570  0599                     	;# 
  2571  059A                     	;# 
  2572  059B                     	;# 
  2573  059B                     	;# 
  2574  059C                     	;# 
  2575  059D                     	;# 
  2576  060C                     	;# 
  2577  060C                     	;# 
  2578  060D                     	;# 
  2579  060E                     	;# 
  2580  060F                     	;# 
  2581  060F                     	;# 
  2582  0610                     	;# 
  2583  0611                     	;# 
  2584  0612                     	;# 
  2585  0613                     	;# 
  2586  0614                     	;# 
  2587  0617                     	;# 
  2588  0618                     	;# 
  2589  0619                     	;# 
  2590  061A                     	;# 
  2591  061B                     	;# 
  2592  061C                     	;# 
  2593  0691                     	;# 
  2594  0692                     	;# 
  2595  0693                     	;# 
  2596  0694                     	;# 
  2597  0695                     	;# 
  2598  0696                     	;# 
  2599  0697                     	;# 
  2600  0699                     	;# 
  2601  069A                     	;# 
  2602  0711                     	;# 
  2603  0712                     	;# 
  2604  0713                     	;# 
  2605  0714                     	;# 
  2606  0715                     	;# 
  2607  0718                     	;# 
  2608  0718                     	;# 
  2609  0719                     	;# 
  2610  071A                     	;# 
  2611  071A                     	;# 
  2612  071B                     	;# 
  2613  071C                     	;# 
  2614  071D                     	;# 
  2615  0791                     	;# 
  2616  0791                     	;# 
  2617  0792                     	;# 
  2618  0793                     	;# 
  2619  0793                     	;# 
  2620  0794                     	;# 
  2621  0795                     	;# 
  2622  0795                     	;# 
  2623  0796                     	;# 
  2624  0797                     	;# 
  2625  0797                     	;# 
  2626  0798                     	;# 
  2627  0799                     	;# 
  2628  079A                     	;# 
  2629  080C                     	;# 
  2630  080C                     	;# 
  2631  080D                     	;# 
  2632  080E                     	;# 
  2633  080E                     	;# 
  2634  080F                     	;# 
  2635  0810                     	;# 
  2636  0810                     	;# 
  2637  0811                     	;# 
  2638  0812                     	;# 
  2639  0812                     	;# 
  2640  0813                     	;# 
  2641  0814                     	;# 
  2642  0815                     	;# 
  2643  0816                     	;# 
  2644  0817                     	;# 
  2645  0818                     	;# 
  2646  0819                     	;# 
  2647  081A                     	;# 
  2648  081A                     	;# 
  2649  081B                     	;# 
  2650  081C                     	;# 
  2651  081C                     	;# 
  2652  081D                     	;# 
  2653  088C                     	;# 
  2654  088D                     	;# 
  2655  088E                     	;# 
  2656  088F                     	;# 
  2657  088F                     	;# 
  2658  0890                     	;# 
  2659  0891                     	;# 
  2660  0892                     	;# 
  2661  0893                     	;# 
  2662  0893                     	;# 
  2663  0894                     	;# 
  2664  0895                     	;# 
  2665  0896                     	;# 
  2666  0897                     	;# 
  2667  0897                     	;# 
  2668  0898                     	;# 
  2669  0899                     	;# 
  2670  0D8C                     	;# 
  2671  0D8C                     	;# 
  2672  0D8D                     	;# 
  2673  0D8E                     	;# 
  2674  0D8F                     	;# 
  2675  0D8F                     	;# 
  2676  0D90                     	;# 
  2677  0D91                     	;# 
  2678  0D92                     	;# 
  2679  0D92                     	;# 
  2680  0D93                     	;# 
  2681  0D94                     	;# 
  2682  0D95                     	;# 
  2683  0D95                     	;# 
  2684  0D96                     	;# 
  2685  0D97                     	;# 
  2686  0D98                     	;# 
  2687  0D99                     	;# 
  2688  0D9A                     	;# 
  2689  0D9B                     	;# 
  2690  0D9C                     	;# 
  2691  0D9D                     	;# 
  2692  0D9E                     	;# 
  2693  0D9E                     	;# 
  2694  0D9F                     	;# 
  2695  0DA0                     	;# 
  2696  0DA1                     	;# 
  2697  0DA1                     	;# 
  2698  0DA2                     	;# 
  2699  0DA3                     	;# 
  2700  0DA4                     	;# 
  2701  0DA4                     	;# 
  2702  0DA5                     	;# 
  2703  0DA6                     	;# 
  2704  0DA7                     	;# 
  2705  0DA7                     	;# 
  2706  0DA8                     	;# 
  2707  0DA9                     	;# 
  2708  0DAA                     	;# 
  2709  0DAB                     	;# 
  2710  0DAC                     	;# 
  2711  0DAD                     	;# 
  2712  0DAE                     	;# 
  2713  0DAF                     	;# 
  2714  0E0F                     	;# 
  2715  0E10                     	;# 
  2716  0E11                     	;# 
  2717  0E12                     	;# 
  2718  0E13                     	;# 
  2719  0E14                     	;# 
  2720  0E15                     	;# 
  2721  0E16                     	;# 
  2722  0E17                     	;# 
  2723  0E18                     	;# 
  2724  0E19                     	;# 
  2725  0E1A                     	;# 
  2726  0E1B                     	;# 
  2727  0E1C                     	;# 
  2728  0E1D                     	;# 
  2729  0E1E                     	;# 
  2730  0E1F                     	;# 
  2731  0E20                     	;# 
  2732  0E21                     	;# 
  2733  0E22                     	;# 
  2734  0E23                     	;# 
  2735  0E24                     	;# 
  2736  0E25                     	;# 
  2737  0E26                     	;# 
  2738  0E27                     	;# 
  2739  0E28                     	;# 
  2740  0E29                     	;# 
  2741  0E2A                     	;# 
  2742  0E2B                     	;# 
  2743  0E2C                     	;# 
  2744  0E2D                     	;# 
  2745  0E2E                     	;# 
  2746  0E90                     	;# 
  2747  0E91                     	;# 
  2748  0E92                     	;# 
  2749  0E94                     	;# 
  2750  0E95                     	;# 
  2751  0E9C                     	;# 
  2752  0E9D                     	;# 
  2753  0E9E                     	;# 
  2754  0E9F                     	;# 
  2755  0EA0                     	;# 
  2756  0EA1                     	;# 
  2757  0EA2                     	;# 
  2758  0EA3                     	;# 
  2759  0EA4                     	;# 
  2760  0EA5                     	;# 
  2761  0EA6                     	;# 
  2762  0EA7                     	;# 
  2763  0F0F                     	;# 
  2764  0F10                     	;# 
  2765  0F11                     	;# 
  2766  0F12                     	;# 
  2767  0F13                     	;# 
  2768  0F14                     	;# 
  2769  0F15                     	;# 
  2770  0F16                     	;# 
  2771  0F17                     	;# 
  2772  0F18                     	;# 
  2773  0F19                     	;# 
  2774  0F1A                     	;# 
  2775  0F1B                     	;# 
  2776  0F1C                     	;# 
  2777  0F1D                     	;# 
  2778  0F1E                     	;# 
  2779  0F1F                     	;# 
  2780  0F20                     	;# 
  2781  0F21                     	;# 
  2782  0F22                     	;# 
  2783  0F23                     	;# 
  2784  0F24                     	;# 
  2785  0F25                     	;# 
  2786  0F26                     	;# 
  2787  0F27                     	;# 
  2788  0F28                     	;# 
  2789  0F29                     	;# 
  2790  0F2A                     	;# 
  2791  0F2B                     	;# 
  2792  0F2C                     	;# 
  2793  0F2D                     	;# 
  2794  0F2E                     	;# 
  2795  0F2F                     	;# 
  2796  0F30                     	;# 
  2797  0F31                     	;# 
  2798  0F32                     	;# 
  2799  0F33                     	;# 
  2800  0F34                     	;# 
  2801  0F35                     	;# 
  2802  0F36                     	;# 
  2803  0F37                     	;# 
  2804  0FE4                     	;# 
  2805  0FE5                     	;# 
  2806  0FE6                     	;# 
  2807  0FE7                     	;# 
  2808  0FE8                     	;# 
  2809  0FE9                     	;# 
  2810  0FEA                     	;# 
  2811  0FEB                     	;# 
  2812  0FED                     	;# 
  2813  0FEE                     	;# 
  2814  0FEF                     	;# 
  2815                           
  2816                           	psect	idataBANK1
  2817  0BEF                     __pidataBANK1:	
  2818                           
  2819                           ;initializer for _randx
  2820  0BEF  3401               	retlw	1
  2821  0BF0  3400               	retlw	0
  2822  0BF1  3400               	retlw	0
  2823  0BF2  3400               	retlw	0
  2824                           
  2825                           ;initializer for _fall
  2826  0BF3  3401               	retlw	1
  2827                           
  2828                           	psect	idataBANK2
  2829  0668                     __pidataBANK2:	
  2830                           
  2831                           ;initializer for _letter_r
  2832  0668  3400               	retlw	0
  2833  0669  3478               	retlw	120
  2834  066A  3448               	retlw	72
  2835  066B  3478               	retlw	120
  2836  066C  3460               	retlw	96
  2837  066D  3450               	retlw	80
  2838  066E  3448               	retlw	72
  2839  066F  3400               	retlw	0
  2840                           
  2841                           ;initializer for _letter_o
  2842  0670  3400               	retlw	0
  2843  0671  347E               	retlw	126
  2844  0672  3442               	retlw	66
  2845  0673  3442               	retlw	66
  2846  0674  3442               	retlw	66
  2847  0675  3442               	retlw	66
  2848  0676  347E               	retlw	126
  2849  0677  3400               	retlw	0
  2850                           
  2851                           ;initializer for _letter_c
  2852  0678  3400               	retlw	0
  2853  0679  347E               	retlw	126
  2854  067A  3460               	retlw	96
  2855  067B  3460               	retlw	96
  2856  067C  3460               	retlw	96
  2857  067D  3460               	retlw	96
  2858  067E  347E               	retlw	126
  2859  067F  3400               	retlw	0
  2860                           
  2861                           ;initializer for _letter_s
  2862  0680  3400               	retlw	0
  2863  0681  347E               	retlw	126
  2864  0682  3440               	retlw	64
  2865  0683  3440               	retlw	64
  2866  0684  347E               	retlw	126
  2867  0685  3402               	retlw	2
  2868  0686  347E               	retlw	126
  2869  0687  3400               	retlw	0
  2870                           
  2871                           ;initializer for _letter_hi
  2872  0688  3400               	retlw	0
  2873  0689  344A               	retlw	74
  2874  068A  3448               	retlw	72
  2875  068B  347A               	retlw	122
  2876  068C  347A               	retlw	122
  2877  068D  344A               	retlw	74
  2878  068E  344A               	retlw	74
  2879  068F  3400               	retlw	0
  2880                           
  2881                           ;initializer for _letter_w
  2882  0690  3400               	retlw	0
  2883  0691  3444               	retlw	68
  2884  0692  3444               	retlw	68
  2885  0693  3454               	retlw	84
  2886  0694  3454               	retlw	84
  2887  0695  3454               	retlw	84
  2888  0696  347C               	retlw	124
  2889  0697  3400               	retlw	0
  2890                           
  2891                           ;initializer for _letter_e
  2892  0698  3400               	retlw	0
  2893  0699  347C               	retlw	124
  2894  069A  3440               	retlw	64
  2895  069B  3470               	retlw	112
  2896  069C  3470               	retlw	112
  2897  069D  3440               	retlw	64
  2898  069E  347C               	retlw	124
  2899  069F  3400               	retlw	0
  2900                           
  2901                           ;initializer for _letter_n
  2902  06A0  3400               	retlw	0
  2903  06A1  3442               	retlw	66
  2904  06A2  3462               	retlw	98
  2905  06A3  3452               	retlw	82
  2906  06A4  344A               	retlw	74
  2907  06A5  3446               	retlw	70
  2908  06A6  3442               	retlw	66
  2909  06A7  3400               	retlw	0
  2910                           
  2911                           	psect	idataBANK3
  2912  0EDC                     __pidataBANK3:	
  2913                           
  2914                           ;initializer for _fsmStateTable
  2915  0EDC  3481               	retlw	low _do_I2C_IDLE
  2916  0EDD  340C               	retlw	high _do_I2C_IDLE
  2917  0EDE  3408               	retlw	low _do_I2C_SEND_ADR_READ
  2918  0EDF  340D               	retlw	high _do_I2C_SEND_ADR_READ
  2919  0EE0  34CF               	retlw	low _do_I2C_SEND_ADR_WRITE
  2920  0EE1  340C               	retlw	high _do_I2C_SEND_ADR_WRITE
  2921  0EE2  3445               	retlw	low _do_I2C_TX
  2922  0EE3  3404               	retlw	high _do_I2C_TX
  2923  0EE4  34DB               	retlw	low _do_I2C_RX
  2924  0EE5  3405               	retlw	high _do_I2C_RX
  2925  0EE6  34A6               	retlw	low _do_I2C_RCEN
  2926  0EE7  340C               	retlw	high _do_I2C_RCEN
  2927  0EE8  3482               	retlw	low _do_I2C_TX_EMPTY
  2928  0EE9  3407               	retlw	high _do_I2C_TX_EMPTY
  2929  0EEA  3440               	retlw	low _do_I2C_SEND_RESTART_READ
  2930  0EEB  340C               	retlw	high _do_I2C_SEND_RESTART_READ
  2931  0EEC  3448               	retlw	low _do_I2C_SEND_RESTART_WRITE
  2932  0EED  340C               	retlw	high _do_I2C_SEND_RESTART_WRITE
  2933  0EEE  3450               	retlw	low _do_I2C_SEND_RESTART
  2934  0EEF  340C               	retlw	high _do_I2C_SEND_RESTART
  2935  0EF0  3458               	retlw	low _do_I2C_SEND_STOP
  2936  0EF1  340C               	retlw	high _do_I2C_SEND_STOP
  2937  0EF2  3460               	retlw	low _do_I2C_DO_ACK
  2938  0EF3  340C               	retlw	high _do_I2C_DO_ACK
  2939  0EF4  3468               	retlw	low _do_I2C_DO_NACK_STOP
  2940  0EF5  340C               	retlw	high _do_I2C_DO_NACK_STOP
  2941  0EF6  3470               	retlw	low _do_I2C_DO_NACK_RESTART
  2942  0EF7  340C               	retlw	high _do_I2C_DO_NACK_RESTART
  2943  0EF8  34C4               	retlw	low _do_I2C_RESET
  2944  0EF9  340C               	retlw	high _do_I2C_RESET
  2945  0EFA  34B0               	retlw	low _do_I2C_DO_ADDRESS_NACK
  2946  0EFB  3407               	retlw	high _do_I2C_DO_ADDRESS_NACK
  2947                           
  2948                           	psect	nvBANK1
  2949  00E7                     __pnvBANK1:	
  2950  00E7                     _IOCCF4_InterruptHandler:	
  2951  00E7                     	ds	2
  2952  0011                     _PIR2bits	set	17
  2953  0010                     _PIR1bits	set	16
  2954  000B                     _INTCONbits	set	11
  2955  0091                     _PIE2bits	set	145
  2956  0090                     _PIE1bits	set	144
  2957  0098                     _OSCTUNE	set	152
  2958  0099                     _OSCCON	set	153
  2959  0095                     _OPTION_REGbits	set	149
  2960  008E                     _TRISC	set	142
  2961  008D                     _TRISB	set	141
  2962  008C                     _TRISA	set	140
  2963  04D6                     _PLLR	set	1238
  2964  0116                     _BORCON	set	278
  2965  010E                     _LATC	set	270
  2966  010D                     _LATB	set	269
  2967  010C                     _LATA	set	268
  2968  018C                     _ANSELA	set	396
  2969  018D                     _ANSELB	set	397
  2970  018E                     _ANSELC	set	398
  2971  0214                     _SSP1STATbits	set	532
  2972  0213                     _SSP1MSK	set	531
  2973  0211                     _SSP1BUF	set	529
  2974  0216                     _SSP1CON2bits	set	534
  2975  0212                     _SSP1ADD	set	530
  2976  0216                     _SSP1CON2	set	534
  2977  0215                     _SSP1CON1	set	533
  2978  0214                     _SSP1STAT	set	532
  2979  0215                     _SSP1CON1bits	set	533
  2980  020E                     _WPUC	set	526
  2981  020C                     _WPUA	set	524
  2982  020D                     _WPUB	set	525
  2983  028E                     _ODCONC	set	654
  2984  028D                     _ODCONB	set	653
  2985  028C                     _ODCONA	set	652
  2986  0397                     _IOCCPbits	set	919
  2987  0398                     _IOCCNbits	set	920
  2988  0399                     _IOCCFbits	set	921
  2989  0E21                     _SSPDATPPS	set	3617
  2990  0E20                     _SSPCLKPPS	set	3616
  2991  0E9C                     _RB4PPS	set	3740
  2992  0E9E                     _RB6PPS	set	3742
  2993                           
  2994                           ; #config settings
  2995  0000                     
  2996                           	psect	cinit
  2997  0032                     start_initialization:	
  2998  0032                     __initialization:	
  2999                           
  3000                           ; Initialize objects allocated to BANK1
  3001  0032  30EF               	movlw	low __pidataBANK1
  3002  0033  0084               	movwf	4
  3003  0034  308B               	movlw	(high __pidataBANK1)| (0+128)
  3004  0035  0085               	movwf	5
  3005  0036  30E2               	movlw	low __pdataBANK1
  3006  0037  0086               	movwf	6
  3007  0038  3000               	movlw	high __pdataBANK1
  3008  0039  0087               	movwf	7
  3009  003A  3005               	movlw	5
  3010  003B  318C  2424  3180   	fcall	init_ram
  3011                           
  3012                           ; Initialize objects allocated to BANK2
  3013  003E  3068               	movlw	low __pidataBANK2
  3014  003F  0084               	movwf	4
  3015  0040  3086               	movlw	(high __pidataBANK2)| (0+128)
  3016  0041  0085               	movwf	5
  3017  0042  3020               	movlw	low __pdataBANK2
  3018  0043  0086               	movwf	6
  3019  0044  3001               	movlw	high __pdataBANK2
  3020  0045  0087               	movwf	7
  3021  0046  3040               	movlw	64
  3022  0047  318C  2424  3180   	fcall	init_ram
  3023                           
  3024                           ; Initialize objects allocated to BANK3
  3025  004A  30DC               	movlw	low __pidataBANK3
  3026  004B  0084               	movwf	4
  3027  004C  308E               	movlw	(high __pidataBANK3)| (0+128)
  3028  004D  0085               	movwf	5
  3029  004E  30A0               	movlw	low __pdataBANK3
  3030  004F  0086               	movwf	6
  3031  0050  3001               	movlw	high __pdataBANK3
  3032  0051  0087               	movwf	7
  3033  0052  3020               	movlw	32
  3034  0053  318C  2424  3180   	fcall	init_ram
  3035                           
  3036                           ; Clear objects allocated to BANK0
  3037  0056  01E8               	clrf	__pbssBANK0& (0+127)
  3038  0057  01E9               	clrf	(__pbssBANK0+1)& (0+127)
  3039  0058  01EA               	clrf	(__pbssBANK0+2)& (0+127)
  3040  0059  01EB               	clrf	(__pbssBANK0+3)& (0+127)
  3041  005A  01EC               	clrf	(__pbssBANK0+4)& (0+127)
  3042                           
  3043                           ; Clear objects allocated to BANK1
  3044  005B  30A0               	movlw	low __pbssBANK1
  3045  005C  0084               	movwf	4
  3046  005D  3000               	movlw	high __pbssBANK1
  3047  005E  0085               	movwf	5
  3048  005F  3042               	movlw	66
  3049  0060  318C  241E  3180   	fcall	clear_ram0
  3050                           
  3051                           ; Clear objects allocated to BANK2
  3052  0063  3060               	movlw	low __pbssBANK2
  3053  0064  0084               	movwf	4
  3054  0065  3001               	movlw	high __pbssBANK2
  3055  0066  0085               	movwf	5
  3056  0067  3008               	movlw	8
  3057  0068  318C  241E  3180   	fcall	clear_ram0
  3058                           
  3059                           ; Clear objects allocated to BANK3
  3060  006B  30C0               	movlw	low __pbssBANK3
  3061  006C  0084               	movwf	4
  3062  006D  3001               	movlw	high __pbssBANK3
  3063  006E  0085               	movwf	5
  3064  006F  3011               	movlw	17
  3065  0070  318C  241E         	fcall	clear_ram0
  3066  0072                     end_of_initialization:	
  3067                           ;End of C runtime variable initialization code
  3068                           
  3069  0072                     __end_of__initialization:	
  3070  0072  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  3071  0073  0020               	movlb	0
  3072  0074  3183  2B21         	ljmp	_main	;jump to C main() function
  3073                           
  3074                           	psect	bssBANK0
  3075  0068                     __pbssBANK0:	
  3076  0068                     _topHalf:	
  3077  0068                     	ds	1
  3078  0069                     _wallHeight:	
  3079  0069                     	ds	1
  3080  006A                     _i:	
  3081  006A                     	ds	1
  3082  006B                     _gravityCounter:	
  3083  006B                     	ds	1
  3084  006C                     _elevation:	
  3085  006C                     	ds	1
  3086                           
  3087                           	psect	bssBANK1
  3088  00A0                     __pbssBANK1:	
  3089  00A0                     _i2c_status:	
  3090  00A0                     	ds	30
  3091  00BE                     _pixelbuffer:	
  3092  00BE                     	ds	16
  3093  00CE                     _walls:	
  3094  00CE                     	ds	8
  3095  00D6                     _shiftCounter:	
  3096  00D6                     	ds	2
  3097  00D8                     _hiscore:	
  3098  00D8                     	ds	2
  3099  00DA                     _score:	
  3100  00DA                     	ds	2
  3101  00DC                     _i2c_driver_i2cISR:	
  3102  00DC                     	ds	2
  3103  00DE                     _i2c_driver_busCollisionISR:	
  3104  00DE                     	ds	2
  3105  00E0                     _start:	
  3106  00E0                     	ds	1
  3107  00E1                     _createWall:	
  3108  00E1                     	ds	1
  3109                           
  3110                           	psect	dataBANK1
  3111  00E2                     __pdataBANK1:	
  3112  00E2                     _randx:	
  3113  00E2                     	ds	4
  3114  00E6                     _fall:	
  3115  00E6                     	ds	1
  3116                           
  3117                           	psect	bssBANK2
  3118  0160                     __pbssBANK2:	
  3119  0160                     _letter_space:	
  3120  0160                     	ds	8
  3121                           
  3122                           	psect	dataBANK2
  3123  0120                     __pdataBANK2:	
  3124  0120                     _letter_r:	
  3125  0120                     	ds	8
  3126  0128                     _letter_o:	
  3127  0128                     	ds	8
  3128  0130                     _letter_c:	
  3129  0130                     	ds	8
  3130  0138                     _letter_s:	
  3131  0138                     	ds	8
  3132  0140                     _letter_hi:	
  3133  0140                     	ds	8
  3134  0148                     _letter_w:	
  3135  0148                     	ds	8
  3136  0150                     _letter_e:	
  3137  0150                     	ds	8
  3138  0158                     _letter_n:	
  3139  0158                     	ds	8
  3140                           
  3141                           	psect	bssBANK3
  3142  01C0                     __pbssBANK3:	
  3143  01C0                     _writebuffer:	
  3144  01C0                     	ds	17
  3145                           
  3146                           	psect	dataBANK3
  3147  01A0                     __pdataBANK3:	
  3148  01A0                     _fsmStateTable:	
  3149  01A0                     	ds	32
  3150                           
  3151                           	psect	inittext
  3152  0C24                     init_ram:	
  3153  0C24  00FE               	movwf	126
  3154  0C25                     initloop:	
  3155  0C25  0012               	moviw fsr0++
  3156  0C26  001E               	movwi fsr1++
  3157  0C27  0BFE               	decfsz	126,f
  3158  0C28  2C25               	goto	initloop
  3159  0C29  3400               	retlw	0
  3160                           
  3161                           	psect	clrtext
  3162  0C1E                     clear_ram0:	
  3163                           ;	Called with FSR0 containing the base address, and
  3164                           ;	WREG with the size to clear
  3165                           
  3166  0C1E  0064               	clrwdt	;clear the watchdog before getting into this loop
  3167  0C1F                     clrloop0:	
  3168  0C1F  0180               	clrf	0	;clear RAM location pointed to by FSR
  3169  0C20  3101               	addfsr 0,1
  3170  0C21  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  3171  0C22  2C1F               	goto	clrloop0	;have we reached the end yet?
  3172  0C23  3400               	retlw	0	;all done for this memory range, return
  3173                           
  3174                           	psect	cstackCOMMON
  3175  0070                     __pcstackCOMMON:	
  3176  0070                     ?_mssp_IRQisEnabled:	
  3177  0070                     ?_i2c_driver_open:	
  3178                           ; 1 bit 
  3179                           
  3180  0070                     ?_i2c_driver_isNACK:	
  3181                           ; 1 bit 
  3182                           
  3183  0070                     ?i1_i2c_driver_isNACK:	
  3184                           ; 1 bit 
  3185                           
  3186  0070                     ?_IOCCF4_DefaultInterruptHandler:	
  3187                           ; 1 bit 
  3188                           
  3189  0070                     ??_IOCCF4_DefaultInterruptHandler:	
  3190                           ; 1 bytes @ 0x0
  3191                           
  3192  0070                     ?_IOCCF4_ISR:	
  3193                           ; 1 bytes @ 0x0
  3194                           
  3195  0070                     ?_OSCILLATOR_Initialize:	
  3196                           ; 1 bytes @ 0x0
  3197                           
  3198  0070                     ?_i2c_open:	
  3199                           ; 1 bytes @ 0x0
  3200                           
  3201  0070                     ?_i2c_masterWrite:	
  3202                           ; 1 bytes @ 0x0
  3203                           
  3204  0070                     ?_i2c_close:	
  3205                           ; 1 bytes @ 0x0
  3206                           
  3207  0070                     ?_i2c_busCollisionISR:	
  3208                           ; 1 bytes @ 0x0
  3209                           
  3210  0070                     ??_i2c_busCollisionISR:	
  3211                           ; 1 bytes @ 0x0
  3212                           
  3213  0070                     ?_i2c_ISR:	
  3214                           ; 1 bytes @ 0x0
  3215                           
  3216  0070                     ?_i2c_poller:	
  3217                           ; 1 bytes @ 0x0
  3218                           
  3219  0070                     ?_PIN_MANAGER_Initialize:	
  3220                           ; 1 bytes @ 0x0
  3221                           
  3222  0070                     ?_PIN_MANAGER_IOC:	
  3223                           ; 1 bytes @ 0x0
  3224                           
  3225  0070                     ?_SYSTEM_Initialize:	
  3226                           ; 1 bytes @ 0x0
  3227                           
  3228  0070                     ?_writeDisplay:	
  3229                           ; 1 bytes @ 0x0
  3230                           
  3231  0070                     ?_clearPixels:	
  3232                           ; 1 bytes @ 0x0
  3233                           
  3234  0070                     ?_initializeDisplay:	
  3235                           ; 1 bytes @ 0x0
  3236                           
  3237  0070                     ?_reverse:	
  3238                           ; 1 bytes @ 0x0
  3239                           
  3240  0070                     ?_drawWalls:	
  3241                           ; 1 bytes @ 0x0
  3242                           
  3243  0070                     ?_shiftWalls:	
  3244                           ; 1 bytes @ 0x0
  3245                           
  3246  0070                     ?_buttonInterrupt:	
  3247                           ; 1 bytes @ 0x0
  3248                           
  3249  0070                     ??_buttonInterrupt:	
  3250                           ; 1 bytes @ 0x0
  3251                           
  3252  0070                     ?_write:	
  3253                           ; 1 bytes @ 0x0
  3254                           
  3255  0070                     ?_endGame:	
  3256                           ; 1 bytes @ 0x0
  3257                           
  3258  0070                     ?_main:	
  3259                           ; 1 bytes @ 0x0
  3260                           
  3261  0070                     ?_mssp_disableIRQ:	
  3262                           ; 1 bytes @ 0x0
  3263                           
  3264  0070                     ?_mssp_clearIRQ:	
  3265                           ; 1 bytes @ 0x0
  3266                           
  3267  0070                     ?_mssp_setIRQ:	
  3268                           ; 1 bytes @ 0x0
  3269                           
  3270  0070                     ?_mssp_waitForEvent:	
  3271                           ; 1 bytes @ 0x0
  3272                           
  3273  0070                     ?_i2c_driver_resetBus:	
  3274                           ; 1 bytes @ 0x0
  3275                           
  3276  0070                     ?_i2c_driver_start:	
  3277                           ; 1 bytes @ 0x0
  3278                           
  3279  0070                     ?_i2c_driver_restart:	
  3280                           ; 1 bytes @ 0x0
  3281                           
  3282  0070                     ?_i2c_driver_stop:	
  3283                           ; 1 bytes @ 0x0
  3284                           
  3285  0070                     ?_i2c_driver_startRX:	
  3286                           ; 1 bytes @ 0x0
  3287                           
  3288  0070                     ?_i2c_driver_getRXData:	
  3289                           ; 1 bytes @ 0x0
  3290                           
  3291  0070                     ?_i2c_driver_TXData:	
  3292                           ; 1 bytes @ 0x0
  3293                           
  3294  0070                     ?_i2c_driver_sendACK:	
  3295                           ; 1 bytes @ 0x0
  3296                           
  3297  0070                     ?_i2c_driver_sendNACK:	
  3298                           ; 1 bytes @ 0x0
  3299                           
  3300  0070                     ?_i2c_driver_clearBusCollision:	
  3301                           ; 1 bytes @ 0x0
  3302                           
  3303  0070                     ??_i2c_driver_clearBusCollision:	
  3304                           ; 1 bytes @ 0x0
  3305                           
  3306  0070                     ?_INTERRUPT_InterruptManager:	
  3307                           ; 1 bytes @ 0x0
  3308                           
  3309  0070                     ?_i2c_masterOperation:	
  3310                           ; 1 bytes @ 0x0
  3311                           
  3312  0070                     ?_do_I2C_RESET:	
  3313                           ; 1 bytes @ 0x0
  3314                           
  3315  0070                     ?_do_I2C_IDLE:	
  3316                           ; 1 bytes @ 0x0
  3317                           
  3318  0070                     ?_do_I2C_SEND_RESTART_READ:	
  3319                           ; 1 bytes @ 0x0
  3320                           
  3321  0070                     ?_do_I2C_SEND_RESTART_WRITE:	
  3322                           ; 1 bytes @ 0x0
  3323                           
  3324  0070                     ?_do_I2C_SEND_RESTART:	
  3325                           ; 1 bytes @ 0x0
  3326                           
  3327  0070                     ?_do_I2C_SEND_STOP:	
  3328                           ; 1 bytes @ 0x0
  3329                           
  3330  0070                     ?_do_I2C_SEND_ADR_READ:	
  3331                           ; 1 bytes @ 0x0
  3332                           
  3333  0070                     ?_do_I2C_SEND_ADR_WRITE:	
  3334                           ; 1 bytes @ 0x0
  3335                           
  3336  0070                     ?_do_I2C_RCEN:	
  3337                           ; 1 bytes @ 0x0
  3338                           
  3339  0070                     ?_do_I2C_DO_ACK:	
  3340                           ; 1 bytes @ 0x0
  3341                           
  3342  0070                     ?_do_I2C_DO_NACK_STOP:	
  3343                           ; 1 bytes @ 0x0
  3344                           
  3345  0070                     ?_do_I2C_DO_NACK_RESTART:	
  3346                           ; 1 bytes @ 0x0
  3347                           
  3348  0070                     ?_do_I2C_DO_ADDRESS_NACK:	
  3349                           ; 1 bytes @ 0x0
  3350                           
  3351  0070                     ?_do_I2C_TX:	
  3352                           ; 1 bytes @ 0x0
  3353                           
  3354  0070                     ?_do_I2C_RX:	
  3355                           ; 1 bytes @ 0x0
  3356                           
  3357  0070                     ?_do_I2C_TX_EMPTY:	
  3358                           ; 1 bytes @ 0x0
  3359                           
  3360  0070                     ?i1_mssp_clearIRQ:	
  3361                           ; 1 bytes @ 0x0
  3362                           
  3363  0070                     ??i1_mssp_clearIRQ:	
  3364                           ; 1 bytes @ 0x0
  3365                           
  3366  0070                     ?i1_mssp_setIRQ:	
  3367                           ; 1 bytes @ 0x0
  3368                           
  3369  0070                     ??i1_mssp_setIRQ:	
  3370                           ; 1 bytes @ 0x0
  3371                           
  3372  0070                     ?i1_i2c_driver_resetBus:	
  3373                           ; 1 bytes @ 0x0
  3374                           
  3375  0070                     ??i1_i2c_driver_resetBus:	
  3376                           ; 1 bytes @ 0x0
  3377                           
  3378  0070                     ?i1_i2c_driver_restart:	
  3379                           ; 1 bytes @ 0x0
  3380                           
  3381  0070                     ??i1_i2c_driver_restart:	
  3382                           ; 1 bytes @ 0x0
  3383                           
  3384  0070                     ?i1_i2c_driver_stop:	
  3385                           ; 1 bytes @ 0x0
  3386                           
  3387  0070                     ??i1_i2c_driver_stop:	
  3388                           ; 1 bytes @ 0x0
  3389                           
  3390  0070                     ??i1_i2c_driver_isNACK:	
  3391                           ; 1 bytes @ 0x0
  3392                           
  3393  0070                     ?i1_i2c_driver_startRX:	
  3394                           ; 1 bytes @ 0x0
  3395                           
  3396  0070                     ??i1_i2c_driver_startRX:	
  3397                           ; 1 bytes @ 0x0
  3398                           
  3399  0070                     ?i1_i2c_driver_getRXData:	
  3400                           ; 1 bytes @ 0x0
  3401                           
  3402  0070                     ??i1_i2c_driver_getRXData:	
  3403                           ; 1 bytes @ 0x0
  3404                           
  3405  0070                     ?i1_i2c_driver_TXData:	
  3406                           ; 1 bytes @ 0x0
  3407                           
  3408  0070                     ??i1_i2c_driver_TXData:	
  3409                           ; 1 bytes @ 0x0
  3410                           
  3411  0070                     ?i1_i2c_driver_sendACK:	
  3412                           ; 1 bytes @ 0x0
  3413                           
  3414  0070                     ??i1_i2c_driver_sendACK:	
  3415                           ; 1 bytes @ 0x0
  3416                           
  3417  0070                     ?i1_i2c_driver_sendNACK:	
  3418                           ; 1 bytes @ 0x0
  3419                           
  3420  0070                     ??i1_i2c_driver_sendNACK:	
  3421                           ; 1 bytes @ 0x0
  3422                           
  3423  0070                     ?i1_i2c_setBuffer:	
  3424                           ; 1 bytes @ 0x0
  3425                           
  3426  0070                     ?i1_do_I2C_RESET:	
  3427                           ; 1 bytes @ 0x0
  3428                           
  3429  0070                     ??i1_do_I2C_RESET:	
  3430                           ; 1 bytes @ 0x0
  3431                           
  3432  0070                     ?i1_do_I2C_IDLE:	
  3433                           ; 1 bytes @ 0x0
  3434                           
  3435  0070                     ??i1_do_I2C_IDLE:	
  3436                           ; 1 bytes @ 0x0
  3437                           
  3438  0070                     ?i1_do_I2C_SEND_RESTART_READ:	
  3439                           ; 1 bytes @ 0x0
  3440                           
  3441  0070                     ??i1_do_I2C_SEND_RESTART_READ:	
  3442                           ; 1 bytes @ 0x0
  3443                           
  3444  0070                     ?i1_do_I2C_SEND_RESTART_WRITE:	
  3445                           ; 1 bytes @ 0x0
  3446                           
  3447  0070                     ??i1_do_I2C_SEND_RESTART_WRITE:	
  3448                           ; 1 bytes @ 0x0
  3449                           
  3450  0070                     ?i1_do_I2C_SEND_RESTART:	
  3451                           ; 1 bytes @ 0x0
  3452                           
  3453  0070                     ??i1_do_I2C_SEND_RESTART:	
  3454                           ; 1 bytes @ 0x0
  3455                           
  3456  0070                     ?i1_do_I2C_SEND_STOP:	
  3457                           ; 1 bytes @ 0x0
  3458                           
  3459  0070                     ??i1_do_I2C_SEND_STOP:	
  3460                           ; 1 bytes @ 0x0
  3461                           
  3462  0070                     ?i1_do_I2C_SEND_ADR_READ:	
  3463                           ; 1 bytes @ 0x0
  3464                           
  3465  0070                     ?i1_do_I2C_SEND_ADR_WRITE:	
  3466                           ; 1 bytes @ 0x0
  3467                           
  3468  0070                     ?i1_do_I2C_RCEN:	
  3469                           ; 1 bytes @ 0x0
  3470                           
  3471  0070                     ??i1_do_I2C_RCEN:	
  3472                           ; 1 bytes @ 0x0
  3473                           
  3474  0070                     ?i1_do_I2C_DO_ACK:	
  3475                           ; 1 bytes @ 0x0
  3476                           
  3477  0070                     ??i1_do_I2C_DO_ACK:	
  3478                           ; 1 bytes @ 0x0
  3479                           
  3480  0070                     ?i1_do_I2C_DO_NACK_STOP:	
  3481                           ; 1 bytes @ 0x0
  3482                           
  3483  0070                     ??i1_do_I2C_DO_NACK_STOP:	
  3484                           ; 1 bytes @ 0x0
  3485                           
  3486  0070                     ?i1_do_I2C_DO_NACK_RESTART:	
  3487                           ; 1 bytes @ 0x0
  3488                           
  3489  0070                     ??i1_do_I2C_DO_NACK_RESTART:	
  3490                           ; 1 bytes @ 0x0
  3491                           
  3492  0070                     ?i1_do_I2C_DO_ADDRESS_NACK:	
  3493                           ; 1 bytes @ 0x0
  3494                           
  3495  0070                     ?i1_do_I2C_TX:	
  3496                           ; 1 bytes @ 0x0
  3497                           
  3498  0070                     ?i1_do_I2C_RX:	
  3499                           ; 1 bytes @ 0x0
  3500                           
  3501  0070                     ?i1_do_I2C_TX_EMPTY:	
  3502                           ; 1 bytes @ 0x0
  3503                           
  3504  0070                     ?i1_i2c_ISR:	
  3505                           ; 1 bytes @ 0x0
  3506                           
  3507  0070                     ?i1_setCallBack:	
  3508                           ; 1 bytes @ 0x0
  3509                           
  3510  0070                     i1i2c_driver_TXData@d:	
  3511                           ; 1 bytes @ 0x0
  3512                           
  3513  0070                     i1i2c_setBuffer@buffer:	
  3514                           ; 1 bytes @ 0x0
  3515                           
  3516  0070                     i1setCallBack@cb:	
  3517                           ; 2 bytes @ 0x0
  3518                           
  3519                           
  3520                           ; 2 bytes @ 0x0
  3521  0070                     	ds	1
  3522  0071                     ??_IOCCF4_ISR:	
  3523  0071                     ??_PIN_MANAGER_IOC:	
  3524                           ; 1 bytes @ 0x1
  3525                           
  3526  0071                     ??i1_do_I2C_SEND_ADR_READ:	
  3527                           ; 1 bytes @ 0x1
  3528                           
  3529  0071                     ??i1_do_I2C_SEND_ADR_WRITE:	
  3530                           ; 1 bytes @ 0x1
  3531                           
  3532                           
  3533                           ; 1 bytes @ 0x1
  3534  0071                     	ds	1
  3535  0072                     i1setCallBack@p:	
  3536  0072                     i1i2c_setBuffer@bufferSize:	
  3537                           ; 1 bytes @ 0x2
  3538                           
  3539                           
  3540                           ; 2 bytes @ 0x2
  3541  0072                     	ds	1
  3542  0073                     ??i1_setCallBack:	
  3543                           
  3544                           ; 1 bytes @ 0x3
  3545  0073                     	ds	1
  3546  0074                     ??i1_i2c_setBuffer:	
  3547  0074                     i1setCallBack@idx:	
  3548                           ; 1 bytes @ 0x4
  3549                           
  3550                           
  3551                           ; 1 bytes @ 0x4
  3552  0074                     	ds	1
  3553  0075                     ?i1_i2c_setDataCompleteCallback:	
  3554  0075                     i1i2c_setDataCompleteCallback@cb:	
  3555                           ; 1 bytes @ 0x5
  3556                           
  3557                           
  3558                           ; 2 bytes @ 0x5
  3559  0075                     	ds	2
  3560  0077                     i1i2c_setDataCompleteCallback@p:	
  3561                           
  3562                           ; 1 bytes @ 0x7
  3563  0077                     	ds	1
  3564  0078                     ??i1_i2c_setDataCompleteCallback:	
  3565                           
  3566                           ; 1 bytes @ 0x8
  3567  0078                     	ds	1
  3568  0079                     ?i1_wr1RegCompleteHandler:	
  3569  0079                     ?i1_rd1RegCompleteHandler:	
  3570                           ; 1 bytes @ 0x9
  3571                           
  3572  0079                     ?i1_rd2RegCompleteHandler:	
  3573                           ; 1 bytes @ 0x9
  3574                           
  3575  0079                     ?i1_wr2RegCompleteHandler:	
  3576                           ; 1 bytes @ 0x9
  3577                           
  3578  0079                     ?i1_rdBlkRegCompleteHandler:	
  3579                           ; 1 bytes @ 0x9
  3580                           
  3581  0079                     ?i1_returnStop:	
  3582                           ; 1 bytes @ 0x9
  3583                           
  3584  0079                     ?i1_returnReset:	
  3585                           ; 1 bytes @ 0x9
  3586                           
  3587  0079                     ?i1_i2c_restartWrite:	
  3588                           ; 1 bytes @ 0x9
  3589                           
  3590  0079                     i1wr1RegCompleteHandler@p:	
  3591                           ; 1 bytes @ 0x9
  3592                           
  3593  0079                     i1rd1RegCompleteHandler@p:	
  3594                           ; 1 bytes @ 0x9
  3595                           
  3596  0079                     i1rd2RegCompleteHandler@p:	
  3597                           ; 1 bytes @ 0x9
  3598                           
  3599  0079                     i1wr2RegCompleteHandler@p:	
  3600                           ; 1 bytes @ 0x9
  3601                           
  3602  0079                     i1rdBlkRegCompleteHandler@p:	
  3603                           ; 1 bytes @ 0x9
  3604                           
  3605  0079                     i1returnStop@p:	
  3606                           ; 1 bytes @ 0x9
  3607                           
  3608  0079                     i1returnReset@p:	
  3609                           ; 1 bytes @ 0x9
  3610                           
  3611  0079                     i1i2c_restartWrite@p:	
  3612                           ; 1 bytes @ 0x9
  3613                           
  3614                           
  3615                           ; 1 bytes @ 0x9
  3616  0079                     	ds	1
  3617  007A                     ??i1_wr1RegCompleteHandler:	
  3618  007A                     ??i1_rd1RegCompleteHandler:	
  3619                           ; 1 bytes @ 0xA
  3620                           
  3621  007A                     ??i1_rd2RegCompleteHandler:	
  3622                           ; 1 bytes @ 0xA
  3623                           
  3624  007A                     ??i1_wr2RegCompleteHandler:	
  3625                           ; 1 bytes @ 0xA
  3626                           
  3627  007A                     ??i1_rdBlkRegCompleteHandler:	
  3628                           ; 1 bytes @ 0xA
  3629                           
  3630  007A                     ??i1_do_I2C_DO_ADDRESS_NACK:	
  3631                           ; 1 bytes @ 0xA
  3632                           
  3633  007A                     ??i1_do_I2C_TX:	
  3634                           ; 1 bytes @ 0xA
  3635                           
  3636  007A                     ??i1_do_I2C_RX:	
  3637                           ; 1 bytes @ 0xA
  3638                           
  3639  007A                     ??i1_do_I2C_TX_EMPTY:	
  3640                           ; 1 bytes @ 0xA
  3641                           
  3642  007A                     ??i1_returnStop:	
  3643                           ; 1 bytes @ 0xA
  3644                           
  3645  007A                     ??i1_returnReset:	
  3646                           ; 1 bytes @ 0xA
  3647                           
  3648  007A                     ??i1_i2c_restartWrite:	
  3649                           ; 1 bytes @ 0xA
  3650                           
  3651                           
  3652                           ; 1 bytes @ 0xA
  3653  007A                     	ds	2
  3654  007C                     i1_do_I2C_TX$1049:	
  3655                           
  3656                           ; 2 bytes @ 0xC
  3657  007C                     	ds	2
  3658                           
  3659                           	psect	cstackBANK0
  3660  0020                     __pcstackBANK0:	
  3661  0020                     ??i1_i2c_ISR:	
  3662                           
  3663                           ; 1 bytes @ 0x0
  3664  0020                     	ds	1
  3665  0021                     ??_INTERRUPT_InterruptManager:	
  3666                           
  3667                           ; 1 bytes @ 0x1
  3668  0021                     	ds	1
  3669  0022                     ?_IOCCF4_SetInterruptHandler:	
  3670  0022                     ??_OSCILLATOR_Initialize:	
  3671                           ; 1 bytes @ 0x2
  3672                           
  3673  0022                     ?_i2c_setBuffer:	
  3674                           ; 1 bytes @ 0x2
  3675                           
  3676  0022                     ??_i2c_close:	
  3677                           ; 1 bytes @ 0x2
  3678                           
  3679  0022                     ?_setCallBack:	
  3680                           ; 1 bytes @ 0x2
  3681                           
  3682  0022                     ?_drawPixel:	
  3683                           ; 1 bytes @ 0x2
  3684                           
  3685  0022                     ??_clearPixels:	
  3686                           ; 1 bytes @ 0x2
  3687                           
  3688  0022                     ??_reverse:	
  3689                           ; 1 bytes @ 0x2
  3690                           
  3691  0022                     ??_mssp_IRQisEnabled:	
  3692                           ; 1 bytes @ 0x2
  3693                           
  3694  0022                     ??_mssp_disableIRQ:	
  3695                           ; 1 bytes @ 0x2
  3696                           
  3697  0022                     ??_mssp_clearIRQ:	
  3698                           ; 1 bytes @ 0x2
  3699                           
  3700  0022                     ??_mssp_setIRQ:	
  3701                           ; 1 bytes @ 0x2
  3702                           
  3703  0022                     ??_mssp_waitForEvent:	
  3704                           ; 1 bytes @ 0x2
  3705                           
  3706  0022                     ??_i2c_driver_open:	
  3707                           ; 1 bytes @ 0x2
  3708                           
  3709  0022                     ??_i2c_driver_resetBus:	
  3710                           ; 1 bytes @ 0x2
  3711                           
  3712  0022                     ??_i2c_driver_start:	
  3713                           ; 1 bytes @ 0x2
  3714                           
  3715  0022                     ??_i2c_driver_restart:	
  3716                           ; 1 bytes @ 0x2
  3717                           
  3718  0022                     ??_i2c_driver_stop:	
  3719                           ; 1 bytes @ 0x2
  3720                           
  3721  0022                     ??_i2c_driver_isNACK:	
  3722                           ; 1 bytes @ 0x2
  3723                           
  3724  0022                     ??_i2c_driver_startRX:	
  3725                           ; 1 bytes @ 0x2
  3726                           
  3727  0022                     ??_i2c_driver_getRXData:	
  3728                           ; 1 bytes @ 0x2
  3729                           
  3730  0022                     ??_i2c_driver_TXData:	
  3731                           ; 1 bytes @ 0x2
  3732                           
  3733  0022                     ??_i2c_driver_sendACK:	
  3734                           ; 1 bytes @ 0x2
  3735                           
  3736  0022                     ??_i2c_driver_sendNACK:	
  3737                           ; 1 bytes @ 0x2
  3738                           
  3739  0022                     ?_i2c_driver_setBusCollisionISR:	
  3740                           ; 1 bytes @ 0x2
  3741                           
  3742  0022                     ?_i2c_driver_setI2cISR:	
  3743                           ; 1 bytes @ 0x2
  3744                           
  3745  0022                     ??_do_I2C_RESET:	
  3746                           ; 1 bytes @ 0x2
  3747                           
  3748  0022                     ??_do_I2C_IDLE:	
  3749                           ; 1 bytes @ 0x2
  3750                           
  3751  0022                     ??_do_I2C_SEND_RESTART_READ:	
  3752                           ; 1 bytes @ 0x2
  3753                           
  3754  0022                     ??_do_I2C_SEND_RESTART_WRITE:	
  3755                           ; 1 bytes @ 0x2
  3756                           
  3757  0022                     ??_do_I2C_SEND_RESTART:	
  3758                           ; 1 bytes @ 0x2
  3759                           
  3760  0022                     ??_do_I2C_SEND_STOP:	
  3761                           ; 1 bytes @ 0x2
  3762                           
  3763  0022                     ??_do_I2C_RCEN:	
  3764                           ; 1 bytes @ 0x2
  3765                           
  3766  0022                     ??_do_I2C_DO_ACK:	
  3767                           ; 1 bytes @ 0x2
  3768                           
  3769  0022                     ??_do_I2C_DO_NACK_STOP:	
  3770                           ; 1 bytes @ 0x2
  3771                           
  3772  0022                     ??_do_I2C_DO_NACK_RESTART:	
  3773                           ; 1 bytes @ 0x2
  3774                           
  3775  0022                     ?___awdiv:	
  3776                           ; 1 bytes @ 0x2
  3777                           
  3778  0022                     ?___lmul:	
  3779                           ; 2 bytes @ 0x2
  3780                           
  3781  0022                     drawPixel@y:	
  3782                           ; 4 bytes @ 0x2
  3783                           
  3784  0022                     mssp_waitForEvent@timeout:	
  3785                           ; 1 bytes @ 0x2
  3786                           
  3787  0022                     i2c_driver_TXData@d:	
  3788                           ; 1 bytes @ 0x2
  3789                           
  3790  0022                     IOCCF4_SetInterruptHandler@InterruptHandler:	
  3791                           ; 1 bytes @ 0x2
  3792                           
  3793  0022                     i2c_driver_setBusCollisionISR@f:	
  3794                           ; 2 bytes @ 0x2
  3795                           
  3796  0022                     i2c_driver_setI2cISR@f:	
  3797                           ; 2 bytes @ 0x2
  3798                           
  3799  0022                     i2c_setBuffer@buffer:	
  3800                           ; 2 bytes @ 0x2
  3801                           
  3802  0022                     setCallBack@cb:	
  3803                           ; 2 bytes @ 0x2
  3804                           
  3805  0022                     ___awdiv@divisor:	
  3806                           ; 2 bytes @ 0x2
  3807                           
  3808  0022                     ___lmul@multiplier:	
  3809                           ; 2 bytes @ 0x2
  3810                           
  3811                           
  3812                           ; 4 bytes @ 0x2
  3813  0022                     	ds	1
  3814  0023                     ??_do_I2C_SEND_ADR_READ:	
  3815  0023                     ??_do_I2C_SEND_ADR_WRITE:	
  3816                           ; 1 bytes @ 0x3
  3817                           
  3818  0023                     drawPixel@color:	
  3819                           ; 1 bytes @ 0x3
  3820                           
  3821  0023                     i2c_close@ret:	
  3822                           ; 1 bytes @ 0x3
  3823                           
  3824                           
  3825                           ; 1 bytes @ 0x3
  3826  0023                     	ds	1
  3827  0024                     ??_IOCCF4_SetInterruptHandler:	
  3828  0024                     ??_i2c_open:	
  3829                           ; 1 bytes @ 0x4
  3830                           
  3831  0024                     ??_PIN_MANAGER_Initialize:	
  3832                           ; 1 bytes @ 0x4
  3833                           
  3834  0024                     ??_SYSTEM_Initialize:	
  3835                           ; 1 bytes @ 0x4
  3836                           
  3837  0024                     ??_drawPixel:	
  3838                           ; 1 bytes @ 0x4
  3839                           
  3840  0024                     ??_i2c_driver_setBusCollisionISR:	
  3841                           ; 1 bytes @ 0x4
  3842                           
  3843  0024                     ??_i2c_driver_setI2cISR:	
  3844                           ; 1 bytes @ 0x4
  3845                           
  3846  0024                     setCallBack@p:	
  3847                           ; 1 bytes @ 0x4
  3848                           
  3849  0024                     i2c_setBuffer@bufferSize:	
  3850                           ; 1 bytes @ 0x4
  3851                           
  3852  0024                     ___awdiv@dividend:	
  3853                           ; 2 bytes @ 0x4
  3854                           
  3855                           
  3856                           ; 2 bytes @ 0x4
  3857  0024                     	ds	1
  3858  0025                     ??_setCallBack:	
  3859  0025                     reverse@b:	
  3860                           ; 1 bytes @ 0x5
  3861                           
  3862  0025                     i2c_open@address:	
  3863                           ; 1 bytes @ 0x5
  3864                           
  3865                           
  3866                           ; 1 bytes @ 0x5
  3867  0025                     	ds	1
  3868  0026                     ??_i2c_setBuffer:	
  3869  0026                     ??_drawWalls:	
  3870                           ; 1 bytes @ 0x6
  3871                           
  3872  0026                     ??___awdiv:	
  3873                           ; 1 bytes @ 0x6
  3874                           
  3875  0026                     i2c_open@ret:	
  3876                           ; 1 bytes @ 0x6
  3877                           
  3878  0026                     setCallBack@idx:	
  3879                           ; 1 bytes @ 0x6
  3880                           
  3881  0026                     ___lmul@multiplicand:	
  3882                           ; 1 bytes @ 0x6
  3883                           
  3884                           
  3885                           ; 4 bytes @ 0x6
  3886  0026                     	ds	1
  3887  0027                     ?_i2c_setDataCompleteCallback:	
  3888  0027                     ?_i2c_setAddressNACKCallback:	
  3889                           ; 1 bytes @ 0x7
  3890                           
  3891  0027                     ___awdiv@counter:	
  3892                           ; 1 bytes @ 0x7
  3893                           
  3894  0027                     i2c_setDataCompleteCallback@cb:	
  3895                           ; 1 bytes @ 0x7
  3896                           
  3897  0027                     i2c_setAddressNACKCallback@cb:	
  3898                           ; 2 bytes @ 0x7
  3899                           
  3900                           
  3901                           ; 2 bytes @ 0x7
  3902  0027                     	ds	1
  3903  0028                     ___awdiv@sign:	
  3904                           
  3905                           ; 1 bytes @ 0x8
  3906  0028                     	ds	1
  3907  0029                     i2c_setDataCompleteCallback@p:	
  3908  0029                     i2c_setAddressNACKCallback@p:	
  3909                           ; 1 bytes @ 0x9
  3910                           
  3911  0029                     ___awdiv@quotient:	
  3912                           ; 1 bytes @ 0x9
  3913                           
  3914                           
  3915                           ; 2 bytes @ 0x9
  3916  0029                     	ds	1
  3917  002A                     ??_i2c_setDataCompleteCallback:	
  3918  002A                     ??_i2c_setAddressNACKCallback:	
  3919                           ; 1 bytes @ 0xA
  3920                           
  3921  002A                     ??___lmul:	
  3922                           ; 1 bytes @ 0xA
  3923                           
  3924  002A                     drawPixel@x:	
  3925                           ; 1 bytes @ 0xA
  3926                           
  3927  002A                     ___lmul@product:	
  3928                           ; 1 bytes @ 0xA
  3929                           
  3930                           
  3931                           ; 4 bytes @ 0xA
  3932  002A                     	ds	1
  3933  002B                     ?_i2c_restartWrite:	
  3934  002B                     ?_returnStop:	
  3935                           ; 1 bytes @ 0xB
  3936                           
  3937  002B                     ?_returnReset:	
  3938                           ; 1 bytes @ 0xB
  3939                           
  3940  002B                     ?_wr1RegCompleteHandler:	
  3941                           ; 1 bytes @ 0xB
  3942                           
  3943  002B                     ?_rd1RegCompleteHandler:	
  3944                           ; 1 bytes @ 0xB
  3945                           
  3946  002B                     ?_rd2RegCompleteHandler:	
  3947                           ; 1 bytes @ 0xB
  3948                           
  3949  002B                     ?_wr2RegCompleteHandler:	
  3950                           ; 1 bytes @ 0xB
  3951                           
  3952  002B                     ?_rdBlkRegCompleteHandler:	
  3953                           ; 1 bytes @ 0xB
  3954                           
  3955  002B                     wr1RegCompleteHandler@p:	
  3956                           ; 1 bytes @ 0xB
  3957                           
  3958  002B                     rd1RegCompleteHandler@p:	
  3959                           ; 1 bytes @ 0xB
  3960                           
  3961  002B                     rd2RegCompleteHandler@p:	
  3962                           ; 1 bytes @ 0xB
  3963                           
  3964  002B                     wr2RegCompleteHandler@p:	
  3965                           ; 1 bytes @ 0xB
  3966                           
  3967  002B                     rdBlkRegCompleteHandler@p:	
  3968                           ; 1 bytes @ 0xB
  3969                           
  3970  002B                     returnStop@p:	
  3971                           ; 1 bytes @ 0xB
  3972                           
  3973  002B                     returnReset@p:	
  3974                           ; 1 bytes @ 0xB
  3975                           
  3976  002B                     i2c_restartWrite@p:	
  3977                           ; 1 bytes @ 0xB
  3978                           
  3979                           
  3980                           ; 1 bytes @ 0xB
  3981  002B                     	ds	1
  3982  002C                     ??_i2c_restartWrite:	
  3983  002C                     ??_returnStop:	
  3984                           ; 1 bytes @ 0xC
  3985                           
  3986  002C                     ??_returnReset:	
  3987                           ; 1 bytes @ 0xC
  3988                           
  3989  002C                     ??_wr1RegCompleteHandler:	
  3990                           ; 1 bytes @ 0xC
  3991                           
  3992  002C                     ??_rd1RegCompleteHandler:	
  3993                           ; 1 bytes @ 0xC
  3994                           
  3995  002C                     ??_rd2RegCompleteHandler:	
  3996                           ; 1 bytes @ 0xC
  3997                           
  3998  002C                     ??_wr2RegCompleteHandler:	
  3999                           ; 1 bytes @ 0xC
  4000                           
  4001  002C                     ??_rdBlkRegCompleteHandler:	
  4002                           ; 1 bytes @ 0xC
  4003                           
  4004  002C                     ??_do_I2C_DO_ADDRESS_NACK:	
  4005                           ; 1 bytes @ 0xC
  4006                           
  4007  002C                     ??_do_I2C_TX:	
  4008                           ; 1 bytes @ 0xC
  4009                           
  4010  002C                     ??_do_I2C_RX:	
  4011                           ; 1 bytes @ 0xC
  4012                           
  4013  002C                     ??_do_I2C_TX_EMPTY:	
  4014                           ; 1 bytes @ 0xC
  4015                           
  4016                           
  4017                           ; 1 bytes @ 0xC
  4018  002C                     	ds	2
  4019  002E                     ?_rand:	
  4020  002E                     _do_I2C_TX$1049:	
  4021                           ; 2 bytes @ 0xE
  4022                           
  4023                           
  4024                           ; 2 bytes @ 0xE
  4025  002E                     	ds	2
  4026  0030                     ??_rand:	
  4027  0030                     ??_i2c_ISR:	
  4028                           ; 1 bytes @ 0x10
  4029                           
  4030                           
  4031                           ; 1 bytes @ 0x10
  4032  0030                     	ds	1
  4033  0031                     ??_i2c_poller:	
  4034  0031                     ??_i2c_masterOperation:	
  4035                           ; 1 bytes @ 0x11
  4036                           
  4037                           
  4038                           ; 1 bytes @ 0x11
  4039  0031                     	ds	1
  4040  0032                     i2c_masterOperation@read:	
  4041                           
  4042                           ; 1 bytes @ 0x12
  4043  0032                     	ds	1
  4044  0033                     i2c_masterOperation@ret:	
  4045                           
  4046                           ; 1 bytes @ 0x13
  4047  0033                     	ds	1
  4048  0034                     ?_i2c_writeNBytes:	
  4049  0034                     ??_i2c_masterWrite:	
  4050                           ; 1 bytes @ 0x14
  4051                           
  4052  0034                     i2c_writeNBytes@data:	
  4053                           ; 1 bytes @ 0x14
  4054                           
  4055                           
  4056                           ; 1 bytes @ 0x14
  4057  0034                     	ds	1
  4058  0035                     ?___awmod:	
  4059  0035                     i2c_writeNBytes@len:	
  4060                           ; 2 bytes @ 0x15
  4061                           
  4062  0035                     ___awmod@divisor:	
  4063                           ; 2 bytes @ 0x15
  4064                           
  4065                           
  4066                           ; 2 bytes @ 0x15
  4067  0035                     	ds	2
  4068  0037                     ??_i2c_writeNBytes:	
  4069  0037                     i2c_writeNBytes@address:	
  4070                           ; 1 bytes @ 0x17
  4071                           
  4072  0037                     ___awmod@dividend:	
  4073                           ; 1 bytes @ 0x17
  4074                           
  4075                           
  4076                           ; 2 bytes @ 0x17
  4077  0037                     	ds	1
  4078  0038                     ??_writeDisplay:	
  4079  0038                     ??_initializeDisplay:	
  4080                           ; 1 bytes @ 0x18
  4081                           
  4082                           
  4083                           ; 1 bytes @ 0x18
  4084  0038                     	ds	1
  4085  0039                     ??___awmod:	
  4086                           
  4087                           ; 1 bytes @ 0x19
  4088  0039                     	ds	1
  4089  003A                     ___awmod@counter:	
  4090                           
  4091                           ; 1 bytes @ 0x1A
  4092  003A                     	ds	1
  4093  003B                     ___awmod@sign:	
  4094                           
  4095                           ; 1 bytes @ 0x1B
  4096  003B                     	ds	1
  4097  003C                     ?_random:	
  4098  003C                     random@upper:	
  4099                           ; 1 bytes @ 0x1C
  4100                           
  4101                           
  4102                           ; 1 bytes @ 0x1C
  4103  003C                     	ds	1
  4104  003D                     ??_random:	
  4105  003D                     ?_writeWord:	
  4106                           ; 1 bytes @ 0x1D
  4107                           
  4108  003D                     writeWord@len:	
  4109                           ; 1 bytes @ 0x1D
  4110                           
  4111                           
  4112                           ; 1 bytes @ 0x1D
  4113  003D                     	ds	1
  4114  003E                     ??_writeWord:	
  4115                           
  4116                           ; 1 bytes @ 0x1E
  4117  003E                     	ds	1
  4118  003F                     random@lower:	
  4119                           
  4120                           ; 1 bytes @ 0x1F
  4121  003F                     	ds	1
  4122  0040                     ??_shiftWalls:	
  4123                           
  4124                           ; 1 bytes @ 0x20
  4125  0040                     	ds	9
  4126  0049                     writeWord@shiftValue:	
  4127                           
  4128                           ; 1 bytes @ 0x29
  4129  0049                     	ds	1
  4130  004A                     writeWord@text:	
  4131                           
  4132                           ; 1 bytes @ 0x2A
  4133  004A                     	ds	1
  4134  004B                     writeWord@idx:	
  4135                           
  4136                           ; 1 bytes @ 0x2B
  4137  004B                     	ds	1
  4138  004C                     writeWord@k:	
  4139                           
  4140                           ; 1 bytes @ 0x2C
  4141  004C                     	ds	1
  4142  004D                     ??_write:	
  4143                           
  4144                           ; 1 bytes @ 0x2D
  4145  004D                     	ds	1
  4146  004E                     write@toWrite_342:	
  4147                           
  4148                           ; 8 bytes @ 0x2E
  4149  004E                     	ds	8
  4150  0056                     write@toWrite_343:	
  4151                           
  4152                           ; 7 bytes @ 0x36
  4153  0056                     	ds	7
  4154  005D                     write@toWrite:	
  4155                           
  4156                           ; 5 bytes @ 0x3D
  4157  005D                     	ds	5
  4158  0062                     write@selection:	
  4159                           
  4160                           ; 1 bytes @ 0x42
  4161  0062                     	ds	1
  4162  0063                     ??_endGame:	
  4163                           
  4164                           ; 1 bytes @ 0x43
  4165  0063                     	ds	2
  4166  0065                     endGame@played:	
  4167                           
  4168                           ; 1 bytes @ 0x45
  4169  0065                     	ds	1
  4170  0066                     ??_main:	
  4171                           
  4172                           ; 1 bytes @ 0x46
  4173  0066                     	ds	2
  4174                           
  4175                           	psect	maintext
  4176  0321                     __pmaintext:	
  4177 ;;
  4178 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  4179 ;;
  4180 ;; *************** function _main *****************
  4181 ;; Defined at:
  4182 ;;		line 348 in file "main.c"
  4183 ;; Parameters:    Size  Location     Type
  4184 ;;		None
  4185 ;; Auto vars:     Size  Location     Type
  4186 ;;		None
  4187 ;; Return value:  Size  Location     Type
  4188 ;;                  1    wreg      void 
  4189 ;; Registers used:
  4190 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4191 ;; Tracked objects:
  4192 ;;		On entry : B1F/0
  4193 ;;		On exit  : 0/0
  4194 ;;		Unchanged: 0/0
  4195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4196 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4197 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4198 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4199 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4200 ;;Total ram usage:        2 bytes
  4201 ;; Hardware stack levels required when called:   19
  4202 ;; This function calls:
  4203 ;;		_IOCCF4_SetInterruptHandler
  4204 ;;		_SYSTEM_Initialize
  4205 ;;		_clearPixels
  4206 ;;		_drawPixel
  4207 ;;		_drawWalls
  4208 ;;		_endGame
  4209 ;;		_initializeDisplay
  4210 ;;		_shiftWalls
  4211 ;;		_writeDisplay
  4212 ;; This function is called by:
  4213 ;;		Startup code after reset
  4214 ;; This function uses a non-reentrant model
  4215 ;;
  4216                           
  4217                           
  4218                           ;psect for function _main
  4219  0321                     _main:	
  4220                           
  4221                           ;main.c: 349: SYSTEM_Initialize();
  4222                           
  4223                           ;incstack = 0
  4224 ;; hardware stack exceeded
  4225                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4226  0321  318C  2400  3183   	fcall	_SYSTEM_Initialize
  4227                           
  4228                           ;main.c: 350: (INTCONbits.GIE = 1);
  4229  0324  178B               	bsf	11,7	;volatile
  4230                           
  4231                           ;main.c: 351: (INTCONbits.PEIE = 1);
  4232  0325  170B               	bsf	11,6	;volatile
  4233                           
  4234                           ;main.c: 353: initializeDisplay();
  4235  0326  3183  238A  3183   	fcall	_initializeDisplay
  4236                           
  4237                           ;main.c: 355: IOCCF4_SetInterruptHandler(buttonInterrupt);
  4238  0329  3014               	movlw	low _buttonInterrupt
  4239  032A  0020               	movlb	0	; select bank0
  4240  032B  00A2               	movwf	IOCCF4_SetInterruptHandler@InterruptHandler
  4241  032C  300D               	movlw	high _buttonInterrupt
  4242  032D  00A3               	movwf	IOCCF4_SetInterruptHandler@InterruptHandler+1
  4243  032E  318C  2478  3183   	fcall	_IOCCF4_SetInterruptHandler
  4244                           
  4245                           ;main.c: 357: endGame(0);
  4246  0331  3000               	movlw	0
  4247  0332  3182  22B5  3183   	fcall	_endGame
  4248  0335                     l6383:	
  4249                           ;main.c: 359: while (1) {
  4250                           
  4251                           
  4252                           ;main.c: 360: drawPixel(1, elevation, 3);
  4253  0335  0020               	movlb	0	; select bank0
  4254  0336  086C               	movf	_elevation,w
  4255  0337  00E6               	movwf	??_main
  4256  0338  0866               	movf	??_main,w
  4257  0339  00A2               	movwf	drawPixel@y
  4258  033A  3003               	movlw	3
  4259  033B  00E7               	movwf	??_main+1
  4260  033C  0867               	movf	??_main+1,w
  4261  033D  00A3               	movwf	drawPixel@color
  4262  033E  3001               	movlw	1
  4263  033F  3180  2076  3183   	fcall	_drawPixel
  4264                           
  4265                           ;main.c: 361: drawWalls();
  4266  0342  318E  267E  3183   	fcall	_drawWalls
  4267                           
  4268                           ;main.c: 362: writeDisplay();
  4269  0345  3183  23E9  3183   	fcall	_writeDisplay
  4270                           
  4271                           ;main.c: 363: clearPixels();
  4272  0348  318D  2562  3183   	fcall	_clearPixels
  4273                           
  4274                           ;main.c: 364: if (elevation < 0 || elevation > 7 || (walls[elevation] & 0b01000000)) {
  4275  034B  3008               	movlw	8
  4276  034C  0020               	movlb	0	; select bank0
  4277  034D  026C               	subwf	_elevation,w
  4278  034E  1803               	skipnc
  4279  034F  2B56               	goto	l6393
  4280  0350  086C               	movf	_elevation,w
  4281  0351  3ECE               	addlw	(low (_walls| 0))& (0+255)
  4282  0352  0086               	movwf	6
  4283  0353  0187               	clrf	7
  4284  0354  1F01               	btfss	1,6
  4285  0355  2B5A               	goto	l6395
  4286  0356                     l6393:	
  4287                           
  4288                           ;main.c: 365: endGame(1);
  4289  0356  3001               	movlw	1
  4290  0357  3182  22B5  3183   	fcall	_endGame
  4291  035A                     l6395:	
  4292                           
  4293                           ;main.c: 366: }
  4294                           ;main.c: 367: if (gravityCounter >= 80) {
  4295  035A  3050               	movlw	80
  4296  035B  0020               	movlb	0	; select bank0
  4297  035C  026B               	subwf	_gravityCounter,w
  4298  035D  1C03               	skipc
  4299  035E  2B72               	goto	l6407
  4300                           
  4301                           ;main.c: 368: if (fall) {
  4302  035F  0021               	movlb	1	; select bank1
  4303  0360  0866               	movf	_fall^(0+128),w
  4304  0361  1903               	btfsc	3,2
  4305  0362  2B69               	goto	l6401
  4306                           
  4307                           ;main.c: 369: elevation += 1;
  4308  0363  3001               	movlw	1
  4309  0364  0020               	movlb	0	; select bank0
  4310  0365  00E6               	movwf	??_main
  4311  0366  0866               	movf	??_main,w
  4312  0367  07EC               	addwf	_elevation,f
  4313                           
  4314                           ;main.c: 370: } else {
  4315  0368  2B6F               	goto	l6405
  4316  0369                     l6401:	
  4317                           
  4318                           ;main.c: 371: elevation -= 1;
  4319  0369  3001               	movlw	1
  4320  036A  0020               	movlb	0	; select bank0
  4321  036B  02EC               	subwf	_elevation,f
  4322                           
  4323                           ;main.c: 372: fall = 1;
  4324  036C  0021               	movlb	1	; select bank1
  4325  036D  01E6               	clrf	_fall^(0+128)
  4326  036E  0AE6               	incf	_fall^(0+128),f
  4327  036F                     l6405:	
  4328                           
  4329                           ;main.c: 373: }
  4330                           ;main.c: 374: gravityCounter = 0;
  4331  036F  0020               	movlb	0	; select bank0
  4332  0370  01EB               	clrf	_gravityCounter
  4333                           
  4334                           ;main.c: 375: } else {
  4335  0371  2B76               	goto	l6409
  4336  0372                     l6407:	
  4337                           
  4338                           ;main.c: 376: gravityCounter++;
  4339  0372  3001               	movlw	1
  4340  0373  00E6               	movwf	??_main
  4341  0374  0866               	movf	??_main,w
  4342  0375  07EB               	addwf	_gravityCounter,f
  4343  0376                     l6409:	
  4344                           
  4345                           ;main.c: 377: }
  4346                           ;main.c: 378: if (shiftCounter >= 100) {
  4347  0376  3000               	movlw	0
  4348  0377  0021               	movlb	1	; select bank1
  4349  0378  0257               	subwf	(_shiftCounter+1)^(0+128),w
  4350  0379  3064               	movlw	100
  4351  037A  1903               	skipnz
  4352  037B  0256               	subwf	_shiftCounter^(0+128),w
  4353  037C  1C03               	skipc
  4354  037D  2B85               	goto	l6415
  4355                           
  4356                           ;main.c: 379: shiftWalls();
  4357  037E  3181  21B4  3183   	fcall	_shiftWalls
  4358                           
  4359                           ;main.c: 380: shiftCounter = 0;
  4360  0381  0021               	movlb	1	; select bank1
  4361  0382  01D6               	clrf	_shiftCounter^(0+128)
  4362  0383  01D7               	clrf	(_shiftCounter+1)^(0+128)
  4363                           
  4364                           ;main.c: 381: } else {
  4365  0384  2B35               	goto	l6383
  4366  0385                     l6415:	
  4367                           
  4368                           ;main.c: 382: shiftCounter++;
  4369  0385  3001               	movlw	1
  4370  0386  07D6               	addwf	_shiftCounter^(0+128),f
  4371  0387  3000               	movlw	0
  4372  0388  3DD7               	addwfc	(_shiftCounter+1)^(0+128),f
  4373  0389  2B35               	goto	l6383
  4374  038A                     __end_of_main:	
  4375                           
  4376                           	psect	text1
  4377  01B4                     __ptext1:	
  4378 ;; *************** function _shiftWalls *****************
  4379 ;; Defined at:
  4380 ;;		line 241 in file "main.c"
  4381 ;; Parameters:    Size  Location     Type
  4382 ;;		None
  4383 ;; Auto vars:     Size  Location     Type
  4384 ;;		None
  4385 ;; Return value:  Size  Location     Type
  4386 ;;                  1    wreg      void 
  4387 ;; Registers used:
  4388 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4389 ;; Tracked objects:
  4390 ;;		On entry : 0/0
  4391 ;;		On exit  : 0/0
  4392 ;;		Unchanged: 0/0
  4393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4394 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4395 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4396 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4397 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4398 ;;Total ram usage:        6 bytes
  4399 ;; Hardware stack levels used:    1
  4400 ;; Hardware stack levels required when called:    9
  4401 ;; This function calls:
  4402 ;;		_random
  4403 ;; This function is called by:
  4404 ;;		_main
  4405 ;; This function uses a non-reentrant model
  4406 ;;
  4407                           
  4408                           
  4409                           ;psect for function _shiftWalls
  4410  01B4                     _shiftWalls:	
  4411                           
  4412                           ;main.c: 242: for (i = 0; i < 8; i++) {
  4413                           
  4414                           ;incstack = 0
  4415                           ; Regs used in _shiftWalls: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4416  01B4  0020               	movlb	0	; select bank0
  4417  01B5  01EA               	clrf	_i
  4418  01B6  3008               	movlw	8
  4419  01B7  026A               	subwf	_i,w
  4420  01B8  1803               	btfsc	3,0
  4421  01B9  29CE               	goto	l3519
  4422  01BA                     l3513:	
  4423                           
  4424                           ;main.c: 243: walls[i] = walls[i] << 1;
  4425  01BA  086A               	movf	_i,w
  4426  01BB  3ECE               	addlw	(low (_walls| 0))& (0+255)
  4427  01BC  0086               	movwf	6
  4428  01BD  0187               	clrf	7
  4429  01BE  3501               	lslf	1,w
  4430  01BF  00C0               	movwf	??_shiftWalls
  4431  01C0  086A               	movf	_i,w
  4432  01C1  3ECE               	addlw	(low (_walls| 0))& (0+255)
  4433  01C2  0086               	movwf	6
  4434  01C3  0187               	clrf	7
  4435  01C4  0840               	movf	??_shiftWalls,w
  4436  01C5  0081               	movwf	1
  4437  01C6  3001               	movlw	1
  4438  01C7  00C0               	movwf	??_shiftWalls
  4439  01C8  0840               	movf	??_shiftWalls,w
  4440  01C9  07EA               	addwf	_i,f
  4441  01CA  3008               	movlw	8
  4442  01CB  026A               	subwf	_i,w
  4443  01CC  1C03               	skipc
  4444  01CD  29BA               	goto	l3513
  4445  01CE                     l3519:	
  4446                           
  4447                           ;main.c: 244: }
  4448                           ;main.c: 245: if (createWall == 3) {
  4449  01CE  3003               	movlw	3
  4450  01CF  0021               	movlb	1	; select bank1
  4451  01D0  0661               	xorwf	_createWall^(0+128),w
  4452  01D1  1D03               	btfss	3,2
  4453  01D2  2A32               	goto	l3543
  4454                           
  4455                           ;main.c: 246: wallHeight = random(4, 7);
  4456  01D3  3007               	movlw	7
  4457  01D4  0020               	movlb	0	; select bank0
  4458  01D5  00C0               	movwf	??_shiftWalls
  4459  01D6  0840               	movf	??_shiftWalls,w
  4460  01D7  00BC               	movwf	random@upper
  4461  01D8  3004               	movlw	4
  4462  01D9  318E  269D  3181   	fcall	_random
  4463  01DC  0020               	movlb	0	; select bank0
  4464  01DD  00C1               	movwf	??_shiftWalls+1
  4465  01DE  0841               	movf	??_shiftWalls+1,w
  4466  01DF  00E9               	movwf	_wallHeight
  4467                           
  4468                           ;main.c: 247: topHalf = random(1, wallHeight);
  4469  01E0  0869               	movf	_wallHeight,w
  4470  01E1  00C0               	movwf	??_shiftWalls
  4471  01E2  0840               	movf	??_shiftWalls,w
  4472  01E3  00BC               	movwf	random@upper
  4473  01E4  3001               	movlw	1
  4474  01E5  318E  269D  3181   	fcall	_random
  4475  01E8  0020               	movlb	0	; select bank0
  4476  01E9  00C1               	movwf	??_shiftWalls+1
  4477  01EA  0841               	movf	??_shiftWalls+1,w
  4478  01EB  00E8               	movwf	_topHalf
  4479                           
  4480                           ;main.c: 248: for (i = 0; i < topHalf; i++) {
  4481  01EC  01EA               	clrf	_i
  4482  01ED                     l3529:	
  4483  01ED  0868               	movf	_topHalf,w
  4484  01EE  026A               	subwf	_i,w
  4485  01EF  1803               	btfsc	3,0
  4486  01F0  29FB               	goto	l3531
  4487                           
  4488                           ;main.c: 249: walls[i] |= 1;
  4489  01F1  086A               	movf	_i,w
  4490  01F2  3ECE               	addlw	(low (_walls| 0))& (0+255)
  4491  01F3  0086               	movwf	6
  4492  01F4  0187               	clrf	7
  4493  01F5  1401               	bsf	1,0
  4494  01F6  3001               	movlw	1
  4495  01F7  00C0               	movwf	??_shiftWalls
  4496  01F8  0840               	movf	??_shiftWalls,w
  4497  01F9  07EA               	addwf	_i,f
  4498  01FA  29ED               	goto	l3529
  4499  01FB                     l3531:	
  4500                           
  4501                           ;main.c: 250: }
  4502                           ;main.c: 251: for (i = 7; i >= 8 - (wallHeight - topHalf); i--) {
  4503  01FB  3007               	movlw	7
  4504  01FC  00C0               	movwf	??_shiftWalls
  4505  01FD  0840               	movf	??_shiftWalls,w
  4506  01FE  00EA               	movwf	_i
  4507  01FF                     l3537:	
  4508  01FF  0868               	movf	_topHalf,w
  4509  0200  00C0               	movwf	??_shiftWalls
  4510  0201  01C1               	clrf	??_shiftWalls+1
  4511  0202  09C0               	comf	??_shiftWalls,f
  4512  0203  09C1               	comf	??_shiftWalls+1,f
  4513  0204  0AC0               	incf	??_shiftWalls,f
  4514  0205  1903               	skipnz
  4515  0206  0AC1               	incf	??_shiftWalls+1,f
  4516  0207  0869               	movf	_wallHeight,w
  4517  0208  0740               	addwf	??_shiftWalls,w
  4518  0209  00C2               	movwf	??_shiftWalls+2
  4519  020A  0841               	movf	??_shiftWalls+1,w
  4520  020B  1803               	skipnc
  4521  020C  0A41               	incf	??_shiftWalls+1,w
  4522  020D  00C3               	movwf	??_shiftWalls+3
  4523  020E  09C2               	comf	??_shiftWalls+2,f
  4524  020F  09C3               	comf	??_shiftWalls+3,f
  4525  0210  0AC2               	incf	??_shiftWalls+2,f
  4526  0211  1903               	skipnz
  4527  0212  0AC3               	incf	??_shiftWalls+3,f
  4528  0213  0842               	movf	??_shiftWalls+2,w
  4529  0214  3E08               	addlw	8
  4530  0215  00C4               	movwf	??_shiftWalls+4
  4531  0216  3000               	movlw	0
  4532  0217  3D43               	addwfc	??_shiftWalls+3,w
  4533  0218  00C5               	movwf	??_shiftWalls+5
  4534  0219  0845               	movf	??_shiftWalls+5,w
  4535  021A  3A80               	xorlw	128
  4536  021B  3C80               	sublw	128
  4537  021C  1D03               	skipz
  4538  021D  2A20               	goto	u2255
  4539  021E  0844               	movf	??_shiftWalls+4,w
  4540  021F  026A               	subwf	_i,w
  4541  0220                     u2255:	
  4542  0220  1C03               	btfss	3,0
  4543  0221  2A2B               	goto	l3539
  4544                           
  4545                           ;main.c: 252: walls[i] |= 1;
  4546  0222  0020               	movlb	0	; select bank0
  4547  0223  086A               	movf	_i,w
  4548  0224  3ECE               	addlw	(low (_walls| 0))& (0+255)
  4549  0225  0086               	movwf	6
  4550  0226  0187               	clrf	7
  4551  0227  1401               	bsf	1,0
  4552  0228  3001               	movlw	1
  4553  0229  02EA               	subwf	_i,f
  4554  022A  29FF               	goto	l3537
  4555  022B                     l3539:	
  4556                           
  4557                           ;main.c: 253: }
  4558                           ;main.c: 254: createWall = 0;
  4559  022B  0021               	movlb	1	; select bank1
  4560  022C  01E1               	clrf	_createWall^(0+128)
  4561                           
  4562                           ;main.c: 255: score++;
  4563  022D  3001               	movlw	1
  4564  022E  07DA               	addwf	_score^(0+128),f
  4565  022F  3000               	movlw	0
  4566  0230  3DDB               	addwfc	(_score+1)^(0+128),f
  4567                           
  4568                           ;main.c: 256: } else {
  4569  0231  0008               	return
  4570  0232                     l3543:	
  4571                           
  4572                           ;main.c: 257: createWall++;
  4573  0232  3001               	movlw	1
  4574  0233  0020               	movlb	0	; select bank0
  4575  0234  00C0               	movwf	??_shiftWalls
  4576  0235  0840               	movf	??_shiftWalls,w
  4577  0236  0021               	movlb	1	; select bank1
  4578  0237  07E1               	addwf	_createWall^(0+128),f
  4579  0238  0008               	return
  4580  0239                     __end_of_shiftWalls:	
  4581                           
  4582                           	psect	text2
  4583  0E9D                     __ptext2:	
  4584 ;; *************** function _random *****************
  4585 ;; Defined at:
  4586 ;;		line 221 in file "main.c"
  4587 ;; Parameters:    Size  Location     Type
  4588 ;;  lower           1    wreg     unsigned char 
  4589 ;;  upper           1   28[BANK0 ] unsigned char 
  4590 ;; Auto vars:     Size  Location     Type
  4591 ;;  lower           1   31[BANK0 ] unsigned char 
  4592 ;; Return value:  Size  Location     Type
  4593 ;;                  1    wreg      unsigned char 
  4594 ;; Registers used:
  4595 ;;		wreg, status,2, status,0, pclath, cstack
  4596 ;; Tracked objects:
  4597 ;;		On entry : 0/0
  4598 ;;		On exit  : 0/0
  4599 ;;		Unchanged: 0/0
  4600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4601 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4602 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4603 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4604 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4605 ;;Total ram usage:        4 bytes
  4606 ;; Hardware stack levels used:    1
  4607 ;; Hardware stack levels required when called:    8
  4608 ;; This function calls:
  4609 ;;		___awmod
  4610 ;;		_rand
  4611 ;; This function is called by:
  4612 ;;		_shiftWalls
  4613 ;; This function uses a non-reentrant model
  4614 ;;
  4615                           
  4616                           
  4617                           ;psect for function _random
  4618  0E9D                     _random:	
  4619                           
  4620                           ;incstack = 0
  4621                           ; Regs used in _random: [wreg+status,2+status,0+pclath+cstack]
  4622                           ;random@lower stored from wreg
  4623  0E9D  0020               	movlb	0	; select bank0
  4624  0E9E  00BF               	movwf	random@lower
  4625                           
  4626                           ;main.c: 222: return rand() % (upper - lower) + lower;
  4627  0E9F  083F               	movf	random@lower,w
  4628  0EA0  00BD               	movwf	??_random
  4629  0EA1  01BE               	clrf	??_random+1
  4630  0EA2  09BD               	comf	??_random,f
  4631  0EA3  09BE               	comf	??_random+1,f
  4632  0EA4  0ABD               	incf	??_random,f
  4633  0EA5  1903               	skipnz
  4634  0EA6  0ABE               	incf	??_random+1,f
  4635  0EA7  083C               	movf	random@upper,w
  4636  0EA8  073D               	addwf	??_random,w
  4637  0EA9  00B5               	movwf	___awmod@divisor
  4638  0EAA  083E               	movf	??_random+1,w
  4639  0EAB  1803               	skipnc
  4640  0EAC  0A3E               	incf	??_random+1,w
  4641  0EAD  00B6               	movwf	___awmod@divisor+1
  4642  0EAE  3184  24EF  318E   	fcall	_rand
  4643  0EB1  0020               	movlb	0	; select bank0
  4644  0EB2  082F               	movf	?_rand+1,w
  4645  0EB3  00B8               	movwf	___awmod@dividend+1
  4646  0EB4  082E               	movf	?_rand,w
  4647  0EB5  00B7               	movwf	___awmod@dividend
  4648  0EB6  3186  2622         	fcall	___awmod
  4649  0EB8  0020               	movlb	0	; select bank0
  4650  0EB9  0835               	movf	?___awmod,w
  4651  0EBA  073F               	addwf	random@lower,w
  4652  0EBB  0008               	return
  4653  0EBC                     __end_of_random:	
  4654                           
  4655                           	psect	text3
  4656  04EF                     __ptext3:	
  4657 ;; *************** function _rand *****************
  4658 ;; Defined at:
  4659 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\rand.c"
  4660 ;; Parameters:    Size  Location     Type
  4661 ;;		None
  4662 ;; Auto vars:     Size  Location     Type
  4663 ;;		None
  4664 ;; Return value:  Size  Location     Type
  4665 ;;                  2   14[BANK0 ] int 
  4666 ;; Registers used:
  4667 ;;		wreg, status,2, status,0, pclath, cstack
  4668 ;; Tracked objects:
  4669 ;;		On entry : 0/0
  4670 ;;		On exit  : 0/0
  4671 ;;		Unchanged: 0/0
  4672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4673 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4674 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4675 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4676 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4677 ;;Total ram usage:        7 bytes
  4678 ;; Hardware stack levels used:    1
  4679 ;; Hardware stack levels required when called:    7
  4680 ;; This function calls:
  4681 ;;		___lmul
  4682 ;; This function is called by:
  4683 ;;		_random
  4684 ;; This function uses a non-reentrant model
  4685 ;;
  4686                           
  4687                           
  4688                           ;psect for function _rand
  4689  04EF                     _rand:	
  4690                           
  4691                           ;incstack = 0
  4692                           ; Regs used in _rand: [wreg+status,2+status,0+pclath+cstack]
  4693  04EF  0021               	movlb	1	; select bank1
  4694  04F0  0865               	movf	(_randx+3)^(0+128),w
  4695  04F1  0020               	movlb	0	; select bank0
  4696  04F2  00A5               	movwf	___lmul@multiplier+3
  4697  04F3  0021               	movlb	1	; select bank1
  4698  04F4  0864               	movf	(_randx+2)^(0+128),w
  4699  04F5  0020               	movlb	0	; select bank0
  4700  04F6  00A4               	movwf	___lmul@multiplier+2
  4701  04F7  0021               	movlb	1	; select bank1
  4702  04F8  0863               	movf	(_randx+1)^(0+128),w
  4703  04F9  0020               	movlb	0	; select bank0
  4704  04FA  00A3               	movwf	___lmul@multiplier+1
  4705  04FB  0021               	movlb	1	; select bank1
  4706  04FC  0862               	movf	_randx^(0+128),w
  4707  04FD  0020               	movlb	0	; select bank0
  4708  04FE  00A2               	movwf	___lmul@multiplier
  4709  04FF  3041               	movlw	65
  4710  0500  00A9               	movwf	___lmul@multiplicand+3
  4711  0501  30C6               	movlw	198
  4712  0502  00A8               	movwf	___lmul@multiplicand+2
  4713  0503  304E               	movlw	78
  4714  0504  00A7               	movwf	___lmul@multiplicand+1
  4715  0505  306D               	movlw	109
  4716  0506  00A6               	movwf	___lmul@multiplicand
  4717  0507  3187  2752  3184   	fcall	___lmul
  4718  050A  0020               	movlb	0	; select bank0
  4719  050B  0825               	movf	?___lmul+3,w
  4720  050C  0021               	movlb	1	; select bank1
  4721  050D  00E5               	movwf	(_randx+3)^(0+128)
  4722  050E  0020               	movlb	0	; select bank0
  4723  050F  0824               	movf	?___lmul+2,w
  4724  0510  0021               	movlb	1	; select bank1
  4725  0511  00E4               	movwf	(_randx+2)^(0+128)
  4726  0512  0020               	movlb	0	; select bank0
  4727  0513  0823               	movf	?___lmul+1,w
  4728  0514  0021               	movlb	1	; select bank1
  4729  0515  00E3               	movwf	(_randx+1)^(0+128)
  4730  0516  0020               	movlb	0	; select bank0
  4731  0517  0822               	movf	?___lmul,w
  4732  0518  0021               	movlb	1	; select bank1
  4733  0519  00E2               	movwf	_randx^(0+128)
  4734  051A  3039               	movlw	57
  4735  051B  07E2               	addwf	_randx^(0+128),f
  4736  051C  3030               	movlw	48
  4737  051D  3DE3               	addwfc	(_randx+1)^(0+128),f
  4738  051E  3000               	movlw	0
  4739  051F  3DE4               	addwfc	(_randx+2)^(0+128),f
  4740  0520  3000               	movlw	0
  4741  0521  3DE5               	addwfc	(_randx+3)^(0+128),f
  4742  0522  0862               	movf	_randx^(0+128),w
  4743  0523  0020               	movlb	0	; select bank0
  4744  0524  00B0               	movwf	??_rand
  4745  0525  0021               	movlb	1	; select bank1
  4746  0526  0863               	movf	(_randx+1)^(0+128),w
  4747  0527  0020               	movlb	0	; select bank0
  4748  0528  00B1               	movwf	??_rand+1
  4749  0529  0021               	movlb	1	; select bank1
  4750  052A  0864               	movf	(_randx+2)^(0+128),w
  4751  052B  0020               	movlb	0	; select bank0
  4752  052C  00B2               	movwf	??_rand+2
  4753  052D  0021               	movlb	1	; select bank1
  4754  052E  0865               	movf	(_randx+3)^(0+128),w
  4755  052F  0020               	movlb	0	; select bank0
  4756  0530  00B3               	movwf	??_rand+3
  4757  0531  3010               	movlw	16
  4758  0532  00B4               	movwf	??_rand+4
  4759  0533                     u1775:	
  4760  0533  37B3               	asrf	??_rand+3,f
  4761  0534  0CB2               	rrf	??_rand+2,f
  4762  0535  0CB1               	rrf	??_rand+1,f
  4763  0536  0CB0               	rrf	??_rand,f
  4764  0537  0BB4               	decfsz	??_rand+4,f
  4765  0538  2D33               	goto	u1775
  4766  0539  30FF               	movlw	255
  4767  053A  0530               	andwf	??_rand,w
  4768  053B  00AE               	movwf	?_rand
  4769  053C  307F               	movlw	127
  4770  053D  0531               	andwf	??_rand+1,w
  4771  053E  00AF               	movwf	?_rand+1
  4772  053F  0008               	return
  4773  0540                     __end_of_rand:	
  4774                           
  4775                           	psect	text4
  4776  0752                     __ptext4:	
  4777 ;; *************** function ___lmul *****************
  4778 ;; Defined at:
  4779 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
  4780 ;; Parameters:    Size  Location     Type
  4781 ;;  multiplier      4    2[BANK0 ] unsigned long 
  4782 ;;  multiplicand    4    6[BANK0 ] unsigned long 
  4783 ;; Auto vars:     Size  Location     Type
  4784 ;;  product         4   10[BANK0 ] unsigned long 
  4785 ;; Return value:  Size  Location     Type
  4786 ;;                  4    2[BANK0 ] unsigned long 
  4787 ;; Registers used:
  4788 ;;		wreg, status,2, status,0
  4789 ;; Tracked objects:
  4790 ;;		On entry : 0/0
  4791 ;;		On exit  : 0/0
  4792 ;;		Unchanged: 0/0
  4793 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4794 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4795 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4796 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4797 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4798 ;;Total ram usage:       12 bytes
  4799 ;; Hardware stack levels used:    1
  4800 ;; Hardware stack levels required when called:    6
  4801 ;; This function calls:
  4802 ;;		Nothing
  4803 ;; This function is called by:
  4804 ;;		_rand
  4805 ;; This function uses a non-reentrant model
  4806 ;;
  4807                           
  4808                           
  4809                           ;psect for function ___lmul
  4810  0752                     ___lmul:	
  4811                           
  4812                           ;incstack = 0
  4813                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  4814  0752  3000               	movlw	0
  4815  0753  0020               	movlb	0	; select bank0
  4816  0754  00AD               	movwf	___lmul@product+3
  4817  0755  3000               	movlw	0
  4818  0756  00AC               	movwf	___lmul@product+2
  4819  0757  3000               	movlw	0
  4820  0758  00AB               	movwf	___lmul@product+1
  4821  0759  3000               	movlw	0
  4822  075A  00AA               	movwf	___lmul@product
  4823  075B                     l3013:	
  4824  075B  1C22               	btfss	___lmul@multiplier,0
  4825  075C  2F65               	goto	l3017
  4826  075D  0826               	movf	___lmul@multiplicand,w
  4827  075E  07AA               	addwf	___lmul@product,f
  4828  075F  0827               	movf	___lmul@multiplicand+1,w
  4829  0760  3DAB               	addwfc	___lmul@product+1,f
  4830  0761  0828               	movf	___lmul@multiplicand+2,w
  4831  0762  3DAC               	addwfc	___lmul@product+2,f
  4832  0763  0829               	movf	___lmul@multiplicand+3,w
  4833  0764  3DAD               	addwfc	___lmul@product+3,f
  4834  0765                     l3017:	
  4835  0765  3001               	movlw	1
  4836  0766                     u1735:	
  4837  0766  35A6               	lslf	___lmul@multiplicand,f
  4838  0767  0DA7               	rlf	___lmul@multiplicand+1,f
  4839  0768  0DA8               	rlf	___lmul@multiplicand+2,f
  4840  0769  0DA9               	rlf	___lmul@multiplicand+3,f
  4841  076A  0B89               	decfsz	9,f
  4842  076B  2F66               	goto	u1735
  4843  076C  3001               	movlw	1
  4844  076D                     u1745:	
  4845  076D  36A5               	lsrf	___lmul@multiplier+3,f
  4846  076E  0CA4               	rrf	___lmul@multiplier+2,f
  4847  076F  0CA3               	rrf	___lmul@multiplier+1,f
  4848  0770  0CA2               	rrf	___lmul@multiplier,f
  4849  0771  0B89               	decfsz	9,f
  4850  0772  2F6D               	goto	u1745
  4851  0773  0825               	movf	___lmul@multiplier+3,w
  4852  0774  0424               	iorwf	___lmul@multiplier+2,w
  4853  0775  0423               	iorwf	___lmul@multiplier+1,w
  4854  0776  0422               	iorwf	___lmul@multiplier,w
  4855  0777  1D03               	skipz
  4856  0778  2F5B               	goto	l3013
  4857  0779  082D               	movf	___lmul@product+3,w
  4858  077A  00A5               	movwf	?___lmul+3
  4859  077B  082C               	movf	___lmul@product+2,w
  4860  077C  00A4               	movwf	?___lmul+2
  4861  077D  082B               	movf	___lmul@product+1,w
  4862  077E  00A3               	movwf	?___lmul+1
  4863  077F  082A               	movf	___lmul@product,w
  4864  0780  00A2               	movwf	?___lmul
  4865  0781  0008               	return
  4866  0782                     __end_of___lmul:	
  4867                           
  4868                           	psect	text5
  4869  0622                     __ptext5:	
  4870 ;; *************** function ___awmod *****************
  4871 ;; Defined at:
  4872 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
  4873 ;; Parameters:    Size  Location     Type
  4874 ;;  divisor         2   21[BANK0 ] int 
  4875 ;;  dividend        2   23[BANK0 ] int 
  4876 ;; Auto vars:     Size  Location     Type
  4877 ;;  sign            1   27[BANK0 ] unsigned char 
  4878 ;;  counter         1   26[BANK0 ] unsigned char 
  4879 ;; Return value:  Size  Location     Type
  4880 ;;                  2   21[BANK0 ] int 
  4881 ;; Registers used:
  4882 ;;		wreg, status,2, status,0
  4883 ;; Tracked objects:
  4884 ;;		On entry : 0/0
  4885 ;;		On exit  : 0/0
  4886 ;;		Unchanged: 0/0
  4887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4888 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4889 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4890 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4891 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4892 ;;Total ram usage:        7 bytes
  4893 ;; Hardware stack levels used:    1
  4894 ;; Hardware stack levels required when called:    6
  4895 ;; This function calls:
  4896 ;;		Nothing
  4897 ;; This function is called by:
  4898 ;;		_random
  4899 ;; This function uses a non-reentrant model
  4900 ;;
  4901                           
  4902                           
  4903                           ;psect for function ___awmod
  4904  0622                     ___awmod:	
  4905                           
  4906                           ;incstack = 0
  4907                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  4908  0622  0020               	movlb	0	; select bank0
  4909  0623  01BB               	clrf	___awmod@sign
  4910  0624  1FB8               	btfss	___awmod@dividend+1,7
  4911  0625  2E2D               	goto	l3089
  4912  0626  09B7               	comf	___awmod@dividend,f
  4913  0627  09B8               	comf	___awmod@dividend+1,f
  4914  0628  0AB7               	incf	___awmod@dividend,f
  4915  0629  1903               	skipnz
  4916  062A  0AB8               	incf	___awmod@dividend+1,f
  4917  062B  01BB               	clrf	___awmod@sign
  4918  062C  0ABB               	incf	___awmod@sign,f
  4919  062D                     l3089:	
  4920  062D  1FB6               	btfss	___awmod@divisor+1,7
  4921  062E  2E34               	goto	l3093
  4922  062F  09B5               	comf	___awmod@divisor,f
  4923  0630  09B6               	comf	___awmod@divisor+1,f
  4924  0631  0AB5               	incf	___awmod@divisor,f
  4925  0632  1903               	skipnz
  4926  0633  0AB6               	incf	___awmod@divisor+1,f
  4927  0634                     l3093:	
  4928  0634  0835               	movf	___awmod@divisor,w
  4929  0635  0436               	iorwf	___awmod@divisor+1,w
  4930  0636  1903               	btfsc	3,2
  4931  0637  2E5B               	goto	l3111
  4932  0638  01BA               	clrf	___awmod@counter
  4933  0639  0ABA               	incf	___awmod@counter,f
  4934  063A                     l3101:	
  4935  063A  1BB6               	btfsc	___awmod@divisor+1,7
  4936  063B  2E46               	goto	l3103
  4937  063C  3001               	movlw	1
  4938  063D                     u1875:	
  4939  063D  35B5               	lslf	___awmod@divisor,f
  4940  063E  0DB6               	rlf	___awmod@divisor+1,f
  4941  063F  0B89               	decfsz	9,f
  4942  0640  2E3D               	goto	u1875
  4943  0641  3001               	movlw	1
  4944  0642  00B9               	movwf	??___awmod
  4945  0643  0839               	movf	??___awmod,w
  4946  0644  07BA               	addwf	___awmod@counter,f
  4947  0645  2E3A               	goto	l3101
  4948  0646                     l3103:	
  4949  0646  0836               	movf	___awmod@divisor+1,w
  4950  0647  0238               	subwf	___awmod@dividend+1,w
  4951  0648  1D03               	skipz
  4952  0649  2E4C               	goto	u1895
  4953  064A  0835               	movf	___awmod@divisor,w
  4954  064B  0237               	subwf	___awmod@dividend,w
  4955  064C                     u1895:	
  4956  064C  1C03               	skipc
  4957  064D  2E52               	goto	l3107
  4958  064E  0835               	movf	___awmod@divisor,w
  4959  064F  02B7               	subwf	___awmod@dividend,f
  4960  0650  0836               	movf	___awmod@divisor+1,w
  4961  0651  3BB8               	subwfb	___awmod@dividend+1,f
  4962  0652                     l3107:	
  4963  0652  3001               	movlw	1
  4964  0653                     u1905:	
  4965  0653  36B6               	lsrf	___awmod@divisor+1,f
  4966  0654  0CB5               	rrf	___awmod@divisor,f
  4967  0655  0B89               	decfsz	9,f
  4968  0656  2E53               	goto	u1905
  4969  0657  3001               	movlw	1
  4970  0658  02BA               	subwf	___awmod@counter,f
  4971  0659  1D03               	btfss	3,2
  4972  065A  2E46               	goto	l3103
  4973  065B                     l3111:	
  4974  065B  083B               	movf	___awmod@sign,w
  4975  065C  1903               	btfsc	3,2
  4976  065D  2E63               	goto	l3115
  4977  065E  09B7               	comf	___awmod@dividend,f
  4978  065F  09B8               	comf	___awmod@dividend+1,f
  4979  0660  0AB7               	incf	___awmod@dividend,f
  4980  0661  1903               	skipnz
  4981  0662  0AB8               	incf	___awmod@dividend+1,f
  4982  0663                     l3115:	
  4983  0663  0838               	movf	___awmod@dividend+1,w
  4984  0664  00B6               	movwf	?___awmod+1
  4985  0665  0837               	movf	___awmod@dividend,w
  4986  0666  00B5               	movwf	?___awmod
  4987  0667  0008               	return
  4988  0668                     __end_of___awmod:	
  4989                           
  4990                           	psect	text6
  4991  038A                     __ptext6:	
  4992 ;; *************** function _initializeDisplay *****************
  4993 ;; Defined at:
  4994 ;;		line 202 in file "main.c"
  4995 ;; Parameters:    Size  Location     Type
  4996 ;;		None
  4997 ;; Auto vars:     Size  Location     Type
  4998 ;;		None
  4999 ;; Return value:  Size  Location     Type
  5000 ;;                  1    wreg      void 
  5001 ;; Registers used:
  5002 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5003 ;; Tracked objects:
  5004 ;;		On entry : 0/0
  5005 ;;		On exit  : 0/0
  5006 ;;		Unchanged: 0/0
  5007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5008 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5009 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5010 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5011 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5012 ;;Total ram usage:        1 bytes
  5013 ;; Hardware stack levels used:    1
  5014 ;; Hardware stack levels required when called:   15
  5015 ;; This function calls:
  5016 ;;		_i2c_writeNBytes
  5017 ;; This function is called by:
  5018 ;;		_main
  5019 ;; This function uses a non-reentrant model
  5020 ;;
  5021                           
  5022                           
  5023                           ;psect for function _initializeDisplay
  5024  038A                     _initializeDisplay:	
  5025                           
  5026                           ;main.c: 203: for (i = 0; i < 8; i++) {
  5027                           
  5028                           ;incstack = 0
  5029                           ; Regs used in _initializeDisplay: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5030  038A  0020               	movlb	0	; select bank0
  5031  038B  01EA               	clrf	_i
  5032  038C  3008               	movlw	8
  5033  038D  026A               	subwf	_i,w
  5034  038E  1803               	btfsc	3,0
  5035  038F  2B9F               	goto	l6275
  5036  0390                     l6269:	
  5037                           
  5038                           ;main.c: 204: pixelbuffer[i] = 0;
  5039  0390  356A               	lslf	_i,w
  5040  0391  3EBE               	addlw	(low (_pixelbuffer| 0))& (0+255)
  5041  0392  0086               	movwf	6
  5042  0393  0187               	clrf	7
  5043  0394  3000               	movlw	0
  5044  0395  3FC0               	movwi [0]fsr1
  5045  0396  3FC1               	movwi [1]fsr1
  5046  0397  3001               	movlw	1
  5047  0398  00B8               	movwf	??_initializeDisplay
  5048  0399  0838               	movf	??_initializeDisplay,w
  5049  039A  07EA               	addwf	_i,f
  5050  039B  3008               	movlw	8
  5051  039C  026A               	subwf	_i,w
  5052  039D  1C03               	skipc
  5053  039E  2B90               	goto	l6269
  5054  039F                     l6275:	
  5055                           
  5056                           ;main.c: 205: }
  5057                           ;main.c: 206: for (i = 0; i < 8; i++) {
  5058  039F  01EA               	clrf	_i
  5059  03A0  3008               	movlw	8
  5060  03A1  026A               	subwf	_i,w
  5061  03A2  1803               	btfsc	3,0
  5062  03A3  2BB2               	goto	l6287
  5063  03A4                     l6281:	
  5064                           
  5065                           ;main.c: 207: writebuffer[i] = 0;
  5066  03A4  086A               	movf	_i,w
  5067  03A5  3EC0               	addlw	(low (_writebuffer| (0+256)))& (0+255)
  5068  03A6  0086               	movwf	6
  5069  03A7  3001               	movlw	1	; select bank3/4
  5070  03A8  0087               	movwf	7
  5071  03A9  0181               	clrf	1
  5072  03AA  3001               	movlw	1
  5073  03AB  00B8               	movwf	??_initializeDisplay
  5074  03AC  0838               	movf	??_initializeDisplay,w
  5075  03AD  07EA               	addwf	_i,f
  5076  03AE  3008               	movlw	8
  5077  03AF  026A               	subwf	_i,w
  5078  03B0  1C03               	skipc
  5079  03B1  2BA4               	goto	l6281
  5080  03B2                     l6287:	
  5081                           
  5082                           ;main.c: 208: }
  5083                           ;main.c: 209: for (i = 0; i < 8; i++) {
  5084  03B2  01EA               	clrf	_i
  5085  03B3  3008               	movlw	8
  5086  03B4  026A               	subwf	_i,w
  5087  03B5  1803               	btfsc	3,0
  5088  03B6  2BC4               	goto	l6299
  5089  03B7                     l6293:	
  5090                           
  5091                           ;main.c: 210: walls[i] = 0;
  5092  03B7  086A               	movf	_i,w
  5093  03B8  3ECE               	addlw	(low (_walls| 0))& (0+255)
  5094  03B9  0086               	movwf	6
  5095  03BA  0187               	clrf	7
  5096  03BB  0181               	clrf	1
  5097  03BC  3001               	movlw	1
  5098  03BD  00B8               	movwf	??_initializeDisplay
  5099  03BE  0838               	movf	??_initializeDisplay,w
  5100  03BF  07EA               	addwf	_i,f
  5101  03C0  3008               	movlw	8
  5102  03C1  026A               	subwf	_i,w
  5103  03C2  1C03               	skipc
  5104  03C3  2BB7               	goto	l6293
  5105  03C4                     l6299:	
  5106                           
  5107                           ;main.c: 211: }
  5108                           ;main.c: 213: writebuffer[0] = 0x21;
  5109  03C4  3021               	movlw	33
  5110  03C5  00B8               	movwf	??_initializeDisplay
  5111  03C6  0838               	movf	??_initializeDisplay,w
  5112  03C7  0023               	movlb	3	; select bank3
  5113  03C8  00C0               	movwf	_writebuffer^(0+384)
  5114                           
  5115                           ;main.c: 214: i2c_writeNBytes(0x70, writebuffer, 1);
  5116  03C9  30C0               	movlw	(low (_writebuffer| (0+256)))& (0+255)
  5117  03CA  0020               	movlb	0	; select bank0
  5118  03CB  00B8               	movwf	??_initializeDisplay
  5119  03CC  0838               	movf	??_initializeDisplay,w
  5120  03CD  00B4               	movwf	i2c_writeNBytes@data
  5121  03CE  3001               	movlw	1
  5122  03CF  00B5               	movwf	i2c_writeNBytes@len
  5123  03D0  3000               	movlw	0
  5124  03D1  00B6               	movwf	i2c_writeNBytes@len+1
  5125  03D2  3070               	movlw	112
  5126  03D3  318F  27D7  3183   	fcall	_i2c_writeNBytes
  5127                           
  5128                           ;main.c: 217: writebuffer[0] = 0x80 | 0x01;
  5129  03D6  3081               	movlw	129
  5130  03D7  0020               	movlb	0	; select bank0
  5131  03D8  00B8               	movwf	??_initializeDisplay
  5132  03D9  0838               	movf	??_initializeDisplay,w
  5133  03DA  0023               	movlb	3	; select bank3
  5134  03DB  00C0               	movwf	_writebuffer^(0+384)
  5135                           
  5136                           ;main.c: 218: i2c_writeNBytes(0x70, writebuffer, 1);
  5137  03DC  30C0               	movlw	(low (_writebuffer| (0+256)))& (0+255)
  5138  03DD  0020               	movlb	0	; select bank0
  5139  03DE  00B8               	movwf	??_initializeDisplay
  5140  03DF  0838               	movf	??_initializeDisplay,w
  5141  03E0  00B4               	movwf	i2c_writeNBytes@data
  5142  03E1  3001               	movlw	1
  5143  03E2  00B5               	movwf	i2c_writeNBytes@len
  5144  03E3  3000               	movlw	0
  5145  03E4  00B6               	movwf	i2c_writeNBytes@len+1
  5146  03E5  3070               	movlw	112
  5147  03E6  318F  27D7         	fcall	_i2c_writeNBytes
  5148  03E8  0008               	return
  5149  03E9                     __end_of_initializeDisplay:	
  5150                           
  5151                           	psect	text7
  5152  02B5                     __ptext7:	
  5153 ;; *************** function _endGame *****************
  5154 ;; Defined at:
  5155 ;;		line 318 in file "main.c"
  5156 ;; Parameters:    Size  Location     Type
  5157 ;;  played          1    wreg     unsigned char 
  5158 ;; Auto vars:     Size  Location     Type
  5159 ;;  played          1   69[BANK0 ] unsigned char 
  5160 ;; Return value:  Size  Location     Type
  5161 ;;                  1    wreg      void 
  5162 ;; Registers used:
  5163 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5164 ;; Tracked objects:
  5165 ;;		On entry : 0/0
  5166 ;;		On exit  : 0/0
  5167 ;;		Unchanged: 0/0
  5168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5169 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5170 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5171 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5172 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5173 ;;Total ram usage:        3 bytes
  5174 ;; Hardware stack levels used:    1
  5175 ;; Hardware stack levels required when called:   18
  5176 ;; This function calls:
  5177 ;;		_clearPixels
  5178 ;;		_write
  5179 ;;		_writeDisplay
  5180 ;; This function is called by:
  5181 ;;		_main
  5182 ;; This function uses a non-reentrant model
  5183 ;;
  5184                           
  5185                           
  5186                           ;psect for function _endGame
  5187  02B5                     _endGame:	
  5188                           
  5189                           ;incstack = 0
  5190 ;; hardware stack exceeded
  5191                           ; Regs used in _endGame: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5192                           ;endGame@played stored from wreg
  5193  02B5  0020               	movlb	0	; select bank0
  5194  02B6  00E5               	movwf	endGame@played
  5195                           
  5196                           ;main.c: 319: if (played) {
  5197  02B7  0865               	movf	endGame@played,w
  5198  02B8  1903               	btfsc	3,2
  5199  02B9  2AF0               	goto	l6331
  5200                           
  5201                           ;main.c: 320: for (i = 0; i < 8; i++) {
  5202  02BA  01EA               	clrf	_i
  5203  02BB  3008               	movlw	8
  5204  02BC  026A               	subwf	_i,w
  5205  02BD  1803               	btfsc	3,0
  5206  02BE  2ACF               	goto	l6319
  5207  02BF                     l6313:	
  5208                           
  5209                           ;main.c: 321: pixelbuffer[i] = 0xFF00;
  5210  02BF  356A               	lslf	_i,w
  5211  02C0  3EBE               	addlw	(low (_pixelbuffer| 0))& (0+255)
  5212  02C1  0086               	movwf	6
  5213  02C2  0187               	clrf	7
  5214  02C3  3000               	movlw	0
  5215  02C4  3FC0               	movwi [0]fsr1
  5216  02C5  30FF               	movlw	255
  5217  02C6  3FC1               	movwi [1]fsr1
  5218  02C7  3001               	movlw	1
  5219  02C8  00E3               	movwf	??_endGame
  5220  02C9  0863               	movf	??_endGame,w
  5221  02CA  07EA               	addwf	_i,f
  5222  02CB  3008               	movlw	8
  5223  02CC  026A               	subwf	_i,w
  5224  02CD  1C03               	skipc
  5225  02CE  2ABF               	goto	l6313
  5226  02CF                     l6319:	
  5227                           
  5228                           ;main.c: 322: }
  5229                           ;main.c: 323: writeDisplay();
  5230  02CF  3183  23E9  3182   	fcall	_writeDisplay
  5231                           
  5232                           ;main.c: 324: _delay((unsigned long)((200)*(32000000/4000.0)));
  5233  02D2  3009               	movlw	9
  5234  02D3  0020               	movlb	0	; select bank0
  5235  02D4  00E4               	movwf	??_endGame+1
  5236  02D5  301E               	movlw	30
  5237  02D6  00E3               	movwf	??_endGame
  5238  02D7  30E4               	movlw	228
  5239  02D8                     u5677:	
  5240  02D8  0B89               	decfsz	9,f
  5241  02D9  2AD8               	goto	u5677
  5242  02DA  0BE3               	decfsz	??_endGame,f
  5243  02DB  2AD8               	goto	u5677
  5244  02DC  0BE4               	decfsz	??_endGame+1,f
  5245  02DD  2AD8               	goto	u5677
  5246  02DE  0000               	nop
  5247                           
  5248                           ;main.c: 325: if (score > hiscore) {
  5249  02DF  0021               	movlb	1	; select bank1
  5250  02E0  085B               	movf	(_score+1)^(0+128),w
  5251  02E1  0259               	subwf	(_hiscore+1)^(0+128),w
  5252  02E2  1D03               	skipz
  5253  02E3  2AE6               	goto	u5345
  5254  02E4  085A               	movf	_score^(0+128),w
  5255  02E5  0258               	subwf	_hiscore^(0+128),w
  5256  02E6                     u5345:	
  5257  02E6  1803               	skipnc
  5258  02E7  2AEE               	goto	l6329
  5259                           
  5260                           ;main.c: 326: hiscore = score;
  5261  02E8  085B               	movf	(_score+1)^(0+128),w
  5262  02E9  00D9               	movwf	(_hiscore+1)^(0+128)
  5263  02EA  085A               	movf	_score^(0+128),w
  5264  02EB  00D8               	movwf	_hiscore^(0+128)
  5265                           
  5266                           ;main.c: 327: write(10);
  5267  02EC  300A               	movlw	10
  5268  02ED  2AF1               	goto	L1
  5269  02EE                     l6329:	
  5270                           ;main.c: 328: } else {
  5271                           
  5272                           
  5273                           ;main.c: 329: write(12);
  5274  02EE  300C               	movlw	12
  5275  02EF  2AF1               	goto	L1
  5276  02F0                     l6331:	
  5277                           ;main.c: 330: }
  5278                           ;main.c: 331: } else {
  5279                           
  5280                           
  5281                           ;main.c: 332: write(11);
  5282  02F0  300B               	movlw	11
  5283  02F1                     L1:	
  5284  02F1  3182  2239  3182   	fcall	_write
  5285                           
  5286                           ;main.c: 333: }
  5287                           ;main.c: 334: clearPixels();
  5288  02F4  318D  2562  3182   	fcall	_clearPixels
  5289                           
  5290                           ;main.c: 335: writeDisplay();
  5291  02F7  3183  23E9  3182   	fcall	_writeDisplay
  5292                           
  5293                           ;main.c: 336: for (i = 0; i < 8; i++) {
  5294  02FA  0020               	movlb	0	; select bank0
  5295  02FB  01EA               	clrf	_i
  5296  02FC  3008               	movlw	8
  5297  02FD  026A               	subwf	_i,w
  5298  02FE  1803               	btfsc	3,0
  5299  02FF  2B0D               	goto	l6349
  5300  0300                     l6343:	
  5301                           
  5302                           ;main.c: 337: walls[i] = 0;
  5303  0300  086A               	movf	_i,w
  5304  0301  3ECE               	addlw	(low (_walls| 0))& (0+255)
  5305  0302  0086               	movwf	6
  5306  0303  0187               	clrf	7
  5307  0304  0181               	clrf	1
  5308  0305  3001               	movlw	1
  5309  0306  00E3               	movwf	??_endGame
  5310  0307  0863               	movf	??_endGame,w
  5311  0308  07EA               	addwf	_i,f
  5312  0309  3008               	movlw	8
  5313  030A  026A               	subwf	_i,w
  5314  030B  1C03               	skipc
  5315  030C  2B00               	goto	l6343
  5316  030D                     l6349:	
  5317                           
  5318                           ;main.c: 338: }
  5319                           ;main.c: 339: writeDisplay();
  5320  030D  3183  23E9  3182   	fcall	_writeDisplay
  5321                           
  5322                           ;main.c: 340: start = 0;
  5323  0310  0021               	movlb	1	; select bank1
  5324  0311  01E0               	clrf	_start^(0+128)
  5325  0312                     l6353:	
  5326                           ;main.c: 341: while (!start);
  5327                           
  5328  0312  0860               	movf	_start^(0+128),w
  5329  0313  1903               	btfsc	3,2
  5330  0314  2B12               	goto	l6353
  5331                           
  5332                           ;main.c: 342: elevation = 3;
  5333  0315  3003               	movlw	3
  5334  0316  0020               	movlb	0	; select bank0
  5335  0317  00E3               	movwf	??_endGame
  5336  0318  0863               	movf	??_endGame,w
  5337  0319  00EC               	movwf	_elevation
  5338                           
  5339                           ;main.c: 343: gravityCounter = 0;
  5340  031A  01EB               	clrf	_gravityCounter
  5341                           
  5342                           ;main.c: 344: shiftCounter = 0;
  5343  031B  0021               	movlb	1	; select bank1
  5344  031C  01D6               	clrf	_shiftCounter^(0+128)
  5345  031D  01D7               	clrf	(_shiftCounter+1)^(0+128)
  5346                           
  5347                           ;main.c: 345: score = 0;
  5348  031E  01DA               	clrf	_score^(0+128)
  5349  031F  01DB               	clrf	(_score+1)^(0+128)
  5350  0320  0008               	return
  5351  0321                     __end_of_endGame:	
  5352                           
  5353                           	psect	text8
  5354  0239                     __ptext8:	
  5355 ;; *************** function _write *****************
  5356 ;; Defined at:
  5357 ;;		line 283 in file "main.c"
  5358 ;; Parameters:    Size  Location     Type
  5359 ;;  selection       1    wreg     unsigned char 
  5360 ;; Auto vars:     Size  Location     Type
  5361 ;;  selection       1   66[BANK0 ] unsigned char 
  5362 ;;  toWrite         7   54[BANK0 ] PTR unsigned char [7]
  5363 ;;		 -> letter_r(8), letter_o(8), letter_c(8), letter_s(8), 
  5364 ;;		 -> letter_hi(8), letter_w(8), letter_e(8), letter_n(8), 
  5365 ;;		 -> letter_space(8), 
  5366 ;;  toWrite         8   46[BANK0 ] PTR unsigned char [8]
  5367 ;;		 -> letter_r(8), letter_o(8), letter_c(8), letter_s(8), 
  5368 ;;		 -> letter_hi(8), letter_w(8), letter_e(8), letter_n(8), 
  5369 ;;		 -> letter_space(8), 
  5370 ;;  toWrite         5   61[BANK0 ] PTR unsigned char [5]
  5371 ;;		 -> letter_r(8), letter_o(8), letter_c(8), letter_s(8), 
  5372 ;;		 -> letter_hi(8), letter_w(8), letter_e(8), letter_n(8), 
  5373 ;;		 -> letter_space(8), 
  5374 ;; Return value:  Size  Location     Type
  5375 ;;                  1    wreg      void 
  5376 ;; Registers used:
  5377 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5378 ;; Tracked objects:
  5379 ;;		On entry : 0/0
  5380 ;;		On exit  : 0/0
  5381 ;;		Unchanged: 0/0
  5382 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5383 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5384 ;;      Locals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5385 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5386 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5387 ;;Total ram usage:       22 bytes
  5388 ;; Hardware stack levels used:    1
  5389 ;; Hardware stack levels required when called:   17
  5390 ;; This function calls:
  5391 ;;		_writeWord
  5392 ;; This function is called by:
  5393 ;;		_endGame
  5394 ;; This function uses a non-reentrant model
  5395 ;;
  5396                           
  5397                           
  5398                           ;psect for function _write
  5399  0239                     _write:	
  5400                           
  5401                           ;incstack = 0
  5402 ;; hardware stack exceeded
  5403                           ; Regs used in _write: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5404                           ;write@selection stored from wreg
  5405  0239  0020               	movlb	0	; select bank0
  5406  023A  00E2               	movwf	write@selection
  5407                           
  5408                           ;main.c: 284: if (selection == 10) {
  5409  023B  300A               	movlw	10
  5410  023C  0662               	xorwf	write@selection,w
  5411  023D  1D03               	btfss	3,2
  5412  023E  2A5B               	goto	l6153
  5413                           
  5414                           ;main.c: 285: uint8_t * toWrite[5];
  5415                           ;main.c: 286: toWrite[0] = letter_space;
  5416  023F  3060               	movlw	(low (_letter_space| (0+256)))& (0+255)
  5417  0240  00CD               	movwf	??_write
  5418  0241  084D               	movf	??_write,w
  5419  0242  00DD               	movwf	write@toWrite
  5420                           
  5421                           ;main.c: 287: toWrite[1] = letter_n;
  5422  0243  3058               	movlw	(low (_letter_n| (0+256)))& (0+255)
  5423  0244  00CD               	movwf	??_write
  5424  0245  084D               	movf	??_write,w
  5425  0246  00DE               	movwf	low ((write@toWrite| 0+1))
  5426                           
  5427                           ;main.c: 288: toWrite[2] = letter_e;
  5428  0247  3050               	movlw	(low (_letter_e| (0+256)))& (0+255)
  5429  0248  00CD               	movwf	??_write
  5430  0249  084D               	movf	??_write,w
  5431  024A  00DF               	movwf	low ((write@toWrite| 0+2))
  5432                           
  5433                           ;main.c: 289: toWrite[3] = letter_w;
  5434  024B  3048               	movlw	(low (_letter_w| (0+256)))& (0+255)
  5435  024C  00CD               	movwf	??_write
  5436  024D  084D               	movf	??_write,w
  5437  024E  00E0               	movwf	low ((write@toWrite| 0+3))
  5438                           
  5439                           ;main.c: 290: toWrite[4] = letter_space;
  5440  024F  3060               	movlw	(low (_letter_space| (0+256)))& (0+255)
  5441  0250  00CD               	movwf	??_write
  5442  0251  084D               	movf	??_write,w
  5443  0252  00E1               	movwf	low ((write@toWrite| 0+4))
  5444                           
  5445                           ;main.c: 291: writeWord(toWrite, 32);
  5446  0253  3020               	movlw	32
  5447  0254  00CD               	movwf	??_write
  5448  0255  084D               	movf	??_write,w
  5449  0256  00BD               	movwf	writeWord@len
  5450  0257  305D               	movlw	(low (write@toWrite| 0))& (0+255)
  5451  0258  3181  212C  3182   	fcall	_writeWord
  5452  025B                     l6153:	
  5453                           
  5454                           ;main.c: 292: }
  5455                           ;main.c: 293: if (selection == 11 || selection == 10) {
  5456  025B  300B               	movlw	11
  5457  025C  0020               	movlb	0	; select bank0
  5458  025D  0662               	xorwf	write@selection,w
  5459  025E  1903               	btfsc	3,2
  5460  025F  2A64               	goto	l6157
  5461  0260  300A               	movlw	10
  5462  0261  0662               	xorwf	write@selection,w
  5463  0262  1D03               	btfss	3,2
  5464  0263  2A8C               	goto	l6161
  5465  0264                     l6157:	
  5466                           
  5467                           ;main.c: 294: uint8_t * toWrite[8];
  5468                           ;main.c: 295: toWrite[0] = letter_space;
  5469  0264  3060               	movlw	(low (_letter_space| (0+256)))& (0+255)
  5470  0265  00CD               	movwf	??_write
  5471  0266  084D               	movf	??_write,w
  5472  0267  00CE               	movwf	write@toWrite_342
  5473                           
  5474                           ;main.c: 296: toWrite[1] = letter_hi;
  5475  0268  3040               	movlw	(low (_letter_hi| (0+256)))& (0+255)
  5476  0269  00CD               	movwf	??_write
  5477  026A  084D               	movf	??_write,w
  5478  026B  00CF               	movwf	low ((write@toWrite_342| 0+1))
  5479                           
  5480                           ;main.c: 297: toWrite[2] = letter_s;
  5481  026C  3038               	movlw	(low (_letter_s| (0+256)))& (0+255)
  5482  026D  00CD               	movwf	??_write
  5483  026E  084D               	movf	??_write,w
  5484  026F  00D0               	movwf	low ((write@toWrite_342| 0+2))
  5485                           
  5486                           ;main.c: 298: toWrite[3] = letter_c;
  5487  0270  3030               	movlw	(low (_letter_c| (0+256)))& (0+255)
  5488  0271  00CD               	movwf	??_write
  5489  0272  084D               	movf	??_write,w
  5490  0273  00D1               	movwf	low ((write@toWrite_342| 0+3))
  5491                           
  5492                           ;main.c: 299: toWrite[4] = letter_o;
  5493  0274  3028               	movlw	(low (_letter_o| (0+256)))& (0+255)
  5494  0275  00CD               	movwf	??_write
  5495  0276  084D               	movf	??_write,w
  5496  0277  00D2               	movwf	low ((write@toWrite_342| 0+4))
  5497                           
  5498                           ;main.c: 300: toWrite[5] = letter_r;
  5499  0278  3020               	movlw	(low (_letter_r| (0+256)))& (0+255)
  5500  0279  00CD               	movwf	??_write
  5501  027A  084D               	movf	??_write,w
  5502  027B  00D3               	movwf	low ((write@toWrite_342| 0+5))
  5503                           
  5504                           ;main.c: 301: toWrite[6] = letter_e;
  5505  027C  3050               	movlw	(low (_letter_e| (0+256)))& (0+255)
  5506  027D  00CD               	movwf	??_write
  5507  027E  084D               	movf	??_write,w
  5508  027F  00D4               	movwf	low ((write@toWrite_342| 0+6))
  5509                           
  5510                           ;main.c: 302: toWrite[7] = letter_space;
  5511  0280  3060               	movlw	(low (_letter_space| (0+256)))& (0+255)
  5512  0281  00CD               	movwf	??_write
  5513  0282  084D               	movf	??_write,w
  5514  0283  00D5               	movwf	low ((write@toWrite_342| 0+7))
  5515                           
  5516                           ;main.c: 303: writeWord(toWrite, 56);
  5517  0284  3038               	movlw	56
  5518  0285  00CD               	movwf	??_write
  5519  0286  084D               	movf	??_write,w
  5520  0287  00BD               	movwf	writeWord@len
  5521  0288  304E               	movlw	(low (write@toWrite_342| 0))& (0+255)
  5522  0289  3181  212C  3182   	fcall	_writeWord
  5523  028C                     l6161:	
  5524                           
  5525                           ;main.c: 304: }
  5526                           ;main.c: 305: if (selection == 12) {
  5527  028C  300C               	movlw	12
  5528  028D  0020               	movlb	0	; select bank0
  5529  028E  0662               	xorwf	write@selection,w
  5530  028F  1D03               	btfss	3,2
  5531  0290  0008               	return
  5532                           
  5533                           ;main.c: 306: uint8_t * toWrite[7];
  5534                           ;main.c: 307: toWrite[0] = letter_space;
  5535  0291  3060               	movlw	(low (_letter_space| (0+256)))& (0+255)
  5536  0292  00CD               	movwf	??_write
  5537  0293  084D               	movf	??_write,w
  5538  0294  00D6               	movwf	write@toWrite_343
  5539                           
  5540                           ;main.c: 308: toWrite[1] = letter_s;
  5541  0295  3038               	movlw	(low (_letter_s| (0+256)))& (0+255)
  5542  0296  00CD               	movwf	??_write
  5543  0297  084D               	movf	??_write,w
  5544  0298  00D7               	movwf	low ((write@toWrite_343| 0+1))
  5545                           
  5546                           ;main.c: 309: toWrite[2] = letter_c;
  5547  0299  3030               	movlw	(low (_letter_c| (0+256)))& (0+255)
  5548  029A  00CD               	movwf	??_write
  5549  029B  084D               	movf	??_write,w
  5550  029C  00D8               	movwf	low ((write@toWrite_343| 0+2))
  5551                           
  5552                           ;main.c: 310: toWrite[3] = letter_o;
  5553  029D  3028               	movlw	(low (_letter_o| (0+256)))& (0+255)
  5554  029E  00CD               	movwf	??_write
  5555  029F  084D               	movf	??_write,w
  5556  02A0  00D9               	movwf	low ((write@toWrite_343| 0+3))
  5557                           
  5558                           ;main.c: 311: toWrite[4] = letter_r;
  5559  02A1  3020               	movlw	(low (_letter_r| (0+256)))& (0+255)
  5560  02A2  00CD               	movwf	??_write
  5561  02A3  084D               	movf	??_write,w
  5562  02A4  00DA               	movwf	low ((write@toWrite_343| 0+4))
  5563                           
  5564                           ;main.c: 312: toWrite[5] = letter_e;
  5565  02A5  3050               	movlw	(low (_letter_e| (0+256)))& (0+255)
  5566  02A6  00CD               	movwf	??_write
  5567  02A7  084D               	movf	??_write,w
  5568  02A8  00DB               	movwf	low ((write@toWrite_343| 0+5))
  5569                           
  5570                           ;main.c: 313: toWrite[6] = letter_space;
  5571  02A9  3060               	movlw	(low (_letter_space| (0+256)))& (0+255)
  5572  02AA  00CD               	movwf	??_write
  5573  02AB  084D               	movf	??_write,w
  5574  02AC  00DC               	movwf	low ((write@toWrite_343| 0+6))
  5575                           
  5576                           ;main.c: 314: writeWord(toWrite, 48);
  5577  02AD  3030               	movlw	48
  5578  02AE  00CD               	movwf	??_write
  5579  02AF  084D               	movf	??_write,w
  5580  02B0  00BD               	movwf	writeWord@len
  5581  02B1  3056               	movlw	(low (write@toWrite_343| 0))& (0+255)
  5582  02B2  3181  212C         	fcall	_writeWord
  5583  02B4  0008               	return
  5584  02B5                     __end_of_write:	
  5585                           
  5586                           	psect	text9
  5587  012C                     __ptext9:	
  5588 ;; *************** function _writeWord *****************
  5589 ;; Defined at:
  5590 ;;		line 269 in file "main.c"
  5591 ;; Parameters:    Size  Location     Type
  5592 ;;  text            1    wreg     PTR PTR unsigned char 
  5593 ;;		 -> write@toWrite_343(7), write@toWrite_342(8), write@toWrite(5), 
  5594 ;;  len             1   29[BANK0 ] unsigned char 
  5595 ;; Auto vars:     Size  Location     Type
  5596 ;;  text            1   42[BANK0 ] PTR PTR unsigned char 
  5597 ;;		 -> write@toWrite_343(7), write@toWrite_342(8), write@toWrite(5), 
  5598 ;;  k               1   44[BANK0 ] unsigned char 
  5599 ;;  shiftValue      1   41[BANK0 ] unsigned char 
  5600 ;;  idx             1   43[BANK0 ] unsigned char 
  5601 ;; Return value:  Size  Location     Type
  5602 ;;                  1    wreg      void 
  5603 ;; Registers used:
  5604 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5605 ;; Tracked objects:
  5606 ;;		On entry : 0/0
  5607 ;;		On exit  : 0/0
  5608 ;;		Unchanged: 0/0
  5609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5610 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5611 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5612 ;;      Temps:          0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5613 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5614 ;;Total ram usage:       16 bytes
  5615 ;; Hardware stack levels used:    1
  5616 ;; Hardware stack levels required when called:   16
  5617 ;; This function calls:
  5618 ;;		___awdiv
  5619 ;;		_clearPixels
  5620 ;;		_drawWalls
  5621 ;;		_writeDisplay
  5622 ;; This function is called by:
  5623 ;;		_write
  5624 ;; This function uses a non-reentrant model
  5625 ;;
  5626                           
  5627                           
  5628                           ;psect for function _writeWord
  5629  012C                     _writeWord:	
  5630                           
  5631                           ;incstack = 0
  5632 ;; hardware stack exceeded
  5633                           ; Regs used in _writeWord: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5634                           ;writeWord@text stored from wreg
  5635  012C  0020               	movlb	0	; select bank0
  5636  012D  00CA               	movwf	writeWord@text
  5637                           
  5638                           ;main.c: 270: for (uint8_t idx = 0; idx < len; idx++) {
  5639  012E  01CB               	clrf	writeWord@idx
  5640  012F                     l6139:	
  5641  012F  083D               	movf	writeWord@len,w
  5642  0130  024B               	subwf	writeWord@idx,w
  5643  0131  1803               	btfsc	3,0
  5644  0132  0008               	return
  5645                           
  5646                           ;main.c: 271: uint8_t shiftValue = idx % 8;
  5647  0133  084B               	movf	writeWord@idx,w
  5648  0134  3907               	andlw	7
  5649  0135  00BE               	movwf	??_writeWord
  5650  0136  083E               	movf	??_writeWord,w
  5651  0137  00C9               	movwf	writeWord@shiftValue
  5652                           
  5653                           ;main.c: 272: for (uint8_t k = 0; k < 8; k++) {
  5654  0138  01CC               	clrf	writeWord@k
  5655  0139  3008               	movlw	8
  5656  013A  024C               	subwf	writeWord@k,w
  5657  013B  1803               	btfsc	3,0
  5658  013C  2998               	goto	l6131
  5659  013D                     l6125:	
  5660                           
  5661                           ;main.c: 273: walls[k] = ((text[idx / 8][k]) << shiftValue) |
  5662                           ;main.c: 274: ((text[idx / 8 + 1][k]) >> 8 - shiftValue);
  5663  013D  3008               	movlw	8
  5664  013E  00A2               	movwf	___awdiv@divisor
  5665  013F  3000               	movlw	0
  5666  0140  00A3               	movwf	___awdiv@divisor+1
  5667  0141  084B               	movf	writeWord@idx,w
  5668  0142  00BE               	movwf	??_writeWord
  5669  0143  01BF               	clrf	??_writeWord+1
  5670  0144  083E               	movf	??_writeWord,w
  5671  0145  00A4               	movwf	___awdiv@dividend
  5672  0146  083F               	movf	??_writeWord+1,w
  5673  0147  00A5               	movwf	___awdiv@dividend+1
  5674  0148  3184  249D  3181   	fcall	___awdiv
  5675  014B  0020               	movlb	0	; select bank0
  5676  014C  0822               	movf	?___awdiv,w
  5677  014D  3E01               	addlw	1
  5678  014E  074A               	addwf	writeWord@text,w
  5679  014F  00C0               	movwf	??_writeWord+2
  5680  0150  0840               	movf	??_writeWord+2,w
  5681  0151  0086               	movwf	6
  5682  0152  0187               	clrf	7
  5683  0153  084C               	movf	writeWord@k,w
  5684  0154  0701               	addwf	1,w
  5685  0155  00C1               	movwf	??_writeWord+3
  5686  0156  0841               	movf	??_writeWord+3,w
  5687  0157  0086               	movwf	6
  5688  0158  3001               	movlw	1	; select bank2/3
  5689  0159  0087               	movwf	7
  5690  015A  0801               	movf	1,w
  5691  015B  00C2               	movwf	??_writeWord+4
  5692  015C  0349               	decf	writeWord@shiftValue,w
  5693  015D  3AFF               	xorlw	255
  5694  015E  3E08               	addlw	8
  5695  015F  0A89               	incf	9,f
  5696  0160  2962               	goto	u5124
  5697  0161                     u5125:	
  5698  0161  36C2               	lsrf	??_writeWord+4,f
  5699  0162                     u5124:	
  5700  0162  0B89               	decfsz	9,f
  5701  0163  2961               	goto	u5125
  5702  0164  3008               	movlw	8
  5703  0165  00A2               	movwf	___awdiv@divisor
  5704  0166  3000               	movlw	0
  5705  0167  00A3               	movwf	___awdiv@divisor+1
  5706  0168  084B               	movf	writeWord@idx,w
  5707  0169  00C3               	movwf	??_writeWord+5
  5708  016A  01C4               	clrf	??_writeWord+6
  5709  016B  0843               	movf	??_writeWord+5,w
  5710  016C  00A4               	movwf	___awdiv@dividend
  5711  016D  0844               	movf	??_writeWord+6,w
  5712  016E  00A5               	movwf	___awdiv@dividend+1
  5713  016F  3184  249D  3181   	fcall	___awdiv
  5714  0172  0020               	movlb	0	; select bank0
  5715  0173  0822               	movf	?___awdiv,w
  5716  0174  074A               	addwf	writeWord@text,w
  5717  0175  00C5               	movwf	??_writeWord+7
  5718  0176  0845               	movf	??_writeWord+7,w
  5719  0177  0086               	movwf	6
  5720  0178  0187               	clrf	7
  5721  0179  084C               	movf	writeWord@k,w
  5722  017A  0701               	addwf	1,w
  5723  017B  00C6               	movwf	??_writeWord+8
  5724  017C  0846               	movf	??_writeWord+8,w
  5725  017D  0086               	movwf	6
  5726  017E  3001               	movlw	1	; select bank2/3
  5727  017F  0087               	movwf	7
  5728  0180  0801               	movf	1,w
  5729  0181  00C7               	movwf	??_writeWord+9
  5730  0182  0A49               	incf	writeWord@shiftValue,w
  5731  0183  2985               	goto	u5134
  5732  0184                     u5135:	
  5733  0184  35C7               	lslf	??_writeWord+9,f
  5734  0185                     u5134:	
  5735  0185  0B89               	decfsz	9,f
  5736  0186  2984               	goto	u5135
  5737  0187  0847               	movf	??_writeWord+9,w
  5738  0188  0442               	iorwf	??_writeWord+4,w
  5739  0189  00C8               	movwf	??_writeWord+10
  5740  018A  084C               	movf	writeWord@k,w
  5741  018B  3ECE               	addlw	(low (_walls| 0))& (0+255)
  5742  018C  0086               	movwf	6
  5743  018D  0187               	clrf	7
  5744  018E  0848               	movf	??_writeWord+10,w
  5745  018F  0081               	movwf	1
  5746  0190  3001               	movlw	1
  5747  0191  00BE               	movwf	??_writeWord
  5748  0192  083E               	movf	??_writeWord,w
  5749  0193  07CC               	addwf	writeWord@k,f
  5750  0194  3008               	movlw	8
  5751  0195  024C               	subwf	writeWord@k,w
  5752  0196  1C03               	skipc
  5753  0197  293D               	goto	l6125
  5754  0198                     l6131:	
  5755                           
  5756                           ;main.c: 275: }
  5757                           ;main.c: 276: clearPixels();
  5758  0198  318D  2562  3181   	fcall	_clearPixels
  5759                           
  5760                           ;main.c: 277: drawWalls();
  5761  019B  318E  267E  3181   	fcall	_drawWalls
  5762                           
  5763                           ;main.c: 278: writeDisplay();
  5764  019E  3183  23E9  3181   	fcall	_writeDisplay
  5765                           
  5766                           ;main.c: 279: _delay((unsigned long)((70)*(32000000/4000.0)));
  5767  01A1  3003               	movlw	3
  5768  01A2  0020               	movlb	0	; select bank0
  5769  01A3  00BF               	movwf	??_writeWord+1
  5770  01A4  30D8               	movlw	216
  5771  01A5  00BE               	movwf	??_writeWord
  5772  01A6  3041               	movlw	65
  5773  01A7                     u5687:	
  5774  01A7  0B89               	decfsz	9,f
  5775  01A8  29A7               	goto	u5687
  5776  01A9  0BBE               	decfsz	??_writeWord,f
  5777  01AA  29A7               	goto	u5687
  5778  01AB  0BBF               	decfsz	??_writeWord+1,f
  5779  01AC  29A7               	goto	u5687
  5780  01AD  3200               	nop2
  5781  01AE  3001               	movlw	1
  5782  01AF  0020               	movlb	0	; select bank0
  5783  01B0  00BE               	movwf	??_writeWord
  5784  01B1  083E               	movf	??_writeWord,w
  5785  01B2  07CB               	addwf	writeWord@idx,f
  5786  01B3  292F               	goto	l6139
  5787  01B4                     __end_of_writeWord:	
  5788                           
  5789                           	psect	text10
  5790  03E9                     __ptext10:	
  5791 ;; *************** function _writeDisplay *****************
  5792 ;; Defined at:
  5793 ;;		line 173 in file "main.c"
  5794 ;; Parameters:    Size  Location     Type
  5795 ;;		None
  5796 ;; Auto vars:     Size  Location     Type
  5797 ;;		None
  5798 ;; Return value:  Size  Location     Type
  5799 ;;                  1    wreg      void 
  5800 ;; Registers used:
  5801 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5802 ;; Tracked objects:
  5803 ;;		On entry : 0/0
  5804 ;;		On exit  : 0/0
  5805 ;;		Unchanged: 0/0
  5806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5807 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5808 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5809 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5810 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5811 ;;Total ram usage:        5 bytes
  5812 ;; Hardware stack levels used:    1
  5813 ;; Hardware stack levels required when called:   15
  5814 ;; This function calls:
  5815 ;;		___awdiv
  5816 ;;		_i2c_writeNBytes
  5817 ;; This function is called by:
  5818 ;;		_writeWord
  5819 ;;		_endGame
  5820 ;;		_main
  5821 ;; This function uses a non-reentrant model
  5822 ;;
  5823                           
  5824                           
  5825                           ;psect for function _writeDisplay
  5826  03E9                     _writeDisplay:	
  5827                           
  5828                           ;main.c: 174: writebuffer[0] = 0;
  5829                           
  5830                           ;incstack = 0
  5831                           ; Regs used in _writeDisplay: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5832  03E9  0023               	movlb	3	; select bank3
  5833  03EA  01C0               	clrf	_writebuffer^(0+384)
  5834                           
  5835                           ;main.c: 175: for (i = 1; i < 17; i += 2) {
  5836  03EB  0020               	movlb	0	; select bank0
  5837  03EC  01EA               	clrf	_i
  5838  03ED  0AEA               	incf	_i,f
  5839  03EE  3011               	movlw	17
  5840  03EF  026A               	subwf	_i,w
  5841  03F0  1803               	btfsc	3,0
  5842  03F1  2C39               	goto	l6115
  5843  03F2                     l6109:	
  5844                           
  5845                           ;main.c: 176: writebuffer[i] = pixelbuffer[i / 2] & 0xFF;
  5846  03F2  3002               	movlw	2
  5847  03F3  00A2               	movwf	___awdiv@divisor
  5848  03F4  3000               	movlw	0
  5849  03F5  00A3               	movwf	___awdiv@divisor+1
  5850  03F6  086A               	movf	_i,w
  5851  03F7  00B8               	movwf	??_writeDisplay
  5852  03F8  01B9               	clrf	??_writeDisplay+1
  5853  03F9  0838               	movf	??_writeDisplay,w
  5854  03FA  00A4               	movwf	___awdiv@dividend
  5855  03FB  0839               	movf	??_writeDisplay+1,w
  5856  03FC  00A5               	movwf	___awdiv@dividend+1
  5857  03FD  3184  249D  3183   	fcall	___awdiv
  5858  0400  0020               	movlb	0	; select bank0
  5859  0401  0822               	movf	?___awdiv,w
  5860  0402  0709               	addwf	9,w
  5861  0403  3EBE               	addlw	(low (_pixelbuffer| 0))& (0+255)
  5862  0404  0086               	movwf	6
  5863  0405  0187               	clrf	7
  5864  0406  0801               	movf	1,w
  5865  0407  00BA               	movwf	??_writeDisplay+2
  5866  0408  086A               	movf	_i,w
  5867  0409  3EC0               	addlw	(low (_writebuffer| (0+256)))& (0+255)
  5868  040A  0086               	movwf	6
  5869  040B  3001               	movlw	1	; select bank3/4
  5870  040C  0087               	movwf	7
  5871  040D  083A               	movf	??_writeDisplay+2,w
  5872  040E  0081               	movwf	1
  5873                           
  5874                           ;main.c: 177: writebuffer[i + 1] = pixelbuffer[i / 2] >> 8;
  5875  040F  3002               	movlw	2
  5876  0410  00A2               	movwf	___awdiv@divisor
  5877  0411  3000               	movlw	0
  5878  0412  00A3               	movwf	___awdiv@divisor+1
  5879  0413  086A               	movf	_i,w
  5880  0414  00B8               	movwf	??_writeDisplay
  5881  0415  01B9               	clrf	??_writeDisplay+1
  5882  0416  0838               	movf	??_writeDisplay,w
  5883  0417  00A4               	movwf	___awdiv@dividend
  5884  0418  0839               	movf	??_writeDisplay+1,w
  5885  0419  00A5               	movwf	___awdiv@dividend+1
  5886  041A  3184  249D  3183   	fcall	___awdiv
  5887  041D  0020               	movlb	0	; select bank0
  5888  041E  0822               	movf	?___awdiv,w
  5889  041F  0709               	addwf	9,w
  5890  0420  3EBE               	addlw	(low (_pixelbuffer| 0))& (0+255)
  5891  0421  0086               	movwf	6
  5892  0422  0187               	clrf	7
  5893  0423  3F40               	moviw [0]fsr1
  5894  0424  00BA               	movwf	??_writeDisplay+2
  5895  0425  3F41               	moviw [1]fsr1
  5896  0426  00BB               	movwf	??_writeDisplay+3
  5897  0427  083B               	movf	??_writeDisplay+3,w
  5898  0428  00BC               	movwf	??_writeDisplay+4
  5899  0429  086A               	movf	_i,w
  5900  042A  3E01               	addlw	1
  5901  042B  3EC0               	addlw	(low (_writebuffer| (0+256)))& (0+255)
  5902  042C  0086               	movwf	6
  5903  042D  3001               	movlw	1	; select bank3/4
  5904  042E  0087               	movwf	7
  5905  042F  083C               	movf	??_writeDisplay+4,w
  5906  0430  0081               	movwf	1
  5907  0431  3002               	movlw	2
  5908  0432  00B8               	movwf	??_writeDisplay
  5909  0433  0838               	movf	??_writeDisplay,w
  5910  0434  07EA               	addwf	_i,f
  5911  0435  3011               	movlw	17
  5912  0436  026A               	subwf	_i,w
  5913  0437  1C03               	skipc
  5914  0438  2BF2               	goto	l6109
  5915  0439                     l6115:	
  5916                           
  5917                           ;main.c: 178: }
  5918                           ;main.c: 179: i2c_writeNBytes(0x70, writebuffer, 17);
  5919  0439  30C0               	movlw	(low (_writebuffer| (0+256)))& (0+255)
  5920  043A  00B8               	movwf	??_writeDisplay
  5921  043B  0838               	movf	??_writeDisplay,w
  5922  043C  00B4               	movwf	i2c_writeNBytes@data
  5923  043D  3011               	movlw	17
  5924  043E  00B5               	movwf	i2c_writeNBytes@len
  5925  043F  3000               	movlw	0
  5926  0440  00B6               	movwf	i2c_writeNBytes@len+1
  5927  0441  3070               	movlw	112
  5928  0442  318F  27D7         	fcall	_i2c_writeNBytes
  5929  0444  0008               	return
  5930  0445                     __end_of_writeDisplay:	
  5931                           
  5932                           	psect	text11
  5933  0FD7                     __ptext11:	
  5934 ;; *************** function _i2c_writeNBytes *****************
  5935 ;; Defined at:
  5936 ;;		line 48 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  5937 ;; Parameters:    Size  Location     Type
  5938 ;;  address         1    wreg     unsigned char 
  5939 ;;  data            1   20[BANK0 ] PTR void 
  5940 ;;		 -> writebuffer(17), 
  5941 ;;  len             2   21[BANK0 ] unsigned int 
  5942 ;; Auto vars:     Size  Location     Type
  5943 ;;  address         1   23[BANK0 ] unsigned char 
  5944 ;; Return value:  Size  Location     Type
  5945 ;;                  1    wreg      void 
  5946 ;; Registers used:
  5947 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5948 ;; Tracked objects:
  5949 ;;		On entry : 0/0
  5950 ;;		On exit  : 0/0
  5951 ;;		Unchanged: 0/0
  5952 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5953 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5954 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5955 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5956 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5957 ;;Total ram usage:        4 bytes
  5958 ;; Hardware stack levels used:    1
  5959 ;; Hardware stack levels required when called:   14
  5960 ;; This function calls:
  5961 ;;		_i2c_close
  5962 ;;		_i2c_masterWrite
  5963 ;;		_i2c_open
  5964 ;;		_i2c_setAddressNACKCallback
  5965 ;;		_i2c_setBuffer
  5966 ;; This function is called by:
  5967 ;;		_writeDisplay
  5968 ;;		_initializeDisplay
  5969 ;; This function uses a non-reentrant model
  5970 ;;
  5971                           
  5972                           
  5973                           ;psect for function _i2c_writeNBytes
  5974  0FD7                     _i2c_writeNBytes:	
  5975                           
  5976                           ;incstack = 0
  5977                           ; Regs used in _i2c_writeNBytes: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5978                           ;i2c_writeNBytes@address stored from wreg
  5979  0FD7  0020               	movlb	0	; select bank0
  5980  0FD8  00B7               	movwf	i2c_writeNBytes@address
  5981  0FD9                     l6091:	
  5982                           ;i2c_simple_master.c: 50: while(!i2c_open(address));
  5983                           
  5984  0FD9  0020               	movlb	0	; select bank0
  5985  0FDA  0837               	movf	i2c_writeNBytes@address,w
  5986  0FDB  3185  2540  318F   	fcall	_i2c_open
  5987  0FDE  3A00               	xorlw	0
  5988  0FDF  1903               	skipnz
  5989  0FE0  2FD9               	goto	l6091
  5990                           
  5991                           ;i2c_simple_master.c: 51: i2c_setBuffer(data,len);
  5992  0FE1  0020               	movlb	0	; select bank0
  5993  0FE2  0834               	movf	i2c_writeNBytes@data,w
  5994  0FE3  00A2               	movwf	i2c_setBuffer@buffer
  5995  0FE4  3001               	movlw	1
  5996  0FE5  00A3               	movwf	i2c_setBuffer@buffer+1
  5997  0FE6  0836               	movf	i2c_writeNBytes@len+1,w
  5998  0FE7  00A5               	movwf	i2c_setBuffer@bufferSize+1
  5999  0FE8  0835               	movf	i2c_writeNBytes@len,w
  6000  0FE9  00A4               	movwf	i2c_setBuffer@bufferSize
  6001  0FEA  318D  25C8  318F   	fcall	_i2c_setBuffer
  6002                           
  6003                           ;i2c_simple_master.c: 52: i2c_setAddressNACKCallback(i2c_restartWrite,(0));
  6004  0FED  3006               	movlw	low _i2c_restartWrite
  6005  0FEE  0020               	movlb	0	; select bank0
  6006  0FEF  00A7               	movwf	i2c_setAddressNACKCallback@cb
  6007  0FF0  300C               	movlw	high _i2c_restartWrite
  6008  0FF1  00A8               	movwf	i2c_setAddressNACKCallback@cb+1
  6009  0FF2  01A9               	clrf	i2c_setAddressNACKCallback@p
  6010  0FF3  318D  2555  318F   	fcall	_i2c_setAddressNACKCallback
  6011                           
  6012                           ;i2c_simple_master.c: 53: i2c_masterWrite();
  6013  0FF6  318B  23E1  318F   	fcall	_i2c_masterWrite
  6014  0FF9                     l6099:	
  6015                           ;i2c_simple_master.c: 54: while(I2C_BUSY == i2c_close());
  6016                           
  6017  0FF9  318D  25F7  318F   	fcall	_i2c_close
  6018  0FFC  3A01               	xorlw	1
  6019  0FFD  1D03               	btfss	3,2
  6020  0FFE  0008               	return
  6021  0FFF  2FF9               	goto	l6099
  6022  1000                     __end_of_i2c_writeNBytes:	
  6023                           
  6024                           	psect	text12
  6025  0D55                     __ptext12:	
  6026 ;; *************** function _i2c_setAddressNACKCallback *****************
  6027 ;; Defined at:
  6028 ;;		line 99 in file "mcc_generated_files/drivers/i2c_master.c"
  6029 ;; Parameters:    Size  Location     Type
  6030 ;;  cb              2    7[BANK0 ] PTR FTN(PTR void ,)enum 
  6031 ;;		 -> i2c_restartWrite(1), 
  6032 ;;  p               1    9[BANK0 ] PTR void 
  6033 ;;		 -> NULL(0), 
  6034 ;; Auto vars:     Size  Location     Type
  6035 ;;		None
  6036 ;; Return value:  Size  Location     Type
  6037 ;;                  1    wreg      void 
  6038 ;; Registers used:
  6039 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6040 ;; Tracked objects:
  6041 ;;		On entry : 0/0
  6042 ;;		On exit  : 0/0
  6043 ;;		Unchanged: 0/0
  6044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6045 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6046 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6047 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6048 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6049 ;;Total ram usage:        4 bytes
  6050 ;; Hardware stack levels used:    1
  6051 ;; Hardware stack levels required when called:    7
  6052 ;; This function calls:
  6053 ;;		_setCallBack
  6054 ;; This function is called by:
  6055 ;;		_i2c_writeNBytes
  6056 ;;		_i2c_write1ByteRegister
  6057 ;;		_i2c_read1ByteRegister
  6058 ;;		_i2c_read2ByteRegister
  6059 ;;		_i2c_write2ByteRegister
  6060 ;;		_i2c_readDataBlock
  6061 ;; This function uses a non-reentrant model
  6062 ;;
  6063                           
  6064                           
  6065                           ;psect for function _i2c_setAddressNACKCallback
  6066  0D55                     _i2c_setAddressNACKCallback:	
  6067                           
  6068                           ;i2c_master.c: 101: setCallBack(i2c_addressNACK,cb,p);
  6069                           
  6070                           ;incstack = 0
  6071                           ; Regs used in _i2c_setAddressNACKCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  6072  0D55  0020               	movlb	0	; select bank0
  6073  0D56  0828               	movf	i2c_setAddressNACKCallback@cb+1,w
  6074  0D57  00A3               	movwf	setCallBack@cb+1
  6075  0D58  0827               	movf	i2c_setAddressNACKCallback@cb,w
  6076  0D59  00A2               	movwf	setCallBack@cb
  6077  0D5A  0829               	movf	i2c_setAddressNACKCallback@p,w
  6078  0D5B  00AA               	movwf	??_i2c_setAddressNACKCallback
  6079  0D5C  082A               	movf	??_i2c_setAddressNACKCallback,w
  6080  0D5D  00A4               	movwf	setCallBack@p
  6081  0D5E  3002               	movlw	2
  6082  0D5F  318F  2789         	fcall	_setCallBack
  6083  0D61  0008               	return
  6084  0D62                     __end_of_i2c_setAddressNACKCallback:	
  6085                           
  6086                           	psect	text13
  6087  0540                     __ptext13:	
  6088 ;; *************** function _i2c_open *****************
  6089 ;; Defined at:
  6090 ;;		line 116 in file "mcc_generated_files/drivers/i2c_master.c"
  6091 ;; Parameters:    Size  Location     Type
  6092 ;;  address         1    wreg     unsigned char 
  6093 ;; Auto vars:     Size  Location     Type
  6094 ;;  address         1    5[BANK0 ] unsigned char 
  6095 ;;  ret             1    6[BANK0 ] enum E12166
  6096 ;; Return value:  Size  Location     Type
  6097 ;;                  1    wreg      enum E92
  6098 ;; Registers used:
  6099 ;;		wreg, status,2, status,0, pclath, cstack
  6100 ;; Tracked objects:
  6101 ;;		On entry : 0/0
  6102 ;;		On exit  : 0/0
  6103 ;;		Unchanged: 0/0
  6104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6105 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6106 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6107 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6108 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6109 ;;Total ram usage:        3 bytes
  6110 ;; Hardware stack levels used:    1
  6111 ;; Hardware stack levels required when called:    7
  6112 ;; This function calls:
  6113 ;;		_i2c_driver_open
  6114 ;;		_i2c_driver_setBusCollisionISR
  6115 ;;		_i2c_driver_setI2cISR
  6116 ;;		_mssp_clearIRQ
  6117 ;; This function is called by:
  6118 ;;		_i2c_writeNBytes
  6119 ;;		_i2c_write1ByteRegister
  6120 ;;		_i2c_read1ByteRegister
  6121 ;;		_i2c_read2ByteRegister
  6122 ;;		_i2c_write2ByteRegister
  6123 ;;		_i2c_readDataBlock
  6124 ;;		_i2c_readNBytes
  6125 ;; This function uses a non-reentrant model
  6126 ;;
  6127                           
  6128                           
  6129                           ;psect for function _i2c_open
  6130  0540                     _i2c_open:	
  6131                           
  6132                           ;incstack = 0
  6133                           ; Regs used in _i2c_open: [wreg+status,2+status,0+pclath+cstack]
  6134                           ;i2c_open@address stored from wreg
  6135  0540  0020               	movlb	0	; select bank0
  6136  0541  00A5               	movwf	i2c_open@address
  6137                           
  6138                           ;i2c_master.c: 118: i2c_error_t ret = I2C_BUSY;
  6139  0542  01A6               	clrf	i2c_open@ret
  6140  0543  0AA6               	incf	i2c_open@ret,f
  6141                           
  6142                           ;i2c_master.c: 120: if(!i2c_status.inUse)
  6143  0544  0021               	movlb	1	; select bank1
  6144  0545  18A0               	btfsc	_i2c_status^(0+128),1
  6145  0546  2D8B               	goto	l609
  6146                           
  6147                           ;i2c_master.c: 121: {
  6148                           ;i2c_master.c: 122: i2c_status.address = address;
  6149  0547  0020               	movlb	0	; select bank0
  6150  0548  0825               	movf	i2c_open@address,w
  6151  0549  00A4               	movwf	??_i2c_open
  6152  054A  0824               	movf	??_i2c_open,w
  6153  054B  0021               	movlb	1	; select bank1
  6154  054C  00A1               	movwf	(_i2c_status^(0+128)+1)
  6155                           
  6156                           ;i2c_master.c: 123: i2c_status.busy = 0;
  6157  054D  1020               	bcf	_i2c_status^(0+128),0
  6158                           
  6159                           ;i2c_master.c: 124: i2c_status.inUse = 1;
  6160  054E  14A0               	bsf	_i2c_status^(0+128),1
  6161                           
  6162                           ;i2c_master.c: 125: i2c_status.addressNACKCheck = 0;
  6163  054F  11A0               	bcf	_i2c_status^(0+128),3
  6164                           
  6165                           ;i2c_master.c: 126: i2c_status.state = I2C_RESET;
  6166  0550  300E               	movlw	14
  6167  0551  0020               	movlb	0	; select bank0
  6168  0552  00A4               	movwf	??_i2c_open
  6169  0553  0824               	movf	??_i2c_open,w
  6170  0554  0021               	movlb	1	; select bank1
  6171  0555  00AA               	movwf	(_i2c_status^(0+128)+10)
  6172                           
  6173                           ;i2c_master.c: 127: i2c_status.time_out_value = 500;
  6174  0556  30F4               	movlw	244
  6175  0557  00A8               	movwf	(_i2c_status^(0+128)+8)
  6176  0558  3001               	movlw	1
  6177  0559  00A9               	movwf	(_i2c_status^(0+128)+9)
  6178                           
  6179                           ;i2c_master.c: 128: i2c_status.bufferFree = 1;
  6180  055A  1520               	bsf	_i2c_status^(0+128),2
  6181                           
  6182                           ;i2c_master.c: 131: i2c_status.callbackTable[i2c_dataComplete]=returnStop;
  6183  055B  300C               	movlw	low _returnStop
  6184  055C  00AC               	movwf	(low ((_i2c_status| 0+12)))^(0+128)
  6185  055D  300C               	movlw	high _returnStop
  6186  055E  00AD               	movwf	((low ((_i2c_status| 0+12)))^(0+128)+1)
  6187                           
  6188                           ;i2c_master.c: 132: i2c_status.callbackPayload[i2c_dataComplete] = (0);
  6189  055F  01B8               	clrf	(low ((_i2c_status| 0+24)))^(0+128)
  6190                           
  6191                           ;i2c_master.c: 133: i2c_status.callbackTable[i2c_writeCollision]=returnStop;
  6192  0560  300C               	movlw	low _returnStop
  6193  0561  00AE               	movwf	(low ((_i2c_status| 0+14)))^(0+128)
  6194  0562  300C               	movlw	high _returnStop
  6195  0563  00AF               	movwf	((low ((_i2c_status| 0+14)))^(0+128)+1)
  6196                           
  6197                           ;i2c_master.c: 134: i2c_status.callbackPayload[i2c_writeCollision] = (0);
  6198  0564  01B9               	clrf	(low ((_i2c_status| 0+25)))^(0+128)
  6199                           
  6200                           ;i2c_master.c: 135: i2c_status.callbackTable[i2c_addressNACK]=returnStop;
  6201  0565  300C               	movlw	low _returnStop
  6202  0566  00B0               	movwf	(low ((_i2c_status| 0+16)))^(0+128)
  6203  0567  300C               	movlw	high _returnStop
  6204  0568  00B1               	movwf	((low ((_i2c_status| 0+16)))^(0+128)+1)
  6205                           
  6206                           ;i2c_master.c: 136: i2c_status.callbackPayload[i2c_addressNACK] = (0);
  6207  0569  01BA               	clrf	(low ((_i2c_status| 0+26)))^(0+128)
  6208                           
  6209                           ;i2c_master.c: 137: i2c_status.callbackTable[i2c_dataNACK]=returnStop;
  6210  056A  300C               	movlw	low _returnStop
  6211  056B  00B2               	movwf	(low ((_i2c_status| 0+18)))^(0+128)
  6212  056C  300C               	movlw	high _returnStop
  6213  056D  00B3               	movwf	((low ((_i2c_status| 0+18)))^(0+128)+1)
  6214                           
  6215                           ;i2c_master.c: 138: i2c_status.callbackPayload[i2c_dataNACK] = (0);
  6216  056E  01BB               	clrf	(low ((_i2c_status| 0+27)))^(0+128)
  6217                           
  6218                           ;i2c_master.c: 139: i2c_status.callbackTable[i2c_timeOut]=returnReset;
  6219  056F  3012               	movlw	low _returnReset
  6220  0570  00B4               	movwf	(low ((_i2c_status| 0+20)))^(0+128)
  6221  0571  300C               	movlw	high _returnReset
  6222  0572  00B5               	movwf	((low ((_i2c_status| 0+20)))^(0+128)+1)
  6223                           
  6224                           ;i2c_master.c: 140: i2c_status.callbackPayload[i2c_timeOut] = (0);
  6225  0573  01BC               	clrf	(low ((_i2c_status| 0+28)))^(0+128)
  6226                           
  6227                           ;i2c_master.c: 142: i2c_driver_open();
  6228  0574  318C  24BA  3185   	fcall	_i2c_driver_open
  6229                           
  6230                           ;i2c_master.c: 143: mssp_clearIRQ();
  6231  0577  318B  239D  3185   	fcall	_mssp_clearIRQ
  6232                           
  6233                           ;i2c_master.c: 145: i2c_driver_setBusCollisionISR(i2c_busCollisionISR);
  6234  057A  3088               	movlw	low _i2c_busCollisionISR
  6235  057B  0020               	movlb	0	; select bank0
  6236  057C  00A2               	movwf	i2c_driver_setBusCollisionISR@f
  6237  057D  300B               	movlw	high _i2c_busCollisionISR
  6238  057E  00A3               	movwf	i2c_driver_setBusCollisionISR@f+1
  6239  057F  318C  248A  3185   	fcall	_i2c_driver_setBusCollisionISR
  6240                           
  6241                           ;i2c_master.c: 146: i2c_driver_setI2cISR(i2c_ISR);
  6242  0582  30DA               	movlw	low _i2c_ISR
  6243  0583  0020               	movlb	0	; select bank0
  6244  0584  00A2               	movwf	i2c_driver_setI2cISR@f
  6245  0585  3007               	movlw	high _i2c_ISR
  6246  0586  00A3               	movwf	i2c_driver_setI2cISR@f+1
  6247  0587  318C  2493         	fcall	_i2c_driver_setI2cISR
  6248                           
  6249                           ;i2c_master.c: 151: ret = I2C_NOERR;
  6250  0589  0020               	movlb	0	; select bank0
  6251  058A  01A6               	clrf	i2c_open@ret
  6252  058B                     l609:	
  6253                           
  6254                           ;i2c_master.c: 152: }
  6255                           ;i2c_master.c: 153: return ret;
  6256  058B  0020               	movlb	0	; select bank0
  6257  058C  0826               	movf	i2c_open@ret,w
  6258  058D  0008               	return
  6259  058E                     __end_of_i2c_open:	
  6260                           
  6261                           	psect	text14
  6262  0C93                     __ptext14:	
  6263 ;; *************** function _i2c_driver_setI2cISR *****************
  6264 ;; Defined at:
  6265 ;;		line 262 in file "mcc_generated_files/i2c_driver.c"
  6266 ;; Parameters:    Size  Location     Type
  6267 ;;  f               2    2[BANK0 ] PTR void 
  6268 ;;		 -> i2c_ISR(1), 
  6269 ;; Auto vars:     Size  Location     Type
  6270 ;;		None
  6271 ;; Return value:  Size  Location     Type
  6272 ;;                  1    wreg      void 
  6273 ;; Registers used:
  6274 ;;		wreg
  6275 ;; Tracked objects:
  6276 ;;		On entry : 0/0
  6277 ;;		On exit  : 0/0
  6278 ;;		Unchanged: 0/0
  6279 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6280 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6281 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6282 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6283 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6284 ;;Total ram usage:        2 bytes
  6285 ;; Hardware stack levels used:    1
  6286 ;; Hardware stack levels required when called:    6
  6287 ;; This function calls:
  6288 ;;		Nothing
  6289 ;; This function is called by:
  6290 ;;		_i2c_open
  6291 ;; This function uses a non-reentrant model
  6292 ;;
  6293                           
  6294                           
  6295                           ;psect for function _i2c_driver_setI2cISR
  6296  0C93                     _i2c_driver_setI2cISR:	
  6297                           
  6298                           ;i2c_driver.c: 263: i2c_driver_i2cISR = f;
  6299                           
  6300                           ;incstack = 0
  6301                           ; Regs used in _i2c_driver_setI2cISR: [wreg]
  6302  0C93  0020               	movlb	0	; select bank0
  6303  0C94  0823               	movf	i2c_driver_setI2cISR@f+1,w
  6304  0C95  0021               	movlb	1	; select bank1
  6305  0C96  00DD               	movwf	(_i2c_driver_i2cISR+1)^(0+128)
  6306  0C97  0020               	movlb	0	; select bank0
  6307  0C98  0822               	movf	i2c_driver_setI2cISR@f,w
  6308  0C99  0021               	movlb	1	; select bank1
  6309  0C9A  00DC               	movwf	_i2c_driver_i2cISR^(0+128)
  6310  0C9B  0008               	return
  6311  0C9C                     __end_of_i2c_driver_setI2cISR:	
  6312                           
  6313                           	psect	text15
  6314  0C8A                     __ptext15:	
  6315 ;; *************** function _i2c_driver_setBusCollisionISR *****************
  6316 ;; Defined at:
  6317 ;;		line 258 in file "mcc_generated_files/i2c_driver.c"
  6318 ;; Parameters:    Size  Location     Type
  6319 ;;  f               2    2[BANK0 ] PTR void 
  6320 ;;		 -> i2c_busCollisionISR(1), 
  6321 ;; Auto vars:     Size  Location     Type
  6322 ;;		None
  6323 ;; Return value:  Size  Location     Type
  6324 ;;                  1    wreg      void 
  6325 ;; Registers used:
  6326 ;;		wreg
  6327 ;; Tracked objects:
  6328 ;;		On entry : 0/0
  6329 ;;		On exit  : 0/0
  6330 ;;		Unchanged: 0/0
  6331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6332 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6333 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6334 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6335 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6336 ;;Total ram usage:        2 bytes
  6337 ;; Hardware stack levels used:    1
  6338 ;; Hardware stack levels required when called:    6
  6339 ;; This function calls:
  6340 ;;		Nothing
  6341 ;; This function is called by:
  6342 ;;		_i2c_open
  6343 ;; This function uses a non-reentrant model
  6344 ;;
  6345                           
  6346                           
  6347                           ;psect for function _i2c_driver_setBusCollisionISR
  6348  0C8A                     _i2c_driver_setBusCollisionISR:	
  6349                           
  6350                           ;i2c_driver.c: 259: i2c_driver_busCollisionISR = f;
  6351                           
  6352                           ;incstack = 0
  6353                           ; Regs used in _i2c_driver_setBusCollisionISR: [wreg]
  6354  0C8A  0020               	movlb	0	; select bank0
  6355  0C8B  0823               	movf	i2c_driver_setBusCollisionISR@f+1,w
  6356  0C8C  0021               	movlb	1	; select bank1
  6357  0C8D  00DF               	movwf	(_i2c_driver_busCollisionISR+1)^(0+128)
  6358  0C8E  0020               	movlb	0	; select bank0
  6359  0C8F  0822               	movf	i2c_driver_setBusCollisionISR@f,w
  6360  0C90  0021               	movlb	1	; select bank1
  6361  0C91  00DE               	movwf	_i2c_driver_busCollisionISR^(0+128)
  6362  0C92  0008               	return
  6363  0C93                     __end_of_i2c_driver_setBusCollisionISR:	
  6364                           
  6365                           	psect	text16
  6366  0CBA                     __ptext16:	
  6367 ;; *************** function _i2c_driver_open *****************
  6368 ;; Defined at:
  6369 ;;		line 83 in file "mcc_generated_files/i2c_driver.c"
  6370 ;; Parameters:    Size  Location     Type
  6371 ;;		None
  6372 ;; Auto vars:     Size  Location     Type
  6373 ;;		None
  6374 ;; Return value:  Size  Location     Type
  6375 ;;		None               void
  6376 ;; Registers used:
  6377 ;;		wreg, status,2
  6378 ;; Tracked objects:
  6379 ;;		On entry : 0/0
  6380 ;;		On exit  : 0/0
  6381 ;;		Unchanged: 0/0
  6382 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6383 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6384 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6385 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6386 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6387 ;;Total ram usage:        0 bytes
  6388 ;; Hardware stack levels used:    1
  6389 ;; Hardware stack levels required when called:    6
  6390 ;; This function calls:
  6391 ;;		Nothing
  6392 ;; This function is called by:
  6393 ;;		_i2c_open
  6394 ;; This function uses a non-reentrant model
  6395 ;;
  6396                           
  6397                           
  6398                           ;psect for function _i2c_driver_open
  6399  0CBA                     _i2c_driver_open:	
  6400                           
  6401                           ;i2c_driver.c: 85: if(!SSP1CON1bits.SSPEN)
  6402                           
  6403                           ;incstack = 0
  6404                           ; Regs used in _i2c_driver_open: [wreg+status,2]
  6405  0CBA  0024               	movlb	4	; select bank4
  6406  0CBB  1A95               	btfsc	21,5	;volatile
  6407  0CBC  0008               	return
  6408                           
  6409                           ;i2c_driver.c: 86: {
  6410                           ;i2c_driver.c: 87: SSP1STAT = 0x00;
  6411  0CBD  0194               	clrf	20	;volatile
  6412                           
  6413                           ;i2c_driver.c: 88: SSP1CON1 = 0x28;
  6414  0CBE  3028               	movlw	40
  6415  0CBF  0095               	movwf	21	;volatile
  6416                           
  6417                           ;i2c_driver.c: 89: SSP1CON2 = 0x00;
  6418  0CC0  0196               	clrf	22	;volatile
  6419                           
  6420                           ;i2c_driver.c: 90: SSP1ADD = 0x4f;
  6421  0CC1  304F               	movlw	79
  6422  0CC2  0092               	movwf	18	;volatile
  6423                           
  6424                           ;i2c_driver.c: 93: else
  6425                           ;i2c_driver.c: 94: return 0;
  6426                           ;	Return value of _i2c_driver_open is never used
  6427                           
  6428                           ;i2c_driver.c: 92: }
  6429                           
  6430                           ;i2c_driver.c: 91: return 1;
  6431                           ;	Return value of _i2c_driver_open is never used
  6432  0CC3  0008               	return
  6433  0CC4                     __end_of_i2c_driver_open:	
  6434                           
  6435                           	psect	text17
  6436  0BE1                     __ptext17:	
  6437 ;; *************** function _i2c_masterWrite *****************
  6438 ;; Defined at:
  6439 ;;		line 222 in file "mcc_generated_files/drivers/i2c_master.c"
  6440 ;; Parameters:    Size  Location     Type
  6441 ;;		None
  6442 ;; Auto vars:     Size  Location     Type
  6443 ;;		None
  6444 ;; Return value:  Size  Location     Type
  6445 ;;                  1    wreg      enum E92
  6446 ;; Registers used:
  6447 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6448 ;; Tracked objects:
  6449 ;;		On entry : 0/0
  6450 ;;		On exit  : 0/0
  6451 ;;		Unchanged: 0/0
  6452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6453 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6454 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6455 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6456 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6457 ;;Total ram usage:        0 bytes
  6458 ;; Hardware stack levels used:    1
  6459 ;; Hardware stack levels required when called:   13
  6460 ;; This function calls:
  6461 ;;		_i2c_masterOperation
  6462 ;; This function is called by:
  6463 ;;		_i2c_writeNBytes
  6464 ;;		_i2c_write1ByteRegister
  6465 ;;		_i2c_read1ByteRegister
  6466 ;;		_i2c_read2ByteRegister
  6467 ;;		_i2c_write2ByteRegister
  6468 ;;		_i2c_readDataBlock
  6469 ;; This function uses a non-reentrant model
  6470 ;;
  6471                           
  6472                           
  6473                           ;psect for function _i2c_masterWrite
  6474  0BE1                     _i2c_masterWrite:	
  6475                           
  6476                           ;i2c_master.c: 224: return i2c_masterOperation(0);
  6477                           ;	Return value of _i2c_masterWrite is never used
  6478                           
  6479                           ;incstack = 0
  6480                           ; Regs used in _i2c_masterWrite: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6481  0BE1  3000               	movlw	0
  6482  0BE2  318F  2765         	fcall	_i2c_masterOperation
  6483  0BE4  0008               	return
  6484  0BE5                     __end_of_i2c_masterWrite:	
  6485                           
  6486                           	psect	text18
  6487  0F65                     __ptext18:	
  6488 ;; *************** function _i2c_masterOperation *****************
  6489 ;; Defined at:
  6490 ;;		line 193 in file "mcc_generated_files/drivers/i2c_master.c"
  6491 ;; Parameters:    Size  Location     Type
  6492 ;;  read            1    wreg     unsigned char 
  6493 ;; Auto vars:     Size  Location     Type
  6494 ;;  read            1   18[BANK0 ] unsigned char 
  6495 ;;  ret             1   19[BANK0 ] enum E12166
  6496 ;; Return value:  Size  Location     Type
  6497 ;;                  1    wreg      enum E12166
  6498 ;; Registers used:
  6499 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6500 ;; Tracked objects:
  6501 ;;		On entry : 0/0
  6502 ;;		On exit  : 0/0
  6503 ;;		Unchanged: 0/0
  6504 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6505 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6506 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6507 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6508 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6509 ;;Total ram usage:        3 bytes
  6510 ;; Hardware stack levels used:    1
  6511 ;; Hardware stack levels required when called:   12
  6512 ;; This function calls:
  6513 ;;		_i2c_driver_start
  6514 ;;		_i2c_poller
  6515 ;;		_mssp_IRQisEnabled
  6516 ;; This function is called by:
  6517 ;;		_i2c_masterWrite
  6518 ;;		_i2c_masterRead
  6519 ;; This function uses a non-reentrant model
  6520 ;;
  6521                           
  6522                           
  6523                           ;psect for function _i2c_masterOperation
  6524  0F65                     _i2c_masterOperation:	
  6525                           
  6526                           ;incstack = 0
  6527                           ; Regs used in _i2c_masterOperation: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6528                           ;i2c_masterOperation@read stored from wreg
  6529  0F65  0020               	movlb	0	; select bank0
  6530  0F66  00B2               	movwf	i2c_masterOperation@read
  6531                           
  6532                           ;i2c_master.c: 195: i2c_error_t ret = I2C_BUSY;
  6533  0F67  01B3               	clrf	i2c_masterOperation@ret
  6534  0F68  0AB3               	incf	i2c_masterOperation@ret,f
  6535                           
  6536                           ;i2c_master.c: 196: if(!i2c_status.busy)
  6537  0F69  0021               	movlb	1	; select bank1
  6538  0F6A  1820               	btfsc	_i2c_status^(0+128),0
  6539  0F6B  2F86               	goto	l6045
  6540                           
  6541                           ;i2c_master.c: 197: {
  6542                           ;i2c_master.c: 198: i2c_status.busy = 1;
  6543  0F6C  1420               	bsf	_i2c_status^(0+128),0
  6544                           
  6545                           ;i2c_master.c: 199: ret = I2C_NOERR;
  6546  0F6D  0020               	movlb	0	; select bank0
  6547  0F6E  01B3               	clrf	i2c_masterOperation@ret
  6548                           
  6549                           ;i2c_master.c: 201: if(read)
  6550  0F6F  0832               	movf	i2c_masterOperation@read,w
  6551  0F70  1903               	btfsc	3,2
  6552  0F71  2F76               	goto	l6039
  6553                           
  6554                           ;i2c_master.c: 202: {
  6555                           ;i2c_master.c: 203: i2c_status.state = I2C_SEND_ADR_READ;
  6556  0F72  0021               	movlb	1	; select bank1
  6557  0F73  01AA               	clrf	(_i2c_status^(0+128)+10)
  6558  0F74  0AAA               	incf	(_i2c_status^(0+128)+10),f
  6559                           
  6560                           ;i2c_master.c: 204: }
  6561  0F75  2F7C               	goto	l6041
  6562  0F76                     l6039:	
  6563                           
  6564                           ;i2c_master.c: 205: else
  6565                           ;i2c_master.c: 206: {
  6566                           ;i2c_master.c: 207: i2c_status.state = I2C_SEND_ADR_WRITE;
  6567  0F76  3002               	movlw	2
  6568  0F77  0020               	movlb	0	; select bank0
  6569  0F78  00B1               	movwf	??_i2c_masterOperation
  6570  0F79  0831               	movf	??_i2c_masterOperation,w
  6571  0F7A  0021               	movlb	1	; select bank1
  6572  0F7B  00AA               	movwf	(_i2c_status^(0+128)+10)
  6573  0F7C                     l6041:	
  6574                           
  6575                           ;i2c_master.c: 208: }
  6576                           ;i2c_master.c: 209: i2c_driver_start();
  6577  0F7C  318B  23A3  318F   	fcall	_i2c_driver_start
  6578                           
  6579                           ;i2c_master.c: 211: if(! mssp_IRQisEnabled())
  6580  0F7F  318C  24B0  318F   	fcall	_mssp_IRQisEnabled
  6581  0F82  1803               	btfsc	3,0
  6582  0F83  2F86               	goto	l6045
  6583                           
  6584                           ;i2c_master.c: 212: i2c_poller();
  6585  0F84  318C  24E5         	fcall	_i2c_poller
  6586  0F86                     l6045:	
  6587                           
  6588                           ;i2c_master.c: 213: }
  6589                           ;i2c_master.c: 214: return ret;
  6590  0F86  0020               	movlb	0	; select bank0
  6591  0F87  0833               	movf	i2c_masterOperation@ret,w
  6592  0F88  0008               	return
  6593  0F89                     __end_of_i2c_masterOperation:	
  6594                           
  6595                           	psect	text19
  6596  0CB0                     __ptext19:	
  6597 ;; *************** function _mssp_IRQisEnabled *****************
  6598 ;; Defined at:
  6599 ;;		line 43 in file "mcc_generated_files/i2c_driver.c"
  6600 ;; Parameters:    Size  Location     Type
  6601 ;;		None
  6602 ;; Auto vars:     Size  Location     Type
  6603 ;;		None
  6604 ;; Return value:  Size  Location     Type
  6605 ;;		None               void
  6606 ;; Registers used:
  6607 ;;		wreg, status,2, status,0
  6608 ;; Tracked objects:
  6609 ;;		On entry : 0/0
  6610 ;;		On exit  : 0/0
  6611 ;;		Unchanged: 0/0
  6612 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6613 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6614 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6615 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6616 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6617 ;;Total ram usage:        2 bytes
  6618 ;; Hardware stack levels used:    1
  6619 ;; Hardware stack levels required when called:    6
  6620 ;; This function calls:
  6621 ;;		Nothing
  6622 ;; This function is called by:
  6623 ;;		_i2c_masterOperation
  6624 ;; This function uses a non-reentrant model
  6625 ;;
  6626                           
  6627                           
  6628                           ;psect for function _mssp_IRQisEnabled
  6629  0CB0                     _mssp_IRQisEnabled:	
  6630                           
  6631                           ;i2c_driver.c: 45: return PIE1bits.SSP1IE;
  6632                           
  6633                           ;incstack = 0
  6634                           ; Regs used in _mssp_IRQisEnabled: [wreg+status,2+status,0]
  6635  0CB0  0021               	movlb	1	; select bank1
  6636  0CB1  0C10               	rrf	16,w	;volatile
  6637  0CB2  0020               	movlb	0	; select bank0
  6638  0CB3  00A2               	movwf	??_mssp_IRQisEnabled
  6639  0CB4  0CA2               	rrf	??_mssp_IRQisEnabled,f
  6640  0CB5  0C22               	rrf	??_mssp_IRQisEnabled,w
  6641  0CB6  3901               	andlw	1
  6642  0CB7  00A3               	movwf	??_mssp_IRQisEnabled+1
  6643  0CB8  0C23               	rrf	??_mssp_IRQisEnabled+1,w
  6644  0CB9  0008               	return
  6645  0CBA                     __end_of_mssp_IRQisEnabled:	
  6646                           
  6647                           	psect	text20
  6648  0CE5                     __ptext20:	
  6649 ;; *************** function _i2c_poller *****************
  6650 ;; Defined at:
  6651 ;;		line 230 in file "mcc_generated_files/drivers/i2c_master.c"
  6652 ;; Parameters:    Size  Location     Type
  6653 ;;		None
  6654 ;; Auto vars:     Size  Location     Type
  6655 ;;		None
  6656 ;; Return value:  Size  Location     Type
  6657 ;;                  1    wreg      void 
  6658 ;; Registers used:
  6659 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6660 ;; Tracked objects:
  6661 ;;		On entry : 0/0
  6662 ;;		On exit  : 0/0
  6663 ;;		Unchanged: 0/0
  6664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6665 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6666 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6667 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6668 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6669 ;;Total ram usage:        0 bytes
  6670 ;; Hardware stack levels used:    1
  6671 ;; Hardware stack levels required when called:   11
  6672 ;; This function calls:
  6673 ;;		_i2c_ISR
  6674 ;;		_mssp_waitForEvent
  6675 ;; This function is called by:
  6676 ;;		_i2c_masterOperation
  6677 ;; This function uses a non-reentrant model
  6678 ;;
  6679                           
  6680                           
  6681                           ;psect for function _i2c_poller
  6682  0CE5                     _i2c_poller:	
  6683  0CE5                     l6027:	
  6684                           ;i2c_master.c: 232: while(i2c_status.busy)
  6685                           
  6686                           ;incstack = 0
  6687                           ; Regs used in _i2c_poller: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6688                           
  6689  0CE5  0021               	movlb	1	; select bank1
  6690  0CE6  1C20               	btfss	_i2c_status^(0+128),0
  6691  0CE7  0008               	return
  6692                           
  6693                           ;i2c_master.c: 233: {
  6694                           ;i2c_master.c: 234: mssp_waitForEvent((0));
  6695  0CE8  3000               	movlw	0
  6696  0CE9  318C  24DA  318C   	fcall	_mssp_waitForEvent
  6697                           
  6698                           ;i2c_master.c: 235: i2c_ISR();
  6699  0CEC  3187  27DA  318C   	fcall	_i2c_ISR
  6700  0CEF  2CE5               	goto	l6027
  6701  0CF0                     __end_of_i2c_poller:	
  6702                           
  6703                           	psect	text21
  6704  0CDA                     __ptext21:	
  6705 ;; *************** function _mssp_waitForEvent *****************
  6706 ;; Defined at:
  6707 ;;		line 68 in file "mcc_generated_files/i2c_driver.c"
  6708 ;; Parameters:    Size  Location     Type
  6709 ;;  timeout         1    wreg     PTR unsigned int 
  6710 ;;		 -> NULL(0), 
  6711 ;; Auto vars:     Size  Location     Type
  6712 ;;  timeout         1    2[BANK0 ] PTR unsigned int 
  6713 ;;		 -> NULL(0), 
  6714 ;; Return value:  Size  Location     Type
  6715 ;;                  1    wreg      void 
  6716 ;; Registers used:
  6717 ;;		wreg
  6718 ;; Tracked objects:
  6719 ;;		On entry : 0/0
  6720 ;;		On exit  : 0/0
  6721 ;;		Unchanged: 0/0
  6722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6723 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6724 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6725 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6726 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6727 ;;Total ram usage:        1 bytes
  6728 ;; Hardware stack levels used:    1
  6729 ;; Hardware stack levels required when called:    6
  6730 ;; This function calls:
  6731 ;;		Nothing
  6732 ;; This function is called by:
  6733 ;;		_i2c_poller
  6734 ;; This function uses a non-reentrant model
  6735 ;;
  6736                           
  6737                           
  6738                           ;psect for function _mssp_waitForEvent
  6739  0CDA                     _mssp_waitForEvent:	
  6740                           
  6741                           ;i2c_driver.c: 73: if(PIR1bits.SSP1IF == 0)
  6742                           
  6743                           ;incstack = 0
  6744                           ; Regs used in _mssp_waitForEvent: [wreg]
  6745  0CDA  0020               	movlb	0	; select bank0
  6746  0CDB  1990               	btfsc	16,3	;volatile
  6747  0CDC  0008               	return
  6748  0CDD                     l319:	
  6749                           ;i2c_driver.c: 74: {
  6750                           ;i2c_driver.c: 75: while(1)
  6751                           
  6752                           
  6753                           ;i2c_driver.c: 76: {
  6754                           ;i2c_driver.c: 77: if(PIR1bits.SSP1IF) break;
  6755  0CDD  0020               	movlb	0	; select bank0
  6756  0CDE  1990               	btfsc	16,3	;volatile
  6757  0CDF  0008               	return
  6758                           
  6759                           ;i2c_driver.c: 78: _delay((unsigned long)((100)*(32000000/4000000.0)));
  6760  0CE0  30A0               	movlw	160
  6761  0CE1                     u5697:	
  6762  0CE1  3200               	nop2
  6763  0CE2  0B89               	decfsz	9,f
  6764  0CE3  2CE1               	goto	u5697
  6765  0CE4  2CDD               	goto	l319
  6766  0CE5                     __end_of_mssp_waitForEvent:	
  6767                           
  6768                           	psect	text22
  6769  07DA                     __ptext22:	
  6770 ;; *************** function _i2c_ISR *****************
  6771 ;; Defined at:
  6772 ;;		line 419 in file "mcc_generated_files/drivers/i2c_master.c"
  6773 ;; Parameters:    Size  Location     Type
  6774 ;;		None
  6775 ;; Auto vars:     Size  Location     Type
  6776 ;;		None
  6777 ;; Return value:  Size  Location     Type
  6778 ;;                  1    wreg      void 
  6779 ;; Registers used:
  6780 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6781 ;; Tracked objects:
  6782 ;;		On entry : 0/0
  6783 ;;		On exit  : 0/0
  6784 ;;		Unchanged: 0/0
  6785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6786 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6787 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6788 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6789 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6790 ;;Total ram usage:        1 bytes
  6791 ;; Hardware stack levels used:    1
  6792 ;; Hardware stack levels required when called:   10
  6793 ;; This function calls:
  6794 ;;		_do_I2C_DO_ACK
  6795 ;;		_do_I2C_DO_ADDRESS_NACK
  6796 ;;		_do_I2C_DO_NACK_RESTART
  6797 ;;		_do_I2C_DO_NACK_STOP
  6798 ;;		_do_I2C_IDLE
  6799 ;;		_do_I2C_RCEN
  6800 ;;		_do_I2C_RESET
  6801 ;;		_do_I2C_RX
  6802 ;;		_do_I2C_SEND_ADR_READ
  6803 ;;		_do_I2C_SEND_ADR_WRITE
  6804 ;;		_do_I2C_SEND_RESTART
  6805 ;;		_do_I2C_SEND_RESTART_READ
  6806 ;;		_do_I2C_SEND_RESTART_WRITE
  6807 ;;		_do_I2C_SEND_STOP
  6808 ;;		_do_I2C_TX
  6809 ;;		_do_I2C_TX_EMPTY
  6810 ;;		_i2c_driver_isNACK
  6811 ;;		_mssp_clearIRQ
  6812 ;; This function is called by:
  6813 ;;		_i2c_open
  6814 ;;		_i2c_poller
  6815 ;;		_INTERRUPT_InterruptManager
  6816 ;; This function uses a non-reentrant model
  6817 ;;
  6818                           
  6819                           
  6820                           ;psect for function _i2c_ISR
  6821  07DA                     _i2c_ISR:	
  6822                           
  6823                           ;Skip over the trampoline to the duplicate function for level 1
  6824  07DA  1C7E               	btfss	126,0
  6825  07DB  2FDE               	goto	l6011
  6826  07DC  318E  2EFC         	ljmp	i1l6363
  6827  07DE                     _i2c_ISR$intlevel0:	
  6828  07DE                     l6011:	
  6829                           ;incstack = 0
  6830                           ; Regs used in _i2c_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6831                           
  6832                           
  6833                           ;i2c_master.c: 421: mssp_clearIRQ();
  6834  07DE  318B  239D  3187   	fcall	_mssp_clearIRQ
  6835                           
  6836                           ;i2c_master.c: 427: if(i2c_status.addressNACKCheck && i2c_driver_isNACK())
  6837  07E1  0021               	movlb	1	; select bank1
  6838  07E2  1DA0               	btfss	_i2c_status^(0+128),3
  6839  07E3  2FEF               	goto	l6019
  6840  07E4  318D  2548  3187   	fcall	_i2c_driver_isNACK
  6841  07E7  1C03               	btfss	3,0
  6842  07E8  2FEF               	goto	l6019
  6843                           
  6844                           ;i2c_master.c: 428: {
  6845                           ;i2c_master.c: 429: i2c_status.state = I2C_ADDRESS_NACK;
  6846  07E9  300F               	movlw	15
  6847  07EA  0020               	movlb	0	; select bank0
  6848  07EB  00B0               	movwf	??_i2c_ISR
  6849  07EC  0830               	movf	??_i2c_ISR,w
  6850  07ED  0021               	movlb	1	; select bank1
  6851  07EE  00AA               	movwf	(_i2c_status^(0+128)+10)
  6852  07EF                     l6019:	
  6853                           
  6854                           ;i2c_master.c: 430: }
  6855                           ;i2c_master.c: 432: i2c_status.state = fsmStateTable[i2c_status.state]();
  6856  07EF  0021               	movlb	1	; select bank1
  6857  07F0  352A               	lslf	(_i2c_status^(0+128)+10),w
  6858  07F1  3EA0               	addlw	(low (_fsmStateTable| (0+256)))& (0+255)
  6859  07F2  0086               	movwf	6
  6860  07F3  3001               	movlw	1	; select bank3/4
  6861  07F4  0087               	movwf	7
  6862  07F5  3F41               	moviw [1]fsr1
  6863  07F6  008A               	movwf	10
  6864  07F7  3F40               	moviw [0]fsr1
  6865  07F8  000A               	callw
  6866  07F9  3187               	pagesel	$
  6867  07FA  0020               	movlb	0	; select bank0
  6868  07FB  00B0               	movwf	??_i2c_ISR
  6869  07FC  0830               	movf	??_i2c_ISR,w
  6870  07FD  0021               	movlb	1	; select bank1
  6871  07FE  00AA               	movwf	(_i2c_status^(0+128)+10)
  6872  07FF  0008               	return
  6873  0800                     __end_of_i2c_ISR:	
  6874                           
  6875                           	psect	text23
  6876  05DB                     __ptext23:	
  6877 ;; *************** function _do_I2C_RX *****************
  6878 ;; Defined at:
  6879 ;;		line 357 in file "mcc_generated_files/drivers/i2c_master.c"
  6880 ;; Parameters:    Size  Location     Type
  6881 ;;		None
  6882 ;; Auto vars:     Size  Location     Type
  6883 ;;		None
  6884 ;; Return value:  Size  Location     Type
  6885 ;;                  1    wreg      enum E12337
  6886 ;; Registers used:
  6887 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6888 ;; Tracked objects:
  6889 ;;		On entry : 0/0
  6890 ;;		On exit  : 0/0
  6891 ;;		Unchanged: 0/0
  6892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6893 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6894 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6895 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6896 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6897 ;;Total ram usage:        1 bytes
  6898 ;; Hardware stack levels used:    1
  6899 ;; Hardware stack levels required when called:    9
  6900 ;; This function calls:
  6901 ;;		Absolute function
  6902 ;;		_do_I2C_DO_NACK_RESTART
  6903 ;;		_do_I2C_DO_NACK_STOP
  6904 ;;		_i2c_driver_getRXData
  6905 ;;		_i2c_driver_sendACK
  6906 ;;		_i2c_restartWrite
  6907 ;;		_rd1RegCompleteHandler
  6908 ;;		_rd2RegCompleteHandler
  6909 ;;		_rdBlkRegCompleteHandler
  6910 ;;		_returnReset
  6911 ;;		_returnStop
  6912 ;;		_wr1RegCompleteHandler
  6913 ;;		_wr2RegCompleteHandler
  6914 ;; This function is called by:
  6915 ;;		_i2c_ISR
  6916 ;;		i1_i2c_ISR
  6917 ;; This function uses a non-reentrant model
  6918 ;;
  6919                           
  6920                           
  6921                           ;psect for function _do_I2C_RX
  6922  05DB                     _do_I2C_RX:	
  6923                           
  6924                           ;Skip over the trampoline to the duplicate function for level 1
  6925  05DB  1C7E               	btfss	126,0
  6926  05DC  2DDF               	goto	l5965
  6927  05DD  3186  2EA8         	ljmp	i1l6213
  6928  05DF                     _do_I2C_RX$intlevel0:	
  6929  05DF                     l5965:	
  6930                           ;incstack = 0
  6931                           ; Regs used in _do_I2C_RX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6932                           
  6933                           
  6934                           ;i2c_master.c: 359: *i2c_status.data_ptr++ = i2c_driver_getRXData();
  6935  05DF  318B  23AF  3185   	fcall	_i2c_driver_getRXData
  6936  05E2  0020               	movlb	0	; select bank0
  6937  05E3  00AC               	movwf	??_do_I2C_RX
  6938  05E4  0021               	movlb	1	; select bank1
  6939  05E5  0822               	movf	(low ((_i2c_status| 0+2)))^(0+128),w
  6940  05E6  0086               	movwf	6
  6941  05E7  0823               	movf	((low ((_i2c_status| 0+2))+1))^(0+128),w
  6942  05E8  0087               	movwf	7
  6943  05E9  0020               	movlb	0	; select bank0
  6944  05EA  082C               	movf	??_do_I2C_RX,w
  6945  05EB  0081               	movwf	1
  6946  05EC  3001               	movlw	1
  6947  05ED  0021               	movlb	1	; select bank1
  6948  05EE  07A2               	addwf	(low ((_i2c_status| 0+2)))^(0+128),f
  6949  05EF  3000               	movlw	0
  6950  05F0  3DA3               	addwfc	((low ((_i2c_status| 0+2))+1))^(0+128),f
  6951                           
  6952                           ;i2c_master.c: 360: if(--i2c_status.data_length)
  6953  05F1  3001               	movlw	1
  6954  05F2  02A4               	subwf	(_i2c_status^(0+128)+4),f
  6955  05F3  3000               	movlw	0
  6956  05F4  3BA5               	subwfb	((_i2c_status+1)^(0+128)+4),f
  6957  05F5  0824               	movf	(_i2c_status^(0+128)+4),w
  6958  05F6  0425               	iorwf	((_i2c_status+1)^(0+128)+4),w
  6959  05F7  1903               	btfsc	3,2
  6960  05F8  2DFD               	goto	l706
  6961                           
  6962                           ;i2c_master.c: 361: {
  6963                           ;i2c_master.c: 362: i2c_driver_sendACK();
  6964  05F9  318B  23D9         	fcall	_i2c_driver_sendACK
  6965                           
  6966                           ;i2c_master.c: 363: return I2C_RCEN;
  6967  05FB  3005               	movlw	5
  6968                           
  6969                           ;i2c_master.c: 364: }
  6970  05FC  0008               	return
  6971  05FD                     l706:	
  6972                           
  6973                           ;i2c_master.c: 365: else
  6974                           ;i2c_master.c: 366: {
  6975                           ;i2c_master.c: 367: i2c_status.bufferFree = 1;
  6976  05FD  1520               	bsf	_i2c_status^(0+128),2
  6977                           
  6978                           ;i2c_master.c: 368: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
  6979  05FE  2E05               	goto	l5989
  6980  05FF                     l5979:	
  6981                           ;i2c_master.c: 369: {
  6982                           ;i2c_master.c: 370: case i2c_restart_write:
  6983                           
  6984                           
  6985                           ;i2c_master.c: 371: case i2c_restart_read:
  6986                           ;i2c_master.c: 372: return do_I2C_DO_NACK_RESTART();
  6987  05FF  318C  2470         	fcall	_do_I2C_DO_NACK_RESTART
  6988  0601  0008               	return
  6989  0602                     l5983:	
  6990                           ;i2c_master.c: 374: case i2c_continue:
  6991                           
  6992                           ;i2c_master.c: 373: default:
  6993                           
  6994                           
  6995                           ;i2c_master.c: 375: case i2c_stop:
  6996                           ;i2c_master.c: 376: return do_I2C_DO_NACK_STOP();
  6997  0602  318C  2468         	fcall	_do_I2C_DO_NACK_STOP
  6998                           
  6999                           ;i2c_master.c: 377: }
  7000  0604  0008               	return
  7001  0605                     l5989:	
  7002  0605  0021               	movlb	1	; select bank1
  7003  0606  0838               	movf	(low ((_i2c_status| 0+24)))^(0+128),w
  7004  0607  0020               	movlb	0	; select bank0
  7005  0608  00AC               	movwf	??_do_I2C_RX
  7006  0609  082C               	movf	??_do_I2C_RX,w
  7007  060A  00AB               	movwf	returnStop@p
  7008  060B  300C               	movlw	12
  7009  060C  3EA0               	addlw	(low (_i2c_status| 0))& (0+255)
  7010  060D  0086               	movwf	6
  7011  060E  0187               	clrf	7
  7012  060F  3F41               	moviw [1]fsr1
  7013  0610  008A               	movwf	10
  7014  0611  3F40               	moviw [0]fsr1
  7015  0612  000A               	callw
  7016  0613  3185               	pagesel	$
  7017                           
  7018                           ; Switch size 1, requested type "space"
  7019                           ; Number of cases is 4, Range of values is 1 to 4
  7020                           ; switch strategies available:
  7021                           ; Name         Instructions Cycles
  7022                           ; simple_byte           13     7 (average)
  7023                           ; direct_byte           17     9 (fixed)
  7024                           ; jumptable            263     9 (fixed)
  7025                           ;	Chosen strategy is simple_byte
  7026  0614  3A01               	xorlw	1	; case 1
  7027  0615  1903               	skipnz
  7028  0616  2E02               	goto	l5983
  7029  0617  3A03               	xorlw	3	; case 2
  7030  0618  1903               	skipnz
  7031  0619  2DFF               	goto	l5979
  7032  061A  3A01               	xorlw	1	; case 3
  7033  061B  1903               	skipnz
  7034  061C  2DFF               	goto	l5979
  7035  061D  3A07               	xorlw	7	; case 4
  7036  061E  1903               	skipnz
  7037  061F  2E02               	goto	l5983
  7038  0620  2E02               	goto	l5983
  7039  0621  0008               	return
  7040  0622                     __end_of_do_I2C_RX:	
  7041                           
  7042                           	psect	text24
  7043  0445                     __ptext24:	
  7044 ;; *************** function _do_I2C_TX *****************
  7045 ;; Defined at:
  7046 ;;		line 333 in file "mcc_generated_files/drivers/i2c_master.c"
  7047 ;; Parameters:    Size  Location     Type
  7048 ;;		None
  7049 ;; Auto vars:     Size  Location     Type
  7050 ;;		None
  7051 ;; Return value:  Size  Location     Type
  7052 ;;                  1    wreg      enum E12337
  7053 ;; Registers used:
  7054 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7055 ;; Tracked objects:
  7056 ;;		On entry : 0/0
  7057 ;;		On exit  : 0/0
  7058 ;;		Unchanged: 0/0
  7059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7060 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7061 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7062 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7063 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7064 ;;Total ram usage:        4 bytes
  7065 ;; Hardware stack levels used:    1
  7066 ;; Hardware stack levels required when called:    9
  7067 ;; This function calls:
  7068 ;;		Absolute function
  7069 ;;		_do_I2C_SEND_RESTART_READ
  7070 ;;		_do_I2C_SEND_RESTART_WRITE
  7071 ;;		_do_I2C_SEND_STOP
  7072 ;;		_i2c_driver_TXData
  7073 ;;		_i2c_driver_isNACK
  7074 ;;		_i2c_restartWrite
  7075 ;;		_rd1RegCompleteHandler
  7076 ;;		_rd2RegCompleteHandler
  7077 ;;		_rdBlkRegCompleteHandler
  7078 ;;		_returnReset
  7079 ;;		_returnStop
  7080 ;;		_wr1RegCompleteHandler
  7081 ;;		_wr2RegCompleteHandler
  7082 ;; This function is called by:
  7083 ;;		_i2c_ISR
  7084 ;;		i1_i2c_ISR
  7085 ;; This function uses a non-reentrant model
  7086 ;;
  7087                           
  7088                           
  7089                           ;psect for function _do_I2C_TX
  7090  0445                     _do_I2C_TX:	
  7091                           
  7092                           ;Skip over the trampoline to the duplicate function for level 1
  7093  0445  1C7E               	btfss	126,0
  7094  0446  2C49               	goto	l5935
  7095  0447  3185  2D8E         	ljmp	i1l6183
  7096  0449                     _do_I2C_TX$intlevel0:	
  7097  0449                     l5935:	
  7098                           ;incstack = 0
  7099                           ; Regs used in _do_I2C_TX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7100                           
  7101                           
  7102                           ;i2c_master.c: 335: if(i2c_driver_isNACK())
  7103  0449  318D  2548  3184   	fcall	_i2c_driver_isNACK
  7104  044C  1803               	btfsc	3,0
  7105  044D  2C58               	goto	l5953
  7106  044E  2C75               	goto	l690
  7107  044F                     l5939:	
  7108                           ;i2c_master.c: 338: {
  7109                           ;i2c_master.c: 339: case i2c_restart_read:
  7110                           
  7111                           ;i2c_master.c: 336: {
  7112                           ;i2c_master.c: 337: switch(i2c_status.callbackTable[i2c_dataNACK](i2c_status.callbackPay
      +                          load[i2c_dataNACK]))
  7113                           
  7114                           
  7115                           ;i2c_master.c: 340: return do_I2C_SEND_RESTART_READ();
  7116  044F  318C  2440         	fcall	_do_I2C_SEND_RESTART_READ
  7117  0451  0008               	return
  7118  0452                     l5943:	
  7119                           ;i2c_master.c: 341: case i2c_restart_write:
  7120                           
  7121                           
  7122                           ;i2c_master.c: 342: return do_I2C_SEND_RESTART_WRITE();
  7123  0452  318C  2448         	fcall	_do_I2C_SEND_RESTART_WRITE
  7124  0454  0008               	return
  7125  0455                     l5947:	
  7126                           ;i2c_master.c: 344: case i2c_continue:
  7127                           
  7128                           ;i2c_master.c: 343: default:
  7129                           
  7130                           
  7131                           ;i2c_master.c: 345: case i2c_stop:
  7132                           ;i2c_master.c: 346: return do_I2C_SEND_STOP();
  7133  0455  318C  2458         	fcall	_do_I2C_SEND_STOP
  7134                           
  7135                           ;i2c_master.c: 347: }
  7136  0457  0008               	return
  7137  0458                     l5953:	
  7138  0458  0021               	movlb	1	; select bank1
  7139  0459  083B               	movf	(low ((_i2c_status| 0+27)))^(0+128),w
  7140  045A  0020               	movlb	0	; select bank0
  7141  045B  00AC               	movwf	??_do_I2C_TX
  7142  045C  082C               	movf	??_do_I2C_TX,w
  7143  045D  00AB               	movwf	returnStop@p
  7144  045E  3012               	movlw	18
  7145  045F  3EA0               	addlw	(low (_i2c_status| 0))& (0+255)
  7146  0460  0086               	movwf	6
  7147  0461  0187               	clrf	7
  7148  0462  3F41               	moviw [1]fsr1
  7149  0463  008A               	movwf	10
  7150  0464  3F40               	moviw [0]fsr1
  7151  0465  000A               	callw
  7152  0466  3184               	pagesel	$
  7153                           
  7154                           ; Switch size 1, requested type "space"
  7155                           ; Number of cases is 4, Range of values is 1 to 4
  7156                           ; switch strategies available:
  7157                           ; Name         Instructions Cycles
  7158                           ; simple_byte           13     7 (average)
  7159                           ; direct_byte           17     9 (fixed)
  7160                           ; jumptable            263     9 (fixed)
  7161                           ;	Chosen strategy is simple_byte
  7162  0467  3A01               	xorlw	1	; case 1
  7163  0468  1903               	skipnz
  7164  0469  2C55               	goto	l5947
  7165  046A  3A03               	xorlw	3	; case 2
  7166  046B  1903               	skipnz
  7167  046C  2C4F               	goto	l5939
  7168  046D  3A01               	xorlw	1	; case 3
  7169  046E  1903               	skipnz
  7170  046F  2C52               	goto	l5943
  7171  0470  3A07               	xorlw	7	; case 4
  7172  0471  1903               	skipnz
  7173  0472  2C55               	goto	l5947
  7174  0473  2C55               	goto	l5947
  7175                           
  7176                           ;i2c_master.c: 348: }
  7177  0474  0008               	return
  7178  0475                     l690:	
  7179                           
  7180                           ;i2c_master.c: 349: else
  7181                           ;i2c_master.c: 350: {
  7182                           ;i2c_master.c: 351: i2c_status.addressNACKCheck = 0;
  7183  0475  0021               	movlb	1	; select bank1
  7184  0476  11A0               	bcf	_i2c_status^(0+128),3
  7185                           
  7186                           ;i2c_master.c: 352: i2c_driver_TXData(*i2c_status.data_ptr++);
  7187  0477  0823               	movf	((low ((_i2c_status| 0+2))+1))^(0+128),w
  7188  0478  0020               	movlb	0	; select bank0
  7189  0479  00AD               	movwf	??_do_I2C_TX+1
  7190  047A  0021               	movlb	1	; select bank1
  7191  047B  0822               	movf	(low ((_i2c_status| 0+2)))^(0+128),w
  7192  047C  0020               	movlb	0	; select bank0
  7193  047D  00AC               	movwf	??_do_I2C_TX
  7194  047E  0021               	movlb	1	; select bank1
  7195  047F  0AA2               	incf	(low ((_i2c_status| 0+2)))^(0+128),f
  7196  0480  1903               	skipnz
  7197  0481  0AA3               	incf	((low ((_i2c_status| 0+2))+1))^(0+128),f
  7198  0482  0020               	movlb	0	; select bank0
  7199  0483  082C               	movf	??_do_I2C_TX,w
  7200  0484  0086               	movwf	6
  7201  0485  082D               	movf	??_do_I2C_TX+1,w
  7202  0486  0087               	movwf	7
  7203  0487  0801               	movf	1,w
  7204  0488  318C  2418  3184   	fcall	_i2c_driver_TXData
  7205                           
  7206                           ;i2c_master.c: 353: return (--i2c_status.data_length)?I2C_TX:I2C_TX_EMPTY;
  7207  048B  3001               	movlw	1
  7208  048C  0021               	movlb	1	; select bank1
  7209  048D  02A4               	subwf	(_i2c_status^(0+128)+4),f
  7210  048E  3000               	movlw	0
  7211  048F  3BA5               	subwfb	((_i2c_status+1)^(0+128)+4),f
  7212  0490  0824               	movf	(_i2c_status^(0+128)+4),w
  7213  0491  0425               	iorwf	((_i2c_status+1)^(0+128)+4),w
  7214  0492  1D03               	btfss	3,2
  7215  0493  2C96               	goto	l5961
  7216  0494  3006               	movlw	6
  7217  0495  2C97               	goto	L2
  7218  0496                     l5961:	
  7219  0496  3003               	movlw	3
  7220  0497                     L2:	
  7221  0497  0020               	movlb	0	; select bank0
  7222  0498  00AE               	movwf	_do_I2C_TX$1049
  7223  0499  3000               	movlw	0
  7224  049A  00AF               	movwf	_do_I2C_TX$1049+1
  7225  049B  082E               	movf	_do_I2C_TX$1049,w
  7226  049C  0008               	return
  7227  049D                     __end_of_do_I2C_TX:	
  7228                           
  7229                           	psect	text25
  7230  07B0                     __ptext25:	
  7231 ;; *************** function _do_I2C_DO_ADDRESS_NACK *****************
  7232 ;; Defined at:
  7233 ;;		line 319 in file "mcc_generated_files/drivers/i2c_master.c"
  7234 ;; Parameters:    Size  Location     Type
  7235 ;;		None
  7236 ;; Auto vars:     Size  Location     Type
  7237 ;;		None
  7238 ;; Return value:  Size  Location     Type
  7239 ;;                  1    wreg      enum E12337
  7240 ;; Registers used:
  7241 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7242 ;; Tracked objects:
  7243 ;;		On entry : 0/0
  7244 ;;		On exit  : 0/0
  7245 ;;		Unchanged: 0/0
  7246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7247 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7248 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7249 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7250 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7251 ;;Total ram usage:        1 bytes
  7252 ;; Hardware stack levels used:    1
  7253 ;; Hardware stack levels required when called:    9
  7254 ;; This function calls:
  7255 ;;		Absolute function
  7256 ;;		_do_I2C_SEND_RESTART
  7257 ;;		_do_I2C_SEND_STOP
  7258 ;;		_i2c_restartWrite
  7259 ;;		_rd1RegCompleteHandler
  7260 ;;		_rd2RegCompleteHandler
  7261 ;;		_rdBlkRegCompleteHandler
  7262 ;;		_returnReset
  7263 ;;		_returnStop
  7264 ;;		_wr1RegCompleteHandler
  7265 ;;		_wr2RegCompleteHandler
  7266 ;; This function is called by:
  7267 ;;		_i2c_ISR
  7268 ;;		i1_i2c_ISR
  7269 ;; This function uses a non-reentrant model
  7270 ;;
  7271                           
  7272                           
  7273                           ;psect for function _do_I2C_DO_ADDRESS_NACK
  7274  07B0                     _do_I2C_DO_ADDRESS_NACK:	
  7275                           
  7276                           ;Skip over the trampoline to the duplicate function for level 1
  7277  07B0  1C7E               	btfss	126,0
  7278  07B1  2FB4               	goto	l5919
  7279  07B2  318F  2F1E         	ljmp	i1l6167
  7280  07B4                     _do_I2C_DO_ADDRESS_NACK$intlevel0:	
  7281  07B4                     l5919:	
  7282                           ;incstack = 0
  7283                           ; Regs used in _do_I2C_DO_ADDRESS_NACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7284                           
  7285                           
  7286                           ;i2c_master.c: 321: i2c_status.addressNACKCheck = 0;
  7287  07B4  0021               	movlb	1	; select bank1
  7288  07B5  11A0               	bcf	_i2c_status^(0+128),3
  7289                           
  7290                           ;i2c_master.c: 322: i2c_status.error = I2C_FAIL;
  7291  07B6  3002               	movlw	2
  7292  07B7  0020               	movlb	0	; select bank0
  7293  07B8  00AC               	movwf	??_do_I2C_DO_ADDRESS_NACK
  7294  07B9  082C               	movf	??_do_I2C_DO_ADDRESS_NACK,w
  7295  07BA  0021               	movlb	1	; select bank1
  7296  07BB  00AB               	movwf	(_i2c_status^(0+128)+11)
  7297                           
  7298                           ;i2c_master.c: 323: switch(i2c_status.callbackTable[i2c_addressNACK](i2c_status.callback
      +                          Payload[i2c_addressNACK]))
  7299  07BC  2FC3               	goto	l5933
  7300  07BD                     l5923:	
  7301                           ;i2c_master.c: 324: {
  7302                           ;i2c_master.c: 325: case i2c_restart_read:
  7303                           
  7304                           
  7305                           ;i2c_master.c: 326: case i2c_restart_write:
  7306                           ;i2c_master.c: 327: return do_I2C_SEND_RESTART();
  7307  07BD  318C  2450         	fcall	_do_I2C_SEND_RESTART
  7308  07BF  0008               	return
  7309  07C0                     l5927:	
  7310                           ;i2c_master.c: 328: default:
  7311                           
  7312                           
  7313                           ;i2c_master.c: 329: return do_I2C_SEND_STOP();
  7314  07C0  318C  2458         	fcall	_do_I2C_SEND_STOP
  7315                           
  7316                           ;i2c_master.c: 330: }
  7317  07C2  0008               	return
  7318  07C3                     l5933:	
  7319  07C3  0021               	movlb	1	; select bank1
  7320  07C4  083A               	movf	(low ((_i2c_status| 0+26)))^(0+128),w
  7321  07C5  0020               	movlb	0	; select bank0
  7322  07C6  00AC               	movwf	??_do_I2C_DO_ADDRESS_NACK
  7323  07C7  082C               	movf	??_do_I2C_DO_ADDRESS_NACK,w
  7324  07C8  00AB               	movwf	returnStop@p
  7325  07C9  3010               	movlw	16
  7326  07CA  3EA0               	addlw	(low (_i2c_status| 0))& (0+255)
  7327  07CB  0086               	movwf	6
  7328  07CC  0187               	clrf	7
  7329  07CD  3F41               	moviw [1]fsr1
  7330  07CE  008A               	movwf	10
  7331  07CF  3F40               	moviw [0]fsr1
  7332  07D0  000A               	callw
  7333  07D1  3187               	pagesel	$
  7334                           
  7335                           ; Switch size 1, requested type "space"
  7336                           ; Number of cases is 2, Range of values is 2 to 3
  7337                           ; switch strategies available:
  7338                           ; Name         Instructions Cycles
  7339                           ; simple_byte            7     4 (average)
  7340                           ; direct_byte           13     9 (fixed)
  7341                           ; jumptable            263     9 (fixed)
  7342                           ;	Chosen strategy is simple_byte
  7343  07D2  3A02               	xorlw	2	; case 2
  7344  07D3  1903               	skipnz
  7345  07D4  2FBD               	goto	l5923
  7346  07D5  3A01               	xorlw	1	; case 3
  7347  07D6  1903               	skipnz
  7348  07D7  2FBD               	goto	l5923
  7349  07D8  2FC0               	goto	l5927
  7350  07D9  0008               	return
  7351  07DA                     __end_of_do_I2C_DO_ADDRESS_NACK:	
  7352                           
  7353                           	psect	text26
  7354  0C70                     __ptext26:	
  7355 ;; *************** function _do_I2C_DO_NACK_RESTART *****************
  7356 ;; Defined at:
  7357 ;;		line 311 in file "mcc_generated_files/drivers/i2c_master.c"
  7358 ;; Parameters:    Size  Location     Type
  7359 ;;		None
  7360 ;; Auto vars:     Size  Location     Type
  7361 ;;		None
  7362 ;; Return value:  Size  Location     Type
  7363 ;;                  1    wreg      enum E12337
  7364 ;; Registers used:
  7365 ;;		wreg, status,2, status,0, pclath, cstack
  7366 ;; Tracked objects:
  7367 ;;		On entry : 0/0
  7368 ;;		On exit  : 0/0
  7369 ;;		Unchanged: 0/0
  7370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7371 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7372 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7373 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7374 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7375 ;;Total ram usage:        0 bytes
  7376 ;; Hardware stack levels used:    1
  7377 ;; Hardware stack levels required when called:    7
  7378 ;; This function calls:
  7379 ;;		_i2c_driver_sendNACK
  7380 ;; This function is called by:
  7381 ;;		_do_I2C_RX
  7382 ;;		_i2c_ISR
  7383 ;;		i1_i2c_ISR
  7384 ;; This function uses a non-reentrant model
  7385 ;;
  7386                           
  7387                           
  7388                           ;psect for function _do_I2C_DO_NACK_RESTART
  7389  0C70                     _do_I2C_DO_NACK_RESTART:	
  7390                           
  7391                           ;Skip over the trampoline to the duplicate function for level 1
  7392  0C70  1C7E               	btfss	126,0
  7393  0C71  2C74               	goto	l3891
  7394  0C72  318B  2BD5         	ljmp	i1l3203
  7395  0C74                     _do_I2C_DO_NACK_RESTART$intlevel0:	
  7396  0C74                     l3891:	
  7397                           ;incstack = 0
  7398                           ; Regs used in _do_I2C_DO_NACK_RESTART: [wreg+status,2+status,0+pclath+cstack]
  7399                           
  7400                           
  7401                           ;i2c_master.c: 313: i2c_driver_sendNACK();
  7402  0C74  318B  23DD         	fcall	_i2c_driver_sendNACK
  7403                           
  7404                           ;i2c_master.c: 314: return I2C_SEND_RESTART;
  7405  0C76  3009               	movlw	9
  7406  0C77  0008               	return
  7407  0C78                     __end_of_do_I2C_DO_NACK_RESTART:	
  7408                           
  7409                           	psect	text27
  7410  0C68                     __ptext27:	
  7411 ;; *************** function _do_I2C_DO_NACK_STOP *****************
  7412 ;; Defined at:
  7413 ;;		line 305 in file "mcc_generated_files/drivers/i2c_master.c"
  7414 ;; Parameters:    Size  Location     Type
  7415 ;;		None
  7416 ;; Auto vars:     Size  Location     Type
  7417 ;;		None
  7418 ;; Return value:  Size  Location     Type
  7419 ;;                  1    wreg      enum E12337
  7420 ;; Registers used:
  7421 ;;		wreg, status,2, status,0, pclath, cstack
  7422 ;; Tracked objects:
  7423 ;;		On entry : 0/0
  7424 ;;		On exit  : 0/0
  7425 ;;		Unchanged: 0/0
  7426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7427 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7428 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7429 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7430 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7431 ;;Total ram usage:        0 bytes
  7432 ;; Hardware stack levels used:    1
  7433 ;; Hardware stack levels required when called:    7
  7434 ;; This function calls:
  7435 ;;		_i2c_driver_sendNACK
  7436 ;; This function is called by:
  7437 ;;		_do_I2C_RX
  7438 ;;		_i2c_ISR
  7439 ;;		i1_i2c_ISR
  7440 ;; This function uses a non-reentrant model
  7441 ;;
  7442                           
  7443                           
  7444                           ;psect for function _do_I2C_DO_NACK_STOP
  7445  0C68                     _do_I2C_DO_NACK_STOP:	
  7446                           
  7447                           ;Skip over the trampoline to the duplicate function for level 1
  7448  0C68  1C7E               	btfss	126,0
  7449  0C69  2C6C               	goto	l3885
  7450  0C6A  318B  2BD1         	ljmp	i1l3197
  7451  0C6C                     _do_I2C_DO_NACK_STOP$intlevel0:	
  7452  0C6C                     l3885:	
  7453                           ;incstack = 0
  7454                           ; Regs used in _do_I2C_DO_NACK_STOP: [wreg+status,2+status,0+pclath+cstack]
  7455                           
  7456                           
  7457                           ;i2c_master.c: 307: i2c_driver_sendNACK();
  7458  0C6C  318B  23DD         	fcall	_i2c_driver_sendNACK
  7459                           
  7460                           ;i2c_master.c: 308: return I2C_SEND_STOP;
  7461  0C6E  300A               	movlw	10
  7462  0C6F  0008               	return
  7463  0C70                     __end_of_do_I2C_DO_NACK_STOP:	
  7464                           
  7465                           	psect	text28
  7466  0C60                     __ptext28:	
  7467 ;; *************** function _do_I2C_DO_ACK *****************
  7468 ;; Defined at:
  7469 ;;		line 299 in file "mcc_generated_files/drivers/i2c_master.c"
  7470 ;; Parameters:    Size  Location     Type
  7471 ;;		None
  7472 ;; Auto vars:     Size  Location     Type
  7473 ;;		None
  7474 ;; Return value:  Size  Location     Type
  7475 ;;                  1    wreg      enum E12337
  7476 ;; Registers used:
  7477 ;;		wreg, status,2, status,0, pclath, cstack
  7478 ;; Tracked objects:
  7479 ;;		On entry : 0/0
  7480 ;;		On exit  : 0/0
  7481 ;;		Unchanged: 0/0
  7482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7483 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7484 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7485 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7486 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7487 ;;Total ram usage:        0 bytes
  7488 ;; Hardware stack levels used:    1
  7489 ;; Hardware stack levels required when called:    7
  7490 ;; This function calls:
  7491 ;;		_i2c_driver_sendACK
  7492 ;; This function is called by:
  7493 ;;		_i2c_ISR
  7494 ;;		i1_i2c_ISR
  7495 ;; This function uses a non-reentrant model
  7496 ;;
  7497                           
  7498                           
  7499                           ;psect for function _do_I2C_DO_ACK
  7500  0C60                     _do_I2C_DO_ACK:	
  7501                           
  7502                           ;Skip over the trampoline to the duplicate function for level 1
  7503  0C60  1C7E               	btfss	126,0
  7504  0C61  2C64               	goto	l3953
  7505  0C62  318B  2BCD         	ljmp	i1l3345
  7506  0C64                     _do_I2C_DO_ACK$intlevel0:	
  7507  0C64                     l3953:	
  7508                           ;incstack = 0
  7509                           ; Regs used in _do_I2C_DO_ACK: [wreg+status,2+status,0+pclath+cstack]
  7510                           
  7511                           
  7512                           ;i2c_master.c: 301: i2c_driver_sendACK();
  7513  0C64  318B  23D9         	fcall	_i2c_driver_sendACK
  7514                           
  7515                           ;i2c_master.c: 302: return I2C_RCEN;
  7516  0C66  3005               	movlw	5
  7517  0C67  0008               	return
  7518  0C68                     __end_of_do_I2C_DO_ACK:	
  7519                           
  7520                           	psect	text29
  7521  0CA6                     __ptext29:	
  7522 ;; *************** function _do_I2C_RCEN *****************
  7523 ;; Defined at:
  7524 ;;		line 292 in file "mcc_generated_files/drivers/i2c_master.c"
  7525 ;; Parameters:    Size  Location     Type
  7526 ;;		None
  7527 ;; Auto vars:     Size  Location     Type
  7528 ;;		None
  7529 ;; Return value:  Size  Location     Type
  7530 ;;                  1    wreg      enum E12337
  7531 ;; Registers used:
  7532 ;;		wreg, status,2, status,0, pclath, cstack
  7533 ;; Tracked objects:
  7534 ;;		On entry : 0/0
  7535 ;;		On exit  : 0/0
  7536 ;;		Unchanged: 0/0
  7537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7538 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7539 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7540 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7541 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7542 ;;Total ram usage:        0 bytes
  7543 ;; Hardware stack levels used:    1
  7544 ;; Hardware stack levels required when called:    7
  7545 ;; This function calls:
  7546 ;;		_i2c_driver_startRX
  7547 ;; This function is called by:
  7548 ;;		_i2c_ISR
  7549 ;;		i1_i2c_ISR
  7550 ;; This function uses a non-reentrant model
  7551 ;;
  7552                           
  7553                           
  7554                           ;psect for function _do_I2C_RCEN
  7555  0CA6                     _do_I2C_RCEN:	
  7556                           
  7557                           ;Skip over the trampoline to the duplicate function for level 1
  7558  0CA6  1C7E               	btfss	126,0
  7559  0CA7  2CAA               	goto	l3945
  7560  0CA8  318B  2BFA         	ljmp	i1l3337
  7561  0CAA                     _do_I2C_RCEN$intlevel0:	
  7562  0CAA                     l3945:	
  7563                           ;incstack = 0
  7564                           ; Regs used in _do_I2C_RCEN: [wreg+status,2+status,0+pclath+cstack]
  7565                           
  7566                           
  7567                           ;i2c_master.c: 294: i2c_status.addressNACKCheck = 0;
  7568  0CAA  0021               	movlb	1	; select bank1
  7569  0CAB  11A0               	bcf	_i2c_status^(0+128),3
  7570                           
  7571                           ;i2c_master.c: 295: i2c_driver_startRX();
  7572  0CAC  318B  23AC         	fcall	_i2c_driver_startRX
  7573                           
  7574                           ;i2c_master.c: 296: return I2C_RX;
  7575  0CAE  3004               	movlw	4
  7576  0CAF  0008               	return
  7577  0CB0                     __end_of_do_I2C_RCEN:	
  7578                           
  7579                           	psect	text30
  7580  0CCF                     __ptext30:	
  7581 ;; *************** function _do_I2C_SEND_ADR_WRITE *****************
  7582 ;; Defined at:
  7583 ;;		line 285 in file "mcc_generated_files/drivers/i2c_master.c"
  7584 ;; Parameters:    Size  Location     Type
  7585 ;;		None
  7586 ;; Auto vars:     Size  Location     Type
  7587 ;;		None
  7588 ;; Return value:  Size  Location     Type
  7589 ;;                  1    wreg      enum E12337
  7590 ;; Registers used:
  7591 ;;		wreg, status,2, status,0, pclath, cstack
  7592 ;; Tracked objects:
  7593 ;;		On entry : 0/0
  7594 ;;		On exit  : 0/0
  7595 ;;		Unchanged: 0/0
  7596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7597 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7598 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7599 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7600 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7601 ;;Total ram usage:        0 bytes
  7602 ;; Hardware stack levels used:    1
  7603 ;; Hardware stack levels required when called:    7
  7604 ;; This function calls:
  7605 ;;		_i2c_driver_TXData
  7606 ;; This function is called by:
  7607 ;;		_i2c_ISR
  7608 ;;		i1_i2c_ISR
  7609 ;; This function uses a non-reentrant model
  7610 ;;
  7611                           
  7612                           
  7613                           ;psect for function _do_I2C_SEND_ADR_WRITE
  7614  0CCF                     _do_I2C_SEND_ADR_WRITE:	
  7615                           
  7616                           ;Skip over the trampoline to the duplicate function for level 1
  7617  0CCF  1C7E               	btfss	126,0
  7618  0CD0  2CD3               	goto	l3937
  7619  0CD1  318C  2C31         	ljmp	i1l3329
  7620  0CD3                     _do_I2C_SEND_ADR_WRITE$intlevel0:	
  7621  0CD3                     l3937:	
  7622                           ;incstack = 0
  7623                           ; Regs used in _do_I2C_SEND_ADR_WRITE: [wreg+status,2+status,0+pclath+cstack]
  7624                           
  7625                           
  7626                           ;i2c_master.c: 287: i2c_status.addressNACKCheck = 1;
  7627  0CD3  0021               	movlb	1	; select bank1
  7628  0CD4  15A0               	bsf	_i2c_status^(0+128),3
  7629                           
  7630                           ;i2c_master.c: 288: i2c_driver_TXData(i2c_status.address << 1);
  7631  0CD5  3521               	lslf	(_i2c_status^(0+128)+1),w
  7632  0CD6  318C  2418         	fcall	_i2c_driver_TXData
  7633                           
  7634                           ;i2c_master.c: 289: return I2C_TX;
  7635  0CD8  3003               	movlw	3
  7636  0CD9  0008               	return
  7637  0CDA                     __end_of_do_I2C_SEND_ADR_WRITE:	
  7638                           
  7639                           	psect	text31
  7640  0D08                     __ptext31:	
  7641 ;; *************** function _do_I2C_SEND_ADR_READ *****************
  7642 ;; Defined at:
  7643 ;;		line 278 in file "mcc_generated_files/drivers/i2c_master.c"
  7644 ;; Parameters:    Size  Location     Type
  7645 ;;		None
  7646 ;; Auto vars:     Size  Location     Type
  7647 ;;		None
  7648 ;; Return value:  Size  Location     Type
  7649 ;;                  1    wreg      enum E12337
  7650 ;; Registers used:
  7651 ;;		wreg, status,2, status,0, pclath, cstack
  7652 ;; Tracked objects:
  7653 ;;		On entry : 0/0
  7654 ;;		On exit  : 0/0
  7655 ;;		Unchanged: 0/0
  7656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7657 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7658 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7659 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7660 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7661 ;;Total ram usage:        0 bytes
  7662 ;; Hardware stack levels used:    1
  7663 ;; Hardware stack levels required when called:    7
  7664 ;; This function calls:
  7665 ;;		_i2c_driver_TXData
  7666 ;; This function is called by:
  7667 ;;		_i2c_ISR
  7668 ;;		i1_i2c_ISR
  7669 ;; This function uses a non-reentrant model
  7670 ;;
  7671                           
  7672                           
  7673                           ;psect for function _do_I2C_SEND_ADR_READ
  7674  0D08                     _do_I2C_SEND_ADR_READ:	
  7675                           
  7676                           ;Skip over the trampoline to the duplicate function for level 1
  7677  0D08  1C7E               	btfss	126,0
  7678  0D09  2D0C               	goto	l3929
  7679  0D0A  318C  2C38         	ljmp	i1l3321
  7680  0D0C                     _do_I2C_SEND_ADR_READ$intlevel0:	
  7681  0D0C                     l3929:	
  7682                           ;incstack = 0
  7683                           ; Regs used in _do_I2C_SEND_ADR_READ: [wreg+status,2+status,0+pclath+cstack]
  7684                           
  7685                           
  7686                           ;i2c_master.c: 280: i2c_status.addressNACKCheck = 1;
  7687  0D0C  0021               	movlb	1	; select bank1
  7688  0D0D  15A0               	bsf	_i2c_status^(0+128),3
  7689                           
  7690                           ;i2c_master.c: 281: i2c_driver_TXData(i2c_status.address << 1 | 1);
  7691  0D0E  1403               	setc
  7692  0D0F  0D21               	rlf	(_i2c_status^(0+128)+1),w
  7693  0D10  318C  2418         	fcall	_i2c_driver_TXData
  7694                           
  7695                           ;i2c_master.c: 282: return I2C_RCEN;
  7696  0D12  3005               	movlw	5
  7697  0D13  0008               	return
  7698  0D14                     __end_of_do_I2C_SEND_ADR_READ:	
  7699                           
  7700                           	psect	text32
  7701  0C58                     __ptext32:	
  7702 ;; *************** function _do_I2C_SEND_STOP *****************
  7703 ;; Defined at:
  7704 ;;		line 272 in file "mcc_generated_files/drivers/i2c_master.c"
  7705 ;; Parameters:    Size  Location     Type
  7706 ;;		None
  7707 ;; Auto vars:     Size  Location     Type
  7708 ;;		None
  7709 ;; Return value:  Size  Location     Type
  7710 ;;                  1    wreg      enum E12337
  7711 ;; Registers used:
  7712 ;;		wreg, status,2, status,0, pclath, cstack
  7713 ;; Tracked objects:
  7714 ;;		On entry : 0/0
  7715 ;;		On exit  : 0/0
  7716 ;;		Unchanged: 0/0
  7717 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7718 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7719 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7720 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7721 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7722 ;;Total ram usage:        0 bytes
  7723 ;; Hardware stack levels used:    1
  7724 ;; Hardware stack levels required when called:    7
  7725 ;; This function calls:
  7726 ;;		_i2c_driver_stop
  7727 ;; This function is called by:
  7728 ;;		_do_I2C_DO_ADDRESS_NACK
  7729 ;;		_do_I2C_TX
  7730 ;;		_do_I2C_TX_EMPTY
  7731 ;;		_i2c_ISR
  7732 ;;		i1_i2c_ISR
  7733 ;; This function uses a non-reentrant model
  7734 ;;
  7735                           
  7736                           
  7737                           ;psect for function _do_I2C_SEND_STOP
  7738  0C58                     _do_I2C_SEND_STOP:	
  7739                           
  7740                           ;Skip over the trampoline to the duplicate function for level 1
  7741  0C58  1C7E               	btfss	126,0
  7742  0C59  2C5C               	goto	l3879
  7743  0C5A  318B  2BC9         	ljmp	i1l3191
  7744  0C5C                     _do_I2C_SEND_STOP$intlevel0:	
  7745  0C5C                     l3879:	
  7746                           ;incstack = 0
  7747                           ; Regs used in _do_I2C_SEND_STOP: [wreg+status,2+status,0+pclath+cstack]
  7748                           
  7749                           
  7750                           ;i2c_master.c: 274: i2c_driver_stop();
  7751  0C5C  318B  23A9         	fcall	_i2c_driver_stop
  7752                           
  7753                           ;i2c_master.c: 275: return I2C_IDLE;
  7754  0C5E  3000               	movlw	0
  7755  0C5F  0008               	return
  7756  0C60                     __end_of_do_I2C_SEND_STOP:	
  7757                           
  7758                           	psect	text33
  7759  0C50                     __ptext33:	
  7760 ;; *************** function _do_I2C_SEND_RESTART *****************
  7761 ;; Defined at:
  7762 ;;		line 266 in file "mcc_generated_files/drivers/i2c_master.c"
  7763 ;; Parameters:    Size  Location     Type
  7764 ;;		None
  7765 ;; Auto vars:     Size  Location     Type
  7766 ;;		None
  7767 ;; Return value:  Size  Location     Type
  7768 ;;                  1    wreg      enum E12337
  7769 ;; Registers used:
  7770 ;;		wreg, status,2, status,0, pclath, cstack
  7771 ;; Tracked objects:
  7772 ;;		On entry : 0/0
  7773 ;;		On exit  : 0/0
  7774 ;;		Unchanged: 0/0
  7775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7776 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7777 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7778 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7779 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7780 ;;Total ram usage:        0 bytes
  7781 ;; Hardware stack levels used:    1
  7782 ;; Hardware stack levels required when called:    7
  7783 ;; This function calls:
  7784 ;;		_i2c_driver_restart
  7785 ;; This function is called by:
  7786 ;;		_do_I2C_DO_ADDRESS_NACK
  7787 ;;		_do_I2C_TX_EMPTY
  7788 ;;		_i2c_ISR
  7789 ;;		i1_i2c_ISR
  7790 ;; This function uses a non-reentrant model
  7791 ;;
  7792                           
  7793                           
  7794                           ;psect for function _do_I2C_SEND_RESTART
  7795  0C50                     _do_I2C_SEND_RESTART:	
  7796                           
  7797                           ;Skip over the trampoline to the duplicate function for level 1
  7798  0C50  1C7E               	btfss	126,0
  7799  0C51  2C54               	goto	l3873
  7800  0C52  318B  2BC5         	ljmp	i1l3185
  7801  0C54                     _do_I2C_SEND_RESTART$intlevel0:	
  7802  0C54                     l3873:	
  7803                           ;incstack = 0
  7804                           ; Regs used in _do_I2C_SEND_RESTART: [wreg+status,2+status,0+pclath+cstack]
  7805                           
  7806                           
  7807                           ;i2c_master.c: 268: i2c_driver_restart();
  7808  0C54  318B  23A6         	fcall	_i2c_driver_restart
  7809                           
  7810                           ;i2c_master.c: 269: return I2C_SEND_ADR_READ;
  7811  0C56  3001               	movlw	1
  7812  0C57  0008               	return
  7813  0C58                     __end_of_do_I2C_SEND_RESTART:	
  7814                           
  7815                           	psect	text34
  7816  0C48                     __ptext34:	
  7817 ;; *************** function _do_I2C_SEND_RESTART_WRITE *****************
  7818 ;; Defined at:
  7819 ;;		line 260 in file "mcc_generated_files/drivers/i2c_master.c"
  7820 ;; Parameters:    Size  Location     Type
  7821 ;;		None
  7822 ;; Auto vars:     Size  Location     Type
  7823 ;;		None
  7824 ;; Return value:  Size  Location     Type
  7825 ;;                  1    wreg      enum E12337
  7826 ;; Registers used:
  7827 ;;		wreg, status,2, status,0, pclath, cstack
  7828 ;; Tracked objects:
  7829 ;;		On entry : 0/0
  7830 ;;		On exit  : 0/0
  7831 ;;		Unchanged: 0/0
  7832 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7833 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7834 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7835 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7836 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7837 ;;Total ram usage:        0 bytes
  7838 ;; Hardware stack levels used:    1
  7839 ;; Hardware stack levels required when called:    7
  7840 ;; This function calls:
  7841 ;;		_i2c_driver_restart
  7842 ;; This function is called by:
  7843 ;;		_do_I2C_TX
  7844 ;;		_i2c_ISR
  7845 ;;		i1_i2c_ISR
  7846 ;; This function uses a non-reentrant model
  7847 ;;
  7848                           
  7849                           
  7850                           ;psect for function _do_I2C_SEND_RESTART_WRITE
  7851  0C48                     _do_I2C_SEND_RESTART_WRITE:	
  7852                           
  7853                           ;Skip over the trampoline to the duplicate function for level 1
  7854  0C48  1C7E               	btfss	126,0
  7855  0C49  2C4C               	goto	l3867
  7856  0C4A  318B  2BC1         	ljmp	i1l3179
  7857  0C4C                     _do_I2C_SEND_RESTART_WRITE$intlevel0:	
  7858  0C4C                     l3867:	
  7859                           ;incstack = 0
  7860                           ; Regs used in _do_I2C_SEND_RESTART_WRITE: [wreg+status,2+status,0+pclath+cstack]
  7861                           
  7862                           
  7863                           ;i2c_master.c: 262: i2c_driver_restart();
  7864  0C4C  318B  23A6         	fcall	_i2c_driver_restart
  7865                           
  7866                           ;i2c_master.c: 263: return I2C_SEND_ADR_WRITE;
  7867  0C4E  3002               	movlw	2
  7868  0C4F  0008               	return
  7869  0C50                     __end_of_do_I2C_SEND_RESTART_WRITE:	
  7870                           
  7871                           	psect	text35
  7872  0C40                     __ptext35:	
  7873 ;; *************** function _do_I2C_SEND_RESTART_READ *****************
  7874 ;; Defined at:
  7875 ;;		line 254 in file "mcc_generated_files/drivers/i2c_master.c"
  7876 ;; Parameters:    Size  Location     Type
  7877 ;;		None
  7878 ;; Auto vars:     Size  Location     Type
  7879 ;;		None
  7880 ;; Return value:  Size  Location     Type
  7881 ;;                  1    wreg      enum E12337
  7882 ;; Registers used:
  7883 ;;		wreg, status,2, status,0, pclath, cstack
  7884 ;; Tracked objects:
  7885 ;;		On entry : 0/0
  7886 ;;		On exit  : 0/0
  7887 ;;		Unchanged: 0/0
  7888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7889 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7890 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7891 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7892 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7893 ;;Total ram usage:        0 bytes
  7894 ;; Hardware stack levels used:    1
  7895 ;; Hardware stack levels required when called:    7
  7896 ;; This function calls:
  7897 ;;		_i2c_driver_restart
  7898 ;; This function is called by:
  7899 ;;		_do_I2C_TX
  7900 ;;		_i2c_ISR
  7901 ;;		i1_i2c_ISR
  7902 ;; This function uses a non-reentrant model
  7903 ;;
  7904                           
  7905                           
  7906                           ;psect for function _do_I2C_SEND_RESTART_READ
  7907  0C40                     _do_I2C_SEND_RESTART_READ:	
  7908                           
  7909                           ;Skip over the trampoline to the duplicate function for level 1
  7910  0C40  1C7E               	btfss	126,0
  7911  0C41  2C44               	goto	l3861
  7912  0C42  318B  2BBD         	ljmp	i1l3173
  7913  0C44                     _do_I2C_SEND_RESTART_READ$intlevel0:	
  7914  0C44                     l3861:	
  7915                           ;incstack = 0
  7916                           ; Regs used in _do_I2C_SEND_RESTART_READ: [wreg+status,2+status,0+pclath+cstack]
  7917                           
  7918                           
  7919                           ;i2c_master.c: 256: i2c_driver_restart();
  7920  0C44  318B  23A6         	fcall	_i2c_driver_restart
  7921                           
  7922                           ;i2c_master.c: 257: return I2C_SEND_ADR_READ;
  7923  0C46  3001               	movlw	1
  7924  0C47  0008               	return
  7925  0C48                     __end_of_do_I2C_SEND_RESTART_READ:	
  7926                           
  7927                           	psect	text36
  7928  0C81                     __ptext36:	
  7929 ;; *************** function _do_I2C_IDLE *****************
  7930 ;; Defined at:
  7931 ;;		line 247 in file "mcc_generated_files/drivers/i2c_master.c"
  7932 ;; Parameters:    Size  Location     Type
  7933 ;;		None
  7934 ;; Auto vars:     Size  Location     Type
  7935 ;;		None
  7936 ;; Return value:  Size  Location     Type
  7937 ;;                  1    wreg      enum E12337
  7938 ;; Registers used:
  7939 ;;		wreg, status,2
  7940 ;; Tracked objects:
  7941 ;;		On entry : 0/0
  7942 ;;		On exit  : 0/0
  7943 ;;		Unchanged: 0/0
  7944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7945 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7946 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7947 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7948 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7949 ;;Total ram usage:        0 bytes
  7950 ;; Hardware stack levels used:    1
  7951 ;; Hardware stack levels required when called:    6
  7952 ;; This function calls:
  7953 ;;		Nothing
  7954 ;; This function is called by:
  7955 ;;		_i2c_ISR
  7956 ;;		i1_i2c_ISR
  7957 ;; This function uses a non-reentrant model
  7958 ;;
  7959                           
  7960                           
  7961                           ;psect for function _do_I2C_IDLE
  7962  0C81                     _do_I2C_IDLE:	
  7963                           
  7964                           ;Skip over the trampoline to the duplicate function for level 1
  7965  0C81  1C7E               	btfss	126,0
  7966  0C82  2C85               	goto	l3921
  7967  0C83  318B  2BEA         	ljmp	i1l3313
  7968  0C85                     _do_I2C_IDLE$intlevel0:	
  7969  0C85                     l3921:	
  7970                           ;incstack = 0
  7971                           ; Regs used in _do_I2C_IDLE: [wreg+status,2]
  7972                           
  7973                           
  7974                           ;i2c_master.c: 249: i2c_status.busy = 0;
  7975  0C85  0021               	movlb	1	; select bank1
  7976  0C86  1020               	bcf	_i2c_status^(0+128),0
  7977                           
  7978                           ;i2c_master.c: 250: i2c_status.error = I2C_NOERR;
  7979  0C87  01AB               	clrf	(_i2c_status^(0+128)+11)
  7980                           
  7981                           ;i2c_master.c: 251: return I2C_RESET;
  7982  0C88  300E               	movlw	14
  7983  0C89  0008               	return
  7984  0C8A                     __end_of_do_I2C_IDLE:	
  7985                           
  7986                           	psect	text37
  7987  0CC4                     __ptext37:	
  7988 ;; *************** function _do_I2C_RESET *****************
  7989 ;; Defined at:
  7990 ;;		line 239 in file "mcc_generated_files/drivers/i2c_master.c"
  7991 ;; Parameters:    Size  Location     Type
  7992 ;;		None
  7993 ;; Auto vars:     Size  Location     Type
  7994 ;;		None
  7995 ;; Return value:  Size  Location     Type
  7996 ;;                  1    wreg      enum E12337
  7997 ;; Registers used:
  7998 ;;		wreg, status,2, status,0, pclath, cstack
  7999 ;; Tracked objects:
  8000 ;;		On entry : 0/0
  8001 ;;		On exit  : 0/0
  8002 ;;		Unchanged: 0/0
  8003 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8004 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8005 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8006 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8007 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8008 ;;Total ram usage:        0 bytes
  8009 ;; Hardware stack levels used:    1
  8010 ;; Hardware stack levels required when called:    7
  8011 ;; This function calls:
  8012 ;;		_i2c_driver_resetBus
  8013 ;; This function is called by:
  8014 ;;		_i2c_ISR
  8015 ;;		i1_i2c_ISR
  8016 ;; This function uses a non-reentrant model
  8017 ;;
  8018                           
  8019                           
  8020                           ;psect for function _do_I2C_RESET
  8021  0CC4                     _do_I2C_RESET:	
  8022                           
  8023                           ;Skip over the trampoline to the duplicate function for level 1
  8024  0CC4  1C7E               	btfss	126,0
  8025  0CC5  2CC8               	goto	l3911
  8026  0CC6  318C  2C2A         	ljmp	i1l3303
  8027  0CC8                     _do_I2C_RESET$intlevel0:	
  8028  0CC8                     l3911:	
  8029                           ;incstack = 0
  8030                           ; Regs used in _do_I2C_RESET: [wreg+status,2+status,0+pclath+cstack]
  8031                           
  8032                           
  8033                           ;i2c_master.c: 241: i2c_driver_resetBus();
  8034  0CC8  318B  2380         	fcall	_i2c_driver_resetBus
  8035                           
  8036                           ;i2c_master.c: 242: i2c_status.busy = 0;
  8037  0CCA  0021               	movlb	1	; select bank1
  8038  0CCB  1020               	bcf	_i2c_status^(0+128),0
  8039                           
  8040                           ;i2c_master.c: 243: i2c_status.error = I2C_NOERR;
  8041  0CCC  01AB               	clrf	(_i2c_status^(0+128)+11)
  8042                           
  8043                           ;i2c_master.c: 244: return I2C_RESET;
  8044  0CCD  300E               	movlw	14
  8045  0CCE  0008               	return
  8046  0CCF                     __end_of_do_I2C_RESET:	
  8047                           
  8048                           	psect	text38
  8049  0782                     __ptext38:	
  8050 ;; *************** function _do_I2C_TX_EMPTY *****************
  8051 ;; Defined at:
  8052 ;;		line 382 in file "mcc_generated_files/drivers/i2c_master.c"
  8053 ;; Parameters:    Size  Location     Type
  8054 ;;		None
  8055 ;; Auto vars:     Size  Location     Type
  8056 ;;		None
  8057 ;; Return value:  Size  Location     Type
  8058 ;;                  1    wreg      enum E12337
  8059 ;; Registers used:
  8060 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8061 ;; Tracked objects:
  8062 ;;		On entry : 0/0
  8063 ;;		On exit  : 0/0
  8064 ;;		Unchanged: 0/0
  8065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8066 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8067 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8068 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8069 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8070 ;;Total ram usage:        1 bytes
  8071 ;; Hardware stack levels used:    1
  8072 ;; Hardware stack levels required when called:    9
  8073 ;; This function calls:
  8074 ;;		Absolute function
  8075 ;;		_do_I2C_SEND_RESTART
  8076 ;;		_do_I2C_SEND_STOP
  8077 ;;		_i2c_restartWrite
  8078 ;;		_mssp_setIRQ
  8079 ;;		_rd1RegCompleteHandler
  8080 ;;		_rd2RegCompleteHandler
  8081 ;;		_rdBlkRegCompleteHandler
  8082 ;;		_returnReset
  8083 ;;		_returnStop
  8084 ;;		_wr1RegCompleteHandler
  8085 ;;		_wr2RegCompleteHandler
  8086 ;; This function is called by:
  8087 ;;		_i2c_ISR
  8088 ;;		i1_i2c_ISR
  8089 ;; This function uses a non-reentrant model
  8090 ;;
  8091                           
  8092                           
  8093                           ;psect for function _do_I2C_TX_EMPTY
  8094  0782                     _do_I2C_TX_EMPTY:	
  8095                           
  8096                           ;Skip over the trampoline to the duplicate function for level 1
  8097  0782  1C7E               	btfss	126,0
  8098  0783  2F86               	goto	l5991
  8099  0784  318F  2FAE         	ljmp	i1l6239
  8100  0786                     _do_I2C_TX_EMPTY$intlevel0:	
  8101  0786                     l5991:	
  8102                           ;incstack = 0
  8103                           ; Regs used in _do_I2C_TX_EMPTY: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8104                           
  8105                           
  8106                           ;i2c_master.c: 384: i2c_status.bufferFree = 1;
  8107  0786  0021               	movlb	1	; select bank1
  8108  0787  1520               	bsf	_i2c_status^(0+128),2
  8109                           
  8110                           ;i2c_master.c: 385: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
  8111  0788  2F93               	goto	l6009
  8112  0789                     l5993:	
  8113                           ;i2c_master.c: 386: {
  8114                           ;i2c_master.c: 387: case i2c_restart_read:
  8115                           
  8116                           
  8117                           ;i2c_master.c: 388: case i2c_restart_write:
  8118                           ;i2c_master.c: 389: return do_I2C_SEND_RESTART();
  8119  0789  318C  2450         	fcall	_do_I2C_SEND_RESTART
  8120  078B  0008               	return
  8121  078C                     l5997:	
  8122                           ;i2c_master.c: 390: case i2c_continue:
  8123                           
  8124                           
  8125                           ;i2c_master.c: 391: mssp_setIRQ();
  8126  078C  318B  23B2         	fcall	_mssp_setIRQ
  8127                           
  8128                           ;i2c_master.c: 392: return I2C_TX;
  8129  078E  3003               	movlw	3
  8130  078F  0008               	return
  8131  0790                     l6003:	
  8132                           ;i2c_master.c: 394: case i2c_stop:
  8133                           
  8134                           ;i2c_master.c: 393: default:
  8135                           
  8136                           
  8137                           ;i2c_master.c: 395: return do_I2C_SEND_STOP();
  8138  0790  318C  2458         	fcall	_do_I2C_SEND_STOP
  8139                           
  8140                           ;i2c_master.c: 396: }
  8141  0792  0008               	return
  8142  0793                     l6009:	
  8143  0793  0021               	movlb	1	; select bank1
  8144  0794  0838               	movf	(low ((_i2c_status| 0+24)))^(0+128),w
  8145  0795  0020               	movlb	0	; select bank0
  8146  0796  00AC               	movwf	??_do_I2C_TX_EMPTY
  8147  0797  082C               	movf	??_do_I2C_TX_EMPTY,w
  8148  0798  00AB               	movwf	returnStop@p
  8149  0799  300C               	movlw	12
  8150  079A  3EA0               	addlw	(low (_i2c_status| 0))& (0+255)
  8151  079B  0086               	movwf	6
  8152  079C  0187               	clrf	7
  8153  079D  3F41               	moviw [1]fsr1
  8154  079E  008A               	movwf	10
  8155  079F  3F40               	moviw [0]fsr1
  8156  07A0  000A               	callw
  8157  07A1  3187               	pagesel	$
  8158                           
  8159                           ; Switch size 1, requested type "space"
  8160                           ; Number of cases is 4, Range of values is 1 to 4
  8161                           ; switch strategies available:
  8162                           ; Name         Instructions Cycles
  8163                           ; simple_byte           13     7 (average)
  8164                           ; direct_byte           17     9 (fixed)
  8165                           ; jumptable            263     9 (fixed)
  8166                           ;	Chosen strategy is simple_byte
  8167  07A2  3A01               	xorlw	1	; case 1
  8168  07A3  1903               	skipnz
  8169  07A4  2F90               	goto	l6003
  8170  07A5  3A03               	xorlw	3	; case 2
  8171  07A6  1903               	skipnz
  8172  07A7  2F89               	goto	l5993
  8173  07A8  3A01               	xorlw	1	; case 3
  8174  07A9  1903               	skipnz
  8175  07AA  2F89               	goto	l5993
  8176  07AB  3A07               	xorlw	7	; case 4
  8177  07AC  1903               	skipnz
  8178  07AD  2F8C               	goto	l5997
  8179  07AE  2F90               	goto	l6003
  8180  07AF  0008               	return
  8181  07B0                     __end_of_do_I2C_TX_EMPTY:	
  8182                           
  8183                           	psect	text39
  8184  0BB2                     __ptext39:	
  8185 ;; *************** function _mssp_setIRQ *****************
  8186 ;; Defined at:
  8187 ;;		line 58 in file "mcc_generated_files/i2c_driver.c"
  8188 ;; Parameters:    Size  Location     Type
  8189 ;;		None
  8190 ;; Auto vars:     Size  Location     Type
  8191 ;;		None
  8192 ;; Return value:  Size  Location     Type
  8193 ;;                  1    wreg      void 
  8194 ;; Registers used:
  8195 ;;		None
  8196 ;; Tracked objects:
  8197 ;;		On entry : 0/0
  8198 ;;		On exit  : 0/0
  8199 ;;		Unchanged: 0/0
  8200 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8201 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8202 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8203 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8204 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8205 ;;Total ram usage:        0 bytes
  8206 ;; Hardware stack levels used:    1
  8207 ;; Hardware stack levels required when called:    6
  8208 ;; This function calls:
  8209 ;;		Nothing
  8210 ;; This function is called by:
  8211 ;;		_do_I2C_TX_EMPTY
  8212 ;; This function uses a non-reentrant model
  8213 ;;
  8214                           
  8215                           
  8216                           ;psect for function _mssp_setIRQ
  8217  0BB2                     _mssp_setIRQ:	
  8218                           
  8219                           ;i2c_driver.c: 60: PIR1bits.SSP1IF = 1;
  8220                           
  8221                           ;incstack = 0
  8222                           ; Regs used in _mssp_setIRQ: []
  8223  0BB2  0020               	movlb	0	; select bank0
  8224  0BB3  1590               	bsf	16,3	;volatile
  8225  0BB4  0008               	return
  8226  0BB5                     __end_of_mssp_setIRQ:	
  8227                           
  8228                           	psect	text40
  8229  0D48                     __ptext40:	
  8230 ;; *************** function _i2c_driver_isNACK *****************
  8231 ;; Defined at:
  8232 ;;		line 161 in file "mcc_generated_files/i2c_driver.c"
  8233 ;; Parameters:    Size  Location     Type
  8234 ;;		None
  8235 ;; Auto vars:     Size  Location     Type
  8236 ;;		None
  8237 ;; Return value:  Size  Location     Type
  8238 ;;		None               void
  8239 ;; Registers used:
  8240 ;;		wreg, status,2, status,0
  8241 ;; Tracked objects:
  8242 ;;		On entry : 0/0
  8243 ;;		On exit  : 0/0
  8244 ;;		Unchanged: 0/0
  8245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8246 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8247 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8248 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8249 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8250 ;;Total ram usage:        1 bytes
  8251 ;; Hardware stack levels used:    1
  8252 ;; Hardware stack levels required when called:    6
  8253 ;; This function calls:
  8254 ;;		Nothing
  8255 ;; This function is called by:
  8256 ;;		_do_I2C_TX
  8257 ;;		_i2c_ISR
  8258 ;; This function uses a non-reentrant model
  8259 ;;
  8260                           
  8261                           
  8262                           ;psect for function _i2c_driver_isNACK
  8263  0D48                     _i2c_driver_isNACK:	
  8264                           
  8265                           ;i2c_driver.c: 163: return SSP1CON2bits.ACKSTAT = 1;
  8266                           
  8267                           ;incstack = 0
  8268                           ; Regs used in _i2c_driver_isNACK: [wreg+status,2+status,0]
  8269  0D48  0024               	movlb	4	; select bank4
  8270  0D49  0816               	movf	22,w	;volatile
  8271  0D4A  39BF               	andlw	-65
  8272  0D4B  3840               	iorlw	64
  8273  0D4C  0096               	movwf	22	;volatile
  8274  0D4D  0E16               	swapf	22,w	;volatile
  8275  0D4E  0C89               	rrf	9,f
  8276  0D4F  0C89               	rrf	9,f
  8277  0D50  3901               	andlw	1
  8278  0D51  0020               	movlb	0	; select bank0
  8279  0D52  00A2               	movwf	??_i2c_driver_isNACK
  8280  0D53  0C22               	rrf	??_i2c_driver_isNACK,w
  8281  0D54  0008               	return
  8282  0D55                     __end_of_i2c_driver_isNACK:	
  8283                           
  8284                           	psect	text41
  8285  0C18                     __ptext41:	
  8286 ;; *************** function _i2c_driver_TXData *****************
  8287 ;; Defined at:
  8288 ;;		line 186 in file "mcc_generated_files/i2c_driver.c"
  8289 ;; Parameters:    Size  Location     Type
  8290 ;;  d               1    wreg     unsigned char 
  8291 ;; Auto vars:     Size  Location     Type
  8292 ;;  d               1    2[BANK0 ] unsigned char 
  8293 ;; Return value:  Size  Location     Type
  8294 ;;                  1    wreg      void 
  8295 ;; Registers used:
  8296 ;;		wreg
  8297 ;; Tracked objects:
  8298 ;;		On entry : 0/0
  8299 ;;		On exit  : 0/0
  8300 ;;		Unchanged: 0/0
  8301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8302 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8303 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8304 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8305 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8306 ;;Total ram usage:        1 bytes
  8307 ;; Hardware stack levels used:    1
  8308 ;; Hardware stack levels required when called:    6
  8309 ;; This function calls:
  8310 ;;		Nothing
  8311 ;; This function is called by:
  8312 ;;		_do_I2C_SEND_ADR_READ
  8313 ;;		_do_I2C_SEND_ADR_WRITE
  8314 ;;		_do_I2C_TX
  8315 ;; This function uses a non-reentrant model
  8316 ;;
  8317                           
  8318                           
  8319                           ;psect for function _i2c_driver_TXData
  8320  0C18                     _i2c_driver_TXData:	
  8321                           
  8322                           ;incstack = 0
  8323                           ; Regs used in _i2c_driver_TXData: [wreg]
  8324                           ;i2c_driver_TXData@d stored from wreg
  8325  0C18  0020               	movlb	0	; select bank0
  8326  0C19  00A2               	movwf	i2c_driver_TXData@d
  8327                           
  8328                           ;i2c_driver.c: 188: SSP1BUF = d;
  8329  0C1A  0822               	movf	i2c_driver_TXData@d,w
  8330  0C1B  0024               	movlb	4	; select bank4
  8331  0C1C  0091               	movwf	17	;volatile
  8332  0C1D  0008               	return
  8333  0C1E                     __end_of_i2c_driver_TXData:	
  8334                           
  8335                           	psect	text42
  8336  0BAF                     __ptext42:	
  8337 ;; *************** function _i2c_driver_getRXData *****************
  8338 ;; Defined at:
  8339 ;;		line 171 in file "mcc_generated_files/i2c_driver.c"
  8340 ;; Parameters:    Size  Location     Type
  8341 ;;		None
  8342 ;; Auto vars:     Size  Location     Type
  8343 ;;		None
  8344 ;; Return value:  Size  Location     Type
  8345 ;;                  1    wreg      unsigned char 
  8346 ;; Registers used:
  8347 ;;		wreg
  8348 ;; Tracked objects:
  8349 ;;		On entry : 0/0
  8350 ;;		On exit  : 0/0
  8351 ;;		Unchanged: 0/0
  8352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8353 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8354 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8355 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8356 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8357 ;;Total ram usage:        0 bytes
  8358 ;; Hardware stack levels used:    1
  8359 ;; Hardware stack levels required when called:    6
  8360 ;; This function calls:
  8361 ;;		Nothing
  8362 ;; This function is called by:
  8363 ;;		_do_I2C_RX
  8364 ;; This function uses a non-reentrant model
  8365 ;;
  8366                           
  8367                           
  8368                           ;psect for function _i2c_driver_getRXData
  8369  0BAF                     _i2c_driver_getRXData:	
  8370                           
  8371                           ;i2c_driver.c: 173: return SSP1BUF;
  8372                           
  8373                           ;incstack = 0
  8374                           ; Regs used in _i2c_driver_getRXData: [wreg]
  8375  0BAF  0024               	movlb	4	; select bank4
  8376  0BB0  0811               	movf	17,w	;volatile
  8377  0BB1  0008               	return
  8378  0BB2                     __end_of_i2c_driver_getRXData:	
  8379                           
  8380                           	psect	text43
  8381  0BDD                     __ptext43:	
  8382 ;; *************** function _i2c_driver_sendNACK *****************
  8383 ;; Defined at:
  8384 ;;		line 202 in file "mcc_generated_files/i2c_driver.c"
  8385 ;; Parameters:    Size  Location     Type
  8386 ;;		None
  8387 ;; Auto vars:     Size  Location     Type
  8388 ;;		None
  8389 ;; Return value:  Size  Location     Type
  8390 ;;                  1    wreg      void 
  8391 ;; Registers used:
  8392 ;;		None
  8393 ;; Tracked objects:
  8394 ;;		On entry : 0/0
  8395 ;;		On exit  : 0/0
  8396 ;;		Unchanged: 0/0
  8397 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8398 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8399 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8400 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8401 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8402 ;;Total ram usage:        0 bytes
  8403 ;; Hardware stack levels used:    1
  8404 ;; Hardware stack levels required when called:    6
  8405 ;; This function calls:
  8406 ;;		Nothing
  8407 ;; This function is called by:
  8408 ;;		_do_I2C_DO_NACK_STOP
  8409 ;;		_do_I2C_DO_NACK_RESTART
  8410 ;; This function uses a non-reentrant model
  8411 ;;
  8412                           
  8413                           
  8414                           ;psect for function _i2c_driver_sendNACK
  8415  0BDD                     _i2c_driver_sendNACK:	
  8416                           
  8417                           ;i2c_driver.c: 204: SSP1CON2bits.ACKDT = 1;
  8418                           
  8419                           ;incstack = 0
  8420                           ; Regs used in _i2c_driver_sendNACK: []
  8421  0BDD  0024               	movlb	4	; select bank4
  8422  0BDE  1696               	bsf	22,5	;volatile
  8423                           
  8424                           ;i2c_driver.c: 205: SSP1CON2bits.ACKEN = 1;
  8425  0BDF  1616               	bsf	22,4	;volatile
  8426  0BE0  0008               	return
  8427  0BE1                     __end_of_i2c_driver_sendNACK:	
  8428                           
  8429                           	psect	text44
  8430  0B80                     __ptext44:	
  8431 ;; *************** function _i2c_driver_resetBus *****************
  8432 ;; Defined at:
  8433 ;;		line 141 in file "mcc_generated_files/i2c_driver.c"
  8434 ;; Parameters:    Size  Location     Type
  8435 ;;		None
  8436 ;; Auto vars:     Size  Location     Type
  8437 ;;		None
  8438 ;; Return value:  Size  Location     Type
  8439 ;;                  1    wreg      void 
  8440 ;; Registers used:
  8441 ;;		None
  8442 ;; Tracked objects:
  8443 ;;		On entry : 0/0
  8444 ;;		On exit  : 0/0
  8445 ;;		Unchanged: 0/0
  8446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8447 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8448 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8449 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8450 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8451 ;;Total ram usage:        0 bytes
  8452 ;; Hardware stack levels used:    1
  8453 ;; Hardware stack levels required when called:    6
  8454 ;; This function calls:
  8455 ;;		Nothing
  8456 ;; This function is called by:
  8457 ;;		_do_I2C_RESET
  8458 ;; This function uses a non-reentrant model
  8459 ;;
  8460                           
  8461                           
  8462                           ;psect for function _i2c_driver_resetBus
  8463  0B80                     _i2c_driver_resetBus:	
  8464                           
  8465                           ;incstack = 0
  8466                           ; Regs used in _i2c_driver_resetBus: []
  8467  0B80  0008               	return
  8468  0B81                     __end_of_i2c_driver_resetBus:	
  8469                           
  8470                           	psect	text45
  8471  0BAC                     __ptext45:	
  8472 ;; *************** function _i2c_driver_startRX *****************
  8473 ;; Defined at:
  8474 ;;		line 166 in file "mcc_generated_files/i2c_driver.c"
  8475 ;; Parameters:    Size  Location     Type
  8476 ;;		None
  8477 ;; Auto vars:     Size  Location     Type
  8478 ;;		None
  8479 ;; Return value:  Size  Location     Type
  8480 ;;                  1    wreg      void 
  8481 ;; Registers used:
  8482 ;;		None
  8483 ;; Tracked objects:
  8484 ;;		On entry : 0/0
  8485 ;;		On exit  : 0/0
  8486 ;;		Unchanged: 0/0
  8487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8488 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8489 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8490 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8491 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8492 ;;Total ram usage:        0 bytes
  8493 ;; Hardware stack levels used:    1
  8494 ;; Hardware stack levels required when called:    6
  8495 ;; This function calls:
  8496 ;;		Nothing
  8497 ;; This function is called by:
  8498 ;;		_do_I2C_RCEN
  8499 ;; This function uses a non-reentrant model
  8500 ;;
  8501                           
  8502                           
  8503                           ;psect for function _i2c_driver_startRX
  8504  0BAC                     _i2c_driver_startRX:	
  8505                           
  8506                           ;i2c_driver.c: 168: SSP1CON2bits.RCEN = 1;
  8507                           
  8508                           ;incstack = 0
  8509                           ; Regs used in _i2c_driver_startRX: []
  8510  0BAC  0024               	movlb	4	; select bank4
  8511  0BAD  1596               	bsf	22,3	;volatile
  8512  0BAE  0008               	return
  8513  0BAF                     __end_of_i2c_driver_startRX:	
  8514                           
  8515                           	psect	text46
  8516  0C12                     __ptext46:	
  8517 ;; *************** function _returnReset *****************
  8518 ;; Defined at:
  8519 ;;		line 448 in file "mcc_generated_files/drivers/i2c_master.c"
  8520 ;; Parameters:    Size  Location     Type
  8521 ;;  p               1   11[BANK0 ] PTR void 
  8522 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  8523 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  8524 ;; Auto vars:     Size  Location     Type
  8525 ;;		None
  8526 ;; Return value:  Size  Location     Type
  8527 ;;                  1    wreg      enum E12171
  8528 ;; Registers used:
  8529 ;;		wreg
  8530 ;; Tracked objects:
  8531 ;;		On entry : 0/0
  8532 ;;		On exit  : 0/0
  8533 ;;		Unchanged: 0/0
  8534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8535 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8536 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8537 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8538 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8539 ;;Total ram usage:        1 bytes
  8540 ;; Hardware stack levels used:    1
  8541 ;; Hardware stack levels required when called:    6
  8542 ;; This function calls:
  8543 ;;		Nothing
  8544 ;; This function is called by:
  8545 ;;		_i2c_open
  8546 ;;		_do_I2C_DO_ADDRESS_NACK
  8547 ;;		_do_I2C_TX
  8548 ;;		_do_I2C_RX
  8549 ;;		_do_I2C_TX_EMPTY
  8550 ;;		i1_do_I2C_DO_ADDRESS_NACK
  8551 ;;		i1_do_I2C_TX
  8552 ;;		i1_do_I2C_RX
  8553 ;;		i1_do_I2C_TX_EMPTY
  8554 ;; This function uses a non-reentrant model
  8555 ;;
  8556                           
  8557                           
  8558                           ;psect for function _returnReset
  8559  0C12                     _returnReset:	
  8560                           
  8561                           ;Skip over the trampoline to the duplicate function for level 1
  8562  0C12  1C7E               	btfss	126,0
  8563  0C13  2C16               	goto	l3901
  8564  0C14  318B  2B83         	ljmp	i1l3213
  8565  0C16                     _returnReset$intlevel0:	
  8566  0C16                     l3901:	
  8567                           ;incstack = 0
  8568                           ; Regs used in _returnReset: [wreg]
  8569                           
  8570                           
  8571                           ;i2c_master.c: 450: return i2c_reset_link;
  8572  0C16  3005               	movlw	5
  8573  0C17  0008               	return
  8574  0C18                     __end_of_returnReset:	
  8575                           
  8576                           	psect	text47
  8577  0C0C                     __ptext47:	
  8578 ;; *************** function _returnStop *****************
  8579 ;; Defined at:
  8580 ;;		line 443 in file "mcc_generated_files/drivers/i2c_master.c"
  8581 ;; Parameters:    Size  Location     Type
  8582 ;;  p               1   11[BANK0 ] PTR void 
  8583 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  8584 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  8585 ;; Auto vars:     Size  Location     Type
  8586 ;;		None
  8587 ;; Return value:  Size  Location     Type
  8588 ;;                  1    wreg      enum E12171
  8589 ;; Registers used:
  8590 ;;		wreg
  8591 ;; Tracked objects:
  8592 ;;		On entry : 0/0
  8593 ;;		On exit  : 0/0
  8594 ;;		Unchanged: 0/0
  8595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8596 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8597 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8598 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8599 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8600 ;;Total ram usage:        1 bytes
  8601 ;; Hardware stack levels used:    1
  8602 ;; Hardware stack levels required when called:    6
  8603 ;; This function calls:
  8604 ;;		Nothing
  8605 ;; This function is called by:
  8606 ;;		_i2c_open
  8607 ;;		_setCallBack
  8608 ;;		_do_I2C_DO_ADDRESS_NACK
  8609 ;;		_do_I2C_TX
  8610 ;;		_do_I2C_RX
  8611 ;;		_do_I2C_TX_EMPTY
  8612 ;;		i1_do_I2C_DO_ADDRESS_NACK
  8613 ;;		i1_do_I2C_TX
  8614 ;;		i1_do_I2C_RX
  8615 ;;		i1_do_I2C_TX_EMPTY
  8616 ;; This function uses a non-reentrant model
  8617 ;;
  8618                           
  8619                           
  8620                           ;psect for function _returnStop
  8621  0C0C                     _returnStop:	
  8622                           
  8623                           ;Skip over the trampoline to the duplicate function for level 1
  8624  0C0C  1C7E               	btfss	126,0
  8625  0C0D  2C10               	goto	l3897
  8626  0C0E  318B  2B81         	ljmp	i1l3209
  8627  0C10                     _returnStop$intlevel0:	
  8628  0C10                     l3897:	
  8629                           ;incstack = 0
  8630                           ; Regs used in _returnStop: [wreg]
  8631                           
  8632                           
  8633                           ;i2c_master.c: 445: return i2c_stop;
  8634  0C10  3001               	movlw	1
  8635  0C11  0008               	return
  8636  0C12                     __end_of_returnStop:	
  8637                           
  8638                           	psect	text48
  8639  0EBC                     __ptext48:	
  8640 ;; *************** function _rdBlkRegCompleteHandler *****************
  8641 ;; Defined at:
  8642 ;;		line 134 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  8643 ;; Parameters:    Size  Location     Type
  8644 ;;  p               1   11[BANK0 ] PTR void 
  8645 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  8646 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  8647 ;; Auto vars:     Size  Location     Type
  8648 ;;		None
  8649 ;; Return value:  Size  Location     Type
  8650 ;;                  1    wreg      enum E97
  8651 ;; Registers used:
  8652 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8653 ;; Tracked objects:
  8654 ;;		On entry : 0/0
  8655 ;;		On exit  : 0/0
  8656 ;;		Unchanged: 0/0
  8657 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8658 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8659 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8660 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8661 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8662 ;;Total ram usage:        1 bytes
  8663 ;; Hardware stack levels used:    1
  8664 ;; Hardware stack levels required when called:    8
  8665 ;; This function calls:
  8666 ;;		_i2c_setBuffer
  8667 ;;		_i2c_setDataCompleteCallback
  8668 ;; This function is called by:
  8669 ;;		_i2c_readDataBlock
  8670 ;;		_do_I2C_DO_ADDRESS_NACK
  8671 ;;		_do_I2C_TX
  8672 ;;		_do_I2C_RX
  8673 ;;		_do_I2C_TX_EMPTY
  8674 ;;		i1_do_I2C_DO_ADDRESS_NACK
  8675 ;;		i1_do_I2C_TX
  8676 ;;		i1_do_I2C_RX
  8677 ;;		i1_do_I2C_TX_EMPTY
  8678 ;; This function uses a non-reentrant model
  8679 ;;
  8680                           
  8681                           
  8682                           ;psect for function _rdBlkRegCompleteHandler
  8683  0EBC                     _rdBlkRegCompleteHandler:	
  8684                           
  8685                           ;Skip over the trampoline to the duplicate function for level 1
  8686  0EBC  1C7E               	btfss	126,0
  8687  0EBD  2EC0               	goto	l3855
  8688  0EBE  318D  2DDD         	ljmp	i1l3167
  8689  0EC0                     _rdBlkRegCompleteHandler$intlevel0:	
  8690  0EC0                     l3855:	
  8691                           ;incstack = 0
  8692                           ; Regs used in _rdBlkRegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  8693                           
  8694                           
  8695                           ;i2c_simple_master.c: 136: i2c_setBuffer(((buf_t *)p)->data,((buf_t*)p)->len);
  8696  0EC0  0020               	movlb	0	; select bank0
  8697  0EC1  082B               	movf	rdBlkRegCompleteHandler@p,w
  8698  0EC2  3E02               	addlw	2
  8699  0EC3  0086               	movwf	6
  8700  0EC4  0187               	clrf	7
  8701  0EC5  0801               	movf	1,w
  8702  0EC6  00A2               	movwf	i2c_setBuffer@buffer
  8703  0EC7  3000               	movlw	0
  8704  0EC8  00A3               	movwf	i2c_setBuffer@buffer+1
  8705  0EC9  082B               	movf	rdBlkRegCompleteHandler@p,w
  8706  0ECA  0086               	movwf	6
  8707  0ECB  0187               	clrf	7
  8708  0ECC  3F40               	moviw [0]fsr1
  8709  0ECD  00A4               	movwf	i2c_setBuffer@bufferSize
  8710  0ECE  3F41               	moviw [1]fsr1
  8711  0ECF  00A5               	movwf	i2c_setBuffer@bufferSize+1
  8712  0ED0  318D  25C8  318E   	fcall	_i2c_setBuffer
  8713                           
  8714                           ;i2c_simple_master.c: 137: i2c_setDataCompleteCallback((0),(0));
  8715  0ED3  3000               	movlw	0
  8716  0ED4  0020               	movlb	0	; select bank0
  8717  0ED5  00A7               	movwf	i2c_setDataCompleteCallback@cb
  8718  0ED6  00A8               	movwf	i2c_setDataCompleteCallback@cb+1
  8719  0ED7  01A9               	clrf	i2c_setDataCompleteCallback@p
  8720  0ED8  318D  253B         	fcall	_i2c_setDataCompleteCallback
  8721                           
  8722                           ;i2c_simple_master.c: 138: return i2c_restart_read;
  8723  0EDA  3002               	movlw	2
  8724  0EDB  0008               	return
  8725  0EDC                     __end_of_rdBlkRegCompleteHandler:	
  8726                           
  8727                           	psect	text49
  8728  0E63                     __ptext49:	
  8729 ;; *************** function _rd2RegCompleteHandler *****************
  8730 ;; Defined at:
  8731 ;;		line 87 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  8732 ;; Parameters:    Size  Location     Type
  8733 ;;  p               1   11[BANK0 ] PTR void 
  8734 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  8735 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  8736 ;; Auto vars:     Size  Location     Type
  8737 ;;		None
  8738 ;; Return value:  Size  Location     Type
  8739 ;;                  1    wreg      enum E97
  8740 ;; Registers used:
  8741 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8742 ;; Tracked objects:
  8743 ;;		On entry : 0/0
  8744 ;;		On exit  : 0/0
  8745 ;;		Unchanged: 0/0
  8746 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8747 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8748 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8749 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8750 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8751 ;;Total ram usage:        1 bytes
  8752 ;; Hardware stack levels used:    1
  8753 ;; Hardware stack levels required when called:    8
  8754 ;; This function calls:
  8755 ;;		_i2c_setBuffer
  8756 ;;		_i2c_setDataCompleteCallback
  8757 ;; This function is called by:
  8758 ;;		_i2c_read2ByteRegister
  8759 ;;		_do_I2C_DO_ADDRESS_NACK
  8760 ;;		_do_I2C_TX
  8761 ;;		_do_I2C_RX
  8762 ;;		_do_I2C_TX_EMPTY
  8763 ;;		i1_do_I2C_DO_ADDRESS_NACK
  8764 ;;		i1_do_I2C_TX
  8765 ;;		i1_do_I2C_RX
  8766 ;;		i1_do_I2C_TX_EMPTY
  8767 ;; This function uses a non-reentrant model
  8768 ;;
  8769                           
  8770                           
  8771                           ;psect for function _rd2RegCompleteHandler
  8772  0E63                     _rd2RegCompleteHandler:	
  8773                           
  8774                           ;Skip over the trampoline to the duplicate function for level 1
  8775  0E63  1C7E               	btfss	126,0
  8776  0E64  2E67               	goto	l3839
  8777  0E65  318D  2DB3         	ljmp	i1l3151
  8778  0E67                     _rd2RegCompleteHandler$intlevel0:	
  8779  0E67                     l3839:	
  8780                           ;incstack = 0
  8781                           ; Regs used in _rd2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8782                           
  8783                           
  8784                           ;i2c_simple_master.c: 89: i2c_setBuffer(p,2);
  8785  0E67  0020               	movlb	0	; select bank0
  8786  0E68  082B               	movf	rd2RegCompleteHandler@p,w
  8787  0E69  00A2               	movwf	i2c_setBuffer@buffer
  8788  0E6A  39FF               	andlw	255
  8789  0E6B  1D03               	skipz
  8790  0E6C  3000               	movlw	0
  8791  0E6D  00A3               	movwf	i2c_setBuffer@buffer+1
  8792  0E6E  3002               	movlw	2
  8793  0E6F  00A4               	movwf	i2c_setBuffer@bufferSize
  8794  0E70  3000               	movlw	0
  8795  0E71  00A5               	movwf	i2c_setBuffer@bufferSize+1
  8796  0E72  318D  25C8  318E   	fcall	_i2c_setBuffer
  8797                           
  8798                           ;i2c_simple_master.c: 90: i2c_setDataCompleteCallback((0),(0));
  8799  0E75  3000               	movlw	0
  8800  0E76  0020               	movlb	0	; select bank0
  8801  0E77  00A7               	movwf	i2c_setDataCompleteCallback@cb
  8802  0E78  00A8               	movwf	i2c_setDataCompleteCallback@cb+1
  8803  0E79  01A9               	clrf	i2c_setDataCompleteCallback@p
  8804  0E7A  318D  253B         	fcall	_i2c_setDataCompleteCallback
  8805                           
  8806                           ;i2c_simple_master.c: 91: return i2c_restart_read;
  8807  0E7C  3002               	movlw	2
  8808  0E7D  0008               	return
  8809  0E7E                     __end_of_rd2RegCompleteHandler:	
  8810                           
  8811                           	psect	text50
  8812  0E48                     __ptext50:	
  8813 ;; *************** function _rd1RegCompleteHandler *****************
  8814 ;; Defined at:
  8815 ;;		line 58 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  8816 ;; Parameters:    Size  Location     Type
  8817 ;;  p               1   11[BANK0 ] PTR void 
  8818 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  8819 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  8820 ;; Auto vars:     Size  Location     Type
  8821 ;;		None
  8822 ;; Return value:  Size  Location     Type
  8823 ;;                  1    wreg      enum E97
  8824 ;; Registers used:
  8825 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8826 ;; Tracked objects:
  8827 ;;		On entry : 0/0
  8828 ;;		On exit  : 0/0
  8829 ;;		Unchanged: 0/0
  8830 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8831 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8832 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8833 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8834 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8835 ;;Total ram usage:        1 bytes
  8836 ;; Hardware stack levels used:    1
  8837 ;; Hardware stack levels required when called:    8
  8838 ;; This function calls:
  8839 ;;		_i2c_setBuffer
  8840 ;;		_i2c_setDataCompleteCallback
  8841 ;; This function is called by:
  8842 ;;		_i2c_read1ByteRegister
  8843 ;;		_do_I2C_DO_ADDRESS_NACK
  8844 ;;		_do_I2C_TX
  8845 ;;		_do_I2C_RX
  8846 ;;		_do_I2C_TX_EMPTY
  8847 ;;		i1_do_I2C_DO_ADDRESS_NACK
  8848 ;;		i1_do_I2C_TX
  8849 ;;		i1_do_I2C_RX
  8850 ;;		i1_do_I2C_TX_EMPTY
  8851 ;; This function uses a non-reentrant model
  8852 ;;
  8853                           
  8854                           
  8855                           ;psect for function _rd1RegCompleteHandler
  8856  0E48                     _rd1RegCompleteHandler:	
  8857                           
  8858                           ;Skip over the trampoline to the duplicate function for level 1
  8859  0E48  1C7E               	btfss	126,0
  8860  0E49  2E4C               	goto	l3831
  8861  0E4A  318D  2D9E         	ljmp	i1l3143
  8862  0E4C                     _rd1RegCompleteHandler$intlevel0:	
  8863  0E4C                     l3831:	
  8864                           ;incstack = 0
  8865                           ; Regs used in _rd1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8866                           
  8867                           
  8868                           ;i2c_simple_master.c: 60: i2c_setBuffer(p,1);
  8869  0E4C  0020               	movlb	0	; select bank0
  8870  0E4D  082B               	movf	rd1RegCompleteHandler@p,w
  8871  0E4E  00A2               	movwf	i2c_setBuffer@buffer
  8872  0E4F  39FF               	andlw	255
  8873  0E50  1D03               	skipz
  8874  0E51  3000               	movlw	0
  8875  0E52  00A3               	movwf	i2c_setBuffer@buffer+1
  8876  0E53  3001               	movlw	1
  8877  0E54  00A4               	movwf	i2c_setBuffer@bufferSize
  8878  0E55  3000               	movlw	0
  8879  0E56  00A5               	movwf	i2c_setBuffer@bufferSize+1
  8880  0E57  318D  25C8  318E   	fcall	_i2c_setBuffer
  8881                           
  8882                           ;i2c_simple_master.c: 61: i2c_setDataCompleteCallback((0),(0));
  8883  0E5A  3000               	movlw	0
  8884  0E5B  0020               	movlb	0	; select bank0
  8885  0E5C  00A7               	movwf	i2c_setDataCompleteCallback@cb
  8886  0E5D  00A8               	movwf	i2c_setDataCompleteCallback@cb+1
  8887  0E5E  01A9               	clrf	i2c_setDataCompleteCallback@p
  8888  0E5F  318D  253B         	fcall	_i2c_setDataCompleteCallback
  8889                           
  8890                           ;i2c_simple_master.c: 62: return i2c_restart_read;
  8891  0E61  3002               	movlw	2
  8892  0E62  0008               	return
  8893  0E63                     __end_of_rd1RegCompleteHandler:	
  8894                           
  8895                           	psect	text51
  8896  0E2D                     __ptext51:	
  8897 ;; *************** function _wr1RegCompleteHandler *****************
  8898 ;; Defined at:
  8899 ;;		line 31 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  8900 ;; Parameters:    Size  Location     Type
  8901 ;;  p               1   11[BANK0 ] PTR void 
  8902 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  8903 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  8904 ;; Auto vars:     Size  Location     Type
  8905 ;;		None
  8906 ;; Return value:  Size  Location     Type
  8907 ;;                  1    wreg      enum E97
  8908 ;; Registers used:
  8909 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8910 ;; Tracked objects:
  8911 ;;		On entry : 0/0
  8912 ;;		On exit  : 0/0
  8913 ;;		Unchanged: 0/0
  8914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8915 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8916 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8917 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8918 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8919 ;;Total ram usage:        1 bytes
  8920 ;; Hardware stack levels used:    1
  8921 ;; Hardware stack levels required when called:    8
  8922 ;; This function calls:
  8923 ;;		_i2c_setBuffer
  8924 ;;		_i2c_setDataCompleteCallback
  8925 ;; This function is called by:
  8926 ;;		_i2c_write1ByteRegister
  8927 ;;		_do_I2C_DO_ADDRESS_NACK
  8928 ;;		_do_I2C_TX
  8929 ;;		_do_I2C_RX
  8930 ;;		_do_I2C_TX_EMPTY
  8931 ;;		i1_do_I2C_DO_ADDRESS_NACK
  8932 ;;		i1_do_I2C_TX
  8933 ;;		i1_do_I2C_RX
  8934 ;;		i1_do_I2C_TX_EMPTY
  8935 ;; This function uses a non-reentrant model
  8936 ;;
  8937                           
  8938                           
  8939                           ;psect for function _wr1RegCompleteHandler
  8940  0E2D                     _wr1RegCompleteHandler:	
  8941                           
  8942                           ;Skip over the trampoline to the duplicate function for level 1
  8943  0E2D  1C7E               	btfss	126,0
  8944  0E2E  2E31               	goto	l3823
  8945  0E2F  318D  2D89         	ljmp	i1l3135
  8946  0E31                     _wr1RegCompleteHandler$intlevel0:	
  8947  0E31                     l3823:	
  8948                           ;incstack = 0
  8949                           ; Regs used in _wr1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8950                           
  8951                           
  8952                           ;i2c_simple_master.c: 33: i2c_setBuffer(p,1);
  8953  0E31  0020               	movlb	0	; select bank0
  8954  0E32  082B               	movf	wr1RegCompleteHandler@p,w
  8955  0E33  00A2               	movwf	i2c_setBuffer@buffer
  8956  0E34  39FF               	andlw	255
  8957  0E35  1D03               	skipz
  8958  0E36  3000               	movlw	0
  8959  0E37  00A3               	movwf	i2c_setBuffer@buffer+1
  8960  0E38  3001               	movlw	1
  8961  0E39  00A4               	movwf	i2c_setBuffer@bufferSize
  8962  0E3A  3000               	movlw	0
  8963  0E3B  00A5               	movwf	i2c_setBuffer@bufferSize+1
  8964  0E3C  318D  25C8  318E   	fcall	_i2c_setBuffer
  8965                           
  8966                           ;i2c_simple_master.c: 34: i2c_setDataCompleteCallback((0),(0));
  8967  0E3F  3000               	movlw	0
  8968  0E40  0020               	movlb	0	; select bank0
  8969  0E41  00A7               	movwf	i2c_setDataCompleteCallback@cb
  8970  0E42  00A8               	movwf	i2c_setDataCompleteCallback@cb+1
  8971  0E43  01A9               	clrf	i2c_setDataCompleteCallback@p
  8972  0E44  318D  253B         	fcall	_i2c_setDataCompleteCallback
  8973                           
  8974                           ;i2c_simple_master.c: 35: return i2c_continue;
  8975  0E46  3004               	movlw	4
  8976  0E47  0008               	return
  8977  0E48                     __end_of_wr1RegCompleteHandler:	
  8978                           
  8979                           	psect	text52
  8980  0C06                     __ptext52:	
  8981 ;; *************** function _i2c_restartWrite *****************
  8982 ;; Defined at:
  8983 ;;		line 35 in file "mcc_generated_files/drivers/i2c_types.c"
  8984 ;; Parameters:    Size  Location     Type
  8985 ;;  p               1   11[BANK0 ] PTR void 
  8986 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  8987 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  8988 ;; Auto vars:     Size  Location     Type
  8989 ;;		None
  8990 ;; Return value:  Size  Location     Type
  8991 ;;                  1    wreg      enum E97
  8992 ;; Registers used:
  8993 ;;		wreg
  8994 ;; Tracked objects:
  8995 ;;		On entry : 0/0
  8996 ;;		On exit  : 0/0
  8997 ;;		Unchanged: 0/0
  8998 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8999 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9000 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9001 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9002 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9003 ;;Total ram usage:        1 bytes
  9004 ;; Hardware stack levels used:    1
  9005 ;; Hardware stack levels required when called:    6
  9006 ;; This function calls:
  9007 ;;		Nothing
  9008 ;; This function is called by:
  9009 ;;		_i2c_writeNBytes
  9010 ;;		_i2c_write1ByteRegister
  9011 ;;		_i2c_read1ByteRegister
  9012 ;;		_i2c_read2ByteRegister
  9013 ;;		_i2c_write2ByteRegister
  9014 ;;		_i2c_readDataBlock
  9015 ;;		_do_I2C_DO_ADDRESS_NACK
  9016 ;;		_do_I2C_TX
  9017 ;;		_do_I2C_RX
  9018 ;;		_do_I2C_TX_EMPTY
  9019 ;;		i1_do_I2C_DO_ADDRESS_NACK
  9020 ;;		i1_do_I2C_TX
  9021 ;;		i1_do_I2C_RX
  9022 ;;		i1_do_I2C_TX_EMPTY
  9023 ;; This function uses a non-reentrant model
  9024 ;;
  9025                           
  9026                           
  9027                           ;psect for function _i2c_restartWrite
  9028  0C06                     _i2c_restartWrite:	
  9029                           
  9030                           ;Skip over the trampoline to the duplicate function for level 1
  9031  0C06  1C7E               	btfss	126,0
  9032  0C07  2C0A               	goto	l3905
  9033  0C08  3180  2802         	ljmp	i1l3217
  9034  0C0A                     _i2c_restartWrite$intlevel0:	
  9035  0C0A                     l3905:	
  9036                           ;incstack = 0
  9037                           ; Regs used in _i2c_restartWrite: [wreg]
  9038                           
  9039                           
  9040                           ;i2c_types.c: 37: return i2c_restart_write;
  9041  0C0A  3003               	movlw	3
  9042  0C0B  0008               	return
  9043  0C0C                     __end_of_i2c_restartWrite:	
  9044                           
  9045                           	psect	text53
  9046  0E12                     __ptext53:	
  9047 ;; *************** function _wr2RegCompleteHandler *****************
  9048 ;; Defined at:
  9049 ;;		line 110 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  9050 ;; Parameters:    Size  Location     Type
  9051 ;;  p               1   11[BANK0 ] PTR void 
  9052 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  9053 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  9054 ;; Auto vars:     Size  Location     Type
  9055 ;;		None
  9056 ;; Return value:  Size  Location     Type
  9057 ;;                  1    wreg      enum E97
  9058 ;; Registers used:
  9059 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9060 ;; Tracked objects:
  9061 ;;		On entry : 0/0
  9062 ;;		On exit  : 0/0
  9063 ;;		Unchanged: 0/0
  9064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9065 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9066 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9068 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9069 ;;Total ram usage:        1 bytes
  9070 ;; Hardware stack levels used:    1
  9071 ;; Hardware stack levels required when called:    8
  9072 ;; This function calls:
  9073 ;;		_i2c_setBuffer
  9074 ;;		_i2c_setDataCompleteCallback
  9075 ;; This function is called by:
  9076 ;;		_i2c_write2ByteRegister
  9077 ;;		_do_I2C_DO_ADDRESS_NACK
  9078 ;;		_do_I2C_TX
  9079 ;;		_do_I2C_RX
  9080 ;;		_do_I2C_TX_EMPTY
  9081 ;;		i1_do_I2C_DO_ADDRESS_NACK
  9082 ;;		i1_do_I2C_TX
  9083 ;;		i1_do_I2C_RX
  9084 ;;		i1_do_I2C_TX_EMPTY
  9085 ;; This function uses a non-reentrant model
  9086 ;;
  9087                           
  9088                           
  9089                           ;psect for function _wr2RegCompleteHandler
  9090  0E12                     _wr2RegCompleteHandler:	
  9091                           
  9092                           ;Skip over the trampoline to the duplicate function for level 1
  9093  0E12  1C7E               	btfss	126,0
  9094  0E13  2E16               	goto	l3847
  9095  0E14  318D  2D74         	ljmp	i1l3159
  9096  0E16                     _wr2RegCompleteHandler$intlevel0:	
  9097  0E16                     l3847:	
  9098                           ;incstack = 0
  9099                           ; Regs used in _wr2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  9100                           
  9101                           
  9102                           ;i2c_simple_master.c: 112: i2c_setBuffer(p,2);
  9103  0E16  0020               	movlb	0	; select bank0
  9104  0E17  082B               	movf	wr2RegCompleteHandler@p,w
  9105  0E18  00A2               	movwf	i2c_setBuffer@buffer
  9106  0E19  39FF               	andlw	255
  9107  0E1A  1D03               	skipz
  9108  0E1B  3000               	movlw	0
  9109  0E1C  00A3               	movwf	i2c_setBuffer@buffer+1
  9110  0E1D  3002               	movlw	2
  9111  0E1E  00A4               	movwf	i2c_setBuffer@bufferSize
  9112  0E1F  3000               	movlw	0
  9113  0E20  00A5               	movwf	i2c_setBuffer@bufferSize+1
  9114  0E21  318D  25C8  318E   	fcall	_i2c_setBuffer
  9115                           
  9116                           ;i2c_simple_master.c: 113: i2c_setDataCompleteCallback((0),(0));
  9117  0E24  3000               	movlw	0
  9118  0E25  0020               	movlb	0	; select bank0
  9119  0E26  00A7               	movwf	i2c_setDataCompleteCallback@cb
  9120  0E27  00A8               	movwf	i2c_setDataCompleteCallback@cb+1
  9121  0E28  01A9               	clrf	i2c_setDataCompleteCallback@p
  9122  0E29  318D  253B         	fcall	_i2c_setDataCompleteCallback
  9123                           
  9124                           ;i2c_simple_master.c: 114: return i2c_continue;
  9125  0E2B  3004               	movlw	4
  9126  0E2C  0008               	return
  9127  0E2D                     __end_of_wr2RegCompleteHandler:	
  9128                           
  9129                           	psect	text54
  9130  0D3B                     __ptext54:	
  9131 ;; *************** function _i2c_setDataCompleteCallback *****************
  9132 ;; Defined at:
  9133 ;;		line 89 in file "mcc_generated_files/drivers/i2c_master.c"
  9134 ;; Parameters:    Size  Location     Type
  9135 ;;  cb              2    7[BANK0 ] PTR FTN(PTR void ,)enum 
  9136 ;;		 -> rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), rd2RegCompleteHandler(1), rd1RegCompleteHandler(1), 
  9137 ;;		 -> wr1RegCompleteHandler(1), Absolute function(1), 
  9138 ;;  p               1    9[BANK0 ] PTR void 
  9139 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  9140 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  9141 ;; Auto vars:     Size  Location     Type
  9142 ;;		None
  9143 ;; Return value:  Size  Location     Type
  9144 ;;                  1    wreg      void 
  9145 ;; Registers used:
  9146 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9147 ;; Tracked objects:
  9148 ;;		On entry : 0/0
  9149 ;;		On exit  : 0/0
  9150 ;;		Unchanged: 0/0
  9151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9152 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9153 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9154 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9155 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9156 ;;Total ram usage:        4 bytes
  9157 ;; Hardware stack levels used:    1
  9158 ;; Hardware stack levels required when called:    7
  9159 ;; This function calls:
  9160 ;;		_setCallBack
  9161 ;; This function is called by:
  9162 ;;		_wr1RegCompleteHandler
  9163 ;;		_rd1RegCompleteHandler
  9164 ;;		_rd2RegCompleteHandler
  9165 ;;		_wr2RegCompleteHandler
  9166 ;;		_rdBlkRegCompleteHandler
  9167 ;;		_i2c_write1ByteRegister
  9168 ;;		_i2c_read1ByteRegister
  9169 ;;		_i2c_read2ByteRegister
  9170 ;;		_i2c_write2ByteRegister
  9171 ;;		_i2c_readDataBlock
  9172 ;; This function uses a non-reentrant model
  9173 ;;
  9174                           
  9175                           
  9176                           ;psect for function _i2c_setDataCompleteCallback
  9177  0D3B                     _i2c_setDataCompleteCallback:	
  9178                           
  9179                           ;i2c_master.c: 91: setCallBack(i2c_dataComplete,cb,p);
  9180                           
  9181                           ;incstack = 0
  9182                           ; Regs used in _i2c_setDataCompleteCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  9183  0D3B  0020               	movlb	0	; select bank0
  9184  0D3C  0828               	movf	i2c_setDataCompleteCallback@cb+1,w
  9185  0D3D  00A3               	movwf	setCallBack@cb+1
  9186  0D3E  0827               	movf	i2c_setDataCompleteCallback@cb,w
  9187  0D3F  00A2               	movwf	setCallBack@cb
  9188  0D40  0829               	movf	i2c_setDataCompleteCallback@p,w
  9189  0D41  00AA               	movwf	??_i2c_setDataCompleteCallback
  9190  0D42  082A               	movf	??_i2c_setDataCompleteCallback,w
  9191  0D43  00A4               	movwf	setCallBack@p
  9192  0D44  3000               	movlw	0
  9193  0D45  318F  2789         	fcall	_setCallBack
  9194  0D47  0008               	return
  9195  0D48                     __end_of_i2c_setDataCompleteCallback:	
  9196                           
  9197                           	psect	text55
  9198  0F89                     __ptext55:	
  9199 ;; *************** function _setCallBack *****************
  9200 ;; Defined at:
  9201 ;;		line 453 in file "mcc_generated_files/drivers/i2c_master.c"
  9202 ;; Parameters:    Size  Location     Type
  9203 ;;  idx             1    wreg     enum E12355
  9204 ;;  cb              2    2[BANK0 ] PTR FTN(PTR void ,)enum 
  9205 ;;		 -> rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), rd2RegCompleteHandler(1), rd1RegCompleteHandler(1), 
  9206 ;;		 -> i2c_restartWrite(1), wr1RegCompleteHandler(1), Absolute function(1), 
  9207 ;;  p               1    4[BANK0 ] PTR void 
  9208 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  9209 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  9210 ;; Auto vars:     Size  Location     Type
  9211 ;;  idx             1    6[BANK0 ] enum E12355
  9212 ;; Return value:  Size  Location     Type
  9213 ;;                  1    wreg      void 
  9214 ;; Registers used:
  9215 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9216 ;; Tracked objects:
  9217 ;;		On entry : 0/0
  9218 ;;		On exit  : 0/0
  9219 ;;		Unchanged: 0/0
  9220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9221 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9222 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9223 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9224 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9225 ;;Total ram usage:        5 bytes
  9226 ;; Hardware stack levels used:    1
  9227 ;; Hardware stack levels required when called:    6
  9228 ;; This function calls:
  9229 ;;		Nothing
  9230 ;; This function is called by:
  9231 ;;		_i2c_setDataCompleteCallback
  9232 ;;		_i2c_setAddressNACKCallback
  9233 ;;		_i2c_setWriteCollisionCallback
  9234 ;;		_i2c_setDataNACKCallback
  9235 ;;		_i2c_setTimeOutCallback
  9236 ;; This function uses a non-reentrant model
  9237 ;;
  9238                           
  9239                           
  9240                           ;psect for function _setCallBack
  9241  0F89                     _setCallBack:	
  9242                           
  9243                           ;incstack = 0
  9244                           ; Regs used in _setCallBack: [wreg+fsr1l+fsr1h+status,2+status,0]
  9245                           ;setCallBack@idx stored from wreg
  9246  0F89  0020               	movlb	0	; select bank0
  9247  0F8A  00A6               	movwf	setCallBack@idx
  9248                           
  9249                           ;i2c_master.c: 455: if(cb)
  9250  0F8B  0822               	movf	setCallBack@cb,w
  9251  0F8C  0423               	iorwf	setCallBack@cb+1,w
  9252  0F8D  1903               	btfsc	3,2
  9253  0F8E  2FA0               	goto	l3791
  9254                           
  9255                           ;i2c_master.c: 456: {
  9256                           ;i2c_master.c: 457: i2c_status.callbackTable[idx] = cb;
  9257  0F8F  3526               	lslf	setCallBack@idx,w
  9258  0F90  3EAC               	addlw	(low ((_i2c_status| 0+12)))& (0+255)
  9259  0F91  0086               	movwf	6
  9260  0F92  0187               	clrf	7
  9261  0F93  0822               	movf	setCallBack@cb,w
  9262  0F94  3FC0               	movwi [0]fsr1
  9263  0F95  0823               	movf	setCallBack@cb+1,w
  9264  0F96  3FC1               	movwi [1]fsr1
  9265                           
  9266                           ;i2c_master.c: 458: i2c_status.callbackPayload[idx] = p;
  9267  0F97  0824               	movf	setCallBack@p,w
  9268  0F98  00A5               	movwf	??_setCallBack
  9269  0F99  0826               	movf	setCallBack@idx,w
  9270  0F9A  3EB8               	addlw	(low ((_i2c_status| 0+24)))& (0+255)
  9271  0F9B  0086               	movwf	6
  9272  0F9C  0187               	clrf	7
  9273  0F9D  0825               	movf	??_setCallBack,w
  9274  0F9E  0081               	movwf	1
  9275                           
  9276                           ;i2c_master.c: 459: }
  9277  0F9F  0008               	return
  9278  0FA0                     l3791:	
  9279                           
  9280                           ;i2c_master.c: 460: else
  9281                           ;i2c_master.c: 461: {
  9282                           ;i2c_master.c: 462: i2c_status.callbackTable[idx] = returnStop;
  9283  0FA0  3526               	lslf	setCallBack@idx,w
  9284  0FA1  3EAC               	addlw	(low ((_i2c_status| 0+12)))& (0+255)
  9285  0FA2  0086               	movwf	6
  9286  0FA3  0187               	clrf	7
  9287  0FA4  300C               	movlw	low _returnStop
  9288  0FA5  3FC0               	movwi [0]fsr1
  9289  0FA6  300C               	movlw	high _returnStop
  9290  0FA7  3FC1               	movwi [1]fsr1
  9291                           
  9292                           ;i2c_master.c: 463: i2c_status.callbackPayload[idx] = (0);
  9293  0FA8  0826               	movf	setCallBack@idx,w
  9294  0FA9  3EB8               	addlw	(low ((_i2c_status| 0+24)))& (0+255)
  9295  0FAA  0086               	movwf	6
  9296  0FAB  0187               	clrf	7
  9297  0FAC  0181               	clrf	1
  9298  0FAD  0008               	return
  9299  0FAE                     __end_of_setCallBack:	
  9300                           
  9301                           	psect	text56
  9302  0DC8                     __ptext56:	
  9303 ;; *************** function _i2c_setBuffer *****************
  9304 ;; Defined at:
  9305 ;;		line 184 in file "mcc_generated_files/drivers/i2c_master.c"
  9306 ;; Parameters:    Size  Location     Type
  9307 ;;  buffer          2    2[BANK0 ] PTR void 
  9308 ;;		 -> i2c_readDataBlock@reg(1), i2c_readDataBlock@d(3), i2c_write2ByteRegister@reg(1), i2c_write2ByteRegister@data(2),
      + 
  9309 ;;		 -> i2c_read2ByteRegister@reg(1), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@reg(1), i2c_read1ByteRegist
      +er@d2(1), 
  9310 ;;		 -> i2c_write1ByteRegister@reg(1), i2c_write1ByteRegister@data(1), NULL(0), writebuffer(17), 
  9311 ;;  bufferSize      2    4[BANK0 ] unsigned int 
  9312 ;; Auto vars:     Size  Location     Type
  9313 ;;		None
  9314 ;; Return value:  Size  Location     Type
  9315 ;;                  1    wreg      void 
  9316 ;; Registers used:
  9317 ;;		wreg
  9318 ;; Tracked objects:
  9319 ;;		On entry : 0/0
  9320 ;;		On exit  : 0/0
  9321 ;;		Unchanged: 0/0
  9322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9323 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9324 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9325 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9326 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9327 ;;Total ram usage:        4 bytes
  9328 ;; Hardware stack levels used:    1
  9329 ;; Hardware stack levels required when called:    6
  9330 ;; This function calls:
  9331 ;;		Nothing
  9332 ;; This function is called by:
  9333 ;;		_wr1RegCompleteHandler
  9334 ;;		_i2c_writeNBytes
  9335 ;;		_rd1RegCompleteHandler
  9336 ;;		_rd2RegCompleteHandler
  9337 ;;		_wr2RegCompleteHandler
  9338 ;;		_rdBlkRegCompleteHandler
  9339 ;;		_i2c_write1ByteRegister
  9340 ;;		_i2c_read1ByteRegister
  9341 ;;		_i2c_read2ByteRegister
  9342 ;;		_i2c_write2ByteRegister
  9343 ;;		_i2c_readDataBlock
  9344 ;;		_i2c_readNBytes
  9345 ;; This function uses a non-reentrant model
  9346 ;;
  9347                           
  9348                           
  9349                           ;psect for function _i2c_setBuffer
  9350  0DC8                     _i2c_setBuffer:	
  9351                           
  9352                           ;i2c_master.c: 186: if(i2c_status.bufferFree)
  9353                           
  9354                           ;incstack = 0
  9355                           ; Regs used in _i2c_setBuffer: [wreg]
  9356  0DC8  0021               	movlb	1	; select bank1
  9357  0DC9  1D20               	btfss	_i2c_status^(0+128),2
  9358  0DCA  0008               	return
  9359                           
  9360                           ;i2c_master.c: 187: {
  9361                           ;i2c_master.c: 188: i2c_status.data_ptr = buffer;
  9362  0DCB  0020               	movlb	0	; select bank0
  9363  0DCC  0823               	movf	i2c_setBuffer@buffer+1,w
  9364  0DCD  0021               	movlb	1	; select bank1
  9365  0DCE  00A3               	movwf	((low ((_i2c_status| 0+2))+1))^(0+128)
  9366  0DCF  0020               	movlb	0	; select bank0
  9367  0DD0  0822               	movf	i2c_setBuffer@buffer,w
  9368  0DD1  0021               	movlb	1	; select bank1
  9369  0DD2  00A2               	movwf	(low ((_i2c_status| 0+2)))^(0+128)
  9370                           
  9371                           ;i2c_master.c: 189: i2c_status.data_length = bufferSize;
  9372  0DD3  0020               	movlb	0	; select bank0
  9373  0DD4  0825               	movf	i2c_setBuffer@bufferSize+1,w
  9374  0DD5  0021               	movlb	1	; select bank1
  9375  0DD6  00A5               	movwf	((_i2c_status+1)^(0+128)+4)
  9376  0DD7  0020               	movlb	0	; select bank0
  9377  0DD8  0824               	movf	i2c_setBuffer@bufferSize,w
  9378  0DD9  0021               	movlb	1	; select bank1
  9379  0DDA  00A4               	movwf	(_i2c_status^(0+128)+4)
  9380                           
  9381                           ;i2c_master.c: 190: i2c_status.bufferFree = 0;
  9382  0DDB  1120               	bcf	_i2c_status^(0+128),2
  9383  0DDC  0008               	return
  9384  0DDD                     __end_of_i2c_setBuffer:	
  9385                           
  9386                           	psect	text57
  9387  0BA9                     __ptext57:	
  9388 ;; *************** function _i2c_driver_stop *****************
  9389 ;; Defined at:
  9390 ;;		line 156 in file "mcc_generated_files/i2c_driver.c"
  9391 ;; Parameters:    Size  Location     Type
  9392 ;;		None
  9393 ;; Auto vars:     Size  Location     Type
  9394 ;;		None
  9395 ;; Return value:  Size  Location     Type
  9396 ;;                  1    wreg      void 
  9397 ;; Registers used:
  9398 ;;		None
  9399 ;; Tracked objects:
  9400 ;;		On entry : 0/0
  9401 ;;		On exit  : 0/0
  9402 ;;		Unchanged: 0/0
  9403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9405 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9406 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9407 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9408 ;;Total ram usage:        0 bytes
  9409 ;; Hardware stack levels used:    1
  9410 ;; Hardware stack levels required when called:    6
  9411 ;; This function calls:
  9412 ;;		Nothing
  9413 ;; This function is called by:
  9414 ;;		_do_I2C_SEND_STOP
  9415 ;; This function uses a non-reentrant model
  9416 ;;
  9417                           
  9418                           
  9419                           ;psect for function _i2c_driver_stop
  9420  0BA9                     _i2c_driver_stop:	
  9421                           
  9422                           ;i2c_driver.c: 158: SSP1CON2bits.PEN = 1;
  9423                           
  9424                           ;incstack = 0
  9425                           ; Regs used in _i2c_driver_stop: []
  9426  0BA9  0024               	movlb	4	; select bank4
  9427  0BAA  1516               	bsf	22,2	;volatile
  9428  0BAB  0008               	return
  9429  0BAC                     __end_of_i2c_driver_stop:	
  9430                           
  9431                           	psect	text58
  9432  0BA6                     __ptext58:	
  9433 ;; *************** function _i2c_driver_restart *****************
  9434 ;; Defined at:
  9435 ;;		line 151 in file "mcc_generated_files/i2c_driver.c"
  9436 ;; Parameters:    Size  Location     Type
  9437 ;;		None
  9438 ;; Auto vars:     Size  Location     Type
  9439 ;;		None
  9440 ;; Return value:  Size  Location     Type
  9441 ;;                  1    wreg      void 
  9442 ;; Registers used:
  9443 ;;		None
  9444 ;; Tracked objects:
  9445 ;;		On entry : 0/0
  9446 ;;		On exit  : 0/0
  9447 ;;		Unchanged: 0/0
  9448 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9449 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9450 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9451 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9452 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9453 ;;Total ram usage:        0 bytes
  9454 ;; Hardware stack levels used:    1
  9455 ;; Hardware stack levels required when called:    6
  9456 ;; This function calls:
  9457 ;;		Nothing
  9458 ;; This function is called by:
  9459 ;;		_do_I2C_SEND_RESTART_READ
  9460 ;;		_do_I2C_SEND_RESTART_WRITE
  9461 ;;		_do_I2C_SEND_RESTART
  9462 ;; This function uses a non-reentrant model
  9463 ;;
  9464                           
  9465                           
  9466                           ;psect for function _i2c_driver_restart
  9467  0BA6                     _i2c_driver_restart:	
  9468                           
  9469                           ;i2c_driver.c: 153: SSP1CON2bits.RSEN = 1;
  9470                           
  9471                           ;incstack = 0
  9472                           ; Regs used in _i2c_driver_restart: []
  9473  0BA6  0024               	movlb	4	; select bank4
  9474  0BA7  1496               	bsf	22,1	;volatile
  9475  0BA8  0008               	return
  9476  0BA9                     __end_of_i2c_driver_restart:	
  9477                           
  9478                           	psect	text59
  9479  0BD9                     __ptext59:	
  9480 ;; *************** function _i2c_driver_sendACK *****************
  9481 ;; Defined at:
  9482 ;;		line 196 in file "mcc_generated_files/i2c_driver.c"
  9483 ;; Parameters:    Size  Location     Type
  9484 ;;		None
  9485 ;; Auto vars:     Size  Location     Type
  9486 ;;		None
  9487 ;; Return value:  Size  Location     Type
  9488 ;;                  1    wreg      void 
  9489 ;; Registers used:
  9490 ;;		None
  9491 ;; Tracked objects:
  9492 ;;		On entry : 0/0
  9493 ;;		On exit  : 0/0
  9494 ;;		Unchanged: 0/0
  9495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9496 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9497 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9498 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9499 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9500 ;;Total ram usage:        0 bytes
  9501 ;; Hardware stack levels used:    1
  9502 ;; Hardware stack levels required when called:    6
  9503 ;; This function calls:
  9504 ;;		Nothing
  9505 ;; This function is called by:
  9506 ;;		_do_I2C_DO_ACK
  9507 ;;		_do_I2C_RX
  9508 ;; This function uses a non-reentrant model
  9509 ;;
  9510                           
  9511                           
  9512                           ;psect for function _i2c_driver_sendACK
  9513  0BD9                     _i2c_driver_sendACK:	
  9514                           
  9515                           ;i2c_driver.c: 198: SSP1CON2bits.ACKDT = 0;
  9516                           
  9517                           ;incstack = 0
  9518                           ; Regs used in _i2c_driver_sendACK: []
  9519  0BD9  0024               	movlb	4	; select bank4
  9520  0BDA  1296               	bcf	22,5	;volatile
  9521                           
  9522                           ;i2c_driver.c: 199: SSP1CON2bits.ACKEN = 1;
  9523  0BDB  1616               	bsf	22,4	;volatile
  9524  0BDC  0008               	return
  9525  0BDD                     __end_of_i2c_driver_sendACK:	
  9526                           
  9527                           	psect	text60
  9528  0BA3                     __ptext60:	
  9529 ;; *************** function _i2c_driver_start *****************
  9530 ;; Defined at:
  9531 ;;		line 146 in file "mcc_generated_files/i2c_driver.c"
  9532 ;; Parameters:    Size  Location     Type
  9533 ;;		None
  9534 ;; Auto vars:     Size  Location     Type
  9535 ;;		None
  9536 ;; Return value:  Size  Location     Type
  9537 ;;                  1    wreg      void 
  9538 ;; Registers used:
  9539 ;;		None
  9540 ;; Tracked objects:
  9541 ;;		On entry : 0/0
  9542 ;;		On exit  : 0/0
  9543 ;;		Unchanged: 0/0
  9544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9545 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9546 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9547 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9548 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9549 ;;Total ram usage:        0 bytes
  9550 ;; Hardware stack levels used:    1
  9551 ;; Hardware stack levels required when called:    6
  9552 ;; This function calls:
  9553 ;;		Nothing
  9554 ;; This function is called by:
  9555 ;;		_i2c_masterOperation
  9556 ;; This function uses a non-reentrant model
  9557 ;;
  9558                           
  9559                           
  9560                           ;psect for function _i2c_driver_start
  9561  0BA3                     _i2c_driver_start:	
  9562                           
  9563                           ;i2c_driver.c: 148: SSP1CON2bits.SEN = 1;
  9564                           
  9565                           ;incstack = 0
  9566                           ; Regs used in _i2c_driver_start: []
  9567  0BA3  0024               	movlb	4	; select bank4
  9568  0BA4  1416               	bsf	22,0	;volatile
  9569  0BA5  0008               	return
  9570  0BA6                     __end_of_i2c_driver_start:	
  9571                           
  9572                           	psect	text61
  9573  0DF7                     __ptext61:	
  9574 ;; *************** function _i2c_close *****************
  9575 ;; Defined at:
  9576 ;;		line 162 in file "mcc_generated_files/drivers/i2c_master.c"
  9577 ;; Parameters:    Size  Location     Type
  9578 ;;		None
  9579 ;; Auto vars:     Size  Location     Type
  9580 ;;  ret             1    3[BANK0 ] enum E12166
  9581 ;; Return value:  Size  Location     Type
  9582 ;;                  1    wreg      enum E92
  9583 ;; Registers used:
  9584 ;;		wreg, status,2, status,0, pclath, cstack
  9585 ;; Tracked objects:
  9586 ;;		On entry : 0/0
  9587 ;;		On exit  : 0/0
  9588 ;;		Unchanged: 0/0
  9589 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9590 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9591 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9592 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9593 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9594 ;;Total ram usage:        2 bytes
  9595 ;; Hardware stack levels used:    1
  9596 ;; Hardware stack levels required when called:    7
  9597 ;; This function calls:
  9598 ;;		_mssp_clearIRQ
  9599 ;;		_mssp_disableIRQ
  9600 ;; This function is called by:
  9601 ;;		_i2c_writeNBytes
  9602 ;;		_i2c_write1ByteRegister
  9603 ;;		_i2c_read1ByteRegister
  9604 ;;		_i2c_read2ByteRegister
  9605 ;;		_i2c_write2ByteRegister
  9606 ;;		_i2c_readDataBlock
  9607 ;;		_i2c_readNBytes
  9608 ;; This function uses a non-reentrant model
  9609 ;;
  9610                           
  9611                           
  9612                           ;psect for function _i2c_close
  9613  0DF7                     _i2c_close:	
  9614                           
  9615                           ;i2c_master.c: 164: i2c_error_t ret = I2C_BUSY;
  9616                           
  9617                           ;incstack = 0
  9618                           ; Regs used in _i2c_close: [wreg+status,2+status,0+pclath+cstack]
  9619  0DF7  0020               	movlb	0	; select bank0
  9620  0DF8  01A3               	clrf	i2c_close@ret
  9621  0DF9  0AA3               	incf	i2c_close@ret,f
  9622                           
  9623                           ;i2c_master.c: 165: if(!i2c_status.busy)
  9624  0DFA  0021               	movlb	1	; select bank1
  9625  0DFB  1820               	btfsc	_i2c_status^(0+128),0
  9626  0DFC  2E0F               	goto	l616
  9627                           
  9628                           ;i2c_master.c: 166: {
  9629                           ;i2c_master.c: 167: i2c_status.inUse = 0;
  9630  0DFD  10A0               	bcf	_i2c_status^(0+128),1
  9631                           
  9632                           ;i2c_master.c: 169: i2c_status.address = 0xff;
  9633  0DFE  30FF               	movlw	255
  9634  0DFF  0020               	movlb	0	; select bank0
  9635  0E00  00A2               	movwf	??_i2c_close
  9636  0E01  0822               	movf	??_i2c_close,w
  9637  0E02  0021               	movlb	1	; select bank1
  9638  0E03  00A1               	movwf	(_i2c_status^(0+128)+1)
  9639                           
  9640                           ;i2c_master.c: 170: mssp_clearIRQ();
  9641  0E04  318B  239D  318D   	fcall	_mssp_clearIRQ
  9642                           
  9643                           ;i2c_master.c: 171: mssp_disableIRQ();
  9644  0E07  318B  23A0         	fcall	_mssp_disableIRQ
  9645                           
  9646                           ;i2c_master.c: 172: ret = i2c_status.error;
  9647  0E09  0021               	movlb	1	; select bank1
  9648  0E0A  082B               	movf	(_i2c_status^(0+128)+11),w
  9649  0E0B  0020               	movlb	0	; select bank0
  9650  0E0C  00A2               	movwf	??_i2c_close
  9651  0E0D  0822               	movf	??_i2c_close,w
  9652  0E0E  00A3               	movwf	i2c_close@ret
  9653  0E0F                     l616:	
  9654                           
  9655                           ;i2c_master.c: 173: }
  9656                           ;i2c_master.c: 174: return ret;
  9657  0E0F  0020               	movlb	0	; select bank0
  9658  0E10  0823               	movf	i2c_close@ret,w
  9659  0E11  0008               	return
  9660  0E12                     __end_of_i2c_close:	
  9661                           
  9662                           	psect	text62
  9663  0BA0                     __ptext62:	
  9664 ;; *************** function _mssp_disableIRQ *****************
  9665 ;; Defined at:
  9666 ;;		line 48 in file "mcc_generated_files/i2c_driver.c"
  9667 ;; Parameters:    Size  Location     Type
  9668 ;;		None
  9669 ;; Auto vars:     Size  Location     Type
  9670 ;;		None
  9671 ;; Return value:  Size  Location     Type
  9672 ;;                  1    wreg      void 
  9673 ;; Registers used:
  9674 ;;		None
  9675 ;; Tracked objects:
  9676 ;;		On entry : 0/0
  9677 ;;		On exit  : 0/0
  9678 ;;		Unchanged: 0/0
  9679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9680 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9681 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9682 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9683 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9684 ;;Total ram usage:        0 bytes
  9685 ;; Hardware stack levels used:    1
  9686 ;; Hardware stack levels required when called:    6
  9687 ;; This function calls:
  9688 ;;		Nothing
  9689 ;; This function is called by:
  9690 ;;		_i2c_close
  9691 ;;		_i2c_setTimeOut
  9692 ;; This function uses a non-reentrant model
  9693 ;;
  9694                           
  9695                           
  9696                           ;psect for function _mssp_disableIRQ
  9697  0BA0                     _mssp_disableIRQ:	
  9698                           
  9699                           ;i2c_driver.c: 50: PIE1bits.SSP1IE = 0;
  9700                           
  9701                           ;incstack = 0
  9702                           ; Regs used in _mssp_disableIRQ: []
  9703  0BA0  0021               	movlb	1	; select bank1
  9704  0BA1  1190               	bcf	16,3	;volatile
  9705  0BA2  0008               	return
  9706  0BA3                     __end_of_mssp_disableIRQ:	
  9707                           
  9708                           	psect	text63
  9709  0B9D                     __ptext63:	
  9710 ;; *************** function _mssp_clearIRQ *****************
  9711 ;; Defined at:
  9712 ;;		line 53 in file "mcc_generated_files/i2c_driver.c"
  9713 ;; Parameters:    Size  Location     Type
  9714 ;;		None
  9715 ;; Auto vars:     Size  Location     Type
  9716 ;;		None
  9717 ;; Return value:  Size  Location     Type
  9718 ;;                  1    wreg      void 
  9719 ;; Registers used:
  9720 ;;		None
  9721 ;; Tracked objects:
  9722 ;;		On entry : 0/0
  9723 ;;		On exit  : 0/0
  9724 ;;		Unchanged: 0/0
  9725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9726 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9727 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9728 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9729 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9730 ;;Total ram usage:        0 bytes
  9731 ;; Hardware stack levels used:    1
  9732 ;; Hardware stack levels required when called:    6
  9733 ;; This function calls:
  9734 ;;		Nothing
  9735 ;; This function is called by:
  9736 ;;		_i2c_open
  9737 ;;		_i2c_close
  9738 ;;		_i2c_ISR
  9739 ;; This function uses a non-reentrant model
  9740 ;;
  9741                           
  9742                           
  9743                           ;psect for function _mssp_clearIRQ
  9744  0B9D                     _mssp_clearIRQ:	
  9745                           
  9746                           ;i2c_driver.c: 55: PIR1bits.SSP1IF = 0;
  9747                           
  9748                           ;incstack = 0
  9749                           ; Regs used in _mssp_clearIRQ: []
  9750  0B9D  0020               	movlb	0	; select bank0
  9751  0B9E  1190               	bcf	16,3	;volatile
  9752  0B9F  0008               	return
  9753  0BA0                     __end_of_mssp_clearIRQ:	
  9754                           
  9755                           	psect	text64
  9756  049D                     __ptext64:	
  9757 ;; *************** function ___awdiv *****************
  9758 ;; Defined at:
  9759 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  9760 ;; Parameters:    Size  Location     Type
  9761 ;;  divisor         2    2[BANK0 ] int 
  9762 ;;  dividend        2    4[BANK0 ] int 
  9763 ;; Auto vars:     Size  Location     Type
  9764 ;;  quotient        2    9[BANK0 ] int 
  9765 ;;  sign            1    8[BANK0 ] unsigned char 
  9766 ;;  counter         1    7[BANK0 ] unsigned char 
  9767 ;; Return value:  Size  Location     Type
  9768 ;;                  2    2[BANK0 ] int 
  9769 ;; Registers used:
  9770 ;;		wreg, status,2, status,0
  9771 ;; Tracked objects:
  9772 ;;		On entry : 0/0
  9773 ;;		On exit  : 0/0
  9774 ;;		Unchanged: 0/0
  9775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9776 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9777 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9778 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9779 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9780 ;;Total ram usage:        9 bytes
  9781 ;; Hardware stack levels used:    1
  9782 ;; Hardware stack levels required when called:    6
  9783 ;; This function calls:
  9784 ;;		Nothing
  9785 ;; This function is called by:
  9786 ;;		_writeDisplay
  9787 ;;		_writeWord
  9788 ;; This function uses a non-reentrant model
  9789 ;;
  9790                           
  9791                           
  9792                           ;psect for function ___awdiv
  9793  049D                     ___awdiv:	
  9794                           
  9795                           ;incstack = 0
  9796                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  9797  049D  0020               	movlb	0	; select bank0
  9798  049E  01A8               	clrf	___awdiv@sign
  9799  049F  1FA3               	btfss	___awdiv@divisor+1,7
  9800  04A0  2CA8               	goto	l4199
  9801  04A1  09A2               	comf	___awdiv@divisor,f
  9802  04A2  09A3               	comf	___awdiv@divisor+1,f
  9803  04A3  0AA2               	incf	___awdiv@divisor,f
  9804  04A4  1903               	skipnz
  9805  04A5  0AA3               	incf	___awdiv@divisor+1,f
  9806  04A6  01A8               	clrf	___awdiv@sign
  9807  04A7  0AA8               	incf	___awdiv@sign,f
  9808  04A8                     l4199:	
  9809  04A8  1FA5               	btfss	___awdiv@dividend+1,7
  9810  04A9  2CB3               	goto	l4205
  9811  04AA  09A4               	comf	___awdiv@dividend,f
  9812  04AB  09A5               	comf	___awdiv@dividend+1,f
  9813  04AC  0AA4               	incf	___awdiv@dividend,f
  9814  04AD  1903               	skipnz
  9815  04AE  0AA5               	incf	___awdiv@dividend+1,f
  9816  04AF  3001               	movlw	1
  9817  04B0  00A6               	movwf	??___awdiv
  9818  04B1  0826               	movf	??___awdiv,w
  9819  04B2  06A8               	xorwf	___awdiv@sign,f
  9820  04B3                     l4205:	
  9821  04B3  01A9               	clrf	___awdiv@quotient
  9822  04B4  01AA               	clrf	___awdiv@quotient+1
  9823  04B5  0822               	movf	___awdiv@divisor,w
  9824  04B6  0423               	iorwf	___awdiv@divisor+1,w
  9825  04B7  1903               	btfsc	3,2
  9826  04B8  2CE2               	goto	l4227
  9827  04B9  01A7               	clrf	___awdiv@counter
  9828  04BA  0AA7               	incf	___awdiv@counter,f
  9829  04BB                     l4215:	
  9830  04BB  1BA3               	btfsc	___awdiv@divisor+1,7
  9831  04BC  2CC7               	goto	l4217
  9832  04BD  3001               	movlw	1
  9833  04BE                     u2885:	
  9834  04BE  35A2               	lslf	___awdiv@divisor,f
  9835  04BF  0DA3               	rlf	___awdiv@divisor+1,f
  9836  04C0  0B89               	decfsz	9,f
  9837  04C1  2CBE               	goto	u2885
  9838  04C2  3001               	movlw	1
  9839  04C3  00A6               	movwf	??___awdiv
  9840  04C4  0826               	movf	??___awdiv,w
  9841  04C5  07A7               	addwf	___awdiv@counter,f
  9842  04C6  2CBB               	goto	l4215
  9843  04C7                     l4217:	
  9844  04C7  3001               	movlw	1
  9845  04C8                     u2905:	
  9846  04C8  35A9               	lslf	___awdiv@quotient,f
  9847  04C9  0DAA               	rlf	___awdiv@quotient+1,f
  9848  04CA  0B89               	decfsz	9,f
  9849  04CB  2CC8               	goto	u2905
  9850  04CC  0823               	movf	___awdiv@divisor+1,w
  9851  04CD  0225               	subwf	___awdiv@dividend+1,w
  9852  04CE  1D03               	skipz
  9853  04CF  2CD2               	goto	u2915
  9854  04D0  0822               	movf	___awdiv@divisor,w
  9855  04D1  0224               	subwf	___awdiv@dividend,w
  9856  04D2                     u2915:	
  9857  04D2  1C03               	skipc
  9858  04D3  2CD9               	goto	l4223
  9859  04D4  0822               	movf	___awdiv@divisor,w
  9860  04D5  02A4               	subwf	___awdiv@dividend,f
  9861  04D6  0823               	movf	___awdiv@divisor+1,w
  9862  04D7  3BA5               	subwfb	___awdiv@dividend+1,f
  9863  04D8  1429               	bsf	___awdiv@quotient,0
  9864  04D9                     l4223:	
  9865  04D9  3001               	movlw	1
  9866  04DA                     u2925:	
  9867  04DA  36A3               	lsrf	___awdiv@divisor+1,f
  9868  04DB  0CA2               	rrf	___awdiv@divisor,f
  9869  04DC  0B89               	decfsz	9,f
  9870  04DD  2CDA               	goto	u2925
  9871  04DE  3001               	movlw	1
  9872  04DF  02A7               	subwf	___awdiv@counter,f
  9873  04E0  1D03               	btfss	3,2
  9874  04E1  2CC7               	goto	l4217
  9875  04E2                     l4227:	
  9876  04E2  0828               	movf	___awdiv@sign,w
  9877  04E3  1903               	btfsc	3,2
  9878  04E4  2CEA               	goto	l4231
  9879  04E5  09A9               	comf	___awdiv@quotient,f
  9880  04E6  09AA               	comf	___awdiv@quotient+1,f
  9881  04E7  0AA9               	incf	___awdiv@quotient,f
  9882  04E8  1903               	skipnz
  9883  04E9  0AAA               	incf	___awdiv@quotient+1,f
  9884  04EA                     l4231:	
  9885  04EA  082A               	movf	___awdiv@quotient+1,w
  9886  04EB  00A3               	movwf	?___awdiv+1
  9887  04EC  0829               	movf	___awdiv@quotient,w
  9888  04ED  00A2               	movwf	?___awdiv
  9889  04EE  0008               	return
  9890  04EF                     __end_of___awdiv:	
  9891                           
  9892                           	psect	text65
  9893  0E7E                     __ptext65:	
  9894 ;; *************** function _drawWalls *****************
  9895 ;; Defined at:
  9896 ;;		line 232 in file "main.c"
  9897 ;; Parameters:    Size  Location     Type
  9898 ;;		None
  9899 ;; Auto vars:     Size  Location     Type
  9900 ;;		None
  9901 ;; Return value:  Size  Location     Type
  9902 ;;                  1    wreg      void 
  9903 ;; Registers used:
  9904 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9905 ;; Tracked objects:
  9906 ;;		On entry : 0/0
  9907 ;;		On exit  : 0/0
  9908 ;;		Unchanged: 0/0
  9909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9910 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9911 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9912 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9913 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9914 ;;Total ram usage:        2 bytes
  9915 ;; Hardware stack levels used:    1
  9916 ;; Hardware stack levels required when called:    7
  9917 ;; This function calls:
  9918 ;;		_reverse
  9919 ;; This function is called by:
  9920 ;;		_writeWord
  9921 ;;		_main
  9922 ;; This function uses a non-reentrant model
  9923 ;;
  9924                           
  9925                           
  9926                           ;psect for function _drawWalls
  9927  0E7E                     _drawWalls:	
  9928                           
  9929                           ;main.c: 233: for (i = 0; i < 8; i++) {
  9930                           
  9931                           ;incstack = 0
  9932                           ; Regs used in _drawWalls: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9933  0E7E  0020               	movlb	0	; select bank0
  9934  0E7F  01EA               	clrf	_i
  9935  0E80                     L3:	
  9936  0E80  3008               	movlw	8
  9937  0E81  026A               	subwf	_i,w
  9938  0E82  1803               	btfsc	3,0
  9939  0E83  0008               	return
  9940                           
  9941                           ;main.c: 234: pixelbuffer[i] |= reverse(walls[i]);
  9942  0E84  086A               	movf	_i,w
  9943  0E85  3ECE               	addlw	(low (_walls| 0))& (0+255)
  9944  0E86  0086               	movwf	6
  9945  0E87  0187               	clrf	7
  9946  0E88  0801               	movf	1,w
  9947  0E89  3186  26E7  318E   	fcall	_reverse
  9948  0E8C  0020               	movlb	0	; select bank0
  9949  0E8D  00A6               	movwf	??_drawWalls
  9950  0E8E  01A7               	clrf	??_drawWalls+1
  9951  0E8F  356A               	lslf	_i,w
  9952  0E90  3EBE               	addlw	(low (_pixelbuffer| 0))& (0+255)
  9953  0E91  0086               	movwf	6
  9954  0E92  0187               	clrf	7
  9955  0E93  0826               	movf	??_drawWalls,w
  9956  0E94  0481               	iorwf	1,f
  9957  0E95  3141               	addfsr 1,1
  9958  0E96  0827               	movf	??_drawWalls+1,w
  9959  0E97  0481               	iorwf	1,f
  9960  0E98  3001               	movlw	1
  9961  0E99  00A6               	movwf	??_drawWalls
  9962  0E9A  0826               	movf	??_drawWalls,w
  9963  0E9B  07EA               	addwf	_i,f
  9964  0E9C  2E80               	goto	L3
  9965  0E9D                     __end_of_drawWalls:	
  9966                           
  9967                           	psect	text66
  9968  06E7                     __ptext66:	
  9969 ;; *************** function _reverse *****************
  9970 ;; Defined at:
  9971 ;;		line 225 in file "main.c"
  9972 ;; Parameters:    Size  Location     Type
  9973 ;;  b               1    wreg     unsigned char 
  9974 ;; Auto vars:     Size  Location     Type
  9975 ;;  b               1    5[BANK0 ] unsigned char 
  9976 ;; Return value:  Size  Location     Type
  9977 ;;                  1    wreg      unsigned char 
  9978 ;; Registers used:
  9979 ;;		wreg, status,2, status,0
  9980 ;; Tracked objects:
  9981 ;;		On entry : 0/0
  9982 ;;		On exit  : 0/0
  9983 ;;		Unchanged: 0/0
  9984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9985 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9986 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9987 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9988 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9989 ;;Total ram usage:        4 bytes
  9990 ;; Hardware stack levels used:    1
  9991 ;; Hardware stack levels required when called:    6
  9992 ;; This function calls:
  9993 ;;		Nothing
  9994 ;; This function is called by:
  9995 ;;		_drawWalls
  9996 ;; This function uses a non-reentrant model
  9997 ;;
  9998                           
  9999                           
 10000                           ;psect for function _reverse
 10001  06E7                     _reverse:	
 10002                           
 10003                           ;incstack = 0
 10004                           ; Regs used in _reverse: [wreg+status,2+status,0]
 10005                           ;reverse@b stored from wreg
 10006  06E7  0020               	movlb	0	; select bank0
 10007  06E8  00A5               	movwf	reverse@b
 10008                           
 10009                           ;main.c: 226: b = (b & 0xF0) >> 4 | (b & 0x0F) << 4;
 10010  06E9  0825               	movf	reverse@b,w
 10011  06EA  390F               	andlw	15
 10012  06EB  00A2               	movwf	??_reverse
 10013  06EC  3004               	movlw	4
 10014  06ED                     u2805:	
 10015  06ED  35A2               	lslf	??_reverse,f
 10016  06EE  0B89               	decfsz	9,f
 10017  06EF  2EED               	goto	u2805
 10018  06F0  0825               	movf	reverse@b,w
 10019  06F1  00A3               	movwf	??_reverse+1
 10020  06F2  3004               	movlw	4
 10021  06F3                     u2815:	
 10022  06F3  36A3               	lsrf	??_reverse+1,f
 10023  06F4  0B89               	decfsz	9,f
 10024  06F5  2EF3               	goto	u2815
 10025  06F6  0823               	movf	??_reverse+1,w
 10026  06F7  390F               	andlw	15
 10027  06F8  0422               	iorwf	??_reverse,w
 10028  06F9  00A4               	movwf	??_reverse+2
 10029  06FA  0824               	movf	??_reverse+2,w
 10030  06FB  00A5               	movwf	reverse@b
 10031                           
 10032                           ;main.c: 227: b = (b & 0xCC) >> 2 | (b & 0x33) << 2;
 10033  06FC  0825               	movf	reverse@b,w
 10034  06FD  3933               	andlw	51
 10035  06FE  00A2               	movwf	??_reverse
 10036  06FF  3002               	movlw	2
 10037  0700                     u2825:	
 10038  0700  35A2               	lslf	??_reverse,f
 10039  0701  0B89               	decfsz	9,f
 10040  0702  2F00               	goto	u2825
 10041  0703  0825               	movf	reverse@b,w
 10042  0704  00A3               	movwf	??_reverse+1
 10043  0705  3002               	movlw	2
 10044  0706                     u2835:	
 10045  0706  36A3               	lsrf	??_reverse+1,f
 10046  0707  0B89               	decfsz	9,f
 10047  0708  2F06               	goto	u2835
 10048  0709  0823               	movf	??_reverse+1,w
 10049  070A  3933               	andlw	51
 10050  070B  0422               	iorwf	??_reverse,w
 10051  070C  00A4               	movwf	??_reverse+2
 10052  070D  0824               	movf	??_reverse+2,w
 10053  070E  00A5               	movwf	reverse@b
 10054                           
 10055                           ;main.c: 228: b = (b & 0xAA) >> 1 | (b & 0x55) << 1;
 10056  070F  0825               	movf	reverse@b,w
 10057  0710  3955               	andlw	85
 10058  0711  00A2               	movwf	??_reverse
 10059  0712  3001               	movlw	1
 10060  0713                     u2845:	
 10061  0713  35A2               	lslf	??_reverse,f
 10062  0714  0B89               	decfsz	9,f
 10063  0715  2F13               	goto	u2845
 10064  0716  3625               	lsrf	reverse@b,w
 10065  0717  3955               	andlw	85
 10066  0718  0422               	iorwf	??_reverse,w
 10067  0719  00A3               	movwf	??_reverse+1
 10068  071A  0823               	movf	??_reverse+1,w
 10069  071B  00A5               	movwf	reverse@b
 10070                           
 10071                           ;main.c: 229: return b;
 10072  071C  0825               	movf	reverse@b,w
 10073  071D  0008               	return
 10074  071E                     __end_of_reverse:	
 10075                           
 10076                           	psect	text67
 10077  0D62                     __ptext67:	
 10078 ;; *************** function _clearPixels *****************
 10079 ;; Defined at:
 10080 ;;		line 196 in file "main.c"
 10081 ;; Parameters:    Size  Location     Type
 10082 ;;		None
 10083 ;; Auto vars:     Size  Location     Type
 10084 ;;		None
 10085 ;; Return value:  Size  Location     Type
 10086 ;;                  1    wreg      void 
 10087 ;; Registers used:
 10088 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10089 ;; Tracked objects:
 10090 ;;		On entry : 0/0
 10091 ;;		On exit  : 0/0
 10092 ;;		Unchanged: 0/0
 10093 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10094 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10095 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10096 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10097 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10098 ;;Total ram usage:        1 bytes
 10099 ;; Hardware stack levels used:    1
 10100 ;; Hardware stack levels required when called:    6
 10101 ;; This function calls:
 10102 ;;		Nothing
 10103 ;; This function is called by:
 10104 ;;		_writeWord
 10105 ;;		_endGame
 10106 ;;		_main
 10107 ;; This function uses a non-reentrant model
 10108 ;;
 10109                           
 10110                           
 10111                           ;psect for function _clearPixels
 10112  0D62                     _clearPixels:	
 10113                           
 10114                           ;main.c: 197: for (i = 0; i < 8; i++) {
 10115                           
 10116                           ;incstack = 0
 10117                           ; Regs used in _clearPixels: [wreg+fsr1l+fsr1h+status,2+status,0]
 10118  0D62  0020               	movlb	0	; select bank0
 10119  0D63  01EA               	clrf	_i
 10120  0D64                     L4:	
 10121  0D64  3008               	movlw	8
 10122  0D65  026A               	subwf	_i,w
 10123  0D66  1803               	btfsc	3,0
 10124  0D67  0008               	return
 10125                           
 10126                           ;main.c: 198: pixelbuffer[i] = 0;
 10127  0D68  356A               	lslf	_i,w
 10128  0D69  3EBE               	addlw	(low (_pixelbuffer| 0))& (0+255)
 10129  0D6A  0086               	movwf	6
 10130  0D6B  0187               	clrf	7
 10131  0D6C  3000               	movlw	0
 10132  0D6D  3FC0               	movwi [0]fsr1
 10133  0D6E  3FC1               	movwi [1]fsr1
 10134  0D6F  3001               	movlw	1
 10135  0D70  00A2               	movwf	??_clearPixels
 10136  0D71  0822               	movf	??_clearPixels,w
 10137  0D72  07EA               	addwf	_i,f
 10138  0D73  2D64               	goto	L4
 10139  0D74                     __end_of_clearPixels:	
 10140                           
 10141                           	psect	text68
 10142  0076                     __ptext68:	
 10143 ;; *************** function _drawPixel *****************
 10144 ;; Defined at:
 10145 ;;		line 182 in file "main.c"
 10146 ;; Parameters:    Size  Location     Type
 10147 ;;  x               1    wreg     unsigned char 
 10148 ;;  y               1    2[BANK0 ] unsigned char 
 10149 ;;  color           1    3[BANK0 ] unsigned char 
 10150 ;; Auto vars:     Size  Location     Type
 10151 ;;  x               1   10[BANK0 ] unsigned char 
 10152 ;; Return value:  Size  Location     Type
 10153 ;;                  1    wreg      void 
 10154 ;; Registers used:
 10155 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10156 ;; Tracked objects:
 10157 ;;		On entry : 0/0
 10158 ;;		On exit  : 0/0
 10159 ;;		Unchanged: 0/0
 10160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10161 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10162 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10163 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10164 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10165 ;;Total ram usage:        9 bytes
 10166 ;; Hardware stack levels used:    1
 10167 ;; Hardware stack levels required when called:    6
 10168 ;; This function calls:
 10169 ;;		Nothing
 10170 ;; This function is called by:
 10171 ;;		_main
 10172 ;; This function uses a non-reentrant model
 10173 ;;
 10174                           
 10175                           
 10176                           ;psect for function _drawPixel
 10177  0076                     _drawPixel:	
 10178                           
 10179                           ;incstack = 0
 10180                           ; Regs used in _drawPixel: [wreg+fsr1l+fsr1h+status,2+status,0]
 10181                           ;drawPixel@x stored from wreg
 10182  0076  0020               	movlb	0	; select bank0
 10183  0077  00AA               	movwf	drawPixel@x
 10184                           
 10185                           ;main.c: 183: if (color == 1) {
 10186  0078  0323               	decf	drawPixel@color,w
 10187  0079  1D03               	btfss	3,2
 10188  007A  28A6               	goto	l3453
 10189                           
 10190                           ;main.c: 184: pixelbuffer[y] |= 1 << x;
 10191  007B  3001               	movlw	1
 10192  007C  00A4               	movwf	??_drawPixel
 10193  007D  3000               	movlw	0
 10194  007E  00A5               	movwf	??_drawPixel+1
 10195  007F  0A2A               	incf	drawPixel@x,w
 10196  0080  2883               	goto	u2044
 10197  0081                     u2045:	
 10198  0081  35A4               	lslf	??_drawPixel,f
 10199  0082  0DA5               	rlf	??_drawPixel+1,f
 10200  0083                     u2044:	
 10201  0083  0B89               	decfsz	9,f
 10202  0084  2881               	goto	u2045
 10203  0085  3522               	lslf	drawPixel@y,w
 10204  0086  3EBE               	addlw	(low (_pixelbuffer| 0))& (0+255)
 10205  0087  0086               	movwf	6
 10206  0088  0187               	clrf	7
 10207  0089  0824               	movf	??_drawPixel,w
 10208  008A  0481               	iorwf	1,f
 10209  008B  3141               	addfsr 1,1
 10210  008C  0825               	movf	??_drawPixel+1,w
 10211  008D  0481               	iorwf	1,f
 10212                           
 10213                           ;main.c: 185: pixelbuffer[y] &= ~(1 << (x + 8));
 10214  008E  3001               	movlw	1
 10215  008F  00A4               	movwf	??_drawPixel
 10216  0090  3000               	movlw	0
 10217  0091  00A5               	movwf	??_drawPixel+1
 10218  0092  082A               	movf	drawPixel@x,w
 10219  0093  3E08               	addlw	8
 10220  0094  0A89               	incf	9,f
 10221  0095  2898               	goto	u2054
 10222  0096                     u2055:	
 10223  0096  35A4               	lslf	??_drawPixel,f
 10224  0097  0DA5               	rlf	??_drawPixel+1,f
 10225  0098                     u2054:	
 10226  0098  0B89               	decfsz	9,f
 10227  0099  2896               	goto	u2055
 10228  009A  09A4               	comf	??_drawPixel,f
 10229  009B  09A5               	comf	??_drawPixel+1,f
 10230  009C  3522               	lslf	drawPixel@y,w
 10231  009D  3EBE               	addlw	(low (_pixelbuffer| 0))& (0+255)
 10232  009E  0086               	movwf	6
 10233  009F  0187               	clrf	7
 10234  00A0  0824               	movf	??_drawPixel,w
 10235  00A1  0581               	andwf	1,f
 10236  00A2  3141               	addfsr 1,1
 10237  00A3  0825               	movf	??_drawPixel+1,w
 10238  00A4  0581               	andwf	1,f
 10239                           
 10240                           ;main.c: 186: } else if (color == 2) {
 10241  00A5  0008               	return
 10242  00A6                     l3453:	
 10243  00A6  3002               	movlw	2
 10244  00A7  0623               	xorwf	drawPixel@color,w
 10245  00A8  1D03               	btfss	3,2
 10246  00A9  28D5               	goto	l3457
 10247                           
 10248                           ;main.c: 187: pixelbuffer[y] |= 1 << (x + 8);
 10249  00AA  3001               	movlw	1
 10250  00AB  00A4               	movwf	??_drawPixel
 10251  00AC  3000               	movlw	0
 10252  00AD  00A5               	movwf	??_drawPixel+1
 10253  00AE  082A               	movf	drawPixel@x,w
 10254  00AF  3E08               	addlw	8
 10255  00B0  0A89               	incf	9,f
 10256  00B1  28B4               	goto	u2074
 10257  00B2                     u2075:	
 10258  00B2  35A4               	lslf	??_drawPixel,f
 10259  00B3  0DA5               	rlf	??_drawPixel+1,f
 10260  00B4                     u2074:	
 10261  00B4  0B89               	decfsz	9,f
 10262  00B5  28B2               	goto	u2075
 10263  00B6  3522               	lslf	drawPixel@y,w
 10264  00B7  3EBE               	addlw	(low (_pixelbuffer| 0))& (0+255)
 10265  00B8  0086               	movwf	6
 10266  00B9  0187               	clrf	7
 10267  00BA  0824               	movf	??_drawPixel,w
 10268  00BB  0481               	iorwf	1,f
 10269  00BC  3141               	addfsr 1,1
 10270  00BD  0825               	movf	??_drawPixel+1,w
 10271  00BE  0481               	iorwf	1,f
 10272                           
 10273                           ;main.c: 188: pixelbuffer[y] &= ~(1 << x);
 10274  00BF  3001               	movlw	1
 10275  00C0  00A4               	movwf	??_drawPixel
 10276  00C1  3000               	movlw	0
 10277  00C2  00A5               	movwf	??_drawPixel+1
 10278  00C3  0A2A               	incf	drawPixel@x,w
 10279  00C4  28C7               	goto	u2084
 10280  00C5                     u2085:	
 10281  00C5  35A4               	lslf	??_drawPixel,f
 10282  00C6  0DA5               	rlf	??_drawPixel+1,f
 10283  00C7                     u2084:	
 10284  00C7  0B89               	decfsz	9,f
 10285  00C8  28C5               	goto	u2085
 10286  00C9  09A4               	comf	??_drawPixel,f
 10287  00CA  09A5               	comf	??_drawPixel+1,f
 10288  00CB  3522               	lslf	drawPixel@y,w
 10289  00CC  3EBE               	addlw	(low (_pixelbuffer| 0))& (0+255)
 10290  00CD  0086               	movwf	6
 10291  00CE  0187               	clrf	7
 10292  00CF  0824               	movf	??_drawPixel,w
 10293  00D0  0581               	andwf	1,f
 10294  00D1  3141               	addfsr 1,1
 10295  00D2  0825               	movf	??_drawPixel+1,w
 10296  00D3  0581               	andwf	1,f
 10297                           
 10298                           ;main.c: 189: } else if (color == 3) {
 10299  00D4  0008               	return
 10300  00D5                     l3457:	
 10301  00D5  3003               	movlw	3
 10302  00D6  0623               	xorwf	drawPixel@color,w
 10303  00D7  1D03               	btfss	3,2
 10304  00D8  28FF               	goto	l3461
 10305                           
 10306                           ;main.c: 190: pixelbuffer[y] |= (1 << (x + 8)) | (1 << x);
 10307  00D9  3001               	movlw	1
 10308  00DA  00A4               	movwf	??_drawPixel
 10309  00DB  3000               	movlw	0
 10310  00DC  00A5               	movwf	??_drawPixel+1
 10311  00DD  0A2A               	incf	drawPixel@x,w
 10312  00DE  28E1               	goto	u2104
 10313  00DF                     u2105:	
 10314  00DF  35A4               	lslf	??_drawPixel,f
 10315  00E0  0DA5               	rlf	??_drawPixel+1,f
 10316  00E1                     u2104:	
 10317  00E1  0B89               	decfsz	9,f
 10318  00E2  28DF               	goto	u2105
 10319  00E3  3001               	movlw	1
 10320  00E4  00A6               	movwf	??_drawPixel+2
 10321  00E5  3000               	movlw	0
 10322  00E6  00A7               	movwf	??_drawPixel+3
 10323  00E7  082A               	movf	drawPixel@x,w
 10324  00E8  3E08               	addlw	8
 10325  00E9  0A89               	incf	9,f
 10326  00EA  28ED               	goto	u2114
 10327  00EB                     u2115:	
 10328  00EB  35A6               	lslf	??_drawPixel+2,f
 10329  00EC  0DA7               	rlf	??_drawPixel+3,f
 10330  00ED                     u2114:	
 10331  00ED  0B89               	decfsz	9,f
 10332  00EE  28EB               	goto	u2115
 10333  00EF  0824               	movf	??_drawPixel,w
 10334  00F0  0426               	iorwf	??_drawPixel+2,w
 10335  00F1  00A8               	movwf	??_drawPixel+4
 10336  00F2  0825               	movf	??_drawPixel+1,w
 10337  00F3  0427               	iorwf	??_drawPixel+3,w
 10338  00F4  00A9               	movwf	??_drawPixel+5
 10339  00F5  3522               	lslf	drawPixel@y,w
 10340  00F6  3EBE               	addlw	(low (_pixelbuffer| 0))& (0+255)
 10341  00F7  0086               	movwf	6
 10342  00F8  0187               	clrf	7
 10343  00F9  0828               	movf	??_drawPixel+4,w
 10344  00FA  0481               	iorwf	1,f
 10345  00FB  3141               	addfsr 1,1
 10346  00FC  0829               	movf	??_drawPixel+5,w
 10347  00FD  0481               	iorwf	1,f
 10348                           
 10349                           ;main.c: 191: } else if (color == 0) {
 10350  00FE  0008               	return
 10351  00FF                     l3461:	
 10352  00FF  0823               	movf	drawPixel@color,w
 10353  0100  1D03               	btfss	3,2
 10354  0101  0008               	return
 10355                           
 10356                           ;main.c: 192: pixelbuffer[y] &= ~(1 << x) & ~(1 << (x + 8));
 10357  0102  3001               	movlw	1
 10358  0103  00A4               	movwf	??_drawPixel
 10359  0104  3000               	movlw	0
 10360  0105  00A5               	movwf	??_drawPixel+1
 10361  0106  082A               	movf	drawPixel@x,w
 10362  0107  3E08               	addlw	8
 10363  0108  0A89               	incf	9,f
 10364  0109  290C               	goto	u2134
 10365  010A                     u2135:	
 10366  010A  35A4               	lslf	??_drawPixel,f
 10367  010B  0DA5               	rlf	??_drawPixel+1,f
 10368  010C                     u2134:	
 10369  010C  0B89               	decfsz	9,f
 10370  010D  290A               	goto	u2135
 10371  010E  09A4               	comf	??_drawPixel,f
 10372  010F  09A5               	comf	??_drawPixel+1,f
 10373  0110  3001               	movlw	1
 10374  0111  00A6               	movwf	??_drawPixel+2
 10375  0112  3000               	movlw	0
 10376  0113  00A7               	movwf	??_drawPixel+3
 10377  0114  0A2A               	incf	drawPixel@x,w
 10378  0115  2918               	goto	u2144
 10379  0116                     u2145:	
 10380  0116  35A6               	lslf	??_drawPixel+2,f
 10381  0117  0DA7               	rlf	??_drawPixel+3,f
 10382  0118                     u2144:	
 10383  0118  0B89               	decfsz	9,f
 10384  0119  2916               	goto	u2145
 10385  011A  09A6               	comf	??_drawPixel+2,f
 10386  011B  09A7               	comf	??_drawPixel+3,f
 10387  011C  0824               	movf	??_drawPixel,w
 10388  011D  0526               	andwf	??_drawPixel+2,w
 10389  011E  00A8               	movwf	??_drawPixel+4
 10390  011F  0825               	movf	??_drawPixel+1,w
 10391  0120  0527               	andwf	??_drawPixel+3,w
 10392  0121  00A9               	movwf	??_drawPixel+5
 10393  0122  3522               	lslf	drawPixel@y,w
 10394  0123  3EBE               	addlw	(low (_pixelbuffer| 0))& (0+255)
 10395  0124  0086               	movwf	6
 10396  0125  0187               	clrf	7
 10397  0126  0828               	movf	??_drawPixel+4,w
 10398  0127  0581               	andwf	1,f
 10399  0128  3141               	addfsr 1,1
 10400  0129  0829               	movf	??_drawPixel+5,w
 10401  012A  0581               	andwf	1,f
 10402  012B  0008               	return
 10403  012C                     __end_of_drawPixel:	
 10404                           
 10405                           	psect	text69
 10406  0C00                     __ptext69:	
 10407 ;; *************** function _SYSTEM_Initialize *****************
 10408 ;; Defined at:
 10409 ;;		line 77 in file "mcc_generated_files/mcc.c"
 10410 ;; Parameters:    Size  Location     Type
 10411 ;;		None
 10412 ;; Auto vars:     Size  Location     Type
 10413 ;;		None
 10414 ;; Return value:  Size  Location     Type
 10415 ;;                  1    wreg      void 
 10416 ;; Registers used:
 10417 ;;		wreg, status,2, status,0, pclath, cstack
 10418 ;; Tracked objects:
 10419 ;;		On entry : 0/0
 10420 ;;		On exit  : 0/0
 10421 ;;		Unchanged: 0/0
 10422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10423 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10424 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10425 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10426 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10427 ;;Total ram usage:        0 bytes
 10428 ;; Hardware stack levels used:    1
 10429 ;; Hardware stack levels required when called:    8
 10430 ;; This function calls:
 10431 ;;		_OSCILLATOR_Initialize
 10432 ;;		_PIN_MANAGER_Initialize
 10433 ;; This function is called by:
 10434 ;;		_main
 10435 ;; This function uses a non-reentrant model
 10436 ;;
 10437                           
 10438                           
 10439                           ;psect for function _SYSTEM_Initialize
 10440  0C00                     _SYSTEM_Initialize:	
 10441                           
 10442                           ;mcc.c: 79: PIN_MANAGER_Initialize();
 10443                           
 10444                           ;incstack = 0
 10445                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
 10446  0C00  3187  271E  318C   	fcall	_PIN_MANAGER_Initialize
 10447                           
 10448                           ;mcc.c: 80: OSCILLATOR_Initialize();
 10449  0C03  318C  249C         	fcall	_OSCILLATOR_Initialize
 10450  0C05  0008               	return
 10451  0C06                     __end_of_SYSTEM_Initialize:	
 10452                           
 10453                           	psect	text70
 10454  071E                     __ptext70:	
 10455 ;; *************** function _PIN_MANAGER_Initialize *****************
 10456 ;; Defined at:
 10457 ;;		line 54 in file "mcc_generated_files/pin_manager.c"
 10458 ;; Parameters:    Size  Location     Type
 10459 ;;		None
 10460 ;; Auto vars:     Size  Location     Type
 10461 ;;		None
 10462 ;; Return value:  Size  Location     Type
 10463 ;;                  1    wreg      void 
 10464 ;; Registers used:
 10465 ;;		wreg, status,2, status,0, pclath, cstack
 10466 ;; Tracked objects:
 10467 ;;		On entry : 0/0
 10468 ;;		On exit  : 0/0
 10469 ;;		Unchanged: 0/0
 10470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10471 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10472 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10473 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10474 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10475 ;;Total ram usage:        0 bytes
 10476 ;; Hardware stack levels used:    1
 10477 ;; Hardware stack levels required when called:    7
 10478 ;; This function calls:
 10479 ;;		_IOCCF4_SetInterruptHandler
 10480 ;; This function is called by:
 10481 ;;		_SYSTEM_Initialize
 10482 ;; This function uses a non-reentrant model
 10483 ;;
 10484                           
 10485                           
 10486                           ;psect for function _PIN_MANAGER_Initialize
 10487  071E                     _PIN_MANAGER_Initialize:	
 10488                           
 10489                           ;pin_manager.c: 59: LATA = 0x00;
 10490                           
 10491                           ;incstack = 0
 10492                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0+pclath+cstack]
 10493  071E  0022               	movlb	2	; select bank2
 10494  071F  018C               	clrf	12	;volatile
 10495                           
 10496                           ;pin_manager.c: 60: LATB = 0x00;
 10497  0720  018D               	clrf	13	;volatile
 10498                           
 10499                           ;pin_manager.c: 61: LATC = 0x00;
 10500  0721  018E               	clrf	14	;volatile
 10501                           
 10502                           ;pin_manager.c: 66: TRISA = 0x37;
 10503  0722  3037               	movlw	55
 10504  0723  0021               	movlb	1	; select bank1
 10505  0724  008C               	movwf	12	;volatile
 10506                           
 10507                           ;pin_manager.c: 67: TRISB = 0xF0;
 10508  0725  30F0               	movlw	240
 10509  0726  008D               	movwf	13	;volatile
 10510                           
 10511                           ;pin_manager.c: 68: TRISC = 0xFF;
 10512  0727  30FF               	movlw	255
 10513  0728  008E               	movwf	14	;volatile
 10514                           
 10515                           ;pin_manager.c: 73: ANSELC = 0xCF;
 10516  0729  30CF               	movlw	207
 10517  072A  0023               	movlb	3	; select bank3
 10518  072B  008E               	movwf	14	;volatile
 10519                           
 10520                           ;pin_manager.c: 74: ANSELB = 0xA0;
 10521  072C  30A0               	movlw	160
 10522  072D  008D               	movwf	13	;volatile
 10523                           
 10524                           ;pin_manager.c: 75: ANSELA = 0x17;
 10525  072E  3017               	movlw	23
 10526  072F  008C               	movwf	12	;volatile
 10527                           
 10528                           ;pin_manager.c: 80: WPUB = 0x00;
 10529  0730  0024               	movlb	4	; select bank4
 10530  0731  018D               	clrf	13	;volatile
 10531                           
 10532                           ;pin_manager.c: 81: WPUA = 0x00;
 10533  0732  018C               	clrf	12	;volatile
 10534                           
 10535                           ;pin_manager.c: 82: WPUC = 0x10;
 10536  0733  3010               	movlw	16
 10537  0734  008E               	movwf	14	;volatile
 10538                           
 10539                           ;pin_manager.c: 83: OPTION_REGbits.nWPUEN = 0;
 10540  0735  0021               	movlb	1	; select bank1
 10541  0736  1395               	bcf	21,7	;volatile
 10542                           
 10543                           ;pin_manager.c: 88: ODCONA = 0x00;
 10544  0737  0025               	movlb	5	; select bank5
 10545  0738  018C               	clrf	12	;volatile
 10546                           
 10547                           ;pin_manager.c: 89: ODCONB = 0x00;
 10548  0739  018D               	clrf	13	;volatile
 10549                           
 10550                           ;pin_manager.c: 90: ODCONC = 0x00;
 10551  073A  018E               	clrf	14	;volatile
 10552                           
 10553                           ;pin_manager.c: 97: IOCCFbits.IOCCF4 = 0;
 10554  073B  0027               	movlb	7	; select bank7
 10555  073C  1219               	bcf	25,4	;volatile
 10556                           
 10557                           ;pin_manager.c: 99: IOCCNbits.IOCCN4 = 1;
 10558  073D  1618               	bsf	24,4	;volatile
 10559                           
 10560                           ;pin_manager.c: 101: IOCCPbits.IOCCP4 = 1;
 10561  073E  1617               	bsf	23,4	;volatile
 10562                           
 10563                           ;pin_manager.c: 104: IOCCF4_SetInterruptHandler(IOCCF4_DefaultInterruptHandler);
 10564  073F  307E               	movlw	low _IOCCF4_DefaultInterruptHandler
 10565  0740  0020               	movlb	0	; select bank0
 10566  0741  00A2               	movwf	IOCCF4_SetInterruptHandler@InterruptHandler
 10567  0742  300B               	movlw	high _IOCCF4_DefaultInterruptHandler
 10568  0743  00A3               	movwf	IOCCF4_SetInterruptHandler@InterruptHandler+1
 10569  0744  318C  2478         	fcall	_IOCCF4_SetInterruptHandler
 10570                           
 10571                           ;pin_manager.c: 107: INTCONbits.IOCIE = 1;
 10572  0746  158B               	bsf	11,3	;volatile
 10573                           
 10574                           ;pin_manager.c: 110: SSPCLKPPS = 0x0E;
 10575  0747  300E               	movlw	14
 10576  0748  003C               	movlb	28	; select bank28
 10577  0749  00A0               	movwf	32	;volatile
 10578                           
 10579                           ;pin_manager.c: 111: SSPDATPPS = 0x0C;
 10580  074A  300C               	movlw	12
 10581  074B  00A1               	movwf	33	;volatile
 10582                           
 10583                           ;pin_manager.c: 112: RB6PPS = 0x10;
 10584  074C  3010               	movlw	16
 10585  074D  003D               	movlb	29	; select bank29
 10586  074E  009E               	movwf	30	;volatile
 10587                           
 10588                           ;pin_manager.c: 113: RB4PPS = 0x11;
 10589  074F  3011               	movlw	17
 10590  0750  009C               	movwf	28	;volatile
 10591  0751  0008               	return
 10592  0752                     __end_of_PIN_MANAGER_Initialize:	
 10593                           
 10594                           	psect	text71
 10595  0C78                     __ptext71:	
 10596 ;; *************** function _IOCCF4_SetInterruptHandler *****************
 10597 ;; Defined at:
 10598 ;;		line 146 in file "mcc_generated_files/pin_manager.c"
 10599 ;; Parameters:    Size  Location     Type
 10600 ;;  InterruptHan    2    2[BANK0 ] PTR FTN()void 
 10601 ;;		 -> buttonInterrupt(1), IOCCF4_DefaultInterruptHandler(1), 
 10602 ;; Auto vars:     Size  Location     Type
 10603 ;;		None
 10604 ;; Return value:  Size  Location     Type
 10605 ;;                  1    wreg      void 
 10606 ;; Registers used:
 10607 ;;		wreg
 10608 ;; Tracked objects:
 10609 ;;		On entry : 0/0
 10610 ;;		On exit  : 0/0
 10611 ;;		Unchanged: 0/0
 10612 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10613 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10614 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10615 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10616 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10617 ;;Total ram usage:        2 bytes
 10618 ;; Hardware stack levels used:    1
 10619 ;; Hardware stack levels required when called:    6
 10620 ;; This function calls:
 10621 ;;		Nothing
 10622 ;; This function is called by:
 10623 ;;		_PIN_MANAGER_Initialize
 10624 ;;		_main
 10625 ;; This function uses a non-reentrant model
 10626 ;;
 10627                           
 10628                           
 10629                           ;psect for function _IOCCF4_SetInterruptHandler
 10630  0C78                     _IOCCF4_SetInterruptHandler:	
 10631                           
 10632                           ;pin_manager.c: 147: IOCCF4_InterruptHandler = InterruptHandler;
 10633                           
 10634                           ;incstack = 0
 10635                           ; Regs used in _IOCCF4_SetInterruptHandler: [wreg]
 10636  0C78  0020               	movlb	0	; select bank0
 10637  0C79  0823               	movf	IOCCF4_SetInterruptHandler@InterruptHandler+1,w
 10638  0C7A  0021               	movlb	1	; select bank1
 10639  0C7B  00E8               	movwf	(_IOCCF4_InterruptHandler+1)^(0+128)
 10640  0C7C  0020               	movlb	0	; select bank0
 10641  0C7D  0822               	movf	IOCCF4_SetInterruptHandler@InterruptHandler,w
 10642  0C7E  0021               	movlb	1	; select bank1
 10643  0C7F  00E7               	movwf	_IOCCF4_InterruptHandler^(0+128)
 10644  0C80  0008               	return
 10645  0C81                     __end_of_IOCCF4_SetInterruptHandler:	
 10646                           
 10647                           	psect	text72
 10648  0C9C                     __ptext72:	
 10649 ;; *************** function _OSCILLATOR_Initialize *****************
 10650 ;; Defined at:
 10651 ;;		line 83 in file "mcc_generated_files/mcc.c"
 10652 ;; Parameters:    Size  Location     Type
 10653 ;;		None
 10654 ;; Auto vars:     Size  Location     Type
 10655 ;;		None
 10656 ;; Return value:  Size  Location     Type
 10657 ;;                  1    wreg      void 
 10658 ;; Registers used:
 10659 ;;		wreg, status,2
 10660 ;; Tracked objects:
 10661 ;;		On entry : 0/0
 10662 ;;		On exit  : 0/0
 10663 ;;		Unchanged: 0/0
 10664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10665 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10666 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10667 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10668 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10669 ;;Total ram usage:        0 bytes
 10670 ;; Hardware stack levels used:    1
 10671 ;; Hardware stack levels required when called:    6
 10672 ;; This function calls:
 10673 ;;		Nothing
 10674 ;; This function is called by:
 10675 ;;		_SYSTEM_Initialize
 10676 ;; This function uses a non-reentrant model
 10677 ;;
 10678                           
 10679                           
 10680                           ;psect for function _OSCILLATOR_Initialize
 10681  0C9C                     _OSCILLATOR_Initialize:	
 10682                           
 10683                           ;mcc.c: 86: OSCCON = 0x78;
 10684                           
 10685                           ;incstack = 0
 10686                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 10687  0C9C  3078               	movlw	120
 10688  0C9D  0021               	movlb	1	; select bank1
 10689  0C9E  0099               	movwf	25	;volatile
 10690                           
 10691                           ;mcc.c: 88: OSCTUNE = 0x00;
 10692  0C9F  0198               	clrf	24	;volatile
 10693                           
 10694                           ;mcc.c: 90: BORCON = 0x00;
 10695  0CA0  0022               	movlb	2	; select bank2
 10696  0CA1  0196               	clrf	22	;volatile
 10697  0CA2                     l95:	
 10698                           ;mcc.c: 93: {
 10699                           
 10700                           ;mcc.c: 92: while(PLLR == 0)
 10701                           
 10702  0CA2  0021               	movlb	1	; select bank1
 10703  0CA3  1B1A               	btfsc	26,6	;volatile
 10704  0CA4  0008               	return
 10705  0CA5  2CA2               	goto	l95
 10706  0CA6                     __end_of_OSCILLATOR_Initialize:	
 10707                           
 10708                           	psect	intentry
 10709  0004                     __pintentry:	
 10710 ;; *************** function _INTERRUPT_InterruptManager *****************
 10711 ;; Defined at:
 10712 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
 10713 ;; Parameters:    Size  Location     Type
 10714 ;;		None
 10715 ;; Auto vars:     Size  Location     Type
 10716 ;;		None
 10717 ;; Return value:  Size  Location     Type
 10718 ;;                  1    wreg      void 
 10719 ;; Registers used:
 10720 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10721 ;; Tracked objects:
 10722 ;;		On entry : 0/0
 10723 ;;		On exit  : 0/0
 10724 ;;		Unchanged: 0/0
 10725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10726 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10727 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10728 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10729 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10730 ;;Total ram usage:        1 bytes
 10731 ;; Hardware stack levels used:    1
 10732 ;; Hardware stack levels required when called:    5
 10733 ;; This function calls:
 10734 ;;		Absolute function
 10735 ;;		_PIN_MANAGER_IOC
 10736 ;;		_i2c_busCollisionISR
 10737 ;;		i1_i2c_ISR
 10738 ;; This function is called by:
 10739 ;;		Interrupt level 1
 10740 ;; This function uses a non-reentrant model
 10741 ;;
 10742                           
 10743  0004                     _INTERRUPT_InterruptManager:	
 10744                           
 10745                           ;incstack = 0
 10746 ;; hardware stack exceeded
 10747  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 10748                           
 10749                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10750  0005  3180               	pagesel	$
 10751  0006  0020               	movlb	0	; select bank0
 10752  0007  087F               	movf	127,w
 10753  0008  00A1               	movwf	??_INTERRUPT_InterruptManager
 10754                           
 10755                           ;interrupt_manager.c: 54: if(INTCONbits.IOCIE == 1 && INTCONbits.IOCIF == 1)
 10756  0009  198B               	btfsc	11,3	;volatile
 10757  000A  1C0B               	btfss	11,0	;volatile
 10758  000B  2810               	goto	i1l525
 10759                           
 10760                           ;interrupt_manager.c: 55: {
 10761                           ;interrupt_manager.c: 56: PIN_MANAGER_IOC();
 10762  000C  318B  23F4  3180   	fcall	_PIN_MANAGER_IOC
 10763                           
 10764                           ;interrupt_manager.c: 57: }
 10765  000F  282B               	goto	i1l533
 10766  0010                     i1l525:	
 10767                           
 10768                           ;interrupt_manager.c: 58: else if(INTCONbits.PEIE == 1)
 10769  0010  1F0B               	btfss	11,6	;volatile
 10770  0011  282B               	goto	i1l533
 10771                           
 10772                           ;interrupt_manager.c: 59: {
 10773                           ;interrupt_manager.c: 60: if(PIE2bits.BCL1IE == 1 && PIR2bits.BCL1IF == 1)
 10774  0012  0021               	movlb	1	; select bank1
 10775  0013  1D91               	btfss	17,3	;volatile
 10776  0014  281F               	goto	i1l528
 10777  0015  0020               	movlb	0	; select bank0
 10778  0016  1D91               	btfss	17,3	;volatile
 10779  0017  281F               	goto	i1l528
 10780                           
 10781                           ;interrupt_manager.c: 61: {
 10782                           ;interrupt_manager.c: 62: i2c_driver_busCollisionISR();
 10783  0018  0021               	movlb	1	; select bank1
 10784  0019  085F               	movf	(_i2c_driver_busCollisionISR+1)^(0+128),w
 10785  001A  008A               	movwf	10
 10786  001B  085E               	movf	_i2c_driver_busCollisionISR^(0+128),w
 10787  001C  000A               	callw
 10788  001D  3180               	pagesel	$
 10789                           
 10790                           ;interrupt_manager.c: 63: }
 10791  001E  282B               	goto	i1l533
 10792  001F                     i1l528:	
 10793                           
 10794                           ;interrupt_manager.c: 64: else if(PIE1bits.SSP1IE == 1 && PIR1bits.SSP1IF == 1)
 10795  001F  0021               	movlb	1	; select bank1
 10796  0020  1D90               	btfss	16,3	;volatile
 10797  0021  282B               	goto	i1l533
 10798  0022  0020               	movlb	0	; select bank0
 10799  0023  1D90               	btfss	16,3	;volatile
 10800  0024  282B               	goto	i1l533
 10801                           
 10802                           ;interrupt_manager.c: 65: {
 10803                           ;interrupt_manager.c: 66: i2c_driver_i2cISR();
 10804  0025  0021               	movlb	1	; select bank1
 10805  0026  085D               	movf	(_i2c_driver_i2cISR+1)^(0+128),w
 10806  0027  008A               	movwf	10
 10807  0028  085C               	movf	_i2c_driver_i2cISR^(0+128),w
 10808  0029  000A               	callw
 10809  002A  3180               	pagesel	$
 10810  002B                     i1l533:	
 10811                           ;interrupt_manager.c: 73: else
 10812                           ;interrupt_manager.c: 74: {
 10813                           
 10814                           ;interrupt_manager.c: 71: }
 10815                           ;interrupt_manager.c: 72: }
 10816                           
 10817                           ;interrupt_manager.c: 68: else
 10818                           ;interrupt_manager.c: 69: {
 10819                           
 10820                           ;interrupt_manager.c: 67: }
 10821                           
 10822  002B  0020               	movlb	0	; select bank0
 10823  002C  0821               	movf	??_INTERRUPT_InterruptManager,w
 10824  002D  00FF               	movwf	127
 10825  002E  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 10826  002F  0009               	retfie
 10827  0030                     __end_of_INTERRUPT_InterruptManager:	
 10828                           
 10829                           	psect	text74
 10830  0EFC                     __ptext74:	
 10831 ;; *************** function i1_i2c_ISR *****************
 10832 ;; Defined at:
 10833 ;;		line 419 in file "mcc_generated_files/drivers/i2c_master.c"
 10834 ;; Parameters:    Size  Location     Type
 10835 ;;		None
 10836 ;; Auto vars:     Size  Location     Type
 10837 ;;		None
 10838 ;; Return value:  Size  Location     Type
 10839 ;;                  1    wreg      void 
 10840 ;; Registers used:
 10841 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10842 ;; Tracked objects:
 10843 ;;		On entry : 0/0
 10844 ;;		On exit  : 0/0
 10845 ;;		Unchanged: 0/0
 10846 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10847 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10848 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10849 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10850 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10851 ;;Total ram usage:        1 bytes
 10852 ;; Hardware stack levels used:    1
 10853 ;; Hardware stack levels required when called:    4
 10854 ;; This function calls:
 10855 ;;		i1_do_I2C_DO_ACK
 10856 ;;		i1_do_I2C_DO_ADDRESS_NACK
 10857 ;;		i1_do_I2C_DO_NACK_RESTART
 10858 ;;		i1_do_I2C_DO_NACK_STOP
 10859 ;;		i1_do_I2C_IDLE
 10860 ;;		i1_do_I2C_RCEN
 10861 ;;		i1_do_I2C_RESET
 10862 ;;		i1_do_I2C_RX
 10863 ;;		i1_do_I2C_SEND_ADR_READ
 10864 ;;		i1_do_I2C_SEND_ADR_WRITE
 10865 ;;		i1_do_I2C_SEND_RESTART
 10866 ;;		i1_do_I2C_SEND_RESTART_READ
 10867 ;;		i1_do_I2C_SEND_RESTART_WRITE
 10868 ;;		i1_do_I2C_SEND_STOP
 10869 ;;		i1_do_I2C_TX
 10870 ;;		i1_do_I2C_TX_EMPTY
 10871 ;;		i1_i2c_driver_isNACK
 10872 ;;		i1_mssp_clearIRQ
 10873 ;; This function is called by:
 10874 ;; This function uses a non-reentrant model
 10875 ;;
 10876                           
 10877                           
 10878                           ;psect for function i1_i2c_ISR
 10879  0EFC                     i1_i2c_ISR:	
 10880  0EFC                     i1l6363:	
 10881                           ;incstack = 0
 10882 ;; hardware stack exceeded
 10883                           ; Regs used in i1_i2c_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10884                           
 10885                           
 10886                           ;i2c_master.c: 421: mssp_clearIRQ();
 10887  0EFC  318B  239A  318E   	fcall	i1_mssp_clearIRQ
 10888                           
 10889                           ;i2c_master.c: 427: if(i2c_status.addressNACKCheck && i2c_driver_isNACK())
 10890  0EFF  0021               	movlb	1	; select bank1
 10891  0F00  1DA0               	btfss	_i2c_status^(0+128),3
 10892  0F01  2F0D               	goto	i1l6371
 10893  0F02  318C  24FC  318E   	fcall	i1_i2c_driver_isNACK
 10894  0F05  1C03               	btfss	3,0
 10895  0F06  2F0D               	goto	i1l6371
 10896                           
 10897                           ;i2c_master.c: 428: {
 10898                           ;i2c_master.c: 429: i2c_status.state = I2C_ADDRESS_NACK;
 10899  0F07  300F               	movlw	15
 10900  0F08  0020               	movlb	0	; select bank0
 10901  0F09  00A0               	movwf	??i1_i2c_ISR
 10902  0F0A  0820               	movf	??i1_i2c_ISR,w
 10903  0F0B  0021               	movlb	1	; select bank1
 10904  0F0C  00AA               	movwf	(_i2c_status^(0+128)+10)
 10905  0F0D                     i1l6371:	
 10906                           
 10907                           ;i2c_master.c: 430: }
 10908                           ;i2c_master.c: 432: i2c_status.state = fsmStateTable[i2c_status.state]();
 10909  0F0D  0021               	movlb	1	; select bank1
 10910  0F0E  352A               	lslf	(_i2c_status^(0+128)+10),w
 10911  0F0F  3EA0               	addlw	(low (_fsmStateTable| (0+256)))& (0+255)
 10912  0F10  0086               	movwf	6
 10913  0F11  3001               	movlw	1	; select bank3/4
 10914  0F12  0087               	movwf	7
 10915  0F13  3F41               	moviw [1]fsr1
 10916  0F14  008A               	movwf	10
 10917  0F15  3F40               	moviw [0]fsr1
 10918  0F16  000A               	callw
 10919  0F17  318E               	pagesel	$
 10920  0F18  0020               	movlb	0	; select bank0
 10921  0F19  00A0               	movwf	??i1_i2c_ISR
 10922  0F1A  0820               	movf	??i1_i2c_ISR,w
 10923  0F1B  0021               	movlb	1	; select bank1
 10924  0F1C  00AA               	movwf	(_i2c_status^(0+128)+10)
 10925  0F1D  0008               	return
 10926  0F1E                     __end_ofi1_i2c_ISR:	
 10927                           
 10928                           	psect	text75
 10929  0B9A                     __ptext75:	
 10930 ;; *************** function i1_mssp_clearIRQ *****************
 10931 ;; Defined at:
 10932 ;;		line 53 in file "mcc_generated_files/i2c_driver.c"
 10933 ;; Parameters:    Size  Location     Type
 10934 ;;		None
 10935 ;; Auto vars:     Size  Location     Type
 10936 ;;		None
 10937 ;; Return value:  Size  Location     Type
 10938 ;;                  1    wreg      void 
 10939 ;; Registers used:
 10940 ;;		None
 10941 ;; Tracked objects:
 10942 ;;		On entry : 0/0
 10943 ;;		On exit  : 0/0
 10944 ;;		Unchanged: 0/0
 10945 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10946 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10947 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10948 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10949 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10950 ;;Total ram usage:        0 bytes
 10951 ;; Hardware stack levels used:    1
 10952 ;; This function calls:
 10953 ;;		Nothing
 10954 ;; This function is called by:
 10955 ;;		i1_i2c_ISR
 10956 ;; This function uses a non-reentrant model
 10957 ;;
 10958                           
 10959                           
 10960                           ;psect for function i1_mssp_clearIRQ
 10961  0B9A                     i1_mssp_clearIRQ:	
 10962                           
 10963                           ;i2c_driver.c: 55: PIR1bits.SSP1IF = 0;
 10964                           
 10965                           ;incstack = 0
 10966                           ; Regs used in i1_mssp_clearIRQ: []
 10967  0B9A  0020               	movlb	0	; select bank0
 10968  0B9B  1190               	bcf	16,3	;volatile
 10969  0B9C  0008               	return
 10970  0B9D                     __end_ofi1_mssp_clearIRQ:	
 10971                           
 10972                           	psect	text76
 10973  06A8                     __ptext76:	
 10974 ;; *************** function i1_do_I2C_RX *****************
 10975 ;; Defined at:
 10976 ;;		line 357 in file "mcc_generated_files/drivers/i2c_master.c"
 10977 ;; Parameters:    Size  Location     Type
 10978 ;;		None
 10979 ;; Auto vars:     Size  Location     Type
 10980 ;;		None
 10981 ;; Return value:  Size  Location     Type
 10982 ;;                  1    wreg      enum E12337
 10983 ;; Registers used:
 10984 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10985 ;; Tracked objects:
 10986 ;;		On entry : 0/0
 10987 ;;		On exit  : 0/0
 10988 ;;		Unchanged: 0/0
 10989 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10990 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10991 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10992 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10993 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10994 ;;Total ram usage:        1 bytes
 10995 ;; Hardware stack levels used:    1
 10996 ;; Hardware stack levels required when called:    3
 10997 ;; This function calls:
 10998 ;;		Absolute function
 10999 ;;		i1_do_I2C_DO_NACK_RESTART
 11000 ;;		i1_do_I2C_DO_NACK_STOP
 11001 ;;		i1_i2c_driver_getRXData
 11002 ;;		i1_i2c_driver_sendACK
 11003 ;;		i1_i2c_restartWrite
 11004 ;;		i1_rd1RegCompleteHandler
 11005 ;;		i1_rd2RegCompleteHandler
 11006 ;;		i1_rdBlkRegCompleteHandler
 11007 ;;		i1_returnReset
 11008 ;;		i1_returnStop
 11009 ;;		i1_wr1RegCompleteHandler
 11010 ;;		i1_wr2RegCompleteHandler
 11011 ;; This function is called by:
 11012 ;; This function uses a non-reentrant model
 11013 ;;
 11014                           
 11015                           
 11016                           ;psect for function i1_do_I2C_RX
 11017  06A8                     i1_do_I2C_RX:	
 11018  06A8                     i1l6213:	
 11019                           ;incstack = 0
 11020 ;; hardware stack exceeded
 11021                           ; Regs used in i1_do_I2C_RX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11022                           
 11023                           
 11024                           ;i2c_master.c: 359: *i2c_status.data_ptr++ = i2c_driver_getRXData();
 11025  06A8  318B  2394  3186   	fcall	i1_i2c_driver_getRXData
 11026  06AB  00FA               	movwf	??i1_do_I2C_RX
 11027  06AC  0021               	movlb	1	; select bank1
 11028  06AD  0822               	movf	(low ((_i2c_status| 0+2)))^(0+128),w
 11029  06AE  0086               	movwf	6
 11030  06AF  0823               	movf	((low ((_i2c_status| 0+2))+1))^(0+128),w
 11031  06B0  0087               	movwf	7
 11032  06B1  087A               	movf	??i1_do_I2C_RX,w
 11033  06B2  0081               	movwf	1
 11034  06B3  3001               	movlw	1
 11035  06B4  07A2               	addwf	(low ((_i2c_status| 0+2)))^(0+128),f
 11036  06B5  3000               	movlw	0
 11037  06B6  3DA3               	addwfc	((low ((_i2c_status| 0+2))+1))^(0+128),f
 11038                           
 11039                           ;i2c_master.c: 360: if(--i2c_status.data_length)
 11040  06B7  3001               	movlw	1
 11041  06B8  02A4               	subwf	(_i2c_status^(0+128)+4),f
 11042  06B9  3000               	movlw	0
 11043  06BA  3BA5               	subwfb	((_i2c_status+1)^(0+128)+4),f
 11044  06BB  0824               	movf	(_i2c_status^(0+128)+4),w
 11045  06BC  0425               	iorwf	((_i2c_status+1)^(0+128)+4),w
 11046  06BD  1903               	btfsc	3,2
 11047  06BE  2EC3               	goto	i1l706
 11048                           
 11049                           ;i2c_master.c: 361: {
 11050                           ;i2c_master.c: 362: i2c_driver_sendACK();
 11051  06BF  318B  23B5         	fcall	i1_i2c_driver_sendACK
 11052                           
 11053                           ;i2c_master.c: 363: return I2C_RCEN;
 11054  06C1  3005               	movlw	5
 11055                           
 11056                           ;i2c_master.c: 364: }
 11057  06C2  0008               	return
 11058  06C3                     i1l706:	
 11059                           
 11060                           ;i2c_master.c: 365: else
 11061                           ;i2c_master.c: 366: {
 11062                           ;i2c_master.c: 367: i2c_status.bufferFree = 1;
 11063  06C3  1520               	bsf	_i2c_status^(0+128),2
 11064                           
 11065                           ;i2c_master.c: 368: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
 11066  06C4  2ECB               	goto	i1l6237
 11067  06C5                     i1l6227:	
 11068                           ;i2c_master.c: 369: {
 11069                           ;i2c_master.c: 370: case i2c_restart_write:
 11070                           
 11071                           
 11072                           ;i2c_master.c: 371: case i2c_restart_read:
 11073                           ;i2c_master.c: 372: return do_I2C_DO_NACK_RESTART();
 11074  06C5  318B  23D5         	fcall	i1_do_I2C_DO_NACK_RESTART
 11075  06C7  0008               	return
 11076  06C8                     i1l6231:	
 11077                           ;i2c_master.c: 374: case i2c_continue:
 11078                           
 11079                           ;i2c_master.c: 373: default:
 11080                           
 11081                           
 11082                           ;i2c_master.c: 375: case i2c_stop:
 11083                           ;i2c_master.c: 376: return do_I2C_DO_NACK_STOP();
 11084  06C8  318B  23D1         	fcall	i1_do_I2C_DO_NACK_STOP
 11085                           
 11086                           ;i2c_master.c: 377: }
 11087  06CA  0008               	return
 11088  06CB                     i1l6237:	
 11089  06CB  0021               	movlb	1	; select bank1
 11090  06CC  0838               	movf	(low ((_i2c_status| 0+24)))^(0+128),w
 11091  06CD  00FA               	movwf	??i1_do_I2C_RX
 11092  06CE  087A               	movf	??i1_do_I2C_RX,w
 11093  06CF  00F9               	movwf	i1returnStop@p
 11094  06D0  300C               	movlw	12
 11095  06D1  3EA0               	addlw	(low (_i2c_status| 0))& (0+255)
 11096  06D2  0086               	movwf	6
 11097  06D3  0187               	clrf	7
 11098  06D4  3F41               	moviw [1]fsr1
 11099  06D5  008A               	movwf	10
 11100  06D6  3F40               	moviw [0]fsr1
 11101  06D7  000A               	callw
 11102  06D8  3186               	pagesel	$
 11103                           
 11104                           ; Switch size 1, requested type "space"
 11105                           ; Number of cases is 4, Range of values is 1 to 4
 11106                           ; switch strategies available:
 11107                           ; Name         Instructions Cycles
 11108                           ; simple_byte           13     7 (average)
 11109                           ; direct_byte           17     9 (fixed)
 11110                           ; jumptable            263     9 (fixed)
 11111                           ;	Chosen strategy is simple_byte
 11112  06D9  3A01               	xorlw	1	; case 1
 11113  06DA  1903               	skipnz
 11114  06DB  2EC8               	goto	i1l6231
 11115  06DC  3A03               	xorlw	3	; case 2
 11116  06DD  1903               	skipnz
 11117  06DE  2EC5               	goto	i1l6227
 11118  06DF  3A01               	xorlw	1	; case 3
 11119  06E0  1903               	skipnz
 11120  06E1  2EC5               	goto	i1l6227
 11121  06E2  3A07               	xorlw	7	; case 4
 11122  06E3  1903               	skipnz
 11123  06E4  2EC8               	goto	i1l6231
 11124  06E5  2EC8               	goto	i1l6231
 11125  06E6  0008               	return
 11126  06E7                     __end_ofi1_do_I2C_RX:	
 11127                           
 11128                           	psect	text77
 11129  058E                     __ptext77:	
 11130 ;; *************** function i1_do_I2C_TX *****************
 11131 ;; Defined at:
 11132 ;;		line 333 in file "mcc_generated_files/drivers/i2c_master.c"
 11133 ;; Parameters:    Size  Location     Type
 11134 ;;		None
 11135 ;; Auto vars:     Size  Location     Type
 11136 ;;		None
 11137 ;; Return value:  Size  Location     Type
 11138 ;;                  1    wreg      enum E12337
 11139 ;; Registers used:
 11140 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11141 ;; Tracked objects:
 11142 ;;		On entry : 0/0
 11143 ;;		On exit  : 0/0
 11144 ;;		Unchanged: 0/0
 11145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11146 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11147 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11148 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11149 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11150 ;;Total ram usage:        4 bytes
 11151 ;; Hardware stack levels used:    1
 11152 ;; Hardware stack levels required when called:    3
 11153 ;; This function calls:
 11154 ;;		Absolute function
 11155 ;;		i1_do_I2C_SEND_RESTART_READ
 11156 ;;		i1_do_I2C_SEND_RESTART_WRITE
 11157 ;;		i1_do_I2C_SEND_STOP
 11158 ;;		i1_i2c_driver_TXData
 11159 ;;		i1_i2c_driver_isNACK
 11160 ;;		i1_i2c_restartWrite
 11161 ;;		i1_rd1RegCompleteHandler
 11162 ;;		i1_rd2RegCompleteHandler
 11163 ;;		i1_rdBlkRegCompleteHandler
 11164 ;;		i1_returnReset
 11165 ;;		i1_returnStop
 11166 ;;		i1_wr1RegCompleteHandler
 11167 ;;		i1_wr2RegCompleteHandler
 11168 ;; This function is called by:
 11169 ;; This function uses a non-reentrant model
 11170 ;;
 11171                           
 11172                           
 11173                           ;psect for function i1_do_I2C_TX
 11174  058E                     i1_do_I2C_TX:	
 11175  058E                     i1l6183:	
 11176                           ;incstack = 0
 11177 ;; hardware stack exceeded
 11178                           ; Regs used in i1_do_I2C_TX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11179                           
 11180                           
 11181                           ;i2c_master.c: 335: if(i2c_driver_isNACK())
 11182  058E  318C  24FC  3185   	fcall	i1_i2c_driver_isNACK
 11183  0591  1803               	btfsc	3,0
 11184  0592  2D9D               	goto	i1l6201
 11185  0593  2DB9               	goto	i1l690
 11186  0594                     i1l6187:	
 11187                           ;i2c_master.c: 338: {
 11188                           ;i2c_master.c: 339: case i2c_restart_read:
 11189                           
 11190                           ;i2c_master.c: 336: {
 11191                           ;i2c_master.c: 337: switch(i2c_status.callbackTable[i2c_dataNACK](i2c_status.callbackPay
      +                          load[i2c_dataNACK]))
 11192                           
 11193                           
 11194                           ;i2c_master.c: 340: return do_I2C_SEND_RESTART_READ();
 11195  0594  318B  23BD         	fcall	i1_do_I2C_SEND_RESTART_READ
 11196  0596  0008               	return
 11197  0597                     i1l6191:	
 11198                           ;i2c_master.c: 341: case i2c_restart_write:
 11199                           
 11200                           
 11201                           ;i2c_master.c: 342: return do_I2C_SEND_RESTART_WRITE();
 11202  0597  318B  23C1         	fcall	i1_do_I2C_SEND_RESTART_WRITE
 11203  0599  0008               	return
 11204  059A                     i1l6195:	
 11205                           ;i2c_master.c: 344: case i2c_continue:
 11206                           
 11207                           ;i2c_master.c: 343: default:
 11208                           
 11209                           
 11210                           ;i2c_master.c: 345: case i2c_stop:
 11211                           ;i2c_master.c: 346: return do_I2C_SEND_STOP();
 11212  059A  318B  23C9         	fcall	i1_do_I2C_SEND_STOP
 11213                           
 11214                           ;i2c_master.c: 347: }
 11215  059C  0008               	return
 11216  059D                     i1l6201:	
 11217  059D  0021               	movlb	1	; select bank1
 11218  059E  083B               	movf	(low ((_i2c_status| 0+27)))^(0+128),w
 11219  059F  00FA               	movwf	??i1_do_I2C_TX
 11220  05A0  087A               	movf	??i1_do_I2C_TX,w
 11221  05A1  00F9               	movwf	i1returnStop@p
 11222  05A2  3012               	movlw	18
 11223  05A3  3EA0               	addlw	(low (_i2c_status| 0))& (0+255)
 11224  05A4  0086               	movwf	6
 11225  05A5  0187               	clrf	7
 11226  05A6  3F41               	moviw [1]fsr1
 11227  05A7  008A               	movwf	10
 11228  05A8  3F40               	moviw [0]fsr1
 11229  05A9  000A               	callw
 11230  05AA  3185               	pagesel	$
 11231                           
 11232                           ; Switch size 1, requested type "space"
 11233                           ; Number of cases is 4, Range of values is 1 to 4
 11234                           ; switch strategies available:
 11235                           ; Name         Instructions Cycles
 11236                           ; simple_byte           13     7 (average)
 11237                           ; direct_byte           17     9 (fixed)
 11238                           ; jumptable            263     9 (fixed)
 11239                           ;	Chosen strategy is simple_byte
 11240  05AB  3A01               	xorlw	1	; case 1
 11241  05AC  1903               	skipnz
 11242  05AD  2D9A               	goto	i1l6195
 11243  05AE  3A03               	xorlw	3	; case 2
 11244  05AF  1903               	skipnz
 11245  05B0  2D94               	goto	i1l6187
 11246  05B1  3A01               	xorlw	1	; case 3
 11247  05B2  1903               	skipnz
 11248  05B3  2D97               	goto	i1l6191
 11249  05B4  3A07               	xorlw	7	; case 4
 11250  05B5  1903               	skipnz
 11251  05B6  2D9A               	goto	i1l6195
 11252  05B7  2D9A               	goto	i1l6195
 11253                           
 11254                           ;i2c_master.c: 348: }
 11255  05B8  0008               	return
 11256  05B9                     i1l690:	
 11257                           
 11258                           ;i2c_master.c: 349: else
 11259                           ;i2c_master.c: 350: {
 11260                           ;i2c_master.c: 351: i2c_status.addressNACKCheck = 0;
 11261  05B9  0021               	movlb	1	; select bank1
 11262  05BA  11A0               	bcf	_i2c_status^(0+128),3
 11263                           
 11264                           ;i2c_master.c: 352: i2c_driver_TXData(*i2c_status.data_ptr++);
 11265  05BB  0823               	movf	((low ((_i2c_status| 0+2))+1))^(0+128),w
 11266  05BC  00FB               	movwf	??i1_do_I2C_TX+1
 11267  05BD  0822               	movf	(low ((_i2c_status| 0+2)))^(0+128),w
 11268  05BE  00FA               	movwf	??i1_do_I2C_TX
 11269  05BF  0AA2               	incf	(low ((_i2c_status| 0+2)))^(0+128),f
 11270  05C0  1903               	skipnz
 11271  05C1  0AA3               	incf	((low ((_i2c_status| 0+2))+1))^(0+128),f
 11272  05C2  087A               	movf	??i1_do_I2C_TX,w
 11273  05C3  0086               	movwf	6
 11274  05C4  087B               	movf	??i1_do_I2C_TX+1,w
 11275  05C5  0087               	movwf	7
 11276  05C6  0801               	movf	1,w
 11277  05C7  318B  23E5  3185   	fcall	i1_i2c_driver_TXData
 11278                           
 11279                           ;i2c_master.c: 353: return (--i2c_status.data_length)?I2C_TX:I2C_TX_EMPTY;
 11280  05CA  3001               	movlw	1
 11281  05CB  0021               	movlb	1	; select bank1
 11282  05CC  02A4               	subwf	(_i2c_status^(0+128)+4),f
 11283  05CD  3000               	movlw	0
 11284  05CE  3BA5               	subwfb	((_i2c_status+1)^(0+128)+4),f
 11285  05CF  0824               	movf	(_i2c_status^(0+128)+4),w
 11286  05D0  0425               	iorwf	((_i2c_status+1)^(0+128)+4),w
 11287  05D1  1D03               	btfss	3,2
 11288  05D2  2DD5               	goto	i1l6209
 11289  05D3  3006               	movlw	6
 11290  05D4  2DD6               	goto	L5
 11291  05D5                     i1l6209:	
 11292  05D5  3003               	movlw	3
 11293  05D6                     L5:	
 11294  05D6  00FC               	movwf	i1_do_I2C_TX$1049
 11295  05D7  3000               	movlw	0
 11296  05D8  00FD               	movwf	i1_do_I2C_TX$1049+1
 11297  05D9  087C               	movf	i1_do_I2C_TX$1049,w
 11298  05DA  0008               	return
 11299  05DB                     __end_ofi1_do_I2C_TX:	
 11300                           
 11301                           	psect	text78
 11302  0F1E                     __ptext78:	
 11303 ;; *************** function i1_do_I2C_DO_ADDRESS_NACK *****************
 11304 ;; Defined at:
 11305 ;;		line 319 in file "mcc_generated_files/drivers/i2c_master.c"
 11306 ;; Parameters:    Size  Location     Type
 11307 ;;		None
 11308 ;; Auto vars:     Size  Location     Type
 11309 ;;		None
 11310 ;; Return value:  Size  Location     Type
 11311 ;;                  1    wreg      enum E12337
 11312 ;; Registers used:
 11313 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11314 ;; Tracked objects:
 11315 ;;		On entry : 0/0
 11316 ;;		On exit  : 0/0
 11317 ;;		Unchanged: 0/0
 11318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11319 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11320 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11321 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11322 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11323 ;;Total ram usage:        1 bytes
 11324 ;; Hardware stack levels used:    1
 11325 ;; Hardware stack levels required when called:    3
 11326 ;; This function calls:
 11327 ;;		Absolute function
 11328 ;;		i1_do_I2C_SEND_RESTART
 11329 ;;		i1_do_I2C_SEND_STOP
 11330 ;;		i1_i2c_restartWrite
 11331 ;;		i1_rd1RegCompleteHandler
 11332 ;;		i1_rd2RegCompleteHandler
 11333 ;;		i1_rdBlkRegCompleteHandler
 11334 ;;		i1_returnReset
 11335 ;;		i1_returnStop
 11336 ;;		i1_wr1RegCompleteHandler
 11337 ;;		i1_wr2RegCompleteHandler
 11338 ;; This function is called by:
 11339 ;; This function uses a non-reentrant model
 11340 ;;
 11341                           
 11342                           
 11343                           ;psect for function i1_do_I2C_DO_ADDRESS_NACK
 11344  0F1E                     i1_do_I2C_DO_ADDRESS_NACK:	
 11345  0F1E                     i1l6167:	
 11346                           ;incstack = 0
 11347 ;; hardware stack exceeded
 11348                           ; Regs used in i1_do_I2C_DO_ADDRESS_NACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11349                           
 11350                           
 11351                           ;i2c_master.c: 321: i2c_status.addressNACKCheck = 0;
 11352  0F1E  0021               	movlb	1	; select bank1
 11353  0F1F  11A0               	bcf	_i2c_status^(0+128),3
 11354                           
 11355                           ;i2c_master.c: 322: i2c_status.error = I2C_FAIL;
 11356  0F20  3002               	movlw	2
 11357  0F21  00FA               	movwf	??i1_do_I2C_DO_ADDRESS_NACK
 11358  0F22  087A               	movf	??i1_do_I2C_DO_ADDRESS_NACK,w
 11359  0F23  00AB               	movwf	(_i2c_status^(0+128)+11)
 11360                           
 11361                           ;i2c_master.c: 323: switch(i2c_status.callbackTable[i2c_addressNACK](i2c_status.callback
      +                          Payload[i2c_addressNACK]))
 11362  0F24  2F2B               	goto	i1l6181
 11363  0F25                     i1l6171:	
 11364                           ;i2c_master.c: 324: {
 11365                           ;i2c_master.c: 325: case i2c_restart_read:
 11366                           
 11367                           
 11368                           ;i2c_master.c: 326: case i2c_restart_write:
 11369                           ;i2c_master.c: 327: return do_I2C_SEND_RESTART();
 11370  0F25  318B  23C5         	fcall	i1_do_I2C_SEND_RESTART
 11371  0F27  0008               	return
 11372  0F28                     i1l6175:	
 11373                           ;i2c_master.c: 328: default:
 11374                           
 11375                           
 11376                           ;i2c_master.c: 329: return do_I2C_SEND_STOP();
 11377  0F28  318B  23C9         	fcall	i1_do_I2C_SEND_STOP
 11378                           
 11379                           ;i2c_master.c: 330: }
 11380  0F2A  0008               	return
 11381  0F2B                     i1l6181:	
 11382  0F2B  0021               	movlb	1	; select bank1
 11383  0F2C  083A               	movf	(low ((_i2c_status| 0+26)))^(0+128),w
 11384  0F2D  00FA               	movwf	??i1_do_I2C_DO_ADDRESS_NACK
 11385  0F2E  087A               	movf	??i1_do_I2C_DO_ADDRESS_NACK,w
 11386  0F2F  00F9               	movwf	i1returnStop@p
 11387  0F30  3010               	movlw	16
 11388  0F31  3EA0               	addlw	(low (_i2c_status| 0))& (0+255)
 11389  0F32  0086               	movwf	6
 11390  0F33  0187               	clrf	7
 11391  0F34  3F41               	moviw [1]fsr1
 11392  0F35  008A               	movwf	10
 11393  0F36  3F40               	moviw [0]fsr1
 11394  0F37  000A               	callw
 11395  0F38  318F               	pagesel	$
 11396                           
 11397                           ; Switch size 1, requested type "space"
 11398                           ; Number of cases is 2, Range of values is 2 to 3
 11399                           ; switch strategies available:
 11400                           ; Name         Instructions Cycles
 11401                           ; simple_byte            7     4 (average)
 11402                           ; direct_byte           13     9 (fixed)
 11403                           ; jumptable            263     9 (fixed)
 11404                           ;	Chosen strategy is simple_byte
 11405  0F39  3A02               	xorlw	2	; case 2
 11406  0F3A  1903               	skipnz
 11407  0F3B  2F25               	goto	i1l6171
 11408  0F3C  3A01               	xorlw	1	; case 3
 11409  0F3D  1903               	skipnz
 11410  0F3E  2F25               	goto	i1l6171
 11411  0F3F  2F28               	goto	i1l6175
 11412  0F40  0008               	return
 11413  0F41                     __end_ofi1_do_I2C_DO_ADDRESS_NACK:	
 11414                           
 11415                           	psect	text79
 11416  0BD5                     __ptext79:	
 11417 ;; *************** function i1_do_I2C_DO_NACK_RESTART *****************
 11418 ;; Defined at:
 11419 ;;		line 311 in file "mcc_generated_files/drivers/i2c_master.c"
 11420 ;; Parameters:    Size  Location     Type
 11421 ;;		None
 11422 ;; Auto vars:     Size  Location     Type
 11423 ;;		None
 11424 ;; Return value:  Size  Location     Type
 11425 ;;                  1    wreg      enum E12337
 11426 ;; Registers used:
 11427 ;;		wreg, status,2, status,0, pclath, cstack
 11428 ;; Tracked objects:
 11429 ;;		On entry : 0/0
 11430 ;;		On exit  : 0/0
 11431 ;;		Unchanged: 0/0
 11432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11433 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11434 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11435 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11436 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11437 ;;Total ram usage:        0 bytes
 11438 ;; Hardware stack levels used:    1
 11439 ;; Hardware stack levels required when called:    1
 11440 ;; This function calls:
 11441 ;;		i1_i2c_driver_sendNACK
 11442 ;; This function is called by:
 11443 ;;		i1_do_I2C_RX
 11444 ;; This function uses a non-reentrant model
 11445 ;;
 11446                           
 11447                           
 11448                           ;psect for function i1_do_I2C_DO_NACK_RESTART
 11449  0BD5                     i1_do_I2C_DO_NACK_RESTART:	
 11450  0BD5                     i1l3203:	
 11451                           ;incstack = 0
 11452 ;; hardware stack exceeded
 11453                           ; Regs used in i1_do_I2C_DO_NACK_RESTART: [wreg+status,2+status,0+pclath+cstack]
 11454                           
 11455                           
 11456                           ;i2c_master.c: 313: i2c_driver_sendNACK();
 11457  0BD5  318B  23B9         	fcall	i1_i2c_driver_sendNACK
 11458                           
 11459                           ;i2c_master.c: 314: return I2C_SEND_RESTART;
 11460  0BD7  3009               	movlw	9
 11461  0BD8  0008               	return
 11462  0BD9                     __end_ofi1_do_I2C_DO_NACK_RESTART:	
 11463                           
 11464                           	psect	text80
 11465  0BD1                     __ptext80:	
 11466 ;; *************** function i1_do_I2C_DO_NACK_STOP *****************
 11467 ;; Defined at:
 11468 ;;		line 305 in file "mcc_generated_files/drivers/i2c_master.c"
 11469 ;; Parameters:    Size  Location     Type
 11470 ;;		None
 11471 ;; Auto vars:     Size  Location     Type
 11472 ;;		None
 11473 ;; Return value:  Size  Location     Type
 11474 ;;                  1    wreg      enum E12337
 11475 ;; Registers used:
 11476 ;;		wreg, status,2, status,0, pclath, cstack
 11477 ;; Tracked objects:
 11478 ;;		On entry : 0/0
 11479 ;;		On exit  : 0/0
 11480 ;;		Unchanged: 0/0
 11481 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11482 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11483 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11484 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11485 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11486 ;;Total ram usage:        0 bytes
 11487 ;; Hardware stack levels used:    1
 11488 ;; Hardware stack levels required when called:    1
 11489 ;; This function calls:
 11490 ;;		i1_i2c_driver_sendNACK
 11491 ;; This function is called by:
 11492 ;;		i1_do_I2C_RX
 11493 ;; This function uses a non-reentrant model
 11494 ;;
 11495                           
 11496                           
 11497                           ;psect for function i1_do_I2C_DO_NACK_STOP
 11498  0BD1                     i1_do_I2C_DO_NACK_STOP:	
 11499  0BD1                     i1l3197:	
 11500                           ;incstack = 0
 11501 ;; hardware stack exceeded
 11502                           ; Regs used in i1_do_I2C_DO_NACK_STOP: [wreg+status,2+status,0+pclath+cstack]
 11503                           
 11504                           
 11505                           ;i2c_master.c: 307: i2c_driver_sendNACK();
 11506  0BD1  318B  23B9         	fcall	i1_i2c_driver_sendNACK
 11507                           
 11508                           ;i2c_master.c: 308: return I2C_SEND_STOP;
 11509  0BD3  300A               	movlw	10
 11510  0BD4  0008               	return
 11511  0BD5                     __end_ofi1_do_I2C_DO_NACK_STOP:	
 11512                           
 11513                           	psect	text81
 11514  0BCD                     __ptext81:	
 11515 ;; *************** function i1_do_I2C_DO_ACK *****************
 11516 ;; Defined at:
 11517 ;;		line 299 in file "mcc_generated_files/drivers/i2c_master.c"
 11518 ;; Parameters:    Size  Location     Type
 11519 ;;		None
 11520 ;; Auto vars:     Size  Location     Type
 11521 ;;		None
 11522 ;; Return value:  Size  Location     Type
 11523 ;;                  1    wreg      enum E12337
 11524 ;; Registers used:
 11525 ;;		wreg, status,2, status,0, pclath, cstack
 11526 ;; Tracked objects:
 11527 ;;		On entry : 0/0
 11528 ;;		On exit  : 0/0
 11529 ;;		Unchanged: 0/0
 11530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11531 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11532 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11533 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11534 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11535 ;;Total ram usage:        0 bytes
 11536 ;; Hardware stack levels used:    1
 11537 ;; Hardware stack levels required when called:    1
 11538 ;; This function calls:
 11539 ;;		i1_i2c_driver_sendACK
 11540 ;; This function is called by:
 11541 ;; This function uses a non-reentrant model
 11542 ;;
 11543                           
 11544                           
 11545                           ;psect for function i1_do_I2C_DO_ACK
 11546  0BCD                     i1_do_I2C_DO_ACK:	
 11547  0BCD                     i1l3345:	
 11548                           ;incstack = 0
 11549 ;; hardware stack exceeded
 11550                           ; Regs used in i1_do_I2C_DO_ACK: [wreg+status,2+status,0+pclath+cstack]
 11551                           
 11552                           
 11553                           ;i2c_master.c: 301: i2c_driver_sendACK();
 11554  0BCD  318B  23B5         	fcall	i1_i2c_driver_sendACK
 11555                           
 11556                           ;i2c_master.c: 302: return I2C_RCEN;
 11557  0BCF  3005               	movlw	5
 11558  0BD0  0008               	return
 11559  0BD1                     __end_ofi1_do_I2C_DO_ACK:	
 11560                           
 11561                           	psect	text82
 11562  0BFA                     __ptext82:	
 11563 ;; *************** function i1_do_I2C_RCEN *****************
 11564 ;; Defined at:
 11565 ;;		line 292 in file "mcc_generated_files/drivers/i2c_master.c"
 11566 ;; Parameters:    Size  Location     Type
 11567 ;;		None
 11568 ;; Auto vars:     Size  Location     Type
 11569 ;;		None
 11570 ;; Return value:  Size  Location     Type
 11571 ;;                  1    wreg      enum E12337
 11572 ;; Registers used:
 11573 ;;		wreg, status,2, status,0, pclath, cstack
 11574 ;; Tracked objects:
 11575 ;;		On entry : 0/0
 11576 ;;		On exit  : 0/0
 11577 ;;		Unchanged: 0/0
 11578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11579 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11580 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11581 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11582 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11583 ;;Total ram usage:        0 bytes
 11584 ;; Hardware stack levels used:    1
 11585 ;; Hardware stack levels required when called:    1
 11586 ;; This function calls:
 11587 ;;		i1_i2c_driver_startRX
 11588 ;; This function is called by:
 11589 ;; This function uses a non-reentrant model
 11590 ;;
 11591                           
 11592                           
 11593                           ;psect for function i1_do_I2C_RCEN
 11594  0BFA                     i1_do_I2C_RCEN:	
 11595  0BFA                     i1l3337:	
 11596                           ;incstack = 0
 11597 ;; hardware stack exceeded
 11598                           ; Regs used in i1_do_I2C_RCEN: [wreg+status,2+status,0+pclath+cstack]
 11599                           
 11600                           
 11601                           ;i2c_master.c: 294: i2c_status.addressNACKCheck = 0;
 11602  0BFA  0021               	movlb	1	; select bank1
 11603  0BFB  11A0               	bcf	_i2c_status^(0+128),3
 11604                           
 11605                           ;i2c_master.c: 295: i2c_driver_startRX();
 11606  0BFC  318B  2391         	fcall	i1_i2c_driver_startRX
 11607                           
 11608                           ;i2c_master.c: 296: return I2C_RX;
 11609  0BFE  3004               	movlw	4
 11610  0BFF  0008               	return
 11611  0C00                     __end_ofi1_do_I2C_RCEN:	
 11612                           
 11613                           	psect	text83
 11614  0C31                     __ptext83:	
 11615 ;; *************** function i1_do_I2C_SEND_ADR_WRITE *****************
 11616 ;; Defined at:
 11617 ;;		line 285 in file "mcc_generated_files/drivers/i2c_master.c"
 11618 ;; Parameters:    Size  Location     Type
 11619 ;;		None
 11620 ;; Auto vars:     Size  Location     Type
 11621 ;;		None
 11622 ;; Return value:  Size  Location     Type
 11623 ;;                  1    wreg      enum E12337
 11624 ;; Registers used:
 11625 ;;		wreg, status,2, status,0, pclath, cstack
 11626 ;; Tracked objects:
 11627 ;;		On entry : 0/0
 11628 ;;		On exit  : 0/0
 11629 ;;		Unchanged: 0/0
 11630 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11631 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11632 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11633 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11634 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11635 ;;Total ram usage:        0 bytes
 11636 ;; Hardware stack levels used:    1
 11637 ;; Hardware stack levels required when called:    1
 11638 ;; This function calls:
 11639 ;;		i1_i2c_driver_TXData
 11640 ;; This function is called by:
 11641 ;; This function uses a non-reentrant model
 11642 ;;
 11643                           
 11644                           
 11645                           ;psect for function i1_do_I2C_SEND_ADR_WRITE
 11646  0C31                     i1_do_I2C_SEND_ADR_WRITE:	
 11647  0C31                     i1l3329:	
 11648                           ;incstack = 0
 11649 ;; hardware stack exceeded
 11650                           ; Regs used in i1_do_I2C_SEND_ADR_WRITE: [wreg+status,2+status,0+pclath+cstack]
 11651                           
 11652                           
 11653                           ;i2c_master.c: 287: i2c_status.addressNACKCheck = 1;
 11654  0C31  0021               	movlb	1	; select bank1
 11655  0C32  15A0               	bsf	_i2c_status^(0+128),3
 11656                           
 11657                           ;i2c_master.c: 288: i2c_driver_TXData(i2c_status.address << 1);
 11658  0C33  3521               	lslf	(_i2c_status^(0+128)+1),w
 11659  0C34  318B  23E5         	fcall	i1_i2c_driver_TXData
 11660                           
 11661                           ;i2c_master.c: 289: return I2C_TX;
 11662  0C36  3003               	movlw	3
 11663  0C37  0008               	return
 11664  0C38                     __end_ofi1_do_I2C_SEND_ADR_WRITE:	
 11665                           
 11666                           	psect	text84
 11667  0C38                     __ptext84:	
 11668 ;; *************** function i1_do_I2C_SEND_ADR_READ *****************
 11669 ;; Defined at:
 11670 ;;		line 278 in file "mcc_generated_files/drivers/i2c_master.c"
 11671 ;; Parameters:    Size  Location     Type
 11672 ;;		None
 11673 ;; Auto vars:     Size  Location     Type
 11674 ;;		None
 11675 ;; Return value:  Size  Location     Type
 11676 ;;                  1    wreg      enum E12337
 11677 ;; Registers used:
 11678 ;;		wreg, status,2, status,0, pclath, cstack
 11679 ;; Tracked objects:
 11680 ;;		On entry : 0/0
 11681 ;;		On exit  : 0/0
 11682 ;;		Unchanged: 0/0
 11683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11684 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11685 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11686 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11687 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11688 ;;Total ram usage:        0 bytes
 11689 ;; Hardware stack levels used:    1
 11690 ;; Hardware stack levels required when called:    1
 11691 ;; This function calls:
 11692 ;;		i1_i2c_driver_TXData
 11693 ;; This function is called by:
 11694 ;; This function uses a non-reentrant model
 11695 ;;
 11696                           
 11697                           
 11698                           ;psect for function i1_do_I2C_SEND_ADR_READ
 11699  0C38                     i1_do_I2C_SEND_ADR_READ:	
 11700  0C38                     i1l3321:	
 11701                           ;incstack = 0
 11702 ;; hardware stack exceeded
 11703                           ; Regs used in i1_do_I2C_SEND_ADR_READ: [wreg+status,2+status,0+pclath+cstack]
 11704                           
 11705                           
 11706                           ;i2c_master.c: 280: i2c_status.addressNACKCheck = 1;
 11707  0C38  0021               	movlb	1	; select bank1
 11708  0C39  15A0               	bsf	_i2c_status^(0+128),3
 11709                           
 11710                           ;i2c_master.c: 281: i2c_driver_TXData(i2c_status.address << 1 | 1);
 11711  0C3A  1403               	setc
 11712  0C3B  0D21               	rlf	(_i2c_status^(0+128)+1),w
 11713  0C3C  318B  23E5         	fcall	i1_i2c_driver_TXData
 11714                           
 11715                           ;i2c_master.c: 282: return I2C_RCEN;
 11716  0C3E  3005               	movlw	5
 11717  0C3F  0008               	return
 11718  0C40                     __end_ofi1_do_I2C_SEND_ADR_READ:	
 11719                           
 11720                           	psect	text85
 11721  0BC9                     __ptext85:	
 11722 ;; *************** function i1_do_I2C_SEND_STOP *****************
 11723 ;; Defined at:
 11724 ;;		line 272 in file "mcc_generated_files/drivers/i2c_master.c"
 11725 ;; Parameters:    Size  Location     Type
 11726 ;;		None
 11727 ;; Auto vars:     Size  Location     Type
 11728 ;;		None
 11729 ;; Return value:  Size  Location     Type
 11730 ;;                  1    wreg      enum E12337
 11731 ;; Registers used:
 11732 ;;		wreg, status,2, status,0, pclath, cstack
 11733 ;; Tracked objects:
 11734 ;;		On entry : 0/0
 11735 ;;		On exit  : 0/0
 11736 ;;		Unchanged: 0/0
 11737 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11738 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11739 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11740 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11741 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11742 ;;Total ram usage:        0 bytes
 11743 ;; Hardware stack levels used:    1
 11744 ;; Hardware stack levels required when called:    1
 11745 ;; This function calls:
 11746 ;;		i1_i2c_driver_stop
 11747 ;; This function is called by:
 11748 ;;		i1_do_I2C_DO_ADDRESS_NACK
 11749 ;;		i1_do_I2C_TX
 11750 ;;		i1_do_I2C_TX_EMPTY
 11751 ;; This function uses a non-reentrant model
 11752 ;;
 11753                           
 11754                           
 11755                           ;psect for function i1_do_I2C_SEND_STOP
 11756  0BC9                     i1_do_I2C_SEND_STOP:	
 11757  0BC9                     i1l3191:	
 11758                           ;incstack = 0
 11759 ;; hardware stack exceeded
 11760                           ; Regs used in i1_do_I2C_SEND_STOP: [wreg+status,2+status,0+pclath+cstack]
 11761                           
 11762                           
 11763                           ;i2c_master.c: 274: i2c_driver_stop();
 11764  0BC9  318B  238E         	fcall	i1_i2c_driver_stop
 11765                           
 11766                           ;i2c_master.c: 275: return I2C_IDLE;
 11767  0BCB  3000               	movlw	0
 11768  0BCC  0008               	return
 11769  0BCD                     __end_ofi1_do_I2C_SEND_STOP:	
 11770                           
 11771                           	psect	text86
 11772  0BC5                     __ptext86:	
 11773 ;; *************** function i1_do_I2C_SEND_RESTART *****************
 11774 ;; Defined at:
 11775 ;;		line 266 in file "mcc_generated_files/drivers/i2c_master.c"
 11776 ;; Parameters:    Size  Location     Type
 11777 ;;		None
 11778 ;; Auto vars:     Size  Location     Type
 11779 ;;		None
 11780 ;; Return value:  Size  Location     Type
 11781 ;;                  1    wreg      enum E12337
 11782 ;; Registers used:
 11783 ;;		wreg, status,2, status,0, pclath, cstack
 11784 ;; Tracked objects:
 11785 ;;		On entry : 0/0
 11786 ;;		On exit  : 0/0
 11787 ;;		Unchanged: 0/0
 11788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11789 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11790 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11791 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11792 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11793 ;;Total ram usage:        0 bytes
 11794 ;; Hardware stack levels used:    1
 11795 ;; Hardware stack levels required when called:    1
 11796 ;; This function calls:
 11797 ;;		i1_i2c_driver_restart
 11798 ;; This function is called by:
 11799 ;;		i1_do_I2C_DO_ADDRESS_NACK
 11800 ;;		i1_do_I2C_TX_EMPTY
 11801 ;; This function uses a non-reentrant model
 11802 ;;
 11803                           
 11804                           
 11805                           ;psect for function i1_do_I2C_SEND_RESTART
 11806  0BC5                     i1_do_I2C_SEND_RESTART:	
 11807  0BC5                     i1l3185:	
 11808                           ;incstack = 0
 11809 ;; hardware stack exceeded
 11810                           ; Regs used in i1_do_I2C_SEND_RESTART: [wreg+status,2+status,0+pclath+cstack]
 11811                           
 11812                           
 11813                           ;i2c_master.c: 268: i2c_driver_restart();
 11814  0BC5  318B  238B         	fcall	i1_i2c_driver_restart
 11815                           
 11816                           ;i2c_master.c: 269: return I2C_SEND_ADR_READ;
 11817  0BC7  3001               	movlw	1
 11818  0BC8  0008               	return
 11819  0BC9                     __end_ofi1_do_I2C_SEND_RESTART:	
 11820                           
 11821                           	psect	text87
 11822  0BC1                     __ptext87:	
 11823 ;; *************** function i1_do_I2C_SEND_RESTART_WRITE *****************
 11824 ;; Defined at:
 11825 ;;		line 260 in file "mcc_generated_files/drivers/i2c_master.c"
 11826 ;; Parameters:    Size  Location     Type
 11827 ;;		None
 11828 ;; Auto vars:     Size  Location     Type
 11829 ;;		None
 11830 ;; Return value:  Size  Location     Type
 11831 ;;                  1    wreg      enum E12337
 11832 ;; Registers used:
 11833 ;;		wreg, status,2, status,0, pclath, cstack
 11834 ;; Tracked objects:
 11835 ;;		On entry : 0/0
 11836 ;;		On exit  : 0/0
 11837 ;;		Unchanged: 0/0
 11838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11839 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11840 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11841 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11842 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11843 ;;Total ram usage:        0 bytes
 11844 ;; Hardware stack levels used:    1
 11845 ;; Hardware stack levels required when called:    1
 11846 ;; This function calls:
 11847 ;;		i1_i2c_driver_restart
 11848 ;; This function is called by:
 11849 ;;		i1_do_I2C_TX
 11850 ;; This function uses a non-reentrant model
 11851 ;;
 11852                           
 11853                           
 11854                           ;psect for function i1_do_I2C_SEND_RESTART_WRITE
 11855  0BC1                     i1_do_I2C_SEND_RESTART_WRITE:	
 11856  0BC1                     i1l3179:	
 11857                           ;incstack = 0
 11858 ;; hardware stack exceeded
 11859                           ; Regs used in i1_do_I2C_SEND_RESTART_WRITE: [wreg+status,2+status,0+pclath+cstack]
 11860                           
 11861                           
 11862                           ;i2c_master.c: 262: i2c_driver_restart();
 11863  0BC1  318B  238B         	fcall	i1_i2c_driver_restart
 11864                           
 11865                           ;i2c_master.c: 263: return I2C_SEND_ADR_WRITE;
 11866  0BC3  3002               	movlw	2
 11867  0BC4  0008               	return
 11868  0BC5                     __end_ofi1_do_I2C_SEND_RESTART_WRITE:	
 11869                           
 11870                           	psect	text88
 11871  0BBD                     __ptext88:	
 11872 ;; *************** function i1_do_I2C_SEND_RESTART_READ *****************
 11873 ;; Defined at:
 11874 ;;		line 254 in file "mcc_generated_files/drivers/i2c_master.c"
 11875 ;; Parameters:    Size  Location     Type
 11876 ;;		None
 11877 ;; Auto vars:     Size  Location     Type
 11878 ;;		None
 11879 ;; Return value:  Size  Location     Type
 11880 ;;                  1    wreg      enum E12337
 11881 ;; Registers used:
 11882 ;;		wreg, status,2, status,0, pclath, cstack
 11883 ;; Tracked objects:
 11884 ;;		On entry : 0/0
 11885 ;;		On exit  : 0/0
 11886 ;;		Unchanged: 0/0
 11887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11888 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11889 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11890 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11891 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11892 ;;Total ram usage:        0 bytes
 11893 ;; Hardware stack levels used:    1
 11894 ;; Hardware stack levels required when called:    1
 11895 ;; This function calls:
 11896 ;;		i1_i2c_driver_restart
 11897 ;; This function is called by:
 11898 ;;		i1_do_I2C_TX
 11899 ;; This function uses a non-reentrant model
 11900 ;;
 11901                           
 11902                           
 11903                           ;psect for function i1_do_I2C_SEND_RESTART_READ
 11904  0BBD                     i1_do_I2C_SEND_RESTART_READ:	
 11905  0BBD                     i1l3173:	
 11906                           ;incstack = 0
 11907 ;; hardware stack exceeded
 11908                           ; Regs used in i1_do_I2C_SEND_RESTART_READ: [wreg+status,2+status,0+pclath+cstack]
 11909                           
 11910                           
 11911                           ;i2c_master.c: 256: i2c_driver_restart();
 11912  0BBD  318B  238B         	fcall	i1_i2c_driver_restart
 11913                           
 11914                           ;i2c_master.c: 257: return I2C_SEND_ADR_READ;
 11915  0BBF  3001               	movlw	1
 11916  0BC0  0008               	return
 11917  0BC1                     __end_ofi1_do_I2C_SEND_RESTART_READ:	
 11918                           
 11919                           	psect	text89
 11920  0BEA                     __ptext89:	
 11921 ;; *************** function i1_do_I2C_IDLE *****************
 11922 ;; Defined at:
 11923 ;;		line 247 in file "mcc_generated_files/drivers/i2c_master.c"
 11924 ;; Parameters:    Size  Location     Type
 11925 ;;		None
 11926 ;; Auto vars:     Size  Location     Type
 11927 ;;		None
 11928 ;; Return value:  Size  Location     Type
 11929 ;;                  1    wreg      enum E12337
 11930 ;; Registers used:
 11931 ;;		wreg, status,2
 11932 ;; Tracked objects:
 11933 ;;		On entry : 0/0
 11934 ;;		On exit  : 0/0
 11935 ;;		Unchanged: 0/0
 11936 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11937 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11938 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11939 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11940 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11941 ;;Total ram usage:        0 bytes
 11942 ;; Hardware stack levels used:    1
 11943 ;; This function calls:
 11944 ;;		Nothing
 11945 ;; This function is called by:
 11946 ;; This function uses a non-reentrant model
 11947 ;;
 11948                           
 11949                           
 11950                           ;psect for function i1_do_I2C_IDLE
 11951  0BEA                     i1_do_I2C_IDLE:	
 11952  0BEA                     i1l3313:	
 11953                           ;incstack = 0
 11954                           ; Regs used in i1_do_I2C_IDLE: [wreg+status,2]
 11955                           
 11956                           
 11957                           ;i2c_master.c: 249: i2c_status.busy = 0;
 11958  0BEA  0021               	movlb	1	; select bank1
 11959  0BEB  1020               	bcf	_i2c_status^(0+128),0
 11960                           
 11961                           ;i2c_master.c: 250: i2c_status.error = I2C_NOERR;
 11962  0BEC  01AB               	clrf	(_i2c_status^(0+128)+11)
 11963                           
 11964                           ;i2c_master.c: 251: return I2C_RESET;
 11965  0BED  300E               	movlw	14
 11966  0BEE  0008               	return
 11967  0BEF                     __end_ofi1_do_I2C_IDLE:	
 11968                           
 11969                           	psect	text90
 11970  0C2A                     __ptext90:	
 11971 ;; *************** function i1_do_I2C_RESET *****************
 11972 ;; Defined at:
 11973 ;;		line 239 in file "mcc_generated_files/drivers/i2c_master.c"
 11974 ;; Parameters:    Size  Location     Type
 11975 ;;		None
 11976 ;; Auto vars:     Size  Location     Type
 11977 ;;		None
 11978 ;; Return value:  Size  Location     Type
 11979 ;;                  1    wreg      enum E12337
 11980 ;; Registers used:
 11981 ;;		wreg, status,2, status,0, pclath, cstack
 11982 ;; Tracked objects:
 11983 ;;		On entry : 0/0
 11984 ;;		On exit  : 0/0
 11985 ;;		Unchanged: 0/0
 11986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11987 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11988 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11989 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11990 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11991 ;;Total ram usage:        0 bytes
 11992 ;; Hardware stack levels used:    1
 11993 ;; Hardware stack levels required when called:    1
 11994 ;; This function calls:
 11995 ;;		i1_i2c_driver_resetBus
 11996 ;; This function is called by:
 11997 ;; This function uses a non-reentrant model
 11998 ;;
 11999                           
 12000                           
 12001                           ;psect for function i1_do_I2C_RESET
 12002  0C2A                     i1_do_I2C_RESET:	
 12003  0C2A                     i1l3303:	
 12004                           ;incstack = 0
 12005 ;; hardware stack exceeded
 12006                           ; Regs used in i1_do_I2C_RESET: [wreg+status,2+status,0+pclath+cstack]
 12007                           
 12008                           
 12009                           ;i2c_master.c: 241: i2c_driver_resetBus();
 12010  0C2A  318B  237F         	fcall	i1_i2c_driver_resetBus
 12011                           
 12012                           ;i2c_master.c: 242: i2c_status.busy = 0;
 12013  0C2C  0021               	movlb	1	; select bank1
 12014  0C2D  1020               	bcf	_i2c_status^(0+128),0
 12015                           
 12016                           ;i2c_master.c: 243: i2c_status.error = I2C_NOERR;
 12017  0C2E  01AB               	clrf	(_i2c_status^(0+128)+11)
 12018                           
 12019                           ;i2c_master.c: 244: return I2C_RESET;
 12020  0C2F  300E               	movlw	14
 12021  0C30  0008               	return
 12022  0C31                     __end_ofi1_do_I2C_RESET:	
 12023                           
 12024                           	psect	text91
 12025  0FAE                     __ptext91:	
 12026 ;; *************** function i1_do_I2C_TX_EMPTY *****************
 12027 ;; Defined at:
 12028 ;;		line 382 in file "mcc_generated_files/drivers/i2c_master.c"
 12029 ;; Parameters:    Size  Location     Type
 12030 ;;		None
 12031 ;; Auto vars:     Size  Location     Type
 12032 ;;		None
 12033 ;; Return value:  Size  Location     Type
 12034 ;;                  1    wreg      enum E12337
 12035 ;; Registers used:
 12036 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12037 ;; Tracked objects:
 12038 ;;		On entry : 0/0
 12039 ;;		On exit  : 0/0
 12040 ;;		Unchanged: 0/0
 12041 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12042 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12043 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12044 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12045 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12046 ;;Total ram usage:        1 bytes
 12047 ;; Hardware stack levels used:    1
 12048 ;; Hardware stack levels required when called:    3
 12049 ;; This function calls:
 12050 ;;		Absolute function
 12051 ;;		i1_do_I2C_SEND_RESTART
 12052 ;;		i1_do_I2C_SEND_STOP
 12053 ;;		i1_i2c_restartWrite
 12054 ;;		i1_mssp_setIRQ
 12055 ;;		i1_rd1RegCompleteHandler
 12056 ;;		i1_rd2RegCompleteHandler
 12057 ;;		i1_rdBlkRegCompleteHandler
 12058 ;;		i1_returnReset
 12059 ;;		i1_returnStop
 12060 ;;		i1_wr1RegCompleteHandler
 12061 ;;		i1_wr2RegCompleteHandler
 12062 ;; This function is called by:
 12063 ;; This function uses a non-reentrant model
 12064 ;;
 12065                           
 12066                           
 12067                           ;psect for function i1_do_I2C_TX_EMPTY
 12068  0FAE                     i1_do_I2C_TX_EMPTY:	
 12069  0FAE                     i1l6239:	
 12070                           ;incstack = 0
 12071 ;; hardware stack exceeded
 12072                           ; Regs used in i1_do_I2C_TX_EMPTY: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12073                           
 12074                           
 12075                           ;i2c_master.c: 384: i2c_status.bufferFree = 1;
 12076  0FAE  0021               	movlb	1	; select bank1
 12077  0FAF  1520               	bsf	_i2c_status^(0+128),2
 12078                           
 12079                           ;i2c_master.c: 385: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
 12080  0FB0  2FBB               	goto	i1l6257
 12081  0FB1                     i1l6241:	
 12082                           ;i2c_master.c: 386: {
 12083                           ;i2c_master.c: 387: case i2c_restart_read:
 12084                           
 12085                           
 12086                           ;i2c_master.c: 388: case i2c_restart_write:
 12087                           ;i2c_master.c: 389: return do_I2C_SEND_RESTART();
 12088  0FB1  318B  23C5         	fcall	i1_do_I2C_SEND_RESTART
 12089  0FB3  0008               	return
 12090  0FB4                     i1l6245:	
 12091                           ;i2c_master.c: 390: case i2c_continue:
 12092                           
 12093                           
 12094                           ;i2c_master.c: 391: mssp_setIRQ();
 12095  0FB4  318B  2397         	fcall	i1_mssp_setIRQ
 12096                           
 12097                           ;i2c_master.c: 392: return I2C_TX;
 12098  0FB6  3003               	movlw	3
 12099  0FB7  0008               	return
 12100  0FB8                     i1l6251:	
 12101                           ;i2c_master.c: 394: case i2c_stop:
 12102                           
 12103                           ;i2c_master.c: 393: default:
 12104                           
 12105                           
 12106                           ;i2c_master.c: 395: return do_I2C_SEND_STOP();
 12107  0FB8  318B  23C9         	fcall	i1_do_I2C_SEND_STOP
 12108                           
 12109                           ;i2c_master.c: 396: }
 12110  0FBA  0008               	return
 12111  0FBB                     i1l6257:	
 12112  0FBB  0021               	movlb	1	; select bank1
 12113  0FBC  0838               	movf	(low ((_i2c_status| 0+24)))^(0+128),w
 12114  0FBD  00FA               	movwf	??i1_do_I2C_TX_EMPTY
 12115  0FBE  087A               	movf	??i1_do_I2C_TX_EMPTY,w
 12116  0FBF  00F9               	movwf	i1returnStop@p
 12117  0FC0  300C               	movlw	12
 12118  0FC1  3EA0               	addlw	(low (_i2c_status| 0))& (0+255)
 12119  0FC2  0086               	movwf	6
 12120  0FC3  0187               	clrf	7
 12121  0FC4  3F41               	moviw [1]fsr1
 12122  0FC5  008A               	movwf	10
 12123  0FC6  3F40               	moviw [0]fsr1
 12124  0FC7  000A               	callw
 12125  0FC8  318F               	pagesel	$
 12126                           
 12127                           ; Switch size 1, requested type "space"
 12128                           ; Number of cases is 4, Range of values is 1 to 4
 12129                           ; switch strategies available:
 12130                           ; Name         Instructions Cycles
 12131                           ; simple_byte           13     7 (average)
 12132                           ; direct_byte           17     9 (fixed)
 12133                           ; jumptable            263     9 (fixed)
 12134                           ;	Chosen strategy is simple_byte
 12135  0FC9  3A01               	xorlw	1	; case 1
 12136  0FCA  1903               	skipnz
 12137  0FCB  2FB8               	goto	i1l6251
 12138  0FCC  3A03               	xorlw	3	; case 2
 12139  0FCD  1903               	skipnz
 12140  0FCE  2FB1               	goto	i1l6241
 12141  0FCF  3A01               	xorlw	1	; case 3
 12142  0FD0  1903               	skipnz
 12143  0FD1  2FB1               	goto	i1l6241
 12144  0FD2  3A07               	xorlw	7	; case 4
 12145  0FD3  1903               	skipnz
 12146  0FD4  2FB4               	goto	i1l6245
 12147  0FD5  2FB8               	goto	i1l6251
 12148  0FD6  0008               	return
 12149  0FD7                     __end_ofi1_do_I2C_TX_EMPTY:	
 12150                           
 12151                           	psect	text92
 12152  0B97                     __ptext92:	
 12153 ;; *************** function i1_mssp_setIRQ *****************
 12154 ;; Defined at:
 12155 ;;		line 58 in file "mcc_generated_files/i2c_driver.c"
 12156 ;; Parameters:    Size  Location     Type
 12157 ;;		None
 12158 ;; Auto vars:     Size  Location     Type
 12159 ;;		None
 12160 ;; Return value:  Size  Location     Type
 12161 ;;                  1    wreg      void 
 12162 ;; Registers used:
 12163 ;;		None
 12164 ;; Tracked objects:
 12165 ;;		On entry : 0/0
 12166 ;;		On exit  : 0/0
 12167 ;;		Unchanged: 0/0
 12168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12169 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12170 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12171 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12172 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12173 ;;Total ram usage:        0 bytes
 12174 ;; Hardware stack levels used:    1
 12175 ;; This function calls:
 12176 ;;		Nothing
 12177 ;; This function is called by:
 12178 ;;		i1_do_I2C_TX_EMPTY
 12179 ;; This function uses a non-reentrant model
 12180 ;;
 12181                           
 12182                           
 12183                           ;psect for function i1_mssp_setIRQ
 12184  0B97                     i1_mssp_setIRQ:	
 12185                           
 12186                           ;i2c_driver.c: 60: PIR1bits.SSP1IF = 1;
 12187                           
 12188                           ;incstack = 0
 12189 ;; hardware stack exceeded
 12190                           ; Regs used in i1_mssp_setIRQ: []
 12191  0B97  0020               	movlb	0	; select bank0
 12192  0B98  1590               	bsf	16,3	;volatile
 12193  0B99  0008               	return
 12194  0B9A                     __end_ofi1_mssp_setIRQ:	
 12195                           
 12196                           	psect	text93
 12197  0CFC                     __ptext93:	
 12198 ;; *************** function i1_i2c_driver_isNACK *****************
 12199 ;; Defined at:
 12200 ;;		line 161 in file "mcc_generated_files/i2c_driver.c"
 12201 ;; Parameters:    Size  Location     Type
 12202 ;;		None
 12203 ;; Auto vars:     Size  Location     Type
 12204 ;;		None
 12205 ;; Return value:  Size  Location     Type
 12206 ;;		None               void
 12207 ;; Registers used:
 12208 ;;		wreg, status,2, status,0
 12209 ;; Tracked objects:
 12210 ;;		On entry : 0/0
 12211 ;;		On exit  : 0/0
 12212 ;;		Unchanged: 0/0
 12213 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12214 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12215 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12216 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12217 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12218 ;;Total ram usage:        1 bytes
 12219 ;; Hardware stack levels used:    1
 12220 ;; This function calls:
 12221 ;;		Nothing
 12222 ;; This function is called by:
 12223 ;;		i1_do_I2C_TX
 12224 ;;		i1_i2c_ISR
 12225 ;; This function uses a non-reentrant model
 12226 ;;
 12227                           
 12228                           
 12229                           ;psect for function i1_i2c_driver_isNACK
 12230  0CFC                     i1_i2c_driver_isNACK:	
 12231                           
 12232                           ;i2c_driver.c: 163: return SSP1CON2bits.ACKSTAT = 1;
 12233                           
 12234                           ;incstack = 0
 12235                           ; Regs used in i1_i2c_driver_isNACK: [wreg+status,2+status,0]
 12236  0CFC  0024               	movlb	4	; select bank4
 12237  0CFD  0816               	movf	22,w	;volatile
 12238  0CFE  39BF               	andlw	-65
 12239  0CFF  3840               	iorlw	64
 12240  0D00  0096               	movwf	22	;volatile
 12241  0D01  0E16               	swapf	22,w	;volatile
 12242  0D02  0C89               	rrf	9,f
 12243  0D03  0C89               	rrf	9,f
 12244  0D04  3901               	andlw	1
 12245  0D05  00F0               	movwf	??i1_i2c_driver_isNACK
 12246  0D06  0C70               	rrf	??i1_i2c_driver_isNACK,w
 12247  0D07  0008               	return
 12248  0D08                     __end_ofi1_i2c_driver_isNACK:	
 12249                           
 12250                           	psect	text94
 12251  0BE5                     __ptext94:	
 12252 ;; *************** function i1_i2c_driver_TXData *****************
 12253 ;; Defined at:
 12254 ;;		line 186 in file "mcc_generated_files/i2c_driver.c"
 12255 ;; Parameters:    Size  Location     Type
 12256 ;;  d               1    wreg     unsigned char 
 12257 ;; Auto vars:     Size  Location     Type
 12258 ;;  d               1    0[COMMON] unsigned char 
 12259 ;; Return value:  Size  Location     Type
 12260 ;;                  1    wreg      void 
 12261 ;; Registers used:
 12262 ;;		wreg
 12263 ;; Tracked objects:
 12264 ;;		On entry : 0/0
 12265 ;;		On exit  : 0/0
 12266 ;;		Unchanged: 0/0
 12267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12268 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12269 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12270 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12271 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12272 ;;Total ram usage:        1 bytes
 12273 ;; Hardware stack levels used:    1
 12274 ;; This function calls:
 12275 ;;		Nothing
 12276 ;; This function is called by:
 12277 ;;		i1_do_I2C_SEND_ADR_READ
 12278 ;;		i1_do_I2C_SEND_ADR_WRITE
 12279 ;;		i1_do_I2C_TX
 12280 ;; This function uses a non-reentrant model
 12281 ;;
 12282                           
 12283                           
 12284                           ;psect for function i1_i2c_driver_TXData
 12285  0BE5                     i1_i2c_driver_TXData:	
 12286                           
 12287                           ;incstack = 0
 12288 ;; hardware stack exceeded
 12289                           ; Regs used in i1_i2c_driver_TXData: [wreg]
 12290                           ;i1i2c_driver_TXData@d stored from wreg
 12291  0BE5  00F0               	movwf	i1i2c_driver_TXData@d
 12292                           
 12293                           ;i2c_driver.c: 188: SSP1BUF = d;
 12294  0BE6  0870               	movf	i1i2c_driver_TXData@d,w
 12295  0BE7  0024               	movlb	4	; select bank4
 12296  0BE8  0091               	movwf	17	;volatile
 12297  0BE9  0008               	return
 12298  0BEA                     __end_ofi1_i2c_driver_TXData:	
 12299                           
 12300                           	psect	text95
 12301  0B94                     __ptext95:	
 12302 ;; *************** function i1_i2c_driver_getRXData *****************
 12303 ;; Defined at:
 12304 ;;		line 171 in file "mcc_generated_files/i2c_driver.c"
 12305 ;; Parameters:    Size  Location     Type
 12306 ;;		None
 12307 ;; Auto vars:     Size  Location     Type
 12308 ;;		None
 12309 ;; Return value:  Size  Location     Type
 12310 ;;                  1    wreg      unsigned char 
 12311 ;; Registers used:
 12312 ;;		wreg
 12313 ;; Tracked objects:
 12314 ;;		On entry : 0/0
 12315 ;;		On exit  : 0/0
 12316 ;;		Unchanged: 0/0
 12317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12318 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12319 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12320 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12321 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12322 ;;Total ram usage:        0 bytes
 12323 ;; Hardware stack levels used:    1
 12324 ;; This function calls:
 12325 ;;		Nothing
 12326 ;; This function is called by:
 12327 ;;		i1_do_I2C_RX
 12328 ;; This function uses a non-reentrant model
 12329 ;;
 12330                           
 12331                           
 12332                           ;psect for function i1_i2c_driver_getRXData
 12333  0B94                     i1_i2c_driver_getRXData:	
 12334                           
 12335                           ;i2c_driver.c: 173: return SSP1BUF;
 12336                           
 12337                           ;incstack = 0
 12338 ;; hardware stack exceeded
 12339                           ; Regs used in i1_i2c_driver_getRXData: [wreg]
 12340  0B94  0024               	movlb	4	; select bank4
 12341  0B95  0811               	movf	17,w	;volatile
 12342  0B96  0008               	return
 12343  0B97                     __end_ofi1_i2c_driver_getRXData:	
 12344                           
 12345                           	psect	text96
 12346  0BB9                     __ptext96:	
 12347 ;; *************** function i1_i2c_driver_sendNACK *****************
 12348 ;; Defined at:
 12349 ;;		line 202 in file "mcc_generated_files/i2c_driver.c"
 12350 ;; Parameters:    Size  Location     Type
 12351 ;;		None
 12352 ;; Auto vars:     Size  Location     Type
 12353 ;;		None
 12354 ;; Return value:  Size  Location     Type
 12355 ;;                  1    wreg      void 
 12356 ;; Registers used:
 12357 ;;		None
 12358 ;; Tracked objects:
 12359 ;;		On entry : 0/0
 12360 ;;		On exit  : 0/0
 12361 ;;		Unchanged: 0/0
 12362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12363 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12364 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12365 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12366 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12367 ;;Total ram usage:        0 bytes
 12368 ;; Hardware stack levels used:    1
 12369 ;; This function calls:
 12370 ;;		Nothing
 12371 ;; This function is called by:
 12372 ;;		i1_do_I2C_DO_NACK_STOP
 12373 ;;		i1_do_I2C_DO_NACK_RESTART
 12374 ;; This function uses a non-reentrant model
 12375 ;;
 12376                           
 12377                           
 12378                           ;psect for function i1_i2c_driver_sendNACK
 12379  0BB9                     i1_i2c_driver_sendNACK:	
 12380                           
 12381                           ;i2c_driver.c: 204: SSP1CON2bits.ACKDT = 1;
 12382                           
 12383                           ;incstack = 0
 12384 ;; hardware stack exceeded
 12385                           ; Regs used in i1_i2c_driver_sendNACK: []
 12386  0BB9  0024               	movlb	4	; select bank4
 12387  0BBA  1696               	bsf	22,5	;volatile
 12388                           
 12389                           ;i2c_driver.c: 205: SSP1CON2bits.ACKEN = 1;
 12390  0BBB  1616               	bsf	22,4	;volatile
 12391  0BBC  0008               	return
 12392  0BBD                     __end_ofi1_i2c_driver_sendNACK:	
 12393                           
 12394                           	psect	text97
 12395  0B7F                     __ptext97:	
 12396 ;; *************** function i1_i2c_driver_resetBus *****************
 12397 ;; Defined at:
 12398 ;;		line 141 in file "mcc_generated_files/i2c_driver.c"
 12399 ;; Parameters:    Size  Location     Type
 12400 ;;		None
 12401 ;; Auto vars:     Size  Location     Type
 12402 ;;		None
 12403 ;; Return value:  Size  Location     Type
 12404 ;;                  1    wreg      void 
 12405 ;; Registers used:
 12406 ;;		None
 12407 ;; Tracked objects:
 12408 ;;		On entry : 0/0
 12409 ;;		On exit  : 0/0
 12410 ;;		Unchanged: 0/0
 12411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12412 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12413 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12415 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12416 ;;Total ram usage:        0 bytes
 12417 ;; Hardware stack levels used:    1
 12418 ;; This function calls:
 12419 ;;		Nothing
 12420 ;; This function is called by:
 12421 ;;		i1_do_I2C_RESET
 12422 ;; This function uses a non-reentrant model
 12423 ;;
 12424                           
 12425                           
 12426                           ;psect for function i1_i2c_driver_resetBus
 12427  0B7F                     i1_i2c_driver_resetBus:	
 12428                           
 12429                           ;incstack = 0
 12430 ;; hardware stack exceeded
 12431                           ; Regs used in i1_i2c_driver_resetBus: []
 12432  0B7F  0008               	return
 12433  0B80                     __end_ofi1_i2c_driver_resetBus:	
 12434                           
 12435                           	psect	text98
 12436  0B91                     __ptext98:	
 12437 ;; *************** function i1_i2c_driver_startRX *****************
 12438 ;; Defined at:
 12439 ;;		line 166 in file "mcc_generated_files/i2c_driver.c"
 12440 ;; Parameters:    Size  Location     Type
 12441 ;;		None
 12442 ;; Auto vars:     Size  Location     Type
 12443 ;;		None
 12444 ;; Return value:  Size  Location     Type
 12445 ;;                  1    wreg      void 
 12446 ;; Registers used:
 12447 ;;		None
 12448 ;; Tracked objects:
 12449 ;;		On entry : 0/0
 12450 ;;		On exit  : 0/0
 12451 ;;		Unchanged: 0/0
 12452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12453 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12454 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12455 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12456 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12457 ;;Total ram usage:        0 bytes
 12458 ;; Hardware stack levels used:    1
 12459 ;; This function calls:
 12460 ;;		Nothing
 12461 ;; This function is called by:
 12462 ;;		i1_do_I2C_RCEN
 12463 ;; This function uses a non-reentrant model
 12464 ;;
 12465                           
 12466                           
 12467                           ;psect for function i1_i2c_driver_startRX
 12468  0B91                     i1_i2c_driver_startRX:	
 12469                           
 12470                           ;i2c_driver.c: 168: SSP1CON2bits.RCEN = 1;
 12471                           
 12472                           ;incstack = 0
 12473 ;; hardware stack exceeded
 12474                           ; Regs used in i1_i2c_driver_startRX: []
 12475  0B91  0024               	movlb	4	; select bank4
 12476  0B92  1596               	bsf	22,3	;volatile
 12477  0B93  0008               	return
 12478  0B94                     __end_ofi1_i2c_driver_startRX:	
 12479                           
 12480                           	psect	text99
 12481  0002                     __ptext99:	
 12482 ;; *************** function i1_i2c_restartWrite *****************
 12483 ;; Defined at:
 12484 ;;		line 35 in file "mcc_generated_files/drivers/i2c_types.c"
 12485 ;; Parameters:    Size  Location     Type
 12486 ;;  p               1    9[COMMON] PTR void 
 12487 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 12488 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 12489 ;; Auto vars:     Size  Location     Type
 12490 ;;		None
 12491 ;; Return value:  Size  Location     Type
 12492 ;;                  1    wreg      enum E97
 12493 ;; Registers used:
 12494 ;;		wreg
 12495 ;; Tracked objects:
 12496 ;;		On entry : 0/0
 12497 ;;		On exit  : 0/0
 12498 ;;		Unchanged: 0/0
 12499 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12500 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12501 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12502 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12503 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12504 ;;Total ram usage:        1 bytes
 12505 ;; Hardware stack levels used:    1
 12506 ;; This function calls:
 12507 ;;		Nothing
 12508 ;; This function is called by:
 12509 ;; This function uses a non-reentrant model
 12510 ;;
 12511                           
 12512                           
 12513                           ;psect for function i1_i2c_restartWrite
 12514  0002                     i1_i2c_restartWrite:	
 12515  0002                     i1l3217:	
 12516                           ;incstack = 0
 12517 ;; hardware stack exceeded
 12518                           ; Regs used in i1_i2c_restartWrite: [wreg]
 12519                           
 12520                           
 12521                           ;i2c_types.c: 37: return i2c_restart_write;
 12522  0002  3003               	movlw	3
 12523  0003  0008               	return
 12524  0004                     __end_ofi1_i2c_restartWrite:	
 12525                           
 12526                           	psect	text100
 12527  0B83                     __ptext100:	
 12528 ;; *************** function i1_returnReset *****************
 12529 ;; Defined at:
 12530 ;;		line 448 in file "mcc_generated_files/drivers/i2c_master.c"
 12531 ;; Parameters:    Size  Location     Type
 12532 ;;  p               1    9[COMMON] PTR void 
 12533 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 12534 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 12535 ;; Auto vars:     Size  Location     Type
 12536 ;;		None
 12537 ;; Return value:  Size  Location     Type
 12538 ;;                  1    wreg      enum E12171
 12539 ;; Registers used:
 12540 ;;		wreg
 12541 ;; Tracked objects:
 12542 ;;		On entry : 0/0
 12543 ;;		On exit  : 0/0
 12544 ;;		Unchanged: 0/0
 12545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12546 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12547 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12548 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12549 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12550 ;;Total ram usage:        1 bytes
 12551 ;; Hardware stack levels used:    1
 12552 ;; This function calls:
 12553 ;;		Nothing
 12554 ;; This function is called by:
 12555 ;; This function uses a non-reentrant model
 12556 ;;
 12557                           
 12558                           
 12559                           ;psect for function i1_returnReset
 12560  0B83                     i1_returnReset:	
 12561  0B83                     i1l3213:	
 12562                           ;incstack = 0
 12563 ;; hardware stack exceeded
 12564                           ; Regs used in i1_returnReset: [wreg]
 12565                           
 12566                           
 12567                           ;i2c_master.c: 450: return i2c_reset_link;
 12568  0B83  3005               	movlw	5
 12569  0B84  0008               	return
 12570  0B85                     __end_ofi1_returnReset:	
 12571                           
 12572                           	psect	text101
 12573  0B81                     __ptext101:	
 12574 ;; *************** function i1_returnStop *****************
 12575 ;; Defined at:
 12576 ;;		line 443 in file "mcc_generated_files/drivers/i2c_master.c"
 12577 ;; Parameters:    Size  Location     Type
 12578 ;;  p               1    9[COMMON] PTR void 
 12579 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 12580 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 12581 ;; Auto vars:     Size  Location     Type
 12582 ;;		None
 12583 ;; Return value:  Size  Location     Type
 12584 ;;                  1    wreg      enum E12171
 12585 ;; Registers used:
 12586 ;;		wreg
 12587 ;; Tracked objects:
 12588 ;;		On entry : 0/0
 12589 ;;		On exit  : 0/0
 12590 ;;		Unchanged: 0/0
 12591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12592 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12593 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12594 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12595 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12596 ;;Total ram usage:        1 bytes
 12597 ;; Hardware stack levels used:    1
 12598 ;; This function calls:
 12599 ;;		Nothing
 12600 ;; This function is called by:
 12601 ;;		i1_setCallBack
 12602 ;;		_do_I2C_DO_ADDRESS_NACK
 12603 ;;		_do_I2C_TX
 12604 ;;		_do_I2C_RX
 12605 ;;		_do_I2C_TX_EMPTY
 12606 ;;		i1_do_I2C_DO_ADDRESS_NACK
 12607 ;;		i1_do_I2C_TX
 12608 ;;		i1_do_I2C_RX
 12609 ;;		i1_do_I2C_TX_EMPTY
 12610 ;; This function uses a non-reentrant model
 12611 ;;
 12612                           
 12613                           
 12614                           ;psect for function i1_returnStop
 12615  0B81                     i1_returnStop:	
 12616  0B81                     i1l3209:	
 12617                           ;incstack = 0
 12618 ;; hardware stack exceeded
 12619                           ; Regs used in i1_returnStop: [wreg]
 12620                           
 12621                           
 12622                           ;i2c_master.c: 445: return i2c_stop;
 12623  0B81  3001               	movlw	1
 12624  0B82  0008               	return
 12625  0B83                     __end_ofi1_returnStop:	
 12626                           
 12627                           	psect	text102
 12628  0DDD                     __ptext102:	
 12629 ;; *************** function i1_rdBlkRegCompleteHandler *****************
 12630 ;; Defined at:
 12631 ;;		line 134 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 12632 ;; Parameters:    Size  Location     Type
 12633 ;;  p               1    9[COMMON] PTR void 
 12634 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 12635 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 12636 ;; Auto vars:     Size  Location     Type
 12637 ;;		None
 12638 ;; Return value:  Size  Location     Type
 12639 ;;                  1    wreg      enum E97
 12640 ;; Registers used:
 12641 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12642 ;; Tracked objects:
 12643 ;;		On entry : 0/0
 12644 ;;		On exit  : 0/0
 12645 ;;		Unchanged: 0/0
 12646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12647 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12648 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12649 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12650 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12651 ;;Total ram usage:        1 bytes
 12652 ;; Hardware stack levels used:    1
 12653 ;; Hardware stack levels required when called:    2
 12654 ;; This function calls:
 12655 ;;		i1_i2c_setBuffer
 12656 ;;		i1_i2c_setDataCompleteCallback
 12657 ;; This function is called by:
 12658 ;; This function uses a non-reentrant model
 12659 ;;
 12660                           
 12661                           
 12662                           ;psect for function i1_rdBlkRegCompleteHandler
 12663  0DDD                     i1_rdBlkRegCompleteHandler:	
 12664  0DDD                     i1l3167:	
 12665                           ;incstack = 0
 12666 ;; hardware stack exceeded
 12667                           ; Regs used in i1_rdBlkRegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 12668                           
 12669                           
 12670                           ;i2c_simple_master.c: 136: i2c_setBuffer(((buf_t *)p)->data,((buf_t*)p)->len);
 12671  0DDD  0879               	movf	i1rdBlkRegCompleteHandler@p,w
 12672  0DDE  3E02               	addlw	2
 12673  0DDF  0086               	movwf	6
 12674  0DE0  0187               	clrf	7
 12675  0DE1  0801               	movf	1,w
 12676  0DE2  00F0               	movwf	i1i2c_setBuffer@buffer
 12677  0DE3  3000               	movlw	0
 12678  0DE4  00F1               	movwf	i1i2c_setBuffer@buffer+1
 12679  0DE5  0879               	movf	i1rdBlkRegCompleteHandler@p,w
 12680  0DE6  0086               	movwf	6
 12681  0DE7  0187               	clrf	7
 12682  0DE8  3F40               	moviw [0]fsr1
 12683  0DE9  00F2               	movwf	i1i2c_setBuffer@bufferSize
 12684  0DEA  3F41               	moviw [1]fsr1
 12685  0DEB  00F3               	movwf	i1i2c_setBuffer@bufferSize+1
 12686  0DEC  318D  252E  318D   	fcall	i1_i2c_setBuffer
 12687                           
 12688                           ;i2c_simple_master.c: 137: i2c_setDataCompleteCallback((0),(0));
 12689  0DEF  3000               	movlw	0
 12690  0DF0  00F5               	movwf	i1i2c_setDataCompleteCallback@cb
 12691  0DF1  00F6               	movwf	i1i2c_setDataCompleteCallback@cb+1
 12692  0DF2  01F7               	clrf	i1i2c_setDataCompleteCallback@p
 12693  0DF3  318C  24F0         	fcall	i1_i2c_setDataCompleteCallback
 12694                           
 12695                           ;i2c_simple_master.c: 138: return i2c_restart_read;
 12696  0DF5  3002               	movlw	2
 12697  0DF6  0008               	return
 12698  0DF7                     __end_ofi1_rdBlkRegCompleteHandler:	
 12699                           
 12700                           	psect	text103
 12701  0DB3                     __ptext103:	
 12702 ;; *************** function i1_rd2RegCompleteHandler *****************
 12703 ;; Defined at:
 12704 ;;		line 87 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 12705 ;; Parameters:    Size  Location     Type
 12706 ;;  p               1    9[COMMON] PTR void 
 12707 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 12708 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 12709 ;; Auto vars:     Size  Location     Type
 12710 ;;		None
 12711 ;; Return value:  Size  Location     Type
 12712 ;;                  1    wreg      enum E97
 12713 ;; Registers used:
 12714 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12715 ;; Tracked objects:
 12716 ;;		On entry : 0/0
 12717 ;;		On exit  : 0/0
 12718 ;;		Unchanged: 0/0
 12719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12720 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12721 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12722 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12723 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12724 ;;Total ram usage:        1 bytes
 12725 ;; Hardware stack levels used:    1
 12726 ;; Hardware stack levels required when called:    2
 12727 ;; This function calls:
 12728 ;;		i1_i2c_setBuffer
 12729 ;;		i1_i2c_setDataCompleteCallback
 12730 ;; This function is called by:
 12731 ;; This function uses a non-reentrant model
 12732 ;;
 12733                           
 12734                           
 12735                           ;psect for function i1_rd2RegCompleteHandler
 12736  0DB3                     i1_rd2RegCompleteHandler:	
 12737  0DB3                     i1l3151:	
 12738                           ;incstack = 0
 12739 ;; hardware stack exceeded
 12740                           ; Regs used in i1_rd2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 12741                           
 12742                           
 12743                           ;i2c_simple_master.c: 89: i2c_setBuffer(p,2);
 12744  0DB3  0879               	movf	i1rd2RegCompleteHandler@p,w
 12745  0DB4  00F0               	movwf	i1i2c_setBuffer@buffer
 12746  0DB5  39FF               	andlw	255
 12747  0DB6  1D03               	skipz
 12748  0DB7  3000               	movlw	0
 12749  0DB8  00F1               	movwf	i1i2c_setBuffer@buffer+1
 12750  0DB9  3002               	movlw	2
 12751  0DBA  00F2               	movwf	i1i2c_setBuffer@bufferSize
 12752  0DBB  3000               	movlw	0
 12753  0DBC  00F3               	movwf	i1i2c_setBuffer@bufferSize+1
 12754  0DBD  318D  252E  318D   	fcall	i1_i2c_setBuffer
 12755                           
 12756                           ;i2c_simple_master.c: 90: i2c_setDataCompleteCallback((0),(0));
 12757  0DC0  3000               	movlw	0
 12758  0DC1  00F5               	movwf	i1i2c_setDataCompleteCallback@cb
 12759  0DC2  00F6               	movwf	i1i2c_setDataCompleteCallback@cb+1
 12760  0DC3  01F7               	clrf	i1i2c_setDataCompleteCallback@p
 12761  0DC4  318C  24F0         	fcall	i1_i2c_setDataCompleteCallback
 12762                           
 12763                           ;i2c_simple_master.c: 91: return i2c_restart_read;
 12764  0DC6  3002               	movlw	2
 12765  0DC7  0008               	return
 12766  0DC8                     __end_ofi1_rd2RegCompleteHandler:	
 12767                           
 12768                           	psect	text104
 12769  0D9E                     __ptext104:	
 12770 ;; *************** function i1_rd1RegCompleteHandler *****************
 12771 ;; Defined at:
 12772 ;;		line 58 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 12773 ;; Parameters:    Size  Location     Type
 12774 ;;  p               1    9[COMMON] PTR void 
 12775 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 12776 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 12777 ;; Auto vars:     Size  Location     Type
 12778 ;;		None
 12779 ;; Return value:  Size  Location     Type
 12780 ;;                  1    wreg      enum E97
 12781 ;; Registers used:
 12782 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12783 ;; Tracked objects:
 12784 ;;		On entry : 0/0
 12785 ;;		On exit  : 0/0
 12786 ;;		Unchanged: 0/0
 12787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12788 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12789 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12790 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12791 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12792 ;;Total ram usage:        1 bytes
 12793 ;; Hardware stack levels used:    1
 12794 ;; Hardware stack levels required when called:    2
 12795 ;; This function calls:
 12796 ;;		i1_i2c_setBuffer
 12797 ;;		i1_i2c_setDataCompleteCallback
 12798 ;; This function is called by:
 12799 ;; This function uses a non-reentrant model
 12800 ;;
 12801                           
 12802                           
 12803                           ;psect for function i1_rd1RegCompleteHandler
 12804  0D9E                     i1_rd1RegCompleteHandler:	
 12805  0D9E                     i1l3143:	
 12806                           ;incstack = 0
 12807 ;; hardware stack exceeded
 12808                           ; Regs used in i1_rd1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 12809                           
 12810                           
 12811                           ;i2c_simple_master.c: 60: i2c_setBuffer(p,1);
 12812  0D9E  0879               	movf	i1rd1RegCompleteHandler@p,w
 12813  0D9F  00F0               	movwf	i1i2c_setBuffer@buffer
 12814  0DA0  39FF               	andlw	255
 12815  0DA1  1D03               	skipz
 12816  0DA2  3000               	movlw	0
 12817  0DA3  00F1               	movwf	i1i2c_setBuffer@buffer+1
 12818  0DA4  3001               	movlw	1
 12819  0DA5  00F2               	movwf	i1i2c_setBuffer@bufferSize
 12820  0DA6  3000               	movlw	0
 12821  0DA7  00F3               	movwf	i1i2c_setBuffer@bufferSize+1
 12822  0DA8  318D  252E  318D   	fcall	i1_i2c_setBuffer
 12823                           
 12824                           ;i2c_simple_master.c: 61: i2c_setDataCompleteCallback((0),(0));
 12825  0DAB  3000               	movlw	0
 12826  0DAC  00F5               	movwf	i1i2c_setDataCompleteCallback@cb
 12827  0DAD  00F6               	movwf	i1i2c_setDataCompleteCallback@cb+1
 12828  0DAE  01F7               	clrf	i1i2c_setDataCompleteCallback@p
 12829  0DAF  318C  24F0         	fcall	i1_i2c_setDataCompleteCallback
 12830                           
 12831                           ;i2c_simple_master.c: 62: return i2c_restart_read;
 12832  0DB1  3002               	movlw	2
 12833  0DB2  0008               	return
 12834  0DB3                     __end_ofi1_rd1RegCompleteHandler:	
 12835                           
 12836                           	psect	text105
 12837  0D89                     __ptext105:	
 12838 ;; *************** function i1_wr1RegCompleteHandler *****************
 12839 ;; Defined at:
 12840 ;;		line 31 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 12841 ;; Parameters:    Size  Location     Type
 12842 ;;  p               1    9[COMMON] PTR void 
 12843 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 12844 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 12845 ;; Auto vars:     Size  Location     Type
 12846 ;;		None
 12847 ;; Return value:  Size  Location     Type
 12848 ;;                  1    wreg      enum E97
 12849 ;; Registers used:
 12850 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12851 ;; Tracked objects:
 12852 ;;		On entry : 0/0
 12853 ;;		On exit  : 0/0
 12854 ;;		Unchanged: 0/0
 12855 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12856 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12857 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12858 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12859 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12860 ;;Total ram usage:        1 bytes
 12861 ;; Hardware stack levels used:    1
 12862 ;; Hardware stack levels required when called:    2
 12863 ;; This function calls:
 12864 ;;		i1_i2c_setBuffer
 12865 ;;		i1_i2c_setDataCompleteCallback
 12866 ;; This function is called by:
 12867 ;; This function uses a non-reentrant model
 12868 ;;
 12869                           
 12870                           
 12871                           ;psect for function i1_wr1RegCompleteHandler
 12872  0D89                     i1_wr1RegCompleteHandler:	
 12873  0D89                     i1l3135:	
 12874                           ;incstack = 0
 12875 ;; hardware stack exceeded
 12876                           ; Regs used in i1_wr1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 12877                           
 12878                           
 12879                           ;i2c_simple_master.c: 33: i2c_setBuffer(p,1);
 12880  0D89  0879               	movf	i1wr1RegCompleteHandler@p,w
 12881  0D8A  00F0               	movwf	i1i2c_setBuffer@buffer
 12882  0D8B  39FF               	andlw	255
 12883  0D8C  1D03               	skipz
 12884  0D8D  3000               	movlw	0
 12885  0D8E  00F1               	movwf	i1i2c_setBuffer@buffer+1
 12886  0D8F  3001               	movlw	1
 12887  0D90  00F2               	movwf	i1i2c_setBuffer@bufferSize
 12888  0D91  3000               	movlw	0
 12889  0D92  00F3               	movwf	i1i2c_setBuffer@bufferSize+1
 12890  0D93  318D  252E  318D   	fcall	i1_i2c_setBuffer
 12891                           
 12892                           ;i2c_simple_master.c: 34: i2c_setDataCompleteCallback((0),(0));
 12893  0D96  3000               	movlw	0
 12894  0D97  00F5               	movwf	i1i2c_setDataCompleteCallback@cb
 12895  0D98  00F6               	movwf	i1i2c_setDataCompleteCallback@cb+1
 12896  0D99  01F7               	clrf	i1i2c_setDataCompleteCallback@p
 12897  0D9A  318C  24F0         	fcall	i1_i2c_setDataCompleteCallback
 12898                           
 12899                           ;i2c_simple_master.c: 35: return i2c_continue;
 12900  0D9C  3004               	movlw	4
 12901  0D9D  0008               	return
 12902  0D9E                     __end_ofi1_wr1RegCompleteHandler:	
 12903                           
 12904                           	psect	text106
 12905  0D74                     __ptext106:	
 12906 ;; *************** function i1_wr2RegCompleteHandler *****************
 12907 ;; Defined at:
 12908 ;;		line 110 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 12909 ;; Parameters:    Size  Location     Type
 12910 ;;  p               1    9[COMMON] PTR void 
 12911 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 12912 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 12913 ;; Auto vars:     Size  Location     Type
 12914 ;;		None
 12915 ;; Return value:  Size  Location     Type
 12916 ;;                  1    wreg      enum E97
 12917 ;; Registers used:
 12918 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12919 ;; Tracked objects:
 12920 ;;		On entry : 0/0
 12921 ;;		On exit  : 0/0
 12922 ;;		Unchanged: 0/0
 12923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12924 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12925 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12926 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12927 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12928 ;;Total ram usage:        1 bytes
 12929 ;; Hardware stack levels used:    1
 12930 ;; Hardware stack levels required when called:    2
 12931 ;; This function calls:
 12932 ;;		i1_i2c_setBuffer
 12933 ;;		i1_i2c_setDataCompleteCallback
 12934 ;; This function is called by:
 12935 ;; This function uses a non-reentrant model
 12936 ;;
 12937                           
 12938                           
 12939                           ;psect for function i1_wr2RegCompleteHandler
 12940  0D74                     i1_wr2RegCompleteHandler:	
 12941  0D74                     i1l3159:	
 12942                           ;incstack = 0
 12943 ;; hardware stack exceeded
 12944                           ; Regs used in i1_wr2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 12945                           
 12946                           
 12947                           ;i2c_simple_master.c: 112: i2c_setBuffer(p,2);
 12948  0D74  0879               	movf	i1wr2RegCompleteHandler@p,w
 12949  0D75  00F0               	movwf	i1i2c_setBuffer@buffer
 12950  0D76  39FF               	andlw	255
 12951  0D77  1D03               	skipz
 12952  0D78  3000               	movlw	0
 12953  0D79  00F1               	movwf	i1i2c_setBuffer@buffer+1
 12954  0D7A  3002               	movlw	2
 12955  0D7B  00F2               	movwf	i1i2c_setBuffer@bufferSize
 12956  0D7C  3000               	movlw	0
 12957  0D7D  00F3               	movwf	i1i2c_setBuffer@bufferSize+1
 12958  0D7E  318D  252E  318D   	fcall	i1_i2c_setBuffer
 12959                           
 12960                           ;i2c_simple_master.c: 113: i2c_setDataCompleteCallback((0),(0));
 12961  0D81  3000               	movlw	0
 12962  0D82  00F5               	movwf	i1i2c_setDataCompleteCallback@cb
 12963  0D83  00F6               	movwf	i1i2c_setDataCompleteCallback@cb+1
 12964  0D84  01F7               	clrf	i1i2c_setDataCompleteCallback@p
 12965  0D85  318C  24F0         	fcall	i1_i2c_setDataCompleteCallback
 12966                           
 12967                           ;i2c_simple_master.c: 114: return i2c_continue;
 12968  0D87  3004               	movlw	4
 12969  0D88  0008               	return
 12970  0D89                     __end_ofi1_wr2RegCompleteHandler:	
 12971                           
 12972                           	psect	text107
 12973  0CF0                     __ptext107:	
 12974 ;; *************** function i1_i2c_setDataCompleteCallback *****************
 12975 ;; Defined at:
 12976 ;;		line 89 in file "mcc_generated_files/drivers/i2c_master.c"
 12977 ;; Parameters:    Size  Location     Type
 12978 ;;  cb              2    5[COMMON] PTR FTN(PTR void ,)enum 
 12979 ;;		 -> rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), rd2RegCompleteHandler(1), rd1RegCompleteHandler(1), 
 12980 ;;		 -> wr1RegCompleteHandler(1), Absolute function(1), 
 12981 ;;  p               1    7[COMMON] PTR void 
 12982 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 12983 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 12984 ;; Auto vars:     Size  Location     Type
 12985 ;;		None
 12986 ;; Return value:  Size  Location     Type
 12987 ;;                  1    wreg      void 
 12988 ;; Registers used:
 12989 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12990 ;; Tracked objects:
 12991 ;;		On entry : 0/0
 12992 ;;		On exit  : 0/0
 12993 ;;		Unchanged: 0/0
 12994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12995 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12996 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12997 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12998 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12999 ;;Total ram usage:        4 bytes
 13000 ;; Hardware stack levels used:    1
 13001 ;; Hardware stack levels required when called:    1
 13002 ;; This function calls:
 13003 ;;		i1_setCallBack
 13004 ;; This function is called by:
 13005 ;;		i1_wr1RegCompleteHandler
 13006 ;;		i1_rd1RegCompleteHandler
 13007 ;;		i1_rd2RegCompleteHandler
 13008 ;;		i1_wr2RegCompleteHandler
 13009 ;;		i1_rdBlkRegCompleteHandler
 13010 ;; This function uses a non-reentrant model
 13011 ;;
 13012                           
 13013                           
 13014                           ;psect for function i1_i2c_setDataCompleteCallback
 13015  0CF0                     i1_i2c_setDataCompleteCallback:	
 13016                           
 13017                           ;i2c_master.c: 91: setCallBack(i2c_dataComplete,cb,p);
 13018                           
 13019                           ;incstack = 0
 13020 ;; hardware stack exceeded
 13021                           ; Regs used in i1_i2c_setDataCompleteCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclat
      +                          h+cstack]
 13022  0CF0  0876               	movf	i1i2c_setDataCompleteCallback@cb+1,w
 13023  0CF1  00F1               	movwf	i1setCallBack@cb+1
 13024  0CF2  0875               	movf	i1i2c_setDataCompleteCallback@cb,w
 13025  0CF3  00F0               	movwf	i1setCallBack@cb
 13026  0CF4  0877               	movf	i1i2c_setDataCompleteCallback@p,w
 13027  0CF5  00F8               	movwf	??i1_i2c_setDataCompleteCallback
 13028  0CF6  0878               	movf	??i1_i2c_setDataCompleteCallback,w
 13029  0CF7  00F2               	movwf	i1setCallBack@p
 13030  0CF8  3000               	movlw	0
 13031  0CF9  318F  2741         	fcall	i1_setCallBack
 13032  0CFB  0008               	return
 13033  0CFC                     __end_ofi1_i2c_setDataCompleteCallback:	
 13034                           
 13035                           	psect	text108
 13036  0F41                     __ptext108:	
 13037 ;; *************** function i1_setCallBack *****************
 13038 ;; Defined at:
 13039 ;;		line 453 in file "mcc_generated_files/drivers/i2c_master.c"
 13040 ;; Parameters:    Size  Location     Type
 13041 ;;  idx             1    wreg     enum E12355
 13042 ;;  cb              2    0[COMMON] PTR FTN(PTR void ,)enum 
 13043 ;;		 -> rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), rd2RegCompleteHandler(1), rd1RegCompleteHandler(1), 
 13044 ;;		 -> i2c_restartWrite(1), wr1RegCompleteHandler(1), Absolute function(1), 
 13045 ;;  p               1    2[COMMON] PTR void 
 13046 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 13047 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 13048 ;; Auto vars:     Size  Location     Type
 13049 ;;  idx             1    4[COMMON] enum E12355
 13050 ;; Return value:  Size  Location     Type
 13051 ;;                  1    wreg      void 
 13052 ;; Registers used:
 13053 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13054 ;; Tracked objects:
 13055 ;;		On entry : 0/0
 13056 ;;		On exit  : 0/0
 13057 ;;		Unchanged: 0/0
 13058 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13059 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13060 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13061 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13062 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13063 ;;Total ram usage:        5 bytes
 13064 ;; Hardware stack levels used:    1
 13065 ;; This function calls:
 13066 ;;		Nothing
 13067 ;; This function is called by:
 13068 ;;		i1_i2c_setDataCompleteCallback
 13069 ;; This function uses a non-reentrant model
 13070 ;;
 13071                           
 13072                           
 13073                           ;psect for function i1_setCallBack
 13074  0F41                     i1_setCallBack:	
 13075                           
 13076                           ;incstack = 0
 13077 ;; hardware stack exceeded
 13078                           ; Regs used in i1_setCallBack: [wreg+fsr1l+fsr1h+status,2+status,0]
 13079                           ;i1setCallBack@idx stored from wreg
 13080  0F41  00F4               	movwf	i1setCallBack@idx
 13081                           
 13082                           ;i2c_master.c: 455: if(cb)
 13083  0F42  0870               	movf	i1setCallBack@cb,w
 13084  0F43  0471               	iorwf	i1setCallBack@cb+1,w
 13085  0F44  1903               	btfsc	3,2
 13086  0F45  2F57               	goto	i1l2969
 13087                           
 13088                           ;i2c_master.c: 456: {
 13089                           ;i2c_master.c: 457: i2c_status.callbackTable[idx] = cb;
 13090  0F46  3574               	lslf	i1setCallBack@idx,w
 13091  0F47  3EAC               	addlw	(low ((_i2c_status| 0+12)))& (0+255)
 13092  0F48  0086               	movwf	6
 13093  0F49  0187               	clrf	7
 13094  0F4A  0870               	movf	i1setCallBack@cb,w
 13095  0F4B  3FC0               	movwi [0]fsr1
 13096  0F4C  0871               	movf	i1setCallBack@cb+1,w
 13097  0F4D  3FC1               	movwi [1]fsr1
 13098                           
 13099                           ;i2c_master.c: 458: i2c_status.callbackPayload[idx] = p;
 13100  0F4E  0872               	movf	i1setCallBack@p,w
 13101  0F4F  00F3               	movwf	??i1_setCallBack
 13102  0F50  0874               	movf	i1setCallBack@idx,w
 13103  0F51  3EB8               	addlw	(low ((_i2c_status| 0+24)))& (0+255)
 13104  0F52  0086               	movwf	6
 13105  0F53  0187               	clrf	7
 13106  0F54  0873               	movf	??i1_setCallBack,w
 13107  0F55  0081               	movwf	1
 13108                           
 13109                           ;i2c_master.c: 459: }
 13110  0F56  0008               	return
 13111  0F57                     i1l2969:	
 13112                           
 13113                           ;i2c_master.c: 460: else
 13114                           ;i2c_master.c: 461: {
 13115                           ;i2c_master.c: 462: i2c_status.callbackTable[idx] = returnStop;
 13116  0F57  3574               	lslf	i1setCallBack@idx,w
 13117  0F58  3EAC               	addlw	(low ((_i2c_status| 0+12)))& (0+255)
 13118  0F59  0086               	movwf	6
 13119  0F5A  0187               	clrf	7
 13120  0F5B  300C               	movlw	low _returnStop
 13121  0F5C  3FC0               	movwi [0]fsr1
 13122  0F5D  300C               	movlw	high _returnStop
 13123  0F5E  3FC1               	movwi [1]fsr1
 13124                           
 13125                           ;i2c_master.c: 463: i2c_status.callbackPayload[idx] = (0);
 13126  0F5F  0874               	movf	i1setCallBack@idx,w
 13127  0F60  3EB8               	addlw	(low ((_i2c_status| 0+24)))& (0+255)
 13128  0F61  0086               	movwf	6
 13129  0F62  0187               	clrf	7
 13130  0F63  0181               	clrf	1
 13131  0F64  0008               	return
 13132  0F65                     __end_ofi1_setCallBack:	
 13133                           
 13134                           	psect	text109
 13135  0D2E                     __ptext109:	
 13136 ;; *************** function i1_i2c_setBuffer *****************
 13137 ;; Defined at:
 13138 ;;		line 184 in file "mcc_generated_files/drivers/i2c_master.c"
 13139 ;; Parameters:    Size  Location     Type
 13140 ;;  buffer          2    0[COMMON] PTR void 
 13141 ;;		 -> i2c_readDataBlock@reg(1), i2c_readDataBlock@d(3), i2c_write2ByteRegister@reg(1), i2c_write2ByteRegister@data(2),
      + 
 13142 ;;		 -> i2c_read2ByteRegister@reg(1), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@reg(1), i2c_read1ByteRegist
      +er@d2(1), 
 13143 ;;		 -> i2c_write1ByteRegister@reg(1), i2c_write1ByteRegister@data(1), NULL(0), writebuffer(17), 
 13144 ;;  bufferSize      2    2[COMMON] unsigned int 
 13145 ;; Auto vars:     Size  Location     Type
 13146 ;;		None
 13147 ;; Return value:  Size  Location     Type
 13148 ;;                  1    wreg      void 
 13149 ;; Registers used:
 13150 ;;		wreg
 13151 ;; Tracked objects:
 13152 ;;		On entry : 0/0
 13153 ;;		On exit  : 0/0
 13154 ;;		Unchanged: 0/0
 13155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13156 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13157 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13158 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13159 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13160 ;;Total ram usage:        4 bytes
 13161 ;; Hardware stack levels used:    1
 13162 ;; This function calls:
 13163 ;;		Nothing
 13164 ;; This function is called by:
 13165 ;;		i1_wr1RegCompleteHandler
 13166 ;;		i1_rd1RegCompleteHandler
 13167 ;;		i1_rd2RegCompleteHandler
 13168 ;;		i1_wr2RegCompleteHandler
 13169 ;;		i1_rdBlkRegCompleteHandler
 13170 ;; This function uses a non-reentrant model
 13171 ;;
 13172                           
 13173                           
 13174                           ;psect for function i1_i2c_setBuffer
 13175  0D2E                     i1_i2c_setBuffer:	
 13176                           
 13177                           ;i2c_master.c: 186: if(i2c_status.bufferFree)
 13178                           
 13179                           ;incstack = 0
 13180 ;; hardware stack exceeded
 13181                           ; Regs used in i1_i2c_setBuffer: [wreg]
 13182  0D2E  0021               	movlb	1	; select bank1
 13183  0D2F  1D20               	btfss	_i2c_status^(0+128),2
 13184  0D30  0008               	return
 13185                           
 13186                           ;i2c_master.c: 187: {
 13187                           ;i2c_master.c: 188: i2c_status.data_ptr = buffer;
 13188  0D31  0871               	movf	i1i2c_setBuffer@buffer+1,w
 13189  0D32  00A3               	movwf	((low ((_i2c_status| 0+2))+1))^(0+128)
 13190  0D33  0870               	movf	i1i2c_setBuffer@buffer,w
 13191  0D34  00A2               	movwf	(low ((_i2c_status| 0+2)))^(0+128)
 13192                           
 13193                           ;i2c_master.c: 189: i2c_status.data_length = bufferSize;
 13194  0D35  0873               	movf	i1i2c_setBuffer@bufferSize+1,w
 13195  0D36  00A5               	movwf	((_i2c_status+1)^(0+128)+4)
 13196  0D37  0872               	movf	i1i2c_setBuffer@bufferSize,w
 13197  0D38  00A4               	movwf	(_i2c_status^(0+128)+4)
 13198                           
 13199                           ;i2c_master.c: 190: i2c_status.bufferFree = 0;
 13200  0D39  1120               	bcf	_i2c_status^(0+128),2
 13201  0D3A  0008               	return
 13202  0D3B                     __end_ofi1_i2c_setBuffer:	
 13203                           
 13204                           	psect	text110
 13205  0B8E                     __ptext110:	
 13206 ;; *************** function i1_i2c_driver_stop *****************
 13207 ;; Defined at:
 13208 ;;		line 156 in file "mcc_generated_files/i2c_driver.c"
 13209 ;; Parameters:    Size  Location     Type
 13210 ;;		None
 13211 ;; Auto vars:     Size  Location     Type
 13212 ;;		None
 13213 ;; Return value:  Size  Location     Type
 13214 ;;                  1    wreg      void 
 13215 ;; Registers used:
 13216 ;;		None
 13217 ;; Tracked objects:
 13218 ;;		On entry : 0/0
 13219 ;;		On exit  : 0/0
 13220 ;;		Unchanged: 0/0
 13221 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13222 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13223 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13224 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13225 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13226 ;;Total ram usage:        0 bytes
 13227 ;; Hardware stack levels used:    1
 13228 ;; This function calls:
 13229 ;;		Nothing
 13230 ;; This function is called by:
 13231 ;;		i1_do_I2C_SEND_STOP
 13232 ;; This function uses a non-reentrant model
 13233 ;;
 13234                           
 13235                           
 13236                           ;psect for function i1_i2c_driver_stop
 13237  0B8E                     i1_i2c_driver_stop:	
 13238                           
 13239                           ;i2c_driver.c: 158: SSP1CON2bits.PEN = 1;
 13240                           
 13241                           ;incstack = 0
 13242 ;; hardware stack exceeded
 13243                           ; Regs used in i1_i2c_driver_stop: []
 13244  0B8E  0024               	movlb	4	; select bank4
 13245  0B8F  1516               	bsf	22,2	;volatile
 13246  0B90  0008               	return
 13247  0B91                     __end_ofi1_i2c_driver_stop:	
 13248                           
 13249                           	psect	text111
 13250  0B8B                     __ptext111:	
 13251 ;; *************** function i1_i2c_driver_restart *****************
 13252 ;; Defined at:
 13253 ;;		line 151 in file "mcc_generated_files/i2c_driver.c"
 13254 ;; Parameters:    Size  Location     Type
 13255 ;;		None
 13256 ;; Auto vars:     Size  Location     Type
 13257 ;;		None
 13258 ;; Return value:  Size  Location     Type
 13259 ;;                  1    wreg      void 
 13260 ;; Registers used:
 13261 ;;		None
 13262 ;; Tracked objects:
 13263 ;;		On entry : 0/0
 13264 ;;		On exit  : 0/0
 13265 ;;		Unchanged: 0/0
 13266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13268 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13269 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13270 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13271 ;;Total ram usage:        0 bytes
 13272 ;; Hardware stack levels used:    1
 13273 ;; This function calls:
 13274 ;;		Nothing
 13275 ;; This function is called by:
 13276 ;;		i1_do_I2C_SEND_RESTART_READ
 13277 ;;		i1_do_I2C_SEND_RESTART_WRITE
 13278 ;;		i1_do_I2C_SEND_RESTART
 13279 ;; This function uses a non-reentrant model
 13280 ;;
 13281                           
 13282                           
 13283                           ;psect for function i1_i2c_driver_restart
 13284  0B8B                     i1_i2c_driver_restart:	
 13285                           
 13286                           ;i2c_driver.c: 153: SSP1CON2bits.RSEN = 1;
 13287                           
 13288                           ;incstack = 0
 13289 ;; hardware stack exceeded
 13290                           ; Regs used in i1_i2c_driver_restart: []
 13291  0B8B  0024               	movlb	4	; select bank4
 13292  0B8C  1496               	bsf	22,1	;volatile
 13293  0B8D  0008               	return
 13294  0B8E                     __end_ofi1_i2c_driver_restart:	
 13295                           
 13296                           	psect	text112
 13297  0BB5                     __ptext112:	
 13298 ;; *************** function i1_i2c_driver_sendACK *****************
 13299 ;; Defined at:
 13300 ;;		line 196 in file "mcc_generated_files/i2c_driver.c"
 13301 ;; Parameters:    Size  Location     Type
 13302 ;;		None
 13303 ;; Auto vars:     Size  Location     Type
 13304 ;;		None
 13305 ;; Return value:  Size  Location     Type
 13306 ;;                  1    wreg      void 
 13307 ;; Registers used:
 13308 ;;		None
 13309 ;; Tracked objects:
 13310 ;;		On entry : 0/0
 13311 ;;		On exit  : 0/0
 13312 ;;		Unchanged: 0/0
 13313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13314 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13315 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13316 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13317 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13318 ;;Total ram usage:        0 bytes
 13319 ;; Hardware stack levels used:    1
 13320 ;; This function calls:
 13321 ;;		Nothing
 13322 ;; This function is called by:
 13323 ;;		i1_do_I2C_DO_ACK
 13324 ;;		i1_do_I2C_RX
 13325 ;; This function uses a non-reentrant model
 13326 ;;
 13327                           
 13328                           
 13329                           ;psect for function i1_i2c_driver_sendACK
 13330  0BB5                     i1_i2c_driver_sendACK:	
 13331                           
 13332                           ;i2c_driver.c: 198: SSP1CON2bits.ACKDT = 0;
 13333                           
 13334                           ;incstack = 0
 13335 ;; hardware stack exceeded
 13336                           ; Regs used in i1_i2c_driver_sendACK: []
 13337  0BB5  0024               	movlb	4	; select bank4
 13338  0BB6  1296               	bcf	22,5	;volatile
 13339                           
 13340                           ;i2c_driver.c: 199: SSP1CON2bits.ACKEN = 1;
 13341  0BB7  1616               	bsf	22,4	;volatile
 13342  0BB8  0008               	return
 13343  0BB9                     __end_ofi1_i2c_driver_sendACK:	
 13344                           
 13345                           	psect	text113
 13346  0B88                     __ptext113:	
 13347 ;; *************** function _i2c_busCollisionISR *****************
 13348 ;; Defined at:
 13349 ;;		line 435 in file "mcc_generated_files/drivers/i2c_master.c"
 13350 ;; Parameters:    Size  Location     Type
 13351 ;;		None
 13352 ;; Auto vars:     Size  Location     Type
 13353 ;;		None
 13354 ;; Return value:  Size  Location     Type
 13355 ;;                  1    wreg      void 
 13356 ;; Registers used:
 13357 ;;		status,2, status,0, pclath, cstack
 13358 ;; Tracked objects:
 13359 ;;		On entry : 0/0
 13360 ;;		On exit  : 0/0
 13361 ;;		Unchanged: 0/0
 13362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13363 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13364 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13365 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13366 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13367 ;;Total ram usage:        0 bytes
 13368 ;; Hardware stack levels used:    1
 13369 ;; Hardware stack levels required when called:    1
 13370 ;; This function calls:
 13371 ;;		_i2c_driver_clearBusCollision
 13372 ;; This function is called by:
 13373 ;;		_i2c_open
 13374 ;;		_INTERRUPT_InterruptManager
 13375 ;; This function uses a non-reentrant model
 13376 ;;
 13377                           
 13378                           
 13379                           ;psect for function _i2c_busCollisionISR
 13380  0B88                     _i2c_busCollisionISR:	
 13381                           
 13382                           ;i2c_master.c: 437: i2c_driver_clearBusCollision();
 13383                           
 13384                           ;incstack = 0
 13385                           ; Regs used in _i2c_busCollisionISR: [status,2+status,0+pclath+cstack]
 13386  0B88  318B  2385         	fcall	_i2c_driver_clearBusCollision
 13387  0B8A  0008               	return
 13388  0B8B                     __end_of_i2c_busCollisionISR:	
 13389                           
 13390                           	psect	text114
 13391  0B85                     __ptext114:	
 13392 ;; *************** function _i2c_driver_clearBusCollision *****************
 13393 ;; Defined at:
 13394 ;;		line 253 in file "mcc_generated_files/i2c_driver.c"
 13395 ;; Parameters:    Size  Location     Type
 13396 ;;		None
 13397 ;; Auto vars:     Size  Location     Type
 13398 ;;		None
 13399 ;; Return value:  Size  Location     Type
 13400 ;;                  1    wreg      void 
 13401 ;; Registers used:
 13402 ;;		None
 13403 ;; Tracked objects:
 13404 ;;		On entry : 0/0
 13405 ;;		On exit  : 0/0
 13406 ;;		Unchanged: 0/0
 13407 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13408 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13409 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13410 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13411 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13412 ;;Total ram usage:        0 bytes
 13413 ;; Hardware stack levels used:    1
 13414 ;; This function calls:
 13415 ;;		Nothing
 13416 ;; This function is called by:
 13417 ;;		_i2c_busCollisionISR
 13418 ;; This function uses a non-reentrant model
 13419 ;;
 13420                           
 13421                           
 13422                           ;psect for function _i2c_driver_clearBusCollision
 13423  0B85                     _i2c_driver_clearBusCollision:	
 13424                           
 13425                           ;i2c_driver.c: 255: PIR2bits.BCL1IF = 0;
 13426                           
 13427                           ;incstack = 0
 13428                           ; Regs used in _i2c_driver_clearBusCollision: []
 13429  0B85  0020               	movlb	0	; select bank0
 13430  0B86  1191               	bcf	17,3	;volatile
 13431  0B87  0008               	return
 13432  0B88                     __end_of_i2c_driver_clearBusCollision:	
 13433                           
 13434                           	psect	text115
 13435  0BF4                     __ptext115:	
 13436 ;; *************** function _PIN_MANAGER_IOC *****************
 13437 ;; Defined at:
 13438 ;;		line 117 in file "mcc_generated_files/pin_manager.c"
 13439 ;; Parameters:    Size  Location     Type
 13440 ;;		None
 13441 ;; Auto vars:     Size  Location     Type
 13442 ;;		None
 13443 ;; Return value:  Size  Location     Type
 13444 ;;                  1    wreg      void 
 13445 ;; Registers used:
 13446 ;;		wreg, status,2, status,0, pclath, cstack
 13447 ;; Tracked objects:
 13448 ;;		On entry : 0/0
 13449 ;;		On exit  : 0/0
 13450 ;;		Unchanged: 0/0
 13451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13452 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13453 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13454 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13455 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13456 ;;Total ram usage:        0 bytes
 13457 ;; Hardware stack levels used:    1
 13458 ;; Hardware stack levels required when called:    2
 13459 ;; This function calls:
 13460 ;;		_IOCCF4_ISR
 13461 ;; This function is called by:
 13462 ;;		_INTERRUPT_InterruptManager
 13463 ;; This function uses a non-reentrant model
 13464 ;;
 13465                           
 13466                           
 13467                           ;psect for function _PIN_MANAGER_IOC
 13468  0BF4                     _PIN_MANAGER_IOC:	
 13469                           
 13470                           ;pin_manager.c: 120: if(IOCCFbits.IOCCF4 == 1)
 13471                           
 13472                           ;incstack = 0
 13473 ;; hardware stack exceeded
 13474                           ; Regs used in _PIN_MANAGER_IOC: [wreg+status,2+status,0+pclath+cstack]
 13475  0BF4  0027               	movlb	7	; select bank7
 13476  0BF5  1E19               	btfss	25,4	;volatile
 13477  0BF6  0008               	return
 13478                           
 13479                           ;pin_manager.c: 121: {
 13480                           ;pin_manager.c: 122: IOCCF4_ISR();
 13481  0BF7  318D  2521         	fcall	_IOCCF4_ISR
 13482  0BF9  0008               	return
 13483  0BFA                     __end_of_PIN_MANAGER_IOC:	
 13484                           
 13485                           	psect	text116
 13486  0D21                     __ptext116:	
 13487 ;; *************** function _IOCCF4_ISR *****************
 13488 ;; Defined at:
 13489 ;;		line 131 in file "mcc_generated_files/pin_manager.c"
 13490 ;; Parameters:    Size  Location     Type
 13491 ;;		None
 13492 ;; Auto vars:     Size  Location     Type
 13493 ;;		None
 13494 ;; Return value:  Size  Location     Type
 13495 ;;                  1    wreg      void 
 13496 ;; Registers used:
 13497 ;;		wreg, status,2, status,0, pclath, cstack
 13498 ;; Tracked objects:
 13499 ;;		On entry : 0/0
 13500 ;;		On exit  : 0/0
 13501 ;;		Unchanged: 0/0
 13502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13503 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13504 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13505 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13506 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13507 ;;Total ram usage:        0 bytes
 13508 ;; Hardware stack levels used:    1
 13509 ;; Hardware stack levels required when called:    1
 13510 ;; This function calls:
 13511 ;;		Absolute function
 13512 ;;		_IOCCF4_DefaultInterruptHandler
 13513 ;;		_buttonInterrupt
 13514 ;; This function is called by:
 13515 ;;		_PIN_MANAGER_IOC
 13516 ;; This function uses a non-reentrant model
 13517 ;;
 13518                           
 13519                           
 13520                           ;psect for function _IOCCF4_ISR
 13521  0D21                     _IOCCF4_ISR:	
 13522                           
 13523                           ;pin_manager.c: 136: if(IOCCF4_InterruptHandler)
 13524                           
 13525                           ;incstack = 0
 13526 ;; hardware stack exceeded
 13527                           ; Regs used in _IOCCF4_ISR: [wreg+status,2+status,0+pclath+cstack]
 13528  0D21  0021               	movlb	1	; select bank1
 13529  0D22  0867               	movf	_IOCCF4_InterruptHandler^(0+128),w
 13530  0D23  0468               	iorwf	(_IOCCF4_InterruptHandler+1)^(0+128),w
 13531  0D24  1903               	btfsc	3,2
 13532  0D25  2D2B               	goto	i1l6145
 13533                           
 13534                           ;pin_manager.c: 137: {
 13535                           ;pin_manager.c: 138: IOCCF4_InterruptHandler();
 13536  0D26  0868               	movf	(_IOCCF4_InterruptHandler+1)^(0+128),w
 13537  0D27  008A               	movwf	10
 13538  0D28  0867               	movf	_IOCCF4_InterruptHandler^(0+128),w
 13539  0D29  000A               	callw
 13540  0D2A  318D               	pagesel	$
 13541  0D2B                     i1l6145:	
 13542                           
 13543                           ;pin_manager.c: 139: }
 13544                           ;pin_manager.c: 140: IOCCFbits.IOCCF4 = 0;
 13545  0D2B  0027               	movlb	7	; select bank7
 13546  0D2C  1219               	bcf	25,4	;volatile
 13547  0D2D  0008               	return
 13548  0D2E                     __end_of_IOCCF4_ISR:	
 13549                           
 13550                           	psect	text117
 13551  0B7E                     __ptext117:	
 13552 ;; *************** function _IOCCF4_DefaultInterruptHandler *****************
 13553 ;; Defined at:
 13554 ;;		line 153 in file "mcc_generated_files/pin_manager.c"
 13555 ;; Parameters:    Size  Location     Type
 13556 ;;		None
 13557 ;; Auto vars:     Size  Location     Type
 13558 ;;		None
 13559 ;; Return value:  Size  Location     Type
 13560 ;;                  1    wreg      void 
 13561 ;; Registers used:
 13562 ;;		None
 13563 ;; Tracked objects:
 13564 ;;		On entry : 0/0
 13565 ;;		On exit  : 0/0
 13566 ;;		Unchanged: 0/0
 13567 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13568 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13569 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13570 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13571 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13572 ;;Total ram usage:        0 bytes
 13573 ;; Hardware stack levels used:    1
 13574 ;; This function calls:
 13575 ;;		Nothing
 13576 ;; This function is called by:
 13577 ;;		_PIN_MANAGER_Initialize
 13578 ;;		_IOCCF4_ISR
 13579 ;; This function uses a non-reentrant model
 13580 ;;
 13581                           
 13582                           
 13583                           ;psect for function _IOCCF4_DefaultInterruptHandler
 13584  0B7E                     _IOCCF4_DefaultInterruptHandler:	
 13585                           
 13586                           ;incstack = 0
 13587 ;; hardware stack exceeded
 13588                           ; Regs used in _IOCCF4_DefaultInterruptHandler: []
 13589  0B7E  0008               	return
 13590  0B7F                     __end_of_IOCCF4_DefaultInterruptHandler:	
 13591                           
 13592                           	psect	text118
 13593  0D14                     __ptext118:	
 13594 ;; *************** function _buttonInterrupt *****************
 13595 ;; Defined at:
 13596 ;;		line 261 in file "main.c"
 13597 ;; Parameters:    Size  Location     Type
 13598 ;;		None
 13599 ;; Auto vars:     Size  Location     Type
 13600 ;;		None
 13601 ;; Return value:  Size  Location     Type
 13602 ;;                  1    wreg      void 
 13603 ;; Registers used:
 13604 ;;		wreg, status,2, status,0
 13605 ;; Tracked objects:
 13606 ;;		On entry : 0/0
 13607 ;;		On exit  : 0/0
 13608 ;;		Unchanged: 0/0
 13609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13610 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13611 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13612 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13613 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13614 ;;Total ram usage:        1 bytes
 13615 ;; Hardware stack levels used:    1
 13616 ;; This function calls:
 13617 ;;		Nothing
 13618 ;; This function is called by:
 13619 ;;		_main
 13620 ;;		_IOCCF4_ISR
 13621 ;; This function uses a non-reentrant model
 13622 ;;
 13623                           
 13624                           
 13625                           ;psect for function _buttonInterrupt
 13626  0D14                     _buttonInterrupt:	
 13627                           
 13628                           ;main.c: 262: start = 1;
 13629                           
 13630                           ;incstack = 0
 13631 ;; hardware stack exceeded
 13632                           ; Regs used in _buttonInterrupt: [wreg+status,2+status,0]
 13633  0D14  0021               	movlb	1	; select bank1
 13634  0D15  01E0               	clrf	_start^(0+128)
 13635  0D16  0AE0               	incf	_start^(0+128),f
 13636                           
 13637                           ;main.c: 263: fall = 0;
 13638  0D17  01E6               	clrf	_fall^(0+128)
 13639                           
 13640                           ;main.c: 264: if (gravityCounter < 255) {
 13641  0D18  0020               	movlb	0	; select bank0
 13642  0D19  0A6B               	incf	_gravityCounter,w
 13643  0D1A  1903               	btfsc	3,2
 13644  0D1B  0008               	return
 13645                           
 13646                           ;main.c: 265: gravityCounter = 255;
 13647  0D1C  30FF               	movlw	255
 13648  0D1D  00F0               	movwf	??_buttonInterrupt
 13649  0D1E  0870               	movf	??_buttonInterrupt,w
 13650  0D1F  00EB               	movwf	_gravityCounter
 13651  0D20  0008               	return
 13652  0D21                     __end_of_buttonInterrupt:	
 13653  007E                     btemp	set	126	;btemp
 13654  007E                     int$flags	set	126
 13655  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        101
    BSS         96
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     72      77
    BANK1            80      0      73
    BANK2            80      0      72
    BANK3            80      0      49
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    i2c_write1ByteRegister@data.data	PTR unsigned char  size(1) Largest target is 0

    i2c_read1ByteRegister@d2.data	PTR unsigned char  size(1) Largest target is 0

    i2c_read2ByteRegister@result.data	PTR unsigned char  size(1) Largest target is 0

    i2c_write2ByteRegister@data.data	PTR unsigned char  size(1) Largest target is 0

    do_I2C_TX$1598$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    do_I2C_RX$1604$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    do_I2C_TX_EMPTY$1610$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    i2c_ISR$1616	PTR const FTN()enum E12337 size(2) Largest target is 1
		 -> do_I2C_TX_EMPTY(), do_I2C_RX(), do_I2C_TX(), do_I2C_DO_ADDRESS_NACK(), 
		 -> do_I2C_DO_NACK_RESTART(), do_I2C_DO_NACK_STOP(), do_I2C_DO_ACK(), do_I2C_RCEN(), 
		 -> do_I2C_SEND_ADR_WRITE(), do_I2C_SEND_ADR_READ(), do_I2C_SEND_STOP(), do_I2C_SEND_RESTART(), 
		 -> do_I2C_SEND_RESTART_WRITE(), do_I2C_SEND_RESTART_READ(), do_I2C_IDLE(), do_I2C_RESET(), 

    do_I2C_TX_EMPTY$1615	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    do_I2C_TX_EMPTY$1610	PTR FTN(PTR void ,)enum E12171 size(2) Largest target is 1
		 -> returnReset(), returnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> rd2RegCompleteHandler(), rd1RegCompleteHandler(), i2c_restartWrite(), wr1RegCompleteHandler(), 
		 -> Absolute function(), 

    do_I2C_RX$1609	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    do_I2C_RX$1604	PTR FTN(PTR void ,)enum E12171 size(2) Largest target is 1
		 -> returnReset(), returnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> rd2RegCompleteHandler(), rd1RegCompleteHandler(), i2c_restartWrite(), wr1RegCompleteHandler(), 
		 -> Absolute function(), 

    do_I2C_TX$1603	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    do_I2C_TX$1598	PTR FTN(PTR void ,)enum E12171 size(2) Largest target is 1
		 -> returnReset(), returnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> rd2RegCompleteHandler(), rd1RegCompleteHandler(), i2c_restartWrite(), wr1RegCompleteHandler(), 
		 -> Absolute function(), 

    returnStop@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    returnReset@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    cb$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    cb$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    i2c_restartWrite@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    cb$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    S847$11$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    mssp_waitForEvent@timeout	PTR unsigned int  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    setCallBack@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    setCallBack@cb	PTR FTN(PTR void ,)enum E12171 size(2) Largest target is 1
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 
		 -> i2c_restartWrite(), wr1RegCompleteHandler(), Absolute function(), 

    fsmStateTable	PTR const FTN()enum E12337[16] size(2) Largest target is 1
		 -> do_I2C_TX_EMPTY(), do_I2C_RX(), do_I2C_TX(), do_I2C_DO_ADDRESS_NACK(), 
		 -> do_I2C_DO_NACK_RESTART(), do_I2C_DO_NACK_STOP(), do_I2C_DO_ACK(), do_I2C_RCEN(), 
		 -> do_I2C_SEND_ADR_WRITE(), do_I2C_SEND_ADR_READ(), do_I2C_SEND_STOP(), do_I2C_SEND_RESTART(), 
		 -> do_I2C_SEND_RESTART_WRITE(), do_I2C_SEND_RESTART_READ(), do_I2C_IDLE(), do_I2C_RESET(), 

    i2c_setBuffer@buffer	PTR void  size(2) Largest target is 17
		 -> i2c_readDataBlock@reg(COMMON[1]), i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@reg(COMMON[1]), i2c_write2ByteRegister@data(COMMON[2]), 
		 -> i2c_read2ByteRegister@reg(COMMON[1]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@reg(COMMON[1]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@reg(COMMON[1]), i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), writebuffer(BANK3[17]), 

    i2c_setAddressNACKCallback@p	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    i2c_setAddressNACKCallback@cb	PTR FTN(PTR void ,)enum E12171 size(2) Largest target is 1
		 -> i2c_restartWrite(), 

    i2c_setDataCompleteCallback@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    i2c_setDataCompleteCallback@cb	PTR FTN(PTR void ,)enum E12171 size(2) Largest target is 1
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), Absolute function(), 

    S847$callbackPayload	PTR void [6] size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    i2c_status.callbackPayload	PTR void [6] size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    S847$callbackTable	PTR FTN(PTR void ,)enum E12171[6] size(2) Largest target is 1
		 -> returnReset(), returnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> rd2RegCompleteHandler(), rd1RegCompleteHandler(), i2c_restartWrite(), wr1RegCompleteHandler(), 
		 -> Absolute function(), 

    i2c_status.callbackTable	PTR FTN(PTR void ,)enum E12171[6] size(2) Largest target is 1
		 -> i1_returnStop(), returnReset(), returnStop(), rdBlkRegCompleteHandler(), 
		 -> wr2RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), i2c_restartWrite(), 
		 -> wr1RegCompleteHandler(), Absolute function(), 

    S847$data_ptr	PTR unsigned char  size(2) Largest target is 17
		 -> i2c_readDataBlock@reg(COMMON[1]), i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@reg(COMMON[1]), i2c_write2ByteRegister@data(COMMON[2]), 
		 -> i2c_read2ByteRegister@reg(COMMON[1]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@reg(COMMON[1]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@reg(COMMON[1]), i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), writebuffer(BANK3[17]), 

    i2c_status.data_ptr	PTR unsigned char  size(2) Largest target is 17
		 -> i2c_readDataBlock@reg(COMMON[1]), i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@reg(COMMON[1]), i2c_write2ByteRegister@data(COMMON[2]), 
		 -> i2c_read2ByteRegister@reg(COMMON[1]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@reg(COMMON[1]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@reg(COMMON[1]), i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), writebuffer(BANK3[17]), 

    d.data	PTR unsigned char  size(1) Largest target is 0

    S666$data	PTR unsigned char  size(1) Largest target is 0

    rdBlkRegCompleteHandler@p.data	PTR unsigned char  size(1) Largest target is 0

    rdBlkRegCompleteHandler@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    wr2RegCompleteHandler@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    rd2RegCompleteHandler@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    rd1RegCompleteHandler@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    i2c_writeNBytes@data	PTR void  size(1) Largest target is 17
		 -> writebuffer(BANK3[17]), 

    wr1RegCompleteHandler@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    i2c_driver_setI2cISR@f	PTR void  size(2) Largest target is 1
		 -> i2c_ISR(), 

    i2c_driver_i2cISR	PTR FTN()void  size(2) Largest target is 1
		 -> i2c_ISR(), Absolute function(), 

    i2c_driver_setBusCollisionISR@f	PTR void  size(2) Largest target is 1
		 -> i2c_busCollisionISR(), 

    i2c_driver_busCollisionISR	PTR FTN()void  size(2) Largest target is 1
		 -> i2c_busCollisionISR(), Absolute function(), 

    write@toWrite_343	PTR unsigned char [7] size(1) Largest target is 8
		 -> letter_r(BANK2[8]), letter_o(BANK2[8]), letter_c(BANK2[8]), letter_s(BANK2[8]), 
		 -> letter_hi(BANK2[8]), letter_w(BANK2[8]), letter_e(BANK2[8]), letter_n(BANK2[8]), 
		 -> letter_space(BANK2[8]), 

    write@toWrite_342	PTR unsigned char [8] size(1) Largest target is 8
		 -> letter_r(BANK2[8]), letter_o(BANK2[8]), letter_c(BANK2[8]), letter_s(BANK2[8]), 
		 -> letter_hi(BANK2[8]), letter_w(BANK2[8]), letter_e(BANK2[8]), letter_n(BANK2[8]), 
		 -> letter_space(BANK2[8]), 

    write@toWrite	PTR unsigned char [5] size(1) Largest target is 8
		 -> letter_r(BANK2[8]), letter_o(BANK2[8]), letter_c(BANK2[8]), letter_s(BANK2[8]), 
		 -> letter_hi(BANK2[8]), letter_w(BANK2[8]), letter_e(BANK2[8]), letter_n(BANK2[8]), 
		 -> letter_space(BANK2[8]), 

    writeWord@text	PTR PTR unsigned char  size(1) Largest target is 8
		 -> write@toWrite_343(BANK0[7]), write@toWrite_342(BANK0[8]), write@toWrite(BANK0[5]), 

    IOCCF4_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> buttonInterrupt(), IOCCF4_DefaultInterruptHandler(), 

    IOCCF4_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> buttonInterrupt(), Absolute function(), IOCCF4_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    i1_i2c_ISR->i1_do_I2C_TX
    i1_do_I2C_TX_EMPTY->i1_i2c_restartWrite
    i1_do_I2C_TX_EMPTY->i1_rd1RegCompleteHandler
    i1_do_I2C_TX_EMPTY->i1_rd2RegCompleteHandler
    i1_do_I2C_TX_EMPTY->i1_rdBlkRegCompleteHandler
    i1_do_I2C_TX_EMPTY->i1_returnReset
    i1_do_I2C_TX_EMPTY->i1_returnStop
    i1_do_I2C_TX_EMPTY->i1_wr1RegCompleteHandler
    i1_do_I2C_TX_EMPTY->i1_wr2RegCompleteHandler
    i1_do_I2C_TX->i1_i2c_restartWrite
    i1_do_I2C_TX->i1_rd1RegCompleteHandler
    i1_do_I2C_TX->i1_rd2RegCompleteHandler
    i1_do_I2C_TX->i1_rdBlkRegCompleteHandler
    i1_do_I2C_TX->i1_returnReset
    i1_do_I2C_TX->i1_returnStop
    i1_do_I2C_TX->i1_wr1RegCompleteHandler
    i1_do_I2C_TX->i1_wr2RegCompleteHandler
    i1_do_I2C_SEND_ADR_WRITE->i1_i2c_driver_TXData
    i1_do_I2C_SEND_ADR_READ->i1_i2c_driver_TXData
    i1_do_I2C_RX->i1_i2c_restartWrite
    i1_do_I2C_RX->i1_rd1RegCompleteHandler
    i1_do_I2C_RX->i1_rd2RegCompleteHandler
    i1_do_I2C_RX->i1_rdBlkRegCompleteHandler
    i1_do_I2C_RX->i1_returnReset
    i1_do_I2C_RX->i1_returnStop
    i1_do_I2C_RX->i1_wr1RegCompleteHandler
    i1_do_I2C_RX->i1_wr2RegCompleteHandler
    i1_do_I2C_DO_ADDRESS_NACK->i1_i2c_restartWrite
    i1_do_I2C_DO_ADDRESS_NACK->i1_rd1RegCompleteHandler
    i1_do_I2C_DO_ADDRESS_NACK->i1_rd2RegCompleteHandler
    i1_do_I2C_DO_ADDRESS_NACK->i1_rdBlkRegCompleteHandler
    i1_do_I2C_DO_ADDRESS_NACK->i1_returnReset
    i1_do_I2C_DO_ADDRESS_NACK->i1_returnStop
    i1_do_I2C_DO_ADDRESS_NACK->i1_wr1RegCompleteHandler
    i1_do_I2C_DO_ADDRESS_NACK->i1_wr2RegCompleteHandler
    i1_wr2RegCompleteHandler->i1_i2c_setDataCompleteCallback
    i1_wr1RegCompleteHandler->i1_i2c_setDataCompleteCallback
    i1_rdBlkRegCompleteHandler->i1_i2c_setDataCompleteCallback
    i1_rd2RegCompleteHandler->i1_i2c_setDataCompleteCallback
    i1_rd1RegCompleteHandler->i1_i2c_setDataCompleteCallback
    i1_i2c_setDataCompleteCallback->i1_setCallBack
    _IOCCF4_ISR->_buttonInterrupt

Critical Paths under _main in BANK0

    _main->_endGame
    _shiftWalls->_random
    _random->___awmod
    _rand->___lmul
    ___awmod->_rand
    _initializeDisplay->_i2c_writeNBytes
    _endGame->_write
    _write->_writeWord
    _writeWord->_writeDisplay
    _writeDisplay->_i2c_writeNBytes
    _i2c_setAddressNACKCallback->_setCallBack
    _i2c_open->_i2c_driver_setBusCollisionISR
    _i2c_open->_i2c_driver_setI2cISR
    _i2c_masterWrite->_i2c_masterOperation
    _i2c_poller->_i2c_ISR
    _i2c_ISR->_do_I2C_TX
    _do_I2C_TX_EMPTY->_i2c_restartWrite
    _do_I2C_TX_EMPTY->_rd1RegCompleteHandler
    _do_I2C_TX_EMPTY->_rd2RegCompleteHandler
    _do_I2C_TX_EMPTY->_rdBlkRegCompleteHandler
    _do_I2C_TX_EMPTY->_returnReset
    _do_I2C_TX_EMPTY->_returnStop
    _do_I2C_TX_EMPTY->_wr1RegCompleteHandler
    _do_I2C_TX_EMPTY->_wr2RegCompleteHandler
    _do_I2C_TX->_i2c_restartWrite
    _do_I2C_TX->_rd1RegCompleteHandler
    _do_I2C_TX->_rd2RegCompleteHandler
    _do_I2C_TX->_rdBlkRegCompleteHandler
    _do_I2C_TX->_returnReset
    _do_I2C_TX->_returnStop
    _do_I2C_TX->_wr1RegCompleteHandler
    _do_I2C_TX->_wr2RegCompleteHandler
    _do_I2C_SEND_ADR_WRITE->_i2c_driver_TXData
    _do_I2C_SEND_ADR_READ->_i2c_driver_TXData
    _do_I2C_RX->_i2c_restartWrite
    _do_I2C_RX->_rd1RegCompleteHandler
    _do_I2C_RX->_rd2RegCompleteHandler
    _do_I2C_RX->_rdBlkRegCompleteHandler
    _do_I2C_RX->_returnReset
    _do_I2C_RX->_returnStop
    _do_I2C_RX->_wr1RegCompleteHandler
    _do_I2C_RX->_wr2RegCompleteHandler
    _do_I2C_DO_ADDRESS_NACK->_i2c_restartWrite
    _do_I2C_DO_ADDRESS_NACK->_rd1RegCompleteHandler
    _do_I2C_DO_ADDRESS_NACK->_rd2RegCompleteHandler
    _do_I2C_DO_ADDRESS_NACK->_rdBlkRegCompleteHandler
    _do_I2C_DO_ADDRESS_NACK->_returnReset
    _do_I2C_DO_ADDRESS_NACK->_returnStop
    _do_I2C_DO_ADDRESS_NACK->_wr1RegCompleteHandler
    _do_I2C_DO_ADDRESS_NACK->_wr2RegCompleteHandler
    _wr2RegCompleteHandler->_i2c_setDataCompleteCallback
    _wr1RegCompleteHandler->_i2c_setDataCompleteCallback
    _rdBlkRegCompleteHandler->_i2c_setDataCompleteCallback
    _rd2RegCompleteHandler->_i2c_setDataCompleteCallback
    _rd1RegCompleteHandler->_i2c_setDataCompleteCallback
    _i2c_setDataCompleteCallback->_setCallBack
    _drawWalls->_reverse
    _PIN_MANAGER_Initialize->_IOCCF4_SetInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    _INTERRUPT_InterruptManager->i1_i2c_ISR

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  409439
                                             70 BANK0      2     2      0
         _IOCCF4_SetInterruptHandler
                  _SYSTEM_Initialize
                        _clearPixels
                          _drawPixel
                          _drawWalls
                            _endGame
                  _initializeDisplay
                         _shiftWalls
                       _writeDisplay
 ---------------------------------------------------------------------------------
 (1) _shiftWalls                                           6     6      0     910
                                             32 BANK0      6     6      0
                             _random
 ---------------------------------------------------------------------------------
 (2) _random                                               4     3      1     910
                                             28 BANK0      4     3      1
                            ___awmod
                               _rand
 ---------------------------------------------------------------------------------
 (3) _rand                                                 7     5      2     244
                                             14 BANK0      7     5      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     244
                                              2 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4     448
                                             21 BANK0      7     3      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (1) _initializeDisplay                                    1     1      0   99626
                                             24 BANK0      1     1      0
                    _i2c_writeNBytes
 ---------------------------------------------------------------------------------
 (1) _endGame                                              3     3      0  206990
                                             67 BANK0      3     3      0
                        _clearPixels
                              _write
                       _writeDisplay
 ---------------------------------------------------------------------------------
 (2) _write                                               22    22      0  106129
                                             45 BANK0     22    22      0
                          _writeWord
 ---------------------------------------------------------------------------------
 (3) _writeWord                                           16    15      1  103804
                                             29 BANK0     16    15      1
                            ___awdiv
                        _clearPixels
                          _drawWalls
                       _writeDisplay
 ---------------------------------------------------------------------------------
 (1) _writeDisplay                                         5     5      0  100791
                                             24 BANK0      5     5      0
                            ___awdiv
                    _i2c_writeNBytes
 ---------------------------------------------------------------------------------
 (2) _i2c_writeNBytes                                      4     1      3   99626
                                             20 BANK0      4     1      3
                          _i2c_close
                    _i2c_masterWrite
                           _i2c_open
         _i2c_setAddressNACKCallback
                      _i2c_setBuffer
 ---------------------------------------------------------------------------------
 (3) _i2c_setAddressNACKCallback                           4     1      3    2259
                                              7 BANK0      4     1      3
                        _setCallBack
 ---------------------------------------------------------------------------------
 (3) _i2c_open                                             3     3      0     412
                                              4 BANK0      3     3      0
                    _i2c_driver_open
      _i2c_driver_setBusCollisionISR
               _i2c_driver_setI2cISR
                      _mssp_clearIRQ
 ---------------------------------------------------------------------------------
 (4) _i2c_driver_setI2cISR                                 2     0      2     121
                                              2 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _i2c_driver_setBusCollisionISR                        2     0      2     121
                                              2 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _i2c_driver_open                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2c_masterWrite                                      0     0      0   94222
                _i2c_masterOperation
 ---------------------------------------------------------------------------------
 (4) _i2c_masterOperation                                  3     3      0   94222
                                             17 BANK0      3     3      0
                   _i2c_driver_start
                         _i2c_poller
                  _mssp_IRQisEnabled
 ---------------------------------------------------------------------------------
 (5) _mssp_IRQisEnabled                                    2     2      0       0
                                              2 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (5) _i2c_poller                                           0     0      0   94052
                            _i2c_ISR
                  _mssp_waitForEvent
 ---------------------------------------------------------------------------------
 (6) _mssp_waitForEvent                                    1     1      0      55
                                              2 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _i2c_ISR                                              1     1      0   93997
                                             16 BANK0      1     1      0
                      _do_I2C_DO_ACK *
             _do_I2C_DO_ADDRESS_NACK *
             _do_I2C_DO_NACK_RESTART *
                _do_I2C_DO_NACK_STOP *
                        _do_I2C_IDLE *
                        _do_I2C_RCEN *
                       _do_I2C_RESET *
                          _do_I2C_RX *
               _do_I2C_SEND_ADR_READ *
              _do_I2C_SEND_ADR_WRITE *
                _do_I2C_SEND_RESTART *
           _do_I2C_SEND_RESTART_READ *
          _do_I2C_SEND_RESTART_WRITE *
                   _do_I2C_SEND_STOP *
                          _do_I2C_TX *
                    _do_I2C_TX_EMPTY *
                  _i2c_driver_isNACK
                      _mssp_clearIRQ
 ---------------------------------------------------------------------------------
 (7) _do_I2C_TX_EMPTY                                      1     1      0   23451
                                             12 BANK0      1     1      0
                   Absolute function *
                _do_I2C_SEND_RESTART
                   _do_I2C_SEND_STOP
                   _i2c_restartWrite *
                        _mssp_setIRQ
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
                        _returnReset *
                         _returnStop *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (8) _mssp_setIRQ                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_TX                                            4     4      0   23582
                                             12 BANK0      4     4      0
                   Absolute function *
           _do_I2C_SEND_RESTART_READ
          _do_I2C_SEND_RESTART_WRITE
                   _do_I2C_SEND_STOP
                  _i2c_driver_TXData
                  _i2c_driver_isNACK
                   _i2c_restartWrite *
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
                        _returnReset *
                         _returnStop *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (7) _i2c_driver_isNACK                                    1     1      0       0
                                              2 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (8) _do_I2C_SEND_RESTART_WRITE                            0     0      0       0
                 _i2c_driver_restart
 ---------------------------------------------------------------------------------
 (8) _do_I2C_SEND_RESTART_READ                             0     0      0       0
                 _i2c_driver_restart
 ---------------------------------------------------------------------------------
 (7) _do_I2C_SEND_ADR_WRITE                                0     0      0      31
                  _i2c_driver_TXData
 ---------------------------------------------------------------------------------
 (7) _do_I2C_SEND_ADR_READ                                 0     0      0      31
                  _i2c_driver_TXData
 ---------------------------------------------------------------------------------
 (8) _i2c_driver_TXData                                    1     1      0      31
                                              2 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_RX                                            1     1      0   23451
                                             12 BANK0      1     1      0
                   Absolute function *
             _do_I2C_DO_NACK_RESTART
                _do_I2C_DO_NACK_STOP
               _i2c_driver_getRXData
                 _i2c_driver_sendACK
                   _i2c_restartWrite *
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
                        _returnReset *
                         _returnStop *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (8) _i2c_driver_getRXData                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _do_I2C_DO_NACK_STOP                                  0     0      0       0
                _i2c_driver_sendNACK
 ---------------------------------------------------------------------------------
 (8) _do_I2C_DO_NACK_RESTART                               0     0      0       0
                _i2c_driver_sendNACK
 ---------------------------------------------------------------------------------
 (9) _i2c_driver_sendNACK                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_RESET                                         0     0      0       0
                _i2c_driver_resetBus
 ---------------------------------------------------------------------------------
 (8) _i2c_driver_resetBus                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_RCEN                                          0     0      0       0
                 _i2c_driver_startRX
 ---------------------------------------------------------------------------------
 (8) _i2c_driver_startRX                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_IDLE                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_DO_ADDRESS_NACK                               1     1      0   23451
                                             12 BANK0      1     1      0
                   Absolute function *
                _do_I2C_SEND_RESTART
                   _do_I2C_SEND_STOP
                   _i2c_restartWrite *
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
                        _returnReset *
                         _returnStop *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (8) _wr2RegCompleteHandler                                1     0      1    4632
                                             11 BANK0      1     0      1
                      _i2c_setBuffer
        _i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (8) _wr1RegCompleteHandler                                1     0      1    4632
                                             11 BANK0      1     0      1
                      _i2c_setBuffer
        _i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (8) _returnStop                                           1     0      1     108
                                             11 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (8) _returnReset                                          1     0      1     152
                                             11 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (8) _rdBlkRegCompleteHandler                              1     0      1    4663
                                             11 BANK0      1     0      1
                      _i2c_setBuffer
        _i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (8) _rd2RegCompleteHandler                                1     0      1    4632
                                             11 BANK0      1     0      1
                      _i2c_setBuffer
        _i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (8) _rd1RegCompleteHandler                                1     0      1    4632
                                             11 BANK0      1     0      1
                      _i2c_setBuffer
        _i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (9) _i2c_setDataCompleteCallback                          4     1      3    2979
                                              7 BANK0      4     1      3
                        _setCallBack
 ---------------------------------------------------------------------------------
 (4) _setCallBack                                          5     2      3    1117
                                              2 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (3) _i2c_setBuffer                                        4     0      4    1622
                                              2 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (8) _i2c_restartWrite                                     1     0      1       0
                                             11 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (8) _do_I2C_SEND_STOP                                     0     0      0       0
                    _i2c_driver_stop
 ---------------------------------------------------------------------------------
 (9) _i2c_driver_stop                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _do_I2C_SEND_RESTART                                  0     0      0       0
                 _i2c_driver_restart
 ---------------------------------------------------------------------------------
 (9) _i2c_driver_restart                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (17) Absolute function(Fake)                              1     0      1       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_DO_ACK                                        0     0      0       0
                 _i2c_driver_sendACK
 ---------------------------------------------------------------------------------
 (8) _i2c_driver_sendACK                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2c_driver_start                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2c_close                                            2     2      0      37
                                              2 BANK0      2     2      0
                      _mssp_clearIRQ
                    _mssp_disableIRQ
 ---------------------------------------------------------------------------------
 (4) _mssp_disableIRQ                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _mssp_clearIRQ                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4    1165
                                              2 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (4) _drawWalls                                            2     2      0     226
                                              6 BANK0      2     2      0
                            _reverse
 ---------------------------------------------------------------------------------
 (5) _reverse                                              4     4      0     226
                                              2 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _clearPixels                                          1     1      0       0
                                              2 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _drawPixel                                            9     7      2     548
                                              2 BANK0      9     7      2
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     174
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0     174
         _IOCCF4_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _IOCCF4_SetInterruptHandler                           2     0      2     174
                                              2 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 17
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (14) _INTERRUPT_InterruptManager                          1     1      0   14890
                                              1 BANK0      1     1      0
                   Absolute function *
                    _PIN_MANAGER_IOC
                _i2c_busCollisionISR *
                          i1_i2c_ISR *
 ---------------------------------------------------------------------------------
 (15) i1_i2c_ISR                                           1     1      0   14890
                                              0 BANK0      1     1      0
                    i1_do_I2C_DO_ACK *
           i1_do_I2C_DO_ADDRESS_NACK *
           i1_do_I2C_DO_NACK_RESTART *
              i1_do_I2C_DO_NACK_STOP *
                      i1_do_I2C_IDLE *
                      i1_do_I2C_RCEN *
                     i1_do_I2C_RESET *
                        i1_do_I2C_RX *
             i1_do_I2C_SEND_ADR_READ *
            i1_do_I2C_SEND_ADR_WRITE *
              i1_do_I2C_SEND_RESTART *
         i1_do_I2C_SEND_RESTART_READ *
        i1_do_I2C_SEND_RESTART_WRITE *
                 i1_do_I2C_SEND_STOP *
                        i1_do_I2C_TX *
                  i1_do_I2C_TX_EMPTY *
                i1_i2c_driver_isNACK
                    i1_mssp_clearIRQ
 ---------------------------------------------------------------------------------
 (16) i1_mssp_clearIRQ                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (16) i1_do_I2C_TX_EMPTY                                   1     1      0    3681
                                             10 COMMON     1     1      0
                   Absolute function *
              i1_do_I2C_SEND_RESTART
                 i1_do_I2C_SEND_STOP
                 i1_i2c_restartWrite *
                      i1_mssp_setIRQ
            i1_rd1RegCompleteHandler *
            i1_rd2RegCompleteHandler *
          i1_rdBlkRegCompleteHandler *
                      i1_returnReset *
                       i1_returnStop *
            i1_wr1RegCompleteHandler *
            i1_wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (17) i1_mssp_setIRQ                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (16) i1_do_I2C_TX                                         4     4      0    3803
                                             10 COMMON     4     4      0
                   Absolute function *
         i1_do_I2C_SEND_RESTART_READ
        i1_do_I2C_SEND_RESTART_WRITE
                 i1_do_I2C_SEND_STOP
                i1_i2c_driver_TXData
                i1_i2c_driver_isNACK
                 i1_i2c_restartWrite *
            i1_rd1RegCompleteHandler *
            i1_rd2RegCompleteHandler *
          i1_rdBlkRegCompleteHandler *
                      i1_returnReset *
                       i1_returnStop *
            i1_wr1RegCompleteHandler *
            i1_wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (16) i1_i2c_driver_isNACK                                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (17) i1_do_I2C_SEND_RESTART_WRITE                         0     0      0       0
               i1_i2c_driver_restart
 ---------------------------------------------------------------------------------
 (17) i1_do_I2C_SEND_RESTART_READ                          0     0      0       0
               i1_i2c_driver_restart
 ---------------------------------------------------------------------------------
 (16) i1_do_I2C_SEND_ADR_WRITE                             0     0      0      22
                i1_i2c_driver_TXData
 ---------------------------------------------------------------------------------
 (16) i1_do_I2C_SEND_ADR_READ                              0     0      0      22
                i1_i2c_driver_TXData
 ---------------------------------------------------------------------------------
 (17) i1_i2c_driver_TXData                                 1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (16) i1_do_I2C_RX                                         1     1      0    3681
                                             10 COMMON     1     1      0
                   Absolute function *
           i1_do_I2C_DO_NACK_RESTART
              i1_do_I2C_DO_NACK_STOP
             i1_i2c_driver_getRXData
               i1_i2c_driver_sendACK
                 i1_i2c_restartWrite *
            i1_rd1RegCompleteHandler *
            i1_rd2RegCompleteHandler *
          i1_rdBlkRegCompleteHandler *
                      i1_returnReset *
                       i1_returnStop *
            i1_wr1RegCompleteHandler *
            i1_wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (17) i1_i2c_driver_getRXData                              0     0      0       0
 ---------------------------------------------------------------------------------
 (17) i1_do_I2C_DO_NACK_STOP                               0     0      0       0
              i1_i2c_driver_sendNACK
 ---------------------------------------------------------------------------------
 (17) i1_do_I2C_DO_NACK_RESTART                            0     0      0       0
              i1_i2c_driver_sendNACK
 ---------------------------------------------------------------------------------
 (18) i1_i2c_driver_sendNACK                               0     0      0       0
 ---------------------------------------------------------------------------------
 (16) i1_do_I2C_RESET                                      0     0      0       0
              i1_i2c_driver_resetBus
 ---------------------------------------------------------------------------------
 (17) i1_i2c_driver_resetBus                               0     0      0       0
 ---------------------------------------------------------------------------------
 (16) i1_do_I2C_RCEN                                       0     0      0       0
               i1_i2c_driver_startRX
 ---------------------------------------------------------------------------------
 (17) i1_i2c_driver_startRX                                0     0      0       0
 ---------------------------------------------------------------------------------
 (16) i1_do_I2C_IDLE                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (16) i1_do_I2C_DO_ADDRESS_NACK                            1     1      0    3681
                                             10 COMMON     1     1      0
                   Absolute function *
              i1_do_I2C_SEND_RESTART
                 i1_do_I2C_SEND_STOP
                 i1_i2c_restartWrite *
            i1_rd1RegCompleteHandler *
            i1_rd2RegCompleteHandler *
          i1_rdBlkRegCompleteHandler *
                      i1_returnReset *
                       i1_returnStop *
            i1_wr1RegCompleteHandler *
            i1_wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (17) i1_wr2RegCompleteHandler                             1     0      1     711
                                              9 COMMON     1     0      1
                    i1_i2c_setBuffer
      i1_i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (17) i1_wr1RegCompleteHandler                             1     0      1     711
                                              9 COMMON     1     0      1
                    i1_i2c_setBuffer
      i1_i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (17) i1_returnStop                                        1     0      1      76
                                              9 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (17) i1_returnReset                                       1     0      1      28
                                              9 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (17) i1_rdBlkRegCompleteHandler                           1     0      1     733
                                              9 COMMON     1     0      1
                    i1_i2c_setBuffer
      i1_i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (17) i1_rd2RegCompleteHandler                             1     0      1     711
                                              9 COMMON     1     0      1
                    i1_i2c_setBuffer
      i1_i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (17) i1_rd1RegCompleteHandler                             1     0      1     711
                                              9 COMMON     1     0      1
                    i1_i2c_setBuffer
      i1_i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (18) i1_i2c_setDataCompleteCallback                       4     1      3     510
                                              5 COMMON     4     1      3
                      i1_setCallBack
 ---------------------------------------------------------------------------------
 (19) i1_setCallBack                                       5     2      3     206
                                              0 COMMON     5     2      3
 ---------------------------------------------------------------------------------
 (18) i1_i2c_setBuffer                                     4     0      4     179
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (17) i1_i2c_restartWrite                                  1     0      1       0
                                              9 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (17) i1_do_I2C_SEND_STOP                                  0     0      0       0
                  i1_i2c_driver_stop
 ---------------------------------------------------------------------------------
 (18) i1_i2c_driver_stop                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (17) i1_do_I2C_SEND_RESTART                               0     0      0       0
               i1_i2c_driver_restart
 ---------------------------------------------------------------------------------
 (18) i1_i2c_driver_restart                                0     0      0       0
 ---------------------------------------------------------------------------------
 (16) i1_do_I2C_DO_ACK                                     0     0      0       0
               i1_i2c_driver_sendACK
 ---------------------------------------------------------------------------------
 (17) i1_i2c_driver_sendACK                                0     0      0       0
 ---------------------------------------------------------------------------------
 (15) _i2c_busCollisionISR                                 0     0      0       0
       _i2c_driver_clearBusCollision
 ---------------------------------------------------------------------------------
 (16) _i2c_driver_clearBusCollision                        0     0      0       0
 ---------------------------------------------------------------------------------
 (15) _PIN_MANAGER_IOC                                     0     0      0       0
                         _IOCCF4_ISR
 ---------------------------------------------------------------------------------
 (16) _IOCCF4_ISR                                          0     0      0       0
                   Absolute function *
     _IOCCF4_DefaultInterruptHandler *
                    _buttonInterrupt *
 ---------------------------------------------------------------------------------
 (17) _buttonInterrupt                                     1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (17) _IOCCF4_DefaultInterruptHandler                      0     0      0       0
 ---------------------------------------------------------------------------------
 (17) Absolute function(Fake)                              1     0      1       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 19
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _IOCCF4_SetInterruptHandler
   _SYSTEM_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
       _IOCCF4_SetInterruptHandler
   _clearPixels
   _drawPixel
   _drawWalls
     _reverse
   _endGame
     _clearPixels
     _write
       _writeWord
         ___awdiv
         _clearPixels
         _drawWalls
           _reverse
         _writeDisplay
           ___awdiv
           _i2c_writeNBytes
             _i2c_close
               _mssp_clearIRQ
               _mssp_disableIRQ
             _i2c_masterWrite
               _i2c_masterOperation
                 _i2c_driver_start
                 _i2c_poller
                   _i2c_ISR
                     _do_I2C_DO_ACK *
                       _i2c_driver_sendACK
                     _do_I2C_DO_ADDRESS_NACK *
                       Absolute function(Fake) *
                       _do_I2C_SEND_RESTART *
                         _i2c_driver_restart
                       _do_I2C_SEND_STOP *
                         _i2c_driver_stop
                       _i2c_restartWrite *
                       _rd1RegCompleteHandler *
                         _i2c_setBuffer
                         _i2c_setDataCompleteCallback
                           _setCallBack
                       _rd2RegCompleteHandler *
                         _i2c_setBuffer
                         _i2c_setDataCompleteCallback
                           _setCallBack
                       _rdBlkRegCompleteHandler *
                         _i2c_setBuffer
                         _i2c_setDataCompleteCallback
                           _setCallBack
                       _returnReset *
                       _returnStop *
                       _wr1RegCompleteHandler *
                         _i2c_setBuffer
                         _i2c_setDataCompleteCallback
                           _setCallBack
                       _wr2RegCompleteHandler *
                         _i2c_setBuffer
                         _i2c_setDataCompleteCallback
                           _setCallBack
                     _do_I2C_DO_NACK_RESTART *
                       _i2c_driver_sendNACK
                     _do_I2C_DO_NACK_STOP *
                       _i2c_driver_sendNACK
                     _do_I2C_IDLE *
                     _do_I2C_RCEN *
                       _i2c_driver_startRX
                     _do_I2C_RESET *
                       _i2c_driver_resetBus
                     _do_I2C_RX *
                       Absolute function(Fake) *
                       _do_I2C_DO_NACK_RESTART *
                         _i2c_driver_sendNACK
                       _do_I2C_DO_NACK_STOP *
                         _i2c_driver_sendNACK
                       _i2c_driver_getRXData *
                       _i2c_driver_sendACK *
                       _i2c_restartWrite *
                       _rd1RegCompleteHandler *
                         _i2c_setBuffer
                         _i2c_setDataCompleteCallback
                           _setCallBack
                       _rd2RegCompleteHandler *
                         _i2c_setBuffer
                         _i2c_setDataCompleteCallback
                           _setCallBack
                       _rdBlkRegCompleteHandler *
                         _i2c_setBuffer
                         _i2c_setDataCompleteCallback
                           _setCallBack
                       _returnReset *
                       _returnStop *
                       _wr1RegCompleteHandler *
                         _i2c_setBuffer
                         _i2c_setDataCompleteCallback
                           _setCallBack
                       _wr2RegCompleteHandler *
                         _i2c_setBuffer
                         _i2c_setDataCompleteCallback
                           _setCallBack
                     _do_I2C_SEND_ADR_READ *
                       _i2c_driver_TXData
                     _do_I2C_SEND_ADR_WRITE *
                       _i2c_driver_TXData
                     _do_I2C_SEND_RESTART *
                       _i2c_driver_restart
                     _do_I2C_SEND_RESTART_READ *
                       _i2c_driver_restart
                     _do_I2C_SEND_RESTART_WRITE *
                       _i2c_driver_restart
                     _do_I2C_SEND_STOP *
                       _i2c_driver_stop
                     _do_I2C_TX *
                       Absolute function(Fake) *
                       _do_I2C_SEND_RESTART_READ *
                         _i2c_driver_restart
                       _do_I2C_SEND_RESTART_WRITE *
                         _i2c_driver_restart
                       _do_I2C_SEND_STOP *
                         _i2c_driver_stop
                       _i2c_driver_TXData *
                       _i2c_driver_isNACK *
                       _i2c_restartWrite *
                       _rd1RegCompleteHandler *
                         _i2c_setBuffer
                         _i2c_setDataCompleteCallback
                           _setCallBack
                       _rd2RegCompleteHandler *
                         _i2c_setBuffer
                         _i2c_setDataCompleteCallback
                           _setCallBack
                       _rdBlkRegCompleteHandler *
                         _i2c_setBuffer
                         _i2c_setDataCompleteCallback
                           _setCallBack
                       _returnReset *
                       _returnStop *
                       _wr1RegCompleteHandler *
                         _i2c_setBuffer
                         _i2c_setDataCompleteCallback
                           _setCallBack
                       _wr2RegCompleteHandler *
                         _i2c_setBuffer
                         _i2c_setDataCompleteCallback
                           _setCallBack
                     _do_I2C_TX_EMPTY *
                       Absolute function(Fake) *
                       _do_I2C_SEND_RESTART *
                         _i2c_driver_restart
                       _do_I2C_SEND_STOP *
                         _i2c_driver_stop
                       _i2c_restartWrite *
                       _mssp_setIRQ *
                       _rd1RegCompleteHandler *
                         _i2c_setBuffer
                         _i2c_setDataCompleteCallback
                           _setCallBack
                       _rd2RegCompleteHandler *
                         _i2c_setBuffer
                         _i2c_setDataCompleteCallback
                           _setCallBack
                       _rdBlkRegCompleteHandler *
                         _i2c_setBuffer
                         _i2c_setDataCompleteCallback
                           _setCallBack
                       _returnReset *
                       _returnStop *
                       _wr1RegCompleteHandler *
                         _i2c_setBuffer
                         _i2c_setDataCompleteCallback
                           _setCallBack
                       _wr2RegCompleteHandler *
                         _i2c_setBuffer
                         _i2c_setDataCompleteCallback
                           _setCallBack
                     _i2c_driver_isNACK *
                     _mssp_clearIRQ *
                   _mssp_waitForEvent
                 _mssp_IRQisEnabled
             _i2c_open
               _i2c_driver_open
               _i2c_driver_setBusCollisionISR
               _i2c_driver_setI2cISR
               _mssp_clearIRQ
             _i2c_setAddressNACKCallback
               _setCallBack
             _i2c_setBuffer
     _writeDisplay
       ___awdiv
       _i2c_writeNBytes
         _i2c_close
           _mssp_clearIRQ
           _mssp_disableIRQ
         _i2c_masterWrite
           _i2c_masterOperation
             _i2c_driver_start
             _i2c_poller
               _i2c_ISR
                 _do_I2C_DO_ACK *
                   _i2c_driver_sendACK
                 _do_I2C_DO_ADDRESS_NACK *
                   Absolute function(Fake) *
                   _do_I2C_SEND_RESTART *
                     _i2c_driver_restart
                   _do_I2C_SEND_STOP *
                     _i2c_driver_stop
                   _i2c_restartWrite *
                   _rd1RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _rd2RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _rdBlkRegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _returnReset *
                   _returnStop *
                   _wr1RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _wr2RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                 _do_I2C_DO_NACK_RESTART *
                   _i2c_driver_sendNACK
                 _do_I2C_DO_NACK_STOP *
                   _i2c_driver_sendNACK
                 _do_I2C_IDLE *
                 _do_I2C_RCEN *
                   _i2c_driver_startRX
                 _do_I2C_RESET *
                   _i2c_driver_resetBus
                 _do_I2C_RX *
                   Absolute function(Fake) *
                   _do_I2C_DO_NACK_RESTART *
                     _i2c_driver_sendNACK
                   _do_I2C_DO_NACK_STOP *
                     _i2c_driver_sendNACK
                   _i2c_driver_getRXData *
                   _i2c_driver_sendACK *
                   _i2c_restartWrite *
                   _rd1RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _rd2RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _rdBlkRegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _returnReset *
                   _returnStop *
                   _wr1RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _wr2RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                 _do_I2C_SEND_ADR_READ *
                   _i2c_driver_TXData
                 _do_I2C_SEND_ADR_WRITE *
                   _i2c_driver_TXData
                 _do_I2C_SEND_RESTART *
                   _i2c_driver_restart
                 _do_I2C_SEND_RESTART_READ *
                   _i2c_driver_restart
                 _do_I2C_SEND_RESTART_WRITE *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _do_I2C_TX *
                   Absolute function(Fake) *
                   _do_I2C_SEND_RESTART_READ *
                     _i2c_driver_restart
                   _do_I2C_SEND_RESTART_WRITE *
                     _i2c_driver_restart
                   _do_I2C_SEND_STOP *
                     _i2c_driver_stop
                   _i2c_driver_TXData *
                   _i2c_driver_isNACK *
                   _i2c_restartWrite *
                   _rd1RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _rd2RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _rdBlkRegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _returnReset *
                   _returnStop *
                   _wr1RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _wr2RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                 _do_I2C_TX_EMPTY *
                   Absolute function(Fake) *
                   _do_I2C_SEND_RESTART *
                     _i2c_driver_restart
                   _do_I2C_SEND_STOP *
                     _i2c_driver_stop
                   _i2c_restartWrite *
                   _mssp_setIRQ *
                   _rd1RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _rd2RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _rdBlkRegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _returnReset *
                   _returnStop *
                   _wr1RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _wr2RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                 _i2c_driver_isNACK *
                 _mssp_clearIRQ *
               _mssp_waitForEvent
             _mssp_IRQisEnabled
         _i2c_open
           _i2c_driver_open
           _i2c_driver_setBusCollisionISR
           _i2c_driver_setI2cISR
           _mssp_clearIRQ
         _i2c_setAddressNACKCallback
           _setCallBack
         _i2c_setBuffer
   _initializeDisplay
     _i2c_writeNBytes
       _i2c_close
         _mssp_clearIRQ
         _mssp_disableIRQ
       _i2c_masterWrite
         _i2c_masterOperation
           _i2c_driver_start
           _i2c_poller
             _i2c_ISR
               _do_I2C_DO_ACK *
                 _i2c_driver_sendACK
               _do_I2C_DO_ADDRESS_NACK *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_DO_NACK_RESTART *
                 _i2c_driver_sendNACK
               _do_I2C_DO_NACK_STOP *
                 _i2c_driver_sendNACK
               _do_I2C_IDLE *
               _do_I2C_RCEN *
                 _i2c_driver_startRX
               _do_I2C_RESET *
                 _i2c_driver_resetBus
               _do_I2C_RX *
                 Absolute function(Fake) *
                 _do_I2C_DO_NACK_RESTART *
                   _i2c_driver_sendNACK
                 _do_I2C_DO_NACK_STOP *
                   _i2c_driver_sendNACK
                 _i2c_driver_getRXData *
                 _i2c_driver_sendACK *
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_SEND_ADR_READ *
                 _i2c_driver_TXData
               _do_I2C_SEND_ADR_WRITE *
                 _i2c_driver_TXData
               _do_I2C_SEND_RESTART *
                 _i2c_driver_restart
               _do_I2C_SEND_RESTART_READ *
                 _i2c_driver_restart
               _do_I2C_SEND_RESTART_WRITE *
                 _i2c_driver_restart
               _do_I2C_SEND_STOP *
                 _i2c_driver_stop
               _do_I2C_TX *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART_READ *
                   _i2c_driver_restart
                 _do_I2C_SEND_RESTART_WRITE *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_driver_TXData *
                 _i2c_driver_isNACK *
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_TX_EMPTY *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_restartWrite *
                 _mssp_setIRQ *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _i2c_driver_isNACK *
               _mssp_clearIRQ *
             _mssp_waitForEvent
           _mssp_IRQisEnabled
       _i2c_open
         _i2c_driver_open
         _i2c_driver_setBusCollisionISR
         _i2c_driver_setI2cISR
         _mssp_clearIRQ
       _i2c_setAddressNACKCallback
         _setCallBack
       _i2c_setBuffer
   _shiftWalls
     _random
       ___awmod
         _rand (ARG)
           ___lmul
       _rand
         ___lmul
   _writeDisplay
     ___awdiv
     _i2c_writeNBytes
       _i2c_close
         _mssp_clearIRQ
         _mssp_disableIRQ
       _i2c_masterWrite
         _i2c_masterOperation
           _i2c_driver_start
           _i2c_poller
             _i2c_ISR
               _do_I2C_DO_ACK *
                 _i2c_driver_sendACK
               _do_I2C_DO_ADDRESS_NACK *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_DO_NACK_RESTART *
                 _i2c_driver_sendNACK
               _do_I2C_DO_NACK_STOP *
                 _i2c_driver_sendNACK
               _do_I2C_IDLE *
               _do_I2C_RCEN *
                 _i2c_driver_startRX
               _do_I2C_RESET *
                 _i2c_driver_resetBus
               _do_I2C_RX *
                 Absolute function(Fake) *
                 _do_I2C_DO_NACK_RESTART *
                   _i2c_driver_sendNACK
                 _do_I2C_DO_NACK_STOP *
                   _i2c_driver_sendNACK
                 _i2c_driver_getRXData *
                 _i2c_driver_sendACK *
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_SEND_ADR_READ *
                 _i2c_driver_TXData
               _do_I2C_SEND_ADR_WRITE *
                 _i2c_driver_TXData
               _do_I2C_SEND_RESTART *
                 _i2c_driver_restart
               _do_I2C_SEND_RESTART_READ *
                 _i2c_driver_restart
               _do_I2C_SEND_RESTART_WRITE *
                 _i2c_driver_restart
               _do_I2C_SEND_STOP *
                 _i2c_driver_stop
               _do_I2C_TX *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART_READ *
                   _i2c_driver_restart
                 _do_I2C_SEND_RESTART_WRITE *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_driver_TXData *
                 _i2c_driver_isNACK *
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_TX_EMPTY *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_restartWrite *
                 _mssp_setIRQ *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _i2c_driver_isNACK *
               _mssp_clearIRQ *
             _mssp_waitForEvent
           _mssp_IRQisEnabled
       _i2c_open
         _i2c_driver_open
         _i2c_driver_setBusCollisionISR
         _i2c_driver_setI2cISR
         _mssp_clearIRQ
       _i2c_setAddressNACKCallback
         _setCallBack
       _i2c_setBuffer

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _PIN_MANAGER_IOC *
     _IOCCF4_ISR
       Absolute function(Fake) *
       _IOCCF4_DefaultInterruptHandler *
       _buttonInterrupt *
   _i2c_busCollisionISR *
     _i2c_driver_clearBusCollision
   i1_i2c_ISR *
     i1_do_I2C_DO_ACK *
       i1_i2c_driver_sendACK
     i1_do_I2C_DO_ADDRESS_NACK *
       Absolute function(Fake) *
       i1_do_I2C_SEND_RESTART *
         i1_i2c_driver_restart
       i1_do_I2C_SEND_STOP *
         i1_i2c_driver_stop
       i1_i2c_restartWrite *
       i1_rd1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rd2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rdBlkRegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_returnReset *
       i1_returnStop *
       i1_wr1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_wr2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
     i1_do_I2C_DO_NACK_RESTART *
       i1_i2c_driver_sendNACK
     i1_do_I2C_DO_NACK_STOP *
       i1_i2c_driver_sendNACK
     i1_do_I2C_IDLE *
     i1_do_I2C_RCEN *
       i1_i2c_driver_startRX
     i1_do_I2C_RESET *
       i1_i2c_driver_resetBus
     i1_do_I2C_RX *
       Absolute function(Fake) *
       i1_do_I2C_DO_NACK_RESTART *
         i1_i2c_driver_sendNACK
       i1_do_I2C_DO_NACK_STOP *
         i1_i2c_driver_sendNACK
       i1_i2c_driver_getRXData *
       i1_i2c_driver_sendACK *
       i1_i2c_restartWrite *
       i1_rd1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rd2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rdBlkRegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_returnReset *
       i1_returnStop *
       i1_wr1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_wr2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
     i1_do_I2C_SEND_ADR_READ *
       i1_i2c_driver_TXData
     i1_do_I2C_SEND_ADR_WRITE *
       i1_i2c_driver_TXData
     i1_do_I2C_SEND_RESTART *
       i1_i2c_driver_restart
     i1_do_I2C_SEND_RESTART_READ *
       i1_i2c_driver_restart
     i1_do_I2C_SEND_RESTART_WRITE *
       i1_i2c_driver_restart
     i1_do_I2C_SEND_STOP *
       i1_i2c_driver_stop
     i1_do_I2C_TX *
       Absolute function(Fake) *
       i1_do_I2C_SEND_RESTART_READ *
         i1_i2c_driver_restart
       i1_do_I2C_SEND_RESTART_WRITE *
         i1_i2c_driver_restart
       i1_do_I2C_SEND_STOP *
         i1_i2c_driver_stop
       i1_i2c_driver_TXData *
       i1_i2c_driver_isNACK *
       i1_i2c_restartWrite *
       i1_rd1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rd2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rdBlkRegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_returnReset *
       i1_returnStop *
       i1_wr1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_wr2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
     i1_do_I2C_TX_EMPTY *
       Absolute function(Fake) *
       i1_do_I2C_SEND_RESTART *
         i1_i2c_driver_restart
       i1_do_I2C_SEND_STOP *
         i1_i2c_driver_stop
       i1_i2c_restartWrite *
       i1_mssp_setIRQ *
       i1_rd1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rd2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rdBlkRegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_returnReset *
       i1_returnStop *
       i1_wr1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_wr2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
     i1_i2c_driver_isNACK *
     i1_mssp_clearIRQ *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     48      4D       5       96.3%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      49       7       91.3%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      48       9       90.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      31      11       61.3%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     11D      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     11D      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Apr 16 11:53:57 2018

                __end_of_i2c_driver_restart 0BA9                         i1_i2c_driver_isNACK 0CFC  
                              returnReset@p 002B                  __end_of_i2c_driver_startRX 0BAF  
                                         _i 006A      __end_of_IOCCF4_DefaultInterruptHandler 0B7F  
   __size_of_IOCCF4_DefaultInterruptHandler 0001              _IOCCF4_DefaultInterruptHandler 0B7E  
             _do_I2C_SEND_RESTART$intlevel0 0C54                                 __CFG_CP$OFF 0000  
                                        l95 0CA2                             i1_mssp_clearIRQ 0B9A  
                              ___awdiv@sign 0028                        __size_of_do_I2C_IDLE 0009  
                       _do_I2C_SEND_RESTART 0C50                        __size_of_do_I2C_RCEN 000A  
                      __end_ofi1_returnStop 0B83                        ?i1_i2c_driver_TXData 0070  
                               i1_do_I2C_RX 06A8                                 i1_do_I2C_TX 058E  
                               __CFG_LVP$ON 0000                        i1_i2c_driver_sendACK 0BB5  
                                       l319 0CDD                                         l616 0E0F  
                                       l609 058B                                         l706 05FD  
                                       l690 0475                    i1_do_I2C_DO_NACK_RESTART 0BD5  
              __size_of_i2c_masterOperation 0024                        _returnStop$intlevel0 0C10  
                      i1_i2c_driver_restart 0B8B               i2c_setDataCompleteCallback@cb 0027  
                              ___awmod@sign 003B                    ?i1_rd2RegCompleteHandler 0079  
                     __size_of_do_I2C_RESET 000B                                __CFG_BORV$LO 0000  
                                       wreg 0009                               writeWord@text 004A  
                              __CFG_IESO$ON 0000                        i1_i2c_driver_startRX 0B91  
                     __end_ofi1_returnReset 0B85                        ?i1_i2c_driver_isNACK 0070  
                  ?i1_wr2RegCompleteHandler 0079             ??i1_i2c_setDataCompleteCallback 0078  
                    i1_i2c_driver_getRXData 0B94                       __end_ofi1_mssp_setIRQ 0B9A  
                              __CFG_ZCD$OFF 0000                     ??_rd2RegCompleteHandler 002C  
                     i1_i2c_driver_sendNACK 0BB9                                        l3101 063A  
                                      l3013 075B                                        l3103 0646  
                                      l3111 065B                                        l3017 0765  
                                      l3115 0663                                        l3107 0652  
                                      l4205 04B3                                        l3093 0634  
                                      l4231 04EA                                        l4223 04D9  
                                      l4215 04BB                                        l4217 04C7  
                                      l3089 062D                                        l3513 01BA  
                                      l4227 04E2                                        l6003 0790  
                                      l6011 07DE                                        l3531 01FB  
                             i1returnStop@p 0079                                        l3461 00FF  
                                      l3453 00A6                                        l3543 0232  
                                      l3519 01CE                                        l3457 00D5  
                                      l6009 0793                                        l6041 0F7C  
                                      l3537 01FF                                        l3529 01ED  
                                      l6019 07EF                                        l6027 0CE5  
                                      l6115 0439                                        l6131 0198  
                                      l3539 022B                                        l3901 0C16  
                                      l6045 0F86                                        l6109 03F2  
                                      l6125 013D                                        l4199 04A8  
                                      l3823 0E31                                        l3831 0E4C  
                                      l3911 0CC8                                        l6039 0F76  
                                      l3905 0C0A                                        l3921 0C85  
                                      l6161 028C                                        l6153 025B  
                                      l6313 02BF                                        l6401 0369  
                                      l6091 0FD9                                        l6139 012F  
                                      l6331 02F0                                        l3861 0C44  
                                      l6157 0264                                        l6405 036F  
                                      l3791 0FA0                                        l3847 0E16  
                                      l3839 0E67                                        l3855 0EC0  
                                      l6343 0300                                        l6319 02CF  
                                      l6415 0385                                        l6407 0372  
                                      l3873 0C54                                        l3929 0D0C  
                                      l3937 0CD3                                        l3945 0CAA  
                                      l3953 0C64                                        l6353 0312  
                                      l6329 02EE                                        l6281 03A4  
                                      l6409 0376                                        l3867 0C4C  
                                      l3891 0C74                                        l6099 0FF9  
                                      l6275 039F                                        l3885 0C6C  
                                      l6349 030D                                        l6293 03B7  
                                      l6269 0390                                        l3879 0C5C  
                                      l6287 03B2                                        l6383 0335  
                                      l3897 0C10                                        l6393 0356  
                                      l5923 07BD                                        l6299 03C4  
                                      l6395 035A                                        l5933 07C3  
                                      l5927 07C0                                        l5919 07B4  
                                      l5943 0452                                        l5935 0449  
                                      l5961 0496                                        l5953 0458  
                                      l5947 0455                                        l5939 044F  
                                      l5965 05DF                                        l5991 0786  
                                      l5983 0602                                        l5993 0789  
                                      l5979 05FF                                        l5997 078C  
                                      l5989 0605                                        u2104 00E1  
                                      u2105 00DF                                        u2114 00ED  
                                      u2115 00EB                                        u2044 0083  
                                      u2045 0081                                        _LATA 010C  
                                      u2134 010C                                        u2054 0098  
                                      _LATB 010D                                        u2135 010A  
                                      u2055 0096                                        _LATC 010E  
                                      u2144 0118                                        u2145 0116  
                                      u2074 00B4                                        u2075 00B2  
                                      u2084 00C7                                        u2085 00C5  
                                      u2255 0220                                        u1735 0766  
                                      u1905 0653                                        u1745 076D  
                                      u5124 0162                                        u2805 06ED  
                                      u5125 0161                                        u5134 0185  
                                      u2815 06F3                                        u5135 0184  
                                      u1775 0533                                        u2825 0700  
                                      u2905 04C8                                        u2835 0706  
                                      u2915 04D2                                        u1875 063D  
                                      u2845 0713                                        u2925 04DA  
                                      u1895 064C                                        u5345 02E6  
                                      u2885 04BE                                        u5677 02D8  
                      ?_do_I2C_SEND_RESTART 0070                                        u5687 01A7  
                                      u5697 0CE1                                        _PLLR 04D6  
                                      _WPUA 020C                                        _WPUB 020D  
                                      _WPUC 020E                     ??_wr2RegCompleteHandler 002C  
                              __CFG_WRT$OFF 0000                               __CFG_FCMEN$ON 0000  
                     i1_i2c_driver_resetBus 0B7F           __size_of_do_I2C_SEND_RESTART_READ 0008  
                                      _fall 00E6                   ?_do_I2C_SEND_RESTART_READ 0070  
                           ??_mssp_clearIRQ 0022                                        _main 0321  
                                      _rand 04EF                   __size_of_do_I2C_SEND_STOP 0008  
                    __size_of_do_I2C_DO_ACK 0008                                        fsr0h 0005  
                                      fsr1h 0007                                        indf0 0000  
                                      fsr0l 0004                                        indf1 0001  
                                      fsr1l 0006                                        btemp 007E  
                         ??i1_do_I2C_DO_ACK 0070                               __CFG_BOREN$ON 0000  
                     ?_do_I2C_SEND_ADR_READ 0070                    __size_of_i2c_writeNBytes 0029  
                                      start 0030                               _i2c_setBuffer 0DC8  
                             __CFG_MCLRE$ON 0000                             __end_of_i2c_ISR 0800  
          __size_of_rdBlkRegCompleteHandler 0020                    ??_do_I2C_DO_NACK_RESTART 0022  
                             i1_do_I2C_IDLE 0BEA                               i1_do_I2C_RCEN 0BFA  
                              _do_I2C_RESET 0CC4                              i1returnReset@p 0079  
                             __CFG_PLLEN$ON 0000              __size_of_OSCILLATOR_Initialize 000A  
               i2c_setAddressNACKCallback@p 0029                       ??i1_i2c_driver_TXData 0070  
             __end_of_OSCILLATOR_Initialize 0CA6                         __size_of_IOCCF4_ISR 000D  
                     ?i1_i2c_driver_sendACK 0070                                       ?_main 0070  
                                     ?_rand 002E                             __end_of___awdiv 04EF  
                             __CFG_WDTE$OFF 0000                             __end_of___awmod 0668  
                  __size_of_mssp_disableIRQ 0003                             ___awdiv@divisor 0022  
                                     i1l533 002B                                       i1l525 0010  
                                     i1l528 001F                                       i1l706 06C3  
                                     i1l690 05B9                             ___awdiv@counter 0027  
                     ?i1_i2c_driver_restart 0070                                       _TRISA 008C  
                                     _TRISB 008D                                       _TRISC 008E  
                     ?i1_i2c_driver_startRX 0070                             __end_of_endGame 0321  
                       ___lmul@multiplicand 0026                       ??i1_i2c_driver_isNACK 0070  
                               i2c_open@ret 0026                                 _writebuffer 01C0  
                        __size_ofi1_i2c_ISR 0022                     __end_of_PIN_MANAGER_IOC 0BFA  
                                     _randx 00E2                        _i2c_driver_getRXData 0BAF  
              ?i1_do_I2C_SEND_RESTART_WRITE 0070                  ?_do_I2C_SEND_RESTART_WRITE 0070  
                                     _score 00DA                                       _walls 00CE  
                                     _start 00E0                       ??_do_I2C_SEND_RESTART 0022  
                                     _write 0239                                       pclath 000A  
                           __end_of_reverse 071E                  _i2c_driver_busCollisionISR 00DE  
                    ?_do_I2C_SEND_ADR_WRITE 0070                                       status 0003  
                                     wtemp0 007E                       __size_of_writeDisplay 005C  
                        i2c_driver_TXData@d 0022                   __size_of_i2c_driver_start 0003  
                            ?_i2c_setBuffer 0022                                ?_setCallBack 0022  
                   __end_ofi1_mssp_clearIRQ 0B9D                               _fsmStateTable 01A0  
                           __initialization 0032                        __size_of_clearPixels 0012  
            __size_ofi1_do_I2C_SEND_RESTART 0004                                  _i2c_poller 0CE5  
             __end_ofi1_do_I2C_SEND_RESTART 0BC9                                  _i2c_status 00A0  
                            ?i1_do_I2C_IDLE 0070                                __end_of_main 038A  
                              __end_of_rand 0540                              ?i1_do_I2C_RCEN 0070  
                __end_ofi1_do_I2C_SEND_STOP 0BCD                            __end_of_i2c_open 058E  
                      _i2c_driver_setI2cISR 0C93                              __CFG_LPBOR$OFF 0000  
               ?_INTERRUPT_InterruptManager 0070             __end_ofi1_rd2RegCompleteHandler 0DC8  
                             setCallBack@cb 0022                              i1_do_I2C_RESET 0C2A  
                             _do_I2C_DO_ACK 0C60                                      ??_main 0066  
                                    ??_rand 0030                           ?_i2c_restartWrite 002B  
           __end_ofi1_wr2RegCompleteHandler 0D89                                i2c_close@ret 0023  
                           _i2c_driver_open 0CBA                          ??_i2c_restartWrite 002C  
                           _i2c_driver_stop 0BA9                     ?_do_I2C_DO_ADDRESS_NACK 0070  
                    ?i1_i2c_driver_sendNACK 0070                                _writeDisplay 03E9  
                     ?_i2c_driver_getRXData 0070                ??_IOCCF4_SetInterruptHandler 0024  
                          ___awdiv@dividend 0024             i1i2c_setDataCompleteCallback@cb 0075  
                                    _ANSELA 018C                                      _ANSELB 018D  
                                    _ANSELC 018E                                      _BORCON 0116  
                                    ?_write 0070                     ?i1_do_I2C_SEND_ADR_READ 0070  
                    ?i1_i2c_driver_resetBus 0070                                      _RB4PPS 0E9C  
                                    _RB6PPS 0E9E                                      _ODCONA 028C  
                                    _ODCONB 028D                                      i1l3203 0BD5  
                                    _ODCONC 028E                                      i1l3213 0B83  
                                    i1l3135 0D89                                      i1l3143 0D9E  
                                    i1l3151 0DB3                                      i1l3303 0C2A  
                                    i1l3209 0B81                                      i1l3217 0002  
                                    i1l3313 0BEA                                      i1l3321 0C38  
                                    i1l3173 0BBD                                      i1l3159 0D74  
                                    i1l3167 0DDD                                      i1l3191 0BC9  
                                    i1l3185 0BC5                                      i1l3329 0C31  
                                    i1l3337 0BFA                                      i1l3345 0BCD  
                                    i1l3179 0BC1                                      i1l3197 0BD1  
                                    i1l6201 059D                                      i1l6213 06A8  
                                    i1l6231 06C8                                      i1l6145 0D2B  
                                    i1l6241 0FB1                                      i1l6209 05D5  
                                    i1l6251 0FB8                                      i1l6171 0F25  
                                    i1l6227 06C5                                      i1l6245 0FB4  
                                    i1l6181 0F2B                                      i1l6237 06CB  
                                    i1l6239 0FAE                                      i1l6175 0F28  
                                    i1l6167 0F1E                                      i1l6191 0597  
                                    i1l6183 058E                                      i1l2969 0F57  
                                    i1l6257 0FBB                                      i1l6195 059A  
                                    i1l6187 0594                                      i1l6371 0F0D  
                                    i1l6363 0EFC               ??i1_do_I2C_SEND_RESTART_WRITE 0070  
                        __size_of_i2c_close 001B                                      _OSCCON 0099  
                   i1_rd1RegCompleteHandler 0D9E                      ??_do_I2C_SEND_ADR_READ 0023  
                  rdBlkRegCompleteHandler@p 002B                                   ??_i2c_ISR 0030  
                   i1_wr1RegCompleteHandler 0D89                 ??i1_rdBlkRegCompleteHandler 007A  
                            __CFG_PWRTE$OFF 0000                         _do_I2C_RX$intlevel0 05DF  
                     __size_ofi1_returnStop 0002                 __end_of_do_I2C_DO_NACK_STOP 0C70  
                         __end_ofi1_i2c_ISR 0F1E         __end_of_i2c_setDataCompleteCallback 0D48  
               _i2c_setDataCompleteCallback 0D3B                                      ___lmul 0752  
                           _i2c_masterWrite 0BE1                                   ??___awdiv 0026  
                            __CFG_STVREN$ON 0000                                   ??___awmod 0039  
           __size_of_do_I2C_DO_NACK_RESTART 0008                       ?_i2c_driver_setI2cISR 0022  
                         ??_i2c_writeNBytes 0037                      __end_ofi1_do_I2C_RESET 0C31  
                           i1_i2c_setBuffer 0D2E                      ??i1_i2c_driver_sendACK 0070  
                                    _random 0E9D                                   ??_endGame 0063  
                          ___awdiv@quotient 0029                              ?_do_I2C_DO_ACK 0070  
                           ___awmod@divisor 0035                             _buttonInterrupt 0D14  
               __size_ofi1_i2c_restartWrite 0002                             ___awmod@counter 003A  
                    ??i1_i2c_driver_restart 0070         __size_of_IOCCF4_SetInterruptHandler 0009  
                    ??i1_i2c_driver_startRX 0070              __end_of_do_I2C_DO_ADDRESS_NACK 07DA  
               ?_i2c_setAddressNACKCallback 0027                                ?_returnReset 002B  
                                 ??_reverse 0022               _do_I2C_DO_NACK_STOP$intlevel0 0C6C  
                i1rdBlkRegCompleteHandler@p 0079           __size_ofi1_do_I2C_DO_ADDRESS_NACK 0023  
                              ?_mssp_setIRQ 0070              __end_ofi1_do_I2C_SEND_ADR_READ 0C40  
                         ??_mssp_disableIRQ 0022  IOCCF4_SetInterruptHandler@InterruptHandler 0022  
                 ?i1_do_I2C_DO_ADDRESS_NACK 0070                            ?_PIN_MANAGER_IOC 0070  
                              ??_IOCCF4_ISR 0071                           i1_do_I2C_TX_EMPTY 0FAE  
                         _SYSTEM_Initialize 0C00                     __end_of__initialization 0072  
                           ??_i2c_setBuffer 0026              _do_I2C_SEND_ADR_READ$intlevel0 0D0C  
                          _do_I2C_SEND_STOP 0C58                                i1_returnStop 0B81  
                     i1_do_I2C_DO_NACK_STOP 0BD1                          __size_of_do_I2C_RX 0047  
                        __size_of_do_I2C_TX 0058                          ?i1_do_I2C_TX_EMPTY 0070  
                        ?_SYSTEM_Initialize 0070           _rdBlkRegCompleteHandler$intlevel0 0EC0  
                       _i2c_masterOperation 0F65                    __size_of_do_I2C_TX_EMPTY 002E  
                          ?i1_mssp_clearIRQ 0070                             ??i1_do_I2C_IDLE 0070  
                           ??i1_do_I2C_RCEN 0070                     _rdBlkRegCompleteHandler 0EBC  
                               ?_i2c_poller 0070                              __pcstackCOMMON 0070  
                ??i1_do_I2C_DO_NACK_RESTART 0070                         _do_I2C_TX$intlevel0 0449  
                       ??i1_do_I2C_TX_EMPTY 007A                                __pidataBANK1 0BEF  
                              __pidataBANK2 0668                                __pidataBANK3 0EDC  
                       ??_SYSTEM_Initialize 0024                             ?i1_do_I2C_RESET 0070  
                   __end_of_i2c_driver_open 0CC4                     __end_of_i2c_driver_stop 0BAC  
                             __end_of_write 02B5                           __end_of_i2c_close 0E12  
                              ?i1_do_I2C_RX 0070                                ?i1_do_I2C_TX 0070  
                            drawPixel@color 0023                         i1i2c_restartWrite@p 0079  
                        __end_of_IOCCF4_ISR 0D2E                          _i2c_driver_sendACK 0BD9  
                 i1_rdBlkRegCompleteHandler 0DDD                        ?_i2c_masterOperation 0070  
            i1i2c_setDataCompleteCallback@p 0077                     ?i1_i2c_driver_getRXData 0070  
                            _OPTION_REGbits 0095                ??i1_do_I2C_SEND_RESTART_READ 0070  
                        _i2c_driver_restart 0BA6                                 random@lower 003F  
                    __size_ofi1_setCallBack 0024                          _i2c_driver_startRX 0BAC  
                               random@upper 003C                      ??_i2c_driver_getRXData 0022  
                           i1setCallBack@cb 0070                    i1rd1RegCompleteHandler@p 0079  
                           i1_do_I2C_DO_ACK 0BCD                          __size_of_drawPixel 00B6  
                        __size_of_drawWalls 001F                         ?_i2c_driver_sendACK 0070  
                            setCallBack@idx 0026                   __end_ofi1_do_I2C_TX_EMPTY 0FD7  
                    _do_I2C_DO_NACK_RESTART 0C70                              _do_I2C_TX$1049 002E  
                 __end_of_SYSTEM_Initialize 0C06                   ??i1_rd1RegCompleteHandler 007A  
                                   ??_write 004D                         ?_i2c_driver_restart 0070  
                                __pbssBANK0 0068                                  __pbssBANK1 00A0  
                                __pbssBANK2 0160                                  __pbssBANK3 01C0  
                 ??i1_wr1RegCompleteHandler 007A                         ?_i2c_driver_startRX 0070  
            __size_of_rd2RegCompleteHandler 001B                                   ?_i2c_open 0070  
             __end_of_rd2RegCompleteHandler 0E7E              __size_of_wr2RegCompleteHandler 001B  
          __size_ofi1_rd2RegCompleteHandler 0015               __end_of_wr2RegCompleteHandler 0E2D  
                   __end_of_i2c_masterWrite 0BE5                    i1wr1RegCompleteHandler@p 0079  
                          _i2c_driver_start 0BA3                       _rd1RegCompleteHandler 0E48  
                   __end_ofi1_i2c_setBuffer 0D3B            __size_ofi1_wr2RegCompleteHandler 0015  
                     _do_I2C_IDLE$intlevel0 0C85                       _wr1RegCompleteHandler 0E2D  
              __size_of_i2c_busCollisionISR 0003             _wr1RegCompleteHandler$intlevel0 0E31  
           _rd1RegCompleteHandler$intlevel0 0E4C                     __end_of_buttonInterrupt 0D21  
                                __pmaintext 0321                               ??_do_I2C_IDLE 0022  
                      __size_of_setCallBack 0025                               ??_do_I2C_RCEN 0022  
                      ??_i2c_driver_sendACK 0022                      ??_i2c_driver_setI2cISR 0024  
                                   ?___lmul 0022                             __CFG_PPS1WAY$ON 0000  
                           ??_do_I2C_DO_ACK 0022                                  __pintentry 0004  
                      ??_i2c_driver_restart 0022                __size_of_i2c_driver_sendNACK 0004  
                      ??_i2c_driver_startRX 0022                              ___lmul@product 002A  
                                   ?_random 003C                         i2c_setBuffer@buffer 0022  
                         _initializeDisplay 038A                __size_of_i2c_driver_resetBus 0001  
            __end_ofi1_i2c_driver_getRXData 0B97              ?_i2c_driver_setBusCollisionISR 0022  
                     ??_i2c_masterOperation 0031                           __end_of_do_I2C_RX 0622  
                         __end_of_do_I2C_TX 049D                                  _createWall 00E1  
                        ?_initializeDisplay 0070                    ?i1_do_I2C_SEND_ADR_WRITE 0070  
                           __CFG_WDTCCS$SWC 0000                                     _OSCTUNE 0098  
        __end_of_IOCCF4_SetInterruptHandler 0C81                  _IOCCF4_SetInterruptHandler 0C78  
                                   _SSP1ADD 0212                                     _SSP1BUF 0211  
                                   _SSP1MSK 0213                         __size_of_i2c_poller 000B  
                   ??_do_I2C_SEND_ADR_WRITE 0023         _do_I2C_SEND_RESTART_WRITE$intlevel0 0C4C  
                       ??_initializeDisplay 0038                 ??_do_I2C_SEND_RESTART_WRITE 0022  
                    ?i1_do_I2C_DO_NACK_STOP 0070                           _mssp_IRQisEnabled 0CB0  
                                ??_i2c_open 0024                                     _i2c_ISR 07DA  
                 ??_rdBlkRegCompleteHandler 002C                           _mssp_waitForEvent 0CDA  
                        ?_mssp_IRQisEnabled 0070                               endGame@played 0065  
                        __size_of_writeWord 0088                       __end_of_mssp_clearIRQ 0BA0  
                     _returnReset$intlevel0 0C16                       _do_I2C_RCEN$intlevel0 0CAA  
                             i1_setCallBack 0F41                          ?_mssp_waitForEvent 0070  
          _do_I2C_DO_ADDRESS_NACK$intlevel0 07B4                 __end_ofi1_i2c_driver_TXData 0BEA  
                         __end_of_drawPixel 012C                           __end_of_drawWalls 0E9D  
       __size_of_i2c_setAddressNACKCallback 000D                      __size_ofi1_returnReset 0002  
                       ??_mssp_IRQisEnabled 0022                                     ___awdiv 049D  
                           __size_of___lmul 0030                                     ___awmod 0622  
                 __end_of_initializeDisplay 03E9                      __size_ofi1_mssp_setIRQ 0003  
                         ??_do_I2C_TX_EMPTY 002C                            ?_i2c_driver_open 0070  
                       ??_mssp_waitForEvent 0022                            ?_i2c_driver_stop 0070  
                                   _endGame 02B5                      i2c_writeNBytes@address 0037  
                           __size_of_random 001F                 __end_ofi1_i2c_driver_isNACK 0D08  
                   __end_ofi1_do_I2C_DO_ACK 0BD1                                     __ptext1 01B4  
                                   __ptext2 0E9D                                     __ptext3 04EF  
                                   __ptext4 0752                                     __ptext5 0622  
                                   __ptext6 038A                                     __ptext7 02B5  
                                   __ptext8 0239                                     __ptext9 012C  
                       __end_of_do_I2C_IDLE 0C8A                         __end_of_do_I2C_RCEN 0CB0  
                                   _hiscore 00D8                       _OSCILLATOR_Initialize 0C9C  
                   ??i1_i2c_driver_sendNACK 0070                 __end_of_do_I2C_SEND_RESTART 0C58  
                          ___awmod@dividend 0037                    ??_PIN_MANAGER_Initialize 0024  
                                 _IOCCFbits 0399                      i2c_masterOperation@ret 0033  
                   ??i1_i2c_driver_resetBus 0070                                     _reverse 06E7  
                                 _IOCCNbits 0398                                   _IOCCPbits 0397  
                                   _topHalf 0068                          i1_do_I2C_SEND_STOP 0BC9  
                _do_I2C_SEND_STOP$intlevel0 0C5C                  __size_ofi1_do_I2C_TX_EMPTY 0029  
                  _do_I2C_SEND_RESTART_READ 0C40                  __size_of_SYSTEM_Initialize 0006  
                                   clrloop0 0C1F                   __end_of_mssp_IRQisEnabled 0CBA  
                      __size_of_returnReset 0006                        end_of_initialization 0072  
                      __size_of_mssp_setIRQ 0003                   __end_of_mssp_waitForEvent 0CE5  
                 __size_of_i2c_restartWrite 0006                                     init_ram 0C24  
                       ?i1_do_I2C_SEND_STOP 0070                      ?_rd1RegCompleteHandler 002B  
                                   initloop 0C25                             _i2c_writeNBytes 0FD7  
                             ??_clearPixels 0022                            ?_i2c_masterWrite 0070  
                    ?_wr1RegCompleteHandler 002B                              ?i1_setCallBack 0070  
                                _wallHeight 0069                                  _shiftWalls 01B4  
                          ?i1_i2c_setBuffer 0070                            ?_buttonInterrupt 0070  
                              write@toWrite 005D                   _do_I2C_SEND_RESTART_WRITE 0C48  
                     i1_do_I2C_SEND_RESTART 0BC5            __end_ofi1_do_I2C_DO_ADDRESS_NACK 0F41  
           __end_ofi1_do_I2C_SEND_ADR_WRITE 0C38                             _mssp_disableIRQ 0BA0  
                                 i1_i2c_ISR 0EFC                        ??i1_do_I2C_SEND_STOP 0070  
                                _returnStop 0C0C             __end_of_rdBlkRegCompleteHandler 0EDC  
                  __end_of_do_I2C_SEND_STOP 0C60          __end_ofi1_do_I2C_SEND_RESTART_READ 0BC1  
                i1_do_I2C_SEND_RESTART_READ 0BBD                                   _SSPDATPPS 0E21  
                                 _SSPCLKPPS 0E20                           __end_of_writeWord 01B4  
                          __CFG_FOSC$INTOSC 0000                        __size_ofi1_do_I2C_RX 003F  
                      __size_ofi1_do_I2C_TX 004D                     _IOCCF4_InterruptHandler 00E7  
      __size_of_i2c_setDataCompleteCallback 000D                              _gravityCounter 006B  
                             i1_returnReset 0B83                                 returnStop@p 002B  
                             i1_mssp_setIRQ 0B97          __size_ofi1_rdBlkRegCompleteHandler 001A  
              i2c_setDataCompleteCallback@p 0029                                writeWord@idx 004B  
                              writeWord@len 003D                     i1_rd2RegCompleteHandler 0DB3  
                                drawPixel@x 002A                                  drawPixel@y 0022  
                   i1_wr2RegCompleteHandler 0D74               __size_of_do_I2C_SEND_ADR_READ 000C  
                          ??i1_do_I2C_RESET 0070                                ??_i2c_poller 0031  
                               _do_I2C_IDLE 0C81                                 _do_I2C_RCEN 0CA6  
                __end_ofi1_i2c_restartWrite 0004                         __end_of_clearPixels 0D74  
                __size_of_initializeDisplay 005F                              __end_of___lmul 0782  
      __end_of_i2c_driver_clearBusCollision 0B88       __size_of_i2c_driver_clearBusCollision 0003  
              _i2c_driver_clearBusCollision 0B85                                  ?i1_i2c_ISR 0070  
                          ?i1_do_I2C_DO_ACK 0070                      ?_OSCILLATOR_Initialize 0070  
             __size_ofi1_i2c_driver_sendACK 0004                              __end_of_random 0EBC  
              __size_of_do_I2C_DO_NACK_STOP 0008                            write@toWrite_342 004E  
                          write@toWrite_343 0056                    __end_of_i2c_driver_start 0BA6  
             __size_ofi1_i2c_driver_restart 0003                     ?_do_I2C_DO_NACK_RESTART 0070  
                       start_initialization 0032                                   _i2c_close 0DF7  
             __size_ofi1_i2c_driver_startRX 0003                         _i2c_busCollisionISR 0B88  
           __size_of_PIN_MANAGER_Initialize 0034                              ?i1_returnReset 0079  
                   __end_of_i2c_writeNBytes 1000         __end_ofi1_do_I2C_SEND_RESTART_WRITE 0BC5  
               i1_do_I2C_SEND_RESTART_WRITE 0BC1                              ?i1_mssp_setIRQ 0070  
                __size_of_mssp_IRQisEnabled 000A                                setCallBack@p 0024  
                        __end_of_i2c_poller 0CF0                         _i2c_driver_sendNACK 0BDD  
                           i2c_open@address 0025                     i2c_setBuffer@bufferSize 0024  
                __size_of_mssp_waitForEvent 000B                      rd1RegCompleteHandler@p 002B  
                       _i2c_driver_resetBus 0B80                             ??i1_setCallBack 0073  
                     __end_of_i2c_setBuffer 0DDD                           __size_of_i2c_open 004E  
                  __size_of_PIN_MANAGER_IOC 0006       __end_ofi1_i2c_setDataCompleteCallback 0CFC  
    __size_ofi1_i2c_setDataCompleteCallback 000C               i1_i2c_setDataCompleteCallback 0CF0  
                               ?_shiftWalls 0070                        ?_i2c_busCollisionISR 0070  
                   __end_of_mssp_disableIRQ 0BA3                            i1setCallBack@idx 0074  
                          i1_do_I2C_TX$1049 007C                       __end_ofi1_do_I2C_IDLE 0BEF  
                                  ??___lmul 002A                       __end_ofi1_do_I2C_RCEN 0C00  
                 i1i2c_setBuffer@bufferSize 0072                      ?i1_do_I2C_SEND_RESTART 0070  
                    wr1RegCompleteHandler@p 002B                        ?_i2c_driver_sendNACK 0070  
                             ?_do_I2C_RESET 0070                                 __pdataBANK1 00E2  
                               __pdataBANK2 0120                                 __pdataBANK3 01A0  
                 _do_I2C_TX_EMPTY$intlevel0 0786                                    ??_random 003D  
                  __size_ofi1_mssp_clearIRQ 0003                                 ?_returnStop 002B  
                      ?_i2c_driver_resetBus 0070                           _i2c_driver_TXData 0C18  
            __end_of_do_I2C_DO_NACK_RESTART 0C78               ?_i2c_driver_clearBusCollision 0070  
                         _i2c_driver_i2cISR 00DC                    i1_do_I2C_DO_ADDRESS_NACK 0F1E  
                        ?_i2c_driver_TXData 0070                                  ?_i2c_close 0070  
                                 ___latbits 0002                               __pcstackBANK0 0020  
         __size_ofi1_do_I2C_DO_NACK_RESTART 0004                    i1rd2RegCompleteHandler@p 0079  
                                 _do_I2C_RX 05DB                   ?i1_do_I2C_DO_NACK_RESTART 0070  
                                 _do_I2C_TX 0445                           _i2c_driver_isNACK 0D48  
                   ??i1_do_I2C_DO_NACK_STOP 0070                 ?_IOCCF4_SetInterruptHandler 0022  
                 ??i1_rd2RegCompleteHandler 007A               __size_of_i2c_driver_getRXData 0003  
                        ?_i2c_driver_isNACK 0070                         ??_i2c_driver_TXData 0022  
            __size_of_do_I2C_SEND_ADR_WRITE 000B                   ??i1_wr2RegCompleteHandler 007A  
             __end_of_do_I2C_SEND_ADR_WRITE 0CDA             ??_i2c_driver_setBusCollisionISR 0024  
                            i1setCallBack@p 0072                            _i2c_restartWrite 0C06  
                _i2c_restartWrite$intlevel0 0C0A                                    ?_i2c_ISR 0070  
           _do_I2C_SEND_ADR_WRITE$intlevel0 0CD3            __size_ofi1_do_I2C_SEND_ADR_WRITE 0007  
                           _do_I2C_TX_EMPTY 0782                               ??_setCallBack 0025  
                                 __pnvBANK1 00E7                    i1wr2RegCompleteHandler@p 0079  
                     _rd2RegCompleteHandler 0E63                                 _clearPixels 0D62  
                       ??_i2c_driver_isNACK 0022                       ??_i2c_busCollisionISR 0070  
                    _PIN_MANAGER_Initialize 071E                       _wr2RegCompleteHandler 0E12  
               __size_of_i2c_driver_sendACK 0004                              ??_do_I2C_RESET 0022  
                                  ?___awdiv 0022                                   __ptext100 0B83  
                                 __ptext101 0B81                                   __ptext110 0B8E  
                                 __ptext102 0DDD                                   __ptext111 0B8B  
                                 __ptext103 0DB3                                   __ptext112 0BB5  
                                 __ptext104 0D9E                                   __ptext113 0B88  
                                 __ptext105 0D89                                   __ptext114 0B85  
                                 __ptext106 0D74                                   __ptext115 0BF4  
                                 __ptext107 0CF0                                   __ptext116 0D21  
                                 __ptext108 0F41                       ??_i2c_driver_sendNACK 0022  
                                 __ptext117 0B7E                                   __ptext109 0D2E  
                                 __ptext118 0D14                                    ?___awmod 0035  
               __end_of_i2c_masterOperation 0F89                    ??_do_I2C_DO_ADDRESS_NACK 002C  
             __size_of_i2c_driver_setI2cISR 0009                 __size_of_i2c_driver_restart 0003  
                 __end_of_i2c_driver_TXData 0C1E                                    ?_endGame 0070  
                     __end_of_do_I2C_DO_ACK 0C68                       ??_i2c_driver_resetBus 0022  
               __size_of_i2c_driver_startRX 0003                                 ??i1_i2c_ISR 0020  
              ??_INTERRUPT_InterruptManager 0021                                   _drawPixel 0076  
                                 _drawWalls 0E7E                                   _elevation 006C  
                ??_do_I2C_SEND_RESTART_READ 0022                    ??i1_do_I2C_SEND_ADR_READ 0071  
                           ??i1_returnReset 007A                   __end_of_i2c_driver_isNACK 0D55  
                  ?i1_rd1RegCompleteHandler 0079          __size_of_do_I2C_SEND_RESTART_WRITE 0008  
                           ??i1_mssp_setIRQ 0070              __size_ofi1_i2c_driver_sendNACK 0004  
             __end_ofi1_i2c_driver_sendNACK 0BBD                         __size_of_shiftWalls 0085  
                                  ?_reverse 0070                    ?i1_wr1RegCompleteHandler 0079  
                                ?_do_I2C_RX 0070                                  ?_do_I2C_TX 0070  
                             ?_writeDisplay 0070                            ?_i2c_writeNBytes 0034  
            __size_ofi1_i2c_driver_resetBus 0001               __end_ofi1_i2c_driver_resetBus 0B80  
                   ??_rd1RegCompleteHandler 002C                              __size_of_write 007C  
                         _i2c_ISR$intlevel0 07DE                                   _letter_hi 0140  
                              _letter_space 0160            ??_IOCCF4_DefaultInterruptHandler 0070  
           ?_IOCCF4_DefaultInterruptHandler 0070                     ??_wr1RegCompleteHandler 002C  
                     i2c_driver_setI2cISR@f 0022                         __size_of_returnStop 0006  
                                 clear_ram0 0C1E                                    _PIE1bits 0090  
                                  _PIE2bits 0091         __size_of_INTERRUPT_InterruptManager 002C  
                                  _PIR1bits 0010                                    _PIR2bits 0011  
                          ?_mssp_disableIRQ 0070                        __CFG_WDTCPS$WDTCPS1F 0000  
                                  _SSP1CON1 0215                                    _SSP1CON2 0216  
              ?_i2c_setDataCompleteCallback 0027              ?i1_i2c_setDataCompleteCallback 0075  
                                  _SSP1STAT 0214                         __end_of_setCallBack 0FAE  
                         ??_PIN_MANAGER_IOC 0071                                  ?_drawPixel 0022  
                                ?_drawWalls 0070                __size_ofi1_i2c_driver_TXData 0005  
                         i1_i2c_driver_stop 0B8E                i2c_setAddressNACKCallback@cb 0027  
                         ?_do_I2C_SEND_STOP 0070                 ?i1_do_I2C_SEND_RESTART_READ 0070  
                        ?i1_i2c_driver_stop 0070                                 ??_i2c_close 0022  
                             ??_returnReset 002C                          ??_do_I2C_SEND_STOP 0022  
                    __size_of_mssp_clearIRQ 0003                              ??_writeDisplay 0038  
                  __size_of_i2c_driver_open 000A                           ??i1_mssp_clearIRQ 0070  
              ??_i2c_setAddressNACKCallback 002A                    __size_of_i2c_driver_stop 0003  
         __end_of_do_I2C_SEND_RESTART_WRITE 0C50                __size_ofi1_i2c_driver_isNACK 000C  
                             ??_mssp_setIRQ 0022              ??_i2c_driver_clearBusCollision 0070  
                   __end_of_do_I2C_TX_EMPTY 07B0                                   _writeWord 012C  
                         ___lmul@multiplier 0022                    ?_rdBlkRegCompleteHandler 002B  
                       ??i1_i2c_driver_stop 0070                __size_of_do_I2C_SEND_RESTART 0008  
                   _do_I2C_DO_ACK$intlevel0 0C64                                    _i2c_open 0540  
                             ?i1_returnStop 0079                      ?_rd2RegCompleteHandler 002B  
                       _do_I2C_DO_NACK_STOP 0C68                            __size_of_i2c_ISR 0026  
                    ?_wr2RegCompleteHandler 002B             _wr2RegCompleteHandler$intlevel0 0E16  
           _rd2RegCompleteHandler$intlevel0 0E67       __end_of_i2c_driver_setBusCollisionISR 0C93  
    __size_of_i2c_driver_setBusCollisionISR 0009               _i2c_driver_setBusCollisionISR 0C8A  
                       i2c_writeNBytes@data 0034                                ?_do_I2C_IDLE 0070  
                  ??i1_i2c_driver_getRXData 0070                                ?_do_I2C_RCEN 0070  
                   ??_OSCILLATOR_Initialize 0022                            __size_of___awdiv 0052  
                  __size_of_i2c_masterWrite 0004                            __size_of___awmod 0046  
                __size_of_i2c_driver_TXData 0006             __size_of_do_I2C_DO_ADDRESS_NACK 002A  
                 __end_ofi1_i2c_driver_stop 0B91                       i1i2c_setBuffer@buffer 0070  
             ??_i2c_setDataCompleteCallback 002A             __end_ofi1_rd1RegCompleteHandler 0DB3  
                  __size_ofi1_i2c_setBuffer 000D                               ??i1_do_I2C_RX 007A  
                             ??i1_do_I2C_TX 007A          _do_I2C_SEND_RESTART_READ$intlevel0 0C44  
               __size_ofi1_do_I2C_SEND_STOP 0004                            __size_of_endGame 006C  
                  __size_of_buttonInterrupt 000D             __end_ofi1_wr1RegCompleteHandler 0D9E  
                      ?_do_I2C_DO_NACK_STOP 0070                __end_of_do_I2C_SEND_ADR_READ 0D14  
           __size_ofi1_do_I2C_SEND_ADR_READ 0008                  __size_of_i2c_driver_isNACK 000D  
                         ?_i2c_driver_start 0070                          i1_i2c_restartWrite 0002  
                               ??_do_I2C_RX 002C                                 ??_do_I2C_TX 002C  
                        ??_i2c_driver_start 0022                                    __ptext10 03E9  
                                  __ptext11 0FD7                                    __ptext20 0CE5  
                                  __ptext12 0D55                                    __ptext21 0CDA  
                                  __ptext13 0540                                    __ptext30 0CCF  
                                  __ptext22 07DA                                    __ptext14 0C93  
                                  __ptext31 0D08                                    __ptext23 05DB  
                                  __ptext15 0C8A                                    __ptext40 0D48  
                                  __ptext32 0C58                                    __ptext24 0445  
                                  __ptext16 0CBA                                    __ptext41 0C18  
                                  __ptext33 0C50                                    __ptext25 07B0  
                                  __ptext17 0BE1                                    __ptext50 0E48  
                                  __ptext42 0BAF                                    __ptext34 0C48  
                                  __ptext26 0C70                                    __ptext18 0F65  
                                  __ptext51 0E2D                                    __ptext43 0BDD  
                                  __ptext35 0C40                                    __ptext27 0C68  
                                  __ptext19 0CB0                                    __ptext60 0BA3  
                                  __ptext52 0C06                                    __ptext44 0B80  
                                  __ptext36 0C81                                    __ptext28 0C60  
                                  __ptext61 0DF7                                    __ptext53 0E12  
                                  __ptext45 0BAC                                    __ptext37 0CC4  
                                  __ptext29 0CA6                                    __ptext70 071E  
                                  __ptext62 0BA0                                    __ptext54 0D3B  
                                  __ptext46 0C12                                    __ptext38 0782  
                                  __ptext71 0C78                                    __ptext63 0B9D  
                                  __ptext55 0F89                                    __ptext47 0C0C  
                                  __ptext39 0BB2                                    __ptext80 0BD1  
                                  __ptext72 0C9C                                    __ptext64 049D  
                                  __ptext56 0DC8                                    __ptext48 0EBC  
                                  __ptext81 0BCD                                    __ptext65 0E7E  
                                  __ptext57 0BA9                                    __ptext49 0E63  
                                  __ptext90 0C2A                                    __ptext82 0BFA  
                                  __ptext74 0EFC                                    __ptext66 06E7  
                                  __ptext58 0BA6                                    __ptext91 0FAE  
                                  __ptext83 0C31                                    __ptext75 0B9A  
                                  __ptext67 0D62                                    __ptext59 0BD9  
                                  __ptext92 0B97                                    __ptext84 0C38  
                                  __ptext76 06A8                                    __ptext68 0076  
                                  __ptext93 0CFC                                    __ptext85 0BC9  
                                  __ptext77 058E                                    __ptext69 0C00  
                                  __ptext94 0BE5                                    __ptext86 0BC5  
                                  __ptext78 0F1E                                    __ptext95 0B94  
                                  __ptext87 0BC1                                    __ptext79 0BD5  
                                  __ptext96 0BB9                                    __ptext88 0BBD  
                                  __ptext97 0B7F                                    __ptext89 0BEA  
                                  __ptext98 0B91                                    __ptext99 0002  
                              _SSP1CON1bits 0215                            __size_of_reverse 0037  
                              _SSP1CON2bits 0216                                  ?_writeWord 003D  
                              _shiftCounter 00D6                        __end_of_do_I2C_RESET 0CCF  
                                _IOCCF4_ISR 0D21                              ??i1_returnStop 007A  
                   i1_do_I2C_SEND_ADR_WRITE 0C31                         ?i1_i2c_restartWrite 0079  
              __end_ofi1_i2c_driver_sendACK 0BB9                         __end_of_returnReset 0C18  
                             __size_of_main 0069                               __size_of_rand 0051  
                       __end_of_mssp_setIRQ 0BB5                __end_ofi1_i2c_driver_restart 0B8E  
                                  _letter_c 0130                                    _letter_e 0150  
                                  _letter_n 0158                                    _letter_o 0128  
                                  _letter_r 0120                                    _letter_s 0138  
                                  _letter_w 0148                        i1i2c_driver_TXData@d 0070  
              __end_ofi1_i2c_driver_startRX 0B94                        __CFG_WDTCWS$WDTCWSSW 0000  
                               _setCallBack 0F89                                ??_shiftWalls 0040  
                   ??i1_do_I2C_SEND_RESTART 0070                               _mssp_clearIRQ 0B9D  
                   i2c_masterOperation@read 0032        __size_ofi1_do_I2C_SEND_RESTART_WRITE 0004  
                                  int$flags 007E                  ??i1_do_I2C_DO_ADDRESS_NACK 007A  
          __end_ofi1_do_I2C_DO_NACK_RESTART 0BD9          __end_of_INTERRUPT_InterruptManager 0030  
                _INTERRUPT_InterruptManager 0004                                  writeWord@k 004C  
                            write@selection 0062                                _SSP1STATbits 0214  
                      ??i1_i2c_restartWrite 007A            __end_of_do_I2C_SEND_RESTART_READ 0C48  
                               ??_drawPixel 0024                                 ??_drawWalls 0026  
                              ??_returnStop 002C                    __end_of_i2c_restartWrite 0C0C  
                     ??_do_I2C_DO_NACK_STOP 0022                    mssp_waitForEvent@timeout 0022  
            i2c_driver_setBusCollisionISR@f 0022                                  _INTCONbits 000B  
                        i2c_writeNBytes@len 0035                         __end_ofi1_do_I2C_RX 06E7  
                       __end_ofi1_do_I2C_TX 05DB                         writeWord@shiftValue 0049  
                        __end_of_shiftWalls 0239                    __size_ofi1_do_I2C_DO_ACK 0004  
                          ?_do_I2C_TX_EMPTY 0070                      _do_I2C_DO_ADDRESS_NACK 07B0  
            __size_ofi1_do_I2C_DO_NACK_STOP 0004                                    intlevel1 0000  
             __end_ofi1_do_I2C_DO_NACK_STOP 0BD5                      _do_I2C_RESET$intlevel0 0CC8  
                    rd2RegCompleteHandler@p 002B                           ??_i2c_driver_open 0022  
                         ??_i2c_driver_stop 0022                     ?_PIN_MANAGER_Initialize 0070  
                         i2c_restartWrite@p 002B                      i1_do_I2C_SEND_ADR_READ 0C38  
                         __CFG_CLKOUTEN$OFF 0000                  ?i1_rdBlkRegCompleteHandler 0079  
                              ?_clearPixels 0070                          __end_of_returnStop 0C12  
                            ?_mssp_clearIRQ 0070                       __end_ofi1_setCallBack 0F65  
       __size_ofi1_do_I2C_SEND_RESTART_READ 0004                                    reverse@b 0025  
                      __end_of_writeDisplay 0445                __end_of_i2c_driver_getRXData 0BB2  
           __size_ofi1_i2c_driver_getRXData 0003                      wr2RegCompleteHandler@p 002B  
                __size_ofi1_i2c_driver_stop 0003                                 _pixelbuffer 00BE  
                   __size_ofi1_do_I2C_RESET 0007                           ??_i2c_masterWrite 0034  
        __end_of_i2c_setAddressNACKCallback 0D62                  _i2c_setAddressNACKCallback 0D55  
                    __size_of_i2c_setBuffer 0015                           ??i1_i2c_setBuffer 0074  
                               _returnReset 0C12            _do_I2C_DO_NACK_RESTART$intlevel0 0C74  
                         ??_buttonInterrupt 0070                                 _mssp_setIRQ 0BB2  
                 ??i1_do_I2C_SEND_ADR_WRITE 0071                                 ??_writeWord 003E  
              __end_of_i2c_driver_setI2cISR 0C9C                      __size_ofi1_do_I2C_IDLE 0005  
                    __size_ofi1_do_I2C_RCEN 0006                                 ?_IOCCF4_ISR 0070  
            __end_of_PIN_MANAGER_Initialize 0752                 __end_of_i2c_busCollisionISR 0B8B  
            __size_of_rd1RegCompleteHandler 001B               __end_of_rd1RegCompleteHandler 0E63  
                       i1_i2c_driver_TXData 0BE5                             _PIN_MANAGER_IOC 0BF4  
            __size_of_wr1RegCompleteHandler 001B            __size_ofi1_rd1RegCompleteHandler 0015  
             __end_of_wr1RegCompleteHandler 0E48                       _do_I2C_SEND_ADR_WRITE 0CCF  
               __end_of_i2c_driver_sendNACK 0BE1                        _do_I2C_SEND_ADR_READ 0D08  
         __end_ofi1_rdBlkRegCompleteHandler 0DF7            __size_ofi1_wr1RegCompleteHandler 0015  
                __end_of_i2c_driver_sendACK 0BDD                 __end_of_i2c_driver_resetBus 0B81  
