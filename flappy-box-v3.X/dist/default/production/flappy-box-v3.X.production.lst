

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Wed Apr 11 11:51:33 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F1619
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	inittext,global,class=CODE,delta=2
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    17                           	psect	text1,local,class=CODE,merge=1,delta=2
    18                           	psect	text2,local,class=CODE,merge=1,delta=2
    19                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    20                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    21                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    22                           	psect	text6,local,class=CODE,merge=1,delta=2
    23                           	psect	text7,local,class=CODE,merge=1,delta=2
    24                           	psect	text8,local,class=CODE,merge=1,delta=2
    25                           	psect	text9,local,class=CODE,merge=1,delta=2
    26                           	psect	text10,local,class=CODE,merge=1,delta=2
    27                           	psect	text11,local,class=CODE,merge=1,delta=2
    28                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text13,local,class=CODE,merge=1,inline,delta=2
    30                           	psect	text14,local,class=CODE,merge=1,delta=2
    31                           	psect	text15,local,class=CODE,merge=1,delta=2
    32                           	psect	text16,local,class=CODE,merge=1,delta=2
    33                           	psect	text17,local,class=CODE,merge=1,inline,delta=2
    34                           	psect	text18,local,class=CODE,merge=1,inline,delta=2
    35                           	psect	text19,local,class=CODE,merge=1,inline,delta=2
    36                           	psect	text20,local,class=CODE,merge=1,delta=2
    37                           	psect	text21,local,class=CODE,merge=1,delta=2
    38                           	psect	text22,local,class=CODE,merge=1,delta=2
    39                           	psect	text23,local,class=CODE,merge=1,delta=2
    40                           	psect	text24,local,class=CODE,merge=1,delta=2
    41                           	psect	text25,local,class=CODE,merge=1,delta=2
    42                           	psect	text26,local,class=CODE,merge=1,delta=2
    43                           	psect	text27,local,class=CODE,merge=1,delta=2
    44                           	psect	text28,local,class=CODE,merge=1,delta=2
    45                           	psect	text29,local,class=CODE,merge=1,delta=2
    46                           	psect	text30,local,class=CODE,merge=1,delta=2
    47                           	psect	text31,local,class=CODE,merge=1,delta=2
    48                           	psect	text32,local,class=CODE,merge=1,delta=2
    49                           	psect	text33,local,class=CODE,merge=1,delta=2
    50                           	psect	text34,local,class=CODE,merge=1,delta=2
    51                           	psect	text35,local,class=CODE,merge=1,delta=2
    52                           	psect	text36,local,class=CODE,merge=1,delta=2
    53                           	psect	text37,local,class=CODE,merge=1,inline,delta=2
    54                           	psect	text38,local,class=CODE,merge=1,inline,delta=2
    55                           	psect	text39,local,class=CODE,merge=1,inline,delta=2
    56                           	psect	text40,local,class=CODE,merge=1,inline,delta=2
    57                           	psect	text41,local,class=CODE,merge=1,inline,delta=2
    58                           	psect	text42,local,class=CODE,merge=1,inline,delta=2
    59                           	psect	text43,local,class=CODE,merge=1,inline,delta=2
    60                           	psect	text44,local,class=CODE,merge=1,delta=2
    61                           	psect	text45,local,class=CODE,merge=1,delta=2
    62                           	psect	text46,local,class=CODE,merge=1,delta=2
    63                           	psect	text47,local,class=CODE,merge=1,delta=2
    64                           	psect	text48,local,class=CODE,merge=1,delta=2
    65                           	psect	text49,local,class=CODE,merge=1,delta=2
    66                           	psect	text50,local,class=CODE,merge=1,delta=2
    67                           	psect	text51,local,class=CODE,merge=1,delta=2
    68                           	psect	text52,local,class=CODE,merge=1,delta=2
    69                           	psect	text53,local,class=CODE,merge=1,delta=2
    70                           	psect	text54,local,class=CODE,merge=1,delta=2
    71                           	psect	text55,local,class=CODE,merge=1,inline,delta=2
    72                           	psect	text56,local,class=CODE,merge=1,inline,delta=2
    73                           	psect	text57,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text58,local,class=CODE,merge=1,inline,delta=2
    75                           	psect	text59,local,class=CODE,merge=1,delta=2
    76                           	psect	text60,local,class=CODE,merge=1,inline,delta=2
    77                           	psect	text61,local,class=CODE,merge=1,inline,delta=2
    78                           	psect	text62,local,class=CODE,merge=1,delta=2,group=1
    79                           	psect	text63,local,class=CODE,merge=1,delta=2
    80                           	psect	text64,local,class=CODE,merge=1,delta=2
    81                           	psect	text65,local,class=CODE,merge=1,delta=2
    82                           	psect	text66,local,class=CODE,merge=1,delta=2
    83                           	psect	text67,local,class=CODE,merge=1,delta=2
    84                           	psect	text68,local,class=CODE,merge=1,delta=2
    85                           	psect	text69,local,class=CODE,merge=1,delta=2
    86                           	psect	text70,local,class=CODE,merge=1,delta=2
    87                           	psect	intentry,global,class=CODE,delta=2
    88                           	psect	text72,local,class=CODE,merge=1,delta=2
    89                           	psect	text73,local,class=CODE,merge=1,inline,delta=2
    90                           	psect	text74,local,class=CODE,merge=1,delta=2
    91                           	psect	text75,local,class=CODE,merge=1,delta=2
    92                           	psect	text76,local,class=CODE,merge=1,delta=2
    93                           	psect	text77,local,class=CODE,merge=1,delta=2
    94                           	psect	text78,local,class=CODE,merge=1,delta=2
    95                           	psect	text79,local,class=CODE,merge=1,delta=2
    96                           	psect	text80,local,class=CODE,merge=1,delta=2
    97                           	psect	text81,local,class=CODE,merge=1,delta=2
    98                           	psect	text82,local,class=CODE,merge=1,delta=2
    99                           	psect	text83,local,class=CODE,merge=1,delta=2
   100                           	psect	text84,local,class=CODE,merge=1,delta=2
   101                           	psect	text85,local,class=CODE,merge=1,delta=2
   102                           	psect	text86,local,class=CODE,merge=1,delta=2
   103                           	psect	text87,local,class=CODE,merge=1,delta=2
   104                           	psect	text88,local,class=CODE,merge=1,delta=2
   105                           	psect	text89,local,class=CODE,merge=1,delta=2
   106                           	psect	text90,local,class=CODE,merge=1,inline,delta=2
   107                           	psect	text91,local,class=CODE,merge=1,inline,delta=2
   108                           	psect	text92,local,class=CODE,merge=1,inline,delta=2
   109                           	psect	text93,local,class=CODE,merge=1,inline,delta=2
   110                           	psect	text94,local,class=CODE,merge=1,inline,delta=2
   111                           	psect	text95,local,class=CODE,merge=1,inline,delta=2
   112                           	psect	text96,local,class=CODE,merge=1,inline,delta=2
   113                           	psect	text97,local,class=CODE,merge=1,delta=2
   114                           	psect	text98,local,class=CODE,merge=1,delta=2
   115                           	psect	text99,local,class=CODE,merge=1,delta=2
   116                           	psect	text100,local,class=CODE,merge=1,delta=2
   117                           	psect	text101,local,class=CODE,merge=1,delta=2
   118                           	psect	text102,local,class=CODE,merge=1,delta=2
   119                           	psect	text103,local,class=CODE,merge=1,delta=2
   120                           	psect	text104,local,class=CODE,merge=1,delta=2
   121                           	psect	text105,local,class=CODE,merge=1,delta=2
   122                           	psect	text106,local,class=CODE,merge=1,delta=2
   123                           	psect	text107,local,class=CODE,merge=1,delta=2
   124                           	psect	text108,local,class=CODE,merge=1,inline,delta=2
   125                           	psect	text109,local,class=CODE,merge=1,inline,delta=2
   126                           	psect	text110,local,class=CODE,merge=1,inline,delta=2
   127                           	psect	text111,local,class=CODE,merge=1,delta=2
   128                           	psect	text112,local,class=CODE,merge=1,inline,delta=2
   129                           	psect	text113,local,class=CODE,merge=1,delta=2
   130                           	psect	text114,local,class=CODE,merge=1,delta=2
   131                           	psect	text115,local,class=CODE,merge=1,delta=2
   132                           	psect	text116,local,class=CODE,merge=1,delta=2
   133                           	dabs	1,0x7E,2
   134  0000                     
   135                           ; Version 1.45
   136                           ; Generated 16/11/2017 GMT
   137                           ; 
   138                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   139                           ; All rights reserved.
   140                           ; 
   141                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   142                           ; 
   143                           ; Redistribution and use in source and binary forms, with or without modification, are
   144                           ; permitted provided that the following conditions are met:
   145                           ; 
   146                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   147                           ;        conditions and the following disclaimer.
   148                           ; 
   149                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   150                           ;        of conditions and the following disclaimer in the documentation and/or other
   151                           ;        materials provided with the distribution.
   152                           ; 
   153                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   154                           ;        software without specific prior written permission.
   155                           ; 
   156                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   157                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   158                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   159                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   160                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   161                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   162                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   163                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   164                           ; 
   165                           ; 
   166                           ; Code-generator required, PIC16F1619 Definitions
   167                           ; 
   168                           ; SFR Addresses
   169  0000                     	;# 
   170  0001                     	;# 
   171  0002                     	;# 
   172  0003                     	;# 
   173  0004                     	;# 
   174  0005                     	;# 
   175  0006                     	;# 
   176  0007                     	;# 
   177  0008                     	;# 
   178  0009                     	;# 
   179  000A                     	;# 
   180  000B                     	;# 
   181  000C                     	;# 
   182  000D                     	;# 
   183  000E                     	;# 
   184  0010                     	;# 
   185  0011                     	;# 
   186  0012                     	;# 
   187  0013                     	;# 
   188  0014                     	;# 
   189  0015                     	;# 
   190  0016                     	;# 
   191  0016                     	;# 
   192  0017                     	;# 
   193  0018                     	;# 
   194  0019                     	;# 
   195  001A                     	;# 
   196  001A                     	;# 
   197  001B                     	;# 
   198  001B                     	;# 
   199  001C                     	;# 
   200  001D                     	;# 
   201  001E                     	;# 
   202  001F                     	;# 
   203  008C                     	;# 
   204  008D                     	;# 
   205  008E                     	;# 
   206  0090                     	;# 
   207  0091                     	;# 
   208  0092                     	;# 
   209  0093                     	;# 
   210  0094                     	;# 
   211  0095                     	;# 
   212  0096                     	;# 
   213  0098                     	;# 
   214  0099                     	;# 
   215  009A                     	;# 
   216  009B                     	;# 
   217  009B                     	;# 
   218  009C                     	;# 
   219  009D                     	;# 
   220  009E                     	;# 
   221  009F                     	;# 
   222  010C                     	;# 
   223  010D                     	;# 
   224  010E                     	;# 
   225  0111                     	;# 
   226  0112                     	;# 
   227  0113                     	;# 
   228  0114                     	;# 
   229  0115                     	;# 
   230  0116                     	;# 
   231  0117                     	;# 
   232  0118                     	;# 
   233  0119                     	;# 
   234  011C                     	;# 
   235  018C                     	;# 
   236  018D                     	;# 
   237  018E                     	;# 
   238  0191                     	;# 
   239  0191                     	;# 
   240  0192                     	;# 
   241  0193                     	;# 
   242  0193                     	;# 
   243  0194                     	;# 
   244  0195                     	;# 
   245  0196                     	;# 
   246  0197                     	;# 
   247  0199                     	;# 
   248  0199                     	;# 
   249  0199                     	;# 
   250  019A                     	;# 
   251  019A                     	;# 
   252  019A                     	;# 
   253  019B                     	;# 
   254  019B                     	;# 
   255  019B                     	;# 
   256  019B                     	;# 
   257  019B                     	;# 
   258  019C                     	;# 
   259  019C                     	;# 
   260  019C                     	;# 
   261  019D                     	;# 
   262  019D                     	;# 
   263  019D                     	;# 
   264  019E                     	;# 
   265  019E                     	;# 
   266  019E                     	;# 
   267  019F                     	;# 
   268  019F                     	;# 
   269  019F                     	;# 
   270  019F                     	;# 
   271  019F                     	;# 
   272  020C                     	;# 
   273  020D                     	;# 
   274  020E                     	;# 
   275  0211                     	;# 
   276  0211                     	;# 
   277  0212                     	;# 
   278  0212                     	;# 
   279  0213                     	;# 
   280  0213                     	;# 
   281  0214                     	;# 
   282  0214                     	;# 
   283  0215                     	;# 
   284  0215                     	;# 
   285  0215                     	;# 
   286  0215                     	;# 
   287  0216                     	;# 
   288  0216                     	;# 
   289  0217                     	;# 
   290  0217                     	;# 
   291  028C                     	;# 
   292  028D                     	;# 
   293  028E                     	;# 
   294  0291                     	;# 
   295  0291                     	;# 
   296  0292                     	;# 
   297  0293                     	;# 
   298  0294                     	;# 
   299  0298                     	;# 
   300  0298                     	;# 
   301  0299                     	;# 
   302  029A                     	;# 
   303  029B                     	;# 
   304  029E                     	;# 
   305  030C                     	;# 
   306  030D                     	;# 
   307  030E                     	;# 
   308  038C                     	;# 
   309  038D                     	;# 
   310  038E                     	;# 
   311  0391                     	;# 
   312  0392                     	;# 
   313  0393                     	;# 
   314  0394                     	;# 
   315  0395                     	;# 
   316  0396                     	;# 
   317  0397                     	;# 
   318  0398                     	;# 
   319  0399                     	;# 
   320  040E                     	;# 
   321  0413                     	;# 
   322  0413                     	;# 
   323  0414                     	;# 
   324  0414                     	;# 
   325  0415                     	;# 
   326  0416                     	;# 
   327  0417                     	;# 
   328  0418                     	;# 
   329  041A                     	;# 
   330  041A                     	;# 
   331  041B                     	;# 
   332  041B                     	;# 
   333  041C                     	;# 
   334  041D                     	;# 
   335  041E                     	;# 
   336  041F                     	;# 
   337  0493                     	;# 
   338  0494                     	;# 
   339  0495                     	;# 
   340  0496                     	;# 
   341  049A                     	;# 
   342  049B                     	;# 
   343  049C                     	;# 
   344  049D                     	;# 
   345  058C                     	;# 
   346  058C                     	;# 
   347  058D                     	;# 
   348  058E                     	;# 
   349  058E                     	;# 
   350  058F                     	;# 
   351  0590                     	;# 
   352  0590                     	;# 
   353  0591                     	;# 
   354  0592                     	;# 
   355  0592                     	;# 
   356  0593                     	;# 
   357  0594                     	;# 
   358  0594                     	;# 
   359  0595                     	;# 
   360  0596                     	;# 
   361  0596                     	;# 
   362  0597                     	;# 
   363  0598                     	;# 
   364  0599                     	;# 
   365  059A                     	;# 
   366  059B                     	;# 
   367  059B                     	;# 
   368  059C                     	;# 
   369  059D                     	;# 
   370  060C                     	;# 
   371  060C                     	;# 
   372  060D                     	;# 
   373  060E                     	;# 
   374  060F                     	;# 
   375  060F                     	;# 
   376  0610                     	;# 
   377  0611                     	;# 
   378  0612                     	;# 
   379  0613                     	;# 
   380  0614                     	;# 
   381  0617                     	;# 
   382  0618                     	;# 
   383  0619                     	;# 
   384  061A                     	;# 
   385  061B                     	;# 
   386  061C                     	;# 
   387  0691                     	;# 
   388  0692                     	;# 
   389  0693                     	;# 
   390  0694                     	;# 
   391  0695                     	;# 
   392  0696                     	;# 
   393  0697                     	;# 
   394  0699                     	;# 
   395  069A                     	;# 
   396  0711                     	;# 
   397  0712                     	;# 
   398  0713                     	;# 
   399  0714                     	;# 
   400  0715                     	;# 
   401  0718                     	;# 
   402  0718                     	;# 
   403  0719                     	;# 
   404  071A                     	;# 
   405  071A                     	;# 
   406  071B                     	;# 
   407  071C                     	;# 
   408  071D                     	;# 
   409  0791                     	;# 
   410  0791                     	;# 
   411  0792                     	;# 
   412  0793                     	;# 
   413  0793                     	;# 
   414  0794                     	;# 
   415  0795                     	;# 
   416  0795                     	;# 
   417  0796                     	;# 
   418  0797                     	;# 
   419  0797                     	;# 
   420  0798                     	;# 
   421  0799                     	;# 
   422  079A                     	;# 
   423  080C                     	;# 
   424  080C                     	;# 
   425  080D                     	;# 
   426  080E                     	;# 
   427  080E                     	;# 
   428  080F                     	;# 
   429  0810                     	;# 
   430  0810                     	;# 
   431  0811                     	;# 
   432  0812                     	;# 
   433  0812                     	;# 
   434  0813                     	;# 
   435  0814                     	;# 
   436  0815                     	;# 
   437  0816                     	;# 
   438  0817                     	;# 
   439  0818                     	;# 
   440  0819                     	;# 
   441  081A                     	;# 
   442  081A                     	;# 
   443  081B                     	;# 
   444  081C                     	;# 
   445  081C                     	;# 
   446  081D                     	;# 
   447  088C                     	;# 
   448  088D                     	;# 
   449  088E                     	;# 
   450  088F                     	;# 
   451  088F                     	;# 
   452  0890                     	;# 
   453  0891                     	;# 
   454  0892                     	;# 
   455  0893                     	;# 
   456  0893                     	;# 
   457  0894                     	;# 
   458  0895                     	;# 
   459  0896                     	;# 
   460  0897                     	;# 
   461  0897                     	;# 
   462  0898                     	;# 
   463  0899                     	;# 
   464  0D8C                     	;# 
   465  0D8C                     	;# 
   466  0D8D                     	;# 
   467  0D8E                     	;# 
   468  0D8F                     	;# 
   469  0D8F                     	;# 
   470  0D90                     	;# 
   471  0D91                     	;# 
   472  0D92                     	;# 
   473  0D92                     	;# 
   474  0D93                     	;# 
   475  0D94                     	;# 
   476  0D95                     	;# 
   477  0D95                     	;# 
   478  0D96                     	;# 
   479  0D97                     	;# 
   480  0D98                     	;# 
   481  0D99                     	;# 
   482  0D9A                     	;# 
   483  0D9B                     	;# 
   484  0D9C                     	;# 
   485  0D9D                     	;# 
   486  0D9E                     	;# 
   487  0D9E                     	;# 
   488  0D9F                     	;# 
   489  0DA0                     	;# 
   490  0DA1                     	;# 
   491  0DA1                     	;# 
   492  0DA2                     	;# 
   493  0DA3                     	;# 
   494  0DA4                     	;# 
   495  0DA4                     	;# 
   496  0DA5                     	;# 
   497  0DA6                     	;# 
   498  0DA7                     	;# 
   499  0DA7                     	;# 
   500  0DA8                     	;# 
   501  0DA9                     	;# 
   502  0DAA                     	;# 
   503  0DAB                     	;# 
   504  0DAC                     	;# 
   505  0DAD                     	;# 
   506  0DAE                     	;# 
   507  0DAF                     	;# 
   508  0E0F                     	;# 
   509  0E10                     	;# 
   510  0E11                     	;# 
   511  0E12                     	;# 
   512  0E13                     	;# 
   513  0E14                     	;# 
   514  0E15                     	;# 
   515  0E16                     	;# 
   516  0E17                     	;# 
   517  0E18                     	;# 
   518  0E19                     	;# 
   519  0E1A                     	;# 
   520  0E1B                     	;# 
   521  0E1C                     	;# 
   522  0E1D                     	;# 
   523  0E1E                     	;# 
   524  0E1F                     	;# 
   525  0E20                     	;# 
   526  0E21                     	;# 
   527  0E22                     	;# 
   528  0E23                     	;# 
   529  0E24                     	;# 
   530  0E25                     	;# 
   531  0E26                     	;# 
   532  0E27                     	;# 
   533  0E28                     	;# 
   534  0E29                     	;# 
   535  0E2A                     	;# 
   536  0E2B                     	;# 
   537  0E2C                     	;# 
   538  0E2D                     	;# 
   539  0E2E                     	;# 
   540  0E90                     	;# 
   541  0E91                     	;# 
   542  0E92                     	;# 
   543  0E94                     	;# 
   544  0E95                     	;# 
   545  0E9C                     	;# 
   546  0E9D                     	;# 
   547  0E9E                     	;# 
   548  0E9F                     	;# 
   549  0EA0                     	;# 
   550  0EA1                     	;# 
   551  0EA2                     	;# 
   552  0EA3                     	;# 
   553  0EA4                     	;# 
   554  0EA5                     	;# 
   555  0EA6                     	;# 
   556  0EA7                     	;# 
   557  0F0F                     	;# 
   558  0F10                     	;# 
   559  0F11                     	;# 
   560  0F12                     	;# 
   561  0F13                     	;# 
   562  0F14                     	;# 
   563  0F15                     	;# 
   564  0F16                     	;# 
   565  0F17                     	;# 
   566  0F18                     	;# 
   567  0F19                     	;# 
   568  0F1A                     	;# 
   569  0F1B                     	;# 
   570  0F1C                     	;# 
   571  0F1D                     	;# 
   572  0F1E                     	;# 
   573  0F1F                     	;# 
   574  0F20                     	;# 
   575  0F21                     	;# 
   576  0F22                     	;# 
   577  0F23                     	;# 
   578  0F24                     	;# 
   579  0F25                     	;# 
   580  0F26                     	;# 
   581  0F27                     	;# 
   582  0F28                     	;# 
   583  0F29                     	;# 
   584  0F2A                     	;# 
   585  0F2B                     	;# 
   586  0F2C                     	;# 
   587  0F2D                     	;# 
   588  0F2E                     	;# 
   589  0F2F                     	;# 
   590  0F30                     	;# 
   591  0F31                     	;# 
   592  0F32                     	;# 
   593  0F33                     	;# 
   594  0F34                     	;# 
   595  0F35                     	;# 
   596  0F36                     	;# 
   597  0F37                     	;# 
   598  0FE4                     	;# 
   599  0FE5                     	;# 
   600  0FE6                     	;# 
   601  0FE7                     	;# 
   602  0FE8                     	;# 
   603  0FE9                     	;# 
   604  0FEA                     	;# 
   605  0FEB                     	;# 
   606  0FED                     	;# 
   607  0FEE                     	;# 
   608  0FEF                     	;# 
   609  0000                     	;# 
   610  0001                     	;# 
   611  0002                     	;# 
   612  0003                     	;# 
   613  0004                     	;# 
   614  0005                     	;# 
   615  0006                     	;# 
   616  0007                     	;# 
   617  0008                     	;# 
   618  0009                     	;# 
   619  000A                     	;# 
   620  000B                     	;# 
   621  000C                     	;# 
   622  000D                     	;# 
   623  000E                     	;# 
   624  0010                     	;# 
   625  0011                     	;# 
   626  0012                     	;# 
   627  0013                     	;# 
   628  0014                     	;# 
   629  0015                     	;# 
   630  0016                     	;# 
   631  0016                     	;# 
   632  0017                     	;# 
   633  0018                     	;# 
   634  0019                     	;# 
   635  001A                     	;# 
   636  001A                     	;# 
   637  001B                     	;# 
   638  001B                     	;# 
   639  001C                     	;# 
   640  001D                     	;# 
   641  001E                     	;# 
   642  001F                     	;# 
   643  008C                     	;# 
   644  008D                     	;# 
   645  008E                     	;# 
   646  0090                     	;# 
   647  0091                     	;# 
   648  0092                     	;# 
   649  0093                     	;# 
   650  0094                     	;# 
   651  0095                     	;# 
   652  0096                     	;# 
   653  0098                     	;# 
   654  0099                     	;# 
   655  009A                     	;# 
   656  009B                     	;# 
   657  009B                     	;# 
   658  009C                     	;# 
   659  009D                     	;# 
   660  009E                     	;# 
   661  009F                     	;# 
   662  010C                     	;# 
   663  010D                     	;# 
   664  010E                     	;# 
   665  0111                     	;# 
   666  0112                     	;# 
   667  0113                     	;# 
   668  0114                     	;# 
   669  0115                     	;# 
   670  0116                     	;# 
   671  0117                     	;# 
   672  0118                     	;# 
   673  0119                     	;# 
   674  011C                     	;# 
   675  018C                     	;# 
   676  018D                     	;# 
   677  018E                     	;# 
   678  0191                     	;# 
   679  0191                     	;# 
   680  0192                     	;# 
   681  0193                     	;# 
   682  0193                     	;# 
   683  0194                     	;# 
   684  0195                     	;# 
   685  0196                     	;# 
   686  0197                     	;# 
   687  0199                     	;# 
   688  0199                     	;# 
   689  0199                     	;# 
   690  019A                     	;# 
   691  019A                     	;# 
   692  019A                     	;# 
   693  019B                     	;# 
   694  019B                     	;# 
   695  019B                     	;# 
   696  019B                     	;# 
   697  019B                     	;# 
   698  019C                     	;# 
   699  019C                     	;# 
   700  019C                     	;# 
   701  019D                     	;# 
   702  019D                     	;# 
   703  019D                     	;# 
   704  019E                     	;# 
   705  019E                     	;# 
   706  019E                     	;# 
   707  019F                     	;# 
   708  019F                     	;# 
   709  019F                     	;# 
   710  019F                     	;# 
   711  019F                     	;# 
   712  020C                     	;# 
   713  020D                     	;# 
   714  020E                     	;# 
   715  0211                     	;# 
   716  0211                     	;# 
   717  0212                     	;# 
   718  0212                     	;# 
   719  0213                     	;# 
   720  0213                     	;# 
   721  0214                     	;# 
   722  0214                     	;# 
   723  0215                     	;# 
   724  0215                     	;# 
   725  0215                     	;# 
   726  0215                     	;# 
   727  0216                     	;# 
   728  0216                     	;# 
   729  0217                     	;# 
   730  0217                     	;# 
   731  028C                     	;# 
   732  028D                     	;# 
   733  028E                     	;# 
   734  0291                     	;# 
   735  0291                     	;# 
   736  0292                     	;# 
   737  0293                     	;# 
   738  0294                     	;# 
   739  0298                     	;# 
   740  0298                     	;# 
   741  0299                     	;# 
   742  029A                     	;# 
   743  029B                     	;# 
   744  029E                     	;# 
   745  030C                     	;# 
   746  030D                     	;# 
   747  030E                     	;# 
   748  038C                     	;# 
   749  038D                     	;# 
   750  038E                     	;# 
   751  0391                     	;# 
   752  0392                     	;# 
   753  0393                     	;# 
   754  0394                     	;# 
   755  0395                     	;# 
   756  0396                     	;# 
   757  0397                     	;# 
   758  0398                     	;# 
   759  0399                     	;# 
   760  040E                     	;# 
   761  0413                     	;# 
   762  0413                     	;# 
   763  0414                     	;# 
   764  0414                     	;# 
   765  0415                     	;# 
   766  0416                     	;# 
   767  0417                     	;# 
   768  0418                     	;# 
   769  041A                     	;# 
   770  041A                     	;# 
   771  041B                     	;# 
   772  041B                     	;# 
   773  041C                     	;# 
   774  041D                     	;# 
   775  041E                     	;# 
   776  041F                     	;# 
   777  0493                     	;# 
   778  0494                     	;# 
   779  0495                     	;# 
   780  0496                     	;# 
   781  049A                     	;# 
   782  049B                     	;# 
   783  049C                     	;# 
   784  049D                     	;# 
   785  058C                     	;# 
   786  058C                     	;# 
   787  058D                     	;# 
   788  058E                     	;# 
   789  058E                     	;# 
   790  058F                     	;# 
   791  0590                     	;# 
   792  0590                     	;# 
   793  0591                     	;# 
   794  0592                     	;# 
   795  0592                     	;# 
   796  0593                     	;# 
   797  0594                     	;# 
   798  0594                     	;# 
   799  0595                     	;# 
   800  0596                     	;# 
   801  0596                     	;# 
   802  0597                     	;# 
   803  0598                     	;# 
   804  0599                     	;# 
   805  059A                     	;# 
   806  059B                     	;# 
   807  059B                     	;# 
   808  059C                     	;# 
   809  059D                     	;# 
   810  060C                     	;# 
   811  060C                     	;# 
   812  060D                     	;# 
   813  060E                     	;# 
   814  060F                     	;# 
   815  060F                     	;# 
   816  0610                     	;# 
   817  0611                     	;# 
   818  0612                     	;# 
   819  0613                     	;# 
   820  0614                     	;# 
   821  0617                     	;# 
   822  0618                     	;# 
   823  0619                     	;# 
   824  061A                     	;# 
   825  061B                     	;# 
   826  061C                     	;# 
   827  0691                     	;# 
   828  0692                     	;# 
   829  0693                     	;# 
   830  0694                     	;# 
   831  0695                     	;# 
   832  0696                     	;# 
   833  0697                     	;# 
   834  0699                     	;# 
   835  069A                     	;# 
   836  0711                     	;# 
   837  0712                     	;# 
   838  0713                     	;# 
   839  0714                     	;# 
   840  0715                     	;# 
   841  0718                     	;# 
   842  0718                     	;# 
   843  0719                     	;# 
   844  071A                     	;# 
   845  071A                     	;# 
   846  071B                     	;# 
   847  071C                     	;# 
   848  071D                     	;# 
   849  0791                     	;# 
   850  0791                     	;# 
   851  0792                     	;# 
   852  0793                     	;# 
   853  0793                     	;# 
   854  0794                     	;# 
   855  0795                     	;# 
   856  0795                     	;# 
   857  0796                     	;# 
   858  0797                     	;# 
   859  0797                     	;# 
   860  0798                     	;# 
   861  0799                     	;# 
   862  079A                     	;# 
   863  080C                     	;# 
   864  080C                     	;# 
   865  080D                     	;# 
   866  080E                     	;# 
   867  080E                     	;# 
   868  080F                     	;# 
   869  0810                     	;# 
   870  0810                     	;# 
   871  0811                     	;# 
   872  0812                     	;# 
   873  0812                     	;# 
   874  0813                     	;# 
   875  0814                     	;# 
   876  0815                     	;# 
   877  0816                     	;# 
   878  0817                     	;# 
   879  0818                     	;# 
   880  0819                     	;# 
   881  081A                     	;# 
   882  081A                     	;# 
   883  081B                     	;# 
   884  081C                     	;# 
   885  081C                     	;# 
   886  081D                     	;# 
   887  088C                     	;# 
   888  088D                     	;# 
   889  088E                     	;# 
   890  088F                     	;# 
   891  088F                     	;# 
   892  0890                     	;# 
   893  0891                     	;# 
   894  0892                     	;# 
   895  0893                     	;# 
   896  0893                     	;# 
   897  0894                     	;# 
   898  0895                     	;# 
   899  0896                     	;# 
   900  0897                     	;# 
   901  0897                     	;# 
   902  0898                     	;# 
   903  0899                     	;# 
   904  0D8C                     	;# 
   905  0D8C                     	;# 
   906  0D8D                     	;# 
   907  0D8E                     	;# 
   908  0D8F                     	;# 
   909  0D8F                     	;# 
   910  0D90                     	;# 
   911  0D91                     	;# 
   912  0D92                     	;# 
   913  0D92                     	;# 
   914  0D93                     	;# 
   915  0D94                     	;# 
   916  0D95                     	;# 
   917  0D95                     	;# 
   918  0D96                     	;# 
   919  0D97                     	;# 
   920  0D98                     	;# 
   921  0D99                     	;# 
   922  0D9A                     	;# 
   923  0D9B                     	;# 
   924  0D9C                     	;# 
   925  0D9D                     	;# 
   926  0D9E                     	;# 
   927  0D9E                     	;# 
   928  0D9F                     	;# 
   929  0DA0                     	;# 
   930  0DA1                     	;# 
   931  0DA1                     	;# 
   932  0DA2                     	;# 
   933  0DA3                     	;# 
   934  0DA4                     	;# 
   935  0DA4                     	;# 
   936  0DA5                     	;# 
   937  0DA6                     	;# 
   938  0DA7                     	;# 
   939  0DA7                     	;# 
   940  0DA8                     	;# 
   941  0DA9                     	;# 
   942  0DAA                     	;# 
   943  0DAB                     	;# 
   944  0DAC                     	;# 
   945  0DAD                     	;# 
   946  0DAE                     	;# 
   947  0DAF                     	;# 
   948  0E0F                     	;# 
   949  0E10                     	;# 
   950  0E11                     	;# 
   951  0E12                     	;# 
   952  0E13                     	;# 
   953  0E14                     	;# 
   954  0E15                     	;# 
   955  0E16                     	;# 
   956  0E17                     	;# 
   957  0E18                     	;# 
   958  0E19                     	;# 
   959  0E1A                     	;# 
   960  0E1B                     	;# 
   961  0E1C                     	;# 
   962  0E1D                     	;# 
   963  0E1E                     	;# 
   964  0E1F                     	;# 
   965  0E20                     	;# 
   966  0E21                     	;# 
   967  0E22                     	;# 
   968  0E23                     	;# 
   969  0E24                     	;# 
   970  0E25                     	;# 
   971  0E26                     	;# 
   972  0E27                     	;# 
   973  0E28                     	;# 
   974  0E29                     	;# 
   975  0E2A                     	;# 
   976  0E2B                     	;# 
   977  0E2C                     	;# 
   978  0E2D                     	;# 
   979  0E2E                     	;# 
   980  0E90                     	;# 
   981  0E91                     	;# 
   982  0E92                     	;# 
   983  0E94                     	;# 
   984  0E95                     	;# 
   985  0E9C                     	;# 
   986  0E9D                     	;# 
   987  0E9E                     	;# 
   988  0E9F                     	;# 
   989  0EA0                     	;# 
   990  0EA1                     	;# 
   991  0EA2                     	;# 
   992  0EA3                     	;# 
   993  0EA4                     	;# 
   994  0EA5                     	;# 
   995  0EA6                     	;# 
   996  0EA7                     	;# 
   997  0F0F                     	;# 
   998  0F10                     	;# 
   999  0F11                     	;# 
  1000  0F12                     	;# 
  1001  0F13                     	;# 
  1002  0F14                     	;# 
  1003  0F15                     	;# 
  1004  0F16                     	;# 
  1005  0F17                     	;# 
  1006  0F18                     	;# 
  1007  0F19                     	;# 
  1008  0F1A                     	;# 
  1009  0F1B                     	;# 
  1010  0F1C                     	;# 
  1011  0F1D                     	;# 
  1012  0F1E                     	;# 
  1013  0F1F                     	;# 
  1014  0F20                     	;# 
  1015  0F21                     	;# 
  1016  0F22                     	;# 
  1017  0F23                     	;# 
  1018  0F24                     	;# 
  1019  0F25                     	;# 
  1020  0F26                     	;# 
  1021  0F27                     	;# 
  1022  0F28                     	;# 
  1023  0F29                     	;# 
  1024  0F2A                     	;# 
  1025  0F2B                     	;# 
  1026  0F2C                     	;# 
  1027  0F2D                     	;# 
  1028  0F2E                     	;# 
  1029  0F2F                     	;# 
  1030  0F30                     	;# 
  1031  0F31                     	;# 
  1032  0F32                     	;# 
  1033  0F33                     	;# 
  1034  0F34                     	;# 
  1035  0F35                     	;# 
  1036  0F36                     	;# 
  1037  0F37                     	;# 
  1038  0FE4                     	;# 
  1039  0FE5                     	;# 
  1040  0FE6                     	;# 
  1041  0FE7                     	;# 
  1042  0FE8                     	;# 
  1043  0FE9                     	;# 
  1044  0FEA                     	;# 
  1045  0FEB                     	;# 
  1046  0FED                     	;# 
  1047  0FEE                     	;# 
  1048  0FEF                     	;# 
  1049  0000                     	;# 
  1050  0001                     	;# 
  1051  0002                     	;# 
  1052  0003                     	;# 
  1053  0004                     	;# 
  1054  0005                     	;# 
  1055  0006                     	;# 
  1056  0007                     	;# 
  1057  0008                     	;# 
  1058  0009                     	;# 
  1059  000A                     	;# 
  1060  000B                     	;# 
  1061  000C                     	;# 
  1062  000D                     	;# 
  1063  000E                     	;# 
  1064  0010                     	;# 
  1065  0011                     	;# 
  1066  0012                     	;# 
  1067  0013                     	;# 
  1068  0014                     	;# 
  1069  0015                     	;# 
  1070  0016                     	;# 
  1071  0016                     	;# 
  1072  0017                     	;# 
  1073  0018                     	;# 
  1074  0019                     	;# 
  1075  001A                     	;# 
  1076  001A                     	;# 
  1077  001B                     	;# 
  1078  001B                     	;# 
  1079  001C                     	;# 
  1080  001D                     	;# 
  1081  001E                     	;# 
  1082  001F                     	;# 
  1083  008C                     	;# 
  1084  008D                     	;# 
  1085  008E                     	;# 
  1086  0090                     	;# 
  1087  0091                     	;# 
  1088  0092                     	;# 
  1089  0093                     	;# 
  1090  0094                     	;# 
  1091  0095                     	;# 
  1092  0096                     	;# 
  1093  0098                     	;# 
  1094  0099                     	;# 
  1095  009A                     	;# 
  1096  009B                     	;# 
  1097  009B                     	;# 
  1098  009C                     	;# 
  1099  009D                     	;# 
  1100  009E                     	;# 
  1101  009F                     	;# 
  1102  010C                     	;# 
  1103  010D                     	;# 
  1104  010E                     	;# 
  1105  0111                     	;# 
  1106  0112                     	;# 
  1107  0113                     	;# 
  1108  0114                     	;# 
  1109  0115                     	;# 
  1110  0116                     	;# 
  1111  0117                     	;# 
  1112  0118                     	;# 
  1113  0119                     	;# 
  1114  011C                     	;# 
  1115  018C                     	;# 
  1116  018D                     	;# 
  1117  018E                     	;# 
  1118  0191                     	;# 
  1119  0191                     	;# 
  1120  0192                     	;# 
  1121  0193                     	;# 
  1122  0193                     	;# 
  1123  0194                     	;# 
  1124  0195                     	;# 
  1125  0196                     	;# 
  1126  0197                     	;# 
  1127  0199                     	;# 
  1128  0199                     	;# 
  1129  0199                     	;# 
  1130  019A                     	;# 
  1131  019A                     	;# 
  1132  019A                     	;# 
  1133  019B                     	;# 
  1134  019B                     	;# 
  1135  019B                     	;# 
  1136  019B                     	;# 
  1137  019B                     	;# 
  1138  019C                     	;# 
  1139  019C                     	;# 
  1140  019C                     	;# 
  1141  019D                     	;# 
  1142  019D                     	;# 
  1143  019D                     	;# 
  1144  019E                     	;# 
  1145  019E                     	;# 
  1146  019E                     	;# 
  1147  019F                     	;# 
  1148  019F                     	;# 
  1149  019F                     	;# 
  1150  019F                     	;# 
  1151  019F                     	;# 
  1152  020C                     	;# 
  1153  020D                     	;# 
  1154  020E                     	;# 
  1155  0211                     	;# 
  1156  0211                     	;# 
  1157  0212                     	;# 
  1158  0212                     	;# 
  1159  0213                     	;# 
  1160  0213                     	;# 
  1161  0214                     	;# 
  1162  0214                     	;# 
  1163  0215                     	;# 
  1164  0215                     	;# 
  1165  0215                     	;# 
  1166  0215                     	;# 
  1167  0216                     	;# 
  1168  0216                     	;# 
  1169  0217                     	;# 
  1170  0217                     	;# 
  1171  028C                     	;# 
  1172  028D                     	;# 
  1173  028E                     	;# 
  1174  0291                     	;# 
  1175  0291                     	;# 
  1176  0292                     	;# 
  1177  0293                     	;# 
  1178  0294                     	;# 
  1179  0298                     	;# 
  1180  0298                     	;# 
  1181  0299                     	;# 
  1182  029A                     	;# 
  1183  029B                     	;# 
  1184  029E                     	;# 
  1185  030C                     	;# 
  1186  030D                     	;# 
  1187  030E                     	;# 
  1188  038C                     	;# 
  1189  038D                     	;# 
  1190  038E                     	;# 
  1191  0391                     	;# 
  1192  0392                     	;# 
  1193  0393                     	;# 
  1194  0394                     	;# 
  1195  0395                     	;# 
  1196  0396                     	;# 
  1197  0397                     	;# 
  1198  0398                     	;# 
  1199  0399                     	;# 
  1200  040E                     	;# 
  1201  0413                     	;# 
  1202  0413                     	;# 
  1203  0414                     	;# 
  1204  0414                     	;# 
  1205  0415                     	;# 
  1206  0416                     	;# 
  1207  0417                     	;# 
  1208  0418                     	;# 
  1209  041A                     	;# 
  1210  041A                     	;# 
  1211  041B                     	;# 
  1212  041B                     	;# 
  1213  041C                     	;# 
  1214  041D                     	;# 
  1215  041E                     	;# 
  1216  041F                     	;# 
  1217  0493                     	;# 
  1218  0494                     	;# 
  1219  0495                     	;# 
  1220  0496                     	;# 
  1221  049A                     	;# 
  1222  049B                     	;# 
  1223  049C                     	;# 
  1224  049D                     	;# 
  1225  058C                     	;# 
  1226  058C                     	;# 
  1227  058D                     	;# 
  1228  058E                     	;# 
  1229  058E                     	;# 
  1230  058F                     	;# 
  1231  0590                     	;# 
  1232  0590                     	;# 
  1233  0591                     	;# 
  1234  0592                     	;# 
  1235  0592                     	;# 
  1236  0593                     	;# 
  1237  0594                     	;# 
  1238  0594                     	;# 
  1239  0595                     	;# 
  1240  0596                     	;# 
  1241  0596                     	;# 
  1242  0597                     	;# 
  1243  0598                     	;# 
  1244  0599                     	;# 
  1245  059A                     	;# 
  1246  059B                     	;# 
  1247  059B                     	;# 
  1248  059C                     	;# 
  1249  059D                     	;# 
  1250  060C                     	;# 
  1251  060C                     	;# 
  1252  060D                     	;# 
  1253  060E                     	;# 
  1254  060F                     	;# 
  1255  060F                     	;# 
  1256  0610                     	;# 
  1257  0611                     	;# 
  1258  0612                     	;# 
  1259  0613                     	;# 
  1260  0614                     	;# 
  1261  0617                     	;# 
  1262  0618                     	;# 
  1263  0619                     	;# 
  1264  061A                     	;# 
  1265  061B                     	;# 
  1266  061C                     	;# 
  1267  0691                     	;# 
  1268  0692                     	;# 
  1269  0693                     	;# 
  1270  0694                     	;# 
  1271  0695                     	;# 
  1272  0696                     	;# 
  1273  0697                     	;# 
  1274  0699                     	;# 
  1275  069A                     	;# 
  1276  0711                     	;# 
  1277  0712                     	;# 
  1278  0713                     	;# 
  1279  0714                     	;# 
  1280  0715                     	;# 
  1281  0718                     	;# 
  1282  0718                     	;# 
  1283  0719                     	;# 
  1284  071A                     	;# 
  1285  071A                     	;# 
  1286  071B                     	;# 
  1287  071C                     	;# 
  1288  071D                     	;# 
  1289  0791                     	;# 
  1290  0791                     	;# 
  1291  0792                     	;# 
  1292  0793                     	;# 
  1293  0793                     	;# 
  1294  0794                     	;# 
  1295  0795                     	;# 
  1296  0795                     	;# 
  1297  0796                     	;# 
  1298  0797                     	;# 
  1299  0797                     	;# 
  1300  0798                     	;# 
  1301  0799                     	;# 
  1302  079A                     	;# 
  1303  080C                     	;# 
  1304  080C                     	;# 
  1305  080D                     	;# 
  1306  080E                     	;# 
  1307  080E                     	;# 
  1308  080F                     	;# 
  1309  0810                     	;# 
  1310  0810                     	;# 
  1311  0811                     	;# 
  1312  0812                     	;# 
  1313  0812                     	;# 
  1314  0813                     	;# 
  1315  0814                     	;# 
  1316  0815                     	;# 
  1317  0816                     	;# 
  1318  0817                     	;# 
  1319  0818                     	;# 
  1320  0819                     	;# 
  1321  081A                     	;# 
  1322  081A                     	;# 
  1323  081B                     	;# 
  1324  081C                     	;# 
  1325  081C                     	;# 
  1326  081D                     	;# 
  1327  088C                     	;# 
  1328  088D                     	;# 
  1329  088E                     	;# 
  1330  088F                     	;# 
  1331  088F                     	;# 
  1332  0890                     	;# 
  1333  0891                     	;# 
  1334  0892                     	;# 
  1335  0893                     	;# 
  1336  0893                     	;# 
  1337  0894                     	;# 
  1338  0895                     	;# 
  1339  0896                     	;# 
  1340  0897                     	;# 
  1341  0897                     	;# 
  1342  0898                     	;# 
  1343  0899                     	;# 
  1344  0D8C                     	;# 
  1345  0D8C                     	;# 
  1346  0D8D                     	;# 
  1347  0D8E                     	;# 
  1348  0D8F                     	;# 
  1349  0D8F                     	;# 
  1350  0D90                     	;# 
  1351  0D91                     	;# 
  1352  0D92                     	;# 
  1353  0D92                     	;# 
  1354  0D93                     	;# 
  1355  0D94                     	;# 
  1356  0D95                     	;# 
  1357  0D95                     	;# 
  1358  0D96                     	;# 
  1359  0D97                     	;# 
  1360  0D98                     	;# 
  1361  0D99                     	;# 
  1362  0D9A                     	;# 
  1363  0D9B                     	;# 
  1364  0D9C                     	;# 
  1365  0D9D                     	;# 
  1366  0D9E                     	;# 
  1367  0D9E                     	;# 
  1368  0D9F                     	;# 
  1369  0DA0                     	;# 
  1370  0DA1                     	;# 
  1371  0DA1                     	;# 
  1372  0DA2                     	;# 
  1373  0DA3                     	;# 
  1374  0DA4                     	;# 
  1375  0DA4                     	;# 
  1376  0DA5                     	;# 
  1377  0DA6                     	;# 
  1378  0DA7                     	;# 
  1379  0DA7                     	;# 
  1380  0DA8                     	;# 
  1381  0DA9                     	;# 
  1382  0DAA                     	;# 
  1383  0DAB                     	;# 
  1384  0DAC                     	;# 
  1385  0DAD                     	;# 
  1386  0DAE                     	;# 
  1387  0DAF                     	;# 
  1388  0E0F                     	;# 
  1389  0E10                     	;# 
  1390  0E11                     	;# 
  1391  0E12                     	;# 
  1392  0E13                     	;# 
  1393  0E14                     	;# 
  1394  0E15                     	;# 
  1395  0E16                     	;# 
  1396  0E17                     	;# 
  1397  0E18                     	;# 
  1398  0E19                     	;# 
  1399  0E1A                     	;# 
  1400  0E1B                     	;# 
  1401  0E1C                     	;# 
  1402  0E1D                     	;# 
  1403  0E1E                     	;# 
  1404  0E1F                     	;# 
  1405  0E20                     	;# 
  1406  0E21                     	;# 
  1407  0E22                     	;# 
  1408  0E23                     	;# 
  1409  0E24                     	;# 
  1410  0E25                     	;# 
  1411  0E26                     	;# 
  1412  0E27                     	;# 
  1413  0E28                     	;# 
  1414  0E29                     	;# 
  1415  0E2A                     	;# 
  1416  0E2B                     	;# 
  1417  0E2C                     	;# 
  1418  0E2D                     	;# 
  1419  0E2E                     	;# 
  1420  0E90                     	;# 
  1421  0E91                     	;# 
  1422  0E92                     	;# 
  1423  0E94                     	;# 
  1424  0E95                     	;# 
  1425  0E9C                     	;# 
  1426  0E9D                     	;# 
  1427  0E9E                     	;# 
  1428  0E9F                     	;# 
  1429  0EA0                     	;# 
  1430  0EA1                     	;# 
  1431  0EA2                     	;# 
  1432  0EA3                     	;# 
  1433  0EA4                     	;# 
  1434  0EA5                     	;# 
  1435  0EA6                     	;# 
  1436  0EA7                     	;# 
  1437  0F0F                     	;# 
  1438  0F10                     	;# 
  1439  0F11                     	;# 
  1440  0F12                     	;# 
  1441  0F13                     	;# 
  1442  0F14                     	;# 
  1443  0F15                     	;# 
  1444  0F16                     	;# 
  1445  0F17                     	;# 
  1446  0F18                     	;# 
  1447  0F19                     	;# 
  1448  0F1A                     	;# 
  1449  0F1B                     	;# 
  1450  0F1C                     	;# 
  1451  0F1D                     	;# 
  1452  0F1E                     	;# 
  1453  0F1F                     	;# 
  1454  0F20                     	;# 
  1455  0F21                     	;# 
  1456  0F22                     	;# 
  1457  0F23                     	;# 
  1458  0F24                     	;# 
  1459  0F25                     	;# 
  1460  0F26                     	;# 
  1461  0F27                     	;# 
  1462  0F28                     	;# 
  1463  0F29                     	;# 
  1464  0F2A                     	;# 
  1465  0F2B                     	;# 
  1466  0F2C                     	;# 
  1467  0F2D                     	;# 
  1468  0F2E                     	;# 
  1469  0F2F                     	;# 
  1470  0F30                     	;# 
  1471  0F31                     	;# 
  1472  0F32                     	;# 
  1473  0F33                     	;# 
  1474  0F34                     	;# 
  1475  0F35                     	;# 
  1476  0F36                     	;# 
  1477  0F37                     	;# 
  1478  0FE4                     	;# 
  1479  0FE5                     	;# 
  1480  0FE6                     	;# 
  1481  0FE7                     	;# 
  1482  0FE8                     	;# 
  1483  0FE9                     	;# 
  1484  0FEA                     	;# 
  1485  0FEB                     	;# 
  1486  0FED                     	;# 
  1487  0FEE                     	;# 
  1488  0FEF                     	;# 
  1489  0000                     	;# 
  1490  0001                     	;# 
  1491  0002                     	;# 
  1492  0003                     	;# 
  1493  0004                     	;# 
  1494  0005                     	;# 
  1495  0006                     	;# 
  1496  0007                     	;# 
  1497  0008                     	;# 
  1498  0009                     	;# 
  1499  000A                     	;# 
  1500  000B                     	;# 
  1501  000C                     	;# 
  1502  000D                     	;# 
  1503  000E                     	;# 
  1504  0010                     	;# 
  1505  0011                     	;# 
  1506  0012                     	;# 
  1507  0013                     	;# 
  1508  0014                     	;# 
  1509  0015                     	;# 
  1510  0016                     	;# 
  1511  0016                     	;# 
  1512  0017                     	;# 
  1513  0018                     	;# 
  1514  0019                     	;# 
  1515  001A                     	;# 
  1516  001A                     	;# 
  1517  001B                     	;# 
  1518  001B                     	;# 
  1519  001C                     	;# 
  1520  001D                     	;# 
  1521  001E                     	;# 
  1522  001F                     	;# 
  1523  008C                     	;# 
  1524  008D                     	;# 
  1525  008E                     	;# 
  1526  0090                     	;# 
  1527  0091                     	;# 
  1528  0092                     	;# 
  1529  0093                     	;# 
  1530  0094                     	;# 
  1531  0095                     	;# 
  1532  0096                     	;# 
  1533  0098                     	;# 
  1534  0099                     	;# 
  1535  009A                     	;# 
  1536  009B                     	;# 
  1537  009B                     	;# 
  1538  009C                     	;# 
  1539  009D                     	;# 
  1540  009E                     	;# 
  1541  009F                     	;# 
  1542  010C                     	;# 
  1543  010D                     	;# 
  1544  010E                     	;# 
  1545  0111                     	;# 
  1546  0112                     	;# 
  1547  0113                     	;# 
  1548  0114                     	;# 
  1549  0115                     	;# 
  1550  0116                     	;# 
  1551  0117                     	;# 
  1552  0118                     	;# 
  1553  0119                     	;# 
  1554  011C                     	;# 
  1555  018C                     	;# 
  1556  018D                     	;# 
  1557  018E                     	;# 
  1558  0191                     	;# 
  1559  0191                     	;# 
  1560  0192                     	;# 
  1561  0193                     	;# 
  1562  0193                     	;# 
  1563  0194                     	;# 
  1564  0195                     	;# 
  1565  0196                     	;# 
  1566  0197                     	;# 
  1567  0199                     	;# 
  1568  0199                     	;# 
  1569  0199                     	;# 
  1570  019A                     	;# 
  1571  019A                     	;# 
  1572  019A                     	;# 
  1573  019B                     	;# 
  1574  019B                     	;# 
  1575  019B                     	;# 
  1576  019B                     	;# 
  1577  019B                     	;# 
  1578  019C                     	;# 
  1579  019C                     	;# 
  1580  019C                     	;# 
  1581  019D                     	;# 
  1582  019D                     	;# 
  1583  019D                     	;# 
  1584  019E                     	;# 
  1585  019E                     	;# 
  1586  019E                     	;# 
  1587  019F                     	;# 
  1588  019F                     	;# 
  1589  019F                     	;# 
  1590  019F                     	;# 
  1591  019F                     	;# 
  1592  020C                     	;# 
  1593  020D                     	;# 
  1594  020E                     	;# 
  1595  0211                     	;# 
  1596  0211                     	;# 
  1597  0212                     	;# 
  1598  0212                     	;# 
  1599  0213                     	;# 
  1600  0213                     	;# 
  1601  0214                     	;# 
  1602  0214                     	;# 
  1603  0215                     	;# 
  1604  0215                     	;# 
  1605  0215                     	;# 
  1606  0215                     	;# 
  1607  0216                     	;# 
  1608  0216                     	;# 
  1609  0217                     	;# 
  1610  0217                     	;# 
  1611  028C                     	;# 
  1612  028D                     	;# 
  1613  028E                     	;# 
  1614  0291                     	;# 
  1615  0291                     	;# 
  1616  0292                     	;# 
  1617  0293                     	;# 
  1618  0294                     	;# 
  1619  0298                     	;# 
  1620  0298                     	;# 
  1621  0299                     	;# 
  1622  029A                     	;# 
  1623  029B                     	;# 
  1624  029E                     	;# 
  1625  030C                     	;# 
  1626  030D                     	;# 
  1627  030E                     	;# 
  1628  038C                     	;# 
  1629  038D                     	;# 
  1630  038E                     	;# 
  1631  0391                     	;# 
  1632  0392                     	;# 
  1633  0393                     	;# 
  1634  0394                     	;# 
  1635  0395                     	;# 
  1636  0396                     	;# 
  1637  0397                     	;# 
  1638  0398                     	;# 
  1639  0399                     	;# 
  1640  040E                     	;# 
  1641  0413                     	;# 
  1642  0413                     	;# 
  1643  0414                     	;# 
  1644  0414                     	;# 
  1645  0415                     	;# 
  1646  0416                     	;# 
  1647  0417                     	;# 
  1648  0418                     	;# 
  1649  041A                     	;# 
  1650  041A                     	;# 
  1651  041B                     	;# 
  1652  041B                     	;# 
  1653  041C                     	;# 
  1654  041D                     	;# 
  1655  041E                     	;# 
  1656  041F                     	;# 
  1657  0493                     	;# 
  1658  0494                     	;# 
  1659  0495                     	;# 
  1660  0496                     	;# 
  1661  049A                     	;# 
  1662  049B                     	;# 
  1663  049C                     	;# 
  1664  049D                     	;# 
  1665  058C                     	;# 
  1666  058C                     	;# 
  1667  058D                     	;# 
  1668  058E                     	;# 
  1669  058E                     	;# 
  1670  058F                     	;# 
  1671  0590                     	;# 
  1672  0590                     	;# 
  1673  0591                     	;# 
  1674  0592                     	;# 
  1675  0592                     	;# 
  1676  0593                     	;# 
  1677  0594                     	;# 
  1678  0594                     	;# 
  1679  0595                     	;# 
  1680  0596                     	;# 
  1681  0596                     	;# 
  1682  0597                     	;# 
  1683  0598                     	;# 
  1684  0599                     	;# 
  1685  059A                     	;# 
  1686  059B                     	;# 
  1687  059B                     	;# 
  1688  059C                     	;# 
  1689  059D                     	;# 
  1690  060C                     	;# 
  1691  060C                     	;# 
  1692  060D                     	;# 
  1693  060E                     	;# 
  1694  060F                     	;# 
  1695  060F                     	;# 
  1696  0610                     	;# 
  1697  0611                     	;# 
  1698  0612                     	;# 
  1699  0613                     	;# 
  1700  0614                     	;# 
  1701  0617                     	;# 
  1702  0618                     	;# 
  1703  0619                     	;# 
  1704  061A                     	;# 
  1705  061B                     	;# 
  1706  061C                     	;# 
  1707  0691                     	;# 
  1708  0692                     	;# 
  1709  0693                     	;# 
  1710  0694                     	;# 
  1711  0695                     	;# 
  1712  0696                     	;# 
  1713  0697                     	;# 
  1714  0699                     	;# 
  1715  069A                     	;# 
  1716  0711                     	;# 
  1717  0712                     	;# 
  1718  0713                     	;# 
  1719  0714                     	;# 
  1720  0715                     	;# 
  1721  0718                     	;# 
  1722  0718                     	;# 
  1723  0719                     	;# 
  1724  071A                     	;# 
  1725  071A                     	;# 
  1726  071B                     	;# 
  1727  071C                     	;# 
  1728  071D                     	;# 
  1729  0791                     	;# 
  1730  0791                     	;# 
  1731  0792                     	;# 
  1732  0793                     	;# 
  1733  0793                     	;# 
  1734  0794                     	;# 
  1735  0795                     	;# 
  1736  0795                     	;# 
  1737  0796                     	;# 
  1738  0797                     	;# 
  1739  0797                     	;# 
  1740  0798                     	;# 
  1741  0799                     	;# 
  1742  079A                     	;# 
  1743  080C                     	;# 
  1744  080C                     	;# 
  1745  080D                     	;# 
  1746  080E                     	;# 
  1747  080E                     	;# 
  1748  080F                     	;# 
  1749  0810                     	;# 
  1750  0810                     	;# 
  1751  0811                     	;# 
  1752  0812                     	;# 
  1753  0812                     	;# 
  1754  0813                     	;# 
  1755  0814                     	;# 
  1756  0815                     	;# 
  1757  0816                     	;# 
  1758  0817                     	;# 
  1759  0818                     	;# 
  1760  0819                     	;# 
  1761  081A                     	;# 
  1762  081A                     	;# 
  1763  081B                     	;# 
  1764  081C                     	;# 
  1765  081C                     	;# 
  1766  081D                     	;# 
  1767  088C                     	;# 
  1768  088D                     	;# 
  1769  088E                     	;# 
  1770  088F                     	;# 
  1771  088F                     	;# 
  1772  0890                     	;# 
  1773  0891                     	;# 
  1774  0892                     	;# 
  1775  0893                     	;# 
  1776  0893                     	;# 
  1777  0894                     	;# 
  1778  0895                     	;# 
  1779  0896                     	;# 
  1780  0897                     	;# 
  1781  0897                     	;# 
  1782  0898                     	;# 
  1783  0899                     	;# 
  1784  0D8C                     	;# 
  1785  0D8C                     	;# 
  1786  0D8D                     	;# 
  1787  0D8E                     	;# 
  1788  0D8F                     	;# 
  1789  0D8F                     	;# 
  1790  0D90                     	;# 
  1791  0D91                     	;# 
  1792  0D92                     	;# 
  1793  0D92                     	;# 
  1794  0D93                     	;# 
  1795  0D94                     	;# 
  1796  0D95                     	;# 
  1797  0D95                     	;# 
  1798  0D96                     	;# 
  1799  0D97                     	;# 
  1800  0D98                     	;# 
  1801  0D99                     	;# 
  1802  0D9A                     	;# 
  1803  0D9B                     	;# 
  1804  0D9C                     	;# 
  1805  0D9D                     	;# 
  1806  0D9E                     	;# 
  1807  0D9E                     	;# 
  1808  0D9F                     	;# 
  1809  0DA0                     	;# 
  1810  0DA1                     	;# 
  1811  0DA1                     	;# 
  1812  0DA2                     	;# 
  1813  0DA3                     	;# 
  1814  0DA4                     	;# 
  1815  0DA4                     	;# 
  1816  0DA5                     	;# 
  1817  0DA6                     	;# 
  1818  0DA7                     	;# 
  1819  0DA7                     	;# 
  1820  0DA8                     	;# 
  1821  0DA9                     	;# 
  1822  0DAA                     	;# 
  1823  0DAB                     	;# 
  1824  0DAC                     	;# 
  1825  0DAD                     	;# 
  1826  0DAE                     	;# 
  1827  0DAF                     	;# 
  1828  0E0F                     	;# 
  1829  0E10                     	;# 
  1830  0E11                     	;# 
  1831  0E12                     	;# 
  1832  0E13                     	;# 
  1833  0E14                     	;# 
  1834  0E15                     	;# 
  1835  0E16                     	;# 
  1836  0E17                     	;# 
  1837  0E18                     	;# 
  1838  0E19                     	;# 
  1839  0E1A                     	;# 
  1840  0E1B                     	;# 
  1841  0E1C                     	;# 
  1842  0E1D                     	;# 
  1843  0E1E                     	;# 
  1844  0E1F                     	;# 
  1845  0E20                     	;# 
  1846  0E21                     	;# 
  1847  0E22                     	;# 
  1848  0E23                     	;# 
  1849  0E24                     	;# 
  1850  0E25                     	;# 
  1851  0E26                     	;# 
  1852  0E27                     	;# 
  1853  0E28                     	;# 
  1854  0E29                     	;# 
  1855  0E2A                     	;# 
  1856  0E2B                     	;# 
  1857  0E2C                     	;# 
  1858  0E2D                     	;# 
  1859  0E2E                     	;# 
  1860  0E90                     	;# 
  1861  0E91                     	;# 
  1862  0E92                     	;# 
  1863  0E94                     	;# 
  1864  0E95                     	;# 
  1865  0E9C                     	;# 
  1866  0E9D                     	;# 
  1867  0E9E                     	;# 
  1868  0E9F                     	;# 
  1869  0EA0                     	;# 
  1870  0EA1                     	;# 
  1871  0EA2                     	;# 
  1872  0EA3                     	;# 
  1873  0EA4                     	;# 
  1874  0EA5                     	;# 
  1875  0EA6                     	;# 
  1876  0EA7                     	;# 
  1877  0F0F                     	;# 
  1878  0F10                     	;# 
  1879  0F11                     	;# 
  1880  0F12                     	;# 
  1881  0F13                     	;# 
  1882  0F14                     	;# 
  1883  0F15                     	;# 
  1884  0F16                     	;# 
  1885  0F17                     	;# 
  1886  0F18                     	;# 
  1887  0F19                     	;# 
  1888  0F1A                     	;# 
  1889  0F1B                     	;# 
  1890  0F1C                     	;# 
  1891  0F1D                     	;# 
  1892  0F1E                     	;# 
  1893  0F1F                     	;# 
  1894  0F20                     	;# 
  1895  0F21                     	;# 
  1896  0F22                     	;# 
  1897  0F23                     	;# 
  1898  0F24                     	;# 
  1899  0F25                     	;# 
  1900  0F26                     	;# 
  1901  0F27                     	;# 
  1902  0F28                     	;# 
  1903  0F29                     	;# 
  1904  0F2A                     	;# 
  1905  0F2B                     	;# 
  1906  0F2C                     	;# 
  1907  0F2D                     	;# 
  1908  0F2E                     	;# 
  1909  0F2F                     	;# 
  1910  0F30                     	;# 
  1911  0F31                     	;# 
  1912  0F32                     	;# 
  1913  0F33                     	;# 
  1914  0F34                     	;# 
  1915  0F35                     	;# 
  1916  0F36                     	;# 
  1917  0F37                     	;# 
  1918  0FE4                     	;# 
  1919  0FE5                     	;# 
  1920  0FE6                     	;# 
  1921  0FE7                     	;# 
  1922  0FE8                     	;# 
  1923  0FE9                     	;# 
  1924  0FEA                     	;# 
  1925  0FEB                     	;# 
  1926  0FED                     	;# 
  1927  0FEE                     	;# 
  1928  0FEF                     	;# 
  1929  0000                     	;# 
  1930  0001                     	;# 
  1931  0002                     	;# 
  1932  0003                     	;# 
  1933  0004                     	;# 
  1934  0005                     	;# 
  1935  0006                     	;# 
  1936  0007                     	;# 
  1937  0008                     	;# 
  1938  0009                     	;# 
  1939  000A                     	;# 
  1940  000B                     	;# 
  1941  000C                     	;# 
  1942  000D                     	;# 
  1943  000E                     	;# 
  1944  0010                     	;# 
  1945  0011                     	;# 
  1946  0012                     	;# 
  1947  0013                     	;# 
  1948  0014                     	;# 
  1949  0015                     	;# 
  1950  0016                     	;# 
  1951  0016                     	;# 
  1952  0017                     	;# 
  1953  0018                     	;# 
  1954  0019                     	;# 
  1955  001A                     	;# 
  1956  001A                     	;# 
  1957  001B                     	;# 
  1958  001B                     	;# 
  1959  001C                     	;# 
  1960  001D                     	;# 
  1961  001E                     	;# 
  1962  001F                     	;# 
  1963  008C                     	;# 
  1964  008D                     	;# 
  1965  008E                     	;# 
  1966  0090                     	;# 
  1967  0091                     	;# 
  1968  0092                     	;# 
  1969  0093                     	;# 
  1970  0094                     	;# 
  1971  0095                     	;# 
  1972  0096                     	;# 
  1973  0098                     	;# 
  1974  0099                     	;# 
  1975  009A                     	;# 
  1976  009B                     	;# 
  1977  009B                     	;# 
  1978  009C                     	;# 
  1979  009D                     	;# 
  1980  009E                     	;# 
  1981  009F                     	;# 
  1982  010C                     	;# 
  1983  010D                     	;# 
  1984  010E                     	;# 
  1985  0111                     	;# 
  1986  0112                     	;# 
  1987  0113                     	;# 
  1988  0114                     	;# 
  1989  0115                     	;# 
  1990  0116                     	;# 
  1991  0117                     	;# 
  1992  0118                     	;# 
  1993  0119                     	;# 
  1994  011C                     	;# 
  1995  018C                     	;# 
  1996  018D                     	;# 
  1997  018E                     	;# 
  1998  0191                     	;# 
  1999  0191                     	;# 
  2000  0192                     	;# 
  2001  0193                     	;# 
  2002  0193                     	;# 
  2003  0194                     	;# 
  2004  0195                     	;# 
  2005  0196                     	;# 
  2006  0197                     	;# 
  2007  0199                     	;# 
  2008  0199                     	;# 
  2009  0199                     	;# 
  2010  019A                     	;# 
  2011  019A                     	;# 
  2012  019A                     	;# 
  2013  019B                     	;# 
  2014  019B                     	;# 
  2015  019B                     	;# 
  2016  019B                     	;# 
  2017  019B                     	;# 
  2018  019C                     	;# 
  2019  019C                     	;# 
  2020  019C                     	;# 
  2021  019D                     	;# 
  2022  019D                     	;# 
  2023  019D                     	;# 
  2024  019E                     	;# 
  2025  019E                     	;# 
  2026  019E                     	;# 
  2027  019F                     	;# 
  2028  019F                     	;# 
  2029  019F                     	;# 
  2030  019F                     	;# 
  2031  019F                     	;# 
  2032  020C                     	;# 
  2033  020D                     	;# 
  2034  020E                     	;# 
  2035  0211                     	;# 
  2036  0211                     	;# 
  2037  0212                     	;# 
  2038  0212                     	;# 
  2039  0213                     	;# 
  2040  0213                     	;# 
  2041  0214                     	;# 
  2042  0214                     	;# 
  2043  0215                     	;# 
  2044  0215                     	;# 
  2045  0215                     	;# 
  2046  0215                     	;# 
  2047  0216                     	;# 
  2048  0216                     	;# 
  2049  0217                     	;# 
  2050  0217                     	;# 
  2051  028C                     	;# 
  2052  028D                     	;# 
  2053  028E                     	;# 
  2054  0291                     	;# 
  2055  0291                     	;# 
  2056  0292                     	;# 
  2057  0293                     	;# 
  2058  0294                     	;# 
  2059  0298                     	;# 
  2060  0298                     	;# 
  2061  0299                     	;# 
  2062  029A                     	;# 
  2063  029B                     	;# 
  2064  029E                     	;# 
  2065  030C                     	;# 
  2066  030D                     	;# 
  2067  030E                     	;# 
  2068  038C                     	;# 
  2069  038D                     	;# 
  2070  038E                     	;# 
  2071  0391                     	;# 
  2072  0392                     	;# 
  2073  0393                     	;# 
  2074  0394                     	;# 
  2075  0395                     	;# 
  2076  0396                     	;# 
  2077  0397                     	;# 
  2078  0398                     	;# 
  2079  0399                     	;# 
  2080  040E                     	;# 
  2081  0413                     	;# 
  2082  0413                     	;# 
  2083  0414                     	;# 
  2084  0414                     	;# 
  2085  0415                     	;# 
  2086  0416                     	;# 
  2087  0417                     	;# 
  2088  0418                     	;# 
  2089  041A                     	;# 
  2090  041A                     	;# 
  2091  041B                     	;# 
  2092  041B                     	;# 
  2093  041C                     	;# 
  2094  041D                     	;# 
  2095  041E                     	;# 
  2096  041F                     	;# 
  2097  0493                     	;# 
  2098  0494                     	;# 
  2099  0495                     	;# 
  2100  0496                     	;# 
  2101  049A                     	;# 
  2102  049B                     	;# 
  2103  049C                     	;# 
  2104  049D                     	;# 
  2105  058C                     	;# 
  2106  058C                     	;# 
  2107  058D                     	;# 
  2108  058E                     	;# 
  2109  058E                     	;# 
  2110  058F                     	;# 
  2111  0590                     	;# 
  2112  0590                     	;# 
  2113  0591                     	;# 
  2114  0592                     	;# 
  2115  0592                     	;# 
  2116  0593                     	;# 
  2117  0594                     	;# 
  2118  0594                     	;# 
  2119  0595                     	;# 
  2120  0596                     	;# 
  2121  0596                     	;# 
  2122  0597                     	;# 
  2123  0598                     	;# 
  2124  0599                     	;# 
  2125  059A                     	;# 
  2126  059B                     	;# 
  2127  059B                     	;# 
  2128  059C                     	;# 
  2129  059D                     	;# 
  2130  060C                     	;# 
  2131  060C                     	;# 
  2132  060D                     	;# 
  2133  060E                     	;# 
  2134  060F                     	;# 
  2135  060F                     	;# 
  2136  0610                     	;# 
  2137  0611                     	;# 
  2138  0612                     	;# 
  2139  0613                     	;# 
  2140  0614                     	;# 
  2141  0617                     	;# 
  2142  0618                     	;# 
  2143  0619                     	;# 
  2144  061A                     	;# 
  2145  061B                     	;# 
  2146  061C                     	;# 
  2147  0691                     	;# 
  2148  0692                     	;# 
  2149  0693                     	;# 
  2150  0694                     	;# 
  2151  0695                     	;# 
  2152  0696                     	;# 
  2153  0697                     	;# 
  2154  0699                     	;# 
  2155  069A                     	;# 
  2156  0711                     	;# 
  2157  0712                     	;# 
  2158  0713                     	;# 
  2159  0714                     	;# 
  2160  0715                     	;# 
  2161  0718                     	;# 
  2162  0718                     	;# 
  2163  0719                     	;# 
  2164  071A                     	;# 
  2165  071A                     	;# 
  2166  071B                     	;# 
  2167  071C                     	;# 
  2168  071D                     	;# 
  2169  0791                     	;# 
  2170  0791                     	;# 
  2171  0792                     	;# 
  2172  0793                     	;# 
  2173  0793                     	;# 
  2174  0794                     	;# 
  2175  0795                     	;# 
  2176  0795                     	;# 
  2177  0796                     	;# 
  2178  0797                     	;# 
  2179  0797                     	;# 
  2180  0798                     	;# 
  2181  0799                     	;# 
  2182  079A                     	;# 
  2183  080C                     	;# 
  2184  080C                     	;# 
  2185  080D                     	;# 
  2186  080E                     	;# 
  2187  080E                     	;# 
  2188  080F                     	;# 
  2189  0810                     	;# 
  2190  0810                     	;# 
  2191  0811                     	;# 
  2192  0812                     	;# 
  2193  0812                     	;# 
  2194  0813                     	;# 
  2195  0814                     	;# 
  2196  0815                     	;# 
  2197  0816                     	;# 
  2198  0817                     	;# 
  2199  0818                     	;# 
  2200  0819                     	;# 
  2201  081A                     	;# 
  2202  081A                     	;# 
  2203  081B                     	;# 
  2204  081C                     	;# 
  2205  081C                     	;# 
  2206  081D                     	;# 
  2207  088C                     	;# 
  2208  088D                     	;# 
  2209  088E                     	;# 
  2210  088F                     	;# 
  2211  088F                     	;# 
  2212  0890                     	;# 
  2213  0891                     	;# 
  2214  0892                     	;# 
  2215  0893                     	;# 
  2216  0893                     	;# 
  2217  0894                     	;# 
  2218  0895                     	;# 
  2219  0896                     	;# 
  2220  0897                     	;# 
  2221  0897                     	;# 
  2222  0898                     	;# 
  2223  0899                     	;# 
  2224  0D8C                     	;# 
  2225  0D8C                     	;# 
  2226  0D8D                     	;# 
  2227  0D8E                     	;# 
  2228  0D8F                     	;# 
  2229  0D8F                     	;# 
  2230  0D90                     	;# 
  2231  0D91                     	;# 
  2232  0D92                     	;# 
  2233  0D92                     	;# 
  2234  0D93                     	;# 
  2235  0D94                     	;# 
  2236  0D95                     	;# 
  2237  0D95                     	;# 
  2238  0D96                     	;# 
  2239  0D97                     	;# 
  2240  0D98                     	;# 
  2241  0D99                     	;# 
  2242  0D9A                     	;# 
  2243  0D9B                     	;# 
  2244  0D9C                     	;# 
  2245  0D9D                     	;# 
  2246  0D9E                     	;# 
  2247  0D9E                     	;# 
  2248  0D9F                     	;# 
  2249  0DA0                     	;# 
  2250  0DA1                     	;# 
  2251  0DA1                     	;# 
  2252  0DA2                     	;# 
  2253  0DA3                     	;# 
  2254  0DA4                     	;# 
  2255  0DA4                     	;# 
  2256  0DA5                     	;# 
  2257  0DA6                     	;# 
  2258  0DA7                     	;# 
  2259  0DA7                     	;# 
  2260  0DA8                     	;# 
  2261  0DA9                     	;# 
  2262  0DAA                     	;# 
  2263  0DAB                     	;# 
  2264  0DAC                     	;# 
  2265  0DAD                     	;# 
  2266  0DAE                     	;# 
  2267  0DAF                     	;# 
  2268  0E0F                     	;# 
  2269  0E10                     	;# 
  2270  0E11                     	;# 
  2271  0E12                     	;# 
  2272  0E13                     	;# 
  2273  0E14                     	;# 
  2274  0E15                     	;# 
  2275  0E16                     	;# 
  2276  0E17                     	;# 
  2277  0E18                     	;# 
  2278  0E19                     	;# 
  2279  0E1A                     	;# 
  2280  0E1B                     	;# 
  2281  0E1C                     	;# 
  2282  0E1D                     	;# 
  2283  0E1E                     	;# 
  2284  0E1F                     	;# 
  2285  0E20                     	;# 
  2286  0E21                     	;# 
  2287  0E22                     	;# 
  2288  0E23                     	;# 
  2289  0E24                     	;# 
  2290  0E25                     	;# 
  2291  0E26                     	;# 
  2292  0E27                     	;# 
  2293  0E28                     	;# 
  2294  0E29                     	;# 
  2295  0E2A                     	;# 
  2296  0E2B                     	;# 
  2297  0E2C                     	;# 
  2298  0E2D                     	;# 
  2299  0E2E                     	;# 
  2300  0E90                     	;# 
  2301  0E91                     	;# 
  2302  0E92                     	;# 
  2303  0E94                     	;# 
  2304  0E95                     	;# 
  2305  0E9C                     	;# 
  2306  0E9D                     	;# 
  2307  0E9E                     	;# 
  2308  0E9F                     	;# 
  2309  0EA0                     	;# 
  2310  0EA1                     	;# 
  2311  0EA2                     	;# 
  2312  0EA3                     	;# 
  2313  0EA4                     	;# 
  2314  0EA5                     	;# 
  2315  0EA6                     	;# 
  2316  0EA7                     	;# 
  2317  0F0F                     	;# 
  2318  0F10                     	;# 
  2319  0F11                     	;# 
  2320  0F12                     	;# 
  2321  0F13                     	;# 
  2322  0F14                     	;# 
  2323  0F15                     	;# 
  2324  0F16                     	;# 
  2325  0F17                     	;# 
  2326  0F18                     	;# 
  2327  0F19                     	;# 
  2328  0F1A                     	;# 
  2329  0F1B                     	;# 
  2330  0F1C                     	;# 
  2331  0F1D                     	;# 
  2332  0F1E                     	;# 
  2333  0F1F                     	;# 
  2334  0F20                     	;# 
  2335  0F21                     	;# 
  2336  0F22                     	;# 
  2337  0F23                     	;# 
  2338  0F24                     	;# 
  2339  0F25                     	;# 
  2340  0F26                     	;# 
  2341  0F27                     	;# 
  2342  0F28                     	;# 
  2343  0F29                     	;# 
  2344  0F2A                     	;# 
  2345  0F2B                     	;# 
  2346  0F2C                     	;# 
  2347  0F2D                     	;# 
  2348  0F2E                     	;# 
  2349  0F2F                     	;# 
  2350  0F30                     	;# 
  2351  0F31                     	;# 
  2352  0F32                     	;# 
  2353  0F33                     	;# 
  2354  0F34                     	;# 
  2355  0F35                     	;# 
  2356  0F36                     	;# 
  2357  0F37                     	;# 
  2358  0FE4                     	;# 
  2359  0FE5                     	;# 
  2360  0FE6                     	;# 
  2361  0FE7                     	;# 
  2362  0FE8                     	;# 
  2363  0FE9                     	;# 
  2364  0FEA                     	;# 
  2365  0FEB                     	;# 
  2366  0FED                     	;# 
  2367  0FEE                     	;# 
  2368  0FEF                     	;# 
  2369  0000                     	;# 
  2370  0001                     	;# 
  2371  0002                     	;# 
  2372  0003                     	;# 
  2373  0004                     	;# 
  2374  0005                     	;# 
  2375  0006                     	;# 
  2376  0007                     	;# 
  2377  0008                     	;# 
  2378  0009                     	;# 
  2379  000A                     	;# 
  2380  000B                     	;# 
  2381  000C                     	;# 
  2382  000D                     	;# 
  2383  000E                     	;# 
  2384  0010                     	;# 
  2385  0011                     	;# 
  2386  0012                     	;# 
  2387  0013                     	;# 
  2388  0014                     	;# 
  2389  0015                     	;# 
  2390  0016                     	;# 
  2391  0016                     	;# 
  2392  0017                     	;# 
  2393  0018                     	;# 
  2394  0019                     	;# 
  2395  001A                     	;# 
  2396  001A                     	;# 
  2397  001B                     	;# 
  2398  001B                     	;# 
  2399  001C                     	;# 
  2400  001D                     	;# 
  2401  001E                     	;# 
  2402  001F                     	;# 
  2403  008C                     	;# 
  2404  008D                     	;# 
  2405  008E                     	;# 
  2406  0090                     	;# 
  2407  0091                     	;# 
  2408  0092                     	;# 
  2409  0093                     	;# 
  2410  0094                     	;# 
  2411  0095                     	;# 
  2412  0096                     	;# 
  2413  0098                     	;# 
  2414  0099                     	;# 
  2415  009A                     	;# 
  2416  009B                     	;# 
  2417  009B                     	;# 
  2418  009C                     	;# 
  2419  009D                     	;# 
  2420  009E                     	;# 
  2421  009F                     	;# 
  2422  010C                     	;# 
  2423  010D                     	;# 
  2424  010E                     	;# 
  2425  0111                     	;# 
  2426  0112                     	;# 
  2427  0113                     	;# 
  2428  0114                     	;# 
  2429  0115                     	;# 
  2430  0116                     	;# 
  2431  0117                     	;# 
  2432  0118                     	;# 
  2433  0119                     	;# 
  2434  011C                     	;# 
  2435  018C                     	;# 
  2436  018D                     	;# 
  2437  018E                     	;# 
  2438  0191                     	;# 
  2439  0191                     	;# 
  2440  0192                     	;# 
  2441  0193                     	;# 
  2442  0193                     	;# 
  2443  0194                     	;# 
  2444  0195                     	;# 
  2445  0196                     	;# 
  2446  0197                     	;# 
  2447  0199                     	;# 
  2448  0199                     	;# 
  2449  0199                     	;# 
  2450  019A                     	;# 
  2451  019A                     	;# 
  2452  019A                     	;# 
  2453  019B                     	;# 
  2454  019B                     	;# 
  2455  019B                     	;# 
  2456  019B                     	;# 
  2457  019B                     	;# 
  2458  019C                     	;# 
  2459  019C                     	;# 
  2460  019C                     	;# 
  2461  019D                     	;# 
  2462  019D                     	;# 
  2463  019D                     	;# 
  2464  019E                     	;# 
  2465  019E                     	;# 
  2466  019E                     	;# 
  2467  019F                     	;# 
  2468  019F                     	;# 
  2469  019F                     	;# 
  2470  019F                     	;# 
  2471  019F                     	;# 
  2472  020C                     	;# 
  2473  020D                     	;# 
  2474  020E                     	;# 
  2475  0211                     	;# 
  2476  0211                     	;# 
  2477  0212                     	;# 
  2478  0212                     	;# 
  2479  0213                     	;# 
  2480  0213                     	;# 
  2481  0214                     	;# 
  2482  0214                     	;# 
  2483  0215                     	;# 
  2484  0215                     	;# 
  2485  0215                     	;# 
  2486  0215                     	;# 
  2487  0216                     	;# 
  2488  0216                     	;# 
  2489  0217                     	;# 
  2490  0217                     	;# 
  2491  028C                     	;# 
  2492  028D                     	;# 
  2493  028E                     	;# 
  2494  0291                     	;# 
  2495  0291                     	;# 
  2496  0292                     	;# 
  2497  0293                     	;# 
  2498  0294                     	;# 
  2499  0298                     	;# 
  2500  0298                     	;# 
  2501  0299                     	;# 
  2502  029A                     	;# 
  2503  029B                     	;# 
  2504  029E                     	;# 
  2505  030C                     	;# 
  2506  030D                     	;# 
  2507  030E                     	;# 
  2508  038C                     	;# 
  2509  038D                     	;# 
  2510  038E                     	;# 
  2511  0391                     	;# 
  2512  0392                     	;# 
  2513  0393                     	;# 
  2514  0394                     	;# 
  2515  0395                     	;# 
  2516  0396                     	;# 
  2517  0397                     	;# 
  2518  0398                     	;# 
  2519  0399                     	;# 
  2520  040E                     	;# 
  2521  0413                     	;# 
  2522  0413                     	;# 
  2523  0414                     	;# 
  2524  0414                     	;# 
  2525  0415                     	;# 
  2526  0416                     	;# 
  2527  0417                     	;# 
  2528  0418                     	;# 
  2529  041A                     	;# 
  2530  041A                     	;# 
  2531  041B                     	;# 
  2532  041B                     	;# 
  2533  041C                     	;# 
  2534  041D                     	;# 
  2535  041E                     	;# 
  2536  041F                     	;# 
  2537  0493                     	;# 
  2538  0494                     	;# 
  2539  0495                     	;# 
  2540  0496                     	;# 
  2541  049A                     	;# 
  2542  049B                     	;# 
  2543  049C                     	;# 
  2544  049D                     	;# 
  2545  058C                     	;# 
  2546  058C                     	;# 
  2547  058D                     	;# 
  2548  058E                     	;# 
  2549  058E                     	;# 
  2550  058F                     	;# 
  2551  0590                     	;# 
  2552  0590                     	;# 
  2553  0591                     	;# 
  2554  0592                     	;# 
  2555  0592                     	;# 
  2556  0593                     	;# 
  2557  0594                     	;# 
  2558  0594                     	;# 
  2559  0595                     	;# 
  2560  0596                     	;# 
  2561  0596                     	;# 
  2562  0597                     	;# 
  2563  0598                     	;# 
  2564  0599                     	;# 
  2565  059A                     	;# 
  2566  059B                     	;# 
  2567  059B                     	;# 
  2568  059C                     	;# 
  2569  059D                     	;# 
  2570  060C                     	;# 
  2571  060C                     	;# 
  2572  060D                     	;# 
  2573  060E                     	;# 
  2574  060F                     	;# 
  2575  060F                     	;# 
  2576  0610                     	;# 
  2577  0611                     	;# 
  2578  0612                     	;# 
  2579  0613                     	;# 
  2580  0614                     	;# 
  2581  0617                     	;# 
  2582  0618                     	;# 
  2583  0619                     	;# 
  2584  061A                     	;# 
  2585  061B                     	;# 
  2586  061C                     	;# 
  2587  0691                     	;# 
  2588  0692                     	;# 
  2589  0693                     	;# 
  2590  0694                     	;# 
  2591  0695                     	;# 
  2592  0696                     	;# 
  2593  0697                     	;# 
  2594  0699                     	;# 
  2595  069A                     	;# 
  2596  0711                     	;# 
  2597  0712                     	;# 
  2598  0713                     	;# 
  2599  0714                     	;# 
  2600  0715                     	;# 
  2601  0718                     	;# 
  2602  0718                     	;# 
  2603  0719                     	;# 
  2604  071A                     	;# 
  2605  071A                     	;# 
  2606  071B                     	;# 
  2607  071C                     	;# 
  2608  071D                     	;# 
  2609  0791                     	;# 
  2610  0791                     	;# 
  2611  0792                     	;# 
  2612  0793                     	;# 
  2613  0793                     	;# 
  2614  0794                     	;# 
  2615  0795                     	;# 
  2616  0795                     	;# 
  2617  0796                     	;# 
  2618  0797                     	;# 
  2619  0797                     	;# 
  2620  0798                     	;# 
  2621  0799                     	;# 
  2622  079A                     	;# 
  2623  080C                     	;# 
  2624  080C                     	;# 
  2625  080D                     	;# 
  2626  080E                     	;# 
  2627  080E                     	;# 
  2628  080F                     	;# 
  2629  0810                     	;# 
  2630  0810                     	;# 
  2631  0811                     	;# 
  2632  0812                     	;# 
  2633  0812                     	;# 
  2634  0813                     	;# 
  2635  0814                     	;# 
  2636  0815                     	;# 
  2637  0816                     	;# 
  2638  0817                     	;# 
  2639  0818                     	;# 
  2640  0819                     	;# 
  2641  081A                     	;# 
  2642  081A                     	;# 
  2643  081B                     	;# 
  2644  081C                     	;# 
  2645  081C                     	;# 
  2646  081D                     	;# 
  2647  088C                     	;# 
  2648  088D                     	;# 
  2649  088E                     	;# 
  2650  088F                     	;# 
  2651  088F                     	;# 
  2652  0890                     	;# 
  2653  0891                     	;# 
  2654  0892                     	;# 
  2655  0893                     	;# 
  2656  0893                     	;# 
  2657  0894                     	;# 
  2658  0895                     	;# 
  2659  0896                     	;# 
  2660  0897                     	;# 
  2661  0897                     	;# 
  2662  0898                     	;# 
  2663  0899                     	;# 
  2664  0D8C                     	;# 
  2665  0D8C                     	;# 
  2666  0D8D                     	;# 
  2667  0D8E                     	;# 
  2668  0D8F                     	;# 
  2669  0D8F                     	;# 
  2670  0D90                     	;# 
  2671  0D91                     	;# 
  2672  0D92                     	;# 
  2673  0D92                     	;# 
  2674  0D93                     	;# 
  2675  0D94                     	;# 
  2676  0D95                     	;# 
  2677  0D95                     	;# 
  2678  0D96                     	;# 
  2679  0D97                     	;# 
  2680  0D98                     	;# 
  2681  0D99                     	;# 
  2682  0D9A                     	;# 
  2683  0D9B                     	;# 
  2684  0D9C                     	;# 
  2685  0D9D                     	;# 
  2686  0D9E                     	;# 
  2687  0D9E                     	;# 
  2688  0D9F                     	;# 
  2689  0DA0                     	;# 
  2690  0DA1                     	;# 
  2691  0DA1                     	;# 
  2692  0DA2                     	;# 
  2693  0DA3                     	;# 
  2694  0DA4                     	;# 
  2695  0DA4                     	;# 
  2696  0DA5                     	;# 
  2697  0DA6                     	;# 
  2698  0DA7                     	;# 
  2699  0DA7                     	;# 
  2700  0DA8                     	;# 
  2701  0DA9                     	;# 
  2702  0DAA                     	;# 
  2703  0DAB                     	;# 
  2704  0DAC                     	;# 
  2705  0DAD                     	;# 
  2706  0DAE                     	;# 
  2707  0DAF                     	;# 
  2708  0E0F                     	;# 
  2709  0E10                     	;# 
  2710  0E11                     	;# 
  2711  0E12                     	;# 
  2712  0E13                     	;# 
  2713  0E14                     	;# 
  2714  0E15                     	;# 
  2715  0E16                     	;# 
  2716  0E17                     	;# 
  2717  0E18                     	;# 
  2718  0E19                     	;# 
  2719  0E1A                     	;# 
  2720  0E1B                     	;# 
  2721  0E1C                     	;# 
  2722  0E1D                     	;# 
  2723  0E1E                     	;# 
  2724  0E1F                     	;# 
  2725  0E20                     	;# 
  2726  0E21                     	;# 
  2727  0E22                     	;# 
  2728  0E23                     	;# 
  2729  0E24                     	;# 
  2730  0E25                     	;# 
  2731  0E26                     	;# 
  2732  0E27                     	;# 
  2733  0E28                     	;# 
  2734  0E29                     	;# 
  2735  0E2A                     	;# 
  2736  0E2B                     	;# 
  2737  0E2C                     	;# 
  2738  0E2D                     	;# 
  2739  0E2E                     	;# 
  2740  0E90                     	;# 
  2741  0E91                     	;# 
  2742  0E92                     	;# 
  2743  0E94                     	;# 
  2744  0E95                     	;# 
  2745  0E9C                     	;# 
  2746  0E9D                     	;# 
  2747  0E9E                     	;# 
  2748  0E9F                     	;# 
  2749  0EA0                     	;# 
  2750  0EA1                     	;# 
  2751  0EA2                     	;# 
  2752  0EA3                     	;# 
  2753  0EA4                     	;# 
  2754  0EA5                     	;# 
  2755  0EA6                     	;# 
  2756  0EA7                     	;# 
  2757  0F0F                     	;# 
  2758  0F10                     	;# 
  2759  0F11                     	;# 
  2760  0F12                     	;# 
  2761  0F13                     	;# 
  2762  0F14                     	;# 
  2763  0F15                     	;# 
  2764  0F16                     	;# 
  2765  0F17                     	;# 
  2766  0F18                     	;# 
  2767  0F19                     	;# 
  2768  0F1A                     	;# 
  2769  0F1B                     	;# 
  2770  0F1C                     	;# 
  2771  0F1D                     	;# 
  2772  0F1E                     	;# 
  2773  0F1F                     	;# 
  2774  0F20                     	;# 
  2775  0F21                     	;# 
  2776  0F22                     	;# 
  2777  0F23                     	;# 
  2778  0F24                     	;# 
  2779  0F25                     	;# 
  2780  0F26                     	;# 
  2781  0F27                     	;# 
  2782  0F28                     	;# 
  2783  0F29                     	;# 
  2784  0F2A                     	;# 
  2785  0F2B                     	;# 
  2786  0F2C                     	;# 
  2787  0F2D                     	;# 
  2788  0F2E                     	;# 
  2789  0F2F                     	;# 
  2790  0F30                     	;# 
  2791  0F31                     	;# 
  2792  0F32                     	;# 
  2793  0F33                     	;# 
  2794  0F34                     	;# 
  2795  0F35                     	;# 
  2796  0F36                     	;# 
  2797  0F37                     	;# 
  2798  0FE4                     	;# 
  2799  0FE5                     	;# 
  2800  0FE6                     	;# 
  2801  0FE7                     	;# 
  2802  0FE8                     	;# 
  2803  0FE9                     	;# 
  2804  0FEA                     	;# 
  2805  0FEB                     	;# 
  2806  0FED                     	;# 
  2807  0FEE                     	;# 
  2808  0FEF                     	;# 
  2809                           
  2810                           	psect	idataBANK0
  2811  0DD7                     __pidataBANK0:	
  2812                           
  2813                           ;initializer for _randx
  2814  0DD7  3401               	retlw	1
  2815  0DD8  3400               	retlw	0
  2816  0DD9  3400               	retlw	0
  2817  0DDA  3400               	retlw	0
  2818                           
  2819                           ;initializer for _fall
  2820  0DDB  3401               	retlw	1
  2821                           
  2822                           	psect	idataBANK2
  2823  0732                     __pidataBANK2:	
  2824                           
  2825                           ;initializer for _fsmStateTable
  2826  0732  3472               	retlw	low _do_I2C_IDLE
  2827  0733  340E               	retlw	high _do_I2C_IDLE
  2828  0734  34F3               	retlw	low _do_I2C_SEND_ADR_READ
  2829  0735  340E               	retlw	high _do_I2C_SEND_ADR_READ
  2830  0736  34AE               	retlw	low _do_I2C_SEND_ADR_WRITE
  2831  0737  340E               	retlw	high _do_I2C_SEND_ADR_WRITE
  2832  0738  3401               	retlw	low _do_I2C_TX
  2833  0739  3403               	retlw	high _do_I2C_TX
  2834  073A  347A               	retlw	low _do_I2C_RX
  2835  073B  3404               	retlw	high _do_I2C_RX
  2836  073C  3485               	retlw	low _do_I2C_RCEN
  2837  073D  340E               	retlw	high _do_I2C_RCEN
  2838  073E  34D5               	retlw	low _do_I2C_TX_EMPTY
  2839  073F  3405               	retlw	high _do_I2C_TX_EMPTY
  2840  0740  343A               	retlw	low _do_I2C_SEND_RESTART_READ
  2841  0741  340E               	retlw	high _do_I2C_SEND_RESTART_READ
  2842  0742  3442               	retlw	low _do_I2C_SEND_RESTART_WRITE
  2843  0743  340E               	retlw	high _do_I2C_SEND_RESTART_WRITE
  2844  0744  344A               	retlw	low _do_I2C_SEND_RESTART
  2845  0745  340E               	retlw	high _do_I2C_SEND_RESTART
  2846  0746  3452               	retlw	low _do_I2C_SEND_STOP
  2847  0747  340E               	retlw	high _do_I2C_SEND_STOP
  2848  0748  345A               	retlw	low _do_I2C_DO_ACK
  2849  0749  340E               	retlw	high _do_I2C_DO_ACK
  2850  074A  3462               	retlw	low _do_I2C_DO_NACK_STOP
  2851  074B  340E               	retlw	high _do_I2C_DO_NACK_STOP
  2852  074C  346A               	retlw	low _do_I2C_DO_NACK_RESTART
  2853  074D  340E               	retlw	high _do_I2C_DO_NACK_RESTART
  2854  074E  34A3               	retlw	low _do_I2C_RESET
  2855  074F  340E               	retlw	high _do_I2C_RESET
  2856  0750  3403               	retlw	low _do_I2C_DO_ADDRESS_NACK
  2857  0751  3406               	retlw	high _do_I2C_DO_ADDRESS_NACK
  2858                           
  2859                           	psect	nvBANK0
  2860  0065                     __pnvBANK0:	
  2861  0065                     _IOCCF4_InterruptHandler:	
  2862  0065                     	ds	2
  2863  0011                     _PIR2bits	set	17
  2864  0010                     _PIR1bits	set	16
  2865  000B                     _INTCONbits	set	11
  2866  0091                     _PIE2bits	set	145
  2867  0090                     _PIE1bits	set	144
  2868  0098                     _OSCTUNE	set	152
  2869  0099                     _OSCCON	set	153
  2870  0095                     _OPTION_REGbits	set	149
  2871  008E                     _TRISC	set	142
  2872  008D                     _TRISB	set	141
  2873  008C                     _TRISA	set	140
  2874  04D6                     _PLLR	set	1238
  2875  0116                     _BORCON	set	278
  2876  010E                     _LATC	set	270
  2877  010D                     _LATB	set	269
  2878  010C                     _LATA	set	268
  2879  018C                     _ANSELA	set	396
  2880  018D                     _ANSELB	set	397
  2881  018E                     _ANSELC	set	398
  2882  0214                     _SSP1STATbits	set	532
  2883  0213                     _SSP1MSK	set	531
  2884  0211                     _SSP1BUF	set	529
  2885  0216                     _SSP1CON2bits	set	534
  2886  0212                     _SSP1ADD	set	530
  2887  0216                     _SSP1CON2	set	534
  2888  0215                     _SSP1CON1	set	533
  2889  0214                     _SSP1STAT	set	532
  2890  0215                     _SSP1CON1bits	set	533
  2891  020E                     _WPUC	set	526
  2892  020C                     _WPUA	set	524
  2893  020D                     _WPUB	set	525
  2894  028E                     _ODCONC	set	654
  2895  028D                     _ODCONB	set	653
  2896  028C                     _ODCONA	set	652
  2897  0397                     _IOCCPbits	set	919
  2898  0398                     _IOCCNbits	set	920
  2899  0399                     _IOCCFbits	set	921
  2900  0E21                     _SSPDATPPS	set	3617
  2901  0E20                     _SSPCLKPPS	set	3616
  2902  0E9C                     _RB4PPS	set	3740
  2903  0E9E                     _RB6PPS	set	3742
  2904                           
  2905                           ; #config settings
  2906  0000                     
  2907                           	psect	cinit
  2908  0030                     start_initialization:	
  2909  0030                     __initialization:	
  2910                           
  2911                           ; Initialize objects allocated to BANK0
  2912  0030  30D7               	movlw	low __pidataBANK0
  2913  0031  0084               	movwf	4
  2914  0032  308D               	movlw	(high __pidataBANK0)| (0+128)
  2915  0033  0085               	movwf	5
  2916  0034  3060               	movlw	low __pdataBANK0
  2917  0035  0086               	movwf	6
  2918  0036  3000               	movlw	high __pdataBANK0
  2919  0037  0087               	movwf	7
  2920  0038  3005               	movlw	5
  2921  0039  318E  261E  3180   	fcall	init_ram
  2922                           
  2923                           ; Initialize objects allocated to BANK2
  2924  003C  3032               	movlw	low __pidataBANK2
  2925  003D  0084               	movwf	4
  2926  003E  3087               	movlw	(high __pidataBANK2)| (0+128)
  2927  003F  0085               	movwf	5
  2928  0040  3020               	movlw	low __pdataBANK2
  2929  0041  0086               	movwf	6
  2930  0042  3001               	movlw	high __pdataBANK2
  2931  0043  0087               	movwf	7
  2932  0044  3020               	movlw	32
  2933  0045  318E  261E  3180   	fcall	init_ram
  2934                           
  2935                           ; Clear objects allocated to BANK0
  2936  0048  3047               	movlw	low __pbssBANK0
  2937  0049  0084               	movwf	4
  2938  004A  3000               	movlw	high __pbssBANK0
  2939  004B  0085               	movwf	5
  2940  004C  3019               	movlw	25
  2941  004D  318E  2618  3180   	fcall	clear_ram0
  2942                           
  2943                           ; Clear objects allocated to BANK1
  2944  0050  30A0               	movlw	low __pbssBANK1
  2945  0051  0084               	movwf	4
  2946  0052  3000               	movlw	high __pbssBANK1
  2947  0053  0085               	movwf	5
  2948  0054  303E               	movlw	62
  2949  0055  318E  2618         	fcall	clear_ram0
  2950  0057                     end_of_initialization:	
  2951                           ;End of C runtime variable initialization code
  2952                           
  2953  0057                     __end_of__initialization:	
  2954  0057  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2955  0058  0020               	movlb	0
  2956  0059  3181  2992         	ljmp	_main	;jump to C main() function
  2957                           
  2958                           	psect	bssBANK0
  2959  0047                     __pbssBANK0:	
  2960  0047                     _walls:	
  2961  0047                     	ds	8
  2962  004F                     _shiftCounter:	
  2963  004F                     	ds	2
  2964  0051                     _hiscore:	
  2965  0051                     	ds	2
  2966  0053                     _score:	
  2967  0053                     	ds	2
  2968  0055                     _i2c_driver_i2cISR:	
  2969  0055                     	ds	2
  2970  0057                     _i2c_driver_busCollisionISR:	
  2971  0057                     	ds	2
  2972  0059                     _topHalf:	
  2973  0059                     	ds	1
  2974  005A                     _wallHeight:	
  2975  005A                     	ds	1
  2976  005B                     _i:	
  2977  005B                     	ds	1
  2978  005C                     _gravityCounter:	
  2979  005C                     	ds	1
  2980  005D                     _start:	
  2981  005D                     	ds	1
  2982  005E                     _elevation:	
  2983  005E                     	ds	1
  2984  005F                     _createWall:	
  2985  005F                     	ds	1
  2986                           
  2987                           	psect	dataBANK0
  2988  0060                     __pdataBANK0:	
  2989  0060                     _randx:	
  2990  0060                     	ds	4
  2991  0064                     _fall:	
  2992  0064                     	ds	1
  2993                           
  2994                           	psect	bssBANK1
  2995  00A0                     __pbssBANK1:	
  2996  00A0                     _i2c_status:	
  2997  00A0                     	ds	29
  2998  00BD                     _pixelbuffer:	
  2999  00BD                     	ds	16
  3000  00CD                     _writebuffer:	
  3001  00CD                     	ds	17
  3002                           
  3003                           	psect	dataBANK2
  3004  0120                     __pdataBANK2:	
  3005  0120                     _fsmStateTable:	
  3006  0120                     	ds	32
  3007                           
  3008                           	psect	inittext
  3009  0E1E                     init_ram:	
  3010  0E1E  00FE               	movwf	126
  3011  0E1F                     initloop:	
  3012  0E1F  0012               	moviw fsr0++
  3013  0E20  001E               	movwi fsr1++
  3014  0E21  0BFE               	decfsz	126,f
  3015  0E22  2E1F               	goto	initloop
  3016  0E23  3400               	retlw	0
  3017                           
  3018                           	psect	clrtext
  3019  0E18                     clear_ram0:	
  3020                           ;	Called with FSR0 containing the base address, and
  3021                           ;	WREG with the size to clear
  3022                           
  3023  0E18  0064               	clrwdt	;clear the watchdog before getting into this loop
  3024  0E19                     clrloop0:	
  3025  0E19  0180               	clrf	0	;clear RAM location pointed to by FSR
  3026  0E1A  3101               	addfsr 0,1
  3027  0E1B  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  3028  0E1C  2E19               	goto	clrloop0	;have we reached the end yet?
  3029  0E1D  3400               	retlw	0	;all done for this memory range, return
  3030                           
  3031                           	psect	cstackCOMMON
  3032  0070                     __pcstackCOMMON:	
  3033  0070                     ?_mssp_IRQisEnabled:	
  3034  0070                     ?_i2c_driver_open:	
  3035                           ; 1 bit 
  3036                           
  3037  0070                     ?_i2c_driver_isNACK:	
  3038                           ; 1 bit 
  3039                           
  3040  0070                     ?i1_i2c_driver_isNACK:	
  3041                           ; 1 bit 
  3042                           
  3043  0070                     ?_IOCCF4_DefaultInterruptHandler:	
  3044                           ; 1 bit 
  3045                           
  3046  0070                     ??_IOCCF4_DefaultInterruptHandler:	
  3047                           ; 1 bytes @ 0x0
  3048                           
  3049  0070                     ?_IOCCF4_ISR:	
  3050                           ; 1 bytes @ 0x0
  3051                           
  3052  0070                     ?_OSCILLATOR_Initialize:	
  3053                           ; 1 bytes @ 0x0
  3054                           
  3055  0070                     ?_i2c_open:	
  3056                           ; 1 bytes @ 0x0
  3057                           
  3058  0070                     ?_i2c_masterWrite:	
  3059                           ; 1 bytes @ 0x0
  3060                           
  3061  0070                     ?_i2c_close:	
  3062                           ; 1 bytes @ 0x0
  3063                           
  3064  0070                     ?_i2c_busCollisionISR:	
  3065                           ; 1 bytes @ 0x0
  3066                           
  3067  0070                     ??_i2c_busCollisionISR:	
  3068                           ; 1 bytes @ 0x0
  3069                           
  3070  0070                     ?_i2c_ISR:	
  3071                           ; 1 bytes @ 0x0
  3072                           
  3073  0070                     ?_i2c_poller:	
  3074                           ; 1 bytes @ 0x0
  3075                           
  3076  0070                     ?_PIN_MANAGER_Initialize:	
  3077                           ; 1 bytes @ 0x0
  3078                           
  3079  0070                     ?_PIN_MANAGER_IOC:	
  3080                           ; 1 bytes @ 0x0
  3081                           
  3082  0070                     ?_SYSTEM_Initialize:	
  3083                           ; 1 bytes @ 0x0
  3084                           
  3085  0070                     ?_writeDisplay:	
  3086                           ; 1 bytes @ 0x0
  3087                           
  3088  0070                     ?_clearPixels:	
  3089                           ; 1 bytes @ 0x0
  3090                           
  3091  0070                     ?_initializeDisplay:	
  3092                           ; 1 bytes @ 0x0
  3093                           
  3094  0070                     ?_reverse:	
  3095                           ; 1 bytes @ 0x0
  3096                           
  3097  0070                     ?_drawWalls:	
  3098                           ; 1 bytes @ 0x0
  3099                           
  3100  0070                     ?_shiftWalls:	
  3101                           ; 1 bytes @ 0x0
  3102                           
  3103  0070                     ?_buttonInterrupt:	
  3104                           ; 1 bytes @ 0x0
  3105                           
  3106  0070                     ??_buttonInterrupt:	
  3107                           ; 1 bytes @ 0x0
  3108                           
  3109  0070                     ?_endGame:	
  3110                           ; 1 bytes @ 0x0
  3111                           
  3112  0070                     ?_main:	
  3113                           ; 1 bytes @ 0x0
  3114                           
  3115  0070                     ?_mssp_disableIRQ:	
  3116                           ; 1 bytes @ 0x0
  3117                           
  3118  0070                     ?_mssp_clearIRQ:	
  3119                           ; 1 bytes @ 0x0
  3120                           
  3121  0070                     ?_mssp_setIRQ:	
  3122                           ; 1 bytes @ 0x0
  3123                           
  3124  0070                     ?_mssp_waitForEvent:	
  3125                           ; 1 bytes @ 0x0
  3126                           
  3127  0070                     ?_i2c_driver_resetBus:	
  3128                           ; 1 bytes @ 0x0
  3129                           
  3130  0070                     ?_i2c_driver_start:	
  3131                           ; 1 bytes @ 0x0
  3132                           
  3133  0070                     ?_i2c_driver_restart:	
  3134                           ; 1 bytes @ 0x0
  3135                           
  3136  0070                     ?_i2c_driver_stop:	
  3137                           ; 1 bytes @ 0x0
  3138                           
  3139  0070                     ?_i2c_driver_startRX:	
  3140                           ; 1 bytes @ 0x0
  3141                           
  3142  0070                     ?_i2c_driver_getRXData:	
  3143                           ; 1 bytes @ 0x0
  3144                           
  3145  0070                     ?_i2c_driver_TXData:	
  3146                           ; 1 bytes @ 0x0
  3147                           
  3148  0070                     ?_i2c_driver_sendACK:	
  3149                           ; 1 bytes @ 0x0
  3150                           
  3151  0070                     ?_i2c_driver_sendNACK:	
  3152                           ; 1 bytes @ 0x0
  3153                           
  3154  0070                     ?_i2c_driver_clearBusCollision:	
  3155                           ; 1 bytes @ 0x0
  3156                           
  3157  0070                     ??_i2c_driver_clearBusCollision:	
  3158                           ; 1 bytes @ 0x0
  3159                           
  3160  0070                     ?_INTERRUPT_InterruptManager:	
  3161                           ; 1 bytes @ 0x0
  3162                           
  3163  0070                     ?_i2c_masterOperation:	
  3164                           ; 1 bytes @ 0x0
  3165                           
  3166  0070                     ?_do_I2C_RESET:	
  3167                           ; 1 bytes @ 0x0
  3168                           
  3169  0070                     ?_do_I2C_IDLE:	
  3170                           ; 1 bytes @ 0x0
  3171                           
  3172  0070                     ?_do_I2C_SEND_RESTART_READ:	
  3173                           ; 1 bytes @ 0x0
  3174                           
  3175  0070                     ?_do_I2C_SEND_RESTART_WRITE:	
  3176                           ; 1 bytes @ 0x0
  3177                           
  3178  0070                     ?_do_I2C_SEND_RESTART:	
  3179                           ; 1 bytes @ 0x0
  3180                           
  3181  0070                     ?_do_I2C_SEND_STOP:	
  3182                           ; 1 bytes @ 0x0
  3183                           
  3184  0070                     ?_do_I2C_SEND_ADR_READ:	
  3185                           ; 1 bytes @ 0x0
  3186                           
  3187  0070                     ?_do_I2C_SEND_ADR_WRITE:	
  3188                           ; 1 bytes @ 0x0
  3189                           
  3190  0070                     ?_do_I2C_RCEN:	
  3191                           ; 1 bytes @ 0x0
  3192                           
  3193  0070                     ?_do_I2C_DO_ACK:	
  3194                           ; 1 bytes @ 0x0
  3195                           
  3196  0070                     ?_do_I2C_DO_NACK_STOP:	
  3197                           ; 1 bytes @ 0x0
  3198                           
  3199  0070                     ?_do_I2C_DO_NACK_RESTART:	
  3200                           ; 1 bytes @ 0x0
  3201                           
  3202  0070                     ?_do_I2C_DO_ADDRESS_NACK:	
  3203                           ; 1 bytes @ 0x0
  3204                           
  3205  0070                     ?_do_I2C_TX:	
  3206                           ; 1 bytes @ 0x0
  3207                           
  3208  0070                     ?_do_I2C_RX:	
  3209                           ; 1 bytes @ 0x0
  3210                           
  3211  0070                     ?_do_I2C_TX_EMPTY:	
  3212                           ; 1 bytes @ 0x0
  3213                           
  3214  0070                     ?i1_mssp_clearIRQ:	
  3215                           ; 1 bytes @ 0x0
  3216                           
  3217  0070                     ??i1_mssp_clearIRQ:	
  3218                           ; 1 bytes @ 0x0
  3219                           
  3220  0070                     ?i1_mssp_setIRQ:	
  3221                           ; 1 bytes @ 0x0
  3222                           
  3223  0070                     ??i1_mssp_setIRQ:	
  3224                           ; 1 bytes @ 0x0
  3225                           
  3226  0070                     ?i1_i2c_driver_resetBus:	
  3227                           ; 1 bytes @ 0x0
  3228                           
  3229  0070                     ??i1_i2c_driver_resetBus:	
  3230                           ; 1 bytes @ 0x0
  3231                           
  3232  0070                     ?i1_i2c_driver_restart:	
  3233                           ; 1 bytes @ 0x0
  3234                           
  3235  0070                     ??i1_i2c_driver_restart:	
  3236                           ; 1 bytes @ 0x0
  3237                           
  3238  0070                     ?i1_i2c_driver_stop:	
  3239                           ; 1 bytes @ 0x0
  3240                           
  3241  0070                     ??i1_i2c_driver_stop:	
  3242                           ; 1 bytes @ 0x0
  3243                           
  3244  0070                     ??i1_i2c_driver_isNACK:	
  3245                           ; 1 bytes @ 0x0
  3246                           
  3247  0070                     ?i1_i2c_driver_startRX:	
  3248                           ; 1 bytes @ 0x0
  3249                           
  3250  0070                     ??i1_i2c_driver_startRX:	
  3251                           ; 1 bytes @ 0x0
  3252                           
  3253  0070                     ?i1_i2c_driver_getRXData:	
  3254                           ; 1 bytes @ 0x0
  3255                           
  3256  0070                     ??i1_i2c_driver_getRXData:	
  3257                           ; 1 bytes @ 0x0
  3258                           
  3259  0070                     ?i1_i2c_driver_TXData:	
  3260                           ; 1 bytes @ 0x0
  3261                           
  3262  0070                     ??i1_i2c_driver_TXData:	
  3263                           ; 1 bytes @ 0x0
  3264                           
  3265  0070                     ?i1_i2c_driver_sendACK:	
  3266                           ; 1 bytes @ 0x0
  3267                           
  3268  0070                     ??i1_i2c_driver_sendACK:	
  3269                           ; 1 bytes @ 0x0
  3270                           
  3271  0070                     ?i1_i2c_driver_sendNACK:	
  3272                           ; 1 bytes @ 0x0
  3273                           
  3274  0070                     ??i1_i2c_driver_sendNACK:	
  3275                           ; 1 bytes @ 0x0
  3276                           
  3277  0070                     ?i1_i2c_setBuffer:	
  3278                           ; 1 bytes @ 0x0
  3279                           
  3280  0070                     ?i1_do_I2C_RESET:	
  3281                           ; 1 bytes @ 0x0
  3282                           
  3283  0070                     ??i1_do_I2C_RESET:	
  3284                           ; 1 bytes @ 0x0
  3285                           
  3286  0070                     ?i1_do_I2C_IDLE:	
  3287                           ; 1 bytes @ 0x0
  3288                           
  3289  0070                     ??i1_do_I2C_IDLE:	
  3290                           ; 1 bytes @ 0x0
  3291                           
  3292  0070                     ?i1_do_I2C_SEND_RESTART_READ:	
  3293                           ; 1 bytes @ 0x0
  3294                           
  3295  0070                     ??i1_do_I2C_SEND_RESTART_READ:	
  3296                           ; 1 bytes @ 0x0
  3297                           
  3298  0070                     ?i1_do_I2C_SEND_RESTART_WRITE:	
  3299                           ; 1 bytes @ 0x0
  3300                           
  3301  0070                     ??i1_do_I2C_SEND_RESTART_WRITE:	
  3302                           ; 1 bytes @ 0x0
  3303                           
  3304  0070                     ?i1_do_I2C_SEND_RESTART:	
  3305                           ; 1 bytes @ 0x0
  3306                           
  3307  0070                     ??i1_do_I2C_SEND_RESTART:	
  3308                           ; 1 bytes @ 0x0
  3309                           
  3310  0070                     ?i1_do_I2C_SEND_STOP:	
  3311                           ; 1 bytes @ 0x0
  3312                           
  3313  0070                     ??i1_do_I2C_SEND_STOP:	
  3314                           ; 1 bytes @ 0x0
  3315                           
  3316  0070                     ?i1_do_I2C_SEND_ADR_READ:	
  3317                           ; 1 bytes @ 0x0
  3318                           
  3319  0070                     ?i1_do_I2C_SEND_ADR_WRITE:	
  3320                           ; 1 bytes @ 0x0
  3321                           
  3322  0070                     ?i1_do_I2C_RCEN:	
  3323                           ; 1 bytes @ 0x0
  3324                           
  3325  0070                     ??i1_do_I2C_RCEN:	
  3326                           ; 1 bytes @ 0x0
  3327                           
  3328  0070                     ?i1_do_I2C_DO_ACK:	
  3329                           ; 1 bytes @ 0x0
  3330                           
  3331  0070                     ??i1_do_I2C_DO_ACK:	
  3332                           ; 1 bytes @ 0x0
  3333                           
  3334  0070                     ?i1_do_I2C_DO_NACK_STOP:	
  3335                           ; 1 bytes @ 0x0
  3336                           
  3337  0070                     ??i1_do_I2C_DO_NACK_STOP:	
  3338                           ; 1 bytes @ 0x0
  3339                           
  3340  0070                     ?i1_do_I2C_DO_NACK_RESTART:	
  3341                           ; 1 bytes @ 0x0
  3342                           
  3343  0070                     ??i1_do_I2C_DO_NACK_RESTART:	
  3344                           ; 1 bytes @ 0x0
  3345                           
  3346  0070                     ?i1_do_I2C_DO_ADDRESS_NACK:	
  3347                           ; 1 bytes @ 0x0
  3348                           
  3349  0070                     ?i1_do_I2C_TX:	
  3350                           ; 1 bytes @ 0x0
  3351                           
  3352  0070                     ?i1_do_I2C_RX:	
  3353                           ; 1 bytes @ 0x0
  3354                           
  3355  0070                     ?i1_do_I2C_TX_EMPTY:	
  3356                           ; 1 bytes @ 0x0
  3357                           
  3358  0070                     ?i1_i2c_ISR:	
  3359                           ; 1 bytes @ 0x0
  3360                           
  3361  0070                     ?i1_setCallBack:	
  3362                           ; 1 bytes @ 0x0
  3363                           
  3364  0070                     i1i2c_driver_TXData@d:	
  3365                           ; 1 bytes @ 0x0
  3366                           
  3367  0070                     i1i2c_setBuffer@bufferSize:	
  3368                           ; 1 bytes @ 0x0
  3369                           
  3370  0070                     i1setCallBack@cb:	
  3371                           ; 2 bytes @ 0x0
  3372                           
  3373                           
  3374                           ; 2 bytes @ 0x0
  3375  0070                     	ds	1
  3376  0071                     ??_IOCCF4_ISR:	
  3377  0071                     ??_PIN_MANAGER_IOC:	
  3378                           ; 1 bytes @ 0x1
  3379                           
  3380  0071                     ??i1_do_I2C_SEND_ADR_READ:	
  3381                           ; 1 bytes @ 0x1
  3382                           
  3383  0071                     ??i1_do_I2C_SEND_ADR_WRITE:	
  3384                           ; 1 bytes @ 0x1
  3385                           
  3386                           
  3387                           ; 1 bytes @ 0x1
  3388  0071                     	ds	1
  3389  0072                     ??i1_i2c_setBuffer:	
  3390  0072                     i1setCallBack@p:	
  3391                           ; 1 bytes @ 0x2
  3392                           
  3393                           
  3394                           ; 1 bytes @ 0x2
  3395  0072                     	ds	1
  3396  0073                     ??i1_setCallBack:	
  3397  0073                     i1i2c_setBuffer@buffer:	
  3398                           ; 1 bytes @ 0x3
  3399                           
  3400                           
  3401                           ; 1 bytes @ 0x3
  3402  0073                     	ds	1
  3403  0074                     i1setCallBack@idx:	
  3404                           
  3405                           ; 1 bytes @ 0x4
  3406  0074                     	ds	1
  3407  0075                     ?i1_i2c_setDataCompleteCallback:	
  3408  0075                     i1i2c_setDataCompleteCallback@cb:	
  3409                           ; 1 bytes @ 0x5
  3410                           
  3411                           
  3412                           ; 2 bytes @ 0x5
  3413  0075                     	ds	2
  3414  0077                     i1i2c_setDataCompleteCallback@p:	
  3415                           
  3416                           ; 1 bytes @ 0x7
  3417  0077                     	ds	1
  3418  0078                     ??i1_i2c_setDataCompleteCallback:	
  3419                           
  3420                           ; 1 bytes @ 0x8
  3421  0078                     	ds	1
  3422  0079                     ?i1_wr1RegCompleteHandler:	
  3423  0079                     ?i1_rd1RegCompleteHandler:	
  3424                           ; 1 bytes @ 0x9
  3425                           
  3426  0079                     ?i1_rd2RegCompleteHandler:	
  3427                           ; 1 bytes @ 0x9
  3428                           
  3429  0079                     ?i1_wr2RegCompleteHandler:	
  3430                           ; 1 bytes @ 0x9
  3431                           
  3432  0079                     ?i1_rdBlkRegCompleteHandler:	
  3433                           ; 1 bytes @ 0x9
  3434                           
  3435  0079                     ?i1_returnStop:	
  3436                           ; 1 bytes @ 0x9
  3437                           
  3438  0079                     ?i1_returnReset:	
  3439                           ; 1 bytes @ 0x9
  3440                           
  3441  0079                     ?i1_i2c_restartWrite:	
  3442                           ; 1 bytes @ 0x9
  3443                           
  3444  0079                     i1wr1RegCompleteHandler@p:	
  3445                           ; 1 bytes @ 0x9
  3446                           
  3447  0079                     i1rd1RegCompleteHandler@p:	
  3448                           ; 1 bytes @ 0x9
  3449                           
  3450  0079                     i1rd2RegCompleteHandler@p:	
  3451                           ; 1 bytes @ 0x9
  3452                           
  3453  0079                     i1wr2RegCompleteHandler@p:	
  3454                           ; 1 bytes @ 0x9
  3455                           
  3456  0079                     i1rdBlkRegCompleteHandler@p:	
  3457                           ; 1 bytes @ 0x9
  3458                           
  3459  0079                     i1returnStop@p:	
  3460                           ; 1 bytes @ 0x9
  3461                           
  3462  0079                     i1returnReset@p:	
  3463                           ; 1 bytes @ 0x9
  3464                           
  3465  0079                     i1i2c_restartWrite@p:	
  3466                           ; 1 bytes @ 0x9
  3467                           
  3468                           
  3469                           ; 1 bytes @ 0x9
  3470  0079                     	ds	1
  3471  007A                     ??i1_wr1RegCompleteHandler:	
  3472  007A                     ??i1_rd1RegCompleteHandler:	
  3473                           ; 1 bytes @ 0xA
  3474                           
  3475  007A                     ??i1_rd2RegCompleteHandler:	
  3476                           ; 1 bytes @ 0xA
  3477                           
  3478  007A                     ??i1_wr2RegCompleteHandler:	
  3479                           ; 1 bytes @ 0xA
  3480                           
  3481  007A                     ??i1_rdBlkRegCompleteHandler:	
  3482                           ; 1 bytes @ 0xA
  3483                           
  3484  007A                     ??i1_do_I2C_DO_ADDRESS_NACK:	
  3485                           ; 1 bytes @ 0xA
  3486                           
  3487  007A                     ??i1_do_I2C_TX:	
  3488                           ; 1 bytes @ 0xA
  3489                           
  3490  007A                     ??i1_do_I2C_RX:	
  3491                           ; 1 bytes @ 0xA
  3492                           
  3493  007A                     ??i1_do_I2C_TX_EMPTY:	
  3494                           ; 1 bytes @ 0xA
  3495                           
  3496  007A                     ??i1_returnStop:	
  3497                           ; 1 bytes @ 0xA
  3498                           
  3499  007A                     ??i1_returnReset:	
  3500                           ; 1 bytes @ 0xA
  3501                           
  3502  007A                     ??i1_i2c_restartWrite:	
  3503                           ; 1 bytes @ 0xA
  3504                           
  3505                           
  3506                           ; 1 bytes @ 0xA
  3507  007A                     	ds	1
  3508  007B                     i1_do_I2C_TX$1026:	
  3509                           
  3510                           ; 2 bytes @ 0xB
  3511  007B                     	ds	2
  3512  007D                     ??i1_i2c_ISR:	
  3513                           
  3514                           ; 1 bytes @ 0xD
  3515  007D                     	ds	1
  3516                           
  3517                           	psect	cstackBANK0
  3518  0020                     __pcstackBANK0:	
  3519  0020                     ??_INTERRUPT_InterruptManager:	
  3520                           
  3521                           ; 1 bytes @ 0x0
  3522  0020                     	ds	1
  3523  0021                     ?_IOCCF4_SetInterruptHandler:	
  3524  0021                     ??_OSCILLATOR_Initialize:	
  3525                           ; 1 bytes @ 0x1
  3526                           
  3527  0021                     ?_i2c_setBuffer:	
  3528                           ; 1 bytes @ 0x1
  3529                           
  3530  0021                     ??_i2c_close:	
  3531                           ; 1 bytes @ 0x1
  3532                           
  3533  0021                     ?_setCallBack:	
  3534                           ; 1 bytes @ 0x1
  3535                           
  3536  0021                     ?_drawPixel:	
  3537                           ; 1 bytes @ 0x1
  3538                           
  3539  0021                     ??_clearPixels:	
  3540                           ; 1 bytes @ 0x1
  3541                           
  3542  0021                     ??_reverse:	
  3543                           ; 1 bytes @ 0x1
  3544                           
  3545  0021                     ??_mssp_IRQisEnabled:	
  3546                           ; 1 bytes @ 0x1
  3547                           
  3548  0021                     ??_mssp_disableIRQ:	
  3549                           ; 1 bytes @ 0x1
  3550                           
  3551  0021                     ??_mssp_clearIRQ:	
  3552                           ; 1 bytes @ 0x1
  3553                           
  3554  0021                     ??_mssp_setIRQ:	
  3555                           ; 1 bytes @ 0x1
  3556                           
  3557  0021                     ??_mssp_waitForEvent:	
  3558                           ; 1 bytes @ 0x1
  3559                           
  3560  0021                     ??_i2c_driver_open:	
  3561                           ; 1 bytes @ 0x1
  3562                           
  3563  0021                     ??_i2c_driver_resetBus:	
  3564                           ; 1 bytes @ 0x1
  3565                           
  3566  0021                     ??_i2c_driver_start:	
  3567                           ; 1 bytes @ 0x1
  3568                           
  3569  0021                     ??_i2c_driver_restart:	
  3570                           ; 1 bytes @ 0x1
  3571                           
  3572  0021                     ??_i2c_driver_stop:	
  3573                           ; 1 bytes @ 0x1
  3574                           
  3575  0021                     ??_i2c_driver_isNACK:	
  3576                           ; 1 bytes @ 0x1
  3577                           
  3578  0021                     ??_i2c_driver_startRX:	
  3579                           ; 1 bytes @ 0x1
  3580                           
  3581  0021                     ??_i2c_driver_getRXData:	
  3582                           ; 1 bytes @ 0x1
  3583                           
  3584  0021                     ??_i2c_driver_TXData:	
  3585                           ; 1 bytes @ 0x1
  3586                           
  3587  0021                     ??_i2c_driver_sendACK:	
  3588                           ; 1 bytes @ 0x1
  3589                           
  3590  0021                     ??_i2c_driver_sendNACK:	
  3591                           ; 1 bytes @ 0x1
  3592                           
  3593  0021                     ?_i2c_driver_setBusCollisionISR:	
  3594                           ; 1 bytes @ 0x1
  3595                           
  3596  0021                     ?_i2c_driver_setI2cISR:	
  3597                           ; 1 bytes @ 0x1
  3598                           
  3599  0021                     ??_do_I2C_RESET:	
  3600                           ; 1 bytes @ 0x1
  3601                           
  3602  0021                     ??_do_I2C_IDLE:	
  3603                           ; 1 bytes @ 0x1
  3604                           
  3605  0021                     ??_do_I2C_SEND_RESTART_READ:	
  3606                           ; 1 bytes @ 0x1
  3607                           
  3608  0021                     ??_do_I2C_SEND_RESTART_WRITE:	
  3609                           ; 1 bytes @ 0x1
  3610                           
  3611  0021                     ??_do_I2C_SEND_RESTART:	
  3612                           ; 1 bytes @ 0x1
  3613                           
  3614  0021                     ??_do_I2C_SEND_STOP:	
  3615                           ; 1 bytes @ 0x1
  3616                           
  3617  0021                     ??_do_I2C_RCEN:	
  3618                           ; 1 bytes @ 0x1
  3619                           
  3620  0021                     ??_do_I2C_DO_ACK:	
  3621                           ; 1 bytes @ 0x1
  3622                           
  3623  0021                     ??_do_I2C_DO_NACK_STOP:	
  3624                           ; 1 bytes @ 0x1
  3625                           
  3626  0021                     ??_do_I2C_DO_NACK_RESTART:	
  3627                           ; 1 bytes @ 0x1
  3628                           
  3629  0021                     ?___awdiv:	
  3630                           ; 1 bytes @ 0x1
  3631                           
  3632  0021                     ?___lmul:	
  3633                           ; 2 bytes @ 0x1
  3634                           
  3635  0021                     drawPixel@y:	
  3636                           ; 4 bytes @ 0x1
  3637                           
  3638  0021                     mssp_waitForEvent@timeout:	
  3639                           ; 1 bytes @ 0x1
  3640                           
  3641  0021                     i2c_driver_TXData@d:	
  3642                           ; 1 bytes @ 0x1
  3643                           
  3644  0021                     IOCCF4_SetInterruptHandler@InterruptHandler:	
  3645                           ; 1 bytes @ 0x1
  3646                           
  3647  0021                     i2c_driver_setBusCollisionISR@f:	
  3648                           ; 2 bytes @ 0x1
  3649                           
  3650  0021                     i2c_driver_setI2cISR@f:	
  3651                           ; 2 bytes @ 0x1
  3652                           
  3653  0021                     i2c_setBuffer@bufferSize:	
  3654                           ; 2 bytes @ 0x1
  3655                           
  3656  0021                     setCallBack@cb:	
  3657                           ; 2 bytes @ 0x1
  3658                           
  3659  0021                     ___awdiv@divisor:	
  3660                           ; 2 bytes @ 0x1
  3661                           
  3662  0021                     ___lmul@multiplier:	
  3663                           ; 2 bytes @ 0x1
  3664                           
  3665                           
  3666                           ; 4 bytes @ 0x1
  3667  0021                     	ds	1
  3668  0022                     ??_do_I2C_SEND_ADR_READ:	
  3669  0022                     ??_do_I2C_SEND_ADR_WRITE:	
  3670                           ; 1 bytes @ 0x2
  3671                           
  3672  0022                     drawPixel@color:	
  3673                           ; 1 bytes @ 0x2
  3674                           
  3675  0022                     i2c_close@ret:	
  3676                           ; 1 bytes @ 0x2
  3677                           
  3678                           
  3679                           ; 1 bytes @ 0x2
  3680  0022                     	ds	1
  3681  0023                     ??_IOCCF4_SetInterruptHandler:	
  3682  0023                     ??_i2c_setBuffer:	
  3683                           ; 1 bytes @ 0x3
  3684                           
  3685  0023                     ??_i2c_open:	
  3686                           ; 1 bytes @ 0x3
  3687                           
  3688  0023                     ??_PIN_MANAGER_Initialize:	
  3689                           ; 1 bytes @ 0x3
  3690                           
  3691  0023                     ??_SYSTEM_Initialize:	
  3692                           ; 1 bytes @ 0x3
  3693                           
  3694  0023                     ??_drawPixel:	
  3695                           ; 1 bytes @ 0x3
  3696                           
  3697  0023                     ??_i2c_driver_setBusCollisionISR:	
  3698                           ; 1 bytes @ 0x3
  3699                           
  3700  0023                     ??_i2c_driver_setI2cISR:	
  3701                           ; 1 bytes @ 0x3
  3702                           
  3703  0023                     setCallBack@p:	
  3704                           ; 1 bytes @ 0x3
  3705                           
  3706  0023                     ___awdiv@dividend:	
  3707                           ; 1 bytes @ 0x3
  3708                           
  3709                           
  3710                           ; 2 bytes @ 0x3
  3711  0023                     	ds	1
  3712  0024                     ??_setCallBack:	
  3713  0024                     reverse@b:	
  3714                           ; 1 bytes @ 0x4
  3715                           
  3716  0024                     i2c_open@address:	
  3717                           ; 1 bytes @ 0x4
  3718                           
  3719  0024                     i2c_setBuffer@buffer:	
  3720                           ; 1 bytes @ 0x4
  3721                           
  3722                           
  3723                           ; 1 bytes @ 0x4
  3724  0024                     	ds	1
  3725  0025                     ??_drawWalls:	
  3726  0025                     ??___awdiv:	
  3727                           ; 1 bytes @ 0x5
  3728                           
  3729  0025                     i2c_open@ret:	
  3730                           ; 1 bytes @ 0x5
  3731                           
  3732  0025                     setCallBack@idx:	
  3733                           ; 1 bytes @ 0x5
  3734                           
  3735  0025                     ___lmul@multiplicand:	
  3736                           ; 1 bytes @ 0x5
  3737                           
  3738                           
  3739                           ; 4 bytes @ 0x5
  3740  0025                     	ds	1
  3741  0026                     ?_i2c_setDataCompleteCallback:	
  3742  0026                     ?_i2c_setAddressNACKCallback:	
  3743                           ; 1 bytes @ 0x6
  3744                           
  3745  0026                     ___awdiv@counter:	
  3746                           ; 1 bytes @ 0x6
  3747                           
  3748  0026                     i2c_setDataCompleteCallback@cb:	
  3749                           ; 1 bytes @ 0x6
  3750                           
  3751  0026                     i2c_setAddressNACKCallback@cb:	
  3752                           ; 2 bytes @ 0x6
  3753                           
  3754                           
  3755                           ; 2 bytes @ 0x6
  3756  0026                     	ds	1
  3757  0027                     ___awdiv@sign:	
  3758                           
  3759                           ; 1 bytes @ 0x7
  3760  0027                     	ds	1
  3761  0028                     i2c_setDataCompleteCallback@p:	
  3762  0028                     i2c_setAddressNACKCallback@p:	
  3763                           ; 1 bytes @ 0x8
  3764                           
  3765  0028                     ___awdiv@quotient:	
  3766                           ; 1 bytes @ 0x8
  3767                           
  3768                           
  3769                           ; 2 bytes @ 0x8
  3770  0028                     	ds	1
  3771  0029                     ??_i2c_setDataCompleteCallback:	
  3772  0029                     ??_i2c_setAddressNACKCallback:	
  3773                           ; 1 bytes @ 0x9
  3774                           
  3775  0029                     ??___lmul:	
  3776                           ; 1 bytes @ 0x9
  3777                           
  3778  0029                     drawPixel@x:	
  3779                           ; 1 bytes @ 0x9
  3780                           
  3781  0029                     ___lmul@product:	
  3782                           ; 1 bytes @ 0x9
  3783                           
  3784                           
  3785                           ; 4 bytes @ 0x9
  3786  0029                     	ds	1
  3787  002A                     ?_i2c_restartWrite:	
  3788  002A                     ?_returnStop:	
  3789                           ; 1 bytes @ 0xA
  3790                           
  3791  002A                     ?_returnReset:	
  3792                           ; 1 bytes @ 0xA
  3793                           
  3794  002A                     ?_wr1RegCompleteHandler:	
  3795                           ; 1 bytes @ 0xA
  3796                           
  3797  002A                     ?_rd1RegCompleteHandler:	
  3798                           ; 1 bytes @ 0xA
  3799                           
  3800  002A                     ?_rd2RegCompleteHandler:	
  3801                           ; 1 bytes @ 0xA
  3802                           
  3803  002A                     ?_wr2RegCompleteHandler:	
  3804                           ; 1 bytes @ 0xA
  3805                           
  3806  002A                     ?_rdBlkRegCompleteHandler:	
  3807                           ; 1 bytes @ 0xA
  3808                           
  3809  002A                     wr1RegCompleteHandler@p:	
  3810                           ; 1 bytes @ 0xA
  3811                           
  3812  002A                     rd1RegCompleteHandler@p:	
  3813                           ; 1 bytes @ 0xA
  3814                           
  3815  002A                     rd2RegCompleteHandler@p:	
  3816                           ; 1 bytes @ 0xA
  3817                           
  3818  002A                     wr2RegCompleteHandler@p:	
  3819                           ; 1 bytes @ 0xA
  3820                           
  3821  002A                     rdBlkRegCompleteHandler@p:	
  3822                           ; 1 bytes @ 0xA
  3823                           
  3824  002A                     returnStop@p:	
  3825                           ; 1 bytes @ 0xA
  3826                           
  3827  002A                     returnReset@p:	
  3828                           ; 1 bytes @ 0xA
  3829                           
  3830  002A                     i2c_restartWrite@p:	
  3831                           ; 1 bytes @ 0xA
  3832                           
  3833                           
  3834                           ; 1 bytes @ 0xA
  3835  002A                     	ds	1
  3836  002B                     ??_i2c_restartWrite:	
  3837  002B                     ??_returnStop:	
  3838                           ; 1 bytes @ 0xB
  3839                           
  3840  002B                     ??_returnReset:	
  3841                           ; 1 bytes @ 0xB
  3842                           
  3843  002B                     ??_wr1RegCompleteHandler:	
  3844                           ; 1 bytes @ 0xB
  3845                           
  3846  002B                     ??_rd1RegCompleteHandler:	
  3847                           ; 1 bytes @ 0xB
  3848                           
  3849  002B                     ??_rd2RegCompleteHandler:	
  3850                           ; 1 bytes @ 0xB
  3851                           
  3852  002B                     ??_wr2RegCompleteHandler:	
  3853                           ; 1 bytes @ 0xB
  3854                           
  3855  002B                     ??_rdBlkRegCompleteHandler:	
  3856                           ; 1 bytes @ 0xB
  3857                           
  3858  002B                     ??_do_I2C_DO_ADDRESS_NACK:	
  3859                           ; 1 bytes @ 0xB
  3860                           
  3861  002B                     ??_do_I2C_TX:	
  3862                           ; 1 bytes @ 0xB
  3863                           
  3864  002B                     ??_do_I2C_RX:	
  3865                           ; 1 bytes @ 0xB
  3866                           
  3867  002B                     ??_do_I2C_TX_EMPTY:	
  3868                           ; 1 bytes @ 0xB
  3869                           
  3870                           
  3871                           ; 1 bytes @ 0xB
  3872  002B                     	ds	1
  3873  002C                     _do_I2C_TX$1026:	
  3874                           
  3875                           ; 2 bytes @ 0xC
  3876  002C                     	ds	1
  3877  002D                     ?_rand:	
  3878                           
  3879                           ; 2 bytes @ 0xD
  3880  002D                     	ds	1
  3881  002E                     ??_i2c_ISR:	
  3882                           
  3883                           ; 1 bytes @ 0xE
  3884  002E                     	ds	1
  3885  002F                     ??_rand:	
  3886  002F                     ??_i2c_poller:	
  3887                           ; 1 bytes @ 0xF
  3888                           
  3889  002F                     ??_i2c_masterOperation:	
  3890                           ; 1 bytes @ 0xF
  3891                           
  3892                           
  3893                           ; 1 bytes @ 0xF
  3894  002F                     	ds	1
  3895  0030                     i2c_masterOperation@read:	
  3896                           
  3897                           ; 1 bytes @ 0x10
  3898  0030                     	ds	1
  3899  0031                     i2c_masterOperation@ret:	
  3900                           
  3901                           ; 1 bytes @ 0x11
  3902  0031                     	ds	1
  3903  0032                     ?_i2c_writeNBytes:	
  3904  0032                     ??_i2c_masterWrite:	
  3905                           ; 1 bytes @ 0x12
  3906                           
  3907  0032                     i2c_writeNBytes@data:	
  3908                           ; 1 bytes @ 0x12
  3909                           
  3910                           
  3911                           ; 1 bytes @ 0x12
  3912  0032                     	ds	1
  3913  0033                     i2c_writeNBytes@len:	
  3914                           
  3915                           ; 2 bytes @ 0x13
  3916  0033                     	ds	1
  3917  0034                     ?___awmod:	
  3918  0034                     ___awmod@divisor:	
  3919                           ; 2 bytes @ 0x14
  3920                           
  3921                           
  3922                           ; 2 bytes @ 0x14
  3923  0034                     	ds	1
  3924  0035                     ??_i2c_writeNBytes:	
  3925  0035                     i2c_writeNBytes@address:	
  3926                           ; 1 bytes @ 0x15
  3927                           
  3928                           
  3929                           ; 1 bytes @ 0x15
  3930  0035                     	ds	1
  3931  0036                     ??_writeDisplay:	
  3932  0036                     ??_initializeDisplay:	
  3933                           ; 1 bytes @ 0x16
  3934                           
  3935  0036                     ___awmod@dividend:	
  3936                           ; 1 bytes @ 0x16
  3937                           
  3938                           
  3939                           ; 2 bytes @ 0x16
  3940  0036                     	ds	2
  3941  0038                     ??___awmod:	
  3942                           
  3943                           ; 1 bytes @ 0x18
  3944  0038                     	ds	1
  3945  0039                     ___awmod@counter:	
  3946                           
  3947                           ; 1 bytes @ 0x19
  3948  0039                     	ds	1
  3949  003A                     ___awmod@sign:	
  3950                           
  3951                           ; 1 bytes @ 0x1A
  3952  003A                     	ds	1
  3953  003B                     ?_random:	
  3954  003B                     ??_endGame:	
  3955                           ; 1 bytes @ 0x1B
  3956                           
  3957  003B                     random@upper:	
  3958                           ; 1 bytes @ 0x1B
  3959                           
  3960                           
  3961                           ; 1 bytes @ 0x1B
  3962  003B                     	ds	1
  3963  003C                     ??_random:	
  3964                           
  3965                           ; 1 bytes @ 0x1C
  3966  003C                     	ds	2
  3967  003E                     random@lower:	
  3968                           
  3969                           ; 1 bytes @ 0x1E
  3970  003E                     	ds	1
  3971  003F                     ??_shiftWalls:	
  3972                           
  3973                           ; 1 bytes @ 0x1F
  3974  003F                     	ds	6
  3975  0045                     ??_main:	
  3976                           
  3977                           ; 1 bytes @ 0x25
  3978  0045                     	ds	2
  3979                           
  3980                           	psect	maintext
  3981  0192                     __pmaintext:	
  3982 ;;
  3983 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  3984 ;;
  3985 ;; *************** function _main *****************
  3986 ;; Defined at:
  3987 ;;		line 184 in file "main.c"
  3988 ;; Parameters:    Size  Location     Type
  3989 ;;		None
  3990 ;; Auto vars:     Size  Location     Type
  3991 ;;		None
  3992 ;; Return value:  Size  Location     Type
  3993 ;;                  1    wreg      void 
  3994 ;; Registers used:
  3995 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3996 ;; Tracked objects:
  3997 ;;		On entry : B1F/0
  3998 ;;		On exit  : 0/0
  3999 ;;		Unchanged: 0/0
  4000 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4001 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4002 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4003 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4004 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4005 ;;Total ram usage:        2 bytes
  4006 ;; Hardware stack levels required when called:   17
  4007 ;; This function calls:
  4008 ;;		_IOCCF4_SetInterruptHandler
  4009 ;;		_SYSTEM_Initialize
  4010 ;;		_clearPixels
  4011 ;;		_drawPixel
  4012 ;;		_drawWalls
  4013 ;;		_endGame
  4014 ;;		_initializeDisplay
  4015 ;;		_shiftWalls
  4016 ;;		_writeDisplay
  4017 ;; This function is called by:
  4018 ;;		Startup code after reset
  4019 ;; This function uses a non-reentrant model
  4020 ;;
  4021                           
  4022                           
  4023                           ;psect for function _main
  4024  0192                     _main:	
  4025                           
  4026                           ;main.c: 186: SYSTEM_Initialize();
  4027                           
  4028                           ;incstack = 0
  4029 ;; hardware stack exceeded
  4030                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4031  0192  318D  25EE  3181   	fcall	_SYSTEM_Initialize
  4032                           
  4033                           ;main.c: 187: (INTCONbits.GIE = 1);
  4034  0195  178B               	bsf	11,7	;volatile
  4035                           
  4036                           ;main.c: 188: (INTCONbits.PEIE = 1);
  4037  0196  170B               	bsf	11,6	;volatile
  4038                           
  4039                           ;main.c: 190: initializeDisplay();
  4040  0197  3181  21F7  3181   	fcall	_initializeDisplay
  4041                           
  4042                           ;main.c: 192: IOCCF4_SetInterruptHandler(buttonInterrupt);
  4043  019A  30CF               	movlw	low _buttonInterrupt
  4044  019B  0020               	movlb	0	; select bank0
  4045  019C  00A1               	movwf	IOCCF4_SetInterruptHandler@InterruptHandler
  4046  019D  300E               	movlw	high _buttonInterrupt
  4047  019E  00A2               	movwf	IOCCF4_SetInterruptHandler@InterruptHandler+1
  4048  019F  318D  25E8  3181   	fcall	_IOCCF4_SetInterruptHandler
  4049                           
  4050                           ;main.c: 194: elevation = 3;
  4051  01A2  3003               	movlw	3
  4052  01A3  0020               	movlb	0	; select bank0
  4053  01A4  00C5               	movwf	??_main
  4054  01A5  0845               	movf	??_main,w
  4055  01A6  00DE               	movwf	_elevation
  4056  01A7                     l5708:	
  4057                           ;main.c: 196: while (!start);
  4058                           
  4059  01A7  085D               	movf	_start,w
  4060  01A8  1903               	btfsc	3,2
  4061  01A9  29A7               	goto	l5708
  4062  01AA                     l5710:	
  4063                           ;main.c: 198: while (1)
  4064                           
  4065                           
  4066                           ;main.c: 199: {
  4067                           ;main.c: 200: drawPixel(1, elevation, 3);
  4068  01AA  085E               	movf	_elevation,w
  4069  01AB  00C5               	movwf	??_main
  4070  01AC  0845               	movf	??_main,w
  4071  01AD  00A1               	movwf	drawPixel@y
  4072  01AE  3003               	movlw	3
  4073  01AF  00C6               	movwf	??_main+1
  4074  01B0  0846               	movf	??_main+1,w
  4075  01B1  00A2               	movwf	drawPixel@color
  4076  01B2  3001               	movlw	1
  4077  01B3  3180  205B  3181   	fcall	_drawPixel
  4078                           
  4079                           ;main.c: 201: drawWalls();
  4080  01B6  3187  2791  3181   	fcall	_drawWalls
  4081                           
  4082                           ;main.c: 202: writeDisplay();
  4083  01B9  3182  2255  3181   	fcall	_writeDisplay
  4084                           
  4085                           ;main.c: 203: clearPixels();
  4086  01BC  318F  2781  3181   	fcall	_clearPixels
  4087                           
  4088                           ;main.c: 204: if (elevation < 0 || elevation > 7 || (walls[elevation] & 0b01000000)) {
  4089  01BF  3008               	movlw	8
  4090  01C0  0020               	movlb	0	; select bank0
  4091  01C1  025E               	subwf	_elevation,w
  4092  01C2  1803               	skipnc
  4093  01C3  29CA               	goto	l5720
  4094  01C4  085E               	movf	_elevation,w
  4095  01C5  3E47               	addlw	(low (_walls| 0))& (0+255)
  4096  01C6  0086               	movwf	6
  4097  01C7  0187               	clrf	7
  4098  01C8  1F01               	btfss	1,6
  4099  01C9  29CD               	goto	l5722
  4100  01CA                     l5720:	
  4101                           
  4102                           ;main.c: 205: endGame();
  4103  01CA  3183  239F  3181   	fcall	_endGame
  4104  01CD                     l5722:	
  4105                           
  4106                           ;main.c: 206: }
  4107                           ;main.c: 207: if (gravityCounter >= 80) {
  4108  01CD  3050               	movlw	80
  4109  01CE  0020               	movlb	0	; select bank0
  4110  01CF  025C               	subwf	_gravityCounter,w
  4111  01D0  1C03               	skipc
  4112  01D1  29E0               	goto	l5734
  4113                           
  4114                           ;main.c: 208: if (fall) {
  4115  01D2  0864               	movf	_fall,w
  4116  01D3  1903               	btfsc	3,2
  4117  01D4  29DA               	goto	l5728
  4118                           
  4119                           ;main.c: 209: elevation += 1;
  4120  01D5  3001               	movlw	1
  4121  01D6  00C5               	movwf	??_main
  4122  01D7  0845               	movf	??_main,w
  4123  01D8  07DE               	addwf	_elevation,f
  4124                           
  4125                           ;main.c: 210: } else {
  4126  01D9  29DE               	goto	l5732
  4127  01DA                     l5728:	
  4128                           
  4129                           ;main.c: 211: elevation -= 1;
  4130  01DA  3001               	movlw	1
  4131  01DB  02DE               	subwf	_elevation,f
  4132                           
  4133                           ;main.c: 212: fall = 1;
  4134  01DC  01E4               	clrf	_fall
  4135  01DD  0AE4               	incf	_fall,f
  4136  01DE                     l5732:	
  4137                           
  4138                           ;main.c: 213: }
  4139                           ;main.c: 214: gravityCounter = 0;
  4140  01DE  01DC               	clrf	_gravityCounter
  4141                           
  4142                           ;main.c: 215: } else {
  4143  01DF  29E4               	goto	l5736
  4144  01E0                     l5734:	
  4145                           
  4146                           ;main.c: 216: gravityCounter++;
  4147  01E0  3001               	movlw	1
  4148  01E1  00C5               	movwf	??_main
  4149  01E2  0845               	movf	??_main,w
  4150  01E3  07DC               	addwf	_gravityCounter,f
  4151  01E4                     l5736:	
  4152                           
  4153                           ;main.c: 217: }
  4154                           ;main.c: 218: if (shiftCounter >= 100) {
  4155  01E4  3000               	movlw	0
  4156  01E5  0250               	subwf	_shiftCounter+1,w
  4157  01E6  3064               	movlw	100
  4158  01E7  1903               	skipnz
  4159  01E8  024F               	subwf	_shiftCounter,w
  4160  01E9  1C03               	skipc
  4161  01EA  29F2               	goto	l5742
  4162                           
  4163                           ;main.c: 219: shiftWalls();
  4164  01EB  3181  2111  3181   	fcall	_shiftWalls
  4165                           
  4166                           ;main.c: 220: shiftCounter = 0;
  4167  01EE  0020               	movlb	0	; select bank0
  4168  01EF  01CF               	clrf	_shiftCounter
  4169  01F0  01D0               	clrf	_shiftCounter+1
  4170                           
  4171                           ;main.c: 221: } else {
  4172  01F1  29AA               	goto	l5710
  4173  01F2                     l5742:	
  4174                           
  4175                           ;main.c: 222: shiftCounter++;
  4176  01F2  3001               	movlw	1
  4177  01F3  07CF               	addwf	_shiftCounter,f
  4178  01F4  3000               	movlw	0
  4179  01F5  3DD0               	addwfc	_shiftCounter+1,f
  4180  01F6  29AA               	goto	l5710
  4181  01F7                     __end_of_main:	
  4182                           
  4183                           	psect	text1
  4184  0111                     __ptext1:	
  4185 ;; *************** function _shiftWalls *****************
  4186 ;; Defined at:
  4187 ;;		line 138 in file "main.c"
  4188 ;; Parameters:    Size  Location     Type
  4189 ;;		None
  4190 ;; Auto vars:     Size  Location     Type
  4191 ;;		None
  4192 ;; Return value:  Size  Location     Type
  4193 ;;                  1    wreg      void 
  4194 ;; Registers used:
  4195 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4196 ;; Tracked objects:
  4197 ;;		On entry : 0/0
  4198 ;;		On exit  : 0/0
  4199 ;;		Unchanged: 0/0
  4200 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4201 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4202 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4203 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4204 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4205 ;;Total ram usage:        6 bytes
  4206 ;; Hardware stack levels used:    1
  4207 ;; Hardware stack levels required when called:    9
  4208 ;; This function calls:
  4209 ;;		_random
  4210 ;; This function is called by:
  4211 ;;		_main
  4212 ;; This function uses a non-reentrant model
  4213 ;;
  4214                           
  4215                           
  4216                           ;psect for function _shiftWalls
  4217  0111                     _shiftWalls:	
  4218                           
  4219                           ;main.c: 139: for (i = 0; i < 8; i++) {
  4220                           
  4221                           ;incstack = 0
  4222                           ; Regs used in _shiftWalls: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4223  0111  0020               	movlb	0	; select bank0
  4224  0112  01DB               	clrf	_i
  4225  0113  3008               	movlw	8
  4226  0114  025B               	subwf	_i,w
  4227  0115  1803               	btfsc	3,0
  4228  0116  292B               	goto	l3384
  4229  0117                     l3378:	
  4230                           
  4231                           ;main.c: 140: walls[i] = walls[i] << 1;
  4232  0117  085B               	movf	_i,w
  4233  0118  3E47               	addlw	(low (_walls| 0))& (0+255)
  4234  0119  0086               	movwf	6
  4235  011A  0187               	clrf	7
  4236  011B  3501               	lslf	1,w
  4237  011C  00BF               	movwf	??_shiftWalls
  4238  011D  085B               	movf	_i,w
  4239  011E  3E47               	addlw	(low (_walls| 0))& (0+255)
  4240  011F  0086               	movwf	6
  4241  0120  0187               	clrf	7
  4242  0121  083F               	movf	??_shiftWalls,w
  4243  0122  0081               	movwf	1
  4244  0123  3001               	movlw	1
  4245  0124  00BF               	movwf	??_shiftWalls
  4246  0125  083F               	movf	??_shiftWalls,w
  4247  0126  07DB               	addwf	_i,f
  4248  0127  3008               	movlw	8
  4249  0128  025B               	subwf	_i,w
  4250  0129  1C03               	skipc
  4251  012A  2917               	goto	l3378
  4252  012B                     l3384:	
  4253                           
  4254                           ;main.c: 141: }
  4255                           ;main.c: 142: if (createWall == 3) {
  4256  012B  3003               	movlw	3
  4257  012C  065F               	xorwf	_createWall,w
  4258  012D  1D03               	btfss	3,2
  4259  012E  298D               	goto	l3408
  4260                           
  4261                           ;main.c: 143: wallHeight = random(4, 7);
  4262  012F  3007               	movlw	7
  4263  0130  00BF               	movwf	??_shiftWalls
  4264  0131  083F               	movf	??_shiftWalls,w
  4265  0132  00BB               	movwf	random@upper
  4266  0133  3004               	movlw	4
  4267  0134  3187  2772  3181   	fcall	_random
  4268  0137  0020               	movlb	0	; select bank0
  4269  0138  00C0               	movwf	??_shiftWalls+1
  4270  0139  0840               	movf	??_shiftWalls+1,w
  4271  013A  00DA               	movwf	_wallHeight
  4272                           
  4273                           ;main.c: 144: topHalf = random(1, wallHeight);
  4274  013B  085A               	movf	_wallHeight,w
  4275  013C  00BF               	movwf	??_shiftWalls
  4276  013D  083F               	movf	??_shiftWalls,w
  4277  013E  00BB               	movwf	random@upper
  4278  013F  3001               	movlw	1
  4279  0140  3187  2772  3181   	fcall	_random
  4280  0143  0020               	movlb	0	; select bank0
  4281  0144  00C0               	movwf	??_shiftWalls+1
  4282  0145  0840               	movf	??_shiftWalls+1,w
  4283  0146  00D9               	movwf	_topHalf
  4284                           
  4285                           ;main.c: 145: for (i = 0; i < topHalf; i++) {
  4286  0147  01DB               	clrf	_i
  4287  0148                     l3394:	
  4288  0148  0859               	movf	_topHalf,w
  4289  0149  025B               	subwf	_i,w
  4290  014A  1803               	btfsc	3,0
  4291  014B  2956               	goto	l3396
  4292                           
  4293                           ;main.c: 146: walls[i] |= 1;
  4294  014C  085B               	movf	_i,w
  4295  014D  3E47               	addlw	(low (_walls| 0))& (0+255)
  4296  014E  0086               	movwf	6
  4297  014F  0187               	clrf	7
  4298  0150  1401               	bsf	1,0
  4299  0151  3001               	movlw	1
  4300  0152  00BF               	movwf	??_shiftWalls
  4301  0153  083F               	movf	??_shiftWalls,w
  4302  0154  07DB               	addwf	_i,f
  4303  0155  2948               	goto	l3394
  4304  0156                     l3396:	
  4305                           
  4306                           ;main.c: 147: }
  4307                           ;main.c: 148: for (i = 7; i >= 8 - (wallHeight - topHalf); i--) {
  4308  0156  3007               	movlw	7
  4309  0157  00BF               	movwf	??_shiftWalls
  4310  0158  083F               	movf	??_shiftWalls,w
  4311  0159  00DB               	movwf	_i
  4312  015A                     l3402:	
  4313  015A  0859               	movf	_topHalf,w
  4314  015B  00BF               	movwf	??_shiftWalls
  4315  015C  01C0               	clrf	??_shiftWalls+1
  4316  015D  09BF               	comf	??_shiftWalls,f
  4317  015E  09C0               	comf	??_shiftWalls+1,f
  4318  015F  0ABF               	incf	??_shiftWalls,f
  4319  0160  1903               	skipnz
  4320  0161  0AC0               	incf	??_shiftWalls+1,f
  4321  0162  085A               	movf	_wallHeight,w
  4322  0163  073F               	addwf	??_shiftWalls,w
  4323  0164  00C1               	movwf	??_shiftWalls+2
  4324  0165  0840               	movf	??_shiftWalls+1,w
  4325  0166  1803               	skipnc
  4326  0167  0A40               	incf	??_shiftWalls+1,w
  4327  0168  00C2               	movwf	??_shiftWalls+3
  4328  0169  09C1               	comf	??_shiftWalls+2,f
  4329  016A  09C2               	comf	??_shiftWalls+3,f
  4330  016B  0AC1               	incf	??_shiftWalls+2,f
  4331  016C  1903               	skipnz
  4332  016D  0AC2               	incf	??_shiftWalls+3,f
  4333  016E  0841               	movf	??_shiftWalls+2,w
  4334  016F  3E08               	addlw	8
  4335  0170  00C3               	movwf	??_shiftWalls+4
  4336  0171  3000               	movlw	0
  4337  0172  3D42               	addwfc	??_shiftWalls+3,w
  4338  0173  00C4               	movwf	??_shiftWalls+5
  4339  0174  0844               	movf	??_shiftWalls+5,w
  4340  0175  3A80               	xorlw	128
  4341  0176  3C80               	sublw	128
  4342  0177  1D03               	skipz
  4343  0178  297B               	goto	u2065
  4344  0179  0843               	movf	??_shiftWalls+4,w
  4345  017A  025B               	subwf	_i,w
  4346  017B                     u2065:	
  4347  017B  1C03               	btfss	3,0
  4348  017C  2986               	goto	l3404
  4349                           
  4350                           ;main.c: 149: walls[i] |= 1;
  4351  017D  0020               	movlb	0	; select bank0
  4352  017E  085B               	movf	_i,w
  4353  017F  3E47               	addlw	(low (_walls| 0))& (0+255)
  4354  0180  0086               	movwf	6
  4355  0181  0187               	clrf	7
  4356  0182  1401               	bsf	1,0
  4357  0183  3001               	movlw	1
  4358  0184  02DB               	subwf	_i,f
  4359  0185  295A               	goto	l3402
  4360  0186                     l3404:	
  4361                           
  4362                           ;main.c: 150: }
  4363                           ;main.c: 151: createWall = 0;
  4364  0186  0020               	movlb	0	; select bank0
  4365  0187  01DF               	clrf	_createWall
  4366                           
  4367                           ;main.c: 152: score++;
  4368  0188  3001               	movlw	1
  4369  0189  07D3               	addwf	_score,f
  4370  018A  3000               	movlw	0
  4371  018B  3DD4               	addwfc	_score+1,f
  4372                           
  4373                           ;main.c: 153: } else {
  4374  018C  0008               	return
  4375  018D                     l3408:	
  4376                           
  4377                           ;main.c: 154: createWall++;
  4378  018D  3001               	movlw	1
  4379  018E  00BF               	movwf	??_shiftWalls
  4380  018F  083F               	movf	??_shiftWalls,w
  4381  0190  07DF               	addwf	_createWall,f
  4382  0191  0008               	return
  4383  0192                     __end_of_shiftWalls:	
  4384                           
  4385                           	psect	text2
  4386  0772                     __ptext2:	
  4387 ;; *************** function _random *****************
  4388 ;; Defined at:
  4389 ;;		line 118 in file "main.c"
  4390 ;; Parameters:    Size  Location     Type
  4391 ;;  lower           1    wreg     unsigned char 
  4392 ;;  upper           1   27[BANK0 ] unsigned char 
  4393 ;; Auto vars:     Size  Location     Type
  4394 ;;  lower           1   30[BANK0 ] unsigned char 
  4395 ;; Return value:  Size  Location     Type
  4396 ;;                  1    wreg      unsigned char 
  4397 ;; Registers used:
  4398 ;;		wreg, status,2, status,0, pclath, cstack
  4399 ;; Tracked objects:
  4400 ;;		On entry : 0/0
  4401 ;;		On exit  : 0/0
  4402 ;;		Unchanged: 0/0
  4403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4404 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4405 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4406 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4407 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4408 ;;Total ram usage:        4 bytes
  4409 ;; Hardware stack levels used:    1
  4410 ;; Hardware stack levels required when called:    8
  4411 ;; This function calls:
  4412 ;;		___awmod
  4413 ;;		_rand
  4414 ;; This function is called by:
  4415 ;;		_shiftWalls
  4416 ;; This function uses a non-reentrant model
  4417 ;;
  4418                           
  4419                           
  4420                           ;psect for function _random
  4421  0772                     _random:	
  4422                           
  4423                           ;incstack = 0
  4424                           ; Regs used in _random: [wreg+status,2+status,0+pclath+cstack]
  4425                           ;random@lower stored from wreg
  4426  0772  0020               	movlb	0	; select bank0
  4427  0773  00BE               	movwf	random@lower
  4428                           
  4429                           ;main.c: 119: return rand() % (upper-lower) + lower;
  4430  0774  083E               	movf	random@lower,w
  4431  0775  00BC               	movwf	??_random
  4432  0776  01BD               	clrf	??_random+1
  4433  0777  09BC               	comf	??_random,f
  4434  0778  09BD               	comf	??_random+1,f
  4435  0779  0ABC               	incf	??_random,f
  4436  077A  1903               	skipnz
  4437  077B  0ABD               	incf	??_random+1,f
  4438  077C  083B               	movf	random@upper,w
  4439  077D  073C               	addwf	??_random,w
  4440  077E  00B4               	movwf	___awmod@divisor
  4441  077F  083D               	movf	??_random+1,w
  4442  0780  1803               	skipnc
  4443  0781  0A3D               	incf	??_random+1,w
  4444  0782  00B5               	movwf	___awmod@divisor+1
  4445  0783  3184  24FE  3187   	fcall	_rand
  4446  0786  0020               	movlb	0	; select bank0
  4447  0787  082E               	movf	?_rand+1,w
  4448  0788  00B7               	movwf	___awmod@dividend+1
  4449  0789  082D               	movf	?_rand,w
  4450  078A  00B6               	movwf	___awmod@dividend
  4451  078B  3184  2434         	fcall	___awmod
  4452  078D  0020               	movlb	0	; select bank0
  4453  078E  0834               	movf	?___awmod,w
  4454  078F  073E               	addwf	random@lower,w
  4455  0790  0008               	return
  4456  0791                     __end_of_random:	
  4457                           
  4458                           	psect	text3
  4459  04FE                     __ptext3:	
  4460 ;; *************** function _rand *****************
  4461 ;; Defined at:
  4462 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\rand.c"
  4463 ;; Parameters:    Size  Location     Type
  4464 ;;		None
  4465 ;; Auto vars:     Size  Location     Type
  4466 ;;		None
  4467 ;; Return value:  Size  Location     Type
  4468 ;;                  2   13[BANK0 ] int 
  4469 ;; Registers used:
  4470 ;;		wreg, status,2, status,0, pclath, cstack
  4471 ;; Tracked objects:
  4472 ;;		On entry : 0/0
  4473 ;;		On exit  : 0/0
  4474 ;;		Unchanged: 0/0
  4475 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4476 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4477 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4478 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4479 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4480 ;;Total ram usage:        7 bytes
  4481 ;; Hardware stack levels used:    1
  4482 ;; Hardware stack levels required when called:    7
  4483 ;; This function calls:
  4484 ;;		___lmul
  4485 ;; This function is called by:
  4486 ;;		_random
  4487 ;; This function uses a non-reentrant model
  4488 ;;
  4489                           
  4490                           
  4491                           ;psect for function _rand
  4492  04FE                     _rand:	
  4493                           
  4494                           ;incstack = 0
  4495                           ; Regs used in _rand: [wreg+status,2+status,0+pclath+cstack]
  4496  04FE  0020               	movlb	0	; select bank0
  4497  04FF  0863               	movf	_randx+3,w
  4498  0500  00A4               	movwf	___lmul@multiplier+3
  4499  0501  0862               	movf	_randx+2,w
  4500  0502  00A3               	movwf	___lmul@multiplier+2
  4501  0503  0861               	movf	_randx+1,w
  4502  0504  00A2               	movwf	___lmul@multiplier+1
  4503  0505  0860               	movf	_randx,w
  4504  0506  00A1               	movwf	___lmul@multiplier
  4505  0507  3041               	movlw	65
  4506  0508  00A8               	movwf	___lmul@multiplicand+3
  4507  0509  30C6               	movlw	198
  4508  050A  00A7               	movwf	___lmul@multiplicand+2
  4509  050B  304E               	movlw	78
  4510  050C  00A6               	movwf	___lmul@multiplicand+1
  4511  050D  306D               	movlw	109
  4512  050E  00A5               	movwf	___lmul@multiplicand
  4513  050F  3185  25A5  3184   	fcall	___lmul
  4514  0512  0020               	movlb	0	; select bank0
  4515  0513  0824               	movf	?___lmul+3,w
  4516  0514  00E3               	movwf	_randx+3
  4517  0515  0823               	movf	?___lmul+2,w
  4518  0516  00E2               	movwf	_randx+2
  4519  0517  0822               	movf	?___lmul+1,w
  4520  0518  00E1               	movwf	_randx+1
  4521  0519  0821               	movf	?___lmul,w
  4522  051A  00E0               	movwf	_randx
  4523  051B  3039               	movlw	57
  4524  051C  07E0               	addwf	_randx,f
  4525  051D  3030               	movlw	48
  4526  051E  3DE1               	addwfc	_randx+1,f
  4527  051F  3000               	movlw	0
  4528  0520  3DE2               	addwfc	_randx+2,f
  4529  0521  3000               	movlw	0
  4530  0522  3DE3               	addwfc	_randx+3,f
  4531  0523  0860               	movf	_randx,w
  4532  0524  00AF               	movwf	??_rand
  4533  0525  0861               	movf	_randx+1,w
  4534  0526  00B0               	movwf	??_rand+1
  4535  0527  0862               	movf	_randx+2,w
  4536  0528  00B1               	movwf	??_rand+2
  4537  0529  0863               	movf	_randx+3,w
  4538  052A  00B2               	movwf	??_rand+3
  4539  052B  3010               	movlw	16
  4540  052C  00B3               	movwf	??_rand+4
  4541  052D                     u1465:	
  4542  052D  37B2               	asrf	??_rand+3,f
  4543  052E  0CB1               	rrf	??_rand+2,f
  4544  052F  0CB0               	rrf	??_rand+1,f
  4545  0530  0CAF               	rrf	??_rand,f
  4546  0531  0BB3               	decfsz	??_rand+4,f
  4547  0532  2D2D               	goto	u1465
  4548  0533  30FF               	movlw	255
  4549  0534  052F               	andwf	??_rand,w
  4550  0535  00AD               	movwf	?_rand
  4551  0536  307F               	movlw	127
  4552  0537  0530               	andwf	??_rand+1,w
  4553  0538  00AE               	movwf	?_rand+1
  4554  0539  0008               	return
  4555  053A                     __end_of_rand:	
  4556                           
  4557                           	psect	text4
  4558  05A5                     __ptext4:	
  4559 ;; *************** function ___lmul *****************
  4560 ;; Defined at:
  4561 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
  4562 ;; Parameters:    Size  Location     Type
  4563 ;;  multiplier      4    1[BANK0 ] unsigned long 
  4564 ;;  multiplicand    4    5[BANK0 ] unsigned long 
  4565 ;; Auto vars:     Size  Location     Type
  4566 ;;  product         4    9[BANK0 ] unsigned long 
  4567 ;; Return value:  Size  Location     Type
  4568 ;;                  4    1[BANK0 ] unsigned long 
  4569 ;; Registers used:
  4570 ;;		wreg, status,2, status,0
  4571 ;; Tracked objects:
  4572 ;;		On entry : 0/0
  4573 ;;		On exit  : 0/0
  4574 ;;		Unchanged: 0/0
  4575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4576 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4577 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4578 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4579 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4580 ;;Total ram usage:       12 bytes
  4581 ;; Hardware stack levels used:    1
  4582 ;; Hardware stack levels required when called:    6
  4583 ;; This function calls:
  4584 ;;		Nothing
  4585 ;; This function is called by:
  4586 ;;		_rand
  4587 ;; This function uses a non-reentrant model
  4588 ;;
  4589                           
  4590                           
  4591                           ;psect for function ___lmul
  4592  05A5                     ___lmul:	
  4593                           
  4594                           ;incstack = 0
  4595                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  4596  05A5  3000               	movlw	0
  4597  05A6  0020               	movlb	0	; select bank0
  4598  05A7  00AC               	movwf	___lmul@product+3
  4599  05A8  3000               	movlw	0
  4600  05A9  00AB               	movwf	___lmul@product+2
  4601  05AA  3000               	movlw	0
  4602  05AB  00AA               	movwf	___lmul@product+1
  4603  05AC  3000               	movlw	0
  4604  05AD  00A9               	movwf	___lmul@product
  4605  05AE                     l2820:	
  4606  05AE  1C21               	btfss	___lmul@multiplier,0
  4607  05AF  2DB8               	goto	l2824
  4608  05B0  0825               	movf	___lmul@multiplicand,w
  4609  05B1  07A9               	addwf	___lmul@product,f
  4610  05B2  0826               	movf	___lmul@multiplicand+1,w
  4611  05B3  3DAA               	addwfc	___lmul@product+1,f
  4612  05B4  0827               	movf	___lmul@multiplicand+2,w
  4613  05B5  3DAB               	addwfc	___lmul@product+2,f
  4614  05B6  0828               	movf	___lmul@multiplicand+3,w
  4615  05B7  3DAC               	addwfc	___lmul@product+3,f
  4616  05B8                     l2824:	
  4617  05B8  3001               	movlw	1
  4618  05B9                     u1405:	
  4619  05B9  35A5               	lslf	___lmul@multiplicand,f
  4620  05BA  0DA6               	rlf	___lmul@multiplicand+1,f
  4621  05BB  0DA7               	rlf	___lmul@multiplicand+2,f
  4622  05BC  0DA8               	rlf	___lmul@multiplicand+3,f
  4623  05BD  0B89               	decfsz	9,f
  4624  05BE  2DB9               	goto	u1405
  4625  05BF  3001               	movlw	1
  4626  05C0                     u1415:	
  4627  05C0  36A4               	lsrf	___lmul@multiplier+3,f
  4628  05C1  0CA3               	rrf	___lmul@multiplier+2,f
  4629  05C2  0CA2               	rrf	___lmul@multiplier+1,f
  4630  05C3  0CA1               	rrf	___lmul@multiplier,f
  4631  05C4  0B89               	decfsz	9,f
  4632  05C5  2DC0               	goto	u1415
  4633  05C6  0824               	movf	___lmul@multiplier+3,w
  4634  05C7  0423               	iorwf	___lmul@multiplier+2,w
  4635  05C8  0422               	iorwf	___lmul@multiplier+1,w
  4636  05C9  0421               	iorwf	___lmul@multiplier,w
  4637  05CA  1D03               	skipz
  4638  05CB  2DAE               	goto	l2820
  4639  05CC  082C               	movf	___lmul@product+3,w
  4640  05CD  00A4               	movwf	?___lmul+3
  4641  05CE  082B               	movf	___lmul@product+2,w
  4642  05CF  00A3               	movwf	?___lmul+2
  4643  05D0  082A               	movf	___lmul@product+1,w
  4644  05D1  00A2               	movwf	?___lmul+1
  4645  05D2  0829               	movf	___lmul@product,w
  4646  05D3  00A1               	movwf	?___lmul
  4647  05D4  0008               	return
  4648  05D5                     __end_of___lmul:	
  4649                           
  4650                           	psect	text5
  4651  0434                     __ptext5:	
  4652 ;; *************** function ___awmod *****************
  4653 ;; Defined at:
  4654 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
  4655 ;; Parameters:    Size  Location     Type
  4656 ;;  divisor         2   20[BANK0 ] int 
  4657 ;;  dividend        2   22[BANK0 ] int 
  4658 ;; Auto vars:     Size  Location     Type
  4659 ;;  sign            1   26[BANK0 ] unsigned char 
  4660 ;;  counter         1   25[BANK0 ] unsigned char 
  4661 ;; Return value:  Size  Location     Type
  4662 ;;                  2   20[BANK0 ] int 
  4663 ;; Registers used:
  4664 ;;		wreg, status,2, status,0
  4665 ;; Tracked objects:
  4666 ;;		On entry : 0/0
  4667 ;;		On exit  : 0/0
  4668 ;;		Unchanged: 0/0
  4669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4670 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4671 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4672 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4673 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4674 ;;Total ram usage:        7 bytes
  4675 ;; Hardware stack levels used:    1
  4676 ;; Hardware stack levels required when called:    6
  4677 ;; This function calls:
  4678 ;;		Nothing
  4679 ;; This function is called by:
  4680 ;;		_random
  4681 ;; This function uses a non-reentrant model
  4682 ;;
  4683                           
  4684                           
  4685                           ;psect for function ___awmod
  4686  0434                     ___awmod:	
  4687                           
  4688                           ;incstack = 0
  4689                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  4690  0434  0020               	movlb	0	; select bank0
  4691  0435  01BA               	clrf	___awmod@sign
  4692  0436  1FB7               	btfss	___awmod@dividend+1,7
  4693  0437  2C3F               	goto	l2928
  4694  0438  09B6               	comf	___awmod@dividend,f
  4695  0439  09B7               	comf	___awmod@dividend+1,f
  4696  043A  0AB6               	incf	___awmod@dividend,f
  4697  043B  1903               	skipnz
  4698  043C  0AB7               	incf	___awmod@dividend+1,f
  4699  043D  01BA               	clrf	___awmod@sign
  4700  043E  0ABA               	incf	___awmod@sign,f
  4701  043F                     l2928:	
  4702  043F  1FB5               	btfss	___awmod@divisor+1,7
  4703  0440  2C46               	goto	l2932
  4704  0441  09B4               	comf	___awmod@divisor,f
  4705  0442  09B5               	comf	___awmod@divisor+1,f
  4706  0443  0AB4               	incf	___awmod@divisor,f
  4707  0444  1903               	skipnz
  4708  0445  0AB5               	incf	___awmod@divisor+1,f
  4709  0446                     l2932:	
  4710  0446  0834               	movf	___awmod@divisor,w
  4711  0447  0435               	iorwf	___awmod@divisor+1,w
  4712  0448  1903               	btfsc	3,2
  4713  0449  2C6D               	goto	l2950
  4714  044A  01B9               	clrf	___awmod@counter
  4715  044B  0AB9               	incf	___awmod@counter,f
  4716  044C                     l2940:	
  4717  044C  1BB5               	btfsc	___awmod@divisor+1,7
  4718  044D  2C58               	goto	l2942
  4719  044E  3001               	movlw	1
  4720  044F                     u1615:	
  4721  044F  35B4               	lslf	___awmod@divisor,f
  4722  0450  0DB5               	rlf	___awmod@divisor+1,f
  4723  0451  0B89               	decfsz	9,f
  4724  0452  2C4F               	goto	u1615
  4725  0453  3001               	movlw	1
  4726  0454  00B8               	movwf	??___awmod
  4727  0455  0838               	movf	??___awmod,w
  4728  0456  07B9               	addwf	___awmod@counter,f
  4729  0457  2C4C               	goto	l2940
  4730  0458                     l2942:	
  4731  0458  0835               	movf	___awmod@divisor+1,w
  4732  0459  0237               	subwf	___awmod@dividend+1,w
  4733  045A  1D03               	skipz
  4734  045B  2C5E               	goto	u1635
  4735  045C  0834               	movf	___awmod@divisor,w
  4736  045D  0236               	subwf	___awmod@dividend,w
  4737  045E                     u1635:	
  4738  045E  1C03               	skipc
  4739  045F  2C64               	goto	l2946
  4740  0460  0834               	movf	___awmod@divisor,w
  4741  0461  02B6               	subwf	___awmod@dividend,f
  4742  0462  0835               	movf	___awmod@divisor+1,w
  4743  0463  3BB7               	subwfb	___awmod@dividend+1,f
  4744  0464                     l2946:	
  4745  0464  3001               	movlw	1
  4746  0465                     u1645:	
  4747  0465  36B5               	lsrf	___awmod@divisor+1,f
  4748  0466  0CB4               	rrf	___awmod@divisor,f
  4749  0467  0B89               	decfsz	9,f
  4750  0468  2C65               	goto	u1645
  4751  0469  3001               	movlw	1
  4752  046A  02B9               	subwf	___awmod@counter,f
  4753  046B  1D03               	btfss	3,2
  4754  046C  2C58               	goto	l2942
  4755  046D                     l2950:	
  4756  046D  083A               	movf	___awmod@sign,w
  4757  046E  1903               	btfsc	3,2
  4758  046F  2C75               	goto	l2954
  4759  0470  09B6               	comf	___awmod@dividend,f
  4760  0471  09B7               	comf	___awmod@dividend+1,f
  4761  0472  0AB6               	incf	___awmod@dividend,f
  4762  0473  1903               	skipnz
  4763  0474  0AB7               	incf	___awmod@dividend+1,f
  4764  0475                     l2954:	
  4765  0475  0837               	movf	___awmod@dividend+1,w
  4766  0476  00B5               	movwf	?___awmod+1
  4767  0477  0836               	movf	___awmod@dividend,w
  4768  0478  00B4               	movwf	?___awmod
  4769  0479  0008               	return
  4770  047A                     __end_of___awmod:	
  4771                           
  4772                           	psect	text6
  4773  01F7                     __ptext6:	
  4774 ;; *************** function _initializeDisplay *****************
  4775 ;; Defined at:
  4776 ;;		line 99 in file "main.c"
  4777 ;; Parameters:    Size  Location     Type
  4778 ;;		None
  4779 ;; Auto vars:     Size  Location     Type
  4780 ;;		None
  4781 ;; Return value:  Size  Location     Type
  4782 ;;                  1    wreg      void 
  4783 ;; Registers used:
  4784 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4785 ;; Tracked objects:
  4786 ;;		On entry : 0/0
  4787 ;;		On exit  : 0/0
  4788 ;;		Unchanged: 0/0
  4789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4790 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4791 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4792 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4793 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4794 ;;Total ram usage:        1 bytes
  4795 ;; Hardware stack levels used:    1
  4796 ;; Hardware stack levels required when called:   15
  4797 ;; This function calls:
  4798 ;;		_i2c_writeNBytes
  4799 ;; This function is called by:
  4800 ;;		_main
  4801 ;; This function uses a non-reentrant model
  4802 ;;
  4803                           
  4804                           
  4805                           ;psect for function _initializeDisplay
  4806  01F7                     _initializeDisplay:	
  4807                           
  4808                           ;main.c: 100: for (i = 0; i < 8; i++) {
  4809                           
  4810                           ;incstack = 0
  4811                           ; Regs used in _initializeDisplay: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4812  01F7  0020               	movlb	0	; select bank0
  4813  01F8  01DB               	clrf	_i
  4814  01F9  3008               	movlw	8
  4815  01FA  025B               	subwf	_i,w
  4816  01FB  1803               	btfsc	3,0
  4817  01FC  2A0C               	goto	l5614
  4818  01FD                     l5608:	
  4819                           
  4820                           ;main.c: 101: pixelbuffer[i] = 0;
  4821  01FD  355B               	lslf	_i,w
  4822  01FE  3EBD               	addlw	(low (_pixelbuffer| 0))& (0+255)
  4823  01FF  0086               	movwf	6
  4824  0200  0187               	clrf	7
  4825  0201  3000               	movlw	0
  4826  0202  3FC0               	movwi [0]fsr1
  4827  0203  3FC1               	movwi [1]fsr1
  4828  0204  3001               	movlw	1
  4829  0205  00B6               	movwf	??_initializeDisplay
  4830  0206  0836               	movf	??_initializeDisplay,w
  4831  0207  07DB               	addwf	_i,f
  4832  0208  3008               	movlw	8
  4833  0209  025B               	subwf	_i,w
  4834  020A  1C03               	skipc
  4835  020B  29FD               	goto	l5608
  4836  020C                     l5614:	
  4837                           
  4838                           ;main.c: 102: }
  4839                           ;main.c: 103: for (i = 0; i < 8; i++) {
  4840  020C  01DB               	clrf	_i
  4841  020D  3008               	movlw	8
  4842  020E  025B               	subwf	_i,w
  4843  020F  1803               	btfsc	3,0
  4844  0210  2A1E               	goto	l5626
  4845  0211                     l5620:	
  4846                           
  4847                           ;main.c: 104: writebuffer[i] = 0;
  4848  0211  085B               	movf	_i,w
  4849  0212  3ECD               	addlw	(low (_writebuffer| 0))& (0+255)
  4850  0213  0086               	movwf	6
  4851  0214  0187               	clrf	7
  4852  0215  0181               	clrf	1
  4853  0216  3001               	movlw	1
  4854  0217  00B6               	movwf	??_initializeDisplay
  4855  0218  0836               	movf	??_initializeDisplay,w
  4856  0219  07DB               	addwf	_i,f
  4857  021A  3008               	movlw	8
  4858  021B  025B               	subwf	_i,w
  4859  021C  1C03               	skipc
  4860  021D  2A11               	goto	l5620
  4861  021E                     l5626:	
  4862                           
  4863                           ;main.c: 105: }
  4864                           ;main.c: 106: for (i = 0; i < 8; i++) {
  4865  021E  01DB               	clrf	_i
  4866  021F  3008               	movlw	8
  4867  0220  025B               	subwf	_i,w
  4868  0221  1803               	btfsc	3,0
  4869  0222  2A30               	goto	l5638
  4870  0223                     l5632:	
  4871                           
  4872                           ;main.c: 107: walls[i] = 0;
  4873  0223  085B               	movf	_i,w
  4874  0224  3E47               	addlw	(low (_walls| 0))& (0+255)
  4875  0225  0086               	movwf	6
  4876  0226  0187               	clrf	7
  4877  0227  0181               	clrf	1
  4878  0228  3001               	movlw	1
  4879  0229  00B6               	movwf	??_initializeDisplay
  4880  022A  0836               	movf	??_initializeDisplay,w
  4881  022B  07DB               	addwf	_i,f
  4882  022C  3008               	movlw	8
  4883  022D  025B               	subwf	_i,w
  4884  022E  1C03               	skipc
  4885  022F  2A23               	goto	l5632
  4886  0230                     l5638:	
  4887                           
  4888                           ;main.c: 108: }
  4889                           ;main.c: 110: writebuffer[0] = 0x21;
  4890  0230  3021               	movlw	33
  4891  0231  00B6               	movwf	??_initializeDisplay
  4892  0232  0836               	movf	??_initializeDisplay,w
  4893  0233  0021               	movlb	1	; select bank1
  4894  0234  00CD               	movwf	_writebuffer^(0+128)
  4895                           
  4896                           ;main.c: 111: i2c_writeNBytes(0x70, writebuffer, 1);
  4897  0235  30CD               	movlw	(low (_writebuffer| 0))& (0+255)
  4898  0236  0020               	movlb	0	; select bank0
  4899  0237  00B6               	movwf	??_initializeDisplay
  4900  0238  0836               	movf	??_initializeDisplay,w
  4901  0239  00B2               	movwf	i2c_writeNBytes@data
  4902  023A  3001               	movlw	1
  4903  023B  00B3               	movwf	i2c_writeNBytes@len
  4904  023C  3000               	movlw	0
  4905  023D  00B4               	movwf	i2c_writeNBytes@len+1
  4906  023E  3070               	movlw	112
  4907  023F  3186  2656  3181   	fcall	_i2c_writeNBytes
  4908                           
  4909                           ;main.c: 114: writebuffer[0] = 0x80 | 0x01;
  4910  0242  3081               	movlw	129
  4911  0243  0020               	movlb	0	; select bank0
  4912  0244  00B6               	movwf	??_initializeDisplay
  4913  0245  0836               	movf	??_initializeDisplay,w
  4914  0246  0021               	movlb	1	; select bank1
  4915  0247  00CD               	movwf	_writebuffer^(0+128)
  4916                           
  4917                           ;main.c: 115: i2c_writeNBytes(0x70, writebuffer, 1);
  4918  0248  30CD               	movlw	(low (_writebuffer| 0))& (0+255)
  4919  0249  0020               	movlb	0	; select bank0
  4920  024A  00B6               	movwf	??_initializeDisplay
  4921  024B  0836               	movf	??_initializeDisplay,w
  4922  024C  00B2               	movwf	i2c_writeNBytes@data
  4923  024D  3001               	movlw	1
  4924  024E  00B3               	movwf	i2c_writeNBytes@len
  4925  024F  3000               	movlw	0
  4926  0250  00B4               	movwf	i2c_writeNBytes@len+1
  4927  0251  3070               	movlw	112
  4928  0252  3186  2656         	fcall	_i2c_writeNBytes
  4929  0254  0008               	return
  4930  0255                     __end_of_initializeDisplay:	
  4931                           
  4932                           	psect	text7
  4933  039F                     __ptext7:	
  4934 ;; *************** function _endGame *****************
  4935 ;; Defined at:
  4936 ;;		line 166 in file "main.c"
  4937 ;; Parameters:    Size  Location     Type
  4938 ;;		None
  4939 ;; Auto vars:     Size  Location     Type
  4940 ;;		None
  4941 ;; Return value:  Size  Location     Type
  4942 ;;                  1    wreg      void 
  4943 ;; Registers used:
  4944 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4945 ;; Tracked objects:
  4946 ;;		On entry : 0/0
  4947 ;;		On exit  : 0/0
  4948 ;;		Unchanged: 0/0
  4949 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4950 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4951 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4952 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4953 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4954 ;;Total ram usage:        2 bytes
  4955 ;; Hardware stack levels used:    1
  4956 ;; Hardware stack levels required when called:   16
  4957 ;; This function calls:
  4958 ;;		_writeDisplay
  4959 ;; This function is called by:
  4960 ;;		_main
  4961 ;; This function uses a non-reentrant model
  4962 ;;
  4963                           
  4964                           
  4965                           ;psect for function _endGame
  4966  039F                     _endGame:	
  4967                           
  4968                           ;main.c: 167: for (i = 0; i < 8; i++) {
  4969                           
  4970                           ;incstack = 0
  4971 ;; hardware stack exceeded
  4972                           ; Regs used in _endGame: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4973  039F  0020               	movlb	0	; select bank0
  4974  03A0  01DB               	clrf	_i
  4975  03A1  3008               	movlw	8
  4976  03A2  025B               	subwf	_i,w
  4977  03A3  1803               	btfsc	3,0
  4978  03A4  2BB5               	goto	l5656
  4979  03A5                     l5650:	
  4980                           
  4981                           ;main.c: 168: pixelbuffer[i] = 0xFF00;
  4982  03A5  355B               	lslf	_i,w
  4983  03A6  3EBD               	addlw	(low (_pixelbuffer| 0))& (0+255)
  4984  03A7  0086               	movwf	6
  4985  03A8  0187               	clrf	7
  4986  03A9  3000               	movlw	0
  4987  03AA  3FC0               	movwi [0]fsr1
  4988  03AB  30FF               	movlw	255
  4989  03AC  3FC1               	movwi [1]fsr1
  4990  03AD  3001               	movlw	1
  4991  03AE  00BB               	movwf	??_endGame
  4992  03AF  083B               	movf	??_endGame,w
  4993  03B0  07DB               	addwf	_i,f
  4994  03B1  3008               	movlw	8
  4995  03B2  025B               	subwf	_i,w
  4996  03B3  1C03               	skipc
  4997  03B4  2BA5               	goto	l5650
  4998  03B5                     l5656:	
  4999                           
  5000                           ;main.c: 169: }
  5001                           ;main.c: 170: writeDisplay();
  5002  03B5  3182  2255  3183   	fcall	_writeDisplay
  5003                           
  5004                           ;main.c: 171: _delay((unsigned long)((200)*(32000000/4000.0)));
  5005  03B8  3009               	movlw	9
  5006  03B9  0020               	movlb	0	; select bank0
  5007  03BA  00BC               	movwf	??_endGame+1
  5008  03BB  301E               	movlw	30
  5009  03BC  00BB               	movwf	??_endGame
  5010  03BD  30E4               	movlw	228
  5011  03BE                     u4827:	
  5012  03BE  0B89               	decfsz	9,f
  5013  03BF  2BBE               	goto	u4827
  5014  03C0  0BBB               	decfsz	??_endGame,f
  5015  03C1  2BBE               	goto	u4827
  5016  03C2  0BBC               	decfsz	??_endGame+1,f
  5017  03C3  2BBE               	goto	u4827
  5018  03C4  0000               	nop
  5019                           
  5020                           ;main.c: 172: for (i = 0; i < 8; i++) {
  5021  03C5  0020               	movlb	0	; select bank0
  5022  03C6  01DB               	clrf	_i
  5023  03C7  3008               	movlw	8
  5024  03C8  025B               	subwf	_i,w
  5025  03C9  1803               	btfsc	3,0
  5026  03CA  2BD8               	goto	l5672
  5027  03CB                     l5666:	
  5028                           
  5029                           ;main.c: 173: walls[i] = 0;
  5030  03CB  085B               	movf	_i,w
  5031  03CC  3E47               	addlw	(low (_walls| 0))& (0+255)
  5032  03CD  0086               	movwf	6
  5033  03CE  0187               	clrf	7
  5034  03CF  0181               	clrf	1
  5035  03D0  3001               	movlw	1
  5036  03D1  00BB               	movwf	??_endGame
  5037  03D2  083B               	movf	??_endGame,w
  5038  03D3  07DB               	addwf	_i,f
  5039  03D4  3008               	movlw	8
  5040  03D5  025B               	subwf	_i,w
  5041  03D6  1C03               	skipc
  5042  03D7  2BCB               	goto	l5666
  5043  03D8                     l5672:	
  5044                           
  5045                           ;main.c: 174: }
  5046                           ;main.c: 175: writeDisplay();
  5047  03D8  3182  2255  3183   	fcall	_writeDisplay
  5048                           
  5049                           ;main.c: 176: start = 0;
  5050  03DB  0020               	movlb	0	; select bank0
  5051  03DC  01DD               	clrf	_start
  5052  03DD                     l5676:	
  5053                           ;main.c: 177: while (!start);
  5054                           
  5055  03DD  085D               	movf	_start,w
  5056  03DE  1903               	btfsc	3,2
  5057  03DF  2BDD               	goto	l5676
  5058                           
  5059                           ;main.c: 178: elevation = 3;
  5060  03E0  3003               	movlw	3
  5061  03E1  00BB               	movwf	??_endGame
  5062  03E2  083B               	movf	??_endGame,w
  5063  03E3  00DE               	movwf	_elevation
  5064                           
  5065                           ;main.c: 179: gravityCounter = 0;
  5066  03E4  01DC               	clrf	_gravityCounter
  5067                           
  5068                           ;main.c: 180: shiftCounter = 0;
  5069  03E5  01CF               	clrf	_shiftCounter
  5070  03E6  01D0               	clrf	_shiftCounter+1
  5071                           
  5072                           ;main.c: 181: score = 0;
  5073  03E7  01D3               	clrf	_score
  5074  03E8  01D4               	clrf	_score+1
  5075  03E9  0008               	return
  5076  03EA                     __end_of_endGame:	
  5077                           
  5078                           	psect	text8
  5079  0255                     __ptext8:	
  5080 ;; *************** function _writeDisplay *****************
  5081 ;; Defined at:
  5082 ;;		line 70 in file "main.c"
  5083 ;; Parameters:    Size  Location     Type
  5084 ;;		None
  5085 ;; Auto vars:     Size  Location     Type
  5086 ;;		None
  5087 ;; Return value:  Size  Location     Type
  5088 ;;                  1    wreg      void 
  5089 ;; Registers used:
  5090 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5091 ;; Tracked objects:
  5092 ;;		On entry : 0/0
  5093 ;;		On exit  : 0/0
  5094 ;;		Unchanged: 0/0
  5095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5096 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5097 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5098 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5099 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5100 ;;Total ram usage:        5 bytes
  5101 ;; Hardware stack levels used:    1
  5102 ;; Hardware stack levels required when called:   15
  5103 ;; This function calls:
  5104 ;;		___awdiv
  5105 ;;		_i2c_writeNBytes
  5106 ;; This function is called by:
  5107 ;;		_endGame
  5108 ;;		_main
  5109 ;; This function uses a non-reentrant model
  5110 ;;
  5111                           
  5112                           
  5113                           ;psect for function _writeDisplay
  5114  0255                     _writeDisplay:	
  5115                           
  5116                           ;main.c: 71: writebuffer[0] = 0;
  5117                           
  5118                           ;incstack = 0
  5119                           ; Regs used in _writeDisplay: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5120  0255  0021               	movlb	1	; select bank1
  5121  0256  01CD               	clrf	_writebuffer^(0+128)
  5122                           
  5123                           ;main.c: 72: for (i = 1; i < 17; i += 2) {
  5124  0257  0020               	movlb	0	; select bank0
  5125  0258  01DB               	clrf	_i
  5126  0259  0ADB               	incf	_i,f
  5127  025A  3011               	movlw	17
  5128  025B  025B               	subwf	_i,w
  5129  025C  1803               	btfsc	3,0
  5130  025D  2AA3               	goto	l5504
  5131  025E                     l5498:	
  5132                           
  5133                           ;main.c: 73: writebuffer[i] = pixelbuffer[i/2] & 0xFF;
  5134  025E  3002               	movlw	2
  5135  025F  00A1               	movwf	___awdiv@divisor
  5136  0260  3000               	movlw	0
  5137  0261  00A2               	movwf	___awdiv@divisor+1
  5138  0262  085B               	movf	_i,w
  5139  0263  00B6               	movwf	??_writeDisplay
  5140  0264  01B7               	clrf	??_writeDisplay+1
  5141  0265  0836               	movf	??_writeDisplay,w
  5142  0266  00A3               	movwf	___awdiv@dividend
  5143  0267  0837               	movf	??_writeDisplay+1,w
  5144  0268  00A4               	movwf	___awdiv@dividend+1
  5145  0269  3182  22AF  3182   	fcall	___awdiv
  5146  026C  0020               	movlb	0	; select bank0
  5147  026D  0821               	movf	?___awdiv,w
  5148  026E  0709               	addwf	9,w
  5149  026F  3EBD               	addlw	(low (_pixelbuffer| 0))& (0+255)
  5150  0270  0086               	movwf	6
  5151  0271  0187               	clrf	7
  5152  0272  0801               	movf	1,w
  5153  0273  00B8               	movwf	??_writeDisplay+2
  5154  0274  085B               	movf	_i,w
  5155  0275  3ECD               	addlw	(low (_writebuffer| 0))& (0+255)
  5156  0276  0086               	movwf	6
  5157  0277  0187               	clrf	7
  5158  0278  0838               	movf	??_writeDisplay+2,w
  5159  0279  0081               	movwf	1
  5160                           
  5161                           ;main.c: 74: writebuffer[i + 1] = pixelbuffer[i/2] >> 8;
  5162  027A  3002               	movlw	2
  5163  027B  00A1               	movwf	___awdiv@divisor
  5164  027C  3000               	movlw	0
  5165  027D  00A2               	movwf	___awdiv@divisor+1
  5166  027E  085B               	movf	_i,w
  5167  027F  00B6               	movwf	??_writeDisplay
  5168  0280  01B7               	clrf	??_writeDisplay+1
  5169  0281  0836               	movf	??_writeDisplay,w
  5170  0282  00A3               	movwf	___awdiv@dividend
  5171  0283  0837               	movf	??_writeDisplay+1,w
  5172  0284  00A4               	movwf	___awdiv@dividend+1
  5173  0285  3182  22AF  3182   	fcall	___awdiv
  5174  0288  0020               	movlb	0	; select bank0
  5175  0289  0821               	movf	?___awdiv,w
  5176  028A  0709               	addwf	9,w
  5177  028B  3EBD               	addlw	(low (_pixelbuffer| 0))& (0+255)
  5178  028C  0086               	movwf	6
  5179  028D  0187               	clrf	7
  5180  028E  3F40               	moviw [0]fsr1
  5181  028F  00B8               	movwf	??_writeDisplay+2
  5182  0290  3F41               	moviw [1]fsr1
  5183  0291  00B9               	movwf	??_writeDisplay+3
  5184  0292  0839               	movf	??_writeDisplay+3,w
  5185  0293  00BA               	movwf	??_writeDisplay+4
  5186  0294  085B               	movf	_i,w
  5187  0295  3E01               	addlw	1
  5188  0296  3ECD               	addlw	(low (_writebuffer| 0))& (0+255)
  5189  0297  0086               	movwf	6
  5190  0298  0187               	clrf	7
  5191  0299  083A               	movf	??_writeDisplay+4,w
  5192  029A  0081               	movwf	1
  5193  029B  3002               	movlw	2
  5194  029C  00B6               	movwf	??_writeDisplay
  5195  029D  0836               	movf	??_writeDisplay,w
  5196  029E  07DB               	addwf	_i,f
  5197  029F  3011               	movlw	17
  5198  02A0  025B               	subwf	_i,w
  5199  02A1  1C03               	skipc
  5200  02A2  2A5E               	goto	l5498
  5201  02A3                     l5504:	
  5202                           
  5203                           ;main.c: 75: }
  5204                           ;main.c: 76: i2c_writeNBytes(0x70, writebuffer, 17);
  5205  02A3  30CD               	movlw	(low (_writebuffer| 0))& (0+255)
  5206  02A4  00B6               	movwf	??_writeDisplay
  5207  02A5  0836               	movf	??_writeDisplay,w
  5208  02A6  00B2               	movwf	i2c_writeNBytes@data
  5209  02A7  3011               	movlw	17
  5210  02A8  00B3               	movwf	i2c_writeNBytes@len
  5211  02A9  3000               	movlw	0
  5212  02AA  00B4               	movwf	i2c_writeNBytes@len+1
  5213  02AB  3070               	movlw	112
  5214  02AC  3186  2656         	fcall	_i2c_writeNBytes
  5215  02AE  0008               	return
  5216  02AF                     __end_of_writeDisplay:	
  5217                           
  5218                           	psect	text9
  5219  0656                     __ptext9:	
  5220 ;; *************** function _i2c_writeNBytes *****************
  5221 ;; Defined at:
  5222 ;;		line 48 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  5223 ;; Parameters:    Size  Location     Type
  5224 ;;  address         1    wreg     unsigned char 
  5225 ;;  data            1   18[BANK0 ] PTR void 
  5226 ;;		 -> writebuffer(17), 
  5227 ;;  len             2   19[BANK0 ] unsigned int 
  5228 ;; Auto vars:     Size  Location     Type
  5229 ;;  address         1   21[BANK0 ] unsigned char 
  5230 ;; Return value:  Size  Location     Type
  5231 ;;                  1    wreg      void 
  5232 ;; Registers used:
  5233 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5234 ;; Tracked objects:
  5235 ;;		On entry : 0/0
  5236 ;;		On exit  : 0/0
  5237 ;;		Unchanged: 0/0
  5238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5239 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5240 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5241 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5242 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5243 ;;Total ram usage:        4 bytes
  5244 ;; Hardware stack levels used:    1
  5245 ;; Hardware stack levels required when called:   14
  5246 ;; This function calls:
  5247 ;;		_i2c_close
  5248 ;;		_i2c_masterWrite
  5249 ;;		_i2c_open
  5250 ;;		_i2c_setAddressNACKCallback
  5251 ;;		_i2c_setBuffer
  5252 ;; This function is called by:
  5253 ;;		_writeDisplay
  5254 ;;		_initializeDisplay
  5255 ;; This function uses a non-reentrant model
  5256 ;;
  5257                           
  5258                           
  5259                           ;psect for function _i2c_writeNBytes
  5260  0656                     _i2c_writeNBytes:	
  5261                           
  5262                           ;incstack = 0
  5263                           ; Regs used in _i2c_writeNBytes: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5264                           ;i2c_writeNBytes@address stored from wreg
  5265  0656  0020               	movlb	0	; select bank0
  5266  0657  00B5               	movwf	i2c_writeNBytes@address
  5267  0658                     l5474:	
  5268                           ;i2c_simple_master.c: 50: while(!i2c_open(address));
  5269                           
  5270  0658  0020               	movlb	0	; select bank0
  5271  0659  0835               	movf	i2c_writeNBytes@address,w
  5272  065A  3183  2351  3186   	fcall	_i2c_open
  5273  065D  3A00               	xorlw	0
  5274  065E  1903               	skipnz
  5275  065F  2E58               	goto	l5474
  5276                           
  5277                           ;i2c_simple_master.c: 51: i2c_setBuffer(data,len);
  5278  0660  0020               	movlb	0	; select bank0
  5279  0661  0834               	movf	i2c_writeNBytes@len+1,w
  5280  0662  00A2               	movwf	i2c_setBuffer@bufferSize+1
  5281  0663  0833               	movf	i2c_writeNBytes@len,w
  5282  0664  00A1               	movwf	i2c_setBuffer@bufferSize
  5283  0665  0832               	movf	i2c_writeNBytes@data,w
  5284  0666  318F  2793  3186   	fcall	_i2c_setBuffer
  5285                           
  5286                           ;i2c_simple_master.c: 52: i2c_setAddressNACKCallback(i2c_restartWrite,(0));
  5287  0669  30F4               	movlw	low _i2c_restartWrite
  5288  066A  0020               	movlb	0	; select bank0
  5289  066B  00A6               	movwf	i2c_setAddressNACKCallback@cb
  5290  066C  300D               	movlw	high _i2c_restartWrite
  5291  066D  00A7               	movwf	i2c_setAddressNACKCallback@cb+1
  5292  066E  01A8               	clrf	i2c_setAddressNACKCallback@p
  5293  066F  318F  2726  3186   	fcall	_i2c_setAddressNACKCallback
  5294                           
  5295                           ;i2c_simple_master.c: 53: i2c_masterWrite();
  5296  0672  318D  25C9  3186   	fcall	_i2c_masterWrite
  5297  0675                     l5482:	
  5298                           ;i2c_simple_master.c: 54: while(I2C_BUSY == i2c_close());
  5299                           
  5300  0675  3187  27CD  3186   	fcall	_i2c_close
  5301  0678  3A01               	xorlw	1
  5302  0679  1D03               	btfss	3,2
  5303  067A  0008               	return
  5304  067B  2E75               	goto	l5482
  5305  067C                     __end_of_i2c_writeNBytes:	
  5306                           
  5307                           	psect	text10
  5308  0F26                     __ptext10:	
  5309 ;; *************** function _i2c_setAddressNACKCallback *****************
  5310 ;; Defined at:
  5311 ;;		line 99 in file "mcc_generated_files/drivers/i2c_master.c"
  5312 ;; Parameters:    Size  Location     Type
  5313 ;;  cb              2    6[BANK0 ] PTR FTN(PTR void ,)enum 
  5314 ;;		 -> i2c_restartWrite(1), 
  5315 ;;  p               1    8[BANK0 ] PTR void 
  5316 ;;		 -> NULL(0), 
  5317 ;; Auto vars:     Size  Location     Type
  5318 ;;		None
  5319 ;; Return value:  Size  Location     Type
  5320 ;;                  1    wreg      void 
  5321 ;; Registers used:
  5322 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5323 ;; Tracked objects:
  5324 ;;		On entry : 0/0
  5325 ;;		On exit  : 0/0
  5326 ;;		Unchanged: 0/0
  5327 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5328 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5329 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5330 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5331 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5332 ;;Total ram usage:        4 bytes
  5333 ;; Hardware stack levels used:    1
  5334 ;; Hardware stack levels required when called:    7
  5335 ;; This function calls:
  5336 ;;		_setCallBack
  5337 ;; This function is called by:
  5338 ;;		_i2c_writeNBytes
  5339 ;;		_i2c_write1ByteRegister
  5340 ;;		_i2c_read1ByteRegister
  5341 ;;		_i2c_read2ByteRegister
  5342 ;;		_i2c_write2ByteRegister
  5343 ;;		_i2c_readDataBlock
  5344 ;; This function uses a non-reentrant model
  5345 ;;
  5346                           
  5347                           
  5348                           ;psect for function _i2c_setAddressNACKCallback
  5349  0F26                     _i2c_setAddressNACKCallback:	
  5350                           
  5351                           ;i2c_master.c: 101: setCallBack(i2c_addressNACK,cb,p);
  5352                           
  5353                           ;incstack = 0
  5354                           ; Regs used in _i2c_setAddressNACKCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  5355  0F26  0020               	movlb	0	; select bank0
  5356  0F27  0827               	movf	i2c_setAddressNACKCallback@cb+1,w
  5357  0F28  00A2               	movwf	setCallBack@cb+1
  5358  0F29  0826               	movf	i2c_setAddressNACKCallback@cb,w
  5359  0F2A  00A1               	movwf	setCallBack@cb
  5360  0F2B  0828               	movf	i2c_setAddressNACKCallback@p,w
  5361  0F2C  00A9               	movwf	??_i2c_setAddressNACKCallback
  5362  0F2D  0829               	movf	??_i2c_setAddressNACKCallback,w
  5363  0F2E  00A3               	movwf	setCallBack@p
  5364  0F2F  3002               	movlw	2
  5365  0F30  3186  26A2         	fcall	_setCallBack
  5366  0F32  0008               	return
  5367  0F33                     __end_of_i2c_setAddressNACKCallback:	
  5368                           
  5369                           	psect	text11
  5370  0351                     __ptext11:	
  5371 ;; *************** function _i2c_open *****************
  5372 ;; Defined at:
  5373 ;;		line 116 in file "mcc_generated_files/drivers/i2c_master.c"
  5374 ;; Parameters:    Size  Location     Type
  5375 ;;  address         1    wreg     unsigned char 
  5376 ;; Auto vars:     Size  Location     Type
  5377 ;;  address         1    4[BANK0 ] unsigned char 
  5378 ;;  ret             1    5[BANK0 ] enum E12166
  5379 ;; Return value:  Size  Location     Type
  5380 ;;                  1    wreg      enum E92
  5381 ;; Registers used:
  5382 ;;		wreg, status,2, status,0, pclath, cstack
  5383 ;; Tracked objects:
  5384 ;;		On entry : 0/0
  5385 ;;		On exit  : 0/0
  5386 ;;		Unchanged: 0/0
  5387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5388 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5389 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5390 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5391 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5392 ;;Total ram usage:        3 bytes
  5393 ;; Hardware stack levels used:    1
  5394 ;; Hardware stack levels required when called:    7
  5395 ;; This function calls:
  5396 ;;		_i2c_driver_open
  5397 ;;		_i2c_driver_setBusCollisionISR
  5398 ;;		_i2c_driver_setI2cISR
  5399 ;;		_mssp_clearIRQ
  5400 ;; This function is called by:
  5401 ;;		_i2c_writeNBytes
  5402 ;;		_i2c_write1ByteRegister
  5403 ;;		_i2c_read1ByteRegister
  5404 ;;		_i2c_read2ByteRegister
  5405 ;;		_i2c_write2ByteRegister
  5406 ;;		_i2c_readDataBlock
  5407 ;;		_i2c_readNBytes
  5408 ;; This function uses a non-reentrant model
  5409 ;;
  5410                           
  5411                           
  5412                           ;psect for function _i2c_open
  5413  0351                     _i2c_open:	
  5414                           
  5415                           ;incstack = 0
  5416                           ; Regs used in _i2c_open: [wreg+status,2+status,0+pclath+cstack]
  5417                           ;i2c_open@address stored from wreg
  5418  0351  0020               	movlb	0	; select bank0
  5419  0352  00A4               	movwf	i2c_open@address
  5420                           
  5421                           ;i2c_master.c: 118: i2c_error_t ret = I2C_BUSY;
  5422  0353  01A5               	clrf	i2c_open@ret
  5423  0354  0AA5               	incf	i2c_open@ret,f
  5424                           
  5425                           ;i2c_master.c: 120: if(!i2c_status.inUse)
  5426  0355  0021               	movlb	1	; select bank1
  5427  0356  18A0               	btfsc	_i2c_status^(0+128),1
  5428  0357  2B9C               	goto	l574
  5429                           
  5430                           ;i2c_master.c: 121: {
  5431                           ;i2c_master.c: 122: i2c_status.address = address;
  5432  0358  0020               	movlb	0	; select bank0
  5433  0359  0824               	movf	i2c_open@address,w
  5434  035A  00A3               	movwf	??_i2c_open
  5435  035B  0823               	movf	??_i2c_open,w
  5436  035C  0021               	movlb	1	; select bank1
  5437  035D  00A1               	movwf	(_i2c_status^(0+128)+1)
  5438                           
  5439                           ;i2c_master.c: 123: i2c_status.busy = 0;
  5440  035E  1020               	bcf	_i2c_status^(0+128),0
  5441                           
  5442                           ;i2c_master.c: 124: i2c_status.inUse = 1;
  5443  035F  14A0               	bsf	_i2c_status^(0+128),1
  5444                           
  5445                           ;i2c_master.c: 125: i2c_status.addressNACKCheck = 0;
  5446  0360  11A0               	bcf	_i2c_status^(0+128),3
  5447                           
  5448                           ;i2c_master.c: 126: i2c_status.state = I2C_RESET;
  5449  0361  300E               	movlw	14
  5450  0362  0020               	movlb	0	; select bank0
  5451  0363  00A3               	movwf	??_i2c_open
  5452  0364  0823               	movf	??_i2c_open,w
  5453  0365  0021               	movlb	1	; select bank1
  5454  0366  00A9               	movwf	(_i2c_status^(0+128)+9)
  5455                           
  5456                           ;i2c_master.c: 127: i2c_status.time_out_value = 500;
  5457  0367  30F4               	movlw	244
  5458  0368  00A7               	movwf	(_i2c_status^(0+128)+7)
  5459  0369  3001               	movlw	1
  5460  036A  00A8               	movwf	(_i2c_status^(0+128)+8)
  5461                           
  5462                           ;i2c_master.c: 128: i2c_status.bufferFree = 1;
  5463  036B  1520               	bsf	_i2c_status^(0+128),2
  5464                           
  5465                           ;i2c_master.c: 131: i2c_status.callbackTable[i2c_dataComplete]=returnStop;
  5466  036C  30FA               	movlw	low _returnStop
  5467  036D  00AB               	movwf	(low ((_i2c_status| 0+11)))^(0+128)
  5468  036E  300D               	movlw	high _returnStop
  5469  036F  00AC               	movwf	((low ((_i2c_status| 0+11)))^(0+128)+1)
  5470                           
  5471                           ;i2c_master.c: 132: i2c_status.callbackPayload[i2c_dataComplete] = (0);
  5472  0370  01B7               	clrf	(low ((_i2c_status| 0+23)))^(0+128)
  5473                           
  5474                           ;i2c_master.c: 133: i2c_status.callbackTable[i2c_writeCollision]=returnStop;
  5475  0371  30FA               	movlw	low _returnStop
  5476  0372  00AD               	movwf	(low ((_i2c_status| 0+13)))^(0+128)
  5477  0373  300D               	movlw	high _returnStop
  5478  0374  00AE               	movwf	((low ((_i2c_status| 0+13)))^(0+128)+1)
  5479                           
  5480                           ;i2c_master.c: 134: i2c_status.callbackPayload[i2c_writeCollision] = (0);
  5481  0375  01B8               	clrf	(low ((_i2c_status| 0+24)))^(0+128)
  5482                           
  5483                           ;i2c_master.c: 135: i2c_status.callbackTable[i2c_addressNACK]=returnStop;
  5484  0376  30FA               	movlw	low _returnStop
  5485  0377  00AF               	movwf	(low ((_i2c_status| 0+15)))^(0+128)
  5486  0378  300D               	movlw	high _returnStop
  5487  0379  00B0               	movwf	((low ((_i2c_status| 0+15)))^(0+128)+1)
  5488                           
  5489                           ;i2c_master.c: 136: i2c_status.callbackPayload[i2c_addressNACK] = (0);
  5490  037A  01B9               	clrf	(low ((_i2c_status| 0+25)))^(0+128)
  5491                           
  5492                           ;i2c_master.c: 137: i2c_status.callbackTable[i2c_dataNACK]=returnStop;
  5493  037B  30FA               	movlw	low _returnStop
  5494  037C  00B1               	movwf	(low ((_i2c_status| 0+17)))^(0+128)
  5495  037D  300D               	movlw	high _returnStop
  5496  037E  00B2               	movwf	((low ((_i2c_status| 0+17)))^(0+128)+1)
  5497                           
  5498                           ;i2c_master.c: 138: i2c_status.callbackPayload[i2c_dataNACK] = (0);
  5499  037F  01BA               	clrf	(low ((_i2c_status| 0+26)))^(0+128)
  5500                           
  5501                           ;i2c_master.c: 139: i2c_status.callbackTable[i2c_timeOut]=returnReset;
  5502  0380  3000               	movlw	low _returnReset
  5503  0381  00B3               	movwf	(low ((_i2c_status| 0+19)))^(0+128)
  5504  0382  300E               	movlw	high _returnReset
  5505  0383  00B4               	movwf	((low ((_i2c_status| 0+19)))^(0+128)+1)
  5506                           
  5507                           ;i2c_master.c: 140: i2c_status.callbackPayload[i2c_timeOut] = (0);
  5508  0384  01BB               	clrf	(low ((_i2c_status| 0+27)))^(0+128)
  5509                           
  5510                           ;i2c_master.c: 142: i2c_driver_open();
  5511  0385  318E  2699  3183   	fcall	_i2c_driver_open
  5512                           
  5513                           ;i2c_master.c: 143: mssp_clearIRQ();
  5514  0388  318D  2585  3183   	fcall	_mssp_clearIRQ
  5515                           
  5516                           ;i2c_master.c: 145: i2c_driver_setBusCollisionISR(i2c_busCollisionISR);
  5517  038B  3070               	movlw	low _i2c_busCollisionISR
  5518  038C  0020               	movlb	0	; select bank0
  5519  038D  00A1               	movwf	i2c_driver_setBusCollisionISR@f
  5520  038E  300D               	movlw	high _i2c_busCollisionISR
  5521  038F  00A2               	movwf	i2c_driver_setBusCollisionISR@f+1
  5522  0390  318E  260C  3183   	fcall	_i2c_driver_setBusCollisionISR
  5523                           
  5524                           ;i2c_master.c: 146: i2c_driver_setI2cISR(i2c_ISR);
  5525  0393  307C               	movlw	low _i2c_ISR
  5526  0394  0020               	movlb	0	; select bank0
  5527  0395  00A1               	movwf	i2c_driver_setI2cISR@f
  5528  0396  3006               	movlw	high _i2c_ISR
  5529  0397  00A2               	movwf	i2c_driver_setI2cISR@f+1
  5530  0398  318E  2612         	fcall	_i2c_driver_setI2cISR
  5531                           
  5532                           ;i2c_master.c: 151: ret = I2C_NOERR;
  5533  039A  0020               	movlb	0	; select bank0
  5534  039B  01A5               	clrf	i2c_open@ret
  5535  039C                     l574:	
  5536                           
  5537                           ;i2c_master.c: 152: }
  5538                           ;i2c_master.c: 153: return ret;
  5539  039C  0020               	movlb	0	; select bank0
  5540  039D  0825               	movf	i2c_open@ret,w
  5541  039E  0008               	return
  5542  039F                     __end_of_i2c_open:	
  5543                           
  5544                           	psect	text12
  5545  0E12                     __ptext12:	
  5546 ;; *************** function _i2c_driver_setI2cISR *****************
  5547 ;; Defined at:
  5548 ;;		line 262 in file "mcc_generated_files/i2c_driver.c"
  5549 ;; Parameters:    Size  Location     Type
  5550 ;;  f               2    1[BANK0 ] PTR void 
  5551 ;;		 -> i2c_ISR(1), 
  5552 ;; Auto vars:     Size  Location     Type
  5553 ;;		None
  5554 ;; Return value:  Size  Location     Type
  5555 ;;                  1    wreg      void 
  5556 ;; Registers used:
  5557 ;;		wreg
  5558 ;; Tracked objects:
  5559 ;;		On entry : 0/0
  5560 ;;		On exit  : 0/0
  5561 ;;		Unchanged: 0/0
  5562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5563 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5564 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5565 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5566 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5567 ;;Total ram usage:        2 bytes
  5568 ;; Hardware stack levels used:    1
  5569 ;; Hardware stack levels required when called:    6
  5570 ;; This function calls:
  5571 ;;		Nothing
  5572 ;; This function is called by:
  5573 ;;		_i2c_open
  5574 ;; This function uses a non-reentrant model
  5575 ;;
  5576                           
  5577                           
  5578                           ;psect for function _i2c_driver_setI2cISR
  5579  0E12                     _i2c_driver_setI2cISR:	
  5580                           
  5581                           ;i2c_driver.c: 263: i2c_driver_i2cISR = f;
  5582                           
  5583                           ;incstack = 0
  5584                           ; Regs used in _i2c_driver_setI2cISR: [wreg]
  5585  0E12  0020               	movlb	0	; select bank0
  5586  0E13  0822               	movf	i2c_driver_setI2cISR@f+1,w
  5587  0E14  00D6               	movwf	_i2c_driver_i2cISR+1
  5588  0E15  0821               	movf	i2c_driver_setI2cISR@f,w
  5589  0E16  00D5               	movwf	_i2c_driver_i2cISR
  5590  0E17  0008               	return
  5591  0E18                     __end_of_i2c_driver_setI2cISR:	
  5592                           
  5593                           	psect	text13
  5594  0E0C                     __ptext13:	
  5595 ;; *************** function _i2c_driver_setBusCollisionISR *****************
  5596 ;; Defined at:
  5597 ;;		line 258 in file "mcc_generated_files/i2c_driver.c"
  5598 ;; Parameters:    Size  Location     Type
  5599 ;;  f               2    1[BANK0 ] PTR void 
  5600 ;;		 -> i2c_busCollisionISR(1), 
  5601 ;; Auto vars:     Size  Location     Type
  5602 ;;		None
  5603 ;; Return value:  Size  Location     Type
  5604 ;;                  1    wreg      void 
  5605 ;; Registers used:
  5606 ;;		wreg
  5607 ;; Tracked objects:
  5608 ;;		On entry : 0/0
  5609 ;;		On exit  : 0/0
  5610 ;;		Unchanged: 0/0
  5611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5612 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5613 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5614 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5615 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5616 ;;Total ram usage:        2 bytes
  5617 ;; Hardware stack levels used:    1
  5618 ;; Hardware stack levels required when called:    6
  5619 ;; This function calls:
  5620 ;;		Nothing
  5621 ;; This function is called by:
  5622 ;;		_i2c_open
  5623 ;; This function uses a non-reentrant model
  5624 ;;
  5625                           
  5626                           
  5627                           ;psect for function _i2c_driver_setBusCollisionISR
  5628  0E0C                     _i2c_driver_setBusCollisionISR:	
  5629                           
  5630                           ;i2c_driver.c: 259: i2c_driver_busCollisionISR = f;
  5631                           
  5632                           ;incstack = 0
  5633                           ; Regs used in _i2c_driver_setBusCollisionISR: [wreg]
  5634  0E0C  0020               	movlb	0	; select bank0
  5635  0E0D  0822               	movf	i2c_driver_setBusCollisionISR@f+1,w
  5636  0E0E  00D8               	movwf	_i2c_driver_busCollisionISR+1
  5637  0E0F  0821               	movf	i2c_driver_setBusCollisionISR@f,w
  5638  0E10  00D7               	movwf	_i2c_driver_busCollisionISR
  5639  0E11  0008               	return
  5640  0E12                     __end_of_i2c_driver_setBusCollisionISR:	
  5641                           
  5642                           	psect	text14
  5643  0E99                     __ptext14:	
  5644 ;; *************** function _i2c_driver_open *****************
  5645 ;; Defined at:
  5646 ;;		line 83 in file "mcc_generated_files/i2c_driver.c"
  5647 ;; Parameters:    Size  Location     Type
  5648 ;;		None
  5649 ;; Auto vars:     Size  Location     Type
  5650 ;;		None
  5651 ;; Return value:  Size  Location     Type
  5652 ;;		None               void
  5653 ;; Registers used:
  5654 ;;		wreg, status,2
  5655 ;; Tracked objects:
  5656 ;;		On entry : 0/0
  5657 ;;		On exit  : 0/0
  5658 ;;		Unchanged: 0/0
  5659 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5660 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5661 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5662 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5663 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5664 ;;Total ram usage:        0 bytes
  5665 ;; Hardware stack levels used:    1
  5666 ;; Hardware stack levels required when called:    6
  5667 ;; This function calls:
  5668 ;;		Nothing
  5669 ;; This function is called by:
  5670 ;;		_i2c_open
  5671 ;; This function uses a non-reentrant model
  5672 ;;
  5673                           
  5674                           
  5675                           ;psect for function _i2c_driver_open
  5676  0E99                     _i2c_driver_open:	
  5677                           
  5678                           ;i2c_driver.c: 85: if(!SSP1CON1bits.SSPEN)
  5679                           
  5680                           ;incstack = 0
  5681                           ; Regs used in _i2c_driver_open: [wreg+status,2]
  5682  0E99  0024               	movlb	4	; select bank4
  5683  0E9A  1A95               	btfsc	21,5	;volatile
  5684  0E9B  0008               	return
  5685                           
  5686                           ;i2c_driver.c: 86: {
  5687                           ;i2c_driver.c: 87: SSP1STAT = 0x00;
  5688  0E9C  0194               	clrf	20	;volatile
  5689                           
  5690                           ;i2c_driver.c: 88: SSP1CON1 = 0x28;
  5691  0E9D  3028               	movlw	40
  5692  0E9E  0095               	movwf	21	;volatile
  5693                           
  5694                           ;i2c_driver.c: 89: SSP1CON2 = 0x00;
  5695  0E9F  0196               	clrf	22	;volatile
  5696                           
  5697                           ;i2c_driver.c: 90: SSP1ADD = 0x4f;
  5698  0EA0  304F               	movlw	79
  5699  0EA1  0092               	movwf	18	;volatile
  5700                           
  5701                           ;i2c_driver.c: 93: else
  5702                           ;i2c_driver.c: 94: return 0;
  5703                           ;	Return value of _i2c_driver_open is never used
  5704                           
  5705                           ;i2c_driver.c: 92: }
  5706                           
  5707                           ;i2c_driver.c: 91: return 1;
  5708                           ;	Return value of _i2c_driver_open is never used
  5709  0EA2  0008               	return
  5710  0EA3                     __end_of_i2c_driver_open:	
  5711                           
  5712                           	psect	text15
  5713  0DC9                     __ptext15:	
  5714 ;; *************** function _i2c_masterWrite *****************
  5715 ;; Defined at:
  5716 ;;		line 222 in file "mcc_generated_files/drivers/i2c_master.c"
  5717 ;; Parameters:    Size  Location     Type
  5718 ;;		None
  5719 ;; Auto vars:     Size  Location     Type
  5720 ;;		None
  5721 ;; Return value:  Size  Location     Type
  5722 ;;                  1    wreg      enum E92
  5723 ;; Registers used:
  5724 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5725 ;; Tracked objects:
  5726 ;;		On entry : 0/0
  5727 ;;		On exit  : 0/0
  5728 ;;		Unchanged: 0/0
  5729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5730 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5731 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5732 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5733 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5734 ;;Total ram usage:        0 bytes
  5735 ;; Hardware stack levels used:    1
  5736 ;; Hardware stack levels required when called:   13
  5737 ;; This function calls:
  5738 ;;		_i2c_masterOperation
  5739 ;; This function is called by:
  5740 ;;		_i2c_writeNBytes
  5741 ;;		_i2c_write1ByteRegister
  5742 ;;		_i2c_read1ByteRegister
  5743 ;;		_i2c_read2ByteRegister
  5744 ;;		_i2c_write2ByteRegister
  5745 ;;		_i2c_readDataBlock
  5746 ;; This function uses a non-reentrant model
  5747 ;;
  5748                           
  5749                           
  5750                           ;psect for function _i2c_masterWrite
  5751  0DC9                     _i2c_masterWrite:	
  5752                           
  5753                           ;i2c_master.c: 224: return i2c_masterOperation(0);
  5754                           ;	Return value of _i2c_masterWrite is never used
  5755                           
  5756                           ;incstack = 0
  5757                           ; Regs used in _i2c_masterWrite: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5758  0DC9  3000               	movlw	0
  5759  0DCA  3186  26C7         	fcall	_i2c_masterOperation
  5760  0DCC  0008               	return
  5761  0DCD                     __end_of_i2c_masterWrite:	
  5762                           
  5763                           	psect	text16
  5764  06C7                     __ptext16:	
  5765 ;; *************** function _i2c_masterOperation *****************
  5766 ;; Defined at:
  5767 ;;		line 193 in file "mcc_generated_files/drivers/i2c_master.c"
  5768 ;; Parameters:    Size  Location     Type
  5769 ;;  read            1    wreg     unsigned char 
  5770 ;; Auto vars:     Size  Location     Type
  5771 ;;  read            1   16[BANK0 ] unsigned char 
  5772 ;;  ret             1   17[BANK0 ] enum E12166
  5773 ;; Return value:  Size  Location     Type
  5774 ;;                  1    wreg      enum E12166
  5775 ;; Registers used:
  5776 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5777 ;; Tracked objects:
  5778 ;;		On entry : 0/0
  5779 ;;		On exit  : 0/0
  5780 ;;		Unchanged: 0/0
  5781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5782 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5783 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5784 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5785 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5786 ;;Total ram usage:        3 bytes
  5787 ;; Hardware stack levels used:    1
  5788 ;; Hardware stack levels required when called:   12
  5789 ;; This function calls:
  5790 ;;		_i2c_driver_start
  5791 ;;		_i2c_poller
  5792 ;;		_mssp_IRQisEnabled
  5793 ;; This function is called by:
  5794 ;;		_i2c_masterWrite
  5795 ;;		_i2c_masterRead
  5796 ;; This function uses a non-reentrant model
  5797 ;;
  5798                           
  5799                           
  5800                           ;psect for function _i2c_masterOperation
  5801  06C7                     _i2c_masterOperation:	
  5802                           
  5803                           ;incstack = 0
  5804                           ; Regs used in _i2c_masterOperation: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5805                           ;i2c_masterOperation@read stored from wreg
  5806  06C7  0020               	movlb	0	; select bank0
  5807  06C8  00B0               	movwf	i2c_masterOperation@read
  5808                           
  5809                           ;i2c_master.c: 195: i2c_error_t ret = I2C_BUSY;
  5810  06C9  01B1               	clrf	i2c_masterOperation@ret
  5811  06CA  0AB1               	incf	i2c_masterOperation@ret,f
  5812                           
  5813                           ;i2c_master.c: 196: if(!i2c_status.busy)
  5814  06CB  0021               	movlb	1	; select bank1
  5815  06CC  1820               	btfsc	_i2c_status^(0+128),0
  5816  06CD  2EE8               	goto	l5428
  5817                           
  5818                           ;i2c_master.c: 197: {
  5819                           ;i2c_master.c: 198: i2c_status.busy = 1;
  5820  06CE  1420               	bsf	_i2c_status^(0+128),0
  5821                           
  5822                           ;i2c_master.c: 199: ret = I2C_NOERR;
  5823  06CF  0020               	movlb	0	; select bank0
  5824  06D0  01B1               	clrf	i2c_masterOperation@ret
  5825                           
  5826                           ;i2c_master.c: 201: if(read)
  5827  06D1  0830               	movf	i2c_masterOperation@read,w
  5828  06D2  1903               	btfsc	3,2
  5829  06D3  2ED8               	goto	l5422
  5830                           
  5831                           ;i2c_master.c: 202: {
  5832                           ;i2c_master.c: 203: i2c_status.state = I2C_SEND_ADR_READ;
  5833  06D4  0021               	movlb	1	; select bank1
  5834  06D5  01A9               	clrf	(_i2c_status^(0+128)+9)
  5835  06D6  0AA9               	incf	(_i2c_status^(0+128)+9),f
  5836                           
  5837                           ;i2c_master.c: 204: }
  5838  06D7  2EDE               	goto	l5424
  5839  06D8                     l5422:	
  5840                           
  5841                           ;i2c_master.c: 205: else
  5842                           ;i2c_master.c: 206: {
  5843                           ;i2c_master.c: 207: i2c_status.state = I2C_SEND_ADR_WRITE;
  5844  06D8  3002               	movlw	2
  5845  06D9  0020               	movlb	0	; select bank0
  5846  06DA  00AF               	movwf	??_i2c_masterOperation
  5847  06DB  082F               	movf	??_i2c_masterOperation,w
  5848  06DC  0021               	movlb	1	; select bank1
  5849  06DD  00A9               	movwf	(_i2c_status^(0+128)+9)
  5850  06DE                     l5424:	
  5851                           
  5852                           ;i2c_master.c: 208: }
  5853                           ;i2c_master.c: 209: i2c_driver_start();
  5854  06DE  318D  258B  3186   	fcall	_i2c_driver_start
  5855                           
  5856                           ;i2c_master.c: 211: if(! mssp_IRQisEnabled())
  5857  06E1  318E  268F  3186   	fcall	_mssp_IRQisEnabled
  5858  06E4  1803               	btfsc	3,0
  5859  06E5  2EE8               	goto	l5428
  5860                           
  5861                           ;i2c_master.c: 212: i2c_poller();
  5862  06E6  318E  26C4         	fcall	_i2c_poller
  5863  06E8                     l5428:	
  5864                           
  5865                           ;i2c_master.c: 213: }
  5866                           ;i2c_master.c: 214: return ret;
  5867  06E8  0020               	movlb	0	; select bank0
  5868  06E9  0831               	movf	i2c_masterOperation@ret,w
  5869  06EA  0008               	return
  5870  06EB                     __end_of_i2c_masterOperation:	
  5871                           
  5872                           	psect	text17
  5873  0E8F                     __ptext17:	
  5874 ;; *************** function _mssp_IRQisEnabled *****************
  5875 ;; Defined at:
  5876 ;;		line 43 in file "mcc_generated_files/i2c_driver.c"
  5877 ;; Parameters:    Size  Location     Type
  5878 ;;		None
  5879 ;; Auto vars:     Size  Location     Type
  5880 ;;		None
  5881 ;; Return value:  Size  Location     Type
  5882 ;;		None               void
  5883 ;; Registers used:
  5884 ;;		wreg, status,2, status,0
  5885 ;; Tracked objects:
  5886 ;;		On entry : 0/0
  5887 ;;		On exit  : 0/0
  5888 ;;		Unchanged: 0/0
  5889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5890 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5891 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5892 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5893 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5894 ;;Total ram usage:        2 bytes
  5895 ;; Hardware stack levels used:    1
  5896 ;; Hardware stack levels required when called:    6
  5897 ;; This function calls:
  5898 ;;		Nothing
  5899 ;; This function is called by:
  5900 ;;		_i2c_masterOperation
  5901 ;; This function uses a non-reentrant model
  5902 ;;
  5903                           
  5904                           
  5905                           ;psect for function _mssp_IRQisEnabled
  5906  0E8F                     _mssp_IRQisEnabled:	
  5907                           
  5908                           ;i2c_driver.c: 45: return PIE1bits.SSP1IE;
  5909                           
  5910                           ;incstack = 0
  5911                           ; Regs used in _mssp_IRQisEnabled: [wreg+status,2+status,0]
  5912  0E8F  0021               	movlb	1	; select bank1
  5913  0E90  0C10               	rrf	16,w	;volatile
  5914  0E91  0020               	movlb	0	; select bank0
  5915  0E92  00A1               	movwf	??_mssp_IRQisEnabled
  5916  0E93  0CA1               	rrf	??_mssp_IRQisEnabled,f
  5917  0E94  0C21               	rrf	??_mssp_IRQisEnabled,w
  5918  0E95  3901               	andlw	1
  5919  0E96  00A2               	movwf	??_mssp_IRQisEnabled+1
  5920  0E97  0C22               	rrf	??_mssp_IRQisEnabled+1,w
  5921  0E98  0008               	return
  5922  0E99                     __end_of_mssp_IRQisEnabled:	
  5923                           
  5924                           	psect	text18
  5925  0EC4                     __ptext18:	
  5926 ;; *************** function _i2c_poller *****************
  5927 ;; Defined at:
  5928 ;;		line 230 in file "mcc_generated_files/drivers/i2c_master.c"
  5929 ;; Parameters:    Size  Location     Type
  5930 ;;		None
  5931 ;; Auto vars:     Size  Location     Type
  5932 ;;		None
  5933 ;; Return value:  Size  Location     Type
  5934 ;;                  1    wreg      void 
  5935 ;; Registers used:
  5936 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5937 ;; Tracked objects:
  5938 ;;		On entry : 0/0
  5939 ;;		On exit  : 0/0
  5940 ;;		Unchanged: 0/0
  5941 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5942 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5943 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5944 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5945 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5946 ;;Total ram usage:        0 bytes
  5947 ;; Hardware stack levels used:    1
  5948 ;; Hardware stack levels required when called:   11
  5949 ;; This function calls:
  5950 ;;		_i2c_ISR
  5951 ;;		_mssp_waitForEvent
  5952 ;; This function is called by:
  5953 ;;		_i2c_masterOperation
  5954 ;; This function uses a non-reentrant model
  5955 ;;
  5956                           
  5957                           
  5958                           ;psect for function _i2c_poller
  5959  0EC4                     _i2c_poller:	
  5960  0EC4                     l5410:	
  5961                           ;i2c_master.c: 232: while(i2c_status.busy)
  5962                           
  5963                           ;incstack = 0
  5964                           ; Regs used in _i2c_poller: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5965                           
  5966  0EC4  0021               	movlb	1	; select bank1
  5967  0EC5  1C20               	btfss	_i2c_status^(0+128),0
  5968  0EC6  0008               	return
  5969                           
  5970                           ;i2c_master.c: 233: {
  5971                           ;i2c_master.c: 234: mssp_waitForEvent((0));
  5972  0EC7  3000               	movlw	0
  5973  0EC8  318E  26B9  318E   	fcall	_mssp_waitForEvent
  5974                           
  5975                           ;i2c_master.c: 235: i2c_ISR();
  5976  0ECB  3186  267C  318E   	fcall	_i2c_ISR
  5977  0ECE  2EC4               	goto	l5410
  5978  0ECF                     __end_of_i2c_poller:	
  5979                           
  5980                           	psect	text19
  5981  0EB9                     __ptext19:	
  5982 ;; *************** function _mssp_waitForEvent *****************
  5983 ;; Defined at:
  5984 ;;		line 68 in file "mcc_generated_files/i2c_driver.c"
  5985 ;; Parameters:    Size  Location     Type
  5986 ;;  timeout         1    wreg     PTR unsigned int 
  5987 ;;		 -> NULL(0), 
  5988 ;; Auto vars:     Size  Location     Type
  5989 ;;  timeout         1    1[BANK0 ] PTR unsigned int 
  5990 ;;		 -> NULL(0), 
  5991 ;; Return value:  Size  Location     Type
  5992 ;;                  1    wreg      void 
  5993 ;; Registers used:
  5994 ;;		wreg
  5995 ;; Tracked objects:
  5996 ;;		On entry : 0/0
  5997 ;;		On exit  : 0/0
  5998 ;;		Unchanged: 0/0
  5999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6001 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6002 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6003 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6004 ;;Total ram usage:        1 bytes
  6005 ;; Hardware stack levels used:    1
  6006 ;; Hardware stack levels required when called:    6
  6007 ;; This function calls:
  6008 ;;		Nothing
  6009 ;; This function is called by:
  6010 ;;		_i2c_poller
  6011 ;; This function uses a non-reentrant model
  6012 ;;
  6013                           
  6014                           
  6015                           ;psect for function _mssp_waitForEvent
  6016  0EB9                     _mssp_waitForEvent:	
  6017                           
  6018                           ;i2c_driver.c: 73: if(PIR1bits.SSP1IF == 0)
  6019                           
  6020                           ;incstack = 0
  6021                           ; Regs used in _mssp_waitForEvent: [wreg]
  6022  0EB9  0020               	movlb	0	; select bank0
  6023  0EBA  1990               	btfsc	16,3	;volatile
  6024  0EBB  0008               	return
  6025  0EBC                     l284:	
  6026                           ;i2c_driver.c: 74: {
  6027                           ;i2c_driver.c: 75: while(1)
  6028                           
  6029                           
  6030                           ;i2c_driver.c: 76: {
  6031                           ;i2c_driver.c: 77: if(PIR1bits.SSP1IF) break;
  6032  0EBC  0020               	movlb	0	; select bank0
  6033  0EBD  1990               	btfsc	16,3	;volatile
  6034  0EBE  0008               	return
  6035                           
  6036                           ;i2c_driver.c: 78: _delay((unsigned long)((100)*(32000000/4000000.0)));
  6037  0EBF  30A0               	movlw	160
  6038  0EC0                     u4837:	
  6039  0EC0  3200               	nop2
  6040  0EC1  0B89               	decfsz	9,f
  6041  0EC2  2EC0               	goto	u4837
  6042  0EC3  2EBC               	goto	l284
  6043  0EC4                     __end_of_mssp_waitForEvent:	
  6044                           
  6045                           	psect	text20
  6046  067C                     __ptext20:	
  6047 ;; *************** function _i2c_ISR *****************
  6048 ;; Defined at:
  6049 ;;		line 419 in file "mcc_generated_files/drivers/i2c_master.c"
  6050 ;; Parameters:    Size  Location     Type
  6051 ;;		None
  6052 ;; Auto vars:     Size  Location     Type
  6053 ;;		None
  6054 ;; Return value:  Size  Location     Type
  6055 ;;                  1    wreg      void 
  6056 ;; Registers used:
  6057 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6058 ;; Tracked objects:
  6059 ;;		On entry : 0/0
  6060 ;;		On exit  : 0/0
  6061 ;;		Unchanged: 0/0
  6062 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6063 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6064 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6065 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6066 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6067 ;;Total ram usage:        1 bytes
  6068 ;; Hardware stack levels used:    1
  6069 ;; Hardware stack levels required when called:   10
  6070 ;; This function calls:
  6071 ;;		_do_I2C_DO_ACK
  6072 ;;		_do_I2C_DO_ADDRESS_NACK
  6073 ;;		_do_I2C_DO_NACK_RESTART
  6074 ;;		_do_I2C_DO_NACK_STOP
  6075 ;;		_do_I2C_IDLE
  6076 ;;		_do_I2C_RCEN
  6077 ;;		_do_I2C_RESET
  6078 ;;		_do_I2C_RX
  6079 ;;		_do_I2C_SEND_ADR_READ
  6080 ;;		_do_I2C_SEND_ADR_WRITE
  6081 ;;		_do_I2C_SEND_RESTART
  6082 ;;		_do_I2C_SEND_RESTART_READ
  6083 ;;		_do_I2C_SEND_RESTART_WRITE
  6084 ;;		_do_I2C_SEND_STOP
  6085 ;;		_do_I2C_TX
  6086 ;;		_do_I2C_TX_EMPTY
  6087 ;;		_i2c_driver_isNACK
  6088 ;;		_mssp_clearIRQ
  6089 ;; This function is called by:
  6090 ;;		_i2c_open
  6091 ;;		_i2c_poller
  6092 ;;		_INTERRUPT_InterruptManager
  6093 ;; This function uses a non-reentrant model
  6094 ;;
  6095                           
  6096                           
  6097                           ;psect for function _i2c_ISR
  6098  067C                     _i2c_ISR:	
  6099                           
  6100                           ;Skip over the trampoline to the duplicate function for level 1
  6101  067C  1C7E               	btfss	126,0
  6102  067D  2E80               	goto	l5394
  6103  067E  3187  2F52         	ljmp	i1l5686
  6104  0680                     _i2c_ISR$intlevel0:	
  6105  0680                     l5394:	
  6106                           ;incstack = 0
  6107                           ; Regs used in _i2c_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6108                           
  6109                           
  6110                           ;i2c_master.c: 421: mssp_clearIRQ();
  6111  0680  318D  2585  3186   	fcall	_mssp_clearIRQ
  6112                           
  6113                           ;i2c_master.c: 427: if(i2c_status.addressNACKCheck && i2c_driver_isNACK())
  6114  0683  0021               	movlb	1	; select bank1
  6115  0684  1DA0               	btfss	_i2c_status^(0+128),3
  6116  0685  2E91               	goto	l5402
  6117  0686  318F  2719  3186   	fcall	_i2c_driver_isNACK
  6118  0689  1C03               	btfss	3,0
  6119  068A  2E91               	goto	l5402
  6120                           
  6121                           ;i2c_master.c: 428: {
  6122                           ;i2c_master.c: 429: i2c_status.state = I2C_ADDRESS_NACK;
  6123  068B  300F               	movlw	15
  6124  068C  0020               	movlb	0	; select bank0
  6125  068D  00AE               	movwf	??_i2c_ISR
  6126  068E  082E               	movf	??_i2c_ISR,w
  6127  068F  0021               	movlb	1	; select bank1
  6128  0690  00A9               	movwf	(_i2c_status^(0+128)+9)
  6129  0691                     l5402:	
  6130                           
  6131                           ;i2c_master.c: 430: }
  6132                           ;i2c_master.c: 432: i2c_status.state = fsmStateTable[i2c_status.state]();
  6133  0691  0021               	movlb	1	; select bank1
  6134  0692  3529               	lslf	(_i2c_status^(0+128)+9),w
  6135  0693  3E20               	addlw	(low (_fsmStateTable| (0+256)))& (0+255)
  6136  0694  0086               	movwf	6
  6137  0695  3001               	movlw	1	; select bank2/3
  6138  0696  0087               	movwf	7
  6139  0697  3F41               	moviw [1]fsr1
  6140  0698  008A               	movwf	10
  6141  0699  3F40               	moviw [0]fsr1
  6142  069A  000A               	callw
  6143  069B  3186               	pagesel	$
  6144  069C  0020               	movlb	0	; select bank0
  6145  069D  00AE               	movwf	??_i2c_ISR
  6146  069E  082E               	movf	??_i2c_ISR,w
  6147  069F  0021               	movlb	1	; select bank1
  6148  06A0  00A9               	movwf	(_i2c_status^(0+128)+9)
  6149  06A1  0008               	return
  6150  06A2                     __end_of_i2c_ISR:	
  6151                           
  6152                           	psect	text21
  6153  047A                     __ptext21:	
  6154 ;; *************** function _do_I2C_RX *****************
  6155 ;; Defined at:
  6156 ;;		line 357 in file "mcc_generated_files/drivers/i2c_master.c"
  6157 ;; Parameters:    Size  Location     Type
  6158 ;;		None
  6159 ;; Auto vars:     Size  Location     Type
  6160 ;;		None
  6161 ;; Return value:  Size  Location     Type
  6162 ;;                  1    wreg      enum E12337
  6163 ;; Registers used:
  6164 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6165 ;; Tracked objects:
  6166 ;;		On entry : 0/0
  6167 ;;		On exit  : 0/0
  6168 ;;		Unchanged: 0/0
  6169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6170 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6171 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6172 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6173 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6174 ;;Total ram usage:        1 bytes
  6175 ;; Hardware stack levels used:    1
  6176 ;; Hardware stack levels required when called:    9
  6177 ;; This function calls:
  6178 ;;		Absolute function
  6179 ;;		_do_I2C_DO_NACK_RESTART
  6180 ;;		_do_I2C_DO_NACK_STOP
  6181 ;;		_i2c_driver_getRXData
  6182 ;;		_i2c_driver_sendACK
  6183 ;;		_i2c_restartWrite
  6184 ;;		_rd1RegCompleteHandler
  6185 ;;		_rd2RegCompleteHandler
  6186 ;;		_rdBlkRegCompleteHandler
  6187 ;;		_returnReset
  6188 ;;		_returnStop
  6189 ;;		_wr1RegCompleteHandler
  6190 ;;		_wr2RegCompleteHandler
  6191 ;; This function is called by:
  6192 ;;		_i2c_ISR
  6193 ;;		i1_i2c_ISR
  6194 ;; This function uses a non-reentrant model
  6195 ;;
  6196                           
  6197                           
  6198                           ;psect for function _do_I2C_RX
  6199  047A                     _do_I2C_RX:	
  6200                           
  6201                           ;Skip over the trampoline to the duplicate function for level 1
  6202  047A  1C7E               	btfss	126,0
  6203  047B  2C7E               	goto	l5348
  6204  047C  3184  2CC0         	ljmp	i1l5552
  6205  047E                     _do_I2C_RX$intlevel0:	
  6206  047E                     l5348:	
  6207                           ;incstack = 0
  6208                           ; Regs used in _do_I2C_RX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6209                           
  6210                           
  6211                           ;i2c_master.c: 359: *i2c_status.data_ptr++ = i2c_driver_getRXData();
  6212  047E  318D  2597  3184   	fcall	_i2c_driver_getRXData
  6213  0481  0020               	movlb	0	; select bank0
  6214  0482  00AB               	movwf	??_do_I2C_RX
  6215  0483  0021               	movlb	1	; select bank1
  6216  0484  0822               	movf	(low ((_i2c_status| 0+2)))^(0+128),w
  6217  0485  0086               	movwf	6
  6218  0486  0187               	clrf	7
  6219  0487  0020               	movlb	0	; select bank0
  6220  0488  082B               	movf	??_do_I2C_RX,w
  6221  0489  0081               	movwf	1
  6222  048A  3001               	movlw	1
  6223  048B  00AB               	movwf	??_do_I2C_RX
  6224  048C  082B               	movf	??_do_I2C_RX,w
  6225  048D  0021               	movlb	1	; select bank1
  6226  048E  07A2               	addwf	(low ((_i2c_status| 0+2)))^(0+128),f
  6227                           
  6228                           ;i2c_master.c: 360: if(--i2c_status.data_length)
  6229  048F  3001               	movlw	1
  6230  0490  02A3               	subwf	(_i2c_status^(0+128)+3),f
  6231  0491  3000               	movlw	0
  6232  0492  3BA4               	subwfb	((_i2c_status+1)^(0+128)+3),f
  6233  0493  0823               	movf	(_i2c_status^(0+128)+3),w
  6234  0494  0424               	iorwf	((_i2c_status+1)^(0+128)+3),w
  6235  0495  1903               	btfsc	3,2
  6236  0496  2C9B               	goto	l671
  6237                           
  6238                           ;i2c_master.c: 361: {
  6239                           ;i2c_master.c: 362: i2c_driver_sendACK();
  6240  0497  318D  25C1         	fcall	_i2c_driver_sendACK
  6241                           
  6242                           ;i2c_master.c: 363: return I2C_RCEN;
  6243  0499  3005               	movlw	5
  6244                           
  6245                           ;i2c_master.c: 364: }
  6246  049A  0008               	return
  6247  049B                     l671:	
  6248                           
  6249                           ;i2c_master.c: 365: else
  6250                           ;i2c_master.c: 366: {
  6251                           ;i2c_master.c: 367: i2c_status.bufferFree = 1;
  6252  049B  1520               	bsf	_i2c_status^(0+128),2
  6253                           
  6254                           ;i2c_master.c: 368: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
  6255  049C  2CA3               	goto	l5372
  6256  049D                     l5362:	
  6257                           ;i2c_master.c: 369: {
  6258                           ;i2c_master.c: 370: case i2c_restart_write:
  6259                           
  6260                           
  6261                           ;i2c_master.c: 371: case i2c_restart_read:
  6262                           ;i2c_master.c: 372: return do_I2C_DO_NACK_RESTART();
  6263  049D  318E  266A         	fcall	_do_I2C_DO_NACK_RESTART
  6264  049F  0008               	return
  6265  04A0                     l5366:	
  6266                           ;i2c_master.c: 374: case i2c_continue:
  6267                           
  6268                           ;i2c_master.c: 373: default:
  6269                           
  6270                           
  6271                           ;i2c_master.c: 375: case i2c_stop:
  6272                           ;i2c_master.c: 376: return do_I2C_DO_NACK_STOP();
  6273  04A0  318E  2662         	fcall	_do_I2C_DO_NACK_STOP
  6274                           
  6275                           ;i2c_master.c: 377: }
  6276  04A2  0008               	return
  6277  04A3                     l5372:	
  6278  04A3  0021               	movlb	1	; select bank1
  6279  04A4  0837               	movf	(low ((_i2c_status| 0+23)))^(0+128),w
  6280  04A5  0020               	movlb	0	; select bank0
  6281  04A6  00AB               	movwf	??_do_I2C_RX
  6282  04A7  082B               	movf	??_do_I2C_RX,w
  6283  04A8  00AA               	movwf	returnStop@p
  6284  04A9  300B               	movlw	11
  6285  04AA  3EA0               	addlw	(low (_i2c_status| 0))& (0+255)
  6286  04AB  0086               	movwf	6
  6287  04AC  0187               	clrf	7
  6288  04AD  3F41               	moviw [1]fsr1
  6289  04AE  008A               	movwf	10
  6290  04AF  3F40               	moviw [0]fsr1
  6291  04B0  000A               	callw
  6292  04B1  3184               	pagesel	$
  6293                           
  6294                           ; Switch size 1, requested type "space"
  6295                           ; Number of cases is 4, Range of values is 1 to 4
  6296                           ; switch strategies available:
  6297                           ; Name         Instructions Cycles
  6298                           ; simple_byte           13     7 (average)
  6299                           ; direct_byte           17     9 (fixed)
  6300                           ; jumptable            263     9 (fixed)
  6301                           ;	Chosen strategy is simple_byte
  6302  04B2  3A01               	xorlw	1	; case 1
  6303  04B3  1903               	skipnz
  6304  04B4  2CA0               	goto	l5366
  6305  04B5  3A03               	xorlw	3	; case 2
  6306  04B6  1903               	skipnz
  6307  04B7  2C9D               	goto	l5362
  6308  04B8  3A01               	xorlw	1	; case 3
  6309  04B9  1903               	skipnz
  6310  04BA  2C9D               	goto	l5362
  6311  04BB  3A07               	xorlw	7	; case 4
  6312  04BC  1903               	skipnz
  6313  04BD  2CA0               	goto	l5366
  6314  04BE  2CA0               	goto	l5366
  6315  04BF  0008               	return
  6316  04C0                     __end_of_do_I2C_RX:	
  6317                           
  6318                           	psect	text22
  6319  0301                     __ptext22:	
  6320 ;; *************** function _do_I2C_TX *****************
  6321 ;; Defined at:
  6322 ;;		line 333 in file "mcc_generated_files/drivers/i2c_master.c"
  6323 ;; Parameters:    Size  Location     Type
  6324 ;;		None
  6325 ;; Auto vars:     Size  Location     Type
  6326 ;;		None
  6327 ;; Return value:  Size  Location     Type
  6328 ;;                  1    wreg      enum E12337
  6329 ;; Registers used:
  6330 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6331 ;; Tracked objects:
  6332 ;;		On entry : 0/0
  6333 ;;		On exit  : 0/0
  6334 ;;		Unchanged: 0/0
  6335 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6336 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6337 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6338 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6339 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6340 ;;Total ram usage:        3 bytes
  6341 ;; Hardware stack levels used:    1
  6342 ;; Hardware stack levels required when called:    9
  6343 ;; This function calls:
  6344 ;;		Absolute function
  6345 ;;		_do_I2C_SEND_RESTART_READ
  6346 ;;		_do_I2C_SEND_RESTART_WRITE
  6347 ;;		_do_I2C_SEND_STOP
  6348 ;;		_i2c_driver_TXData
  6349 ;;		_i2c_driver_isNACK
  6350 ;;		_i2c_restartWrite
  6351 ;;		_rd1RegCompleteHandler
  6352 ;;		_rd2RegCompleteHandler
  6353 ;;		_rdBlkRegCompleteHandler
  6354 ;;		_returnReset
  6355 ;;		_returnStop
  6356 ;;		_wr1RegCompleteHandler
  6357 ;;		_wr2RegCompleteHandler
  6358 ;; This function is called by:
  6359 ;;		_i2c_ISR
  6360 ;;		i1_i2c_ISR
  6361 ;; This function uses a non-reentrant model
  6362 ;;
  6363                           
  6364                           
  6365                           ;psect for function _do_I2C_TX
  6366  0301                     _do_I2C_TX:	
  6367                           
  6368                           ;Skip over the trampoline to the duplicate function for level 1
  6369  0301  1C7E               	btfss	126,0
  6370  0302  2B05               	goto	l5318
  6371  0303  3183  2BEA         	ljmp	i1l5522
  6372  0305                     _do_I2C_TX$intlevel0:	
  6373  0305                     l5318:	
  6374                           ;incstack = 0
  6375                           ; Regs used in _do_I2C_TX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6376                           
  6377                           
  6378                           ;i2c_master.c: 335: if(i2c_driver_isNACK())
  6379  0305  318F  2719  3183   	fcall	_i2c_driver_isNACK
  6380  0308  1803               	btfsc	3,0
  6381  0309  2B14               	goto	l5336
  6382  030A  2B31               	goto	l655
  6383  030B                     l5322:	
  6384                           ;i2c_master.c: 338: {
  6385                           ;i2c_master.c: 339: case i2c_restart_read:
  6386                           
  6387                           ;i2c_master.c: 336: {
  6388                           ;i2c_master.c: 337: switch(i2c_status.callbackTable[i2c_dataNACK](i2c_status.callbackPay
      +                          load[i2c_dataNACK]))
  6389                           
  6390                           
  6391                           ;i2c_master.c: 340: return do_I2C_SEND_RESTART_READ();
  6392  030B  318E  263A         	fcall	_do_I2C_SEND_RESTART_READ
  6393  030D  0008               	return
  6394  030E                     l5326:	
  6395                           ;i2c_master.c: 341: case i2c_restart_write:
  6396                           
  6397                           
  6398                           ;i2c_master.c: 342: return do_I2C_SEND_RESTART_WRITE();
  6399  030E  318E  2642         	fcall	_do_I2C_SEND_RESTART_WRITE
  6400  0310  0008               	return
  6401  0311                     l5330:	
  6402                           ;i2c_master.c: 344: case i2c_continue:
  6403                           
  6404                           ;i2c_master.c: 343: default:
  6405                           
  6406                           
  6407                           ;i2c_master.c: 345: case i2c_stop:
  6408                           ;i2c_master.c: 346: return do_I2C_SEND_STOP();
  6409  0311  318E  2652         	fcall	_do_I2C_SEND_STOP
  6410                           
  6411                           ;i2c_master.c: 347: }
  6412  0313  0008               	return
  6413  0314                     l5336:	
  6414  0314  0021               	movlb	1	; select bank1
  6415  0315  083A               	movf	(low ((_i2c_status| 0+26)))^(0+128),w
  6416  0316  0020               	movlb	0	; select bank0
  6417  0317  00AB               	movwf	??_do_I2C_TX
  6418  0318  082B               	movf	??_do_I2C_TX,w
  6419  0319  00AA               	movwf	returnStop@p
  6420  031A  3011               	movlw	17
  6421  031B  3EA0               	addlw	(low (_i2c_status| 0))& (0+255)
  6422  031C  0086               	movwf	6
  6423  031D  0187               	clrf	7
  6424  031E  3F41               	moviw [1]fsr1
  6425  031F  008A               	movwf	10
  6426  0320  3F40               	moviw [0]fsr1
  6427  0321  000A               	callw
  6428  0322  3183               	pagesel	$
  6429                           
  6430                           ; Switch size 1, requested type "space"
  6431                           ; Number of cases is 4, Range of values is 1 to 4
  6432                           ; switch strategies available:
  6433                           ; Name         Instructions Cycles
  6434                           ; simple_byte           13     7 (average)
  6435                           ; direct_byte           17     9 (fixed)
  6436                           ; jumptable            263     9 (fixed)
  6437                           ;	Chosen strategy is simple_byte
  6438  0323  3A01               	xorlw	1	; case 1
  6439  0324  1903               	skipnz
  6440  0325  2B11               	goto	l5330
  6441  0326  3A03               	xorlw	3	; case 2
  6442  0327  1903               	skipnz
  6443  0328  2B0B               	goto	l5322
  6444  0329  3A01               	xorlw	1	; case 3
  6445  032A  1903               	skipnz
  6446  032B  2B0E               	goto	l5326
  6447  032C  3A07               	xorlw	7	; case 4
  6448  032D  1903               	skipnz
  6449  032E  2B11               	goto	l5330
  6450  032F  2B11               	goto	l5330
  6451                           
  6452                           ;i2c_master.c: 348: }
  6453  0330  0008               	return
  6454  0331                     l655:	
  6455                           
  6456                           ;i2c_master.c: 349: else
  6457                           ;i2c_master.c: 350: {
  6458                           ;i2c_master.c: 351: i2c_status.addressNACKCheck = 0;
  6459  0331  0021               	movlb	1	; select bank1
  6460  0332  11A0               	bcf	_i2c_status^(0+128),3
  6461                           
  6462                           ;i2c_master.c: 352: i2c_driver_TXData(*i2c_status.data_ptr++);
  6463  0333  3002               	movlw	2
  6464  0334  3EA0               	addlw	(low (_i2c_status| 0))& (0+255)
  6465  0335  0086               	movwf	6
  6466  0336  0187               	clrf	7
  6467  0337  3F40               	moviw [0]fsr1
  6468  0338  0084               	movwf	4
  6469  0339  0185               	clrf	5
  6470  033A  0A81               	incf	1,f
  6471  033B  0800               	movf	0,w
  6472  033C  318E  2606  3183   	fcall	_i2c_driver_TXData
  6473                           
  6474                           ;i2c_master.c: 353: return (--i2c_status.data_length)?I2C_TX:I2C_TX_EMPTY;
  6475  033F  3001               	movlw	1
  6476  0340  0021               	movlb	1	; select bank1
  6477  0341  02A3               	subwf	(_i2c_status^(0+128)+3),f
  6478  0342  3000               	movlw	0
  6479  0343  3BA4               	subwfb	((_i2c_status+1)^(0+128)+3),f
  6480  0344  0823               	movf	(_i2c_status^(0+128)+3),w
  6481  0345  0424               	iorwf	((_i2c_status+1)^(0+128)+3),w
  6482  0346  1D03               	btfss	3,2
  6483  0347  2B4A               	goto	l5344
  6484  0348  3006               	movlw	6
  6485  0349  2B4B               	goto	L1
  6486  034A                     l5344:	
  6487  034A  3003               	movlw	3
  6488  034B                     L1:	
  6489  034B  0020               	movlb	0	; select bank0
  6490  034C  00AC               	movwf	_do_I2C_TX$1026
  6491  034D  3000               	movlw	0
  6492  034E  00AD               	movwf	_do_I2C_TX$1026+1
  6493  034F  082C               	movf	_do_I2C_TX$1026,w
  6494  0350  0008               	return
  6495  0351                     __end_of_do_I2C_TX:	
  6496                           
  6497                           	psect	text23
  6498  0603                     __ptext23:	
  6499 ;; *************** function _do_I2C_DO_ADDRESS_NACK *****************
  6500 ;; Defined at:
  6501 ;;		line 319 in file "mcc_generated_files/drivers/i2c_master.c"
  6502 ;; Parameters:    Size  Location     Type
  6503 ;;		None
  6504 ;; Auto vars:     Size  Location     Type
  6505 ;;		None
  6506 ;; Return value:  Size  Location     Type
  6507 ;;                  1    wreg      enum E12337
  6508 ;; Registers used:
  6509 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6510 ;; Tracked objects:
  6511 ;;		On entry : 0/0
  6512 ;;		On exit  : 0/0
  6513 ;;		Unchanged: 0/0
  6514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6515 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6516 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6517 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6518 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6519 ;;Total ram usage:        1 bytes
  6520 ;; Hardware stack levels used:    1
  6521 ;; Hardware stack levels required when called:    9
  6522 ;; This function calls:
  6523 ;;		Absolute function
  6524 ;;		_do_I2C_SEND_RESTART
  6525 ;;		_do_I2C_SEND_STOP
  6526 ;;		_i2c_restartWrite
  6527 ;;		_rd1RegCompleteHandler
  6528 ;;		_rd2RegCompleteHandler
  6529 ;;		_rdBlkRegCompleteHandler
  6530 ;;		_returnReset
  6531 ;;		_returnStop
  6532 ;;		_wr1RegCompleteHandler
  6533 ;;		_wr2RegCompleteHandler
  6534 ;; This function is called by:
  6535 ;;		_i2c_ISR
  6536 ;;		i1_i2c_ISR
  6537 ;; This function uses a non-reentrant model
  6538 ;;
  6539                           
  6540                           
  6541                           ;psect for function _do_I2C_DO_ADDRESS_NACK
  6542  0603                     _do_I2C_DO_ADDRESS_NACK:	
  6543                           
  6544                           ;Skip over the trampoline to the duplicate function for level 1
  6545  0603  1C7E               	btfss	126,0
  6546  0604  2E07               	goto	l5302
  6547  0605  3187  2F0F         	ljmp	i1l5506
  6548  0607                     _do_I2C_DO_ADDRESS_NACK$intlevel0:	
  6549  0607                     l5302:	
  6550                           ;incstack = 0
  6551                           ; Regs used in _do_I2C_DO_ADDRESS_NACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6552                           
  6553                           
  6554                           ;i2c_master.c: 321: i2c_status.addressNACKCheck = 0;
  6555  0607  0021               	movlb	1	; select bank1
  6556  0608  11A0               	bcf	_i2c_status^(0+128),3
  6557                           
  6558                           ;i2c_master.c: 322: i2c_status.error = I2C_FAIL;
  6559  0609  3002               	movlw	2
  6560  060A  0020               	movlb	0	; select bank0
  6561  060B  00AB               	movwf	??_do_I2C_DO_ADDRESS_NACK
  6562  060C  082B               	movf	??_do_I2C_DO_ADDRESS_NACK,w
  6563  060D  0021               	movlb	1	; select bank1
  6564  060E  00AA               	movwf	(_i2c_status^(0+128)+10)
  6565                           
  6566                           ;i2c_master.c: 323: switch(i2c_status.callbackTable[i2c_addressNACK](i2c_status.callback
      +                          Payload[i2c_addressNACK]))
  6567  060F  2E16               	goto	l5316
  6568  0610                     l5306:	
  6569                           ;i2c_master.c: 324: {
  6570                           ;i2c_master.c: 325: case i2c_restart_read:
  6571                           
  6572                           
  6573                           ;i2c_master.c: 326: case i2c_restart_write:
  6574                           ;i2c_master.c: 327: return do_I2C_SEND_RESTART();
  6575  0610  318E  264A         	fcall	_do_I2C_SEND_RESTART
  6576  0612  0008               	return
  6577  0613                     l5310:	
  6578                           ;i2c_master.c: 328: default:
  6579                           
  6580                           
  6581                           ;i2c_master.c: 329: return do_I2C_SEND_STOP();
  6582  0613  318E  2652         	fcall	_do_I2C_SEND_STOP
  6583                           
  6584                           ;i2c_master.c: 330: }
  6585  0615  0008               	return
  6586  0616                     l5316:	
  6587  0616  0021               	movlb	1	; select bank1
  6588  0617  0839               	movf	(low ((_i2c_status| 0+25)))^(0+128),w
  6589  0618  0020               	movlb	0	; select bank0
  6590  0619  00AB               	movwf	??_do_I2C_DO_ADDRESS_NACK
  6591  061A  082B               	movf	??_do_I2C_DO_ADDRESS_NACK,w
  6592  061B  00AA               	movwf	returnStop@p
  6593  061C  300F               	movlw	15
  6594  061D  3EA0               	addlw	(low (_i2c_status| 0))& (0+255)
  6595  061E  0086               	movwf	6
  6596  061F  0187               	clrf	7
  6597  0620  3F41               	moviw [1]fsr1
  6598  0621  008A               	movwf	10
  6599  0622  3F40               	moviw [0]fsr1
  6600  0623  000A               	callw
  6601  0624  3186               	pagesel	$
  6602                           
  6603                           ; Switch size 1, requested type "space"
  6604                           ; Number of cases is 2, Range of values is 2 to 3
  6605                           ; switch strategies available:
  6606                           ; Name         Instructions Cycles
  6607                           ; simple_byte            7     4 (average)
  6608                           ; direct_byte           13     9 (fixed)
  6609                           ; jumptable            263     9 (fixed)
  6610                           ;	Chosen strategy is simple_byte
  6611  0625  3A02               	xorlw	2	; case 2
  6612  0626  1903               	skipnz
  6613  0627  2E10               	goto	l5306
  6614  0628  3A01               	xorlw	1	; case 3
  6615  0629  1903               	skipnz
  6616  062A  2E10               	goto	l5306
  6617  062B  2E13               	goto	l5310
  6618  062C  0008               	return
  6619  062D                     __end_of_do_I2C_DO_ADDRESS_NACK:	
  6620                           
  6621                           	psect	text24
  6622  0E6A                     __ptext24:	
  6623 ;; *************** function _do_I2C_DO_NACK_RESTART *****************
  6624 ;; Defined at:
  6625 ;;		line 311 in file "mcc_generated_files/drivers/i2c_master.c"
  6626 ;; Parameters:    Size  Location     Type
  6627 ;;		None
  6628 ;; Auto vars:     Size  Location     Type
  6629 ;;		None
  6630 ;; Return value:  Size  Location     Type
  6631 ;;                  1    wreg      enum E12337
  6632 ;; Registers used:
  6633 ;;		wreg, status,2, status,0, pclath, cstack
  6634 ;; Tracked objects:
  6635 ;;		On entry : 0/0
  6636 ;;		On exit  : 0/0
  6637 ;;		Unchanged: 0/0
  6638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6639 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6640 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6641 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6642 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6643 ;;Total ram usage:        0 bytes
  6644 ;; Hardware stack levels used:    1
  6645 ;; Hardware stack levels required when called:    7
  6646 ;; This function calls:
  6647 ;;		_i2c_driver_sendNACK
  6648 ;; This function is called by:
  6649 ;;		_do_I2C_RX
  6650 ;;		_i2c_ISR
  6651 ;;		i1_i2c_ISR
  6652 ;; This function uses a non-reentrant model
  6653 ;;
  6654                           
  6655                           
  6656                           ;psect for function _do_I2C_DO_NACK_RESTART
  6657  0E6A                     _do_I2C_DO_NACK_RESTART:	
  6658                           
  6659                           ;Skip over the trampoline to the duplicate function for level 1
  6660  0E6A  1C7E               	btfss	126,0
  6661  0E6B  2E6E               	goto	l2530
  6662  0E6C  318D  2DBD         	ljmp	i1l3042
  6663  0E6E                     _do_I2C_DO_NACK_RESTART$intlevel0:	
  6664  0E6E                     l2530:	
  6665                           ;incstack = 0
  6666                           ; Regs used in _do_I2C_DO_NACK_RESTART: [wreg+status,2+status,0+pclath+cstack]
  6667                           
  6668                           
  6669                           ;i2c_master.c: 313: i2c_driver_sendNACK();
  6670  0E6E  318D  25C5         	fcall	_i2c_driver_sendNACK
  6671                           
  6672                           ;i2c_master.c: 314: return I2C_SEND_RESTART;
  6673  0E70  3009               	movlw	9
  6674  0E71  0008               	return
  6675  0E72                     __end_of_do_I2C_DO_NACK_RESTART:	
  6676                           
  6677                           	psect	text25
  6678  0E62                     __ptext25:	
  6679 ;; *************** function _do_I2C_DO_NACK_STOP *****************
  6680 ;; Defined at:
  6681 ;;		line 305 in file "mcc_generated_files/drivers/i2c_master.c"
  6682 ;; Parameters:    Size  Location     Type
  6683 ;;		None
  6684 ;; Auto vars:     Size  Location     Type
  6685 ;;		None
  6686 ;; Return value:  Size  Location     Type
  6687 ;;                  1    wreg      enum E12337
  6688 ;; Registers used:
  6689 ;;		wreg, status,2, status,0, pclath, cstack
  6690 ;; Tracked objects:
  6691 ;;		On entry : 0/0
  6692 ;;		On exit  : 0/0
  6693 ;;		Unchanged: 0/0
  6694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6696 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6697 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6698 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6699 ;;Total ram usage:        0 bytes
  6700 ;; Hardware stack levels used:    1
  6701 ;; Hardware stack levels required when called:    7
  6702 ;; This function calls:
  6703 ;;		_i2c_driver_sendNACK
  6704 ;; This function is called by:
  6705 ;;		_do_I2C_RX
  6706 ;;		_i2c_ISR
  6707 ;;		i1_i2c_ISR
  6708 ;; This function uses a non-reentrant model
  6709 ;;
  6710                           
  6711                           
  6712                           ;psect for function _do_I2C_DO_NACK_STOP
  6713  0E62                     _do_I2C_DO_NACK_STOP:	
  6714                           
  6715                           ;Skip over the trampoline to the duplicate function for level 1
  6716  0E62  1C7E               	btfss	126,0
  6717  0E63  2E66               	goto	l2524
  6718  0E64  318D  2DB9         	ljmp	i1l3036
  6719  0E66                     _do_I2C_DO_NACK_STOP$intlevel0:	
  6720  0E66                     l2524:	
  6721                           ;incstack = 0
  6722                           ; Regs used in _do_I2C_DO_NACK_STOP: [wreg+status,2+status,0+pclath+cstack]
  6723                           
  6724                           
  6725                           ;i2c_master.c: 307: i2c_driver_sendNACK();
  6726  0E66  318D  25C5         	fcall	_i2c_driver_sendNACK
  6727                           
  6728                           ;i2c_master.c: 308: return I2C_SEND_STOP;
  6729  0E68  300A               	movlw	10
  6730  0E69  0008               	return
  6731  0E6A                     __end_of_do_I2C_DO_NACK_STOP:	
  6732                           
  6733                           	psect	text26
  6734  0E5A                     __ptext26:	
  6735 ;; *************** function _do_I2C_DO_ACK *****************
  6736 ;; Defined at:
  6737 ;;		line 299 in file "mcc_generated_files/drivers/i2c_master.c"
  6738 ;; Parameters:    Size  Location     Type
  6739 ;;		None
  6740 ;; Auto vars:     Size  Location     Type
  6741 ;;		None
  6742 ;; Return value:  Size  Location     Type
  6743 ;;                  1    wreg      enum E12337
  6744 ;; Registers used:
  6745 ;;		wreg, status,2, status,0, pclath, cstack
  6746 ;; Tracked objects:
  6747 ;;		On entry : 0/0
  6748 ;;		On exit  : 0/0
  6749 ;;		Unchanged: 0/0
  6750 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6751 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6752 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6753 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6754 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6755 ;;Total ram usage:        0 bytes
  6756 ;; Hardware stack levels used:    1
  6757 ;; Hardware stack levels required when called:    7
  6758 ;; This function calls:
  6759 ;;		_i2c_driver_sendACK
  6760 ;; This function is called by:
  6761 ;;		_i2c_ISR
  6762 ;;		i1_i2c_ISR
  6763 ;; This function uses a non-reentrant model
  6764 ;;
  6765                           
  6766                           
  6767                           ;psect for function _do_I2C_DO_ACK
  6768  0E5A                     _do_I2C_DO_ACK:	
  6769                           
  6770                           ;Skip over the trampoline to the duplicate function for level 1
  6771  0E5A  1C7E               	btfss	126,0
  6772  0E5B  2E5E               	goto	l2592
  6773  0E5C  318D  2DB5         	ljmp	i1l3186
  6774  0E5E                     _do_I2C_DO_ACK$intlevel0:	
  6775  0E5E                     l2592:	
  6776                           ;incstack = 0
  6777                           ; Regs used in _do_I2C_DO_ACK: [wreg+status,2+status,0+pclath+cstack]
  6778                           
  6779                           
  6780                           ;i2c_master.c: 301: i2c_driver_sendACK();
  6781  0E5E  318D  25C1         	fcall	_i2c_driver_sendACK
  6782                           
  6783                           ;i2c_master.c: 302: return I2C_RCEN;
  6784  0E60  3005               	movlw	5
  6785  0E61  0008               	return
  6786  0E62                     __end_of_do_I2C_DO_ACK:	
  6787                           
  6788                           	psect	text27
  6789  0E85                     __ptext27:	
  6790 ;; *************** function _do_I2C_RCEN *****************
  6791 ;; Defined at:
  6792 ;;		line 292 in file "mcc_generated_files/drivers/i2c_master.c"
  6793 ;; Parameters:    Size  Location     Type
  6794 ;;		None
  6795 ;; Auto vars:     Size  Location     Type
  6796 ;;		None
  6797 ;; Return value:  Size  Location     Type
  6798 ;;                  1    wreg      enum E12337
  6799 ;; Registers used:
  6800 ;;		wreg, status,2, status,0, pclath, cstack
  6801 ;; Tracked objects:
  6802 ;;		On entry : 0/0
  6803 ;;		On exit  : 0/0
  6804 ;;		Unchanged: 0/0
  6805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6806 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6807 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6808 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6809 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6810 ;;Total ram usage:        0 bytes
  6811 ;; Hardware stack levels used:    1
  6812 ;; Hardware stack levels required when called:    7
  6813 ;; This function calls:
  6814 ;;		_i2c_driver_startRX
  6815 ;; This function is called by:
  6816 ;;		_i2c_ISR
  6817 ;;		i1_i2c_ISR
  6818 ;; This function uses a non-reentrant model
  6819 ;;
  6820                           
  6821                           
  6822                           ;psect for function _do_I2C_RCEN
  6823  0E85                     _do_I2C_RCEN:	
  6824                           
  6825                           ;Skip over the trampoline to the duplicate function for level 1
  6826  0E85  1C7E               	btfss	126,0
  6827  0E86  2E89               	goto	l2584
  6828  0E87  318D  2DE2         	ljmp	i1l3178
  6829  0E89                     _do_I2C_RCEN$intlevel0:	
  6830  0E89                     l2584:	
  6831                           ;incstack = 0
  6832                           ; Regs used in _do_I2C_RCEN: [wreg+status,2+status,0+pclath+cstack]
  6833                           
  6834                           
  6835                           ;i2c_master.c: 294: i2c_status.addressNACKCheck = 0;
  6836  0E89  0021               	movlb	1	; select bank1
  6837  0E8A  11A0               	bcf	_i2c_status^(0+128),3
  6838                           
  6839                           ;i2c_master.c: 295: i2c_driver_startRX();
  6840  0E8B  318D  2594         	fcall	_i2c_driver_startRX
  6841                           
  6842                           ;i2c_master.c: 296: return I2C_RX;
  6843  0E8D  3004               	movlw	4
  6844  0E8E  0008               	return
  6845  0E8F                     __end_of_do_I2C_RCEN:	
  6846                           
  6847                           	psect	text28
  6848  0EAE                     __ptext28:	
  6849 ;; *************** function _do_I2C_SEND_ADR_WRITE *****************
  6850 ;; Defined at:
  6851 ;;		line 285 in file "mcc_generated_files/drivers/i2c_master.c"
  6852 ;; Parameters:    Size  Location     Type
  6853 ;;		None
  6854 ;; Auto vars:     Size  Location     Type
  6855 ;;		None
  6856 ;; Return value:  Size  Location     Type
  6857 ;;                  1    wreg      enum E12337
  6858 ;; Registers used:
  6859 ;;		wreg, status,2, status,0, pclath, cstack
  6860 ;; Tracked objects:
  6861 ;;		On entry : 0/0
  6862 ;;		On exit  : 0/0
  6863 ;;		Unchanged: 0/0
  6864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6865 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6866 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6867 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6868 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6869 ;;Total ram usage:        0 bytes
  6870 ;; Hardware stack levels used:    1
  6871 ;; Hardware stack levels required when called:    7
  6872 ;; This function calls:
  6873 ;;		_i2c_driver_TXData
  6874 ;; This function is called by:
  6875 ;;		_i2c_ISR
  6876 ;;		i1_i2c_ISR
  6877 ;; This function uses a non-reentrant model
  6878 ;;
  6879                           
  6880                           
  6881                           ;psect for function _do_I2C_SEND_ADR_WRITE
  6882  0EAE                     _do_I2C_SEND_ADR_WRITE:	
  6883                           
  6884                           ;Skip over the trampoline to the duplicate function for level 1
  6885  0EAE  1C7E               	btfss	126,0
  6886  0EAF  2EB2               	goto	l2576
  6887  0EB0  318E  2E2B         	ljmp	i1l3170
  6888  0EB2                     _do_I2C_SEND_ADR_WRITE$intlevel0:	
  6889  0EB2                     l2576:	
  6890                           ;incstack = 0
  6891                           ; Regs used in _do_I2C_SEND_ADR_WRITE: [wreg+status,2+status,0+pclath+cstack]
  6892                           
  6893                           
  6894                           ;i2c_master.c: 287: i2c_status.addressNACKCheck = 1;
  6895  0EB2  0021               	movlb	1	; select bank1
  6896  0EB3  15A0               	bsf	_i2c_status^(0+128),3
  6897                           
  6898                           ;i2c_master.c: 288: i2c_driver_TXData(i2c_status.address << 1);
  6899  0EB4  3521               	lslf	(_i2c_status^(0+128)+1),w
  6900  0EB5  318E  2606         	fcall	_i2c_driver_TXData
  6901                           
  6902                           ;i2c_master.c: 289: return I2C_TX;
  6903  0EB7  3003               	movlw	3
  6904  0EB8  0008               	return
  6905  0EB9                     __end_of_do_I2C_SEND_ADR_WRITE:	
  6906                           
  6907                           	psect	text29
  6908  0EF3                     __ptext29:	
  6909 ;; *************** function _do_I2C_SEND_ADR_READ *****************
  6910 ;; Defined at:
  6911 ;;		line 278 in file "mcc_generated_files/drivers/i2c_master.c"
  6912 ;; Parameters:    Size  Location     Type
  6913 ;;		None
  6914 ;; Auto vars:     Size  Location     Type
  6915 ;;		None
  6916 ;; Return value:  Size  Location     Type
  6917 ;;                  1    wreg      enum E12337
  6918 ;; Registers used:
  6919 ;;		wreg, status,2, status,0, pclath, cstack
  6920 ;; Tracked objects:
  6921 ;;		On entry : 0/0
  6922 ;;		On exit  : 0/0
  6923 ;;		Unchanged: 0/0
  6924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6925 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6926 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6927 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6928 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6929 ;;Total ram usage:        0 bytes
  6930 ;; Hardware stack levels used:    1
  6931 ;; Hardware stack levels required when called:    7
  6932 ;; This function calls:
  6933 ;;		_i2c_driver_TXData
  6934 ;; This function is called by:
  6935 ;;		_i2c_ISR
  6936 ;;		i1_i2c_ISR
  6937 ;; This function uses a non-reentrant model
  6938 ;;
  6939                           
  6940                           
  6941                           ;psect for function _do_I2C_SEND_ADR_READ
  6942  0EF3                     _do_I2C_SEND_ADR_READ:	
  6943                           
  6944                           ;Skip over the trampoline to the duplicate function for level 1
  6945  0EF3  1C7E               	btfss	126,0
  6946  0EF4  2EF7               	goto	l2568
  6947  0EF5  318E  2E32         	ljmp	i1l3162
  6948  0EF7                     _do_I2C_SEND_ADR_READ$intlevel0:	
  6949  0EF7                     l2568:	
  6950                           ;incstack = 0
  6951                           ; Regs used in _do_I2C_SEND_ADR_READ: [wreg+status,2+status,0+pclath+cstack]
  6952                           
  6953                           
  6954                           ;i2c_master.c: 280: i2c_status.addressNACKCheck = 1;
  6955  0EF7  0021               	movlb	1	; select bank1
  6956  0EF8  15A0               	bsf	_i2c_status^(0+128),3
  6957                           
  6958                           ;i2c_master.c: 281: i2c_driver_TXData(i2c_status.address << 1 | 1);
  6959  0EF9  1403               	setc
  6960  0EFA  0D21               	rlf	(_i2c_status^(0+128)+1),w
  6961  0EFB  318E  2606         	fcall	_i2c_driver_TXData
  6962                           
  6963                           ;i2c_master.c: 282: return I2C_RCEN;
  6964  0EFD  3005               	movlw	5
  6965  0EFE  0008               	return
  6966  0EFF                     __end_of_do_I2C_SEND_ADR_READ:	
  6967                           
  6968                           	psect	text30
  6969  0E52                     __ptext30:	
  6970 ;; *************** function _do_I2C_SEND_STOP *****************
  6971 ;; Defined at:
  6972 ;;		line 272 in file "mcc_generated_files/drivers/i2c_master.c"
  6973 ;; Parameters:    Size  Location     Type
  6974 ;;		None
  6975 ;; Auto vars:     Size  Location     Type
  6976 ;;		None
  6977 ;; Return value:  Size  Location     Type
  6978 ;;                  1    wreg      enum E12337
  6979 ;; Registers used:
  6980 ;;		wreg, status,2, status,0, pclath, cstack
  6981 ;; Tracked objects:
  6982 ;;		On entry : 0/0
  6983 ;;		On exit  : 0/0
  6984 ;;		Unchanged: 0/0
  6985 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6986 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6987 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6988 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6989 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6990 ;;Total ram usage:        0 bytes
  6991 ;; Hardware stack levels used:    1
  6992 ;; Hardware stack levels required when called:    7
  6993 ;; This function calls:
  6994 ;;		_i2c_driver_stop
  6995 ;; This function is called by:
  6996 ;;		_do_I2C_DO_ADDRESS_NACK
  6997 ;;		_do_I2C_TX
  6998 ;;		_do_I2C_TX_EMPTY
  6999 ;;		_i2c_ISR
  7000 ;;		i1_i2c_ISR
  7001 ;; This function uses a non-reentrant model
  7002 ;;
  7003                           
  7004                           
  7005                           ;psect for function _do_I2C_SEND_STOP
  7006  0E52                     _do_I2C_SEND_STOP:	
  7007                           
  7008                           ;Skip over the trampoline to the duplicate function for level 1
  7009  0E52  1C7E               	btfss	126,0
  7010  0E53  2E56               	goto	l2518
  7011  0E54  318D  2DB1         	ljmp	i1l3030
  7012  0E56                     _do_I2C_SEND_STOP$intlevel0:	
  7013  0E56                     l2518:	
  7014                           ;incstack = 0
  7015                           ; Regs used in _do_I2C_SEND_STOP: [wreg+status,2+status,0+pclath+cstack]
  7016                           
  7017                           
  7018                           ;i2c_master.c: 274: i2c_driver_stop();
  7019  0E56  318D  2591         	fcall	_i2c_driver_stop
  7020                           
  7021                           ;i2c_master.c: 275: return I2C_IDLE;
  7022  0E58  3000               	movlw	0
  7023  0E59  0008               	return
  7024  0E5A                     __end_of_do_I2C_SEND_STOP:	
  7025                           
  7026                           	psect	text31
  7027  0E4A                     __ptext31:	
  7028 ;; *************** function _do_I2C_SEND_RESTART *****************
  7029 ;; Defined at:
  7030 ;;		line 266 in file "mcc_generated_files/drivers/i2c_master.c"
  7031 ;; Parameters:    Size  Location     Type
  7032 ;;		None
  7033 ;; Auto vars:     Size  Location     Type
  7034 ;;		None
  7035 ;; Return value:  Size  Location     Type
  7036 ;;                  1    wreg      enum E12337
  7037 ;; Registers used:
  7038 ;;		wreg, status,2, status,0, pclath, cstack
  7039 ;; Tracked objects:
  7040 ;;		On entry : 0/0
  7041 ;;		On exit  : 0/0
  7042 ;;		Unchanged: 0/0
  7043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7044 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7045 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7046 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7047 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7048 ;;Total ram usage:        0 bytes
  7049 ;; Hardware stack levels used:    1
  7050 ;; Hardware stack levels required when called:    7
  7051 ;; This function calls:
  7052 ;;		_i2c_driver_restart
  7053 ;; This function is called by:
  7054 ;;		_do_I2C_DO_ADDRESS_NACK
  7055 ;;		_do_I2C_TX_EMPTY
  7056 ;;		_i2c_ISR
  7057 ;;		i1_i2c_ISR
  7058 ;; This function uses a non-reentrant model
  7059 ;;
  7060                           
  7061                           
  7062                           ;psect for function _do_I2C_SEND_RESTART
  7063  0E4A                     _do_I2C_SEND_RESTART:	
  7064                           
  7065                           ;Skip over the trampoline to the duplicate function for level 1
  7066  0E4A  1C7E               	btfss	126,0
  7067  0E4B  2E4E               	goto	l2512
  7068  0E4C  318D  2DAD         	ljmp	i1l3024
  7069  0E4E                     _do_I2C_SEND_RESTART$intlevel0:	
  7070  0E4E                     l2512:	
  7071                           ;incstack = 0
  7072                           ; Regs used in _do_I2C_SEND_RESTART: [wreg+status,2+status,0+pclath+cstack]
  7073                           
  7074                           
  7075                           ;i2c_master.c: 268: i2c_driver_restart();
  7076  0E4E  318D  258E         	fcall	_i2c_driver_restart
  7077                           
  7078                           ;i2c_master.c: 269: return I2C_SEND_ADR_READ;
  7079  0E50  3001               	movlw	1
  7080  0E51  0008               	return
  7081  0E52                     __end_of_do_I2C_SEND_RESTART:	
  7082                           
  7083                           	psect	text32
  7084  0E42                     __ptext32:	
  7085 ;; *************** function _do_I2C_SEND_RESTART_WRITE *****************
  7086 ;; Defined at:
  7087 ;;		line 260 in file "mcc_generated_files/drivers/i2c_master.c"
  7088 ;; Parameters:    Size  Location     Type
  7089 ;;		None
  7090 ;; Auto vars:     Size  Location     Type
  7091 ;;		None
  7092 ;; Return value:  Size  Location     Type
  7093 ;;                  1    wreg      enum E12337
  7094 ;; Registers used:
  7095 ;;		wreg, status,2, status,0, pclath, cstack
  7096 ;; Tracked objects:
  7097 ;;		On entry : 0/0
  7098 ;;		On exit  : 0/0
  7099 ;;		Unchanged: 0/0
  7100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7101 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7102 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7103 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7104 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7105 ;;Total ram usage:        0 bytes
  7106 ;; Hardware stack levels used:    1
  7107 ;; Hardware stack levels required when called:    7
  7108 ;; This function calls:
  7109 ;;		_i2c_driver_restart
  7110 ;; This function is called by:
  7111 ;;		_do_I2C_TX
  7112 ;;		_i2c_ISR
  7113 ;;		i1_i2c_ISR
  7114 ;; This function uses a non-reentrant model
  7115 ;;
  7116                           
  7117                           
  7118                           ;psect for function _do_I2C_SEND_RESTART_WRITE
  7119  0E42                     _do_I2C_SEND_RESTART_WRITE:	
  7120                           
  7121                           ;Skip over the trampoline to the duplicate function for level 1
  7122  0E42  1C7E               	btfss	126,0
  7123  0E43  2E46               	goto	l2506
  7124  0E44  318D  2DA9         	ljmp	i1l3018
  7125  0E46                     _do_I2C_SEND_RESTART_WRITE$intlevel0:	
  7126  0E46                     l2506:	
  7127                           ;incstack = 0
  7128                           ; Regs used in _do_I2C_SEND_RESTART_WRITE: [wreg+status,2+status,0+pclath+cstack]
  7129                           
  7130                           
  7131                           ;i2c_master.c: 262: i2c_driver_restart();
  7132  0E46  318D  258E         	fcall	_i2c_driver_restart
  7133                           
  7134                           ;i2c_master.c: 263: return I2C_SEND_ADR_WRITE;
  7135  0E48  3002               	movlw	2
  7136  0E49  0008               	return
  7137  0E4A                     __end_of_do_I2C_SEND_RESTART_WRITE:	
  7138                           
  7139                           	psect	text33
  7140  0E3A                     __ptext33:	
  7141 ;; *************** function _do_I2C_SEND_RESTART_READ *****************
  7142 ;; Defined at:
  7143 ;;		line 254 in file "mcc_generated_files/drivers/i2c_master.c"
  7144 ;; Parameters:    Size  Location     Type
  7145 ;;		None
  7146 ;; Auto vars:     Size  Location     Type
  7147 ;;		None
  7148 ;; Return value:  Size  Location     Type
  7149 ;;                  1    wreg      enum E12337
  7150 ;; Registers used:
  7151 ;;		wreg, status,2, status,0, pclath, cstack
  7152 ;; Tracked objects:
  7153 ;;		On entry : 0/0
  7154 ;;		On exit  : 0/0
  7155 ;;		Unchanged: 0/0
  7156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7157 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7158 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7159 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7160 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7161 ;;Total ram usage:        0 bytes
  7162 ;; Hardware stack levels used:    1
  7163 ;; Hardware stack levels required when called:    7
  7164 ;; This function calls:
  7165 ;;		_i2c_driver_restart
  7166 ;; This function is called by:
  7167 ;;		_do_I2C_TX
  7168 ;;		_i2c_ISR
  7169 ;;		i1_i2c_ISR
  7170 ;; This function uses a non-reentrant model
  7171 ;;
  7172                           
  7173                           
  7174                           ;psect for function _do_I2C_SEND_RESTART_READ
  7175  0E3A                     _do_I2C_SEND_RESTART_READ:	
  7176                           
  7177                           ;Skip over the trampoline to the duplicate function for level 1
  7178  0E3A  1C7E               	btfss	126,0
  7179  0E3B  2E3E               	goto	l2500
  7180  0E3C  318D  2DA5         	ljmp	i1l3012
  7181  0E3E                     _do_I2C_SEND_RESTART_READ$intlevel0:	
  7182  0E3E                     l2500:	
  7183                           ;incstack = 0
  7184                           ; Regs used in _do_I2C_SEND_RESTART_READ: [wreg+status,2+status,0+pclath+cstack]
  7185                           
  7186                           
  7187                           ;i2c_master.c: 256: i2c_driver_restart();
  7188  0E3E  318D  258E         	fcall	_i2c_driver_restart
  7189                           
  7190                           ;i2c_master.c: 257: return I2C_SEND_ADR_READ;
  7191  0E40  3001               	movlw	1
  7192  0E41  0008               	return
  7193  0E42                     __end_of_do_I2C_SEND_RESTART_READ:	
  7194                           
  7195                           	psect	text34
  7196  0E72                     __ptext34:	
  7197 ;; *************** function _do_I2C_IDLE *****************
  7198 ;; Defined at:
  7199 ;;		line 247 in file "mcc_generated_files/drivers/i2c_master.c"
  7200 ;; Parameters:    Size  Location     Type
  7201 ;;		None
  7202 ;; Auto vars:     Size  Location     Type
  7203 ;;		None
  7204 ;; Return value:  Size  Location     Type
  7205 ;;                  1    wreg      enum E12337
  7206 ;; Registers used:
  7207 ;;		wreg, status,2
  7208 ;; Tracked objects:
  7209 ;;		On entry : 0/0
  7210 ;;		On exit  : 0/0
  7211 ;;		Unchanged: 0/0
  7212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7214 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7215 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7216 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7217 ;;Total ram usage:        0 bytes
  7218 ;; Hardware stack levels used:    1
  7219 ;; Hardware stack levels required when called:    6
  7220 ;; This function calls:
  7221 ;;		Nothing
  7222 ;; This function is called by:
  7223 ;;		_i2c_ISR
  7224 ;;		i1_i2c_ISR
  7225 ;; This function uses a non-reentrant model
  7226 ;;
  7227                           
  7228                           
  7229                           ;psect for function _do_I2C_IDLE
  7230  0E72                     _do_I2C_IDLE:	
  7231                           
  7232                           ;Skip over the trampoline to the duplicate function for level 1
  7233  0E72  1C7E               	btfss	126,0
  7234  0E73  2E76               	goto	l2560
  7235  0E74  318D  2DD2         	ljmp	i1l3154
  7236  0E76                     _do_I2C_IDLE$intlevel0:	
  7237  0E76                     l2560:	
  7238                           ;incstack = 0
  7239                           ; Regs used in _do_I2C_IDLE: [wreg+status,2]
  7240                           
  7241                           
  7242                           ;i2c_master.c: 249: i2c_status.busy = 0;
  7243  0E76  0021               	movlb	1	; select bank1
  7244  0E77  1020               	bcf	_i2c_status^(0+128),0
  7245                           
  7246                           ;i2c_master.c: 250: i2c_status.error = I2C_NOERR;
  7247  0E78  01AA               	clrf	(_i2c_status^(0+128)+10)
  7248                           
  7249                           ;i2c_master.c: 251: return I2C_RESET;
  7250  0E79  300E               	movlw	14
  7251  0E7A  0008               	return
  7252  0E7B                     __end_of_do_I2C_IDLE:	
  7253                           
  7254                           	psect	text35
  7255  0EA3                     __ptext35:	
  7256 ;; *************** function _do_I2C_RESET *****************
  7257 ;; Defined at:
  7258 ;;		line 239 in file "mcc_generated_files/drivers/i2c_master.c"
  7259 ;; Parameters:    Size  Location     Type
  7260 ;;		None
  7261 ;; Auto vars:     Size  Location     Type
  7262 ;;		None
  7263 ;; Return value:  Size  Location     Type
  7264 ;;                  1    wreg      enum E12337
  7265 ;; Registers used:
  7266 ;;		wreg, status,2, status,0, pclath, cstack
  7267 ;; Tracked objects:
  7268 ;;		On entry : 0/0
  7269 ;;		On exit  : 0/0
  7270 ;;		Unchanged: 0/0
  7271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7272 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7273 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7274 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7275 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7276 ;;Total ram usage:        0 bytes
  7277 ;; Hardware stack levels used:    1
  7278 ;; Hardware stack levels required when called:    7
  7279 ;; This function calls:
  7280 ;;		_i2c_driver_resetBus
  7281 ;; This function is called by:
  7282 ;;		_i2c_ISR
  7283 ;;		i1_i2c_ISR
  7284 ;; This function uses a non-reentrant model
  7285 ;;
  7286                           
  7287                           
  7288                           ;psect for function _do_I2C_RESET
  7289  0EA3                     _do_I2C_RESET:	
  7290                           
  7291                           ;Skip over the trampoline to the duplicate function for level 1
  7292  0EA3  1C7E               	btfss	126,0
  7293  0EA4  2EA7               	goto	l2550
  7294  0EA5  318E  2E24         	ljmp	i1l3144
  7295  0EA7                     _do_I2C_RESET$intlevel0:	
  7296  0EA7                     l2550:	
  7297                           ;incstack = 0
  7298                           ; Regs used in _do_I2C_RESET: [wreg+status,2+status,0+pclath+cstack]
  7299                           
  7300                           
  7301                           ;i2c_master.c: 241: i2c_driver_resetBus();
  7302  0EA7  3187  27FF         	fcall	_i2c_driver_resetBus
  7303                           
  7304                           ;i2c_master.c: 242: i2c_status.busy = 0;
  7305  0EA9  0021               	movlb	1	; select bank1
  7306  0EAA  1020               	bcf	_i2c_status^(0+128),0
  7307                           
  7308                           ;i2c_master.c: 243: i2c_status.error = I2C_NOERR;
  7309  0EAB  01AA               	clrf	(_i2c_status^(0+128)+10)
  7310                           
  7311                           ;i2c_master.c: 244: return I2C_RESET;
  7312  0EAC  300E               	movlw	14
  7313  0EAD  0008               	return
  7314  0EAE                     __end_of_do_I2C_RESET:	
  7315                           
  7316                           	psect	text36
  7317  05D5                     __ptext36:	
  7318 ;; *************** function _do_I2C_TX_EMPTY *****************
  7319 ;; Defined at:
  7320 ;;		line 382 in file "mcc_generated_files/drivers/i2c_master.c"
  7321 ;; Parameters:    Size  Location     Type
  7322 ;;		None
  7323 ;; Auto vars:     Size  Location     Type
  7324 ;;		None
  7325 ;; Return value:  Size  Location     Type
  7326 ;;                  1    wreg      enum E12337
  7327 ;; Registers used:
  7328 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7329 ;; Tracked objects:
  7330 ;;		On entry : 0/0
  7331 ;;		On exit  : 0/0
  7332 ;;		Unchanged: 0/0
  7333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7335 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7336 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7337 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7338 ;;Total ram usage:        1 bytes
  7339 ;; Hardware stack levels used:    1
  7340 ;; Hardware stack levels required when called:    9
  7341 ;; This function calls:
  7342 ;;		Absolute function
  7343 ;;		_do_I2C_SEND_RESTART
  7344 ;;		_do_I2C_SEND_STOP
  7345 ;;		_i2c_restartWrite
  7346 ;;		_mssp_setIRQ
  7347 ;;		_rd1RegCompleteHandler
  7348 ;;		_rd2RegCompleteHandler
  7349 ;;		_rdBlkRegCompleteHandler
  7350 ;;		_returnReset
  7351 ;;		_returnStop
  7352 ;;		_wr1RegCompleteHandler
  7353 ;;		_wr2RegCompleteHandler
  7354 ;; This function is called by:
  7355 ;;		_i2c_ISR
  7356 ;;		i1_i2c_ISR
  7357 ;; This function uses a non-reentrant model
  7358 ;;
  7359                           
  7360                           
  7361                           ;psect for function _do_I2C_TX_EMPTY
  7362  05D5                     _do_I2C_TX_EMPTY:	
  7363                           
  7364                           ;Skip over the trampoline to the duplicate function for level 1
  7365  05D5  1C7E               	btfss	126,0
  7366  05D6  2DD9               	goto	l5374
  7367  05D7  3186  2E2D         	ljmp	i1l5578
  7368  05D9                     _do_I2C_TX_EMPTY$intlevel0:	
  7369  05D9                     l5374:	
  7370                           ;incstack = 0
  7371                           ; Regs used in _do_I2C_TX_EMPTY: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7372                           
  7373                           
  7374                           ;i2c_master.c: 384: i2c_status.bufferFree = 1;
  7375  05D9  0021               	movlb	1	; select bank1
  7376  05DA  1520               	bsf	_i2c_status^(0+128),2
  7377                           
  7378                           ;i2c_master.c: 385: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
  7379  05DB  2DE6               	goto	l5392
  7380  05DC                     l5376:	
  7381                           ;i2c_master.c: 386: {
  7382                           ;i2c_master.c: 387: case i2c_restart_read:
  7383                           
  7384                           
  7385                           ;i2c_master.c: 388: case i2c_restart_write:
  7386                           ;i2c_master.c: 389: return do_I2C_SEND_RESTART();
  7387  05DC  318E  264A         	fcall	_do_I2C_SEND_RESTART
  7388  05DE  0008               	return
  7389  05DF                     l5380:	
  7390                           ;i2c_master.c: 390: case i2c_continue:
  7391                           
  7392                           
  7393                           ;i2c_master.c: 391: mssp_setIRQ();
  7394  05DF  318D  259A         	fcall	_mssp_setIRQ
  7395                           
  7396                           ;i2c_master.c: 392: return I2C_TX;
  7397  05E1  3003               	movlw	3
  7398  05E2  0008               	return
  7399  05E3                     l5386:	
  7400                           ;i2c_master.c: 394: case i2c_stop:
  7401                           
  7402                           ;i2c_master.c: 393: default:
  7403                           
  7404                           
  7405                           ;i2c_master.c: 395: return do_I2C_SEND_STOP();
  7406  05E3  318E  2652         	fcall	_do_I2C_SEND_STOP
  7407                           
  7408                           ;i2c_master.c: 396: }
  7409  05E5  0008               	return
  7410  05E6                     l5392:	
  7411  05E6  0021               	movlb	1	; select bank1
  7412  05E7  0837               	movf	(low ((_i2c_status| 0+23)))^(0+128),w
  7413  05E8  0020               	movlb	0	; select bank0
  7414  05E9  00AB               	movwf	??_do_I2C_TX_EMPTY
  7415  05EA  082B               	movf	??_do_I2C_TX_EMPTY,w
  7416  05EB  00AA               	movwf	returnStop@p
  7417  05EC  300B               	movlw	11
  7418  05ED  3EA0               	addlw	(low (_i2c_status| 0))& (0+255)
  7419  05EE  0086               	movwf	6
  7420  05EF  0187               	clrf	7
  7421  05F0  3F41               	moviw [1]fsr1
  7422  05F1  008A               	movwf	10
  7423  05F2  3F40               	moviw [0]fsr1
  7424  05F3  000A               	callw
  7425  05F4  3185               	pagesel	$
  7426                           
  7427                           ; Switch size 1, requested type "space"
  7428                           ; Number of cases is 4, Range of values is 1 to 4
  7429                           ; switch strategies available:
  7430                           ; Name         Instructions Cycles
  7431                           ; simple_byte           13     7 (average)
  7432                           ; direct_byte           17     9 (fixed)
  7433                           ; jumptable            263     9 (fixed)
  7434                           ;	Chosen strategy is simple_byte
  7435  05F5  3A01               	xorlw	1	; case 1
  7436  05F6  1903               	skipnz
  7437  05F7  2DE3               	goto	l5386
  7438  05F8  3A03               	xorlw	3	; case 2
  7439  05F9  1903               	skipnz
  7440  05FA  2DDC               	goto	l5376
  7441  05FB  3A01               	xorlw	1	; case 3
  7442  05FC  1903               	skipnz
  7443  05FD  2DDC               	goto	l5376
  7444  05FE  3A07               	xorlw	7	; case 4
  7445  05FF  1903               	skipnz
  7446  0600  2DDF               	goto	l5380
  7447  0601  2DE3               	goto	l5386
  7448  0602  0008               	return
  7449  0603                     __end_of_do_I2C_TX_EMPTY:	
  7450                           
  7451                           	psect	text37
  7452  0D9A                     __ptext37:	
  7453 ;; *************** function _mssp_setIRQ *****************
  7454 ;; Defined at:
  7455 ;;		line 58 in file "mcc_generated_files/i2c_driver.c"
  7456 ;; Parameters:    Size  Location     Type
  7457 ;;		None
  7458 ;; Auto vars:     Size  Location     Type
  7459 ;;		None
  7460 ;; Return value:  Size  Location     Type
  7461 ;;                  1    wreg      void 
  7462 ;; Registers used:
  7463 ;;		None
  7464 ;; Tracked objects:
  7465 ;;		On entry : 0/0
  7466 ;;		On exit  : 0/0
  7467 ;;		Unchanged: 0/0
  7468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7469 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7470 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7472 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7473 ;;Total ram usage:        0 bytes
  7474 ;; Hardware stack levels used:    1
  7475 ;; Hardware stack levels required when called:    6
  7476 ;; This function calls:
  7477 ;;		Nothing
  7478 ;; This function is called by:
  7479 ;;		_do_I2C_TX_EMPTY
  7480 ;; This function uses a non-reentrant model
  7481 ;;
  7482                           
  7483                           
  7484                           ;psect for function _mssp_setIRQ
  7485  0D9A                     _mssp_setIRQ:	
  7486                           
  7487                           ;i2c_driver.c: 60: PIR1bits.SSP1IF = 1;
  7488                           
  7489                           ;incstack = 0
  7490                           ; Regs used in _mssp_setIRQ: []
  7491  0D9A  0020               	movlb	0	; select bank0
  7492  0D9B  1590               	bsf	16,3	;volatile
  7493  0D9C  0008               	return
  7494  0D9D                     __end_of_mssp_setIRQ:	
  7495                           
  7496                           	psect	text38
  7497  0F19                     __ptext38:	
  7498 ;; *************** function _i2c_driver_isNACK *****************
  7499 ;; Defined at:
  7500 ;;		line 161 in file "mcc_generated_files/i2c_driver.c"
  7501 ;; Parameters:    Size  Location     Type
  7502 ;;		None
  7503 ;; Auto vars:     Size  Location     Type
  7504 ;;		None
  7505 ;; Return value:  Size  Location     Type
  7506 ;;		None               void
  7507 ;; Registers used:
  7508 ;;		wreg, status,2, status,0
  7509 ;; Tracked objects:
  7510 ;;		On entry : 0/0
  7511 ;;		On exit  : 0/0
  7512 ;;		Unchanged: 0/0
  7513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7514 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7515 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7516 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7517 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7518 ;;Total ram usage:        1 bytes
  7519 ;; Hardware stack levels used:    1
  7520 ;; Hardware stack levels required when called:    6
  7521 ;; This function calls:
  7522 ;;		Nothing
  7523 ;; This function is called by:
  7524 ;;		_do_I2C_TX
  7525 ;;		_i2c_ISR
  7526 ;; This function uses a non-reentrant model
  7527 ;;
  7528                           
  7529                           
  7530                           ;psect for function _i2c_driver_isNACK
  7531  0F19                     _i2c_driver_isNACK:	
  7532                           
  7533                           ;i2c_driver.c: 163: return SSP1CON2bits.ACKSTAT = 1;
  7534                           
  7535                           ;incstack = 0
  7536                           ; Regs used in _i2c_driver_isNACK: [wreg+status,2+status,0]
  7537  0F19  0024               	movlb	4	; select bank4
  7538  0F1A  0816               	movf	22,w	;volatile
  7539  0F1B  39BF               	andlw	-65
  7540  0F1C  3840               	iorlw	64
  7541  0F1D  0096               	movwf	22	;volatile
  7542  0F1E  0E16               	swapf	22,w	;volatile
  7543  0F1F  0C89               	rrf	9,f
  7544  0F20  0C89               	rrf	9,f
  7545  0F21  3901               	andlw	1
  7546  0F22  0020               	movlb	0	; select bank0
  7547  0F23  00A1               	movwf	??_i2c_driver_isNACK
  7548  0F24  0C21               	rrf	??_i2c_driver_isNACK,w
  7549  0F25  0008               	return
  7550  0F26                     __end_of_i2c_driver_isNACK:	
  7551                           
  7552                           	psect	text39
  7553  0E06                     __ptext39:	
  7554 ;; *************** function _i2c_driver_TXData *****************
  7555 ;; Defined at:
  7556 ;;		line 186 in file "mcc_generated_files/i2c_driver.c"
  7557 ;; Parameters:    Size  Location     Type
  7558 ;;  d               1    wreg     unsigned char 
  7559 ;; Auto vars:     Size  Location     Type
  7560 ;;  d               1    1[BANK0 ] unsigned char 
  7561 ;; Return value:  Size  Location     Type
  7562 ;;                  1    wreg      void 
  7563 ;; Registers used:
  7564 ;;		wreg
  7565 ;; Tracked objects:
  7566 ;;		On entry : 0/0
  7567 ;;		On exit  : 0/0
  7568 ;;		Unchanged: 0/0
  7569 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7570 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7571 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7572 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7573 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7574 ;;Total ram usage:        1 bytes
  7575 ;; Hardware stack levels used:    1
  7576 ;; Hardware stack levels required when called:    6
  7577 ;; This function calls:
  7578 ;;		Nothing
  7579 ;; This function is called by:
  7580 ;;		_do_I2C_SEND_ADR_READ
  7581 ;;		_do_I2C_SEND_ADR_WRITE
  7582 ;;		_do_I2C_TX
  7583 ;; This function uses a non-reentrant model
  7584 ;;
  7585                           
  7586                           
  7587                           ;psect for function _i2c_driver_TXData
  7588  0E06                     _i2c_driver_TXData:	
  7589                           
  7590                           ;incstack = 0
  7591                           ; Regs used in _i2c_driver_TXData: [wreg]
  7592                           ;i2c_driver_TXData@d stored from wreg
  7593  0E06  0020               	movlb	0	; select bank0
  7594  0E07  00A1               	movwf	i2c_driver_TXData@d
  7595                           
  7596                           ;i2c_driver.c: 188: SSP1BUF = d;
  7597  0E08  0821               	movf	i2c_driver_TXData@d,w
  7598  0E09  0024               	movlb	4	; select bank4
  7599  0E0A  0091               	movwf	17	;volatile
  7600  0E0B  0008               	return
  7601  0E0C                     __end_of_i2c_driver_TXData:	
  7602                           
  7603                           	psect	text40
  7604  0D97                     __ptext40:	
  7605 ;; *************** function _i2c_driver_getRXData *****************
  7606 ;; Defined at:
  7607 ;;		line 171 in file "mcc_generated_files/i2c_driver.c"
  7608 ;; Parameters:    Size  Location     Type
  7609 ;;		None
  7610 ;; Auto vars:     Size  Location     Type
  7611 ;;		None
  7612 ;; Return value:  Size  Location     Type
  7613 ;;                  1    wreg      unsigned char 
  7614 ;; Registers used:
  7615 ;;		wreg
  7616 ;; Tracked objects:
  7617 ;;		On entry : 0/0
  7618 ;;		On exit  : 0/0
  7619 ;;		Unchanged: 0/0
  7620 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7621 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7622 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7623 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7624 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7625 ;;Total ram usage:        0 bytes
  7626 ;; Hardware stack levels used:    1
  7627 ;; Hardware stack levels required when called:    6
  7628 ;; This function calls:
  7629 ;;		Nothing
  7630 ;; This function is called by:
  7631 ;;		_do_I2C_RX
  7632 ;; This function uses a non-reentrant model
  7633 ;;
  7634                           
  7635                           
  7636                           ;psect for function _i2c_driver_getRXData
  7637  0D97                     _i2c_driver_getRXData:	
  7638                           
  7639                           ;i2c_driver.c: 173: return SSP1BUF;
  7640                           
  7641                           ;incstack = 0
  7642                           ; Regs used in _i2c_driver_getRXData: [wreg]
  7643  0D97  0024               	movlb	4	; select bank4
  7644  0D98  0811               	movf	17,w	;volatile
  7645  0D99  0008               	return
  7646  0D9A                     __end_of_i2c_driver_getRXData:	
  7647                           
  7648                           	psect	text41
  7649  0DC5                     __ptext41:	
  7650 ;; *************** function _i2c_driver_sendNACK *****************
  7651 ;; Defined at:
  7652 ;;		line 202 in file "mcc_generated_files/i2c_driver.c"
  7653 ;; Parameters:    Size  Location     Type
  7654 ;;		None
  7655 ;; Auto vars:     Size  Location     Type
  7656 ;;		None
  7657 ;; Return value:  Size  Location     Type
  7658 ;;                  1    wreg      void 
  7659 ;; Registers used:
  7660 ;;		None
  7661 ;; Tracked objects:
  7662 ;;		On entry : 0/0
  7663 ;;		On exit  : 0/0
  7664 ;;		Unchanged: 0/0
  7665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7666 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7667 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7668 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7669 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7670 ;;Total ram usage:        0 bytes
  7671 ;; Hardware stack levels used:    1
  7672 ;; Hardware stack levels required when called:    6
  7673 ;; This function calls:
  7674 ;;		Nothing
  7675 ;; This function is called by:
  7676 ;;		_do_I2C_DO_NACK_STOP
  7677 ;;		_do_I2C_DO_NACK_RESTART
  7678 ;; This function uses a non-reentrant model
  7679 ;;
  7680                           
  7681                           
  7682                           ;psect for function _i2c_driver_sendNACK
  7683  0DC5                     _i2c_driver_sendNACK:	
  7684                           
  7685                           ;i2c_driver.c: 204: SSP1CON2bits.ACKDT = 1;
  7686                           
  7687                           ;incstack = 0
  7688                           ; Regs used in _i2c_driver_sendNACK: []
  7689  0DC5  0024               	movlb	4	; select bank4
  7690  0DC6  1696               	bsf	22,5	;volatile
  7691                           
  7692                           ;i2c_driver.c: 205: SSP1CON2bits.ACKEN = 1;
  7693  0DC7  1616               	bsf	22,4	;volatile
  7694  0DC8  0008               	return
  7695  0DC9                     __end_of_i2c_driver_sendNACK:	
  7696                           
  7697                           	psect	text42
  7698  07FF                     __ptext42:	
  7699 ;; *************** function _i2c_driver_resetBus *****************
  7700 ;; Defined at:
  7701 ;;		line 141 in file "mcc_generated_files/i2c_driver.c"
  7702 ;; Parameters:    Size  Location     Type
  7703 ;;		None
  7704 ;; Auto vars:     Size  Location     Type
  7705 ;;		None
  7706 ;; Return value:  Size  Location     Type
  7707 ;;                  1    wreg      void 
  7708 ;; Registers used:
  7709 ;;		None
  7710 ;; Tracked objects:
  7711 ;;		On entry : 0/0
  7712 ;;		On exit  : 0/0
  7713 ;;		Unchanged: 0/0
  7714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7715 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7716 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7717 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7718 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7719 ;;Total ram usage:        0 bytes
  7720 ;; Hardware stack levels used:    1
  7721 ;; Hardware stack levels required when called:    6
  7722 ;; This function calls:
  7723 ;;		Nothing
  7724 ;; This function is called by:
  7725 ;;		_do_I2C_RESET
  7726 ;; This function uses a non-reentrant model
  7727 ;;
  7728                           
  7729                           
  7730                           ;psect for function _i2c_driver_resetBus
  7731  07FF                     _i2c_driver_resetBus:	
  7732                           
  7733                           ;incstack = 0
  7734                           ; Regs used in _i2c_driver_resetBus: []
  7735  07FF  0008               	return
  7736  0800                     __end_of_i2c_driver_resetBus:	
  7737                           
  7738                           	psect	text43
  7739  0D94                     __ptext43:	
  7740 ;; *************** function _i2c_driver_startRX *****************
  7741 ;; Defined at:
  7742 ;;		line 166 in file "mcc_generated_files/i2c_driver.c"
  7743 ;; Parameters:    Size  Location     Type
  7744 ;;		None
  7745 ;; Auto vars:     Size  Location     Type
  7746 ;;		None
  7747 ;; Return value:  Size  Location     Type
  7748 ;;                  1    wreg      void 
  7749 ;; Registers used:
  7750 ;;		None
  7751 ;; Tracked objects:
  7752 ;;		On entry : 0/0
  7753 ;;		On exit  : 0/0
  7754 ;;		Unchanged: 0/0
  7755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7756 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7757 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7758 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7759 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7760 ;;Total ram usage:        0 bytes
  7761 ;; Hardware stack levels used:    1
  7762 ;; Hardware stack levels required when called:    6
  7763 ;; This function calls:
  7764 ;;		Nothing
  7765 ;; This function is called by:
  7766 ;;		_do_I2C_RCEN
  7767 ;; This function uses a non-reentrant model
  7768 ;;
  7769                           
  7770                           
  7771                           ;psect for function _i2c_driver_startRX
  7772  0D94                     _i2c_driver_startRX:	
  7773                           
  7774                           ;i2c_driver.c: 168: SSP1CON2bits.RCEN = 1;
  7775                           
  7776                           ;incstack = 0
  7777                           ; Regs used in _i2c_driver_startRX: []
  7778  0D94  0024               	movlb	4	; select bank4
  7779  0D95  1596               	bsf	22,3	;volatile
  7780  0D96  0008               	return
  7781  0D97                     __end_of_i2c_driver_startRX:	
  7782                           
  7783                           	psect	text44
  7784  0E00                     __ptext44:	
  7785 ;; *************** function _returnReset *****************
  7786 ;; Defined at:
  7787 ;;		line 448 in file "mcc_generated_files/drivers/i2c_master.c"
  7788 ;; Parameters:    Size  Location     Type
  7789 ;;  p               1   10[BANK0 ] PTR void 
  7790 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  7791 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  7792 ;; Auto vars:     Size  Location     Type
  7793 ;;		None
  7794 ;; Return value:  Size  Location     Type
  7795 ;;                  1    wreg      enum E12171
  7796 ;; Registers used:
  7797 ;;		wreg
  7798 ;; Tracked objects:
  7799 ;;		On entry : 0/0
  7800 ;;		On exit  : 0/0
  7801 ;;		Unchanged: 0/0
  7802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7803 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7804 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7805 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7806 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7807 ;;Total ram usage:        1 bytes
  7808 ;; Hardware stack levels used:    1
  7809 ;; Hardware stack levels required when called:    6
  7810 ;; This function calls:
  7811 ;;		Nothing
  7812 ;; This function is called by:
  7813 ;;		_i2c_open
  7814 ;;		_do_I2C_DO_ADDRESS_NACK
  7815 ;;		_do_I2C_TX
  7816 ;;		_do_I2C_RX
  7817 ;;		_do_I2C_TX_EMPTY
  7818 ;;		i1_do_I2C_DO_ADDRESS_NACK
  7819 ;;		i1_do_I2C_TX
  7820 ;;		i1_do_I2C_RX
  7821 ;;		i1_do_I2C_TX_EMPTY
  7822 ;; This function uses a non-reentrant model
  7823 ;;
  7824                           
  7825                           
  7826                           ;psect for function _returnReset
  7827  0E00                     _returnReset:	
  7828                           
  7829                           ;Skip over the trampoline to the duplicate function for level 1
  7830  0E00  1C7E               	btfss	126,0
  7831  0E01  2E04               	goto	l2540
  7832  0E02  318D  2D6B         	ljmp	i1l3052
  7833  0E04                     _returnReset$intlevel0:	
  7834  0E04                     l2540:	
  7835                           ;incstack = 0
  7836                           ; Regs used in _returnReset: [wreg]
  7837                           
  7838                           
  7839                           ;i2c_master.c: 450: return i2c_reset_link;
  7840  0E04  3005               	movlw	5
  7841  0E05  0008               	return
  7842  0E06                     __end_of_returnReset:	
  7843                           
  7844                           	psect	text45
  7845  0DFA                     __ptext45:	
  7846 ;; *************** function _returnStop *****************
  7847 ;; Defined at:
  7848 ;;		line 443 in file "mcc_generated_files/drivers/i2c_master.c"
  7849 ;; Parameters:    Size  Location     Type
  7850 ;;  p               1   10[BANK0 ] PTR void 
  7851 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  7852 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  7853 ;; Auto vars:     Size  Location     Type
  7854 ;;		None
  7855 ;; Return value:  Size  Location     Type
  7856 ;;                  1    wreg      enum E12171
  7857 ;; Registers used:
  7858 ;;		wreg
  7859 ;; Tracked objects:
  7860 ;;		On entry : 0/0
  7861 ;;		On exit  : 0/0
  7862 ;;		Unchanged: 0/0
  7863 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7864 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7865 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7866 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7867 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7868 ;;Total ram usage:        1 bytes
  7869 ;; Hardware stack levels used:    1
  7870 ;; Hardware stack levels required when called:    6
  7871 ;; This function calls:
  7872 ;;		Nothing
  7873 ;; This function is called by:
  7874 ;;		_i2c_open
  7875 ;;		_setCallBack
  7876 ;;		_do_I2C_DO_ADDRESS_NACK
  7877 ;;		_do_I2C_TX
  7878 ;;		_do_I2C_RX
  7879 ;;		_do_I2C_TX_EMPTY
  7880 ;;		i1_do_I2C_DO_ADDRESS_NACK
  7881 ;;		i1_do_I2C_TX
  7882 ;;		i1_do_I2C_RX
  7883 ;;		i1_do_I2C_TX_EMPTY
  7884 ;; This function uses a non-reentrant model
  7885 ;;
  7886                           
  7887                           
  7888                           ;psect for function _returnStop
  7889  0DFA                     _returnStop:	
  7890                           
  7891                           ;Skip over the trampoline to the duplicate function for level 1
  7892  0DFA  1C7E               	btfss	126,0
  7893  0DFB  2DFE               	goto	l2536
  7894  0DFC  318D  2D69         	ljmp	i1l3048
  7895  0DFE                     _returnStop$intlevel0:	
  7896  0DFE                     l2536:	
  7897                           ;incstack = 0
  7898                           ; Regs used in _returnStop: [wreg]
  7899                           
  7900                           
  7901                           ;i2c_master.c: 445: return i2c_stop;
  7902  0DFE  3001               	movlw	1
  7903  0DFF  0008               	return
  7904  0E00                     __end_of_returnStop:	
  7905                           
  7906                           	psect	text46
  7907  07B0                     __ptext46:	
  7908 ;; *************** function _rdBlkRegCompleteHandler *****************
  7909 ;; Defined at:
  7910 ;;		line 134 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  7911 ;; Parameters:    Size  Location     Type
  7912 ;;  p               1   10[BANK0 ] PTR void 
  7913 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  7914 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  7915 ;; Auto vars:     Size  Location     Type
  7916 ;;		None
  7917 ;; Return value:  Size  Location     Type
  7918 ;;                  1    wreg      enum E97
  7919 ;; Registers used:
  7920 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7921 ;; Tracked objects:
  7922 ;;		On entry : 0/0
  7923 ;;		On exit  : 0/0
  7924 ;;		Unchanged: 0/0
  7925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7926 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7927 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7928 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7929 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7930 ;;Total ram usage:        1 bytes
  7931 ;; Hardware stack levels used:    1
  7932 ;; Hardware stack levels required when called:    8
  7933 ;; This function calls:
  7934 ;;		_i2c_setBuffer
  7935 ;;		_i2c_setDataCompleteCallback
  7936 ;; This function is called by:
  7937 ;;		_i2c_readDataBlock
  7938 ;;		_do_I2C_DO_ADDRESS_NACK
  7939 ;;		_do_I2C_TX
  7940 ;;		_do_I2C_RX
  7941 ;;		_do_I2C_TX_EMPTY
  7942 ;;		i1_do_I2C_DO_ADDRESS_NACK
  7943 ;;		i1_do_I2C_TX
  7944 ;;		i1_do_I2C_RX
  7945 ;;		i1_do_I2C_TX_EMPTY
  7946 ;; This function uses a non-reentrant model
  7947 ;;
  7948                           
  7949                           
  7950                           ;psect for function _rdBlkRegCompleteHandler
  7951  07B0                     _rdBlkRegCompleteHandler:	
  7952                           
  7953                           ;Skip over the trampoline to the duplicate function for level 1
  7954  07B0  1C7E               	btfss	126,0
  7955  07B1  2FB4               	goto	l2494
  7956  07B2  3187  2FE8         	ljmp	i1l3006
  7957  07B4                     _rdBlkRegCompleteHandler$intlevel0:	
  7958  07B4                     l2494:	
  7959                           ;incstack = 0
  7960                           ; Regs used in _rdBlkRegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  7961                           
  7962                           
  7963                           ;i2c_simple_master.c: 136: i2c_setBuffer(((buf_t *)p)->data,((buf_t*)p)->len);
  7964  07B4  0020               	movlb	0	; select bank0
  7965  07B5  082A               	movf	rdBlkRegCompleteHandler@p,w
  7966  07B6  0086               	movwf	6
  7967  07B7  0187               	clrf	7
  7968  07B8  3F40               	moviw [0]fsr1
  7969  07B9  00A1               	movwf	i2c_setBuffer@bufferSize
  7970  07BA  3F41               	moviw [1]fsr1
  7971  07BB  00A2               	movwf	i2c_setBuffer@bufferSize+1
  7972  07BC  082A               	movf	rdBlkRegCompleteHandler@p,w
  7973  07BD  3E02               	addlw	2
  7974  07BE  0086               	movwf	6
  7975  07BF  0187               	clrf	7
  7976  07C0  0801               	movf	1,w
  7977  07C1  318F  2793  3187   	fcall	_i2c_setBuffer
  7978                           
  7979                           ;i2c_simple_master.c: 137: i2c_setDataCompleteCallback((0),(0));
  7980  07C4  3000               	movlw	0
  7981  07C5  0020               	movlb	0	; select bank0
  7982  07C6  00A6               	movwf	i2c_setDataCompleteCallback@cb
  7983  07C7  00A7               	movwf	i2c_setDataCompleteCallback@cb+1
  7984  07C8  01A8               	clrf	i2c_setDataCompleteCallback@p
  7985  07C9  318F  270C         	fcall	_i2c_setDataCompleteCallback
  7986                           
  7987                           ;i2c_simple_master.c: 138: return i2c_restart_read;
  7988  07CB  3002               	movlw	2
  7989  07CC  0008               	return
  7990  07CD                     __end_of_rdBlkRegCompleteHandler:	
  7991                           
  7992                           	psect	text47
  7993  0FEA                     __ptext47:	
  7994 ;; *************** function _rd2RegCompleteHandler *****************
  7995 ;; Defined at:
  7996 ;;		line 87 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  7997 ;; Parameters:    Size  Location     Type
  7998 ;;  p               1   10[BANK0 ] PTR void 
  7999 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  8000 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  8001 ;; Auto vars:     Size  Location     Type
  8002 ;;		None
  8003 ;; Return value:  Size  Location     Type
  8004 ;;                  1    wreg      enum E97
  8005 ;; Registers used:
  8006 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8007 ;; Tracked objects:
  8008 ;;		On entry : 0/0
  8009 ;;		On exit  : 0/0
  8010 ;;		Unchanged: 0/0
  8011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8012 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8013 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8014 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8015 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8016 ;;Total ram usage:        1 bytes
  8017 ;; Hardware stack levels used:    1
  8018 ;; Hardware stack levels required when called:    8
  8019 ;; This function calls:
  8020 ;;		_i2c_setBuffer
  8021 ;;		_i2c_setDataCompleteCallback
  8022 ;; This function is called by:
  8023 ;;		_i2c_read2ByteRegister
  8024 ;;		_do_I2C_DO_ADDRESS_NACK
  8025 ;;		_do_I2C_TX
  8026 ;;		_do_I2C_RX
  8027 ;;		_do_I2C_TX_EMPTY
  8028 ;;		i1_do_I2C_DO_ADDRESS_NACK
  8029 ;;		i1_do_I2C_TX
  8030 ;;		i1_do_I2C_RX
  8031 ;;		i1_do_I2C_TX_EMPTY
  8032 ;; This function uses a non-reentrant model
  8033 ;;
  8034                           
  8035                           
  8036                           ;psect for function _rd2RegCompleteHandler
  8037  0FEA                     _rd2RegCompleteHandler:	
  8038                           
  8039                           ;Skip over the trampoline to the duplicate function for level 1
  8040  0FEA  1C7E               	btfss	126,0
  8041  0FEB  2FEE               	goto	l2478
  8042  0FEC  318F  2F71         	ljmp	i1l2990
  8043  0FEE                     _rd2RegCompleteHandler$intlevel0:	
  8044  0FEE                     l2478:	
  8045                           ;incstack = 0
  8046                           ; Regs used in _rd2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8047                           
  8048                           
  8049                           ;i2c_simple_master.c: 89: i2c_setBuffer(p,2);
  8050  0FEE  3002               	movlw	2
  8051  0FEF  0020               	movlb	0	; select bank0
  8052  0FF0  00A1               	movwf	i2c_setBuffer@bufferSize
  8053  0FF1  3000               	movlw	0
  8054  0FF2  00A2               	movwf	i2c_setBuffer@bufferSize+1
  8055  0FF3  082A               	movf	rd2RegCompleteHandler@p,w
  8056  0FF4  318F  2793  318F   	fcall	_i2c_setBuffer
  8057                           
  8058                           ;i2c_simple_master.c: 90: i2c_setDataCompleteCallback((0),(0));
  8059  0FF7  3000               	movlw	0
  8060  0FF8  0020               	movlb	0	; select bank0
  8061  0FF9  00A6               	movwf	i2c_setDataCompleteCallback@cb
  8062  0FFA  00A7               	movwf	i2c_setDataCompleteCallback@cb+1
  8063  0FFB  01A8               	clrf	i2c_setDataCompleteCallback@p
  8064  0FFC  318F  270C         	fcall	_i2c_setDataCompleteCallback
  8065                           
  8066                           ;i2c_simple_master.c: 91: return i2c_restart_read;
  8067  0FFE  3002               	movlw	2
  8068  0FFF  0008               	return
  8069  1000                     __end_of_rd2RegCompleteHandler:	
  8070                           
  8071                           	psect	text48
  8072  0FD4                     __ptext48:	
  8073 ;; *************** function _rd1RegCompleteHandler *****************
  8074 ;; Defined at:
  8075 ;;		line 58 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  8076 ;; Parameters:    Size  Location     Type
  8077 ;;  p               1   10[BANK0 ] PTR void 
  8078 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  8079 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  8080 ;; Auto vars:     Size  Location     Type
  8081 ;;		None
  8082 ;; Return value:  Size  Location     Type
  8083 ;;                  1    wreg      enum E97
  8084 ;; Registers used:
  8085 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8086 ;; Tracked objects:
  8087 ;;		On entry : 0/0
  8088 ;;		On exit  : 0/0
  8089 ;;		Unchanged: 0/0
  8090 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8091 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8092 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8093 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8094 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8095 ;;Total ram usage:        1 bytes
  8096 ;; Hardware stack levels used:    1
  8097 ;; Hardware stack levels required when called:    8
  8098 ;; This function calls:
  8099 ;;		_i2c_setBuffer
  8100 ;;		_i2c_setDataCompleteCallback
  8101 ;; This function is called by:
  8102 ;;		_i2c_read1ByteRegister
  8103 ;;		_do_I2C_DO_ADDRESS_NACK
  8104 ;;		_do_I2C_TX
  8105 ;;		_do_I2C_RX
  8106 ;;		_do_I2C_TX_EMPTY
  8107 ;;		i1_do_I2C_DO_ADDRESS_NACK
  8108 ;;		i1_do_I2C_TX
  8109 ;;		i1_do_I2C_RX
  8110 ;;		i1_do_I2C_TX_EMPTY
  8111 ;; This function uses a non-reentrant model
  8112 ;;
  8113                           
  8114                           
  8115                           ;psect for function _rd1RegCompleteHandler
  8116  0FD4                     _rd1RegCompleteHandler:	
  8117                           
  8118                           ;Skip over the trampoline to the duplicate function for level 1
  8119  0FD4  1C7E               	btfss	126,0
  8120  0FD5  2FD8               	goto	l2470
  8121  0FD6  318F  2F61         	ljmp	i1l2982
  8122  0FD8                     _rd1RegCompleteHandler$intlevel0:	
  8123  0FD8                     l2470:	
  8124                           ;incstack = 0
  8125                           ; Regs used in _rd1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8126                           
  8127                           
  8128                           ;i2c_simple_master.c: 60: i2c_setBuffer(p,1);
  8129  0FD8  3001               	movlw	1
  8130  0FD9  0020               	movlb	0	; select bank0
  8131  0FDA  00A1               	movwf	i2c_setBuffer@bufferSize
  8132  0FDB  3000               	movlw	0
  8133  0FDC  00A2               	movwf	i2c_setBuffer@bufferSize+1
  8134  0FDD  082A               	movf	rd1RegCompleteHandler@p,w
  8135  0FDE  318F  2793  318F   	fcall	_i2c_setBuffer
  8136                           
  8137                           ;i2c_simple_master.c: 61: i2c_setDataCompleteCallback((0),(0));
  8138  0FE1  3000               	movlw	0
  8139  0FE2  0020               	movlb	0	; select bank0
  8140  0FE3  00A6               	movwf	i2c_setDataCompleteCallback@cb
  8141  0FE4  00A7               	movwf	i2c_setDataCompleteCallback@cb+1
  8142  0FE5  01A8               	clrf	i2c_setDataCompleteCallback@p
  8143  0FE6  318F  270C         	fcall	_i2c_setDataCompleteCallback
  8144                           
  8145                           ;i2c_simple_master.c: 62: return i2c_restart_read;
  8146  0FE8  3002               	movlw	2
  8147  0FE9  0008               	return
  8148  0FEA                     __end_of_rd1RegCompleteHandler:	
  8149                           
  8150                           	psect	text49
  8151  0FBE                     __ptext49:	
  8152 ;; *************** function _wr1RegCompleteHandler *****************
  8153 ;; Defined at:
  8154 ;;		line 31 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  8155 ;; Parameters:    Size  Location     Type
  8156 ;;  p               1   10[BANK0 ] PTR void 
  8157 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  8158 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  8159 ;; Auto vars:     Size  Location     Type
  8160 ;;		None
  8161 ;; Return value:  Size  Location     Type
  8162 ;;                  1    wreg      enum E97
  8163 ;; Registers used:
  8164 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8165 ;; Tracked objects:
  8166 ;;		On entry : 0/0
  8167 ;;		On exit  : 0/0
  8168 ;;		Unchanged: 0/0
  8169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8170 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8171 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8172 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8173 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8174 ;;Total ram usage:        1 bytes
  8175 ;; Hardware stack levels used:    1
  8176 ;; Hardware stack levels required when called:    8
  8177 ;; This function calls:
  8178 ;;		_i2c_setBuffer
  8179 ;;		_i2c_setDataCompleteCallback
  8180 ;; This function is called by:
  8181 ;;		_i2c_write1ByteRegister
  8182 ;;		_do_I2C_DO_ADDRESS_NACK
  8183 ;;		_do_I2C_TX
  8184 ;;		_do_I2C_RX
  8185 ;;		_do_I2C_TX_EMPTY
  8186 ;;		i1_do_I2C_DO_ADDRESS_NACK
  8187 ;;		i1_do_I2C_TX
  8188 ;;		i1_do_I2C_RX
  8189 ;;		i1_do_I2C_TX_EMPTY
  8190 ;; This function uses a non-reentrant model
  8191 ;;
  8192                           
  8193                           
  8194                           ;psect for function _wr1RegCompleteHandler
  8195  0FBE                     _wr1RegCompleteHandler:	
  8196                           
  8197                           ;Skip over the trampoline to the duplicate function for level 1
  8198  0FBE  1C7E               	btfss	126,0
  8199  0FBF  2FC2               	goto	l2462
  8200  0FC0  318F  2F51         	ljmp	i1l2974
  8201  0FC2                     _wr1RegCompleteHandler$intlevel0:	
  8202  0FC2                     l2462:	
  8203                           ;incstack = 0
  8204                           ; Regs used in _wr1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8205                           
  8206                           
  8207                           ;i2c_simple_master.c: 33: i2c_setBuffer(p,1);
  8208  0FC2  3001               	movlw	1
  8209  0FC3  0020               	movlb	0	; select bank0
  8210  0FC4  00A1               	movwf	i2c_setBuffer@bufferSize
  8211  0FC5  3000               	movlw	0
  8212  0FC6  00A2               	movwf	i2c_setBuffer@bufferSize+1
  8213  0FC7  082A               	movf	wr1RegCompleteHandler@p,w
  8214  0FC8  318F  2793  318F   	fcall	_i2c_setBuffer
  8215                           
  8216                           ;i2c_simple_master.c: 34: i2c_setDataCompleteCallback((0),(0));
  8217  0FCB  3000               	movlw	0
  8218  0FCC  0020               	movlb	0	; select bank0
  8219  0FCD  00A6               	movwf	i2c_setDataCompleteCallback@cb
  8220  0FCE  00A7               	movwf	i2c_setDataCompleteCallback@cb+1
  8221  0FCF  01A8               	clrf	i2c_setDataCompleteCallback@p
  8222  0FD0  318F  270C         	fcall	_i2c_setDataCompleteCallback
  8223                           
  8224                           ;i2c_simple_master.c: 35: return i2c_continue;
  8225  0FD2  3004               	movlw	4
  8226  0FD3  0008               	return
  8227  0FD4                     __end_of_wr1RegCompleteHandler:	
  8228                           
  8229                           	psect	text50
  8230  0DF4                     __ptext50:	
  8231 ;; *************** function _i2c_restartWrite *****************
  8232 ;; Defined at:
  8233 ;;		line 35 in file "mcc_generated_files/drivers/i2c_types.c"
  8234 ;; Parameters:    Size  Location     Type
  8235 ;;  p               1   10[BANK0 ] PTR void 
  8236 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  8237 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  8238 ;; Auto vars:     Size  Location     Type
  8239 ;;		None
  8240 ;; Return value:  Size  Location     Type
  8241 ;;                  1    wreg      enum E97
  8242 ;; Registers used:
  8243 ;;		wreg
  8244 ;; Tracked objects:
  8245 ;;		On entry : 0/0
  8246 ;;		On exit  : 0/0
  8247 ;;		Unchanged: 0/0
  8248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8249 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8250 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8251 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8252 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8253 ;;Total ram usage:        1 bytes
  8254 ;; Hardware stack levels used:    1
  8255 ;; Hardware stack levels required when called:    6
  8256 ;; This function calls:
  8257 ;;		Nothing
  8258 ;; This function is called by:
  8259 ;;		_i2c_writeNBytes
  8260 ;;		_i2c_write1ByteRegister
  8261 ;;		_i2c_read1ByteRegister
  8262 ;;		_i2c_read2ByteRegister
  8263 ;;		_i2c_write2ByteRegister
  8264 ;;		_i2c_readDataBlock
  8265 ;;		_do_I2C_DO_ADDRESS_NACK
  8266 ;;		_do_I2C_TX
  8267 ;;		_do_I2C_RX
  8268 ;;		_do_I2C_TX_EMPTY
  8269 ;;		i1_do_I2C_DO_ADDRESS_NACK
  8270 ;;		i1_do_I2C_TX
  8271 ;;		i1_do_I2C_RX
  8272 ;;		i1_do_I2C_TX_EMPTY
  8273 ;; This function uses a non-reentrant model
  8274 ;;
  8275                           
  8276                           
  8277                           ;psect for function _i2c_restartWrite
  8278  0DF4                     _i2c_restartWrite:	
  8279                           
  8280                           ;Skip over the trampoline to the duplicate function for level 1
  8281  0DF4  1C7E               	btfss	126,0
  8282  0DF5  2DF8               	goto	l2544
  8283  0DF6  3180  2802         	ljmp	i1l3056
  8284  0DF8                     _i2c_restartWrite$intlevel0:	
  8285  0DF8                     l2544:	
  8286                           ;incstack = 0
  8287                           ; Regs used in _i2c_restartWrite: [wreg]
  8288                           
  8289                           
  8290                           ;i2c_types.c: 37: return i2c_restart_write;
  8291  0DF8  3003               	movlw	3
  8292  0DF9  0008               	return
  8293  0DFA                     __end_of_i2c_restartWrite:	
  8294                           
  8295                           	psect	text51
  8296  0FA8                     __ptext51:	
  8297 ;; *************** function _wr2RegCompleteHandler *****************
  8298 ;; Defined at:
  8299 ;;		line 110 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  8300 ;; Parameters:    Size  Location     Type
  8301 ;;  p               1   10[BANK0 ] PTR void 
  8302 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  8303 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  8304 ;; Auto vars:     Size  Location     Type
  8305 ;;		None
  8306 ;; Return value:  Size  Location     Type
  8307 ;;                  1    wreg      enum E97
  8308 ;; Registers used:
  8309 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8310 ;; Tracked objects:
  8311 ;;		On entry : 0/0
  8312 ;;		On exit  : 0/0
  8313 ;;		Unchanged: 0/0
  8314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8315 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8316 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8317 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8318 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8319 ;;Total ram usage:        1 bytes
  8320 ;; Hardware stack levels used:    1
  8321 ;; Hardware stack levels required when called:    8
  8322 ;; This function calls:
  8323 ;;		_i2c_setBuffer
  8324 ;;		_i2c_setDataCompleteCallback
  8325 ;; This function is called by:
  8326 ;;		_i2c_write2ByteRegister
  8327 ;;		_do_I2C_DO_ADDRESS_NACK
  8328 ;;		_do_I2C_TX
  8329 ;;		_do_I2C_RX
  8330 ;;		_do_I2C_TX_EMPTY
  8331 ;;		i1_do_I2C_DO_ADDRESS_NACK
  8332 ;;		i1_do_I2C_TX
  8333 ;;		i1_do_I2C_RX
  8334 ;;		i1_do_I2C_TX_EMPTY
  8335 ;; This function uses a non-reentrant model
  8336 ;;
  8337                           
  8338                           
  8339                           ;psect for function _wr2RegCompleteHandler
  8340  0FA8                     _wr2RegCompleteHandler:	
  8341                           
  8342                           ;Skip over the trampoline to the duplicate function for level 1
  8343  0FA8  1C7E               	btfss	126,0
  8344  0FA9  2FAC               	goto	l2486
  8345  0FAA  318F  2F41         	ljmp	i1l2998
  8346  0FAC                     _wr2RegCompleteHandler$intlevel0:	
  8347  0FAC                     l2486:	
  8348                           ;incstack = 0
  8349                           ; Regs used in _wr2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8350                           
  8351                           
  8352                           ;i2c_simple_master.c: 112: i2c_setBuffer(p,2);
  8353  0FAC  3002               	movlw	2
  8354  0FAD  0020               	movlb	0	; select bank0
  8355  0FAE  00A1               	movwf	i2c_setBuffer@bufferSize
  8356  0FAF  3000               	movlw	0
  8357  0FB0  00A2               	movwf	i2c_setBuffer@bufferSize+1
  8358  0FB1  082A               	movf	wr2RegCompleteHandler@p,w
  8359  0FB2  318F  2793  318F   	fcall	_i2c_setBuffer
  8360                           
  8361                           ;i2c_simple_master.c: 113: i2c_setDataCompleteCallback((0),(0));
  8362  0FB5  3000               	movlw	0
  8363  0FB6  0020               	movlb	0	; select bank0
  8364  0FB7  00A6               	movwf	i2c_setDataCompleteCallback@cb
  8365  0FB8  00A7               	movwf	i2c_setDataCompleteCallback@cb+1
  8366  0FB9  01A8               	clrf	i2c_setDataCompleteCallback@p
  8367  0FBA  318F  270C         	fcall	_i2c_setDataCompleteCallback
  8368                           
  8369                           ;i2c_simple_master.c: 114: return i2c_continue;
  8370  0FBC  3004               	movlw	4
  8371  0FBD  0008               	return
  8372  0FBE                     __end_of_wr2RegCompleteHandler:	
  8373                           
  8374                           	psect	text52
  8375  0F0C                     __ptext52:	
  8376 ;; *************** function _i2c_setDataCompleteCallback *****************
  8377 ;; Defined at:
  8378 ;;		line 89 in file "mcc_generated_files/drivers/i2c_master.c"
  8379 ;; Parameters:    Size  Location     Type
  8380 ;;  cb              2    6[BANK0 ] PTR FTN(PTR void ,)enum 
  8381 ;;		 -> rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), rd2RegCompleteHandler(1), rd1RegCompleteHandler(1), 
  8382 ;;		 -> wr1RegCompleteHandler(1), Absolute function(1), 
  8383 ;;  p               1    8[BANK0 ] PTR void 
  8384 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  8385 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  8386 ;; Auto vars:     Size  Location     Type
  8387 ;;		None
  8388 ;; Return value:  Size  Location     Type
  8389 ;;                  1    wreg      void 
  8390 ;; Registers used:
  8391 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8392 ;; Tracked objects:
  8393 ;;		On entry : 0/0
  8394 ;;		On exit  : 0/0
  8395 ;;		Unchanged: 0/0
  8396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8397 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8398 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8399 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8400 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8401 ;;Total ram usage:        4 bytes
  8402 ;; Hardware stack levels used:    1
  8403 ;; Hardware stack levels required when called:    7
  8404 ;; This function calls:
  8405 ;;		_setCallBack
  8406 ;; This function is called by:
  8407 ;;		_wr1RegCompleteHandler
  8408 ;;		_rd1RegCompleteHandler
  8409 ;;		_rd2RegCompleteHandler
  8410 ;;		_wr2RegCompleteHandler
  8411 ;;		_rdBlkRegCompleteHandler
  8412 ;;		_i2c_write1ByteRegister
  8413 ;;		_i2c_read1ByteRegister
  8414 ;;		_i2c_read2ByteRegister
  8415 ;;		_i2c_write2ByteRegister
  8416 ;;		_i2c_readDataBlock
  8417 ;; This function uses a non-reentrant model
  8418 ;;
  8419                           
  8420                           
  8421                           ;psect for function _i2c_setDataCompleteCallback
  8422  0F0C                     _i2c_setDataCompleteCallback:	
  8423                           
  8424                           ;i2c_master.c: 91: setCallBack(i2c_dataComplete,cb,p);
  8425                           
  8426                           ;incstack = 0
  8427                           ; Regs used in _i2c_setDataCompleteCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  8428  0F0C  0020               	movlb	0	; select bank0
  8429  0F0D  0827               	movf	i2c_setDataCompleteCallback@cb+1,w
  8430  0F0E  00A2               	movwf	setCallBack@cb+1
  8431  0F0F  0826               	movf	i2c_setDataCompleteCallback@cb,w
  8432  0F10  00A1               	movwf	setCallBack@cb
  8433  0F11  0828               	movf	i2c_setDataCompleteCallback@p,w
  8434  0F12  00A9               	movwf	??_i2c_setDataCompleteCallback
  8435  0F13  0829               	movf	??_i2c_setDataCompleteCallback,w
  8436  0F14  00A3               	movwf	setCallBack@p
  8437  0F15  3000               	movlw	0
  8438  0F16  3186  26A2         	fcall	_setCallBack
  8439  0F18  0008               	return
  8440  0F19                     __end_of_i2c_setDataCompleteCallback:	
  8441                           
  8442                           	psect	text53
  8443  06A2                     __ptext53:	
  8444 ;; *************** function _setCallBack *****************
  8445 ;; Defined at:
  8446 ;;		line 453 in file "mcc_generated_files/drivers/i2c_master.c"
  8447 ;; Parameters:    Size  Location     Type
  8448 ;;  idx             1    wreg     enum E12355
  8449 ;;  cb              2    1[BANK0 ] PTR FTN(PTR void ,)enum 
  8450 ;;		 -> rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), rd2RegCompleteHandler(1), rd1RegCompleteHandler(1), 
  8451 ;;		 -> i2c_restartWrite(1), wr1RegCompleteHandler(1), Absolute function(1), 
  8452 ;;  p               1    3[BANK0 ] PTR void 
  8453 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  8454 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  8455 ;; Auto vars:     Size  Location     Type
  8456 ;;  idx             1    5[BANK0 ] enum E12355
  8457 ;; Return value:  Size  Location     Type
  8458 ;;                  1    wreg      void 
  8459 ;; Registers used:
  8460 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8461 ;; Tracked objects:
  8462 ;;		On entry : 0/0
  8463 ;;		On exit  : 0/0
  8464 ;;		Unchanged: 0/0
  8465 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8466 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8467 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8468 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8469 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8470 ;;Total ram usage:        5 bytes
  8471 ;; Hardware stack levels used:    1
  8472 ;; Hardware stack levels required when called:    6
  8473 ;; This function calls:
  8474 ;;		Nothing
  8475 ;; This function is called by:
  8476 ;;		_i2c_setDataCompleteCallback
  8477 ;;		_i2c_setAddressNACKCallback
  8478 ;;		_i2c_setWriteCollisionCallback
  8479 ;;		_i2c_setDataNACKCallback
  8480 ;;		_i2c_setTimeOutCallback
  8481 ;; This function uses a non-reentrant model
  8482 ;;
  8483                           
  8484                           
  8485                           ;psect for function _setCallBack
  8486  06A2                     _setCallBack:	
  8487                           
  8488                           ;incstack = 0
  8489                           ; Regs used in _setCallBack: [wreg+fsr1l+fsr1h+status,2+status,0]
  8490                           ;setCallBack@idx stored from wreg
  8491  06A2  0020               	movlb	0	; select bank0
  8492  06A3  00A5               	movwf	setCallBack@idx
  8493                           
  8494                           ;i2c_master.c: 455: if(cb)
  8495  06A4  0821               	movf	setCallBack@cb,w
  8496  06A5  0422               	iorwf	setCallBack@cb+1,w
  8497  06A6  1903               	btfsc	3,2
  8498  06A7  2EB9               	goto	l2430
  8499                           
  8500                           ;i2c_master.c: 456: {
  8501                           ;i2c_master.c: 457: i2c_status.callbackTable[idx] = cb;
  8502  06A8  3525               	lslf	setCallBack@idx,w
  8503  06A9  3EAB               	addlw	(low ((_i2c_status| 0+11)))& (0+255)
  8504  06AA  0086               	movwf	6
  8505  06AB  0187               	clrf	7
  8506  06AC  0821               	movf	setCallBack@cb,w
  8507  06AD  3FC0               	movwi [0]fsr1
  8508  06AE  0822               	movf	setCallBack@cb+1,w
  8509  06AF  3FC1               	movwi [1]fsr1
  8510                           
  8511                           ;i2c_master.c: 458: i2c_status.callbackPayload[idx] = p;
  8512  06B0  0823               	movf	setCallBack@p,w
  8513  06B1  00A4               	movwf	??_setCallBack
  8514  06B2  0825               	movf	setCallBack@idx,w
  8515  06B3  3EB7               	addlw	(low ((_i2c_status| 0+23)))& (0+255)
  8516  06B4  0086               	movwf	6
  8517  06B5  0187               	clrf	7
  8518  06B6  0824               	movf	??_setCallBack,w
  8519  06B7  0081               	movwf	1
  8520                           
  8521                           ;i2c_master.c: 459: }
  8522  06B8  0008               	return
  8523  06B9                     l2430:	
  8524                           
  8525                           ;i2c_master.c: 460: else
  8526                           ;i2c_master.c: 461: {
  8527                           ;i2c_master.c: 462: i2c_status.callbackTable[idx] = returnStop;
  8528  06B9  3525               	lslf	setCallBack@idx,w
  8529  06BA  3EAB               	addlw	(low ((_i2c_status| 0+11)))& (0+255)
  8530  06BB  0086               	movwf	6
  8531  06BC  0187               	clrf	7
  8532  06BD  30FA               	movlw	low _returnStop
  8533  06BE  3FC0               	movwi [0]fsr1
  8534  06BF  300D               	movlw	high _returnStop
  8535  06C0  3FC1               	movwi [1]fsr1
  8536                           
  8537                           ;i2c_master.c: 463: i2c_status.callbackPayload[idx] = (0);
  8538  06C1  0825               	movf	setCallBack@idx,w
  8539  06C2  3EB7               	addlw	(low ((_i2c_status| 0+23)))& (0+255)
  8540  06C3  0086               	movwf	6
  8541  06C4  0187               	clrf	7
  8542  06C5  0181               	clrf	1
  8543  06C6  0008               	return
  8544  06C7                     __end_of_setCallBack:	
  8545                           
  8546                           	psect	text54
  8547  0F93                     __ptext54:	
  8548 ;; *************** function _i2c_setBuffer *****************
  8549 ;; Defined at:
  8550 ;;		line 184 in file "mcc_generated_files/drivers/i2c_master.c"
  8551 ;; Parameters:    Size  Location     Type
  8552 ;;  buffer          1    wreg     PTR void 
  8553 ;;		 -> i2c_readDataBlock@reg(1), i2c_readDataBlock@d(3), i2c_write2ByteRegister@reg(1), i2c_write2ByteRegister@data(2),
      + 
  8554 ;;		 -> i2c_read2ByteRegister@reg(1), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@reg(1), i2c_read1ByteRegist
      +er@d2(1), 
  8555 ;;		 -> i2c_write1ByteRegister@reg(1), i2c_write1ByteRegister@data(1), NULL(0), writebuffer(17), 
  8556 ;;  bufferSize      2    1[BANK0 ] unsigned int 
  8557 ;; Auto vars:     Size  Location     Type
  8558 ;;  buffer          1    4[BANK0 ] PTR void 
  8559 ;;		 -> i2c_readDataBlock@reg(1), i2c_readDataBlock@d(3), i2c_write2ByteRegister@reg(1), i2c_write2ByteRegister@data(2),
      + 
  8560 ;;		 -> i2c_read2ByteRegister@reg(1), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@reg(1), i2c_read1ByteRegist
      +er@d2(1), 
  8561 ;;		 -> i2c_write1ByteRegister@reg(1), i2c_write1ByteRegister@data(1), NULL(0), writebuffer(17), 
  8562 ;; Return value:  Size  Location     Type
  8563 ;;                  1    wreg      void 
  8564 ;; Registers used:
  8565 ;;		wreg
  8566 ;; Tracked objects:
  8567 ;;		On entry : 0/0
  8568 ;;		On exit  : 0/0
  8569 ;;		Unchanged: 0/0
  8570 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8571 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8572 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8573 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8574 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8575 ;;Total ram usage:        4 bytes
  8576 ;; Hardware stack levels used:    1
  8577 ;; Hardware stack levels required when called:    6
  8578 ;; This function calls:
  8579 ;;		Nothing
  8580 ;; This function is called by:
  8581 ;;		_wr1RegCompleteHandler
  8582 ;;		_i2c_writeNBytes
  8583 ;;		_rd1RegCompleteHandler
  8584 ;;		_rd2RegCompleteHandler
  8585 ;;		_wr2RegCompleteHandler
  8586 ;;		_rdBlkRegCompleteHandler
  8587 ;;		_i2c_write1ByteRegister
  8588 ;;		_i2c_read1ByteRegister
  8589 ;;		_i2c_read2ByteRegister
  8590 ;;		_i2c_write2ByteRegister
  8591 ;;		_i2c_readDataBlock
  8592 ;;		_i2c_readNBytes
  8593 ;; This function uses a non-reentrant model
  8594 ;;
  8595                           
  8596                           
  8597                           ;psect for function _i2c_setBuffer
  8598  0F93                     _i2c_setBuffer:	
  8599                           
  8600                           ;incstack = 0
  8601                           ; Regs used in _i2c_setBuffer: [wreg]
  8602                           ;i2c_setBuffer@buffer stored from wreg
  8603  0F93  0020               	movlb	0	; select bank0
  8604  0F94  00A4               	movwf	i2c_setBuffer@buffer
  8605                           
  8606                           ;i2c_master.c: 186: if(i2c_status.bufferFree)
  8607  0F95  0021               	movlb	1	; select bank1
  8608  0F96  1D20               	btfss	_i2c_status^(0+128),2
  8609  0F97  0008               	return
  8610                           
  8611                           ;i2c_master.c: 187: {
  8612                           ;i2c_master.c: 188: i2c_status.data_ptr = buffer;
  8613  0F98  0020               	movlb	0	; select bank0
  8614  0F99  0824               	movf	i2c_setBuffer@buffer,w
  8615  0F9A  00A3               	movwf	??_i2c_setBuffer
  8616  0F9B  0823               	movf	??_i2c_setBuffer,w
  8617  0F9C  0021               	movlb	1	; select bank1
  8618  0F9D  00A2               	movwf	(low ((_i2c_status| 0+2)))^(0+128)
  8619                           
  8620                           ;i2c_master.c: 189: i2c_status.data_length = bufferSize;
  8621  0F9E  0020               	movlb	0	; select bank0
  8622  0F9F  0822               	movf	i2c_setBuffer@bufferSize+1,w
  8623  0FA0  0021               	movlb	1	; select bank1
  8624  0FA1  00A4               	movwf	((_i2c_status+1)^(0+128)+3)
  8625  0FA2  0020               	movlb	0	; select bank0
  8626  0FA3  0821               	movf	i2c_setBuffer@bufferSize,w
  8627  0FA4  0021               	movlb	1	; select bank1
  8628  0FA5  00A3               	movwf	(_i2c_status^(0+128)+3)
  8629                           
  8630                           ;i2c_master.c: 190: i2c_status.bufferFree = 0;
  8631  0FA6  1120               	bcf	_i2c_status^(0+128),2
  8632  0FA7  0008               	return
  8633  0FA8                     __end_of_i2c_setBuffer:	
  8634                           
  8635                           	psect	text55
  8636  0D91                     __ptext55:	
  8637 ;; *************** function _i2c_driver_stop *****************
  8638 ;; Defined at:
  8639 ;;		line 156 in file "mcc_generated_files/i2c_driver.c"
  8640 ;; Parameters:    Size  Location     Type
  8641 ;;		None
  8642 ;; Auto vars:     Size  Location     Type
  8643 ;;		None
  8644 ;; Return value:  Size  Location     Type
  8645 ;;                  1    wreg      void 
  8646 ;; Registers used:
  8647 ;;		None
  8648 ;; Tracked objects:
  8649 ;;		On entry : 0/0
  8650 ;;		On exit  : 0/0
  8651 ;;		Unchanged: 0/0
  8652 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8653 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8654 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8655 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8656 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8657 ;;Total ram usage:        0 bytes
  8658 ;; Hardware stack levels used:    1
  8659 ;; Hardware stack levels required when called:    6
  8660 ;; This function calls:
  8661 ;;		Nothing
  8662 ;; This function is called by:
  8663 ;;		_do_I2C_SEND_STOP
  8664 ;; This function uses a non-reentrant model
  8665 ;;
  8666                           
  8667                           
  8668                           ;psect for function _i2c_driver_stop
  8669  0D91                     _i2c_driver_stop:	
  8670                           
  8671                           ;i2c_driver.c: 158: SSP1CON2bits.PEN = 1;
  8672                           
  8673                           ;incstack = 0
  8674                           ; Regs used in _i2c_driver_stop: []
  8675  0D91  0024               	movlb	4	; select bank4
  8676  0D92  1516               	bsf	22,2	;volatile
  8677  0D93  0008               	return
  8678  0D94                     __end_of_i2c_driver_stop:	
  8679                           
  8680                           	psect	text56
  8681  0D8E                     __ptext56:	
  8682 ;; *************** function _i2c_driver_restart *****************
  8683 ;; Defined at:
  8684 ;;		line 151 in file "mcc_generated_files/i2c_driver.c"
  8685 ;; Parameters:    Size  Location     Type
  8686 ;;		None
  8687 ;; Auto vars:     Size  Location     Type
  8688 ;;		None
  8689 ;; Return value:  Size  Location     Type
  8690 ;;                  1    wreg      void 
  8691 ;; Registers used:
  8692 ;;		None
  8693 ;; Tracked objects:
  8694 ;;		On entry : 0/0
  8695 ;;		On exit  : 0/0
  8696 ;;		Unchanged: 0/0
  8697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8698 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8699 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8700 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8701 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8702 ;;Total ram usage:        0 bytes
  8703 ;; Hardware stack levels used:    1
  8704 ;; Hardware stack levels required when called:    6
  8705 ;; This function calls:
  8706 ;;		Nothing
  8707 ;; This function is called by:
  8708 ;;		_do_I2C_SEND_RESTART_READ
  8709 ;;		_do_I2C_SEND_RESTART_WRITE
  8710 ;;		_do_I2C_SEND_RESTART
  8711 ;; This function uses a non-reentrant model
  8712 ;;
  8713                           
  8714                           
  8715                           ;psect for function _i2c_driver_restart
  8716  0D8E                     _i2c_driver_restart:	
  8717                           
  8718                           ;i2c_driver.c: 153: SSP1CON2bits.RSEN = 1;
  8719                           
  8720                           ;incstack = 0
  8721                           ; Regs used in _i2c_driver_restart: []
  8722  0D8E  0024               	movlb	4	; select bank4
  8723  0D8F  1496               	bsf	22,1	;volatile
  8724  0D90  0008               	return
  8725  0D91                     __end_of_i2c_driver_restart:	
  8726                           
  8727                           	psect	text57
  8728  0DC1                     __ptext57:	
  8729 ;; *************** function _i2c_driver_sendACK *****************
  8730 ;; Defined at:
  8731 ;;		line 196 in file "mcc_generated_files/i2c_driver.c"
  8732 ;; Parameters:    Size  Location     Type
  8733 ;;		None
  8734 ;; Auto vars:     Size  Location     Type
  8735 ;;		None
  8736 ;; Return value:  Size  Location     Type
  8737 ;;                  1    wreg      void 
  8738 ;; Registers used:
  8739 ;;		None
  8740 ;; Tracked objects:
  8741 ;;		On entry : 0/0
  8742 ;;		On exit  : 0/0
  8743 ;;		Unchanged: 0/0
  8744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8745 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8746 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8747 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8748 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8749 ;;Total ram usage:        0 bytes
  8750 ;; Hardware stack levels used:    1
  8751 ;; Hardware stack levels required when called:    6
  8752 ;; This function calls:
  8753 ;;		Nothing
  8754 ;; This function is called by:
  8755 ;;		_do_I2C_DO_ACK
  8756 ;;		_do_I2C_RX
  8757 ;; This function uses a non-reentrant model
  8758 ;;
  8759                           
  8760                           
  8761                           ;psect for function _i2c_driver_sendACK
  8762  0DC1                     _i2c_driver_sendACK:	
  8763                           
  8764                           ;i2c_driver.c: 198: SSP1CON2bits.ACKDT = 0;
  8765                           
  8766                           ;incstack = 0
  8767                           ; Regs used in _i2c_driver_sendACK: []
  8768  0DC1  0024               	movlb	4	; select bank4
  8769  0DC2  1296               	bcf	22,5	;volatile
  8770                           
  8771                           ;i2c_driver.c: 199: SSP1CON2bits.ACKEN = 1;
  8772  0DC3  1616               	bsf	22,4	;volatile
  8773  0DC4  0008               	return
  8774  0DC5                     __end_of_i2c_driver_sendACK:	
  8775                           
  8776                           	psect	text58
  8777  0D8B                     __ptext58:	
  8778 ;; *************** function _i2c_driver_start *****************
  8779 ;; Defined at:
  8780 ;;		line 146 in file "mcc_generated_files/i2c_driver.c"
  8781 ;; Parameters:    Size  Location     Type
  8782 ;;		None
  8783 ;; Auto vars:     Size  Location     Type
  8784 ;;		None
  8785 ;; Return value:  Size  Location     Type
  8786 ;;                  1    wreg      void 
  8787 ;; Registers used:
  8788 ;;		None
  8789 ;; Tracked objects:
  8790 ;;		On entry : 0/0
  8791 ;;		On exit  : 0/0
  8792 ;;		Unchanged: 0/0
  8793 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8794 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8795 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8796 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8797 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8798 ;;Total ram usage:        0 bytes
  8799 ;; Hardware stack levels used:    1
  8800 ;; Hardware stack levels required when called:    6
  8801 ;; This function calls:
  8802 ;;		Nothing
  8803 ;; This function is called by:
  8804 ;;		_i2c_masterOperation
  8805 ;; This function uses a non-reentrant model
  8806 ;;
  8807                           
  8808                           
  8809                           ;psect for function _i2c_driver_start
  8810  0D8B                     _i2c_driver_start:	
  8811                           
  8812                           ;i2c_driver.c: 148: SSP1CON2bits.SEN = 1;
  8813                           
  8814                           ;incstack = 0
  8815                           ; Regs used in _i2c_driver_start: []
  8816  0D8B  0024               	movlb	4	; select bank4
  8817  0D8C  1416               	bsf	22,0	;volatile
  8818  0D8D  0008               	return
  8819  0D8E                     __end_of_i2c_driver_start:	
  8820                           
  8821                           	psect	text59
  8822  07CD                     __ptext59:	
  8823 ;; *************** function _i2c_close *****************
  8824 ;; Defined at:
  8825 ;;		line 162 in file "mcc_generated_files/drivers/i2c_master.c"
  8826 ;; Parameters:    Size  Location     Type
  8827 ;;		None
  8828 ;; Auto vars:     Size  Location     Type
  8829 ;;  ret             1    2[BANK0 ] enum E12166
  8830 ;; Return value:  Size  Location     Type
  8831 ;;                  1    wreg      enum E92
  8832 ;; Registers used:
  8833 ;;		wreg, status,2, status,0, pclath, cstack
  8834 ;; Tracked objects:
  8835 ;;		On entry : 0/0
  8836 ;;		On exit  : 0/0
  8837 ;;		Unchanged: 0/0
  8838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8839 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8840 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8841 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8842 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8843 ;;Total ram usage:        2 bytes
  8844 ;; Hardware stack levels used:    1
  8845 ;; Hardware stack levels required when called:    7
  8846 ;; This function calls:
  8847 ;;		_mssp_clearIRQ
  8848 ;;		_mssp_disableIRQ
  8849 ;; This function is called by:
  8850 ;;		_i2c_writeNBytes
  8851 ;;		_i2c_write1ByteRegister
  8852 ;;		_i2c_read1ByteRegister
  8853 ;;		_i2c_read2ByteRegister
  8854 ;;		_i2c_write2ByteRegister
  8855 ;;		_i2c_readDataBlock
  8856 ;;		_i2c_readNBytes
  8857 ;; This function uses a non-reentrant model
  8858 ;;
  8859                           
  8860                           
  8861                           ;psect for function _i2c_close
  8862  07CD                     _i2c_close:	
  8863                           
  8864                           ;i2c_master.c: 164: i2c_error_t ret = I2C_BUSY;
  8865                           
  8866                           ;incstack = 0
  8867                           ; Regs used in _i2c_close: [wreg+status,2+status,0+pclath+cstack]
  8868  07CD  0020               	movlb	0	; select bank0
  8869  07CE  01A2               	clrf	i2c_close@ret
  8870  07CF  0AA2               	incf	i2c_close@ret,f
  8871                           
  8872                           ;i2c_master.c: 165: if(!i2c_status.busy)
  8873  07D0  0021               	movlb	1	; select bank1
  8874  07D1  1820               	btfsc	_i2c_status^(0+128),0
  8875  07D2  2FE5               	goto	l581
  8876                           
  8877                           ;i2c_master.c: 166: {
  8878                           ;i2c_master.c: 167: i2c_status.inUse = 0;
  8879  07D3  10A0               	bcf	_i2c_status^(0+128),1
  8880                           
  8881                           ;i2c_master.c: 169: i2c_status.address = 0xff;
  8882  07D4  30FF               	movlw	255
  8883  07D5  0020               	movlb	0	; select bank0
  8884  07D6  00A1               	movwf	??_i2c_close
  8885  07D7  0821               	movf	??_i2c_close,w
  8886  07D8  0021               	movlb	1	; select bank1
  8887  07D9  00A1               	movwf	(_i2c_status^(0+128)+1)
  8888                           
  8889                           ;i2c_master.c: 170: mssp_clearIRQ();
  8890  07DA  318D  2585  3187   	fcall	_mssp_clearIRQ
  8891                           
  8892                           ;i2c_master.c: 171: mssp_disableIRQ();
  8893  07DD  318D  2588         	fcall	_mssp_disableIRQ
  8894                           
  8895                           ;i2c_master.c: 172: ret = i2c_status.error;
  8896  07DF  0021               	movlb	1	; select bank1
  8897  07E0  082A               	movf	(_i2c_status^(0+128)+10),w
  8898  07E1  0020               	movlb	0	; select bank0
  8899  07E2  00A1               	movwf	??_i2c_close
  8900  07E3  0821               	movf	??_i2c_close,w
  8901  07E4  00A2               	movwf	i2c_close@ret
  8902  07E5                     l581:	
  8903                           
  8904                           ;i2c_master.c: 173: }
  8905                           ;i2c_master.c: 174: return ret;
  8906  07E5  0020               	movlb	0	; select bank0
  8907  07E6  0822               	movf	i2c_close@ret,w
  8908  07E7  0008               	return
  8909  07E8                     __end_of_i2c_close:	
  8910                           
  8911                           	psect	text60
  8912  0D88                     __ptext60:	
  8913 ;; *************** function _mssp_disableIRQ *****************
  8914 ;; Defined at:
  8915 ;;		line 48 in file "mcc_generated_files/i2c_driver.c"
  8916 ;; Parameters:    Size  Location     Type
  8917 ;;		None
  8918 ;; Auto vars:     Size  Location     Type
  8919 ;;		None
  8920 ;; Return value:  Size  Location     Type
  8921 ;;                  1    wreg      void 
  8922 ;; Registers used:
  8923 ;;		None
  8924 ;; Tracked objects:
  8925 ;;		On entry : 0/0
  8926 ;;		On exit  : 0/0
  8927 ;;		Unchanged: 0/0
  8928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8929 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8930 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8931 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8932 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8933 ;;Total ram usage:        0 bytes
  8934 ;; Hardware stack levels used:    1
  8935 ;; Hardware stack levels required when called:    6
  8936 ;; This function calls:
  8937 ;;		Nothing
  8938 ;; This function is called by:
  8939 ;;		_i2c_close
  8940 ;;		_i2c_setTimeOut
  8941 ;; This function uses a non-reentrant model
  8942 ;;
  8943                           
  8944                           
  8945                           ;psect for function _mssp_disableIRQ
  8946  0D88                     _mssp_disableIRQ:	
  8947                           
  8948                           ;i2c_driver.c: 50: PIE1bits.SSP1IE = 0;
  8949                           
  8950                           ;incstack = 0
  8951                           ; Regs used in _mssp_disableIRQ: []
  8952  0D88  0021               	movlb	1	; select bank1
  8953  0D89  1190               	bcf	16,3	;volatile
  8954  0D8A  0008               	return
  8955  0D8B                     __end_of_mssp_disableIRQ:	
  8956                           
  8957                           	psect	text61
  8958  0D85                     __ptext61:	
  8959 ;; *************** function _mssp_clearIRQ *****************
  8960 ;; Defined at:
  8961 ;;		line 53 in file "mcc_generated_files/i2c_driver.c"
  8962 ;; Parameters:    Size  Location     Type
  8963 ;;		None
  8964 ;; Auto vars:     Size  Location     Type
  8965 ;;		None
  8966 ;; Return value:  Size  Location     Type
  8967 ;;                  1    wreg      void 
  8968 ;; Registers used:
  8969 ;;		None
  8970 ;; Tracked objects:
  8971 ;;		On entry : 0/0
  8972 ;;		On exit  : 0/0
  8973 ;;		Unchanged: 0/0
  8974 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8975 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8976 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8977 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8978 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8979 ;;Total ram usage:        0 bytes
  8980 ;; Hardware stack levels used:    1
  8981 ;; Hardware stack levels required when called:    6
  8982 ;; This function calls:
  8983 ;;		Nothing
  8984 ;; This function is called by:
  8985 ;;		_i2c_open
  8986 ;;		_i2c_close
  8987 ;;		_i2c_ISR
  8988 ;; This function uses a non-reentrant model
  8989 ;;
  8990                           
  8991                           
  8992                           ;psect for function _mssp_clearIRQ
  8993  0D85                     _mssp_clearIRQ:	
  8994                           
  8995                           ;i2c_driver.c: 55: PIR1bits.SSP1IF = 0;
  8996                           
  8997                           ;incstack = 0
  8998                           ; Regs used in _mssp_clearIRQ: []
  8999  0D85  0020               	movlb	0	; select bank0
  9000  0D86  1190               	bcf	16,3	;volatile
  9001  0D87  0008               	return
  9002  0D88                     __end_of_mssp_clearIRQ:	
  9003                           
  9004                           	psect	text62
  9005  02AF                     __ptext62:	
  9006 ;; *************** function ___awdiv *****************
  9007 ;; Defined at:
  9008 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  9009 ;; Parameters:    Size  Location     Type
  9010 ;;  divisor         2    1[BANK0 ] int 
  9011 ;;  dividend        2    3[BANK0 ] int 
  9012 ;; Auto vars:     Size  Location     Type
  9013 ;;  quotient        2    8[BANK0 ] int 
  9014 ;;  sign            1    7[BANK0 ] unsigned char 
  9015 ;;  counter         1    6[BANK0 ] unsigned char 
  9016 ;; Return value:  Size  Location     Type
  9017 ;;                  2    1[BANK0 ] int 
  9018 ;; Registers used:
  9019 ;;		wreg, status,2, status,0
  9020 ;; Tracked objects:
  9021 ;;		On entry : 0/0
  9022 ;;		On exit  : 0/0
  9023 ;;		Unchanged: 0/0
  9024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9025 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9026 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9027 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9028 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9029 ;;Total ram usage:        9 bytes
  9030 ;; Hardware stack levels used:    1
  9031 ;; Hardware stack levels required when called:    6
  9032 ;; This function calls:
  9033 ;;		Nothing
  9034 ;; This function is called by:
  9035 ;;		_writeDisplay
  9036 ;; This function uses a non-reentrant model
  9037 ;;
  9038                           
  9039                           
  9040                           ;psect for function ___awdiv
  9041  02AF                     ___awdiv:	
  9042                           
  9043                           ;incstack = 0
  9044                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  9045  02AF  0020               	movlb	0	; select bank0
  9046  02B0  01A7               	clrf	___awdiv@sign
  9047  02B1  1FA2               	btfss	___awdiv@divisor+1,7
  9048  02B2  2ABA               	goto	l2884
  9049  02B3  09A1               	comf	___awdiv@divisor,f
  9050  02B4  09A2               	comf	___awdiv@divisor+1,f
  9051  02B5  0AA1               	incf	___awdiv@divisor,f
  9052  02B6  1903               	skipnz
  9053  02B7  0AA2               	incf	___awdiv@divisor+1,f
  9054  02B8  01A7               	clrf	___awdiv@sign
  9055  02B9  0AA7               	incf	___awdiv@sign,f
  9056  02BA                     l2884:	
  9057  02BA  1FA4               	btfss	___awdiv@dividend+1,7
  9058  02BB  2AC5               	goto	l2890
  9059  02BC  09A3               	comf	___awdiv@dividend,f
  9060  02BD  09A4               	comf	___awdiv@dividend+1,f
  9061  02BE  0AA3               	incf	___awdiv@dividend,f
  9062  02BF  1903               	skipnz
  9063  02C0  0AA4               	incf	___awdiv@dividend+1,f
  9064  02C1  3001               	movlw	1
  9065  02C2  00A5               	movwf	??___awdiv
  9066  02C3  0825               	movf	??___awdiv,w
  9067  02C4  06A7               	xorwf	___awdiv@sign,f
  9068  02C5                     l2890:	
  9069  02C5  01A8               	clrf	___awdiv@quotient
  9070  02C6  01A9               	clrf	___awdiv@quotient+1
  9071  02C7  0821               	movf	___awdiv@divisor,w
  9072  02C8  0422               	iorwf	___awdiv@divisor+1,w
  9073  02C9  1903               	btfsc	3,2
  9074  02CA  2AF4               	goto	l2912
  9075  02CB  01A6               	clrf	___awdiv@counter
  9076  02CC  0AA6               	incf	___awdiv@counter,f
  9077  02CD                     l2900:	
  9078  02CD  1BA2               	btfsc	___awdiv@divisor+1,7
  9079  02CE  2AD9               	goto	l2902
  9080  02CF  3001               	movlw	1
  9081  02D0                     u1515:	
  9082  02D0  35A1               	lslf	___awdiv@divisor,f
  9083  02D1  0DA2               	rlf	___awdiv@divisor+1,f
  9084  02D2  0B89               	decfsz	9,f
  9085  02D3  2AD0               	goto	u1515
  9086  02D4  3001               	movlw	1
  9087  02D5  00A5               	movwf	??___awdiv
  9088  02D6  0825               	movf	??___awdiv,w
  9089  02D7  07A6               	addwf	___awdiv@counter,f
  9090  02D8  2ACD               	goto	l2900
  9091  02D9                     l2902:	
  9092  02D9  3001               	movlw	1
  9093  02DA                     u1535:	
  9094  02DA  35A8               	lslf	___awdiv@quotient,f
  9095  02DB  0DA9               	rlf	___awdiv@quotient+1,f
  9096  02DC  0B89               	decfsz	9,f
  9097  02DD  2ADA               	goto	u1535
  9098  02DE  0822               	movf	___awdiv@divisor+1,w
  9099  02DF  0224               	subwf	___awdiv@dividend+1,w
  9100  02E0  1D03               	skipz
  9101  02E1  2AE4               	goto	u1545
  9102  02E2  0821               	movf	___awdiv@divisor,w
  9103  02E3  0223               	subwf	___awdiv@dividend,w
  9104  02E4                     u1545:	
  9105  02E4  1C03               	skipc
  9106  02E5  2AEB               	goto	l2908
  9107  02E6  0821               	movf	___awdiv@divisor,w
  9108  02E7  02A3               	subwf	___awdiv@dividend,f
  9109  02E8  0822               	movf	___awdiv@divisor+1,w
  9110  02E9  3BA4               	subwfb	___awdiv@dividend+1,f
  9111  02EA  1428               	bsf	___awdiv@quotient,0
  9112  02EB                     l2908:	
  9113  02EB  3001               	movlw	1
  9114  02EC                     u1555:	
  9115  02EC  36A2               	lsrf	___awdiv@divisor+1,f
  9116  02ED  0CA1               	rrf	___awdiv@divisor,f
  9117  02EE  0B89               	decfsz	9,f
  9118  02EF  2AEC               	goto	u1555
  9119  02F0  3001               	movlw	1
  9120  02F1  02A6               	subwf	___awdiv@counter,f
  9121  02F2  1D03               	btfss	3,2
  9122  02F3  2AD9               	goto	l2902
  9123  02F4                     l2912:	
  9124  02F4  0827               	movf	___awdiv@sign,w
  9125  02F5  1903               	btfsc	3,2
  9126  02F6  2AFC               	goto	l2916
  9127  02F7  09A8               	comf	___awdiv@quotient,f
  9128  02F8  09A9               	comf	___awdiv@quotient+1,f
  9129  02F9  0AA8               	incf	___awdiv@quotient,f
  9130  02FA  1903               	skipnz
  9131  02FB  0AA9               	incf	___awdiv@quotient+1,f
  9132  02FC                     l2916:	
  9133  02FC  0829               	movf	___awdiv@quotient+1,w
  9134  02FD  00A2               	movwf	?___awdiv+1
  9135  02FE  0828               	movf	___awdiv@quotient,w
  9136  02FF  00A1               	movwf	?___awdiv
  9137  0300  0008               	return
  9138  0301                     __end_of___awdiv:	
  9139                           
  9140                           	psect	text63
  9141  0791                     __ptext63:	
  9142 ;; *************** function _drawWalls *****************
  9143 ;; Defined at:
  9144 ;;		line 129 in file "main.c"
  9145 ;; Parameters:    Size  Location     Type
  9146 ;;		None
  9147 ;; Auto vars:     Size  Location     Type
  9148 ;;		None
  9149 ;; Return value:  Size  Location     Type
  9150 ;;                  1    wreg      void 
  9151 ;; Registers used:
  9152 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9153 ;; Tracked objects:
  9154 ;;		On entry : 0/0
  9155 ;;		On exit  : 0/0
  9156 ;;		Unchanged: 0/0
  9157 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9158 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9159 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9160 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9161 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9162 ;;Total ram usage:        2 bytes
  9163 ;; Hardware stack levels used:    1
  9164 ;; Hardware stack levels required when called:    7
  9165 ;; This function calls:
  9166 ;;		_reverse
  9167 ;; This function is called by:
  9168 ;;		_main
  9169 ;; This function uses a non-reentrant model
  9170 ;;
  9171                           
  9172                           
  9173                           ;psect for function _drawWalls
  9174  0791                     _drawWalls:	
  9175                           
  9176                           ;main.c: 130: for (i = 0; i < 8; i++) {
  9177                           
  9178                           ;incstack = 0
  9179                           ; Regs used in _drawWalls: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9180  0791  0020               	movlb	0	; select bank0
  9181  0792  01DB               	clrf	_i
  9182  0793                     L2:	
  9183  0793  3008               	movlw	8
  9184  0794  025B               	subwf	_i,w
  9185  0795  1803               	btfsc	3,0
  9186  0796  0008               	return
  9187                           
  9188                           ;main.c: 131: pixelbuffer[i] |= reverse(walls[i]);
  9189  0797  085B               	movf	_i,w
  9190  0798  3E47               	addlw	(low (_walls| 0))& (0+255)
  9191  0799  0086               	movwf	6
  9192  079A  0187               	clrf	7
  9193  079B  0801               	movf	1,w
  9194  079C  3185  253A  3187   	fcall	_reverse
  9195  079F  0020               	movlb	0	; select bank0
  9196  07A0  00A5               	movwf	??_drawWalls
  9197  07A1  01A6               	clrf	??_drawWalls+1
  9198  07A2  355B               	lslf	_i,w
  9199  07A3  3EBD               	addlw	(low (_pixelbuffer| 0))& (0+255)
  9200  07A4  0086               	movwf	6
  9201  07A5  0187               	clrf	7
  9202  07A6  0825               	movf	??_drawWalls,w
  9203  07A7  0481               	iorwf	1,f
  9204  07A8  3141               	addfsr 1,1
  9205  07A9  0826               	movf	??_drawWalls+1,w
  9206  07AA  0481               	iorwf	1,f
  9207  07AB  3001               	movlw	1
  9208  07AC  00A5               	movwf	??_drawWalls
  9209  07AD  0825               	movf	??_drawWalls,w
  9210  07AE  07DB               	addwf	_i,f
  9211  07AF  2F93               	goto	L2
  9212  07B0                     __end_of_drawWalls:	
  9213                           
  9214                           	psect	text64
  9215  053A                     __ptext64:	
  9216 ;; *************** function _reverse *****************
  9217 ;; Defined at:
  9218 ;;		line 122 in file "main.c"
  9219 ;; Parameters:    Size  Location     Type
  9220 ;;  b               1    wreg     unsigned char 
  9221 ;; Auto vars:     Size  Location     Type
  9222 ;;  b               1    4[BANK0 ] unsigned char 
  9223 ;; Return value:  Size  Location     Type
  9224 ;;                  1    wreg      unsigned char 
  9225 ;; Registers used:
  9226 ;;		wreg, status,2, status,0
  9227 ;; Tracked objects:
  9228 ;;		On entry : 0/0
  9229 ;;		On exit  : 0/0
  9230 ;;		Unchanged: 0/0
  9231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9232 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9233 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9234 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9235 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9236 ;;Total ram usage:        4 bytes
  9237 ;; Hardware stack levels used:    1
  9238 ;; Hardware stack levels required when called:    6
  9239 ;; This function calls:
  9240 ;;		Nothing
  9241 ;; This function is called by:
  9242 ;;		_drawWalls
  9243 ;; This function uses a non-reentrant model
  9244 ;;
  9245                           
  9246                           
  9247                           ;psect for function _reverse
  9248  053A                     _reverse:	
  9249                           
  9250                           ;incstack = 0
  9251                           ; Regs used in _reverse: [wreg+status,2+status,0]
  9252                           ;reverse@b stored from wreg
  9253  053A  0020               	movlb	0	; select bank0
  9254  053B  00A4               	movwf	reverse@b
  9255                           
  9256                           ;main.c: 123: b = (b & 0xF0) >> 4 | (b & 0x0F) << 4;
  9257  053C  0824               	movf	reverse@b,w
  9258  053D  390F               	andlw	15
  9259  053E  00A1               	movwf	??_reverse
  9260  053F  3004               	movlw	4
  9261  0540                     u1715:	
  9262  0540  35A1               	lslf	??_reverse,f
  9263  0541  0B89               	decfsz	9,f
  9264  0542  2D40               	goto	u1715
  9265  0543  0824               	movf	reverse@b,w
  9266  0544  00A2               	movwf	??_reverse+1
  9267  0545  3004               	movlw	4
  9268  0546                     u1725:	
  9269  0546  36A2               	lsrf	??_reverse+1,f
  9270  0547  0B89               	decfsz	9,f
  9271  0548  2D46               	goto	u1725
  9272  0549  0822               	movf	??_reverse+1,w
  9273  054A  390F               	andlw	15
  9274  054B  0421               	iorwf	??_reverse,w
  9275  054C  00A3               	movwf	??_reverse+2
  9276  054D  0823               	movf	??_reverse+2,w
  9277  054E  00A4               	movwf	reverse@b
  9278                           
  9279                           ;main.c: 124: b = (b & 0xCC) >> 2 | (b & 0x33) << 2;
  9280  054F  0824               	movf	reverse@b,w
  9281  0550  3933               	andlw	51
  9282  0551  00A1               	movwf	??_reverse
  9283  0552  3002               	movlw	2
  9284  0553                     u1735:	
  9285  0553  35A1               	lslf	??_reverse,f
  9286  0554  0B89               	decfsz	9,f
  9287  0555  2D53               	goto	u1735
  9288  0556  0824               	movf	reverse@b,w
  9289  0557  00A2               	movwf	??_reverse+1
  9290  0558  3002               	movlw	2
  9291  0559                     u1745:	
  9292  0559  36A2               	lsrf	??_reverse+1,f
  9293  055A  0B89               	decfsz	9,f
  9294  055B  2D59               	goto	u1745
  9295  055C  0822               	movf	??_reverse+1,w
  9296  055D  3933               	andlw	51
  9297  055E  0421               	iorwf	??_reverse,w
  9298  055F  00A3               	movwf	??_reverse+2
  9299  0560  0823               	movf	??_reverse+2,w
  9300  0561  00A4               	movwf	reverse@b
  9301                           
  9302                           ;main.c: 125: b = (b & 0xAA) >> 1 | (b & 0x55) << 1;
  9303  0562  0824               	movf	reverse@b,w
  9304  0563  3955               	andlw	85
  9305  0564  00A1               	movwf	??_reverse
  9306  0565  3001               	movlw	1
  9307  0566                     u1755:	
  9308  0566  35A1               	lslf	??_reverse,f
  9309  0567  0B89               	decfsz	9,f
  9310  0568  2D66               	goto	u1755
  9311  0569  3624               	lsrf	reverse@b,w
  9312  056A  3955               	andlw	85
  9313  056B  0421               	iorwf	??_reverse,w
  9314  056C  00A2               	movwf	??_reverse+1
  9315  056D  0822               	movf	??_reverse+1,w
  9316  056E  00A4               	movwf	reverse@b
  9317                           
  9318                           ;main.c: 126: return b;
  9319  056F  0824               	movf	reverse@b,w
  9320  0570  0008               	return
  9321  0571                     __end_of_reverse:	
  9322                           
  9323                           	psect	text65
  9324  005B                     __ptext65:	
  9325 ;; *************** function _drawPixel *****************
  9326 ;; Defined at:
  9327 ;;		line 79 in file "main.c"
  9328 ;; Parameters:    Size  Location     Type
  9329 ;;  x               1    wreg     unsigned char 
  9330 ;;  y               1    1[BANK0 ] unsigned char 
  9331 ;;  color           1    2[BANK0 ] unsigned char 
  9332 ;; Auto vars:     Size  Location     Type
  9333 ;;  x               1    9[BANK0 ] unsigned char 
  9334 ;; Return value:  Size  Location     Type
  9335 ;;                  1    wreg      void 
  9336 ;; Registers used:
  9337 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9338 ;; Tracked objects:
  9339 ;;		On entry : 0/0
  9340 ;;		On exit  : 0/0
  9341 ;;		Unchanged: 0/0
  9342 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9343 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9344 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9345 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9346 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9347 ;;Total ram usage:        9 bytes
  9348 ;; Hardware stack levels used:    1
  9349 ;; Hardware stack levels required when called:    6
  9350 ;; This function calls:
  9351 ;;		Nothing
  9352 ;; This function is called by:
  9353 ;;		_main
  9354 ;; This function uses a non-reentrant model
  9355 ;;
  9356                           
  9357                           
  9358                           ;psect for function _drawPixel
  9359  005B                     _drawPixel:	
  9360                           
  9361                           ;incstack = 0
  9362                           ; Regs used in _drawPixel: [wreg+fsr1l+fsr1h+status,2+status,0]
  9363                           ;drawPixel@x stored from wreg
  9364  005B  0020               	movlb	0	; select bank0
  9365  005C  00A9               	movwf	drawPixel@x
  9366                           
  9367                           ;main.c: 80: if (color == 1) {
  9368  005D  0322               	decf	drawPixel@color,w
  9369  005E  1D03               	btfss	3,2
  9370  005F  288B               	goto	l3294
  9371                           
  9372                           ;main.c: 81: pixelbuffer[y] |= 1 << x;
  9373  0060  3001               	movlw	1
  9374  0061  00A3               	movwf	??_drawPixel
  9375  0062  3000               	movlw	0
  9376  0063  00A4               	movwf	??_drawPixel+1
  9377  0064  0A29               	incf	drawPixel@x,w
  9378  0065  2868               	goto	u1814
  9379  0066                     u1815:	
  9380  0066  35A3               	lslf	??_drawPixel,f
  9381  0067  0DA4               	rlf	??_drawPixel+1,f
  9382  0068                     u1814:	
  9383  0068  0B89               	decfsz	9,f
  9384  0069  2866               	goto	u1815
  9385  006A  3521               	lslf	drawPixel@y,w
  9386  006B  3EBD               	addlw	(low (_pixelbuffer| 0))& (0+255)
  9387  006C  0086               	movwf	6
  9388  006D  0187               	clrf	7
  9389  006E  0823               	movf	??_drawPixel,w
  9390  006F  0481               	iorwf	1,f
  9391  0070  3141               	addfsr 1,1
  9392  0071  0824               	movf	??_drawPixel+1,w
  9393  0072  0481               	iorwf	1,f
  9394                           
  9395                           ;main.c: 82: pixelbuffer[y] &= ~(1 << (x + 8));
  9396  0073  3001               	movlw	1
  9397  0074  00A3               	movwf	??_drawPixel
  9398  0075  3000               	movlw	0
  9399  0076  00A4               	movwf	??_drawPixel+1
  9400  0077  0829               	movf	drawPixel@x,w
  9401  0078  3E08               	addlw	8
  9402  0079  0A89               	incf	9,f
  9403  007A  287D               	goto	u1824
  9404  007B                     u1825:	
  9405  007B  35A3               	lslf	??_drawPixel,f
  9406  007C  0DA4               	rlf	??_drawPixel+1,f
  9407  007D                     u1824:	
  9408  007D  0B89               	decfsz	9,f
  9409  007E  287B               	goto	u1825
  9410  007F  09A3               	comf	??_drawPixel,f
  9411  0080  09A4               	comf	??_drawPixel+1,f
  9412  0081  3521               	lslf	drawPixel@y,w
  9413  0082  3EBD               	addlw	(low (_pixelbuffer| 0))& (0+255)
  9414  0083  0086               	movwf	6
  9415  0084  0187               	clrf	7
  9416  0085  0823               	movf	??_drawPixel,w
  9417  0086  0581               	andwf	1,f
  9418  0087  3141               	addfsr 1,1
  9419  0088  0824               	movf	??_drawPixel+1,w
  9420  0089  0581               	andwf	1,f
  9421                           
  9422                           ;main.c: 83: } else if (color == 2) {
  9423  008A  0008               	return
  9424  008B                     l3294:	
  9425  008B  3002               	movlw	2
  9426  008C  0622               	xorwf	drawPixel@color,w
  9427  008D  1D03               	btfss	3,2
  9428  008E  28BA               	goto	l3298
  9429                           
  9430                           ;main.c: 84: pixelbuffer[y] |= 1 << (x + 8);
  9431  008F  3001               	movlw	1
  9432  0090  00A3               	movwf	??_drawPixel
  9433  0091  3000               	movlw	0
  9434  0092  00A4               	movwf	??_drawPixel+1
  9435  0093  0829               	movf	drawPixel@x,w
  9436  0094  3E08               	addlw	8
  9437  0095  0A89               	incf	9,f
  9438  0096  2899               	goto	u1844
  9439  0097                     u1845:	
  9440  0097  35A3               	lslf	??_drawPixel,f
  9441  0098  0DA4               	rlf	??_drawPixel+1,f
  9442  0099                     u1844:	
  9443  0099  0B89               	decfsz	9,f
  9444  009A  2897               	goto	u1845
  9445  009B  3521               	lslf	drawPixel@y,w
  9446  009C  3EBD               	addlw	(low (_pixelbuffer| 0))& (0+255)
  9447  009D  0086               	movwf	6
  9448  009E  0187               	clrf	7
  9449  009F  0823               	movf	??_drawPixel,w
  9450  00A0  0481               	iorwf	1,f
  9451  00A1  3141               	addfsr 1,1
  9452  00A2  0824               	movf	??_drawPixel+1,w
  9453  00A3  0481               	iorwf	1,f
  9454                           
  9455                           ;main.c: 85: pixelbuffer[y] &= ~(1 << x);
  9456  00A4  3001               	movlw	1
  9457  00A5  00A3               	movwf	??_drawPixel
  9458  00A6  3000               	movlw	0
  9459  00A7  00A4               	movwf	??_drawPixel+1
  9460  00A8  0A29               	incf	drawPixel@x,w
  9461  00A9  28AC               	goto	u1854
  9462  00AA                     u1855:	
  9463  00AA  35A3               	lslf	??_drawPixel,f
  9464  00AB  0DA4               	rlf	??_drawPixel+1,f
  9465  00AC                     u1854:	
  9466  00AC  0B89               	decfsz	9,f
  9467  00AD  28AA               	goto	u1855
  9468  00AE  09A3               	comf	??_drawPixel,f
  9469  00AF  09A4               	comf	??_drawPixel+1,f
  9470  00B0  3521               	lslf	drawPixel@y,w
  9471  00B1  3EBD               	addlw	(low (_pixelbuffer| 0))& (0+255)
  9472  00B2  0086               	movwf	6
  9473  00B3  0187               	clrf	7
  9474  00B4  0823               	movf	??_drawPixel,w
  9475  00B5  0581               	andwf	1,f
  9476  00B6  3141               	addfsr 1,1
  9477  00B7  0824               	movf	??_drawPixel+1,w
  9478  00B8  0581               	andwf	1,f
  9479                           
  9480                           ;main.c: 86: } else if (color == 3) {
  9481  00B9  0008               	return
  9482  00BA                     l3298:	
  9483  00BA  3003               	movlw	3
  9484  00BB  0622               	xorwf	drawPixel@color,w
  9485  00BC  1D03               	btfss	3,2
  9486  00BD  28E4               	goto	l3302
  9487                           
  9488                           ;main.c: 87: pixelbuffer[y] |= (1 << (x + 8)) | (1 << x);
  9489  00BE  3001               	movlw	1
  9490  00BF  00A3               	movwf	??_drawPixel
  9491  00C0  3000               	movlw	0
  9492  00C1  00A4               	movwf	??_drawPixel+1
  9493  00C2  0A29               	incf	drawPixel@x,w
  9494  00C3  28C6               	goto	u1874
  9495  00C4                     u1875:	
  9496  00C4  35A3               	lslf	??_drawPixel,f
  9497  00C5  0DA4               	rlf	??_drawPixel+1,f
  9498  00C6                     u1874:	
  9499  00C6  0B89               	decfsz	9,f
  9500  00C7  28C4               	goto	u1875
  9501  00C8  3001               	movlw	1
  9502  00C9  00A5               	movwf	??_drawPixel+2
  9503  00CA  3000               	movlw	0
  9504  00CB  00A6               	movwf	??_drawPixel+3
  9505  00CC  0829               	movf	drawPixel@x,w
  9506  00CD  3E08               	addlw	8
  9507  00CE  0A89               	incf	9,f
  9508  00CF  28D2               	goto	u1884
  9509  00D0                     u1885:	
  9510  00D0  35A5               	lslf	??_drawPixel+2,f
  9511  00D1  0DA6               	rlf	??_drawPixel+3,f
  9512  00D2                     u1884:	
  9513  00D2  0B89               	decfsz	9,f
  9514  00D3  28D0               	goto	u1885
  9515  00D4  0823               	movf	??_drawPixel,w
  9516  00D5  0425               	iorwf	??_drawPixel+2,w
  9517  00D6  00A7               	movwf	??_drawPixel+4
  9518  00D7  0824               	movf	??_drawPixel+1,w
  9519  00D8  0426               	iorwf	??_drawPixel+3,w
  9520  00D9  00A8               	movwf	??_drawPixel+5
  9521  00DA  3521               	lslf	drawPixel@y,w
  9522  00DB  3EBD               	addlw	(low (_pixelbuffer| 0))& (0+255)
  9523  00DC  0086               	movwf	6
  9524  00DD  0187               	clrf	7
  9525  00DE  0827               	movf	??_drawPixel+4,w
  9526  00DF  0481               	iorwf	1,f
  9527  00E0  3141               	addfsr 1,1
  9528  00E1  0828               	movf	??_drawPixel+5,w
  9529  00E2  0481               	iorwf	1,f
  9530                           
  9531                           ;main.c: 88: } else if (color == 0) {
  9532  00E3  0008               	return
  9533  00E4                     l3302:	
  9534  00E4  0822               	movf	drawPixel@color,w
  9535  00E5  1D03               	btfss	3,2
  9536  00E6  0008               	return
  9537                           
  9538                           ;main.c: 89: pixelbuffer[y] &= ~(1 << x) & ~(1 << (x + 8));
  9539  00E7  3001               	movlw	1
  9540  00E8  00A3               	movwf	??_drawPixel
  9541  00E9  3000               	movlw	0
  9542  00EA  00A4               	movwf	??_drawPixel+1
  9543  00EB  0829               	movf	drawPixel@x,w
  9544  00EC  3E08               	addlw	8
  9545  00ED  0A89               	incf	9,f
  9546  00EE  28F1               	goto	u1904
  9547  00EF                     u1905:	
  9548  00EF  35A3               	lslf	??_drawPixel,f
  9549  00F0  0DA4               	rlf	??_drawPixel+1,f
  9550  00F1                     u1904:	
  9551  00F1  0B89               	decfsz	9,f
  9552  00F2  28EF               	goto	u1905
  9553  00F3  09A3               	comf	??_drawPixel,f
  9554  00F4  09A4               	comf	??_drawPixel+1,f
  9555  00F5  3001               	movlw	1
  9556  00F6  00A5               	movwf	??_drawPixel+2
  9557  00F7  3000               	movlw	0
  9558  00F8  00A6               	movwf	??_drawPixel+3
  9559  00F9  0A29               	incf	drawPixel@x,w
  9560  00FA  28FD               	goto	u1914
  9561  00FB                     u1915:	
  9562  00FB  35A5               	lslf	??_drawPixel+2,f
  9563  00FC  0DA6               	rlf	??_drawPixel+3,f
  9564  00FD                     u1914:	
  9565  00FD  0B89               	decfsz	9,f
  9566  00FE  28FB               	goto	u1915
  9567  00FF  09A5               	comf	??_drawPixel+2,f
  9568  0100  09A6               	comf	??_drawPixel+3,f
  9569  0101  0823               	movf	??_drawPixel,w
  9570  0102  0525               	andwf	??_drawPixel+2,w
  9571  0103  00A7               	movwf	??_drawPixel+4
  9572  0104  0824               	movf	??_drawPixel+1,w
  9573  0105  0526               	andwf	??_drawPixel+3,w
  9574  0106  00A8               	movwf	??_drawPixel+5
  9575  0107  3521               	lslf	drawPixel@y,w
  9576  0108  3EBD               	addlw	(low (_pixelbuffer| 0))& (0+255)
  9577  0109  0086               	movwf	6
  9578  010A  0187               	clrf	7
  9579  010B  0827               	movf	??_drawPixel+4,w
  9580  010C  0581               	andwf	1,f
  9581  010D  3141               	addfsr 1,1
  9582  010E  0828               	movf	??_drawPixel+5,w
  9583  010F  0581               	andwf	1,f
  9584  0110  0008               	return
  9585  0111                     __end_of_drawPixel:	
  9586                           
  9587                           	psect	text66
  9588  0F81                     __ptext66:	
  9589 ;; *************** function _clearPixels *****************
  9590 ;; Defined at:
  9591 ;;		line 93 in file "main.c"
  9592 ;; Parameters:    Size  Location     Type
  9593 ;;		None
  9594 ;; Auto vars:     Size  Location     Type
  9595 ;;		None
  9596 ;; Return value:  Size  Location     Type
  9597 ;;                  1    wreg      void 
  9598 ;; Registers used:
  9599 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9600 ;; Tracked objects:
  9601 ;;		On entry : 0/0
  9602 ;;		On exit  : 0/0
  9603 ;;		Unchanged: 0/0
  9604 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9605 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9606 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9607 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9608 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9609 ;;Total ram usage:        1 bytes
  9610 ;; Hardware stack levels used:    1
  9611 ;; Hardware stack levels required when called:    6
  9612 ;; This function calls:
  9613 ;;		Nothing
  9614 ;; This function is called by:
  9615 ;;		_main
  9616 ;; This function uses a non-reentrant model
  9617 ;;
  9618                           
  9619                           
  9620                           ;psect for function _clearPixels
  9621  0F81                     _clearPixels:	
  9622                           
  9623                           ;main.c: 94: for (i = 0; i < 8; i++) {
  9624                           
  9625                           ;incstack = 0
  9626                           ; Regs used in _clearPixels: [wreg+fsr1l+fsr1h+status,2+status,0]
  9627  0F81  0020               	movlb	0	; select bank0
  9628  0F82  01DB               	clrf	_i
  9629  0F83                     L3:	
  9630  0F83  3008               	movlw	8
  9631  0F84  025B               	subwf	_i,w
  9632  0F85  1803               	btfsc	3,0
  9633  0F86  0008               	return
  9634                           
  9635                           ;main.c: 95: pixelbuffer[i] = 0;
  9636  0F87  355B               	lslf	_i,w
  9637  0F88  3EBD               	addlw	(low (_pixelbuffer| 0))& (0+255)
  9638  0F89  0086               	movwf	6
  9639  0F8A  0187               	clrf	7
  9640  0F8B  3000               	movlw	0
  9641  0F8C  3FC0               	movwi [0]fsr1
  9642  0F8D  3FC1               	movwi [1]fsr1
  9643  0F8E  3001               	movlw	1
  9644  0F8F  00A1               	movwf	??_clearPixels
  9645  0F90  0821               	movf	??_clearPixels,w
  9646  0F91  07DB               	addwf	_i,f
  9647  0F92  2F83               	goto	L3
  9648  0F93                     __end_of_clearPixels:	
  9649                           
  9650                           	psect	text67
  9651  0DEE                     __ptext67:	
  9652 ;; *************** function _SYSTEM_Initialize *****************
  9653 ;; Defined at:
  9654 ;;		line 77 in file "mcc_generated_files/mcc.c"
  9655 ;; Parameters:    Size  Location     Type
  9656 ;;		None
  9657 ;; Auto vars:     Size  Location     Type
  9658 ;;		None
  9659 ;; Return value:  Size  Location     Type
  9660 ;;                  1    wreg      void 
  9661 ;; Registers used:
  9662 ;;		wreg, status,2, status,0, pclath, cstack
  9663 ;; Tracked objects:
  9664 ;;		On entry : 0/0
  9665 ;;		On exit  : 0/0
  9666 ;;		Unchanged: 0/0
  9667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9668 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9669 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9670 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9671 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9672 ;;Total ram usage:        0 bytes
  9673 ;; Hardware stack levels used:    1
  9674 ;; Hardware stack levels required when called:    8
  9675 ;; This function calls:
  9676 ;;		_OSCILLATOR_Initialize
  9677 ;;		_PIN_MANAGER_Initialize
  9678 ;; This function is called by:
  9679 ;;		_main
  9680 ;; This function uses a non-reentrant model
  9681 ;;
  9682                           
  9683                           
  9684                           ;psect for function _SYSTEM_Initialize
  9685  0DEE                     _SYSTEM_Initialize:	
  9686                           
  9687                           ;mcc.c: 79: PIN_MANAGER_Initialize();
  9688                           
  9689                           ;incstack = 0
  9690                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  9691  0DEE  3185  2571  318D   	fcall	_PIN_MANAGER_Initialize
  9692                           
  9693                           ;mcc.c: 80: OSCILLATOR_Initialize();
  9694  0DF1  318E  267B         	fcall	_OSCILLATOR_Initialize
  9695  0DF3  0008               	return
  9696  0DF4                     __end_of_SYSTEM_Initialize:	
  9697                           
  9698                           	psect	text68
  9699  0571                     __ptext68:	
  9700 ;; *************** function _PIN_MANAGER_Initialize *****************
  9701 ;; Defined at:
  9702 ;;		line 54 in file "mcc_generated_files/pin_manager.c"
  9703 ;; Parameters:    Size  Location     Type
  9704 ;;		None
  9705 ;; Auto vars:     Size  Location     Type
  9706 ;;		None
  9707 ;; Return value:  Size  Location     Type
  9708 ;;                  1    wreg      void 
  9709 ;; Registers used:
  9710 ;;		wreg, status,2, status,0, pclath, cstack
  9711 ;; Tracked objects:
  9712 ;;		On entry : 0/0
  9713 ;;		On exit  : 0/0
  9714 ;;		Unchanged: 0/0
  9715 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9716 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9717 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9718 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9719 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9720 ;;Total ram usage:        0 bytes
  9721 ;; Hardware stack levels used:    1
  9722 ;; Hardware stack levels required when called:    7
  9723 ;; This function calls:
  9724 ;;		_IOCCF4_SetInterruptHandler
  9725 ;; This function is called by:
  9726 ;;		_SYSTEM_Initialize
  9727 ;; This function uses a non-reentrant model
  9728 ;;
  9729                           
  9730                           
  9731                           ;psect for function _PIN_MANAGER_Initialize
  9732  0571                     _PIN_MANAGER_Initialize:	
  9733                           
  9734                           ;pin_manager.c: 59: LATA = 0x00;
  9735                           
  9736                           ;incstack = 0
  9737                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0+pclath+cstack]
  9738  0571  0022               	movlb	2	; select bank2
  9739  0572  018C               	clrf	12	;volatile
  9740                           
  9741                           ;pin_manager.c: 60: LATB = 0x00;
  9742  0573  018D               	clrf	13	;volatile
  9743                           
  9744                           ;pin_manager.c: 61: LATC = 0x00;
  9745  0574  018E               	clrf	14	;volatile
  9746                           
  9747                           ;pin_manager.c: 66: TRISA = 0x37;
  9748  0575  3037               	movlw	55
  9749  0576  0021               	movlb	1	; select bank1
  9750  0577  008C               	movwf	12	;volatile
  9751                           
  9752                           ;pin_manager.c: 67: TRISB = 0xF0;
  9753  0578  30F0               	movlw	240
  9754  0579  008D               	movwf	13	;volatile
  9755                           
  9756                           ;pin_manager.c: 68: TRISC = 0xFF;
  9757  057A  30FF               	movlw	255
  9758  057B  008E               	movwf	14	;volatile
  9759                           
  9760                           ;pin_manager.c: 73: ANSELC = 0xCF;
  9761  057C  30CF               	movlw	207
  9762  057D  0023               	movlb	3	; select bank3
  9763  057E  008E               	movwf	14	;volatile
  9764                           
  9765                           ;pin_manager.c: 74: ANSELB = 0xA0;
  9766  057F  30A0               	movlw	160
  9767  0580  008D               	movwf	13	;volatile
  9768                           
  9769                           ;pin_manager.c: 75: ANSELA = 0x17;
  9770  0581  3017               	movlw	23
  9771  0582  008C               	movwf	12	;volatile
  9772                           
  9773                           ;pin_manager.c: 80: WPUB = 0x00;
  9774  0583  0024               	movlb	4	; select bank4
  9775  0584  018D               	clrf	13	;volatile
  9776                           
  9777                           ;pin_manager.c: 81: WPUA = 0x00;
  9778  0585  018C               	clrf	12	;volatile
  9779                           
  9780                           ;pin_manager.c: 82: WPUC = 0x10;
  9781  0586  3010               	movlw	16
  9782  0587  008E               	movwf	14	;volatile
  9783                           
  9784                           ;pin_manager.c: 83: OPTION_REGbits.nWPUEN = 0;
  9785  0588  0021               	movlb	1	; select bank1
  9786  0589  1395               	bcf	21,7	;volatile
  9787                           
  9788                           ;pin_manager.c: 88: ODCONA = 0x00;
  9789  058A  0025               	movlb	5	; select bank5
  9790  058B  018C               	clrf	12	;volatile
  9791                           
  9792                           ;pin_manager.c: 89: ODCONB = 0x00;
  9793  058C  018D               	clrf	13	;volatile
  9794                           
  9795                           ;pin_manager.c: 90: ODCONC = 0x00;
  9796  058D  018E               	clrf	14	;volatile
  9797                           
  9798                           ;pin_manager.c: 97: IOCCFbits.IOCCF4 = 0;
  9799  058E  0027               	movlb	7	; select bank7
  9800  058F  1219               	bcf	25,4	;volatile
  9801                           
  9802                           ;pin_manager.c: 99: IOCCNbits.IOCCN4 = 1;
  9803  0590  1618               	bsf	24,4	;volatile
  9804                           
  9805                           ;pin_manager.c: 101: IOCCPbits.IOCCP4 = 1;
  9806  0591  1617               	bsf	23,4	;volatile
  9807                           
  9808                           ;pin_manager.c: 104: IOCCF4_SetInterruptHandler(IOCCF4_DefaultInterruptHandler);
  9809  0592  3067               	movlw	low _IOCCF4_DefaultInterruptHandler
  9810  0593  0020               	movlb	0	; select bank0
  9811  0594  00A1               	movwf	IOCCF4_SetInterruptHandler@InterruptHandler
  9812  0595  300D               	movlw	high _IOCCF4_DefaultInterruptHandler
  9813  0596  00A2               	movwf	IOCCF4_SetInterruptHandler@InterruptHandler+1
  9814  0597  318D  25E8         	fcall	_IOCCF4_SetInterruptHandler
  9815                           
  9816                           ;pin_manager.c: 107: INTCONbits.IOCIE = 1;
  9817  0599  158B               	bsf	11,3	;volatile
  9818                           
  9819                           ;pin_manager.c: 110: SSPCLKPPS = 0x0E;
  9820  059A  300E               	movlw	14
  9821  059B  003C               	movlb	28	; select bank28
  9822  059C  00A0               	movwf	32	;volatile
  9823                           
  9824                           ;pin_manager.c: 111: SSPDATPPS = 0x0C;
  9825  059D  300C               	movlw	12
  9826  059E  00A1               	movwf	33	;volatile
  9827                           
  9828                           ;pin_manager.c: 112: RB6PPS = 0x10;
  9829  059F  3010               	movlw	16
  9830  05A0  003D               	movlb	29	; select bank29
  9831  05A1  009E               	movwf	30	;volatile
  9832                           
  9833                           ;pin_manager.c: 113: RB4PPS = 0x11;
  9834  05A2  3011               	movlw	17
  9835  05A3  009C               	movwf	28	;volatile
  9836  05A4  0008               	return
  9837  05A5                     __end_of_PIN_MANAGER_Initialize:	
  9838                           
  9839                           	psect	text69
  9840  0DE8                     __ptext69:	
  9841 ;; *************** function _IOCCF4_SetInterruptHandler *****************
  9842 ;; Defined at:
  9843 ;;		line 146 in file "mcc_generated_files/pin_manager.c"
  9844 ;; Parameters:    Size  Location     Type
  9845 ;;  InterruptHan    2    1[BANK0 ] PTR FTN()void 
  9846 ;;		 -> buttonInterrupt(1), IOCCF4_DefaultInterruptHandler(1), 
  9847 ;; Auto vars:     Size  Location     Type
  9848 ;;		None
  9849 ;; Return value:  Size  Location     Type
  9850 ;;                  1    wreg      void 
  9851 ;; Registers used:
  9852 ;;		wreg
  9853 ;; Tracked objects:
  9854 ;;		On entry : 0/0
  9855 ;;		On exit  : 0/0
  9856 ;;		Unchanged: 0/0
  9857 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9858 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9859 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9860 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9861 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9862 ;;Total ram usage:        2 bytes
  9863 ;; Hardware stack levels used:    1
  9864 ;; Hardware stack levels required when called:    6
  9865 ;; This function calls:
  9866 ;;		Nothing
  9867 ;; This function is called by:
  9868 ;;		_PIN_MANAGER_Initialize
  9869 ;;		_main
  9870 ;; This function uses a non-reentrant model
  9871 ;;
  9872                           
  9873                           
  9874                           ;psect for function _IOCCF4_SetInterruptHandler
  9875  0DE8                     _IOCCF4_SetInterruptHandler:	
  9876                           
  9877                           ;pin_manager.c: 147: IOCCF4_InterruptHandler = InterruptHandler;
  9878                           
  9879                           ;incstack = 0
  9880                           ; Regs used in _IOCCF4_SetInterruptHandler: [wreg]
  9881  0DE8  0020               	movlb	0	; select bank0
  9882  0DE9  0822               	movf	IOCCF4_SetInterruptHandler@InterruptHandler+1,w
  9883  0DEA  00E6               	movwf	_IOCCF4_InterruptHandler+1
  9884  0DEB  0821               	movf	IOCCF4_SetInterruptHandler@InterruptHandler,w
  9885  0DEC  00E5               	movwf	_IOCCF4_InterruptHandler
  9886  0DED  0008               	return
  9887  0DEE                     __end_of_IOCCF4_SetInterruptHandler:	
  9888                           
  9889                           	psect	text70
  9890  0E7B                     __ptext70:	
  9891 ;; *************** function _OSCILLATOR_Initialize *****************
  9892 ;; Defined at:
  9893 ;;		line 83 in file "mcc_generated_files/mcc.c"
  9894 ;; Parameters:    Size  Location     Type
  9895 ;;		None
  9896 ;; Auto vars:     Size  Location     Type
  9897 ;;		None
  9898 ;; Return value:  Size  Location     Type
  9899 ;;                  1    wreg      void 
  9900 ;; Registers used:
  9901 ;;		wreg, status,2
  9902 ;; Tracked objects:
  9903 ;;		On entry : 0/0
  9904 ;;		On exit  : 0/0
  9905 ;;		Unchanged: 0/0
  9906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9907 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9908 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9909 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9910 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9911 ;;Total ram usage:        0 bytes
  9912 ;; Hardware stack levels used:    1
  9913 ;; Hardware stack levels required when called:    6
  9914 ;; This function calls:
  9915 ;;		Nothing
  9916 ;; This function is called by:
  9917 ;;		_SYSTEM_Initialize
  9918 ;; This function uses a non-reentrant model
  9919 ;;
  9920                           
  9921                           
  9922                           ;psect for function _OSCILLATOR_Initialize
  9923  0E7B                     _OSCILLATOR_Initialize:	
  9924                           
  9925                           ;mcc.c: 86: OSCCON = 0x78;
  9926                           
  9927                           ;incstack = 0
  9928                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  9929  0E7B  3078               	movlw	120
  9930  0E7C  0021               	movlb	1	; select bank1
  9931  0E7D  0099               	movwf	25	;volatile
  9932                           
  9933                           ;mcc.c: 88: OSCTUNE = 0x00;
  9934  0E7E  0198               	clrf	24	;volatile
  9935                           
  9936                           ;mcc.c: 90: BORCON = 0x00;
  9937  0E7F  0022               	movlb	2	; select bank2
  9938  0E80  0196               	clrf	22	;volatile
  9939  0E81                     l95:	
  9940                           ;mcc.c: 93: {
  9941                           
  9942                           ;mcc.c: 92: while(PLLR == 0)
  9943                           
  9944  0E81  0021               	movlb	1	; select bank1
  9945  0E82  1B1A               	btfsc	26,6	;volatile
  9946  0E83  0008               	return
  9947  0E84  2E81               	goto	l95
  9948  0E85                     __end_of_OSCILLATOR_Initialize:	
  9949                           
  9950                           	psect	intentry
  9951  0004                     __pintentry:	
  9952 ;; *************** function _INTERRUPT_InterruptManager *****************
  9953 ;; Defined at:
  9954 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  9955 ;; Parameters:    Size  Location     Type
  9956 ;;		None
  9957 ;; Auto vars:     Size  Location     Type
  9958 ;;		None
  9959 ;; Return value:  Size  Location     Type
  9960 ;;                  1    wreg      void 
  9961 ;; Registers used:
  9962 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9963 ;; Tracked objects:
  9964 ;;		On entry : 0/0
  9965 ;;		On exit  : 0/0
  9966 ;;		Unchanged: 0/0
  9967 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9968 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9969 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9970 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9971 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9972 ;;Total ram usage:        1 bytes
  9973 ;; Hardware stack levels used:    1
  9974 ;; Hardware stack levels required when called:    5
  9975 ;; This function calls:
  9976 ;;		Absolute function
  9977 ;;		_PIN_MANAGER_IOC
  9978 ;;		_i2c_busCollisionISR
  9979 ;;		i1_i2c_ISR
  9980 ;; This function is called by:
  9981 ;;		Interrupt level 1
  9982 ;; This function uses a non-reentrant model
  9983 ;;
  9984                           
  9985  0004                     _INTERRUPT_InterruptManager:	
  9986                           
  9987                           ;incstack = 0
  9988 ;; hardware stack exceeded
  9989  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  9990                           
  9991                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9992  0005  3180               	pagesel	$
  9993  0006  0020               	movlb	0	; select bank0
  9994  0007  087F               	movf	127,w
  9995  0008  00A0               	movwf	??_INTERRUPT_InterruptManager
  9996                           
  9997                           ;interrupt_manager.c: 54: if(INTCONbits.IOCIE == 1 && INTCONbits.IOCIF == 1)
  9998  0009  198B               	btfsc	11,3	;volatile
  9999  000A  1C0B               	btfss	11,0	;volatile
 10000  000B  2810               	goto	i1l490
 10001                           
 10002                           ;interrupt_manager.c: 55: {
 10003                           ;interrupt_manager.c: 56: PIN_MANAGER_IOC();
 10004  000C  318D  25DC  3180   	fcall	_PIN_MANAGER_IOC
 10005                           
 10006                           ;interrupt_manager.c: 57: }
 10007  000F  2829               	goto	i1l498
 10008  0010                     i1l490:	
 10009                           
 10010                           ;interrupt_manager.c: 58: else if(INTCONbits.PEIE == 1)
 10011  0010  1F0B               	btfss	11,6	;volatile
 10012  0011  2829               	goto	i1l498
 10013                           
 10014                           ;interrupt_manager.c: 59: {
 10015                           ;interrupt_manager.c: 60: if(PIE2bits.BCL1IE == 1 && PIR2bits.BCL1IF == 1)
 10016  0012  0021               	movlb	1	; select bank1
 10017  0013  1D91               	btfss	17,3	;volatile
 10018  0014  281E               	goto	i1l493
 10019  0015  0020               	movlb	0	; select bank0
 10020  0016  1D91               	btfss	17,3	;volatile
 10021  0017  281E               	goto	i1l493
 10022                           
 10023                           ;interrupt_manager.c: 61: {
 10024                           ;interrupt_manager.c: 62: i2c_driver_busCollisionISR();
 10025  0018  0858               	movf	_i2c_driver_busCollisionISR+1,w
 10026  0019  008A               	movwf	10
 10027  001A  0857               	movf	_i2c_driver_busCollisionISR,w
 10028  001B  000A               	callw
 10029  001C  3180               	pagesel	$
 10030                           
 10031                           ;interrupt_manager.c: 63: }
 10032  001D  2829               	goto	i1l498
 10033  001E                     i1l493:	
 10034                           
 10035                           ;interrupt_manager.c: 64: else if(PIE1bits.SSP1IE == 1 && PIR1bits.SSP1IF == 1)
 10036  001E  0021               	movlb	1	; select bank1
 10037  001F  1D90               	btfss	16,3	;volatile
 10038  0020  2829               	goto	i1l498
 10039  0021  0020               	movlb	0	; select bank0
 10040  0022  1D90               	btfss	16,3	;volatile
 10041  0023  2829               	goto	i1l498
 10042                           
 10043                           ;interrupt_manager.c: 65: {
 10044                           ;interrupt_manager.c: 66: i2c_driver_i2cISR();
 10045  0024  0856               	movf	_i2c_driver_i2cISR+1,w
 10046  0025  008A               	movwf	10
 10047  0026  0855               	movf	_i2c_driver_i2cISR,w
 10048  0027  000A               	callw
 10049  0028  3180               	pagesel	$
 10050  0029                     i1l498:	
 10051                           ;interrupt_manager.c: 73: else
 10052                           ;interrupt_manager.c: 74: {
 10053                           
 10054                           ;interrupt_manager.c: 71: }
 10055                           ;interrupt_manager.c: 72: }
 10056                           
 10057                           ;interrupt_manager.c: 68: else
 10058                           ;interrupt_manager.c: 69: {
 10059                           
 10060                           ;interrupt_manager.c: 67: }
 10061                           
 10062  0029  0020               	movlb	0	; select bank0
 10063  002A  0820               	movf	??_INTERRUPT_InterruptManager,w
 10064  002B  00FF               	movwf	127
 10065  002C  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 10066  002D  0009               	retfie
 10067  002E                     __end_of_INTERRUPT_InterruptManager:	
 10068                           
 10069                           	psect	text72
 10070  0752                     __ptext72:	
 10071 ;; *************** function i1_i2c_ISR *****************
 10072 ;; Defined at:
 10073 ;;		line 419 in file "mcc_generated_files/drivers/i2c_master.c"
 10074 ;; Parameters:    Size  Location     Type
 10075 ;;		None
 10076 ;; Auto vars:     Size  Location     Type
 10077 ;;		None
 10078 ;; Return value:  Size  Location     Type
 10079 ;;                  1    wreg      void 
 10080 ;; Registers used:
 10081 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10082 ;; Tracked objects:
 10083 ;;		On entry : 0/0
 10084 ;;		On exit  : 0/0
 10085 ;;		Unchanged: 0/0
 10086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10087 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10088 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10089 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10090 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10091 ;;Total ram usage:        1 bytes
 10092 ;; Hardware stack levels used:    1
 10093 ;; Hardware stack levels required when called:    4
 10094 ;; This function calls:
 10095 ;;		i1_do_I2C_DO_ACK
 10096 ;;		i1_do_I2C_DO_ADDRESS_NACK
 10097 ;;		i1_do_I2C_DO_NACK_RESTART
 10098 ;;		i1_do_I2C_DO_NACK_STOP
 10099 ;;		i1_do_I2C_IDLE
 10100 ;;		i1_do_I2C_RCEN
 10101 ;;		i1_do_I2C_RESET
 10102 ;;		i1_do_I2C_RX
 10103 ;;		i1_do_I2C_SEND_ADR_READ
 10104 ;;		i1_do_I2C_SEND_ADR_WRITE
 10105 ;;		i1_do_I2C_SEND_RESTART
 10106 ;;		i1_do_I2C_SEND_RESTART_READ
 10107 ;;		i1_do_I2C_SEND_RESTART_WRITE
 10108 ;;		i1_do_I2C_SEND_STOP
 10109 ;;		i1_do_I2C_TX
 10110 ;;		i1_do_I2C_TX_EMPTY
 10111 ;;		i1_i2c_driver_isNACK
 10112 ;;		i1_mssp_clearIRQ
 10113 ;; This function is called by:
 10114 ;; This function uses a non-reentrant model
 10115 ;;
 10116                           
 10117                           
 10118                           ;psect for function i1_i2c_ISR
 10119  0752                     i1_i2c_ISR:	
 10120  0752                     i1l5686:	
 10121                           ;incstack = 0
 10122 ;; hardware stack exceeded
 10123                           ; Regs used in i1_i2c_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10124                           
 10125                           
 10126                           ;i2c_master.c: 421: mssp_clearIRQ();
 10127  0752  318D  2582  3187   	fcall	i1_mssp_clearIRQ
 10128                           
 10129                           ;i2c_master.c: 427: if(i2c_status.addressNACKCheck && i2c_driver_isNACK())
 10130  0755  0021               	movlb	1	; select bank1
 10131  0756  1DA0               	btfss	_i2c_status^(0+128),3
 10132  0757  2F62               	goto	i1l5694
 10133  0758  318E  26E7  3187   	fcall	i1_i2c_driver_isNACK
 10134  075B  1C03               	btfss	3,0
 10135  075C  2F62               	goto	i1l5694
 10136                           
 10137                           ;i2c_master.c: 428: {
 10138                           ;i2c_master.c: 429: i2c_status.state = I2C_ADDRESS_NACK;
 10139  075D  300F               	movlw	15
 10140  075E  00FD               	movwf	??i1_i2c_ISR
 10141  075F  087D               	movf	??i1_i2c_ISR,w
 10142  0760  0021               	movlb	1	; select bank1
 10143  0761  00A9               	movwf	(_i2c_status^(0+128)+9)
 10144  0762                     i1l5694:	
 10145                           
 10146                           ;i2c_master.c: 430: }
 10147                           ;i2c_master.c: 432: i2c_status.state = fsmStateTable[i2c_status.state]();
 10148  0762  0021               	movlb	1	; select bank1
 10149  0763  3529               	lslf	(_i2c_status^(0+128)+9),w
 10150  0764  3E20               	addlw	(low (_fsmStateTable| (0+256)))& (0+255)
 10151  0765  0086               	movwf	6
 10152  0766  3001               	movlw	1	; select bank2/3
 10153  0767  0087               	movwf	7
 10154  0768  3F41               	moviw [1]fsr1
 10155  0769  008A               	movwf	10
 10156  076A  3F40               	moviw [0]fsr1
 10157  076B  000A               	callw
 10158  076C  3187               	pagesel	$
 10159  076D  00FD               	movwf	??i1_i2c_ISR
 10160  076E  087D               	movf	??i1_i2c_ISR,w
 10161  076F  0021               	movlb	1	; select bank1
 10162  0770  00A9               	movwf	(_i2c_status^(0+128)+9)
 10163  0771  0008               	return
 10164  0772                     __end_ofi1_i2c_ISR:	
 10165                           
 10166                           	psect	text73
 10167  0D82                     __ptext73:	
 10168 ;; *************** function i1_mssp_clearIRQ *****************
 10169 ;; Defined at:
 10170 ;;		line 53 in file "mcc_generated_files/i2c_driver.c"
 10171 ;; Parameters:    Size  Location     Type
 10172 ;;		None
 10173 ;; Auto vars:     Size  Location     Type
 10174 ;;		None
 10175 ;; Return value:  Size  Location     Type
 10176 ;;                  1    wreg      void 
 10177 ;; Registers used:
 10178 ;;		None
 10179 ;; Tracked objects:
 10180 ;;		On entry : 0/0
 10181 ;;		On exit  : 0/0
 10182 ;;		Unchanged: 0/0
 10183 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10184 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10185 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10186 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10187 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10188 ;;Total ram usage:        0 bytes
 10189 ;; Hardware stack levels used:    1
 10190 ;; This function calls:
 10191 ;;		Nothing
 10192 ;; This function is called by:
 10193 ;;		i1_i2c_ISR
 10194 ;; This function uses a non-reentrant model
 10195 ;;
 10196                           
 10197                           
 10198                           ;psect for function i1_mssp_clearIRQ
 10199  0D82                     i1_mssp_clearIRQ:	
 10200                           
 10201                           ;i2c_driver.c: 55: PIR1bits.SSP1IF = 0;
 10202                           
 10203                           ;incstack = 0
 10204                           ; Regs used in i1_mssp_clearIRQ: []
 10205  0D82  0020               	movlb	0	; select bank0
 10206  0D83  1190               	bcf	16,3	;volatile
 10207  0D84  0008               	return
 10208  0D85                     __end_ofi1_mssp_clearIRQ:	
 10209                           
 10210                           	psect	text74
 10211  04C0                     __ptext74:	
 10212 ;; *************** function i1_do_I2C_RX *****************
 10213 ;; Defined at:
 10214 ;;		line 357 in file "mcc_generated_files/drivers/i2c_master.c"
 10215 ;; Parameters:    Size  Location     Type
 10216 ;;		None
 10217 ;; Auto vars:     Size  Location     Type
 10218 ;;		None
 10219 ;; Return value:  Size  Location     Type
 10220 ;;                  1    wreg      enum E12337
 10221 ;; Registers used:
 10222 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10223 ;; Tracked objects:
 10224 ;;		On entry : 0/0
 10225 ;;		On exit  : 0/0
 10226 ;;		Unchanged: 0/0
 10227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10228 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10229 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10230 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10231 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10232 ;;Total ram usage:        1 bytes
 10233 ;; Hardware stack levels used:    1
 10234 ;; Hardware stack levels required when called:    3
 10235 ;; This function calls:
 10236 ;;		Absolute function
 10237 ;;		i1_do_I2C_DO_NACK_RESTART
 10238 ;;		i1_do_I2C_DO_NACK_STOP
 10239 ;;		i1_i2c_driver_getRXData
 10240 ;;		i1_i2c_driver_sendACK
 10241 ;;		i1_i2c_restartWrite
 10242 ;;		i1_rd1RegCompleteHandler
 10243 ;;		i1_rd2RegCompleteHandler
 10244 ;;		i1_rdBlkRegCompleteHandler
 10245 ;;		i1_returnReset
 10246 ;;		i1_returnStop
 10247 ;;		i1_wr1RegCompleteHandler
 10248 ;;		i1_wr2RegCompleteHandler
 10249 ;; This function is called by:
 10250 ;; This function uses a non-reentrant model
 10251 ;;
 10252                           
 10253                           
 10254                           ;psect for function i1_do_I2C_RX
 10255  04C0                     i1_do_I2C_RX:	
 10256  04C0                     i1l5552:	
 10257                           ;incstack = 0
 10258 ;; hardware stack exceeded
 10259                           ; Regs used in i1_do_I2C_RX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10260                           
 10261                           
 10262                           ;i2c_master.c: 359: *i2c_status.data_ptr++ = i2c_driver_getRXData();
 10263  04C0  318D  257C  3184   	fcall	i1_i2c_driver_getRXData
 10264  04C3  00FA               	movwf	??i1_do_I2C_RX
 10265  04C4  0021               	movlb	1	; select bank1
 10266  04C5  0822               	movf	(low ((_i2c_status| 0+2)))^(0+128),w
 10267  04C6  0086               	movwf	6
 10268  04C7  0187               	clrf	7
 10269  04C8  087A               	movf	??i1_do_I2C_RX,w
 10270  04C9  0081               	movwf	1
 10271  04CA  3001               	movlw	1
 10272  04CB  00FA               	movwf	??i1_do_I2C_RX
 10273  04CC  087A               	movf	??i1_do_I2C_RX,w
 10274  04CD  07A2               	addwf	(low ((_i2c_status| 0+2)))^(0+128),f
 10275                           
 10276                           ;i2c_master.c: 360: if(--i2c_status.data_length)
 10277  04CE  3001               	movlw	1
 10278  04CF  02A3               	subwf	(_i2c_status^(0+128)+3),f
 10279  04D0  3000               	movlw	0
 10280  04D1  3BA4               	subwfb	((_i2c_status+1)^(0+128)+3),f
 10281  04D2  0823               	movf	(_i2c_status^(0+128)+3),w
 10282  04D3  0424               	iorwf	((_i2c_status+1)^(0+128)+3),w
 10283  04D4  1903               	btfsc	3,2
 10284  04D5  2CDA               	goto	i1l671
 10285                           
 10286                           ;i2c_master.c: 361: {
 10287                           ;i2c_master.c: 362: i2c_driver_sendACK();
 10288  04D6  318D  259D         	fcall	i1_i2c_driver_sendACK
 10289                           
 10290                           ;i2c_master.c: 363: return I2C_RCEN;
 10291  04D8  3005               	movlw	5
 10292                           
 10293                           ;i2c_master.c: 364: }
 10294  04D9  0008               	return
 10295  04DA                     i1l671:	
 10296                           
 10297                           ;i2c_master.c: 365: else
 10298                           ;i2c_master.c: 366: {
 10299                           ;i2c_master.c: 367: i2c_status.bufferFree = 1;
 10300  04DA  1520               	bsf	_i2c_status^(0+128),2
 10301                           
 10302                           ;i2c_master.c: 368: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
 10303  04DB  2CE2               	goto	i1l5576
 10304  04DC                     i1l5566:	
 10305                           ;i2c_master.c: 369: {
 10306                           ;i2c_master.c: 370: case i2c_restart_write:
 10307                           
 10308                           
 10309                           ;i2c_master.c: 371: case i2c_restart_read:
 10310                           ;i2c_master.c: 372: return do_I2C_DO_NACK_RESTART();
 10311  04DC  318D  25BD         	fcall	i1_do_I2C_DO_NACK_RESTART
 10312  04DE  0008               	return
 10313  04DF                     i1l5570:	
 10314                           ;i2c_master.c: 374: case i2c_continue:
 10315                           
 10316                           ;i2c_master.c: 373: default:
 10317                           
 10318                           
 10319                           ;i2c_master.c: 375: case i2c_stop:
 10320                           ;i2c_master.c: 376: return do_I2C_DO_NACK_STOP();
 10321  04DF  318D  25B9         	fcall	i1_do_I2C_DO_NACK_STOP
 10322                           
 10323                           ;i2c_master.c: 377: }
 10324  04E1  0008               	return
 10325  04E2                     i1l5576:	
 10326  04E2  0021               	movlb	1	; select bank1
 10327  04E3  0837               	movf	(low ((_i2c_status| 0+23)))^(0+128),w
 10328  04E4  00FA               	movwf	??i1_do_I2C_RX
 10329  04E5  087A               	movf	??i1_do_I2C_RX,w
 10330  04E6  00F9               	movwf	i1returnStop@p
 10331  04E7  300B               	movlw	11
 10332  04E8  3EA0               	addlw	(low (_i2c_status| 0))& (0+255)
 10333  04E9  0086               	movwf	6
 10334  04EA  0187               	clrf	7
 10335  04EB  3F41               	moviw [1]fsr1
 10336  04EC  008A               	movwf	10
 10337  04ED  3F40               	moviw [0]fsr1
 10338  04EE  000A               	callw
 10339  04EF  3184               	pagesel	$
 10340                           
 10341                           ; Switch size 1, requested type "space"
 10342                           ; Number of cases is 4, Range of values is 1 to 4
 10343                           ; switch strategies available:
 10344                           ; Name         Instructions Cycles
 10345                           ; simple_byte           13     7 (average)
 10346                           ; direct_byte           17     9 (fixed)
 10347                           ; jumptable            263     9 (fixed)
 10348                           ;	Chosen strategy is simple_byte
 10349  04F0  3A01               	xorlw	1	; case 1
 10350  04F1  1903               	skipnz
 10351  04F2  2CDF               	goto	i1l5570
 10352  04F3  3A03               	xorlw	3	; case 2
 10353  04F4  1903               	skipnz
 10354  04F5  2CDC               	goto	i1l5566
 10355  04F6  3A01               	xorlw	1	; case 3
 10356  04F7  1903               	skipnz
 10357  04F8  2CDC               	goto	i1l5566
 10358  04F9  3A07               	xorlw	7	; case 4
 10359  04FA  1903               	skipnz
 10360  04FB  2CDF               	goto	i1l5570
 10361  04FC  2CDF               	goto	i1l5570
 10362  04FD  0008               	return
 10363  04FE                     __end_ofi1_do_I2C_RX:	
 10364                           
 10365                           	psect	text75
 10366  03EA                     __ptext75:	
 10367 ;; *************** function i1_do_I2C_TX *****************
 10368 ;; Defined at:
 10369 ;;		line 333 in file "mcc_generated_files/drivers/i2c_master.c"
 10370 ;; Parameters:    Size  Location     Type
 10371 ;;		None
 10372 ;; Auto vars:     Size  Location     Type
 10373 ;;		None
 10374 ;; Return value:  Size  Location     Type
 10375 ;;                  1    wreg      enum E12337
 10376 ;; Registers used:
 10377 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10378 ;; Tracked objects:
 10379 ;;		On entry : 0/0
 10380 ;;		On exit  : 0/0
 10381 ;;		Unchanged: 0/0
 10382 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10383 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10384 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10385 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10386 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10387 ;;Total ram usage:        3 bytes
 10388 ;; Hardware stack levels used:    1
 10389 ;; Hardware stack levels required when called:    3
 10390 ;; This function calls:
 10391 ;;		Absolute function
 10392 ;;		i1_do_I2C_SEND_RESTART_READ
 10393 ;;		i1_do_I2C_SEND_RESTART_WRITE
 10394 ;;		i1_do_I2C_SEND_STOP
 10395 ;;		i1_i2c_driver_TXData
 10396 ;;		i1_i2c_driver_isNACK
 10397 ;;		i1_i2c_restartWrite
 10398 ;;		i1_rd1RegCompleteHandler
 10399 ;;		i1_rd2RegCompleteHandler
 10400 ;;		i1_rdBlkRegCompleteHandler
 10401 ;;		i1_returnReset
 10402 ;;		i1_returnStop
 10403 ;;		i1_wr1RegCompleteHandler
 10404 ;;		i1_wr2RegCompleteHandler
 10405 ;; This function is called by:
 10406 ;; This function uses a non-reentrant model
 10407 ;;
 10408                           
 10409                           
 10410                           ;psect for function i1_do_I2C_TX
 10411  03EA                     i1_do_I2C_TX:	
 10412  03EA                     i1l5522:	
 10413                           ;incstack = 0
 10414 ;; hardware stack exceeded
 10415                           ; Regs used in i1_do_I2C_TX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10416                           
 10417                           
 10418                           ;i2c_master.c: 335: if(i2c_driver_isNACK())
 10419  03EA  318E  26E7  3183   	fcall	i1_i2c_driver_isNACK
 10420  03ED  1803               	btfsc	3,0
 10421  03EE  2BF9               	goto	i1l5540
 10422  03EF  2C15               	goto	i1l655
 10423  03F0                     i1l5526:	
 10424                           ;i2c_master.c: 338: {
 10425                           ;i2c_master.c: 339: case i2c_restart_read:
 10426                           
 10427                           ;i2c_master.c: 336: {
 10428                           ;i2c_master.c: 337: switch(i2c_status.callbackTable[i2c_dataNACK](i2c_status.callbackPay
      +                          load[i2c_dataNACK]))
 10429                           
 10430                           
 10431                           ;i2c_master.c: 340: return do_I2C_SEND_RESTART_READ();
 10432  03F0  318D  25A5         	fcall	i1_do_I2C_SEND_RESTART_READ
 10433  03F2  0008               	return
 10434  03F3                     i1l5530:	
 10435                           ;i2c_master.c: 341: case i2c_restart_write:
 10436                           
 10437                           
 10438                           ;i2c_master.c: 342: return do_I2C_SEND_RESTART_WRITE();
 10439  03F3  318D  25A9         	fcall	i1_do_I2C_SEND_RESTART_WRITE
 10440  03F5  0008               	return
 10441  03F6                     i1l5534:	
 10442                           ;i2c_master.c: 344: case i2c_continue:
 10443                           
 10444                           ;i2c_master.c: 343: default:
 10445                           
 10446                           
 10447                           ;i2c_master.c: 345: case i2c_stop:
 10448                           ;i2c_master.c: 346: return do_I2C_SEND_STOP();
 10449  03F6  318D  25B1         	fcall	i1_do_I2C_SEND_STOP
 10450                           
 10451                           ;i2c_master.c: 347: }
 10452  03F8  0008               	return
 10453  03F9                     i1l5540:	
 10454  03F9  0021               	movlb	1	; select bank1
 10455  03FA  083A               	movf	(low ((_i2c_status| 0+26)))^(0+128),w
 10456  03FB  00FA               	movwf	??i1_do_I2C_TX
 10457  03FC  087A               	movf	??i1_do_I2C_TX,w
 10458  03FD  00F9               	movwf	i1returnStop@p
 10459  03FE  3011               	movlw	17
 10460  03FF  3EA0               	addlw	(low (_i2c_status| 0))& (0+255)
 10461  0400  0086               	movwf	6
 10462  0401  0187               	clrf	7
 10463  0402  3F41               	moviw [1]fsr1
 10464  0403  008A               	movwf	10
 10465  0404  3F40               	moviw [0]fsr1
 10466  0405  000A               	callw
 10467  0406  3183               	pagesel	$
 10468                           
 10469                           ; Switch size 1, requested type "space"
 10470                           ; Number of cases is 4, Range of values is 1 to 4
 10471                           ; switch strategies available:
 10472                           ; Name         Instructions Cycles
 10473                           ; simple_byte           13     7 (average)
 10474                           ; direct_byte           17     9 (fixed)
 10475                           ; jumptable            263     9 (fixed)
 10476                           ;	Chosen strategy is simple_byte
 10477  0407  3A01               	xorlw	1	; case 1
 10478  0408  1903               	skipnz
 10479  0409  2BF6               	goto	i1l5534
 10480  040A  3A03               	xorlw	3	; case 2
 10481  040B  1903               	skipnz
 10482  040C  2BF0               	goto	i1l5526
 10483  040D  3A01               	xorlw	1	; case 3
 10484  040E  1903               	skipnz
 10485  040F  2BF3               	goto	i1l5530
 10486  0410  3A07               	xorlw	7	; case 4
 10487  0411  1903               	skipnz
 10488  0412  2BF6               	goto	i1l5534
 10489  0413  2BF6               	goto	i1l5534
 10490                           
 10491                           ;i2c_master.c: 348: }
 10492  0414  0008               	return
 10493  0415                     i1l655:	
 10494                           
 10495                           ;i2c_master.c: 349: else
 10496                           ;i2c_master.c: 350: {
 10497                           ;i2c_master.c: 351: i2c_status.addressNACKCheck = 0;
 10498  0415  0021               	movlb	1	; select bank1
 10499  0416  11A0               	bcf	_i2c_status^(0+128),3
 10500                           
 10501                           ;i2c_master.c: 352: i2c_driver_TXData(*i2c_status.data_ptr++);
 10502  0417  3002               	movlw	2
 10503  0418  3EA0               	addlw	(low (_i2c_status| 0))& (0+255)
 10504  0419  0086               	movwf	6
 10505  041A  0187               	clrf	7
 10506  041B  3F40               	moviw [0]fsr1
 10507  041C  0084               	movwf	4
 10508  041D  0185               	clrf	5
 10509  041E  0A81               	incf	1,f
 10510  041F  0800               	movf	0,w
 10511  0420  318D  25CD  3183   	fcall	i1_i2c_driver_TXData
 10512                           
 10513                           ;i2c_master.c: 353: return (--i2c_status.data_length)?I2C_TX:I2C_TX_EMPTY;
 10514  0423  3001               	movlw	1
 10515  0424  0021               	movlb	1	; select bank1
 10516  0425  02A3               	subwf	(_i2c_status^(0+128)+3),f
 10517  0426  3000               	movlw	0
 10518  0427  3BA4               	subwfb	((_i2c_status+1)^(0+128)+3),f
 10519  0428  0823               	movf	(_i2c_status^(0+128)+3),w
 10520  0429  0424               	iorwf	((_i2c_status+1)^(0+128)+3),w
 10521  042A  1D03               	btfss	3,2
 10522  042B  2C2E               	goto	i1l5548
 10523  042C  3006               	movlw	6
 10524  042D  2C2F               	goto	L4
 10525  042E                     i1l5548:	
 10526  042E  3003               	movlw	3
 10527  042F                     L4:	
 10528  042F  00FB               	movwf	i1_do_I2C_TX$1026
 10529  0430  3000               	movlw	0
 10530  0431  00FC               	movwf	i1_do_I2C_TX$1026+1
 10531  0432  087B               	movf	i1_do_I2C_TX$1026,w
 10532  0433  0008               	return
 10533  0434                     __end_ofi1_do_I2C_TX:	
 10534                           
 10535                           	psect	text76
 10536  070F                     __ptext76:	
 10537 ;; *************** function i1_do_I2C_DO_ADDRESS_NACK *****************
 10538 ;; Defined at:
 10539 ;;		line 319 in file "mcc_generated_files/drivers/i2c_master.c"
 10540 ;; Parameters:    Size  Location     Type
 10541 ;;		None
 10542 ;; Auto vars:     Size  Location     Type
 10543 ;;		None
 10544 ;; Return value:  Size  Location     Type
 10545 ;;                  1    wreg      enum E12337
 10546 ;; Registers used:
 10547 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10548 ;; Tracked objects:
 10549 ;;		On entry : 0/0
 10550 ;;		On exit  : 0/0
 10551 ;;		Unchanged: 0/0
 10552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10553 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10554 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10555 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10556 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10557 ;;Total ram usage:        1 bytes
 10558 ;; Hardware stack levels used:    1
 10559 ;; Hardware stack levels required when called:    3
 10560 ;; This function calls:
 10561 ;;		Absolute function
 10562 ;;		i1_do_I2C_SEND_RESTART
 10563 ;;		i1_do_I2C_SEND_STOP
 10564 ;;		i1_i2c_restartWrite
 10565 ;;		i1_rd1RegCompleteHandler
 10566 ;;		i1_rd2RegCompleteHandler
 10567 ;;		i1_rdBlkRegCompleteHandler
 10568 ;;		i1_returnReset
 10569 ;;		i1_returnStop
 10570 ;;		i1_wr1RegCompleteHandler
 10571 ;;		i1_wr2RegCompleteHandler
 10572 ;; This function is called by:
 10573 ;; This function uses a non-reentrant model
 10574 ;;
 10575                           
 10576                           
 10577                           ;psect for function i1_do_I2C_DO_ADDRESS_NACK
 10578  070F                     i1_do_I2C_DO_ADDRESS_NACK:	
 10579  070F                     i1l5506:	
 10580                           ;incstack = 0
 10581 ;; hardware stack exceeded
 10582                           ; Regs used in i1_do_I2C_DO_ADDRESS_NACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10583                           
 10584                           
 10585                           ;i2c_master.c: 321: i2c_status.addressNACKCheck = 0;
 10586  070F  0021               	movlb	1	; select bank1
 10587  0710  11A0               	bcf	_i2c_status^(0+128),3
 10588                           
 10589                           ;i2c_master.c: 322: i2c_status.error = I2C_FAIL;
 10590  0711  3002               	movlw	2
 10591  0712  00FA               	movwf	??i1_do_I2C_DO_ADDRESS_NACK
 10592  0713  087A               	movf	??i1_do_I2C_DO_ADDRESS_NACK,w
 10593  0714  00AA               	movwf	(_i2c_status^(0+128)+10)
 10594                           
 10595                           ;i2c_master.c: 323: switch(i2c_status.callbackTable[i2c_addressNACK](i2c_status.callback
      +                          Payload[i2c_addressNACK]))
 10596  0715  2F1C               	goto	i1l5520
 10597  0716                     i1l5510:	
 10598                           ;i2c_master.c: 324: {
 10599                           ;i2c_master.c: 325: case i2c_restart_read:
 10600                           
 10601                           
 10602                           ;i2c_master.c: 326: case i2c_restart_write:
 10603                           ;i2c_master.c: 327: return do_I2C_SEND_RESTART();
 10604  0716  318D  25AD         	fcall	i1_do_I2C_SEND_RESTART
 10605  0718  0008               	return
 10606  0719                     i1l5514:	
 10607                           ;i2c_master.c: 328: default:
 10608                           
 10609                           
 10610                           ;i2c_master.c: 329: return do_I2C_SEND_STOP();
 10611  0719  318D  25B1         	fcall	i1_do_I2C_SEND_STOP
 10612                           
 10613                           ;i2c_master.c: 330: }
 10614  071B  0008               	return
 10615  071C                     i1l5520:	
 10616  071C  0021               	movlb	1	; select bank1
 10617  071D  0839               	movf	(low ((_i2c_status| 0+25)))^(0+128),w
 10618  071E  00FA               	movwf	??i1_do_I2C_DO_ADDRESS_NACK
 10619  071F  087A               	movf	??i1_do_I2C_DO_ADDRESS_NACK,w
 10620  0720  00F9               	movwf	i1returnStop@p
 10621  0721  300F               	movlw	15
 10622  0722  3EA0               	addlw	(low (_i2c_status| 0))& (0+255)
 10623  0723  0086               	movwf	6
 10624  0724  0187               	clrf	7
 10625  0725  3F41               	moviw [1]fsr1
 10626  0726  008A               	movwf	10
 10627  0727  3F40               	moviw [0]fsr1
 10628  0728  000A               	callw
 10629  0729  3187               	pagesel	$
 10630                           
 10631                           ; Switch size 1, requested type "space"
 10632                           ; Number of cases is 2, Range of values is 2 to 3
 10633                           ; switch strategies available:
 10634                           ; Name         Instructions Cycles
 10635                           ; simple_byte            7     4 (average)
 10636                           ; direct_byte           13     9 (fixed)
 10637                           ; jumptable            263     9 (fixed)
 10638                           ;	Chosen strategy is simple_byte
 10639  072A  3A02               	xorlw	2	; case 2
 10640  072B  1903               	skipnz
 10641  072C  2F16               	goto	i1l5510
 10642  072D  3A01               	xorlw	1	; case 3
 10643  072E  1903               	skipnz
 10644  072F  2F16               	goto	i1l5510
 10645  0730  2F19               	goto	i1l5514
 10646  0731  0008               	return
 10647  0732                     __end_ofi1_do_I2C_DO_ADDRESS_NACK:	
 10648                           
 10649                           	psect	text77
 10650  0DBD                     __ptext77:	
 10651 ;; *************** function i1_do_I2C_DO_NACK_RESTART *****************
 10652 ;; Defined at:
 10653 ;;		line 311 in file "mcc_generated_files/drivers/i2c_master.c"
 10654 ;; Parameters:    Size  Location     Type
 10655 ;;		None
 10656 ;; Auto vars:     Size  Location     Type
 10657 ;;		None
 10658 ;; Return value:  Size  Location     Type
 10659 ;;                  1    wreg      enum E12337
 10660 ;; Registers used:
 10661 ;;		wreg, status,2, status,0, pclath, cstack
 10662 ;; Tracked objects:
 10663 ;;		On entry : 0/0
 10664 ;;		On exit  : 0/0
 10665 ;;		Unchanged: 0/0
 10666 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10667 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10668 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10669 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10670 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10671 ;;Total ram usage:        0 bytes
 10672 ;; Hardware stack levels used:    1
 10673 ;; Hardware stack levels required when called:    1
 10674 ;; This function calls:
 10675 ;;		i1_i2c_driver_sendNACK
 10676 ;; This function is called by:
 10677 ;;		i1_do_I2C_RX
 10678 ;; This function uses a non-reentrant model
 10679 ;;
 10680                           
 10681                           
 10682                           ;psect for function i1_do_I2C_DO_NACK_RESTART
 10683  0DBD                     i1_do_I2C_DO_NACK_RESTART:	
 10684  0DBD                     i1l3042:	
 10685                           ;incstack = 0
 10686                           ; Regs used in i1_do_I2C_DO_NACK_RESTART: [wreg+status,2+status,0+pclath+cstack]
 10687                           
 10688                           
 10689                           ;i2c_master.c: 313: i2c_driver_sendNACK();
 10690  0DBD  318D  25A1         	fcall	i1_i2c_driver_sendNACK
 10691                           
 10692                           ;i2c_master.c: 314: return I2C_SEND_RESTART;
 10693  0DBF  3009               	movlw	9
 10694  0DC0  0008               	return
 10695  0DC1                     __end_ofi1_do_I2C_DO_NACK_RESTART:	
 10696                           
 10697                           	psect	text78
 10698  0DB9                     __ptext78:	
 10699 ;; *************** function i1_do_I2C_DO_NACK_STOP *****************
 10700 ;; Defined at:
 10701 ;;		line 305 in file "mcc_generated_files/drivers/i2c_master.c"
 10702 ;; Parameters:    Size  Location     Type
 10703 ;;		None
 10704 ;; Auto vars:     Size  Location     Type
 10705 ;;		None
 10706 ;; Return value:  Size  Location     Type
 10707 ;;                  1    wreg      enum E12337
 10708 ;; Registers used:
 10709 ;;		wreg, status,2, status,0, pclath, cstack
 10710 ;; Tracked objects:
 10711 ;;		On entry : 0/0
 10712 ;;		On exit  : 0/0
 10713 ;;		Unchanged: 0/0
 10714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10715 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10716 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10717 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10718 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10719 ;;Total ram usage:        0 bytes
 10720 ;; Hardware stack levels used:    1
 10721 ;; Hardware stack levels required when called:    1
 10722 ;; This function calls:
 10723 ;;		i1_i2c_driver_sendNACK
 10724 ;; This function is called by:
 10725 ;;		i1_do_I2C_RX
 10726 ;; This function uses a non-reentrant model
 10727 ;;
 10728                           
 10729                           
 10730                           ;psect for function i1_do_I2C_DO_NACK_STOP
 10731  0DB9                     i1_do_I2C_DO_NACK_STOP:	
 10732  0DB9                     i1l3036:	
 10733                           ;incstack = 0
 10734                           ; Regs used in i1_do_I2C_DO_NACK_STOP: [wreg+status,2+status,0+pclath+cstack]
 10735                           
 10736                           
 10737                           ;i2c_master.c: 307: i2c_driver_sendNACK();
 10738  0DB9  318D  25A1         	fcall	i1_i2c_driver_sendNACK
 10739                           
 10740                           ;i2c_master.c: 308: return I2C_SEND_STOP;
 10741  0DBB  300A               	movlw	10
 10742  0DBC  0008               	return
 10743  0DBD                     __end_ofi1_do_I2C_DO_NACK_STOP:	
 10744                           
 10745                           	psect	text79
 10746  0DB5                     __ptext79:	
 10747 ;; *************** function i1_do_I2C_DO_ACK *****************
 10748 ;; Defined at:
 10749 ;;		line 299 in file "mcc_generated_files/drivers/i2c_master.c"
 10750 ;; Parameters:    Size  Location     Type
 10751 ;;		None
 10752 ;; Auto vars:     Size  Location     Type
 10753 ;;		None
 10754 ;; Return value:  Size  Location     Type
 10755 ;;                  1    wreg      enum E12337
 10756 ;; Registers used:
 10757 ;;		wreg, status,2, status,0, pclath, cstack
 10758 ;; Tracked objects:
 10759 ;;		On entry : 0/0
 10760 ;;		On exit  : 0/0
 10761 ;;		Unchanged: 0/0
 10762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10764 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10765 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10766 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10767 ;;Total ram usage:        0 bytes
 10768 ;; Hardware stack levels used:    1
 10769 ;; Hardware stack levels required when called:    1
 10770 ;; This function calls:
 10771 ;;		i1_i2c_driver_sendACK
 10772 ;; This function is called by:
 10773 ;; This function uses a non-reentrant model
 10774 ;;
 10775                           
 10776                           
 10777                           ;psect for function i1_do_I2C_DO_ACK
 10778  0DB5                     i1_do_I2C_DO_ACK:	
 10779  0DB5                     i1l3186:	
 10780                           ;incstack = 0
 10781                           ; Regs used in i1_do_I2C_DO_ACK: [wreg+status,2+status,0+pclath+cstack]
 10782                           
 10783                           
 10784                           ;i2c_master.c: 301: i2c_driver_sendACK();
 10785  0DB5  318D  259D         	fcall	i1_i2c_driver_sendACK
 10786                           
 10787                           ;i2c_master.c: 302: return I2C_RCEN;
 10788  0DB7  3005               	movlw	5
 10789  0DB8  0008               	return
 10790  0DB9                     __end_ofi1_do_I2C_DO_ACK:	
 10791                           
 10792                           	psect	text80
 10793  0DE2                     __ptext80:	
 10794 ;; *************** function i1_do_I2C_RCEN *****************
 10795 ;; Defined at:
 10796 ;;		line 292 in file "mcc_generated_files/drivers/i2c_master.c"
 10797 ;; Parameters:    Size  Location     Type
 10798 ;;		None
 10799 ;; Auto vars:     Size  Location     Type
 10800 ;;		None
 10801 ;; Return value:  Size  Location     Type
 10802 ;;                  1    wreg      enum E12337
 10803 ;; Registers used:
 10804 ;;		wreg, status,2, status,0, pclath, cstack
 10805 ;; Tracked objects:
 10806 ;;		On entry : 0/0
 10807 ;;		On exit  : 0/0
 10808 ;;		Unchanged: 0/0
 10809 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10810 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10811 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10812 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10813 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10814 ;;Total ram usage:        0 bytes
 10815 ;; Hardware stack levels used:    1
 10816 ;; Hardware stack levels required when called:    1
 10817 ;; This function calls:
 10818 ;;		i1_i2c_driver_startRX
 10819 ;; This function is called by:
 10820 ;; This function uses a non-reentrant model
 10821 ;;
 10822                           
 10823                           
 10824                           ;psect for function i1_do_I2C_RCEN
 10825  0DE2                     i1_do_I2C_RCEN:	
 10826  0DE2                     i1l3178:	
 10827                           ;incstack = 0
 10828                           ; Regs used in i1_do_I2C_RCEN: [wreg+status,2+status,0+pclath+cstack]
 10829                           
 10830                           
 10831                           ;i2c_master.c: 294: i2c_status.addressNACKCheck = 0;
 10832  0DE2  0021               	movlb	1	; select bank1
 10833  0DE3  11A0               	bcf	_i2c_status^(0+128),3
 10834                           
 10835                           ;i2c_master.c: 295: i2c_driver_startRX();
 10836  0DE4  318D  2579         	fcall	i1_i2c_driver_startRX
 10837                           
 10838                           ;i2c_master.c: 296: return I2C_RX;
 10839  0DE6  3004               	movlw	4
 10840  0DE7  0008               	return
 10841  0DE8                     __end_ofi1_do_I2C_RCEN:	
 10842                           
 10843                           	psect	text81
 10844  0E2B                     __ptext81:	
 10845 ;; *************** function i1_do_I2C_SEND_ADR_WRITE *****************
 10846 ;; Defined at:
 10847 ;;		line 285 in file "mcc_generated_files/drivers/i2c_master.c"
 10848 ;; Parameters:    Size  Location     Type
 10849 ;;		None
 10850 ;; Auto vars:     Size  Location     Type
 10851 ;;		None
 10852 ;; Return value:  Size  Location     Type
 10853 ;;                  1    wreg      enum E12337
 10854 ;; Registers used:
 10855 ;;		wreg, status,2, status,0, pclath, cstack
 10856 ;; Tracked objects:
 10857 ;;		On entry : 0/0
 10858 ;;		On exit  : 0/0
 10859 ;;		Unchanged: 0/0
 10860 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10861 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10862 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10863 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10864 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10865 ;;Total ram usage:        0 bytes
 10866 ;; Hardware stack levels used:    1
 10867 ;; Hardware stack levels required when called:    1
 10868 ;; This function calls:
 10869 ;;		i1_i2c_driver_TXData
 10870 ;; This function is called by:
 10871 ;; This function uses a non-reentrant model
 10872 ;;
 10873                           
 10874                           
 10875                           ;psect for function i1_do_I2C_SEND_ADR_WRITE
 10876  0E2B                     i1_do_I2C_SEND_ADR_WRITE:	
 10877  0E2B                     i1l3170:	
 10878                           ;incstack = 0
 10879                           ; Regs used in i1_do_I2C_SEND_ADR_WRITE: [wreg+status,2+status,0+pclath+cstack]
 10880                           
 10881                           
 10882                           ;i2c_master.c: 287: i2c_status.addressNACKCheck = 1;
 10883  0E2B  0021               	movlb	1	; select bank1
 10884  0E2C  15A0               	bsf	_i2c_status^(0+128),3
 10885                           
 10886                           ;i2c_master.c: 288: i2c_driver_TXData(i2c_status.address << 1);
 10887  0E2D  3521               	lslf	(_i2c_status^(0+128)+1),w
 10888  0E2E  318D  25CD         	fcall	i1_i2c_driver_TXData
 10889                           
 10890                           ;i2c_master.c: 289: return I2C_TX;
 10891  0E30  3003               	movlw	3
 10892  0E31  0008               	return
 10893  0E32                     __end_ofi1_do_I2C_SEND_ADR_WRITE:	
 10894                           
 10895                           	psect	text82
 10896  0E32                     __ptext82:	
 10897 ;; *************** function i1_do_I2C_SEND_ADR_READ *****************
 10898 ;; Defined at:
 10899 ;;		line 278 in file "mcc_generated_files/drivers/i2c_master.c"
 10900 ;; Parameters:    Size  Location     Type
 10901 ;;		None
 10902 ;; Auto vars:     Size  Location     Type
 10903 ;;		None
 10904 ;; Return value:  Size  Location     Type
 10905 ;;                  1    wreg      enum E12337
 10906 ;; Registers used:
 10907 ;;		wreg, status,2, status,0, pclath, cstack
 10908 ;; Tracked objects:
 10909 ;;		On entry : 0/0
 10910 ;;		On exit  : 0/0
 10911 ;;		Unchanged: 0/0
 10912 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10913 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10914 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10915 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10916 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10917 ;;Total ram usage:        0 bytes
 10918 ;; Hardware stack levels used:    1
 10919 ;; Hardware stack levels required when called:    1
 10920 ;; This function calls:
 10921 ;;		i1_i2c_driver_TXData
 10922 ;; This function is called by:
 10923 ;; This function uses a non-reentrant model
 10924 ;;
 10925                           
 10926                           
 10927                           ;psect for function i1_do_I2C_SEND_ADR_READ
 10928  0E32                     i1_do_I2C_SEND_ADR_READ:	
 10929  0E32                     i1l3162:	
 10930                           ;incstack = 0
 10931                           ; Regs used in i1_do_I2C_SEND_ADR_READ: [wreg+status,2+status,0+pclath+cstack]
 10932                           
 10933                           
 10934                           ;i2c_master.c: 280: i2c_status.addressNACKCheck = 1;
 10935  0E32  0021               	movlb	1	; select bank1
 10936  0E33  15A0               	bsf	_i2c_status^(0+128),3
 10937                           
 10938                           ;i2c_master.c: 281: i2c_driver_TXData(i2c_status.address << 1 | 1);
 10939  0E34  1403               	setc
 10940  0E35  0D21               	rlf	(_i2c_status^(0+128)+1),w
 10941  0E36  318D  25CD         	fcall	i1_i2c_driver_TXData
 10942                           
 10943                           ;i2c_master.c: 282: return I2C_RCEN;
 10944  0E38  3005               	movlw	5
 10945  0E39  0008               	return
 10946  0E3A                     __end_ofi1_do_I2C_SEND_ADR_READ:	
 10947                           
 10948                           	psect	text83
 10949  0DB1                     __ptext83:	
 10950 ;; *************** function i1_do_I2C_SEND_STOP *****************
 10951 ;; Defined at:
 10952 ;;		line 272 in file "mcc_generated_files/drivers/i2c_master.c"
 10953 ;; Parameters:    Size  Location     Type
 10954 ;;		None
 10955 ;; Auto vars:     Size  Location     Type
 10956 ;;		None
 10957 ;; Return value:  Size  Location     Type
 10958 ;;                  1    wreg      enum E12337
 10959 ;; Registers used:
 10960 ;;		wreg, status,2, status,0, pclath, cstack
 10961 ;; Tracked objects:
 10962 ;;		On entry : 0/0
 10963 ;;		On exit  : 0/0
 10964 ;;		Unchanged: 0/0
 10965 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10966 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10967 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10968 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10969 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10970 ;;Total ram usage:        0 bytes
 10971 ;; Hardware stack levels used:    1
 10972 ;; Hardware stack levels required when called:    1
 10973 ;; This function calls:
 10974 ;;		i1_i2c_driver_stop
 10975 ;; This function is called by:
 10976 ;;		i1_do_I2C_DO_ADDRESS_NACK
 10977 ;;		i1_do_I2C_TX
 10978 ;;		i1_do_I2C_TX_EMPTY
 10979 ;; This function uses a non-reentrant model
 10980 ;;
 10981                           
 10982                           
 10983                           ;psect for function i1_do_I2C_SEND_STOP
 10984  0DB1                     i1_do_I2C_SEND_STOP:	
 10985  0DB1                     i1l3030:	
 10986                           ;incstack = 0
 10987                           ; Regs used in i1_do_I2C_SEND_STOP: [wreg+status,2+status,0+pclath+cstack]
 10988                           
 10989                           
 10990                           ;i2c_master.c: 274: i2c_driver_stop();
 10991  0DB1  318D  2576         	fcall	i1_i2c_driver_stop
 10992                           
 10993                           ;i2c_master.c: 275: return I2C_IDLE;
 10994  0DB3  3000               	movlw	0
 10995  0DB4  0008               	return
 10996  0DB5                     __end_ofi1_do_I2C_SEND_STOP:	
 10997                           
 10998                           	psect	text84
 10999  0DAD                     __ptext84:	
 11000 ;; *************** function i1_do_I2C_SEND_RESTART *****************
 11001 ;; Defined at:
 11002 ;;		line 266 in file "mcc_generated_files/drivers/i2c_master.c"
 11003 ;; Parameters:    Size  Location     Type
 11004 ;;		None
 11005 ;; Auto vars:     Size  Location     Type
 11006 ;;		None
 11007 ;; Return value:  Size  Location     Type
 11008 ;;                  1    wreg      enum E12337
 11009 ;; Registers used:
 11010 ;;		wreg, status,2, status,0, pclath, cstack
 11011 ;; Tracked objects:
 11012 ;;		On entry : 0/0
 11013 ;;		On exit  : 0/0
 11014 ;;		Unchanged: 0/0
 11015 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11016 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11017 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11018 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11019 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11020 ;;Total ram usage:        0 bytes
 11021 ;; Hardware stack levels used:    1
 11022 ;; Hardware stack levels required when called:    1
 11023 ;; This function calls:
 11024 ;;		i1_i2c_driver_restart
 11025 ;; This function is called by:
 11026 ;;		i1_do_I2C_DO_ADDRESS_NACK
 11027 ;;		i1_do_I2C_TX_EMPTY
 11028 ;; This function uses a non-reentrant model
 11029 ;;
 11030                           
 11031                           
 11032                           ;psect for function i1_do_I2C_SEND_RESTART
 11033  0DAD                     i1_do_I2C_SEND_RESTART:	
 11034  0DAD                     i1l3024:	
 11035                           ;incstack = 0
 11036                           ; Regs used in i1_do_I2C_SEND_RESTART: [wreg+status,2+status,0+pclath+cstack]
 11037                           
 11038                           
 11039                           ;i2c_master.c: 268: i2c_driver_restart();
 11040  0DAD  318D  2573         	fcall	i1_i2c_driver_restart
 11041                           
 11042                           ;i2c_master.c: 269: return I2C_SEND_ADR_READ;
 11043  0DAF  3001               	movlw	1
 11044  0DB0  0008               	return
 11045  0DB1                     __end_ofi1_do_I2C_SEND_RESTART:	
 11046                           
 11047                           	psect	text85
 11048  0DA9                     __ptext85:	
 11049 ;; *************** function i1_do_I2C_SEND_RESTART_WRITE *****************
 11050 ;; Defined at:
 11051 ;;		line 260 in file "mcc_generated_files/drivers/i2c_master.c"
 11052 ;; Parameters:    Size  Location     Type
 11053 ;;		None
 11054 ;; Auto vars:     Size  Location     Type
 11055 ;;		None
 11056 ;; Return value:  Size  Location     Type
 11057 ;;                  1    wreg      enum E12337
 11058 ;; Registers used:
 11059 ;;		wreg, status,2, status,0, pclath, cstack
 11060 ;; Tracked objects:
 11061 ;;		On entry : 0/0
 11062 ;;		On exit  : 0/0
 11063 ;;		Unchanged: 0/0
 11064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11065 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11066 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11068 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11069 ;;Total ram usage:        0 bytes
 11070 ;; Hardware stack levels used:    1
 11071 ;; Hardware stack levels required when called:    1
 11072 ;; This function calls:
 11073 ;;		i1_i2c_driver_restart
 11074 ;; This function is called by:
 11075 ;;		i1_do_I2C_TX
 11076 ;; This function uses a non-reentrant model
 11077 ;;
 11078                           
 11079                           
 11080                           ;psect for function i1_do_I2C_SEND_RESTART_WRITE
 11081  0DA9                     i1_do_I2C_SEND_RESTART_WRITE:	
 11082  0DA9                     i1l3018:	
 11083                           ;incstack = 0
 11084                           ; Regs used in i1_do_I2C_SEND_RESTART_WRITE: [wreg+status,2+status,0+pclath+cstack]
 11085                           
 11086                           
 11087                           ;i2c_master.c: 262: i2c_driver_restart();
 11088  0DA9  318D  2573         	fcall	i1_i2c_driver_restart
 11089                           
 11090                           ;i2c_master.c: 263: return I2C_SEND_ADR_WRITE;
 11091  0DAB  3002               	movlw	2
 11092  0DAC  0008               	return
 11093  0DAD                     __end_ofi1_do_I2C_SEND_RESTART_WRITE:	
 11094                           
 11095                           	psect	text86
 11096  0DA5                     __ptext86:	
 11097 ;; *************** function i1_do_I2C_SEND_RESTART_READ *****************
 11098 ;; Defined at:
 11099 ;;		line 254 in file "mcc_generated_files/drivers/i2c_master.c"
 11100 ;; Parameters:    Size  Location     Type
 11101 ;;		None
 11102 ;; Auto vars:     Size  Location     Type
 11103 ;;		None
 11104 ;; Return value:  Size  Location     Type
 11105 ;;                  1    wreg      enum E12337
 11106 ;; Registers used:
 11107 ;;		wreg, status,2, status,0, pclath, cstack
 11108 ;; Tracked objects:
 11109 ;;		On entry : 0/0
 11110 ;;		On exit  : 0/0
 11111 ;;		Unchanged: 0/0
 11112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11113 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11114 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11115 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11116 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11117 ;;Total ram usage:        0 bytes
 11118 ;; Hardware stack levels used:    1
 11119 ;; Hardware stack levels required when called:    1
 11120 ;; This function calls:
 11121 ;;		i1_i2c_driver_restart
 11122 ;; This function is called by:
 11123 ;;		i1_do_I2C_TX
 11124 ;; This function uses a non-reentrant model
 11125 ;;
 11126                           
 11127                           
 11128                           ;psect for function i1_do_I2C_SEND_RESTART_READ
 11129  0DA5                     i1_do_I2C_SEND_RESTART_READ:	
 11130  0DA5                     i1l3012:	
 11131                           ;incstack = 0
 11132                           ; Regs used in i1_do_I2C_SEND_RESTART_READ: [wreg+status,2+status,0+pclath+cstack]
 11133                           
 11134                           
 11135                           ;i2c_master.c: 256: i2c_driver_restart();
 11136  0DA5  318D  2573         	fcall	i1_i2c_driver_restart
 11137                           
 11138                           ;i2c_master.c: 257: return I2C_SEND_ADR_READ;
 11139  0DA7  3001               	movlw	1
 11140  0DA8  0008               	return
 11141  0DA9                     __end_ofi1_do_I2C_SEND_RESTART_READ:	
 11142                           
 11143                           	psect	text87
 11144  0DD2                     __ptext87:	
 11145 ;; *************** function i1_do_I2C_IDLE *****************
 11146 ;; Defined at:
 11147 ;;		line 247 in file "mcc_generated_files/drivers/i2c_master.c"
 11148 ;; Parameters:    Size  Location     Type
 11149 ;;		None
 11150 ;; Auto vars:     Size  Location     Type
 11151 ;;		None
 11152 ;; Return value:  Size  Location     Type
 11153 ;;                  1    wreg      enum E12337
 11154 ;; Registers used:
 11155 ;;		wreg, status,2
 11156 ;; Tracked objects:
 11157 ;;		On entry : 0/0
 11158 ;;		On exit  : 0/0
 11159 ;;		Unchanged: 0/0
 11160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11161 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11162 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11163 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11164 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11165 ;;Total ram usage:        0 bytes
 11166 ;; Hardware stack levels used:    1
 11167 ;; This function calls:
 11168 ;;		Nothing
 11169 ;; This function is called by:
 11170 ;; This function uses a non-reentrant model
 11171 ;;
 11172                           
 11173                           
 11174                           ;psect for function i1_do_I2C_IDLE
 11175  0DD2                     i1_do_I2C_IDLE:	
 11176  0DD2                     i1l3154:	
 11177                           ;incstack = 0
 11178                           ; Regs used in i1_do_I2C_IDLE: [wreg+status,2]
 11179                           
 11180                           
 11181                           ;i2c_master.c: 249: i2c_status.busy = 0;
 11182  0DD2  0021               	movlb	1	; select bank1
 11183  0DD3  1020               	bcf	_i2c_status^(0+128),0
 11184                           
 11185                           ;i2c_master.c: 250: i2c_status.error = I2C_NOERR;
 11186  0DD4  01AA               	clrf	(_i2c_status^(0+128)+10)
 11187                           
 11188                           ;i2c_master.c: 251: return I2C_RESET;
 11189  0DD5  300E               	movlw	14
 11190  0DD6  0008               	return
 11191  0DD7                     __end_ofi1_do_I2C_IDLE:	
 11192                           
 11193                           	psect	text88
 11194  0E24                     __ptext88:	
 11195 ;; *************** function i1_do_I2C_RESET *****************
 11196 ;; Defined at:
 11197 ;;		line 239 in file "mcc_generated_files/drivers/i2c_master.c"
 11198 ;; Parameters:    Size  Location     Type
 11199 ;;		None
 11200 ;; Auto vars:     Size  Location     Type
 11201 ;;		None
 11202 ;; Return value:  Size  Location     Type
 11203 ;;                  1    wreg      enum E12337
 11204 ;; Registers used:
 11205 ;;		wreg, status,2, status,0, pclath, cstack
 11206 ;; Tracked objects:
 11207 ;;		On entry : 0/0
 11208 ;;		On exit  : 0/0
 11209 ;;		Unchanged: 0/0
 11210 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11211 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11212 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11213 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11214 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11215 ;;Total ram usage:        0 bytes
 11216 ;; Hardware stack levels used:    1
 11217 ;; Hardware stack levels required when called:    1
 11218 ;; This function calls:
 11219 ;;		i1_i2c_driver_resetBus
 11220 ;; This function is called by:
 11221 ;; This function uses a non-reentrant model
 11222 ;;
 11223                           
 11224                           
 11225                           ;psect for function i1_do_I2C_RESET
 11226  0E24                     i1_do_I2C_RESET:	
 11227  0E24                     i1l3144:	
 11228                           ;incstack = 0
 11229                           ; Regs used in i1_do_I2C_RESET: [wreg+status,2+status,0+pclath+cstack]
 11230                           
 11231                           
 11232                           ;i2c_master.c: 241: i2c_driver_resetBus();
 11233  0E24  318D  2568         	fcall	i1_i2c_driver_resetBus
 11234                           
 11235                           ;i2c_master.c: 242: i2c_status.busy = 0;
 11236  0E26  0021               	movlb	1	; select bank1
 11237  0E27  1020               	bcf	_i2c_status^(0+128),0
 11238                           
 11239                           ;i2c_master.c: 243: i2c_status.error = I2C_NOERR;
 11240  0E28  01AA               	clrf	(_i2c_status^(0+128)+10)
 11241                           
 11242                           ;i2c_master.c: 244: return I2C_RESET;
 11243  0E29  300E               	movlw	14
 11244  0E2A  0008               	return
 11245  0E2B                     __end_ofi1_do_I2C_RESET:	
 11246                           
 11247                           	psect	text89
 11248  062D                     __ptext89:	
 11249 ;; *************** function i1_do_I2C_TX_EMPTY *****************
 11250 ;; Defined at:
 11251 ;;		line 382 in file "mcc_generated_files/drivers/i2c_master.c"
 11252 ;; Parameters:    Size  Location     Type
 11253 ;;		None
 11254 ;; Auto vars:     Size  Location     Type
 11255 ;;		None
 11256 ;; Return value:  Size  Location     Type
 11257 ;;                  1    wreg      enum E12337
 11258 ;; Registers used:
 11259 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11260 ;; Tracked objects:
 11261 ;;		On entry : 0/0
 11262 ;;		On exit  : 0/0
 11263 ;;		Unchanged: 0/0
 11264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11265 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11266 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11267 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11268 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11269 ;;Total ram usage:        1 bytes
 11270 ;; Hardware stack levels used:    1
 11271 ;; Hardware stack levels required when called:    3
 11272 ;; This function calls:
 11273 ;;		Absolute function
 11274 ;;		i1_do_I2C_SEND_RESTART
 11275 ;;		i1_do_I2C_SEND_STOP
 11276 ;;		i1_i2c_restartWrite
 11277 ;;		i1_mssp_setIRQ
 11278 ;;		i1_rd1RegCompleteHandler
 11279 ;;		i1_rd2RegCompleteHandler
 11280 ;;		i1_rdBlkRegCompleteHandler
 11281 ;;		i1_returnReset
 11282 ;;		i1_returnStop
 11283 ;;		i1_wr1RegCompleteHandler
 11284 ;;		i1_wr2RegCompleteHandler
 11285 ;; This function is called by:
 11286 ;; This function uses a non-reentrant model
 11287 ;;
 11288                           
 11289                           
 11290                           ;psect for function i1_do_I2C_TX_EMPTY
 11291  062D                     i1_do_I2C_TX_EMPTY:	
 11292  062D                     i1l5578:	
 11293                           ;incstack = 0
 11294 ;; hardware stack exceeded
 11295                           ; Regs used in i1_do_I2C_TX_EMPTY: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11296                           
 11297                           
 11298                           ;i2c_master.c: 384: i2c_status.bufferFree = 1;
 11299  062D  0021               	movlb	1	; select bank1
 11300  062E  1520               	bsf	_i2c_status^(0+128),2
 11301                           
 11302                           ;i2c_master.c: 385: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
 11303  062F  2E3A               	goto	i1l5596
 11304  0630                     i1l5580:	
 11305                           ;i2c_master.c: 386: {
 11306                           ;i2c_master.c: 387: case i2c_restart_read:
 11307                           
 11308                           
 11309                           ;i2c_master.c: 388: case i2c_restart_write:
 11310                           ;i2c_master.c: 389: return do_I2C_SEND_RESTART();
 11311  0630  318D  25AD         	fcall	i1_do_I2C_SEND_RESTART
 11312  0632  0008               	return
 11313  0633                     i1l5584:	
 11314                           ;i2c_master.c: 390: case i2c_continue:
 11315                           
 11316                           
 11317                           ;i2c_master.c: 391: mssp_setIRQ();
 11318  0633  318D  257F         	fcall	i1_mssp_setIRQ
 11319                           
 11320                           ;i2c_master.c: 392: return I2C_TX;
 11321  0635  3003               	movlw	3
 11322  0636  0008               	return
 11323  0637                     i1l5590:	
 11324                           ;i2c_master.c: 394: case i2c_stop:
 11325                           
 11326                           ;i2c_master.c: 393: default:
 11327                           
 11328                           
 11329                           ;i2c_master.c: 395: return do_I2C_SEND_STOP();
 11330  0637  318D  25B1         	fcall	i1_do_I2C_SEND_STOP
 11331                           
 11332                           ;i2c_master.c: 396: }
 11333  0639  0008               	return
 11334  063A                     i1l5596:	
 11335  063A  0021               	movlb	1	; select bank1
 11336  063B  0837               	movf	(low ((_i2c_status| 0+23)))^(0+128),w
 11337  063C  00FA               	movwf	??i1_do_I2C_TX_EMPTY
 11338  063D  087A               	movf	??i1_do_I2C_TX_EMPTY,w
 11339  063E  00F9               	movwf	i1returnStop@p
 11340  063F  300B               	movlw	11
 11341  0640  3EA0               	addlw	(low (_i2c_status| 0))& (0+255)
 11342  0641  0086               	movwf	6
 11343  0642  0187               	clrf	7
 11344  0643  3F41               	moviw [1]fsr1
 11345  0644  008A               	movwf	10
 11346  0645  3F40               	moviw [0]fsr1
 11347  0646  000A               	callw
 11348  0647  3186               	pagesel	$
 11349                           
 11350                           ; Switch size 1, requested type "space"
 11351                           ; Number of cases is 4, Range of values is 1 to 4
 11352                           ; switch strategies available:
 11353                           ; Name         Instructions Cycles
 11354                           ; simple_byte           13     7 (average)
 11355                           ; direct_byte           17     9 (fixed)
 11356                           ; jumptable            263     9 (fixed)
 11357                           ;	Chosen strategy is simple_byte
 11358  0648  3A01               	xorlw	1	; case 1
 11359  0649  1903               	skipnz
 11360  064A  2E37               	goto	i1l5590
 11361  064B  3A03               	xorlw	3	; case 2
 11362  064C  1903               	skipnz
 11363  064D  2E30               	goto	i1l5580
 11364  064E  3A01               	xorlw	1	; case 3
 11365  064F  1903               	skipnz
 11366  0650  2E30               	goto	i1l5580
 11367  0651  3A07               	xorlw	7	; case 4
 11368  0652  1903               	skipnz
 11369  0653  2E33               	goto	i1l5584
 11370  0654  2E37               	goto	i1l5590
 11371  0655  0008               	return
 11372  0656                     __end_ofi1_do_I2C_TX_EMPTY:	
 11373                           
 11374                           	psect	text90
 11375  0D7F                     __ptext90:	
 11376 ;; *************** function i1_mssp_setIRQ *****************
 11377 ;; Defined at:
 11378 ;;		line 58 in file "mcc_generated_files/i2c_driver.c"
 11379 ;; Parameters:    Size  Location     Type
 11380 ;;		None
 11381 ;; Auto vars:     Size  Location     Type
 11382 ;;		None
 11383 ;; Return value:  Size  Location     Type
 11384 ;;                  1    wreg      void 
 11385 ;; Registers used:
 11386 ;;		None
 11387 ;; Tracked objects:
 11388 ;;		On entry : 0/0
 11389 ;;		On exit  : 0/0
 11390 ;;		Unchanged: 0/0
 11391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11393 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11395 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11396 ;;Total ram usage:        0 bytes
 11397 ;; Hardware stack levels used:    1
 11398 ;; This function calls:
 11399 ;;		Nothing
 11400 ;; This function is called by:
 11401 ;;		i1_do_I2C_TX_EMPTY
 11402 ;; This function uses a non-reentrant model
 11403 ;;
 11404                           
 11405                           
 11406                           ;psect for function i1_mssp_setIRQ
 11407  0D7F                     i1_mssp_setIRQ:	
 11408                           
 11409                           ;i2c_driver.c: 60: PIR1bits.SSP1IF = 1;
 11410                           
 11411                           ;incstack = 0
 11412                           ; Regs used in i1_mssp_setIRQ: []
 11413  0D7F  0020               	movlb	0	; select bank0
 11414  0D80  1590               	bsf	16,3	;volatile
 11415  0D81  0008               	return
 11416  0D82                     __end_ofi1_mssp_setIRQ:	
 11417                           
 11418                           	psect	text91
 11419  0EE7                     __ptext91:	
 11420 ;; *************** function i1_i2c_driver_isNACK *****************
 11421 ;; Defined at:
 11422 ;;		line 161 in file "mcc_generated_files/i2c_driver.c"
 11423 ;; Parameters:    Size  Location     Type
 11424 ;;		None
 11425 ;; Auto vars:     Size  Location     Type
 11426 ;;		None
 11427 ;; Return value:  Size  Location     Type
 11428 ;;		None               void
 11429 ;; Registers used:
 11430 ;;		wreg, status,2, status,0
 11431 ;; Tracked objects:
 11432 ;;		On entry : 0/0
 11433 ;;		On exit  : 0/0
 11434 ;;		Unchanged: 0/0
 11435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11436 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11437 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11438 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11439 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11440 ;;Total ram usage:        1 bytes
 11441 ;; Hardware stack levels used:    1
 11442 ;; This function calls:
 11443 ;;		Nothing
 11444 ;; This function is called by:
 11445 ;;		i1_do_I2C_TX
 11446 ;;		i1_i2c_ISR
 11447 ;; This function uses a non-reentrant model
 11448 ;;
 11449                           
 11450                           
 11451                           ;psect for function i1_i2c_driver_isNACK
 11452  0EE7                     i1_i2c_driver_isNACK:	
 11453                           
 11454                           ;i2c_driver.c: 163: return SSP1CON2bits.ACKSTAT = 1;
 11455                           
 11456                           ;incstack = 0
 11457                           ; Regs used in i1_i2c_driver_isNACK: [wreg+status,2+status,0]
 11458  0EE7  0024               	movlb	4	; select bank4
 11459  0EE8  0816               	movf	22,w	;volatile
 11460  0EE9  39BF               	andlw	-65
 11461  0EEA  3840               	iorlw	64
 11462  0EEB  0096               	movwf	22	;volatile
 11463  0EEC  0E16               	swapf	22,w	;volatile
 11464  0EED  0C89               	rrf	9,f
 11465  0EEE  0C89               	rrf	9,f
 11466  0EEF  3901               	andlw	1
 11467  0EF0  00F0               	movwf	??i1_i2c_driver_isNACK
 11468  0EF1  0C70               	rrf	??i1_i2c_driver_isNACK,w
 11469  0EF2  0008               	return
 11470  0EF3                     __end_ofi1_i2c_driver_isNACK:	
 11471                           
 11472                           	psect	text92
 11473  0DCD                     __ptext92:	
 11474 ;; *************** function i1_i2c_driver_TXData *****************
 11475 ;; Defined at:
 11476 ;;		line 186 in file "mcc_generated_files/i2c_driver.c"
 11477 ;; Parameters:    Size  Location     Type
 11478 ;;  d               1    wreg     unsigned char 
 11479 ;; Auto vars:     Size  Location     Type
 11480 ;;  d               1    0[COMMON] unsigned char 
 11481 ;; Return value:  Size  Location     Type
 11482 ;;                  1    wreg      void 
 11483 ;; Registers used:
 11484 ;;		wreg
 11485 ;; Tracked objects:
 11486 ;;		On entry : 0/0
 11487 ;;		On exit  : 0/0
 11488 ;;		Unchanged: 0/0
 11489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11490 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11491 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11492 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11493 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11494 ;;Total ram usage:        1 bytes
 11495 ;; Hardware stack levels used:    1
 11496 ;; This function calls:
 11497 ;;		Nothing
 11498 ;; This function is called by:
 11499 ;;		i1_do_I2C_SEND_ADR_READ
 11500 ;;		i1_do_I2C_SEND_ADR_WRITE
 11501 ;;		i1_do_I2C_TX
 11502 ;; This function uses a non-reentrant model
 11503 ;;
 11504                           
 11505                           
 11506                           ;psect for function i1_i2c_driver_TXData
 11507  0DCD                     i1_i2c_driver_TXData:	
 11508                           
 11509                           ;incstack = 0
 11510                           ; Regs used in i1_i2c_driver_TXData: [wreg]
 11511                           ;i1i2c_driver_TXData@d stored from wreg
 11512  0DCD  00F0               	movwf	i1i2c_driver_TXData@d
 11513                           
 11514                           ;i2c_driver.c: 188: SSP1BUF = d;
 11515  0DCE  0870               	movf	i1i2c_driver_TXData@d,w
 11516  0DCF  0024               	movlb	4	; select bank4
 11517  0DD0  0091               	movwf	17	;volatile
 11518  0DD1  0008               	return
 11519  0DD2                     __end_ofi1_i2c_driver_TXData:	
 11520                           
 11521                           	psect	text93
 11522  0D7C                     __ptext93:	
 11523 ;; *************** function i1_i2c_driver_getRXData *****************
 11524 ;; Defined at:
 11525 ;;		line 171 in file "mcc_generated_files/i2c_driver.c"
 11526 ;; Parameters:    Size  Location     Type
 11527 ;;		None
 11528 ;; Auto vars:     Size  Location     Type
 11529 ;;		None
 11530 ;; Return value:  Size  Location     Type
 11531 ;;                  1    wreg      unsigned char 
 11532 ;; Registers used:
 11533 ;;		wreg
 11534 ;; Tracked objects:
 11535 ;;		On entry : 0/0
 11536 ;;		On exit  : 0/0
 11537 ;;		Unchanged: 0/0
 11538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11539 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11540 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11541 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11542 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11543 ;;Total ram usage:        0 bytes
 11544 ;; Hardware stack levels used:    1
 11545 ;; This function calls:
 11546 ;;		Nothing
 11547 ;; This function is called by:
 11548 ;;		i1_do_I2C_RX
 11549 ;; This function uses a non-reentrant model
 11550 ;;
 11551                           
 11552                           
 11553                           ;psect for function i1_i2c_driver_getRXData
 11554  0D7C                     i1_i2c_driver_getRXData:	
 11555                           
 11556                           ;i2c_driver.c: 173: return SSP1BUF;
 11557                           
 11558                           ;incstack = 0
 11559                           ; Regs used in i1_i2c_driver_getRXData: [wreg]
 11560  0D7C  0024               	movlb	4	; select bank4
 11561  0D7D  0811               	movf	17,w	;volatile
 11562  0D7E  0008               	return
 11563  0D7F                     __end_ofi1_i2c_driver_getRXData:	
 11564                           
 11565                           	psect	text94
 11566  0DA1                     __ptext94:	
 11567 ;; *************** function i1_i2c_driver_sendNACK *****************
 11568 ;; Defined at:
 11569 ;;		line 202 in file "mcc_generated_files/i2c_driver.c"
 11570 ;; Parameters:    Size  Location     Type
 11571 ;;		None
 11572 ;; Auto vars:     Size  Location     Type
 11573 ;;		None
 11574 ;; Return value:  Size  Location     Type
 11575 ;;                  1    wreg      void 
 11576 ;; Registers used:
 11577 ;;		None
 11578 ;; Tracked objects:
 11579 ;;		On entry : 0/0
 11580 ;;		On exit  : 0/0
 11581 ;;		Unchanged: 0/0
 11582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11583 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11584 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11585 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11586 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11587 ;;Total ram usage:        0 bytes
 11588 ;; Hardware stack levels used:    1
 11589 ;; This function calls:
 11590 ;;		Nothing
 11591 ;; This function is called by:
 11592 ;;		i1_do_I2C_DO_NACK_STOP
 11593 ;;		i1_do_I2C_DO_NACK_RESTART
 11594 ;; This function uses a non-reentrant model
 11595 ;;
 11596                           
 11597                           
 11598                           ;psect for function i1_i2c_driver_sendNACK
 11599  0DA1                     i1_i2c_driver_sendNACK:	
 11600                           
 11601                           ;i2c_driver.c: 204: SSP1CON2bits.ACKDT = 1;
 11602                           
 11603                           ;incstack = 0
 11604                           ; Regs used in i1_i2c_driver_sendNACK: []
 11605  0DA1  0024               	movlb	4	; select bank4
 11606  0DA2  1696               	bsf	22,5	;volatile
 11607                           
 11608                           ;i2c_driver.c: 205: SSP1CON2bits.ACKEN = 1;
 11609  0DA3  1616               	bsf	22,4	;volatile
 11610  0DA4  0008               	return
 11611  0DA5                     __end_ofi1_i2c_driver_sendNACK:	
 11612                           
 11613                           	psect	text95
 11614  0D68                     __ptext95:	
 11615 ;; *************** function i1_i2c_driver_resetBus *****************
 11616 ;; Defined at:
 11617 ;;		line 141 in file "mcc_generated_files/i2c_driver.c"
 11618 ;; Parameters:    Size  Location     Type
 11619 ;;		None
 11620 ;; Auto vars:     Size  Location     Type
 11621 ;;		None
 11622 ;; Return value:  Size  Location     Type
 11623 ;;                  1    wreg      void 
 11624 ;; Registers used:
 11625 ;;		None
 11626 ;; Tracked objects:
 11627 ;;		On entry : 0/0
 11628 ;;		On exit  : 0/0
 11629 ;;		Unchanged: 0/0
 11630 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11631 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11632 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11633 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11634 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11635 ;;Total ram usage:        0 bytes
 11636 ;; Hardware stack levels used:    1
 11637 ;; This function calls:
 11638 ;;		Nothing
 11639 ;; This function is called by:
 11640 ;;		i1_do_I2C_RESET
 11641 ;; This function uses a non-reentrant model
 11642 ;;
 11643                           
 11644                           
 11645                           ;psect for function i1_i2c_driver_resetBus
 11646  0D68                     i1_i2c_driver_resetBus:	
 11647                           
 11648                           ;incstack = 0
 11649                           ; Regs used in i1_i2c_driver_resetBus: []
 11650  0D68  0008               	return
 11651  0D69                     __end_ofi1_i2c_driver_resetBus:	
 11652                           
 11653                           	psect	text96
 11654  0D79                     __ptext96:	
 11655 ;; *************** function i1_i2c_driver_startRX *****************
 11656 ;; Defined at:
 11657 ;;		line 166 in file "mcc_generated_files/i2c_driver.c"
 11658 ;; Parameters:    Size  Location     Type
 11659 ;;		None
 11660 ;; Auto vars:     Size  Location     Type
 11661 ;;		None
 11662 ;; Return value:  Size  Location     Type
 11663 ;;                  1    wreg      void 
 11664 ;; Registers used:
 11665 ;;		None
 11666 ;; Tracked objects:
 11667 ;;		On entry : 0/0
 11668 ;;		On exit  : 0/0
 11669 ;;		Unchanged: 0/0
 11670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11671 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11672 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11673 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11674 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11675 ;;Total ram usage:        0 bytes
 11676 ;; Hardware stack levels used:    1
 11677 ;; This function calls:
 11678 ;;		Nothing
 11679 ;; This function is called by:
 11680 ;;		i1_do_I2C_RCEN
 11681 ;; This function uses a non-reentrant model
 11682 ;;
 11683                           
 11684                           
 11685                           ;psect for function i1_i2c_driver_startRX
 11686  0D79                     i1_i2c_driver_startRX:	
 11687                           
 11688                           ;i2c_driver.c: 168: SSP1CON2bits.RCEN = 1;
 11689                           
 11690                           ;incstack = 0
 11691                           ; Regs used in i1_i2c_driver_startRX: []
 11692  0D79  0024               	movlb	4	; select bank4
 11693  0D7A  1596               	bsf	22,3	;volatile
 11694  0D7B  0008               	return
 11695  0D7C                     __end_ofi1_i2c_driver_startRX:	
 11696                           
 11697                           	psect	text97
 11698  0002                     __ptext97:	
 11699 ;; *************** function i1_i2c_restartWrite *****************
 11700 ;; Defined at:
 11701 ;;		line 35 in file "mcc_generated_files/drivers/i2c_types.c"
 11702 ;; Parameters:    Size  Location     Type
 11703 ;;  p               1    9[COMMON] PTR void 
 11704 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 11705 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 11706 ;; Auto vars:     Size  Location     Type
 11707 ;;		None
 11708 ;; Return value:  Size  Location     Type
 11709 ;;                  1    wreg      enum E97
 11710 ;; Registers used:
 11711 ;;		wreg
 11712 ;; Tracked objects:
 11713 ;;		On entry : 0/0
 11714 ;;		On exit  : 0/0
 11715 ;;		Unchanged: 0/0
 11716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11717 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11718 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11719 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11720 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11721 ;;Total ram usage:        1 bytes
 11722 ;; Hardware stack levels used:    1
 11723 ;; This function calls:
 11724 ;;		Nothing
 11725 ;; This function is called by:
 11726 ;; This function uses a non-reentrant model
 11727 ;;
 11728                           
 11729                           
 11730                           ;psect for function i1_i2c_restartWrite
 11731  0002                     i1_i2c_restartWrite:	
 11732  0002                     i1l3056:	
 11733                           ;incstack = 0
 11734                           ; Regs used in i1_i2c_restartWrite: [wreg]
 11735                           
 11736                           
 11737                           ;i2c_types.c: 37: return i2c_restart_write;
 11738  0002  3003               	movlw	3
 11739  0003  0008               	return
 11740  0004                     __end_ofi1_i2c_restartWrite:	
 11741                           
 11742                           	psect	text98
 11743  0D6B                     __ptext98:	
 11744 ;; *************** function i1_returnReset *****************
 11745 ;; Defined at:
 11746 ;;		line 448 in file "mcc_generated_files/drivers/i2c_master.c"
 11747 ;; Parameters:    Size  Location     Type
 11748 ;;  p               1    9[COMMON] PTR void 
 11749 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 11750 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 11751 ;; Auto vars:     Size  Location     Type
 11752 ;;		None
 11753 ;; Return value:  Size  Location     Type
 11754 ;;                  1    wreg      enum E12171
 11755 ;; Registers used:
 11756 ;;		wreg
 11757 ;; Tracked objects:
 11758 ;;		On entry : 0/0
 11759 ;;		On exit  : 0/0
 11760 ;;		Unchanged: 0/0
 11761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11762 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11763 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11764 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11765 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11766 ;;Total ram usage:        1 bytes
 11767 ;; Hardware stack levels used:    1
 11768 ;; This function calls:
 11769 ;;		Nothing
 11770 ;; This function is called by:
 11771 ;; This function uses a non-reentrant model
 11772 ;;
 11773                           
 11774                           
 11775                           ;psect for function i1_returnReset
 11776  0D6B                     i1_returnReset:	
 11777  0D6B                     i1l3052:	
 11778                           ;incstack = 0
 11779                           ; Regs used in i1_returnReset: [wreg]
 11780                           
 11781                           
 11782                           ;i2c_master.c: 450: return i2c_reset_link;
 11783  0D6B  3005               	movlw	5
 11784  0D6C  0008               	return
 11785  0D6D                     __end_ofi1_returnReset:	
 11786                           
 11787                           	psect	text99
 11788  0D69                     __ptext99:	
 11789 ;; *************** function i1_returnStop *****************
 11790 ;; Defined at:
 11791 ;;		line 443 in file "mcc_generated_files/drivers/i2c_master.c"
 11792 ;; Parameters:    Size  Location     Type
 11793 ;;  p               1    9[COMMON] PTR void 
 11794 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 11795 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 11796 ;; Auto vars:     Size  Location     Type
 11797 ;;		None
 11798 ;; Return value:  Size  Location     Type
 11799 ;;                  1    wreg      enum E12171
 11800 ;; Registers used:
 11801 ;;		wreg
 11802 ;; Tracked objects:
 11803 ;;		On entry : 0/0
 11804 ;;		On exit  : 0/0
 11805 ;;		Unchanged: 0/0
 11806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11807 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11808 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11809 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11810 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11811 ;;Total ram usage:        1 bytes
 11812 ;; Hardware stack levels used:    1
 11813 ;; This function calls:
 11814 ;;		Nothing
 11815 ;; This function is called by:
 11816 ;;		i1_setCallBack
 11817 ;;		_do_I2C_DO_ADDRESS_NACK
 11818 ;;		_do_I2C_TX
 11819 ;;		_do_I2C_RX
 11820 ;;		_do_I2C_TX_EMPTY
 11821 ;;		i1_do_I2C_DO_ADDRESS_NACK
 11822 ;;		i1_do_I2C_TX
 11823 ;;		i1_do_I2C_RX
 11824 ;;		i1_do_I2C_TX_EMPTY
 11825 ;; This function uses a non-reentrant model
 11826 ;;
 11827                           
 11828                           
 11829                           ;psect for function i1_returnStop
 11830  0D69                     i1_returnStop:	
 11831  0D69                     i1l3048:	
 11832                           ;incstack = 0
 11833                           ; Regs used in i1_returnStop: [wreg]
 11834                           
 11835                           
 11836                           ;i2c_master.c: 445: return i2c_stop;
 11837  0D69  3001               	movlw	1
 11838  0D6A  0008               	return
 11839  0D6B                     __end_ofi1_returnStop:	
 11840                           
 11841                           	psect	text100
 11842  07E8                     __ptext100:	
 11843 ;; *************** function i1_rdBlkRegCompleteHandler *****************
 11844 ;; Defined at:
 11845 ;;		line 134 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 11846 ;; Parameters:    Size  Location     Type
 11847 ;;  p               1    9[COMMON] PTR void 
 11848 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 11849 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 11850 ;; Auto vars:     Size  Location     Type
 11851 ;;		None
 11852 ;; Return value:  Size  Location     Type
 11853 ;;                  1    wreg      enum E97
 11854 ;; Registers used:
 11855 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11856 ;; Tracked objects:
 11857 ;;		On entry : 0/0
 11858 ;;		On exit  : 0/0
 11859 ;;		Unchanged: 0/0
 11860 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11861 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11862 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11863 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11864 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11865 ;;Total ram usage:        1 bytes
 11866 ;; Hardware stack levels used:    1
 11867 ;; Hardware stack levels required when called:    2
 11868 ;; This function calls:
 11869 ;;		i1_i2c_setBuffer
 11870 ;;		i1_i2c_setDataCompleteCallback
 11871 ;; This function is called by:
 11872 ;; This function uses a non-reentrant model
 11873 ;;
 11874                           
 11875                           
 11876                           ;psect for function i1_rdBlkRegCompleteHandler
 11877  07E8                     i1_rdBlkRegCompleteHandler:	
 11878  07E8                     i1l3006:	
 11879                           ;incstack = 0
 11880 ;; hardware stack exceeded
 11881                           ; Regs used in i1_rdBlkRegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 11882                           
 11883                           
 11884                           ;i2c_simple_master.c: 136: i2c_setBuffer(((buf_t *)p)->data,((buf_t*)p)->len);
 11885  07E8  0879               	movf	i1rdBlkRegCompleteHandler@p,w
 11886  07E9  0086               	movwf	6
 11887  07EA  0187               	clrf	7
 11888  07EB  3F40               	moviw [0]fsr1
 11889  07EC  00F0               	movwf	i1i2c_setBuffer@bufferSize
 11890  07ED  3F41               	moviw [1]fsr1
 11891  07EE  00F1               	movwf	i1i2c_setBuffer@bufferSize+1
 11892  07EF  0879               	movf	i1rdBlkRegCompleteHandler@p,w
 11893  07F0  3E02               	addlw	2
 11894  07F1  0086               	movwf	6
 11895  07F2  0187               	clrf	7
 11896  07F3  0801               	movf	1,w
 11897  07F4  318F  2733  3187   	fcall	i1_i2c_setBuffer
 11898                           
 11899                           ;i2c_simple_master.c: 137: i2c_setDataCompleteCallback((0),(0));
 11900  07F7  3000               	movlw	0
 11901  07F8  00F5               	movwf	i1i2c_setDataCompleteCallback@cb
 11902  07F9  00F6               	movwf	i1i2c_setDataCompleteCallback@cb+1
 11903  07FA  01F7               	clrf	i1i2c_setDataCompleteCallback@p
 11904  07FB  318E  26DB         	fcall	i1_i2c_setDataCompleteCallback
 11905                           
 11906                           ;i2c_simple_master.c: 138: return i2c_restart_read;
 11907  07FD  3002               	movlw	2
 11908  07FE  0008               	return
 11909  07FF                     __end_ofi1_rdBlkRegCompleteHandler:	
 11910                           
 11911                           	psect	text101
 11912  0F71                     __ptext101:	
 11913 ;; *************** function i1_rd2RegCompleteHandler *****************
 11914 ;; Defined at:
 11915 ;;		line 87 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 11916 ;; Parameters:    Size  Location     Type
 11917 ;;  p               1    9[COMMON] PTR void 
 11918 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 11919 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 11920 ;; Auto vars:     Size  Location     Type
 11921 ;;		None
 11922 ;; Return value:  Size  Location     Type
 11923 ;;                  1    wreg      enum E97
 11924 ;; Registers used:
 11925 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11926 ;; Tracked objects:
 11927 ;;		On entry : 0/0
 11928 ;;		On exit  : 0/0
 11929 ;;		Unchanged: 0/0
 11930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11931 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11932 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11933 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11934 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11935 ;;Total ram usage:        1 bytes
 11936 ;; Hardware stack levels used:    1
 11937 ;; Hardware stack levels required when called:    2
 11938 ;; This function calls:
 11939 ;;		i1_i2c_setBuffer
 11940 ;;		i1_i2c_setDataCompleteCallback
 11941 ;; This function is called by:
 11942 ;; This function uses a non-reentrant model
 11943 ;;
 11944                           
 11945                           
 11946                           ;psect for function i1_rd2RegCompleteHandler
 11947  0F71                     i1_rd2RegCompleteHandler:	
 11948  0F71                     i1l2990:	
 11949                           ;incstack = 0
 11950 ;; hardware stack exceeded
 11951                           ; Regs used in i1_rd2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 11952                           
 11953                           
 11954                           ;i2c_simple_master.c: 89: i2c_setBuffer(p,2);
 11955  0F71  3002               	movlw	2
 11956  0F72  00F0               	movwf	i1i2c_setBuffer@bufferSize
 11957  0F73  3000               	movlw	0
 11958  0F74  00F1               	movwf	i1i2c_setBuffer@bufferSize+1
 11959  0F75  0879               	movf	i1rd2RegCompleteHandler@p,w
 11960  0F76  318F  2733  318F   	fcall	i1_i2c_setBuffer
 11961                           
 11962                           ;i2c_simple_master.c: 90: i2c_setDataCompleteCallback((0),(0));
 11963  0F79  3000               	movlw	0
 11964  0F7A  00F5               	movwf	i1i2c_setDataCompleteCallback@cb
 11965  0F7B  00F6               	movwf	i1i2c_setDataCompleteCallback@cb+1
 11966  0F7C  01F7               	clrf	i1i2c_setDataCompleteCallback@p
 11967  0F7D  318E  26DB         	fcall	i1_i2c_setDataCompleteCallback
 11968                           
 11969                           ;i2c_simple_master.c: 91: return i2c_restart_read;
 11970  0F7F  3002               	movlw	2
 11971  0F80  0008               	return
 11972  0F81                     __end_ofi1_rd2RegCompleteHandler:	
 11973                           
 11974                           	psect	text102
 11975  0F61                     __ptext102:	
 11976 ;; *************** function i1_rd1RegCompleteHandler *****************
 11977 ;; Defined at:
 11978 ;;		line 58 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 11979 ;; Parameters:    Size  Location     Type
 11980 ;;  p               1    9[COMMON] PTR void 
 11981 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 11982 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 11983 ;; Auto vars:     Size  Location     Type
 11984 ;;		None
 11985 ;; Return value:  Size  Location     Type
 11986 ;;                  1    wreg      enum E97
 11987 ;; Registers used:
 11988 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11989 ;; Tracked objects:
 11990 ;;		On entry : 0/0
 11991 ;;		On exit  : 0/0
 11992 ;;		Unchanged: 0/0
 11993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11994 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11995 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11996 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11997 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11998 ;;Total ram usage:        1 bytes
 11999 ;; Hardware stack levels used:    1
 12000 ;; Hardware stack levels required when called:    2
 12001 ;; This function calls:
 12002 ;;		i1_i2c_setBuffer
 12003 ;;		i1_i2c_setDataCompleteCallback
 12004 ;; This function is called by:
 12005 ;; This function uses a non-reentrant model
 12006 ;;
 12007                           
 12008                           
 12009                           ;psect for function i1_rd1RegCompleteHandler
 12010  0F61                     i1_rd1RegCompleteHandler:	
 12011  0F61                     i1l2982:	
 12012                           ;incstack = 0
 12013 ;; hardware stack exceeded
 12014                           ; Regs used in i1_rd1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 12015                           
 12016                           
 12017                           ;i2c_simple_master.c: 60: i2c_setBuffer(p,1);
 12018  0F61  3001               	movlw	1
 12019  0F62  00F0               	movwf	i1i2c_setBuffer@bufferSize
 12020  0F63  3000               	movlw	0
 12021  0F64  00F1               	movwf	i1i2c_setBuffer@bufferSize+1
 12022  0F65  0879               	movf	i1rd1RegCompleteHandler@p,w
 12023  0F66  318F  2733  318F   	fcall	i1_i2c_setBuffer
 12024                           
 12025                           ;i2c_simple_master.c: 61: i2c_setDataCompleteCallback((0),(0));
 12026  0F69  3000               	movlw	0
 12027  0F6A  00F5               	movwf	i1i2c_setDataCompleteCallback@cb
 12028  0F6B  00F6               	movwf	i1i2c_setDataCompleteCallback@cb+1
 12029  0F6C  01F7               	clrf	i1i2c_setDataCompleteCallback@p
 12030  0F6D  318E  26DB         	fcall	i1_i2c_setDataCompleteCallback
 12031                           
 12032                           ;i2c_simple_master.c: 62: return i2c_restart_read;
 12033  0F6F  3002               	movlw	2
 12034  0F70  0008               	return
 12035  0F71                     __end_ofi1_rd1RegCompleteHandler:	
 12036                           
 12037                           	psect	text103
 12038  0F51                     __ptext103:	
 12039 ;; *************** function i1_wr1RegCompleteHandler *****************
 12040 ;; Defined at:
 12041 ;;		line 31 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 12042 ;; Parameters:    Size  Location     Type
 12043 ;;  p               1    9[COMMON] PTR void 
 12044 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 12045 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 12046 ;; Auto vars:     Size  Location     Type
 12047 ;;		None
 12048 ;; Return value:  Size  Location     Type
 12049 ;;                  1    wreg      enum E97
 12050 ;; Registers used:
 12051 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12052 ;; Tracked objects:
 12053 ;;		On entry : 0/0
 12054 ;;		On exit  : 0/0
 12055 ;;		Unchanged: 0/0
 12056 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12057 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12058 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12059 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12060 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12061 ;;Total ram usage:        1 bytes
 12062 ;; Hardware stack levels used:    1
 12063 ;; Hardware stack levels required when called:    2
 12064 ;; This function calls:
 12065 ;;		i1_i2c_setBuffer
 12066 ;;		i1_i2c_setDataCompleteCallback
 12067 ;; This function is called by:
 12068 ;; This function uses a non-reentrant model
 12069 ;;
 12070                           
 12071                           
 12072                           ;psect for function i1_wr1RegCompleteHandler
 12073  0F51                     i1_wr1RegCompleteHandler:	
 12074  0F51                     i1l2974:	
 12075                           ;incstack = 0
 12076 ;; hardware stack exceeded
 12077                           ; Regs used in i1_wr1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 12078                           
 12079                           
 12080                           ;i2c_simple_master.c: 33: i2c_setBuffer(p,1);
 12081  0F51  3001               	movlw	1
 12082  0F52  00F0               	movwf	i1i2c_setBuffer@bufferSize
 12083  0F53  3000               	movlw	0
 12084  0F54  00F1               	movwf	i1i2c_setBuffer@bufferSize+1
 12085  0F55  0879               	movf	i1wr1RegCompleteHandler@p,w
 12086  0F56  318F  2733  318F   	fcall	i1_i2c_setBuffer
 12087                           
 12088                           ;i2c_simple_master.c: 34: i2c_setDataCompleteCallback((0),(0));
 12089  0F59  3000               	movlw	0
 12090  0F5A  00F5               	movwf	i1i2c_setDataCompleteCallback@cb
 12091  0F5B  00F6               	movwf	i1i2c_setDataCompleteCallback@cb+1
 12092  0F5C  01F7               	clrf	i1i2c_setDataCompleteCallback@p
 12093  0F5D  318E  26DB         	fcall	i1_i2c_setDataCompleteCallback
 12094                           
 12095                           ;i2c_simple_master.c: 35: return i2c_continue;
 12096  0F5F  3004               	movlw	4
 12097  0F60  0008               	return
 12098  0F61                     __end_ofi1_wr1RegCompleteHandler:	
 12099                           
 12100                           	psect	text104
 12101  0F41                     __ptext104:	
 12102 ;; *************** function i1_wr2RegCompleteHandler *****************
 12103 ;; Defined at:
 12104 ;;		line 110 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 12105 ;; Parameters:    Size  Location     Type
 12106 ;;  p               1    9[COMMON] PTR void 
 12107 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 12108 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 12109 ;; Auto vars:     Size  Location     Type
 12110 ;;		None
 12111 ;; Return value:  Size  Location     Type
 12112 ;;                  1    wreg      enum E97
 12113 ;; Registers used:
 12114 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12115 ;; Tracked objects:
 12116 ;;		On entry : 0/0
 12117 ;;		On exit  : 0/0
 12118 ;;		Unchanged: 0/0
 12119 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12120 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12121 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12122 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12123 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12124 ;;Total ram usage:        1 bytes
 12125 ;; Hardware stack levels used:    1
 12126 ;; Hardware stack levels required when called:    2
 12127 ;; This function calls:
 12128 ;;		i1_i2c_setBuffer
 12129 ;;		i1_i2c_setDataCompleteCallback
 12130 ;; This function is called by:
 12131 ;; This function uses a non-reentrant model
 12132 ;;
 12133                           
 12134                           
 12135                           ;psect for function i1_wr2RegCompleteHandler
 12136  0F41                     i1_wr2RegCompleteHandler:	
 12137  0F41                     i1l2998:	
 12138                           ;incstack = 0
 12139 ;; hardware stack exceeded
 12140                           ; Regs used in i1_wr2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 12141                           
 12142                           
 12143                           ;i2c_simple_master.c: 112: i2c_setBuffer(p,2);
 12144  0F41  3002               	movlw	2
 12145  0F42  00F0               	movwf	i1i2c_setBuffer@bufferSize
 12146  0F43  3000               	movlw	0
 12147  0F44  00F1               	movwf	i1i2c_setBuffer@bufferSize+1
 12148  0F45  0879               	movf	i1wr2RegCompleteHandler@p,w
 12149  0F46  318F  2733  318F   	fcall	i1_i2c_setBuffer
 12150                           
 12151                           ;i2c_simple_master.c: 113: i2c_setDataCompleteCallback((0),(0));
 12152  0F49  3000               	movlw	0
 12153  0F4A  00F5               	movwf	i1i2c_setDataCompleteCallback@cb
 12154  0F4B  00F6               	movwf	i1i2c_setDataCompleteCallback@cb+1
 12155  0F4C  01F7               	clrf	i1i2c_setDataCompleteCallback@p
 12156  0F4D  318E  26DB         	fcall	i1_i2c_setDataCompleteCallback
 12157                           
 12158                           ;i2c_simple_master.c: 114: return i2c_continue;
 12159  0F4F  3004               	movlw	4
 12160  0F50  0008               	return
 12161  0F51                     __end_ofi1_wr2RegCompleteHandler:	
 12162                           
 12163                           	psect	text105
 12164  0EDB                     __ptext105:	
 12165 ;; *************** function i1_i2c_setDataCompleteCallback *****************
 12166 ;; Defined at:
 12167 ;;		line 89 in file "mcc_generated_files/drivers/i2c_master.c"
 12168 ;; Parameters:    Size  Location     Type
 12169 ;;  cb              2    5[COMMON] PTR FTN(PTR void ,)enum 
 12170 ;;		 -> rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), rd2RegCompleteHandler(1), rd1RegCompleteHandler(1), 
 12171 ;;		 -> wr1RegCompleteHandler(1), Absolute function(1), 
 12172 ;;  p               1    7[COMMON] PTR void 
 12173 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 12174 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 12175 ;; Auto vars:     Size  Location     Type
 12176 ;;		None
 12177 ;; Return value:  Size  Location     Type
 12178 ;;                  1    wreg      void 
 12179 ;; Registers used:
 12180 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12181 ;; Tracked objects:
 12182 ;;		On entry : 0/0
 12183 ;;		On exit  : 0/0
 12184 ;;		Unchanged: 0/0
 12185 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12186 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12187 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12188 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12189 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12190 ;;Total ram usage:        4 bytes
 12191 ;; Hardware stack levels used:    1
 12192 ;; Hardware stack levels required when called:    1
 12193 ;; This function calls:
 12194 ;;		i1_setCallBack
 12195 ;; This function is called by:
 12196 ;;		i1_wr1RegCompleteHandler
 12197 ;;		i1_rd1RegCompleteHandler
 12198 ;;		i1_rd2RegCompleteHandler
 12199 ;;		i1_wr2RegCompleteHandler
 12200 ;;		i1_rdBlkRegCompleteHandler
 12201 ;; This function uses a non-reentrant model
 12202 ;;
 12203                           
 12204                           
 12205                           ;psect for function i1_i2c_setDataCompleteCallback
 12206  0EDB                     i1_i2c_setDataCompleteCallback:	
 12207                           
 12208                           ;i2c_master.c: 91: setCallBack(i2c_dataComplete,cb,p);
 12209                           
 12210                           ;incstack = 0
 12211 ;; hardware stack exceeded
 12212                           ; Regs used in i1_i2c_setDataCompleteCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclat
      +                          h+cstack]
 12213  0EDB  0876               	movf	i1i2c_setDataCompleteCallback@cb+1,w
 12214  0EDC  00F1               	movwf	i1setCallBack@cb+1
 12215  0EDD  0875               	movf	i1i2c_setDataCompleteCallback@cb,w
 12216  0EDE  00F0               	movwf	i1setCallBack@cb
 12217  0EDF  0877               	movf	i1i2c_setDataCompleteCallback@p,w
 12218  0EE0  00F8               	movwf	??i1_i2c_setDataCompleteCallback
 12219  0EE1  0878               	movf	??i1_i2c_setDataCompleteCallback,w
 12220  0EE2  00F2               	movwf	i1setCallBack@p
 12221  0EE3  3000               	movlw	0
 12222  0EE4  3186  26EB         	fcall	i1_setCallBack
 12223  0EE6  0008               	return
 12224  0EE7                     __end_ofi1_i2c_setDataCompleteCallback:	
 12225                           
 12226                           	psect	text106
 12227  06EB                     __ptext106:	
 12228 ;; *************** function i1_setCallBack *****************
 12229 ;; Defined at:
 12230 ;;		line 453 in file "mcc_generated_files/drivers/i2c_master.c"
 12231 ;; Parameters:    Size  Location     Type
 12232 ;;  idx             1    wreg     enum E12355
 12233 ;;  cb              2    0[COMMON] PTR FTN(PTR void ,)enum 
 12234 ;;		 -> rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), rd2RegCompleteHandler(1), rd1RegCompleteHandler(1), 
 12235 ;;		 -> i2c_restartWrite(1), wr1RegCompleteHandler(1), Absolute function(1), 
 12236 ;;  p               1    2[COMMON] PTR void 
 12237 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 12238 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 12239 ;; Auto vars:     Size  Location     Type
 12240 ;;  idx             1    4[COMMON] enum E12355
 12241 ;; Return value:  Size  Location     Type
 12242 ;;                  1    wreg      void 
 12243 ;; Registers used:
 12244 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12245 ;; Tracked objects:
 12246 ;;		On entry : 0/0
 12247 ;;		On exit  : 0/0
 12248 ;;		Unchanged: 0/0
 12249 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12250 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12251 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12252 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12253 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12254 ;;Total ram usage:        5 bytes
 12255 ;; Hardware stack levels used:    1
 12256 ;; This function calls:
 12257 ;;		Nothing
 12258 ;; This function is called by:
 12259 ;;		i1_i2c_setDataCompleteCallback
 12260 ;; This function uses a non-reentrant model
 12261 ;;
 12262                           
 12263                           
 12264                           ;psect for function i1_setCallBack
 12265  06EB                     i1_setCallBack:	
 12266                           
 12267                           ;incstack = 0
 12268 ;; hardware stack exceeded
 12269                           ; Regs used in i1_setCallBack: [wreg+fsr1l+fsr1h+status,2+status,0]
 12270                           ;i1setCallBack@idx stored from wreg
 12271  06EB  00F4               	movwf	i1setCallBack@idx
 12272                           
 12273                           ;i2c_master.c: 455: if(cb)
 12274  06EC  0870               	movf	i1setCallBack@cb,w
 12275  06ED  0471               	iorwf	i1setCallBack@cb+1,w
 12276  06EE  1903               	btfsc	3,2
 12277  06EF  2F01               	goto	i1l2762
 12278                           
 12279                           ;i2c_master.c: 456: {
 12280                           ;i2c_master.c: 457: i2c_status.callbackTable[idx] = cb;
 12281  06F0  3574               	lslf	i1setCallBack@idx,w
 12282  06F1  3EAB               	addlw	(low ((_i2c_status| 0+11)))& (0+255)
 12283  06F2  0086               	movwf	6
 12284  06F3  0187               	clrf	7
 12285  06F4  0870               	movf	i1setCallBack@cb,w
 12286  06F5  3FC0               	movwi [0]fsr1
 12287  06F6  0871               	movf	i1setCallBack@cb+1,w
 12288  06F7  3FC1               	movwi [1]fsr1
 12289                           
 12290                           ;i2c_master.c: 458: i2c_status.callbackPayload[idx] = p;
 12291  06F8  0872               	movf	i1setCallBack@p,w
 12292  06F9  00F3               	movwf	??i1_setCallBack
 12293  06FA  0874               	movf	i1setCallBack@idx,w
 12294  06FB  3EB7               	addlw	(low ((_i2c_status| 0+23)))& (0+255)
 12295  06FC  0086               	movwf	6
 12296  06FD  0187               	clrf	7
 12297  06FE  0873               	movf	??i1_setCallBack,w
 12298  06FF  0081               	movwf	1
 12299                           
 12300                           ;i2c_master.c: 459: }
 12301  0700  0008               	return
 12302  0701                     i1l2762:	
 12303                           
 12304                           ;i2c_master.c: 460: else
 12305                           ;i2c_master.c: 461: {
 12306                           ;i2c_master.c: 462: i2c_status.callbackTable[idx] = returnStop;
 12307  0701  3574               	lslf	i1setCallBack@idx,w
 12308  0702  3EAB               	addlw	(low ((_i2c_status| 0+11)))& (0+255)
 12309  0703  0086               	movwf	6
 12310  0704  0187               	clrf	7
 12311  0705  30FA               	movlw	low _returnStop
 12312  0706  3FC0               	movwi [0]fsr1
 12313  0707  300D               	movlw	high _returnStop
 12314  0708  3FC1               	movwi [1]fsr1
 12315                           
 12316                           ;i2c_master.c: 463: i2c_status.callbackPayload[idx] = (0);
 12317  0709  0874               	movf	i1setCallBack@idx,w
 12318  070A  3EB7               	addlw	(low ((_i2c_status| 0+23)))& (0+255)
 12319  070B  0086               	movwf	6
 12320  070C  0187               	clrf	7
 12321  070D  0181               	clrf	1
 12322  070E  0008               	return
 12323  070F                     __end_ofi1_setCallBack:	
 12324                           
 12325                           	psect	text107
 12326  0F33                     __ptext107:	
 12327 ;; *************** function i1_i2c_setBuffer *****************
 12328 ;; Defined at:
 12329 ;;		line 184 in file "mcc_generated_files/drivers/i2c_master.c"
 12330 ;; Parameters:    Size  Location     Type
 12331 ;;  buffer          1    wreg     PTR void 
 12332 ;;		 -> i2c_readDataBlock@reg(1), i2c_readDataBlock@d(3), i2c_write2ByteRegister@reg(1), i2c_write2ByteRegister@data(2),
      + 
 12333 ;;		 -> i2c_read2ByteRegister@reg(1), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@reg(1), i2c_read1ByteRegist
      +er@d2(1), 
 12334 ;;		 -> i2c_write1ByteRegister@reg(1), i2c_write1ByteRegister@data(1), NULL(0), writebuffer(17), 
 12335 ;;  bufferSize      2    0[COMMON] unsigned int 
 12336 ;; Auto vars:     Size  Location     Type
 12337 ;;  buffer          1    3[COMMON] PTR void 
 12338 ;;		 -> i2c_readDataBlock@reg(1), i2c_readDataBlock@d(3), i2c_write2ByteRegister@reg(1), i2c_write2ByteRegister@data(2),
      + 
 12339 ;;		 -> i2c_read2ByteRegister@reg(1), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@reg(1), i2c_read1ByteRegist
      +er@d2(1), 
 12340 ;;		 -> i2c_write1ByteRegister@reg(1), i2c_write1ByteRegister@data(1), NULL(0), writebuffer(17), 
 12341 ;; Return value:  Size  Location     Type
 12342 ;;                  1    wreg      void 
 12343 ;; Registers used:
 12344 ;;		wreg
 12345 ;; Tracked objects:
 12346 ;;		On entry : 0/0
 12347 ;;		On exit  : 0/0
 12348 ;;		Unchanged: 0/0
 12349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12350 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12351 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12352 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12353 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12354 ;;Total ram usage:        4 bytes
 12355 ;; Hardware stack levels used:    1
 12356 ;; This function calls:
 12357 ;;		Nothing
 12358 ;; This function is called by:
 12359 ;;		i1_wr1RegCompleteHandler
 12360 ;;		i1_rd1RegCompleteHandler
 12361 ;;		i1_rd2RegCompleteHandler
 12362 ;;		i1_wr2RegCompleteHandler
 12363 ;;		i1_rdBlkRegCompleteHandler
 12364 ;; This function uses a non-reentrant model
 12365 ;;
 12366                           
 12367                           
 12368                           ;psect for function i1_i2c_setBuffer
 12369  0F33                     i1_i2c_setBuffer:	
 12370                           
 12371                           ;incstack = 0
 12372                           ; Regs used in i1_i2c_setBuffer: [wreg]
 12373                           ;i1i2c_setBuffer@buffer stored from wreg
 12374  0F33  00F3               	movwf	i1i2c_setBuffer@buffer
 12375                           
 12376                           ;i2c_master.c: 186: if(i2c_status.bufferFree)
 12377  0F34  0021               	movlb	1	; select bank1
 12378  0F35  1D20               	btfss	_i2c_status^(0+128),2
 12379  0F36  0008               	return
 12380                           
 12381                           ;i2c_master.c: 187: {
 12382                           ;i2c_master.c: 188: i2c_status.data_ptr = buffer;
 12383  0F37  0873               	movf	i1i2c_setBuffer@buffer,w
 12384  0F38  00F2               	movwf	??i1_i2c_setBuffer
 12385  0F39  0872               	movf	??i1_i2c_setBuffer,w
 12386  0F3A  00A2               	movwf	(low ((_i2c_status| 0+2)))^(0+128)
 12387                           
 12388                           ;i2c_master.c: 189: i2c_status.data_length = bufferSize;
 12389  0F3B  0871               	movf	i1i2c_setBuffer@bufferSize+1,w
 12390  0F3C  00A4               	movwf	((_i2c_status+1)^(0+128)+3)
 12391  0F3D  0870               	movf	i1i2c_setBuffer@bufferSize,w
 12392  0F3E  00A3               	movwf	(_i2c_status^(0+128)+3)
 12393                           
 12394                           ;i2c_master.c: 190: i2c_status.bufferFree = 0;
 12395  0F3F  1120               	bcf	_i2c_status^(0+128),2
 12396  0F40  0008               	return
 12397  0F41                     __end_ofi1_i2c_setBuffer:	
 12398                           
 12399                           	psect	text108
 12400  0D76                     __ptext108:	
 12401 ;; *************** function i1_i2c_driver_stop *****************
 12402 ;; Defined at:
 12403 ;;		line 156 in file "mcc_generated_files/i2c_driver.c"
 12404 ;; Parameters:    Size  Location     Type
 12405 ;;		None
 12406 ;; Auto vars:     Size  Location     Type
 12407 ;;		None
 12408 ;; Return value:  Size  Location     Type
 12409 ;;                  1    wreg      void 
 12410 ;; Registers used:
 12411 ;;		None
 12412 ;; Tracked objects:
 12413 ;;		On entry : 0/0
 12414 ;;		On exit  : 0/0
 12415 ;;		Unchanged: 0/0
 12416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12417 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12418 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12419 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12420 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12421 ;;Total ram usage:        0 bytes
 12422 ;; Hardware stack levels used:    1
 12423 ;; This function calls:
 12424 ;;		Nothing
 12425 ;; This function is called by:
 12426 ;;		i1_do_I2C_SEND_STOP
 12427 ;; This function uses a non-reentrant model
 12428 ;;
 12429                           
 12430                           
 12431                           ;psect for function i1_i2c_driver_stop
 12432  0D76                     i1_i2c_driver_stop:	
 12433                           
 12434                           ;i2c_driver.c: 158: SSP1CON2bits.PEN = 1;
 12435                           
 12436                           ;incstack = 0
 12437                           ; Regs used in i1_i2c_driver_stop: []
 12438  0D76  0024               	movlb	4	; select bank4
 12439  0D77  1516               	bsf	22,2	;volatile
 12440  0D78  0008               	return
 12441  0D79                     __end_ofi1_i2c_driver_stop:	
 12442                           
 12443                           	psect	text109
 12444  0D73                     __ptext109:	
 12445 ;; *************** function i1_i2c_driver_restart *****************
 12446 ;; Defined at:
 12447 ;;		line 151 in file "mcc_generated_files/i2c_driver.c"
 12448 ;; Parameters:    Size  Location     Type
 12449 ;;		None
 12450 ;; Auto vars:     Size  Location     Type
 12451 ;;		None
 12452 ;; Return value:  Size  Location     Type
 12453 ;;                  1    wreg      void 
 12454 ;; Registers used:
 12455 ;;		None
 12456 ;; Tracked objects:
 12457 ;;		On entry : 0/0
 12458 ;;		On exit  : 0/0
 12459 ;;		Unchanged: 0/0
 12460 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12461 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12462 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12463 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12464 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12465 ;;Total ram usage:        0 bytes
 12466 ;; Hardware stack levels used:    1
 12467 ;; This function calls:
 12468 ;;		Nothing
 12469 ;; This function is called by:
 12470 ;;		i1_do_I2C_SEND_RESTART_READ
 12471 ;;		i1_do_I2C_SEND_RESTART_WRITE
 12472 ;;		i1_do_I2C_SEND_RESTART
 12473 ;; This function uses a non-reentrant model
 12474 ;;
 12475                           
 12476                           
 12477                           ;psect for function i1_i2c_driver_restart
 12478  0D73                     i1_i2c_driver_restart:	
 12479                           
 12480                           ;i2c_driver.c: 153: SSP1CON2bits.RSEN = 1;
 12481                           
 12482                           ;incstack = 0
 12483                           ; Regs used in i1_i2c_driver_restart: []
 12484  0D73  0024               	movlb	4	; select bank4
 12485  0D74  1496               	bsf	22,1	;volatile
 12486  0D75  0008               	return
 12487  0D76                     __end_ofi1_i2c_driver_restart:	
 12488                           
 12489                           	psect	text110
 12490  0D9D                     __ptext110:	
 12491 ;; *************** function i1_i2c_driver_sendACK *****************
 12492 ;; Defined at:
 12493 ;;		line 196 in file "mcc_generated_files/i2c_driver.c"
 12494 ;; Parameters:    Size  Location     Type
 12495 ;;		None
 12496 ;; Auto vars:     Size  Location     Type
 12497 ;;		None
 12498 ;; Return value:  Size  Location     Type
 12499 ;;                  1    wreg      void 
 12500 ;; Registers used:
 12501 ;;		None
 12502 ;; Tracked objects:
 12503 ;;		On entry : 0/0
 12504 ;;		On exit  : 0/0
 12505 ;;		Unchanged: 0/0
 12506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12507 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12508 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12509 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12510 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12511 ;;Total ram usage:        0 bytes
 12512 ;; Hardware stack levels used:    1
 12513 ;; This function calls:
 12514 ;;		Nothing
 12515 ;; This function is called by:
 12516 ;;		i1_do_I2C_DO_ACK
 12517 ;;		i1_do_I2C_RX
 12518 ;; This function uses a non-reentrant model
 12519 ;;
 12520                           
 12521                           
 12522                           ;psect for function i1_i2c_driver_sendACK
 12523  0D9D                     i1_i2c_driver_sendACK:	
 12524                           
 12525                           ;i2c_driver.c: 198: SSP1CON2bits.ACKDT = 0;
 12526                           
 12527                           ;incstack = 0
 12528                           ; Regs used in i1_i2c_driver_sendACK: []
 12529  0D9D  0024               	movlb	4	; select bank4
 12530  0D9E  1296               	bcf	22,5	;volatile
 12531                           
 12532                           ;i2c_driver.c: 199: SSP1CON2bits.ACKEN = 1;
 12533  0D9F  1616               	bsf	22,4	;volatile
 12534  0DA0  0008               	return
 12535  0DA1                     __end_ofi1_i2c_driver_sendACK:	
 12536                           
 12537                           	psect	text111
 12538  0D70                     __ptext111:	
 12539 ;; *************** function _i2c_busCollisionISR *****************
 12540 ;; Defined at:
 12541 ;;		line 435 in file "mcc_generated_files/drivers/i2c_master.c"
 12542 ;; Parameters:    Size  Location     Type
 12543 ;;		None
 12544 ;; Auto vars:     Size  Location     Type
 12545 ;;		None
 12546 ;; Return value:  Size  Location     Type
 12547 ;;                  1    wreg      void 
 12548 ;; Registers used:
 12549 ;;		status,2, status,0, pclath, cstack
 12550 ;; Tracked objects:
 12551 ;;		On entry : 0/0
 12552 ;;		On exit  : 0/0
 12553 ;;		Unchanged: 0/0
 12554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12555 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12556 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12557 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12558 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12559 ;;Total ram usage:        0 bytes
 12560 ;; Hardware stack levels used:    1
 12561 ;; Hardware stack levels required when called:    1
 12562 ;; This function calls:
 12563 ;;		_i2c_driver_clearBusCollision
 12564 ;; This function is called by:
 12565 ;;		_i2c_open
 12566 ;;		_INTERRUPT_InterruptManager
 12567 ;; This function uses a non-reentrant model
 12568 ;;
 12569                           
 12570                           
 12571                           ;psect for function _i2c_busCollisionISR
 12572  0D70                     _i2c_busCollisionISR:	
 12573                           
 12574                           ;i2c_master.c: 437: i2c_driver_clearBusCollision();
 12575                           
 12576                           ;incstack = 0
 12577                           ; Regs used in _i2c_busCollisionISR: [status,2+status,0+pclath+cstack]
 12578  0D70  318D  256D         	fcall	_i2c_driver_clearBusCollision
 12579  0D72  0008               	return
 12580  0D73                     __end_of_i2c_busCollisionISR:	
 12581                           
 12582                           	psect	text112
 12583  0D6D                     __ptext112:	
 12584 ;; *************** function _i2c_driver_clearBusCollision *****************
 12585 ;; Defined at:
 12586 ;;		line 253 in file "mcc_generated_files/i2c_driver.c"
 12587 ;; Parameters:    Size  Location     Type
 12588 ;;		None
 12589 ;; Auto vars:     Size  Location     Type
 12590 ;;		None
 12591 ;; Return value:  Size  Location     Type
 12592 ;;                  1    wreg      void 
 12593 ;; Registers used:
 12594 ;;		None
 12595 ;; Tracked objects:
 12596 ;;		On entry : 0/0
 12597 ;;		On exit  : 0/0
 12598 ;;		Unchanged: 0/0
 12599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12600 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12601 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12602 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12603 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12604 ;;Total ram usage:        0 bytes
 12605 ;; Hardware stack levels used:    1
 12606 ;; This function calls:
 12607 ;;		Nothing
 12608 ;; This function is called by:
 12609 ;;		_i2c_busCollisionISR
 12610 ;; This function uses a non-reentrant model
 12611 ;;
 12612                           
 12613                           
 12614                           ;psect for function _i2c_driver_clearBusCollision
 12615  0D6D                     _i2c_driver_clearBusCollision:	
 12616                           
 12617                           ;i2c_driver.c: 255: PIR2bits.BCL1IF = 0;
 12618                           
 12619                           ;incstack = 0
 12620                           ; Regs used in _i2c_driver_clearBusCollision: []
 12621  0D6D  0020               	movlb	0	; select bank0
 12622  0D6E  1191               	bcf	17,3	;volatile
 12623  0D6F  0008               	return
 12624  0D70                     __end_of_i2c_driver_clearBusCollision:	
 12625                           
 12626                           	psect	text113
 12627  0DDC                     __ptext113:	
 12628 ;; *************** function _PIN_MANAGER_IOC *****************
 12629 ;; Defined at:
 12630 ;;		line 117 in file "mcc_generated_files/pin_manager.c"
 12631 ;; Parameters:    Size  Location     Type
 12632 ;;		None
 12633 ;; Auto vars:     Size  Location     Type
 12634 ;;		None
 12635 ;; Return value:  Size  Location     Type
 12636 ;;                  1    wreg      void 
 12637 ;; Registers used:
 12638 ;;		wreg, status,2, status,0, pclath, cstack
 12639 ;; Tracked objects:
 12640 ;;		On entry : 0/0
 12641 ;;		On exit  : 0/0
 12642 ;;		Unchanged: 0/0
 12643 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12644 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12645 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12646 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12647 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12648 ;;Total ram usage:        0 bytes
 12649 ;; Hardware stack levels used:    1
 12650 ;; Hardware stack levels required when called:    2
 12651 ;; This function calls:
 12652 ;;		_IOCCF4_ISR
 12653 ;; This function is called by:
 12654 ;;		_INTERRUPT_InterruptManager
 12655 ;; This function uses a non-reentrant model
 12656 ;;
 12657                           
 12658                           
 12659                           ;psect for function _PIN_MANAGER_IOC
 12660  0DDC                     _PIN_MANAGER_IOC:	
 12661                           
 12662                           ;pin_manager.c: 120: if(IOCCFbits.IOCCF4 == 1)
 12663                           
 12664                           ;incstack = 0
 12665                           ; Regs used in _PIN_MANAGER_IOC: [wreg+status,2+status,0+pclath+cstack]
 12666  0DDC  0027               	movlb	7	; select bank7
 12667  0DDD  1E19               	btfss	25,4	;volatile
 12668  0DDE  0008               	return
 12669                           
 12670                           ;pin_manager.c: 121: {
 12671                           ;pin_manager.c: 122: IOCCF4_ISR();
 12672  0DDF  318E  26FF         	fcall	_IOCCF4_ISR
 12673  0DE1  0008               	return
 12674  0DE2                     __end_of_PIN_MANAGER_IOC:	
 12675                           
 12676                           	psect	text114
 12677  0EFF                     __ptext114:	
 12678 ;; *************** function _IOCCF4_ISR *****************
 12679 ;; Defined at:
 12680 ;;		line 131 in file "mcc_generated_files/pin_manager.c"
 12681 ;; Parameters:    Size  Location     Type
 12682 ;;		None
 12683 ;; Auto vars:     Size  Location     Type
 12684 ;;		None
 12685 ;; Return value:  Size  Location     Type
 12686 ;;                  1    wreg      void 
 12687 ;; Registers used:
 12688 ;;		wreg, status,2, status,0, pclath, cstack
 12689 ;; Tracked objects:
 12690 ;;		On entry : 0/0
 12691 ;;		On exit  : 0/0
 12692 ;;		Unchanged: 0/0
 12693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12694 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12695 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12696 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12697 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12698 ;;Total ram usage:        0 bytes
 12699 ;; Hardware stack levels used:    1
 12700 ;; Hardware stack levels required when called:    1
 12701 ;; This function calls:
 12702 ;;		Absolute function
 12703 ;;		_IOCCF4_DefaultInterruptHandler
 12704 ;;		_buttonInterrupt
 12705 ;; This function is called by:
 12706 ;;		_PIN_MANAGER_IOC
 12707 ;; This function uses a non-reentrant model
 12708 ;;
 12709                           
 12710                           
 12711                           ;psect for function _IOCCF4_ISR
 12712  0EFF                     _IOCCF4_ISR:	
 12713                           
 12714                           ;pin_manager.c: 136: if(IOCCF4_InterruptHandler)
 12715                           
 12716                           ;incstack = 0
 12717                           ; Regs used in _IOCCF4_ISR: [wreg+status,2+status,0+pclath+cstack]
 12718  0EFF  0020               	movlb	0	; select bank0
 12719  0F00  0865               	movf	_IOCCF4_InterruptHandler,w
 12720  0F01  0466               	iorwf	_IOCCF4_InterruptHandler+1,w
 12721  0F02  1903               	btfsc	3,2
 12722  0F03  2F09               	goto	i1l5488
 12723                           
 12724                           ;pin_manager.c: 137: {
 12725                           ;pin_manager.c: 138: IOCCF4_InterruptHandler();
 12726  0F04  0866               	movf	_IOCCF4_InterruptHandler+1,w
 12727  0F05  008A               	movwf	10
 12728  0F06  0865               	movf	_IOCCF4_InterruptHandler,w
 12729  0F07  000A               	callw
 12730  0F08  318E               	pagesel	$
 12731  0F09                     i1l5488:	
 12732                           
 12733                           ;pin_manager.c: 139: }
 12734                           ;pin_manager.c: 140: IOCCFbits.IOCCF4 = 0;
 12735  0F09  0027               	movlb	7	; select bank7
 12736  0F0A  1219               	bcf	25,4	;volatile
 12737  0F0B  0008               	return
 12738  0F0C                     __end_of_IOCCF4_ISR:	
 12739                           
 12740                           	psect	text115
 12741  0D67                     __ptext115:	
 12742 ;; *************** function _IOCCF4_DefaultInterruptHandler *****************
 12743 ;; Defined at:
 12744 ;;		line 153 in file "mcc_generated_files/pin_manager.c"
 12745 ;; Parameters:    Size  Location     Type
 12746 ;;		None
 12747 ;; Auto vars:     Size  Location     Type
 12748 ;;		None
 12749 ;; Return value:  Size  Location     Type
 12750 ;;                  1    wreg      void 
 12751 ;; Registers used:
 12752 ;;		None
 12753 ;; Tracked objects:
 12754 ;;		On entry : 0/0
 12755 ;;		On exit  : 0/0
 12756 ;;		Unchanged: 0/0
 12757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12758 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12759 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12760 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12761 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12762 ;;Total ram usage:        0 bytes
 12763 ;; Hardware stack levels used:    1
 12764 ;; This function calls:
 12765 ;;		Nothing
 12766 ;; This function is called by:
 12767 ;;		_PIN_MANAGER_Initialize
 12768 ;;		_IOCCF4_ISR
 12769 ;; This function uses a non-reentrant model
 12770 ;;
 12771                           
 12772                           
 12773                           ;psect for function _IOCCF4_DefaultInterruptHandler
 12774  0D67                     _IOCCF4_DefaultInterruptHandler:	
 12775                           
 12776                           ;incstack = 0
 12777                           ; Regs used in _IOCCF4_DefaultInterruptHandler: []
 12778  0D67  0008               	return
 12779  0D68                     __end_of_IOCCF4_DefaultInterruptHandler:	
 12780                           
 12781                           	psect	text116
 12782  0ECF                     __ptext116:	
 12783 ;; *************** function _buttonInterrupt *****************
 12784 ;; Defined at:
 12785 ;;		line 158 in file "main.c"
 12786 ;; Parameters:    Size  Location     Type
 12787 ;;		None
 12788 ;; Auto vars:     Size  Location     Type
 12789 ;;		None
 12790 ;; Return value:  Size  Location     Type
 12791 ;;                  1    wreg      void 
 12792 ;; Registers used:
 12793 ;;		wreg, status,2, status,0
 12794 ;; Tracked objects:
 12795 ;;		On entry : 0/0
 12796 ;;		On exit  : 0/0
 12797 ;;		Unchanged: 0/0
 12798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12799 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12800 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12801 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12802 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12803 ;;Total ram usage:        1 bytes
 12804 ;; Hardware stack levels used:    1
 12805 ;; This function calls:
 12806 ;;		Nothing
 12807 ;; This function is called by:
 12808 ;;		_main
 12809 ;;		_IOCCF4_ISR
 12810 ;; This function uses a non-reentrant model
 12811 ;;
 12812                           
 12813                           
 12814                           ;psect for function _buttonInterrupt
 12815  0ECF                     _buttonInterrupt:	
 12816                           
 12817                           ;main.c: 159: start = 1;
 12818                           
 12819                           ;incstack = 0
 12820                           ; Regs used in _buttonInterrupt: [wreg+status,2+status,0]
 12821  0ECF  0020               	movlb	0	; select bank0
 12822  0ED0  01DD               	clrf	_start
 12823  0ED1  0ADD               	incf	_start,f
 12824                           
 12825                           ;main.c: 160: fall = 0;
 12826  0ED2  01E4               	clrf	_fall
 12827                           
 12828                           ;main.c: 161: if (gravityCounter < 255) {
 12829  0ED3  0A5C               	incf	_gravityCounter,w
 12830  0ED4  1903               	btfsc	3,2
 12831  0ED5  0008               	return
 12832                           
 12833                           ;main.c: 162: gravityCounter = 255;
 12834  0ED6  30FF               	movlw	255
 12835  0ED7  00F0               	movwf	??_buttonInterrupt
 12836  0ED8  0870               	movf	??_buttonInterrupt,w
 12837  0ED9  00DC               	movwf	_gravityCounter
 12838  0EDA  0008               	return
 12839  0EDB                     __end_of_buttonInterrupt:	
 12840  007E                     btemp	set	126	;btemp
 12841  007E                     int$flags	set	126
 12842  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        37
    BSS         87
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     39      71
    BANK1            80      0      62
    BANK2            80      0      32
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    i2c_write1ByteRegister@data.data	PTR unsigned char  size(1) Largest target is 0

    i2c_read1ByteRegister@d2.data	PTR unsigned char  size(1) Largest target is 0

    i2c_read2ByteRegister@result.data	PTR unsigned char  size(1) Largest target is 0

    i2c_write2ByteRegister@data.data	PTR unsigned char  size(1) Largest target is 0

    do_I2C_TX$1571$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    do_I2C_RX$1577$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    do_I2C_TX_EMPTY$1583$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    i2c_ISR$1589	PTR const FTN()enum E12337 size(2) Largest target is 1
		 -> do_I2C_TX_EMPTY(), do_I2C_RX(), do_I2C_TX(), do_I2C_DO_ADDRESS_NACK(), 
		 -> do_I2C_DO_NACK_RESTART(), do_I2C_DO_NACK_STOP(), do_I2C_DO_ACK(), do_I2C_RCEN(), 
		 -> do_I2C_SEND_ADR_WRITE(), do_I2C_SEND_ADR_READ(), do_I2C_SEND_STOP(), do_I2C_SEND_RESTART(), 
		 -> do_I2C_SEND_RESTART_WRITE(), do_I2C_SEND_RESTART_READ(), do_I2C_IDLE(), do_I2C_RESET(), 

    do_I2C_TX_EMPTY$1588	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    do_I2C_TX_EMPTY$1583	PTR FTN(PTR void ,)enum E12171 size(2) Largest target is 1
		 -> returnReset(), returnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> rd2RegCompleteHandler(), rd1RegCompleteHandler(), i2c_restartWrite(), wr1RegCompleteHandler(), 
		 -> Absolute function(), 

    do_I2C_RX$1582	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    do_I2C_RX$1577	PTR FTN(PTR void ,)enum E12171 size(2) Largest target is 1
		 -> returnReset(), returnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> rd2RegCompleteHandler(), rd1RegCompleteHandler(), i2c_restartWrite(), wr1RegCompleteHandler(), 
		 -> Absolute function(), 

    do_I2C_TX$1576	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    do_I2C_TX$1571	PTR FTN(PTR void ,)enum E12171 size(2) Largest target is 1
		 -> returnReset(), returnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> rd2RegCompleteHandler(), rd1RegCompleteHandler(), i2c_restartWrite(), wr1RegCompleteHandler(), 
		 -> Absolute function(), 

    returnStop@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    returnReset@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    cb$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    cb$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    i2c_restartWrite@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    cb$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    S824$11$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    mssp_waitForEvent@timeout	PTR unsigned int  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    setCallBack@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    setCallBack@cb	PTR FTN(PTR void ,)enum E12171 size(2) Largest target is 1
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 
		 -> i2c_restartWrite(), wr1RegCompleteHandler(), Absolute function(), 

    fsmStateTable	PTR const FTN()enum E12337[16] size(2) Largest target is 1
		 -> do_I2C_TX_EMPTY(), do_I2C_RX(), do_I2C_TX(), do_I2C_DO_ADDRESS_NACK(), 
		 -> do_I2C_DO_NACK_RESTART(), do_I2C_DO_NACK_STOP(), do_I2C_DO_ACK(), do_I2C_RCEN(), 
		 -> do_I2C_SEND_ADR_WRITE(), do_I2C_SEND_ADR_READ(), do_I2C_SEND_STOP(), do_I2C_SEND_RESTART(), 
		 -> do_I2C_SEND_RESTART_WRITE(), do_I2C_SEND_RESTART_READ(), do_I2C_IDLE(), do_I2C_RESET(), 

    i2c_setBuffer@buffer	PTR void  size(1) Largest target is 17
		 -> i2c_readDataBlock@reg(COMMON[1]), i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@reg(COMMON[1]), i2c_write2ByteRegister@data(COMMON[2]), 
		 -> i2c_read2ByteRegister@reg(COMMON[1]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@reg(COMMON[1]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@reg(COMMON[1]), i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), writebuffer(BANK1[17]), 

    i2c_setAddressNACKCallback@p	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    i2c_setAddressNACKCallback@cb	PTR FTN(PTR void ,)enum E12171 size(2) Largest target is 1
		 -> i2c_restartWrite(), 

    i2c_setDataCompleteCallback@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    i2c_setDataCompleteCallback@cb	PTR FTN(PTR void ,)enum E12171 size(2) Largest target is 1
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), Absolute function(), 

    S824$callbackPayload	PTR void [6] size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    i2c_status.callbackPayload	PTR void [6] size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    S824$callbackTable	PTR FTN(PTR void ,)enum E12171[6] size(2) Largest target is 1
		 -> returnReset(), returnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> rd2RegCompleteHandler(), rd1RegCompleteHandler(), i2c_restartWrite(), wr1RegCompleteHandler(), 
		 -> Absolute function(), 

    i2c_status.callbackTable	PTR FTN(PTR void ,)enum E12171[6] size(2) Largest target is 1
		 -> i1_returnStop(), returnReset(), returnStop(), rdBlkRegCompleteHandler(), 
		 -> wr2RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), i2c_restartWrite(), 
		 -> wr1RegCompleteHandler(), Absolute function(), 

    S824$data_ptr	PTR unsigned char  size(1) Largest target is 17
		 -> i2c_readDataBlock@reg(COMMON[1]), i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@reg(COMMON[1]), i2c_write2ByteRegister@data(COMMON[2]), 
		 -> i2c_read2ByteRegister@reg(COMMON[1]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@reg(COMMON[1]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@reg(COMMON[1]), i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), writebuffer(BANK1[17]), 

    i2c_status.data_ptr	PTR unsigned char  size(1) Largest target is 17
		 -> i2c_readDataBlock@reg(COMMON[1]), i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@reg(COMMON[1]), i2c_write2ByteRegister@data(COMMON[2]), 
		 -> i2c_read2ByteRegister@reg(COMMON[1]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@reg(COMMON[1]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@reg(COMMON[1]), i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), writebuffer(BANK1[17]), 

    d.data	PTR unsigned char  size(1) Largest target is 0

    S643$data	PTR unsigned char  size(1) Largest target is 0

    rdBlkRegCompleteHandler@p.data	PTR unsigned char  size(1) Largest target is 0

    rdBlkRegCompleteHandler@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    wr2RegCompleteHandler@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    rd2RegCompleteHandler@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    rd1RegCompleteHandler@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    i2c_writeNBytes@data	PTR void  size(1) Largest target is 17
		 -> writebuffer(BANK1[17]), 

    wr1RegCompleteHandler@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    i2c_driver_setI2cISR@f	PTR void  size(2) Largest target is 1
		 -> i2c_ISR(), 

    i2c_driver_i2cISR	PTR FTN()void  size(2) Largest target is 1
		 -> i2c_ISR(), Absolute function(), 

    i2c_driver_setBusCollisionISR@f	PTR void  size(2) Largest target is 1
		 -> i2c_busCollisionISR(), 

    i2c_driver_busCollisionISR	PTR FTN()void  size(2) Largest target is 1
		 -> i2c_busCollisionISR(), Absolute function(), 

    IOCCF4_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> buttonInterrupt(), IOCCF4_DefaultInterruptHandler(), 

    IOCCF4_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> buttonInterrupt(), Absolute function(), IOCCF4_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->i1_i2c_ISR
    i1_i2c_ISR->i1_do_I2C_TX
    i1_do_I2C_TX_EMPTY->i1_i2c_restartWrite
    i1_do_I2C_TX_EMPTY->i1_rd1RegCompleteHandler
    i1_do_I2C_TX_EMPTY->i1_rd2RegCompleteHandler
    i1_do_I2C_TX_EMPTY->i1_rdBlkRegCompleteHandler
    i1_do_I2C_TX_EMPTY->i1_returnReset
    i1_do_I2C_TX_EMPTY->i1_returnStop
    i1_do_I2C_TX_EMPTY->i1_wr1RegCompleteHandler
    i1_do_I2C_TX_EMPTY->i1_wr2RegCompleteHandler
    i1_do_I2C_TX->i1_i2c_restartWrite
    i1_do_I2C_TX->i1_rd1RegCompleteHandler
    i1_do_I2C_TX->i1_rd2RegCompleteHandler
    i1_do_I2C_TX->i1_rdBlkRegCompleteHandler
    i1_do_I2C_TX->i1_returnReset
    i1_do_I2C_TX->i1_returnStop
    i1_do_I2C_TX->i1_wr1RegCompleteHandler
    i1_do_I2C_TX->i1_wr2RegCompleteHandler
    i1_do_I2C_SEND_ADR_WRITE->i1_i2c_driver_TXData
    i1_do_I2C_SEND_ADR_READ->i1_i2c_driver_TXData
    i1_do_I2C_RX->i1_i2c_restartWrite
    i1_do_I2C_RX->i1_rd1RegCompleteHandler
    i1_do_I2C_RX->i1_rd2RegCompleteHandler
    i1_do_I2C_RX->i1_rdBlkRegCompleteHandler
    i1_do_I2C_RX->i1_returnReset
    i1_do_I2C_RX->i1_returnStop
    i1_do_I2C_RX->i1_wr1RegCompleteHandler
    i1_do_I2C_RX->i1_wr2RegCompleteHandler
    i1_do_I2C_DO_ADDRESS_NACK->i1_i2c_restartWrite
    i1_do_I2C_DO_ADDRESS_NACK->i1_rd1RegCompleteHandler
    i1_do_I2C_DO_ADDRESS_NACK->i1_rd2RegCompleteHandler
    i1_do_I2C_DO_ADDRESS_NACK->i1_rdBlkRegCompleteHandler
    i1_do_I2C_DO_ADDRESS_NACK->i1_returnReset
    i1_do_I2C_DO_ADDRESS_NACK->i1_returnStop
    i1_do_I2C_DO_ADDRESS_NACK->i1_wr1RegCompleteHandler
    i1_do_I2C_DO_ADDRESS_NACK->i1_wr2RegCompleteHandler
    i1_wr2RegCompleteHandler->i1_i2c_setDataCompleteCallback
    i1_wr1RegCompleteHandler->i1_i2c_setDataCompleteCallback
    i1_rdBlkRegCompleteHandler->i1_i2c_setDataCompleteCallback
    i1_rd2RegCompleteHandler->i1_i2c_setDataCompleteCallback
    i1_rd1RegCompleteHandler->i1_i2c_setDataCompleteCallback
    i1_i2c_setDataCompleteCallback->i1_setCallBack
    _IOCCF4_ISR->_buttonInterrupt

Critical Paths under _main in BANK0

    _main->_shiftWalls
    _shiftWalls->_random
    _random->___awmod
    _rand->___lmul
    ___awmod->_rand
    _initializeDisplay->_i2c_writeNBytes
    _endGame->_writeDisplay
    _writeDisplay->_i2c_writeNBytes
    _i2c_setAddressNACKCallback->_setCallBack
    _i2c_open->_i2c_driver_setBusCollisionISR
    _i2c_open->_i2c_driver_setI2cISR
    _i2c_masterWrite->_i2c_masterOperation
    _i2c_poller->_i2c_ISR
    _i2c_ISR->_do_I2C_TX
    _do_I2C_TX_EMPTY->_i2c_restartWrite
    _do_I2C_TX_EMPTY->_rd1RegCompleteHandler
    _do_I2C_TX_EMPTY->_rd2RegCompleteHandler
    _do_I2C_TX_EMPTY->_rdBlkRegCompleteHandler
    _do_I2C_TX_EMPTY->_returnReset
    _do_I2C_TX_EMPTY->_returnStop
    _do_I2C_TX_EMPTY->_wr1RegCompleteHandler
    _do_I2C_TX_EMPTY->_wr2RegCompleteHandler
    _do_I2C_TX->_i2c_restartWrite
    _do_I2C_TX->_rd1RegCompleteHandler
    _do_I2C_TX->_rd2RegCompleteHandler
    _do_I2C_TX->_rdBlkRegCompleteHandler
    _do_I2C_TX->_returnReset
    _do_I2C_TX->_returnStop
    _do_I2C_TX->_wr1RegCompleteHandler
    _do_I2C_TX->_wr2RegCompleteHandler
    _do_I2C_SEND_ADR_WRITE->_i2c_driver_TXData
    _do_I2C_SEND_ADR_READ->_i2c_driver_TXData
    _do_I2C_RX->_i2c_restartWrite
    _do_I2C_RX->_rd1RegCompleteHandler
    _do_I2C_RX->_rd2RegCompleteHandler
    _do_I2C_RX->_rdBlkRegCompleteHandler
    _do_I2C_RX->_returnReset
    _do_I2C_RX->_returnStop
    _do_I2C_RX->_wr1RegCompleteHandler
    _do_I2C_RX->_wr2RegCompleteHandler
    _do_I2C_DO_ADDRESS_NACK->_i2c_restartWrite
    _do_I2C_DO_ADDRESS_NACK->_rd1RegCompleteHandler
    _do_I2C_DO_ADDRESS_NACK->_rd2RegCompleteHandler
    _do_I2C_DO_ADDRESS_NACK->_rdBlkRegCompleteHandler
    _do_I2C_DO_ADDRESS_NACK->_returnReset
    _do_I2C_DO_ADDRESS_NACK->_returnStop
    _do_I2C_DO_ADDRESS_NACK->_wr1RegCompleteHandler
    _do_I2C_DO_ADDRESS_NACK->_wr2RegCompleteHandler
    _wr2RegCompleteHandler->_i2c_setDataCompleteCallback
    _wr1RegCompleteHandler->_i2c_setDataCompleteCallback
    _rdBlkRegCompleteHandler->_i2c_setDataCompleteCallback
    _rd2RegCompleteHandler->_i2c_setDataCompleteCallback
    _rd1RegCompleteHandler->_i2c_setDataCompleteCallback
    _i2c_setDataCompleteCallback->_setCallBack
    _drawWalls->_reverse
    _PIN_MANAGER_Initialize->_IOCCF4_SetInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  252315
                                             37 BANK0      2     2      0
         _IOCCF4_SetInterruptHandler
                  _SYSTEM_Initialize
                        _clearPixels
                          _drawPixel
                          _drawWalls
                            _endGame
                  _initializeDisplay
                         _shiftWalls
                       _writeDisplay
 ---------------------------------------------------------------------------------
 (1) _shiftWalls                                           6     6      0     910
                                             31 BANK0      6     6      0
                             _random
 ---------------------------------------------------------------------------------
 (2) _random                                               4     3      1     910
                                             27 BANK0      4     3      1
                            ___awmod
                               _rand
 ---------------------------------------------------------------------------------
 (3) _rand                                                 7     5      2     244
                                             13 BANK0      7     5      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     244
                                              1 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4     448
                                             20 BANK0      7     3      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (1) _initializeDisplay                                    1     1      0   83048
                                             22 BANK0      1     1      0
                    _i2c_writeNBytes
 ---------------------------------------------------------------------------------
 (1) _endGame                                              2     2      0   83652
                                             27 BANK0      2     2      0
                       _writeDisplay
 ---------------------------------------------------------------------------------
 (1) _writeDisplay                                         5     5      0   83652
                                             22 BANK0      5     5      0
                            ___awdiv
                    _i2c_writeNBytes
 ---------------------------------------------------------------------------------
 (2) _i2c_writeNBytes                                      4     1      3   83048
                                             18 BANK0      4     1      3
                          _i2c_close
                    _i2c_masterWrite
                           _i2c_open
         _i2c_setAddressNACKCallback
                      _i2c_setBuffer
 ---------------------------------------------------------------------------------
 (3) _i2c_setAddressNACKCallback                           4     1      3    1870
                                              6 BANK0      4     1      3
                        _setCallBack
 ---------------------------------------------------------------------------------
 (3) _i2c_open                                             3     3      0     366
                                              3 BANK0      3     3      0
                    _i2c_driver_open
      _i2c_driver_setBusCollisionISR
               _i2c_driver_setI2cISR
                      _mssp_clearIRQ
 ---------------------------------------------------------------------------------
 (4) _i2c_driver_setI2cISR                                 2     0      2      98
                                              1 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _i2c_driver_setBusCollisionISR                        2     0      2      98
                                              1 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _i2c_driver_open                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2c_masterWrite                                      0     0      0   78362
                _i2c_masterOperation
 ---------------------------------------------------------------------------------
 (4) _i2c_masterOperation                                  3     3      0   78362
                                             15 BANK0      3     3      0
                   _i2c_driver_start
                         _i2c_poller
                  _mssp_IRQisEnabled
 ---------------------------------------------------------------------------------
 (5) _mssp_IRQisEnabled                                    2     2      0       0
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (5) _i2c_poller                                           0     0      0   78192
                            _i2c_ISR
                  _mssp_waitForEvent
 ---------------------------------------------------------------------------------
 (6) _mssp_waitForEvent                                    1     1      0      50
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _i2c_ISR                                              1     1      0   78142
                                             14 BANK0      1     1      0
                      _do_I2C_DO_ACK *
             _do_I2C_DO_ADDRESS_NACK *
             _do_I2C_DO_NACK_RESTART *
                _do_I2C_DO_NACK_STOP *
                        _do_I2C_IDLE *
                        _do_I2C_RCEN *
                       _do_I2C_RESET *
                          _do_I2C_RX *
               _do_I2C_SEND_ADR_READ *
              _do_I2C_SEND_ADR_WRITE *
                _do_I2C_SEND_RESTART *
           _do_I2C_SEND_RESTART_READ *
          _do_I2C_SEND_RESTART_WRITE *
                   _do_I2C_SEND_STOP *
                          _do_I2C_TX *
                    _do_I2C_TX_EMPTY *
                  _i2c_driver_isNACK
                      _mssp_clearIRQ
 ---------------------------------------------------------------------------------
 (7) _do_I2C_TX_EMPTY                                      1     1      0   19494
                                             11 BANK0      1     1      0
                   Absolute function *
                _do_I2C_SEND_RESTART
                   _do_I2C_SEND_STOP
                   _i2c_restartWrite *
                        _mssp_setIRQ
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
                        _returnReset *
                         _returnStop *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (8) _mssp_setIRQ                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_TX                                            3     3      0   19616
                                             11 BANK0      3     3      0
                   Absolute function *
           _do_I2C_SEND_RESTART_READ
          _do_I2C_SEND_RESTART_WRITE
                   _do_I2C_SEND_STOP
                  _i2c_driver_TXData
                  _i2c_driver_isNACK
                   _i2c_restartWrite *
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
                        _returnReset *
                         _returnStop *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (7) _i2c_driver_isNACK                                    1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (8) _do_I2C_SEND_RESTART_WRITE                            0     0      0       0
                 _i2c_driver_restart
 ---------------------------------------------------------------------------------
 (8) _do_I2C_SEND_RESTART_READ                             0     0      0       0
                 _i2c_driver_restart
 ---------------------------------------------------------------------------------
 (7) _do_I2C_SEND_ADR_WRITE                                0     0      0      22
                  _i2c_driver_TXData
 ---------------------------------------------------------------------------------
 (7) _do_I2C_SEND_ADR_READ                                 0     0      0      22
                  _i2c_driver_TXData
 ---------------------------------------------------------------------------------
 (8) _i2c_driver_TXData                                    1     1      0      22
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_RX                                            1     1      0   19494
                                             11 BANK0      1     1      0
                   Absolute function *
             _do_I2C_DO_NACK_RESTART
                _do_I2C_DO_NACK_STOP
               _i2c_driver_getRXData
                 _i2c_driver_sendACK
                   _i2c_restartWrite *
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
                        _returnReset *
                         _returnStop *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (8) _i2c_driver_getRXData                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _do_I2C_DO_NACK_STOP                                  0     0      0       0
                _i2c_driver_sendNACK
 ---------------------------------------------------------------------------------
 (8) _do_I2C_DO_NACK_RESTART                               0     0      0       0
                _i2c_driver_sendNACK
 ---------------------------------------------------------------------------------
 (9) _i2c_driver_sendNACK                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_RESET                                         0     0      0       0
                _i2c_driver_resetBus
 ---------------------------------------------------------------------------------
 (8) _i2c_driver_resetBus                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_RCEN                                          0     0      0       0
                 _i2c_driver_startRX
 ---------------------------------------------------------------------------------
 (8) _i2c_driver_startRX                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_IDLE                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_DO_ADDRESS_NACK                               1     1      0   19494
                                             11 BANK0      1     1      0
                   Absolute function *
                _do_I2C_SEND_RESTART
                   _do_I2C_SEND_STOP
                   _i2c_restartWrite *
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
                        _returnReset *
                         _returnStop *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (8) _wr2RegCompleteHandler                                1     0      1    3852
                                             10 BANK0      1     0      1
                      _i2c_setBuffer
        _i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (8) _wr1RegCompleteHandler                                1     0      1    3852
                                             10 BANK0      1     0      1
                      _i2c_setBuffer
        _i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (8) _returnStop                                           1     0      1      76
                                             10 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (8) _returnReset                                          1     0      1     136
                                             10 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (8) _rdBlkRegCompleteHandler                              1     0      1    3874
                                             10 BANK0      1     0      1
                      _i2c_setBuffer
        _i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (8) _rd2RegCompleteHandler                                1     0      1    3852
                                             10 BANK0      1     0      1
                      _i2c_setBuffer
        _i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (8) _rd1RegCompleteHandler                                1     0      1    3852
                                             10 BANK0      1     0      1
                      _i2c_setBuffer
        _i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (9) _i2c_setDataCompleteCallback                          4     1      3    2478
                                              6 BANK0      4     1      3
                        _setCallBack
 ---------------------------------------------------------------------------------
 (4) _setCallBack                                          5     2      3     914
                                              1 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (3) _i2c_setBuffer                                        4     2      2    1352
                                              1 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (8) _i2c_restartWrite                                     1     0      1       0
                                             10 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (8) _do_I2C_SEND_STOP                                     0     0      0       0
                    _i2c_driver_stop
 ---------------------------------------------------------------------------------
 (9) _i2c_driver_stop                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _do_I2C_SEND_RESTART                                  0     0      0       0
                 _i2c_driver_restart
 ---------------------------------------------------------------------------------
 (9) _i2c_driver_restart                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (15) Absolute function(Fake)                              1     0      1       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_DO_ACK                                        0     0      0       0
                 _i2c_driver_sendACK
 ---------------------------------------------------------------------------------
 (8) _i2c_driver_sendACK                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2c_driver_start                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2c_close                                            2     2      0      24
                                              1 BANK0      2     2      0
                      _mssp_clearIRQ
                    _mssp_disableIRQ
 ---------------------------------------------------------------------------------
 (4) _mssp_disableIRQ                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _mssp_clearIRQ                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     604
                                              1 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _drawWalls                                            2     2      0     157
                                              5 BANK0      2     2      0
                            _reverse
 ---------------------------------------------------------------------------------
 (2) _reverse                                              4     4      0     157
                                              1 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _drawPixel                                            9     7      2     548
                                              1 BANK0      9     7      2
 ---------------------------------------------------------------------------------
 (1) _clearPixels                                          1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     174
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0     174
         _IOCCF4_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _IOCCF4_SetInterruptHandler                           2     0      2     174
                                              1 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _INTERRUPT_InterruptManager                          1     1      0   14790
                                              0 BANK0      1     1      0
                   Absolute function *
                    _PIN_MANAGER_IOC
                _i2c_busCollisionISR *
                          i1_i2c_ISR *
 ---------------------------------------------------------------------------------
 (13) i1_i2c_ISR                                           1     1      0   14790
                                             13 COMMON     1     1      0
                    i1_do_I2C_DO_ACK *
           i1_do_I2C_DO_ADDRESS_NACK *
           i1_do_I2C_DO_NACK_RESTART *
              i1_do_I2C_DO_NACK_STOP *
                      i1_do_I2C_IDLE *
                      i1_do_I2C_RCEN *
                     i1_do_I2C_RESET *
                        i1_do_I2C_RX *
             i1_do_I2C_SEND_ADR_READ *
            i1_do_I2C_SEND_ADR_WRITE *
              i1_do_I2C_SEND_RESTART *
         i1_do_I2C_SEND_RESTART_READ *
        i1_do_I2C_SEND_RESTART_WRITE *
                 i1_do_I2C_SEND_STOP *
                        i1_do_I2C_TX *
                  i1_do_I2C_TX_EMPTY *
                i1_i2c_driver_isNACK
                    i1_mssp_clearIRQ
 ---------------------------------------------------------------------------------
 (14) i1_mssp_clearIRQ                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i1_do_I2C_TX_EMPTY                                   1     1      0    3656
                                             10 COMMON     1     1      0
                   Absolute function *
              i1_do_I2C_SEND_RESTART
                 i1_do_I2C_SEND_STOP
                 i1_i2c_restartWrite *
                      i1_mssp_setIRQ
            i1_rd1RegCompleteHandler *
            i1_rd2RegCompleteHandler *
          i1_rdBlkRegCompleteHandler *
                      i1_returnReset *
                       i1_returnStop *
            i1_wr1RegCompleteHandler *
            i1_wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (15) i1_mssp_setIRQ                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i1_do_I2C_TX                                         3     3      0    3778
                                             10 COMMON     3     3      0
                   Absolute function *
         i1_do_I2C_SEND_RESTART_READ
        i1_do_I2C_SEND_RESTART_WRITE
                 i1_do_I2C_SEND_STOP
                i1_i2c_driver_TXData
                i1_i2c_driver_isNACK
                 i1_i2c_restartWrite *
            i1_rd1RegCompleteHandler *
            i1_rd2RegCompleteHandler *
          i1_rdBlkRegCompleteHandler *
                      i1_returnReset *
                       i1_returnStop *
            i1_wr1RegCompleteHandler *
            i1_wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (14) i1_i2c_driver_isNACK                                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (15) i1_do_I2C_SEND_RESTART_WRITE                         0     0      0       0
               i1_i2c_driver_restart
 ---------------------------------------------------------------------------------
 (15) i1_do_I2C_SEND_RESTART_READ                          0     0      0       0
               i1_i2c_driver_restart
 ---------------------------------------------------------------------------------
 (14) i1_do_I2C_SEND_ADR_WRITE                             0     0      0      22
                i1_i2c_driver_TXData
 ---------------------------------------------------------------------------------
 (14) i1_do_I2C_SEND_ADR_READ                              0     0      0      22
                i1_i2c_driver_TXData
 ---------------------------------------------------------------------------------
 (15) i1_i2c_driver_TXData                                 1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (14) i1_do_I2C_RX                                         1     1      0    3656
                                             10 COMMON     1     1      0
                   Absolute function *
           i1_do_I2C_DO_NACK_RESTART
              i1_do_I2C_DO_NACK_STOP
             i1_i2c_driver_getRXData
               i1_i2c_driver_sendACK
                 i1_i2c_restartWrite *
            i1_rd1RegCompleteHandler *
            i1_rd2RegCompleteHandler *
          i1_rdBlkRegCompleteHandler *
                      i1_returnReset *
                       i1_returnStop *
            i1_wr1RegCompleteHandler *
            i1_wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (15) i1_i2c_driver_getRXData                              0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i1_do_I2C_DO_NACK_STOP                               0     0      0       0
              i1_i2c_driver_sendNACK
 ---------------------------------------------------------------------------------
 (15) i1_do_I2C_DO_NACK_RESTART                            0     0      0       0
              i1_i2c_driver_sendNACK
 ---------------------------------------------------------------------------------
 (16) i1_i2c_driver_sendNACK                               0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i1_do_I2C_RESET                                      0     0      0       0
              i1_i2c_driver_resetBus
 ---------------------------------------------------------------------------------
 (15) i1_i2c_driver_resetBus                               0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i1_do_I2C_RCEN                                       0     0      0       0
               i1_i2c_driver_startRX
 ---------------------------------------------------------------------------------
 (15) i1_i2c_driver_startRX                                0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i1_do_I2C_IDLE                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i1_do_I2C_DO_ADDRESS_NACK                            1     1      0    3656
                                             10 COMMON     1     1      0
                   Absolute function *
              i1_do_I2C_SEND_RESTART
                 i1_do_I2C_SEND_STOP
                 i1_i2c_restartWrite *
            i1_rd1RegCompleteHandler *
            i1_rd2RegCompleteHandler *
          i1_rdBlkRegCompleteHandler *
                      i1_returnReset *
                       i1_returnStop *
            i1_wr1RegCompleteHandler *
            i1_wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (15) i1_wr2RegCompleteHandler                             1     0      1     706
                                              9 COMMON     1     0      1
                    i1_i2c_setBuffer
      i1_i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (15) i1_wr1RegCompleteHandler                             1     0      1     706
                                              9 COMMON     1     0      1
                    i1_i2c_setBuffer
      i1_i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (15) i1_returnStop                                        1     0      1      76
                                              9 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (15) i1_returnReset                                       1     0      1      28
                                              9 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (15) i1_rdBlkRegCompleteHandler                           1     0      1     728
                                              9 COMMON     1     0      1
                    i1_i2c_setBuffer
      i1_i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (15) i1_rd2RegCompleteHandler                             1     0      1     706
                                              9 COMMON     1     0      1
                    i1_i2c_setBuffer
      i1_i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (15) i1_rd1RegCompleteHandler                             1     0      1     706
                                              9 COMMON     1     0      1
                    i1_i2c_setBuffer
      i1_i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (16) i1_i2c_setDataCompleteCallback                       4     1      3     510
                                              5 COMMON     4     1      3
                      i1_setCallBack
 ---------------------------------------------------------------------------------
 (17) i1_setCallBack                                       5     2      3     206
                                              0 COMMON     5     2      3
 ---------------------------------------------------------------------------------
 (16) i1_i2c_setBuffer                                     4     2      2     174
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (15) i1_i2c_restartWrite                                  1     0      1       0
                                              9 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (15) i1_do_I2C_SEND_STOP                                  0     0      0       0
                  i1_i2c_driver_stop
 ---------------------------------------------------------------------------------
 (16) i1_i2c_driver_stop                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i1_do_I2C_SEND_RESTART                               0     0      0       0
               i1_i2c_driver_restart
 ---------------------------------------------------------------------------------
 (16) i1_i2c_driver_restart                                0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i1_do_I2C_DO_ACK                                     0     0      0       0
               i1_i2c_driver_sendACK
 ---------------------------------------------------------------------------------
 (15) i1_i2c_driver_sendACK                                0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _i2c_busCollisionISR                                 0     0      0       0
       _i2c_driver_clearBusCollision
 ---------------------------------------------------------------------------------
 (14) _i2c_driver_clearBusCollision                        0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _PIN_MANAGER_IOC                                     0     0      0       0
                         _IOCCF4_ISR
 ---------------------------------------------------------------------------------
 (14) _IOCCF4_ISR                                          0     0      0       0
                   Absolute function *
     _IOCCF4_DefaultInterruptHandler *
                    _buttonInterrupt *
 ---------------------------------------------------------------------------------
 (15) _buttonInterrupt                                     1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (15) _IOCCF4_DefaultInterruptHandler                      0     0      0       0
 ---------------------------------------------------------------------------------
 (15) Absolute function(Fake)                              1     0      1       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 17
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _IOCCF4_SetInterruptHandler
   _SYSTEM_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
       _IOCCF4_SetInterruptHandler
   _clearPixels
   _drawPixel
   _drawWalls
     _reverse
   _endGame
     _writeDisplay
       ___awdiv
       _i2c_writeNBytes
         _i2c_close
           _mssp_clearIRQ
           _mssp_disableIRQ
         _i2c_masterWrite
           _i2c_masterOperation
             _i2c_driver_start
             _i2c_poller
               _i2c_ISR
                 _do_I2C_DO_ACK *
                   _i2c_driver_sendACK
                 _do_I2C_DO_ADDRESS_NACK *
                   Absolute function(Fake) *
                   _do_I2C_SEND_RESTART *
                     _i2c_driver_restart
                   _do_I2C_SEND_STOP *
                     _i2c_driver_stop
                   _i2c_restartWrite *
                   _rd1RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _rd2RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _rdBlkRegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _returnReset *
                   _returnStop *
                   _wr1RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _wr2RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                 _do_I2C_DO_NACK_RESTART *
                   _i2c_driver_sendNACK
                 _do_I2C_DO_NACK_STOP *
                   _i2c_driver_sendNACK
                 _do_I2C_IDLE *
                 _do_I2C_RCEN *
                   _i2c_driver_startRX
                 _do_I2C_RESET *
                   _i2c_driver_resetBus
                 _do_I2C_RX *
                   Absolute function(Fake) *
                   _do_I2C_DO_NACK_RESTART *
                     _i2c_driver_sendNACK
                   _do_I2C_DO_NACK_STOP *
                     _i2c_driver_sendNACK
                   _i2c_driver_getRXData *
                   _i2c_driver_sendACK *
                   _i2c_restartWrite *
                   _rd1RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _rd2RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _rdBlkRegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _returnReset *
                   _returnStop *
                   _wr1RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _wr2RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                 _do_I2C_SEND_ADR_READ *
                   _i2c_driver_TXData
                 _do_I2C_SEND_ADR_WRITE *
                   _i2c_driver_TXData
                 _do_I2C_SEND_RESTART *
                   _i2c_driver_restart
                 _do_I2C_SEND_RESTART_READ *
                   _i2c_driver_restart
                 _do_I2C_SEND_RESTART_WRITE *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _do_I2C_TX *
                   Absolute function(Fake) *
                   _do_I2C_SEND_RESTART_READ *
                     _i2c_driver_restart
                   _do_I2C_SEND_RESTART_WRITE *
                     _i2c_driver_restart
                   _do_I2C_SEND_STOP *
                     _i2c_driver_stop
                   _i2c_driver_TXData *
                   _i2c_driver_isNACK *
                   _i2c_restartWrite *
                   _rd1RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _rd2RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _rdBlkRegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _returnReset *
                   _returnStop *
                   _wr1RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _wr2RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                 _do_I2C_TX_EMPTY *
                   Absolute function(Fake) *
                   _do_I2C_SEND_RESTART *
                     _i2c_driver_restart
                   _do_I2C_SEND_STOP *
                     _i2c_driver_stop
                   _i2c_restartWrite *
                   _mssp_setIRQ *
                   _rd1RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _rd2RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _rdBlkRegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _returnReset *
                   _returnStop *
                   _wr1RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _wr2RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                 _i2c_driver_isNACK *
                 _mssp_clearIRQ *
               _mssp_waitForEvent
             _mssp_IRQisEnabled
         _i2c_open
           _i2c_driver_open
           _i2c_driver_setBusCollisionISR
           _i2c_driver_setI2cISR
           _mssp_clearIRQ
         _i2c_setAddressNACKCallback
           _setCallBack
         _i2c_setBuffer
   _initializeDisplay
     _i2c_writeNBytes
       _i2c_close
         _mssp_clearIRQ
         _mssp_disableIRQ
       _i2c_masterWrite
         _i2c_masterOperation
           _i2c_driver_start
           _i2c_poller
             _i2c_ISR
               _do_I2C_DO_ACK *
                 _i2c_driver_sendACK
               _do_I2C_DO_ADDRESS_NACK *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_DO_NACK_RESTART *
                 _i2c_driver_sendNACK
               _do_I2C_DO_NACK_STOP *
                 _i2c_driver_sendNACK
               _do_I2C_IDLE *
               _do_I2C_RCEN *
                 _i2c_driver_startRX
               _do_I2C_RESET *
                 _i2c_driver_resetBus
               _do_I2C_RX *
                 Absolute function(Fake) *
                 _do_I2C_DO_NACK_RESTART *
                   _i2c_driver_sendNACK
                 _do_I2C_DO_NACK_STOP *
                   _i2c_driver_sendNACK
                 _i2c_driver_getRXData *
                 _i2c_driver_sendACK *
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_SEND_ADR_READ *
                 _i2c_driver_TXData
               _do_I2C_SEND_ADR_WRITE *
                 _i2c_driver_TXData
               _do_I2C_SEND_RESTART *
                 _i2c_driver_restart
               _do_I2C_SEND_RESTART_READ *
                 _i2c_driver_restart
               _do_I2C_SEND_RESTART_WRITE *
                 _i2c_driver_restart
               _do_I2C_SEND_STOP *
                 _i2c_driver_stop
               _do_I2C_TX *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART_READ *
                   _i2c_driver_restart
                 _do_I2C_SEND_RESTART_WRITE *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_driver_TXData *
                 _i2c_driver_isNACK *
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_TX_EMPTY *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_restartWrite *
                 _mssp_setIRQ *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _i2c_driver_isNACK *
               _mssp_clearIRQ *
             _mssp_waitForEvent
           _mssp_IRQisEnabled
       _i2c_open
         _i2c_driver_open
         _i2c_driver_setBusCollisionISR
         _i2c_driver_setI2cISR
         _mssp_clearIRQ
       _i2c_setAddressNACKCallback
         _setCallBack
       _i2c_setBuffer
   _shiftWalls
     _random
       ___awmod
         _rand (ARG)
           ___lmul
       _rand
         ___lmul
   _writeDisplay
     ___awdiv
     _i2c_writeNBytes
       _i2c_close
         _mssp_clearIRQ
         _mssp_disableIRQ
       _i2c_masterWrite
         _i2c_masterOperation
           _i2c_driver_start
           _i2c_poller
             _i2c_ISR
               _do_I2C_DO_ACK *
                 _i2c_driver_sendACK
               _do_I2C_DO_ADDRESS_NACK *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_DO_NACK_RESTART *
                 _i2c_driver_sendNACK
               _do_I2C_DO_NACK_STOP *
                 _i2c_driver_sendNACK
               _do_I2C_IDLE *
               _do_I2C_RCEN *
                 _i2c_driver_startRX
               _do_I2C_RESET *
                 _i2c_driver_resetBus
               _do_I2C_RX *
                 Absolute function(Fake) *
                 _do_I2C_DO_NACK_RESTART *
                   _i2c_driver_sendNACK
                 _do_I2C_DO_NACK_STOP *
                   _i2c_driver_sendNACK
                 _i2c_driver_getRXData *
                 _i2c_driver_sendACK *
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_SEND_ADR_READ *
                 _i2c_driver_TXData
               _do_I2C_SEND_ADR_WRITE *
                 _i2c_driver_TXData
               _do_I2C_SEND_RESTART *
                 _i2c_driver_restart
               _do_I2C_SEND_RESTART_READ *
                 _i2c_driver_restart
               _do_I2C_SEND_RESTART_WRITE *
                 _i2c_driver_restart
               _do_I2C_SEND_STOP *
                 _i2c_driver_stop
               _do_I2C_TX *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART_READ *
                   _i2c_driver_restart
                 _do_I2C_SEND_RESTART_WRITE *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_driver_TXData *
                 _i2c_driver_isNACK *
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_TX_EMPTY *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_restartWrite *
                 _mssp_setIRQ *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _i2c_driver_isNACK *
               _mssp_clearIRQ *
             _mssp_waitForEvent
           _mssp_IRQisEnabled
       _i2c_open
         _i2c_driver_open
         _i2c_driver_setBusCollisionISR
         _i2c_driver_setI2cISR
         _mssp_clearIRQ
       _i2c_setAddressNACKCallback
         _setCallBack
       _i2c_setBuffer

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _PIN_MANAGER_IOC *
     _IOCCF4_ISR
       Absolute function(Fake) *
       _IOCCF4_DefaultInterruptHandler *
       _buttonInterrupt *
   _i2c_busCollisionISR *
     _i2c_driver_clearBusCollision
   i1_i2c_ISR *
     i1_do_I2C_DO_ACK *
       i1_i2c_driver_sendACK
     i1_do_I2C_DO_ADDRESS_NACK *
       Absolute function(Fake) *
       i1_do_I2C_SEND_RESTART *
         i1_i2c_driver_restart
       i1_do_I2C_SEND_STOP *
         i1_i2c_driver_stop
       i1_i2c_restartWrite *
       i1_rd1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rd2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rdBlkRegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_returnReset *
       i1_returnStop *
       i1_wr1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_wr2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
     i1_do_I2C_DO_NACK_RESTART *
       i1_i2c_driver_sendNACK
     i1_do_I2C_DO_NACK_STOP *
       i1_i2c_driver_sendNACK
     i1_do_I2C_IDLE *
     i1_do_I2C_RCEN *
       i1_i2c_driver_startRX
     i1_do_I2C_RESET *
       i1_i2c_driver_resetBus
     i1_do_I2C_RX *
       Absolute function(Fake) *
       i1_do_I2C_DO_NACK_RESTART *
         i1_i2c_driver_sendNACK
       i1_do_I2C_DO_NACK_STOP *
         i1_i2c_driver_sendNACK
       i1_i2c_driver_getRXData *
       i1_i2c_driver_sendACK *
       i1_i2c_restartWrite *
       i1_rd1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rd2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rdBlkRegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_returnReset *
       i1_returnStop *
       i1_wr1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_wr2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
     i1_do_I2C_SEND_ADR_READ *
       i1_i2c_driver_TXData
     i1_do_I2C_SEND_ADR_WRITE *
       i1_i2c_driver_TXData
     i1_do_I2C_SEND_RESTART *
       i1_i2c_driver_restart
     i1_do_I2C_SEND_RESTART_READ *
       i1_i2c_driver_restart
     i1_do_I2C_SEND_RESTART_WRITE *
       i1_i2c_driver_restart
     i1_do_I2C_SEND_STOP *
       i1_i2c_driver_stop
     i1_do_I2C_TX *
       Absolute function(Fake) *
       i1_do_I2C_SEND_RESTART_READ *
         i1_i2c_driver_restart
       i1_do_I2C_SEND_RESTART_WRITE *
         i1_i2c_driver_restart
       i1_do_I2C_SEND_STOP *
         i1_i2c_driver_stop
       i1_i2c_driver_TXData *
       i1_i2c_driver_isNACK *
       i1_i2c_restartWrite *
       i1_rd1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rd2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rdBlkRegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_returnReset *
       i1_returnStop *
       i1_wr1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_wr2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
     i1_do_I2C_TX_EMPTY *
       Absolute function(Fake) *
       i1_do_I2C_SEND_RESTART *
         i1_i2c_driver_restart
       i1_do_I2C_SEND_STOP *
         i1_i2c_driver_stop
       i1_i2c_restartWrite *
       i1_mssp_setIRQ *
       i1_rd1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rd2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rdBlkRegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_returnReset *
       i1_returnStop *
       i1_wr1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_wr2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
     i1_i2c_driver_isNACK *
     i1_mssp_clearIRQ *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     27      47       5       88.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      3E       7       77.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      20       9       40.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      B3      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      B3      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Apr 11 11:51:33 2018

                __end_of_i2c_driver_restart 0D91                         i1_i2c_driver_isNACK 0EE7  
                              returnReset@p 002A                  __end_of_i2c_driver_startRX 0D97  
                                         _i 005B      __end_of_IOCCF4_DefaultInterruptHandler 0D68  
   __size_of_IOCCF4_DefaultInterruptHandler 0001              _IOCCF4_DefaultInterruptHandler 0D67  
             _do_I2C_SEND_RESTART$intlevel0 0E4E                                 __CFG_CP$OFF 0000  
                                        l95 0E81                             i1_mssp_clearIRQ 0D82  
                              ___awdiv@sign 0027                        __size_of_do_I2C_IDLE 0009  
                       _do_I2C_SEND_RESTART 0E4A                        __size_of_do_I2C_RCEN 000A  
                      __end_ofi1_returnStop 0D6B                        ?i1_i2c_driver_TXData 0070  
                               i1_do_I2C_RX 04C0                                 i1_do_I2C_TX 03EA  
                               __CFG_LVP$ON 0000                        i1_i2c_driver_sendACK 0D9D  
                                       l284 0EBC                                         l581 07E5  
                                       l574 039C                                         l655 0331  
                                       l671 049B                    i1_do_I2C_DO_NACK_RESTART 0DBD  
              __size_of_i2c_masterOperation 0024                        _returnStop$intlevel0 0DFE  
                      i1_i2c_driver_restart 0D73               i2c_setDataCompleteCallback@cb 0026  
                              ___awmod@sign 003A                    ?i1_rd2RegCompleteHandler 0079  
                     __size_of_do_I2C_RESET 000B                                __CFG_BORV$LO 0000  
                                       wreg 0009                                __CFG_IESO$ON 0000  
                      i1_i2c_driver_startRX 0D79                       __end_ofi1_returnReset 0D6D  
                      ?i1_i2c_driver_isNACK 0070                    ?i1_wr2RegCompleteHandler 0079  
           ??i1_i2c_setDataCompleteCallback 0078                      i1_i2c_driver_getRXData 0D7C  
                     __end_ofi1_mssp_setIRQ 0D82                                __CFG_ZCD$OFF 0000  
                   ??_rd2RegCompleteHandler 002B                       i1_i2c_driver_sendNACK 0DA1  
                                      l2500 0E3E                                        l3302 00E4  
                                      l2430 06B9                                        l2512 0E4E  
                                      l2506 0E46                                        l2530 0E6E  
                                      l3402 015A                                        l2540 0E04  
                                      l2524 0E66                                        l3404 0186  
                                      l2462 0FC2                                        l2470 0FD8  
                                      l2550 0EA7                                        l2518 0E56  
                                      l2544 0DF8                                        l2536 0DFE  
                                      l2560 0E76                                        l3408 018D  
                             i1returnStop@p 0079                                        l2900 02CD  
                                      l2820 05AE                                        l3294 008B  
                                      l2902 02D9                                        l2486 0FAC  
                                      l2478 0FEE                                        l2494 07B4  
                                      l5310 0613                                        l5302 0607  
                                      l2912 02F4                                        l2568 0EF7  
                                      l2576 0EB2                                        l2584 0E89  
                                      l2592 0E5E                                        l2824 05B8  
                                      l3384 012B                                        l3298 00BA  
                                      l5306 0610                                        l5330 0311  
                                      l5322 030B                                        l5402 0691  
                                      l5410 0EC4                                        l3394 0148  
                                      l3378 0117                                        l2916 02FC  
                                      l2908 02EB                                        l5316 0616  
                                      l2940 044C                                        l2932 0446  
                                      l3396 0156                                        l5326 030E  
                                      l5318 0305                                        l5422 06D8  
                                      l2942 0458                                        l2950 046D  
                                      l5344 034A                                        l5336 0314  
                                      l5424 06DE                                        l5504 02A3  
                                      l2928 043F                                        l2890 02C5  
                                      l5362 049D                                        l2954 0475  
                                      l2946 0464                                        l2884 02BA  
                                      l5380 05DF                                        l5372 04A3  
                                      l5348 047E                                        l5428 06E8  
                                      l5620 0211                                        l5374 05D9  
                                      l5366 04A0                                        l5614 020C  
                                      l5710 01AA                                        l5376 05DC  
                                      l5392 05E6                                        l5632 0223  
                                      l5608 01FD                                        l5720 01CA  
                                      l5386 05E3                                        l5394 0680  
                                      l5482 0675                                        l5474 0658  
                                      l5650 03A5                                        l5626 021E  
                                      l5722 01CD                                        l5732 01DE  
                                      l5708 01A7                                        l5638 0230  
                                      l5742 01F2                                        l5734 01E0  
                                      l5672 03D8                                        l5656 03B5  
                                      l5736 01E4                                        l5728 01DA  
                                      l5498 025E                                        l5666 03CB  
                                      l5676 03DD                                        u1405 05B9  
                                      _LATA 010C                                        _LATB 010D  
                                      u1415 05C0                                        _LATC 010E  
                                      u2065 017B                                        u1515 02D0  
                                      u1535 02DA                                        u1615 044F  
                                      u1545 02E4                                        u1465 052D  
                                      u1715 0540                                        u1555 02EC  
                                      u1635 045E                                        u1725 0546  
                                      u1645 0465                                        u1814 0068  
                                      u1815 0066                                        u1735 0553  
                                      u1904 00F1                                        u1824 007D  
                                      u1905 00EF                                        u1825 007B  
                                      u1745 0559                                        u1914 00FD  
                                      u1915 00FB                                        u1755 0566  
                                      u1844 0099                                        u1845 0097  
                                      u1854 00AC                                        u1855 00AA  
                                      u1874 00C6                                        u1875 00C4  
                                      u1884 00D2                                        u1885 00D0  
                                      u4827 03BE                                        u4837 0EC0  
                      ?_do_I2C_SEND_RESTART 0070                                        _PLLR 04D6  
                                      _WPUA 020C                                        _WPUB 020D  
                                      _WPUC 020E                     ??_wr2RegCompleteHandler 002B  
                              __CFG_WRT$OFF 0000                               __CFG_FCMEN$ON 0000  
                     i1_i2c_driver_resetBus 0D68           __size_of_do_I2C_SEND_RESTART_READ 0008  
                                      _fall 0064                   ?_do_I2C_SEND_RESTART_READ 0070  
                           ??_mssp_clearIRQ 0021                                        _main 0192  
                                      _rand 04FE                   __size_of_do_I2C_SEND_STOP 0008  
                    __size_of_do_I2C_DO_ACK 0008                                        fsr0h 0005  
                                      fsr1h 0007                                        indf0 0000  
                                      fsr0l 0004                                        indf1 0001  
                                      fsr1l 0006                                        btemp 007E  
                         ??i1_do_I2C_DO_ACK 0070                               __CFG_BOREN$ON 0000  
                     ?_do_I2C_SEND_ADR_READ 0070                    __size_of_i2c_writeNBytes 0026  
                                      start 002E                               _i2c_setBuffer 0F93  
                             __CFG_MCLRE$ON 0000                             __end_of_i2c_ISR 06A2  
          __size_of_rdBlkRegCompleteHandler 001D                    ??_do_I2C_DO_NACK_RESTART 0021  
                             i1_do_I2C_IDLE 0DD2                               i1_do_I2C_RCEN 0DE2  
                              _do_I2C_RESET 0EA3                              i1returnReset@p 0079  
                             __CFG_PLLEN$ON 0000              __size_of_OSCILLATOR_Initialize 000A  
               i2c_setAddressNACKCallback@p 0028                       ??i1_i2c_driver_TXData 0070  
             __end_of_OSCILLATOR_Initialize 0E85                         __size_of_IOCCF4_ISR 000D  
                     ?i1_i2c_driver_sendACK 0070                                       ?_main 0070  
                                     ?_rand 002D                             __end_of___awdiv 0301  
                             __CFG_WDTE$OFF 0000                             __end_of___awmod 047A  
                  __size_of_mssp_disableIRQ 0003                             ___awdiv@divisor 0021  
                                     i1l490 0010                                       i1l493 001E  
                                     i1l655 0415                                       i1l671 04DA  
                                     i1l498 0029                             ___awdiv@counter 0026  
                     ?i1_i2c_driver_restart 0070                                       _TRISA 008C  
                                     _TRISB 008D                                       _TRISC 008E  
                     ?i1_i2c_driver_startRX 0070                             __end_of_endGame 03EA  
                       ___lmul@multiplicand 0025                       ??i1_i2c_driver_isNACK 0070  
                               i2c_open@ret 0025                                 _writebuffer 00CD  
                        __size_ofi1_i2c_ISR 0020                     __end_of_PIN_MANAGER_IOC 0DE2  
                                     _randx 0060                        _i2c_driver_getRXData 0D97  
              ?i1_do_I2C_SEND_RESTART_WRITE 0070                  ?_do_I2C_SEND_RESTART_WRITE 0070  
                                     _score 0053                                       _walls 0047  
                                     _start 005D                       ??_do_I2C_SEND_RESTART 0021  
                                     pclath 000A                             __end_of_reverse 0571  
                _i2c_driver_busCollisionISR 0057                      ?_do_I2C_SEND_ADR_WRITE 0070  
                                     status 0003                                       wtemp0 007E  
                     __size_of_writeDisplay 005A                          i2c_driver_TXData@d 0021  
                 __size_of_i2c_driver_start 0003                              ?_i2c_setBuffer 0021  
                              ?_setCallBack 0021                     __end_ofi1_mssp_clearIRQ 0D85  
                             _fsmStateTable 0120                             __initialization 0030  
                      __size_of_clearPixels 0012              __size_ofi1_do_I2C_SEND_RESTART 0004  
                                _i2c_poller 0EC4               __end_ofi1_do_I2C_SEND_RESTART 0DB1  
                                _i2c_status 00A0                              ?i1_do_I2C_IDLE 0070  
                              __end_of_main 01F7                                __end_of_rand 053A  
                            ?i1_do_I2C_RCEN 0070                  __end_ofi1_do_I2C_SEND_STOP 0DB5  
                          __end_of_i2c_open 039F                        _i2c_driver_setI2cISR 0E12  
                            __CFG_LPBOR$OFF 0000                 ?_INTERRUPT_InterruptManager 0070  
           __end_ofi1_rd2RegCompleteHandler 0F81                               setCallBack@cb 0021  
                            i1_do_I2C_RESET 0E24                               _do_I2C_DO_ACK 0E5A  
                                    ??_main 0045                                      ??_rand 002F  
                         ?_i2c_restartWrite 002A             __end_ofi1_wr2RegCompleteHandler 0F51  
                              i2c_close@ret 0022                             _i2c_driver_open 0E99  
                        ??_i2c_restartWrite 002B                             _i2c_driver_stop 0D91  
                   ?_do_I2C_DO_ADDRESS_NACK 0070                      ?i1_i2c_driver_sendNACK 0070  
                              _writeDisplay 0255                       ?_i2c_driver_getRXData 0070  
              ??_IOCCF4_SetInterruptHandler 0023                            ___awdiv@dividend 0023  
           i1i2c_setDataCompleteCallback@cb 0075                                      _ANSELA 018C  
                                    _ANSELB 018D                                      _ANSELC 018E  
                                    _BORCON 0116                     ?i1_do_I2C_SEND_ADR_READ 0070  
                    ?i1_i2c_driver_resetBus 0070                                      _RB4PPS 0E9C  
                                    _RB6PPS 0E9E                                      i1l3012 0DA5  
                                    i1l3006 07E8                                      i1l3030 0DB1  
                                    i1l3024 0DAD                                      _ODCONA 028C  
                                    i1l3018 0DA9                                      i1l3042 0DBD  
                                    _ODCONB 028D                                      _ODCONC 028E  
                                    i1l3052 0D6B                                      i1l3036 0DB9  
                                    i1l3048 0D69                                      i1l3056 0002  
                                    i1l3144 0E24                                      i1l3154 0DD2  
                                    i1l3162 0E32                                      i1l3170 0E2B  
                                    i1l3178 0DE2                                      i1l3186 0DB5  
                                    i1l2762 0701                                      i1l5510 0716  
                                    i1l5520 071C                                      i1l5514 0719  
                                    i1l5506 070F                                      i1l5530 03F3  
                                    i1l5522 03EA                                      i1l5540 03F9  
                                    i1l2974 0F51                                      i1l2982 0F61  
                                    i1l2990 0F71                                      i1l5534 03F6  
                                    i1l5526 03F0                                      i1l5552 04C0  
                                    i1l5570 04DF                                      i1l5580 0630  
                                    i1l5548 042E                                      i1l2998 0F41  
                                    i1l5590 0637                                      i1l5566 04DC  
                                    i1l5488 0F09                                      i1l5584 0633  
                                    i1l5576 04E2                                      i1l5578 062D  
                                    i1l5596 063A                                      i1l5694 0762  
                                    i1l5686 0752               ??i1_do_I2C_SEND_RESTART_WRITE 0070  
                        __size_of_i2c_close 001B                                      _OSCCON 0099  
                   i1_rd1RegCompleteHandler 0F61                      ??_do_I2C_SEND_ADR_READ 0022  
                  rdBlkRegCompleteHandler@p 002A                                   ??_i2c_ISR 002E  
                   i1_wr1RegCompleteHandler 0F51                 ??i1_rdBlkRegCompleteHandler 007A  
                            __CFG_PWRTE$OFF 0000                         _do_I2C_RX$intlevel0 047E  
                     __size_ofi1_returnStop 0002                 __end_of_do_I2C_DO_NACK_STOP 0E6A  
                         __end_ofi1_i2c_ISR 0772         __end_of_i2c_setDataCompleteCallback 0F19  
               _i2c_setDataCompleteCallback 0F0C                                      ___lmul 05A5  
                           _i2c_masterWrite 0DC9                                   ??___awdiv 0025  
                            __CFG_STVREN$ON 0000                                   ??___awmod 0038  
           __size_of_do_I2C_DO_NACK_RESTART 0008                       ?_i2c_driver_setI2cISR 0021  
                         ??_i2c_writeNBytes 0035                      __end_ofi1_do_I2C_RESET 0E2B  
                           i1_i2c_setBuffer 0F33                      ??i1_i2c_driver_sendACK 0070  
                                    _random 0772                                   ??_endGame 003B  
                          ___awdiv@quotient 0028                              ?_do_I2C_DO_ACK 0070  
                           ___awmod@divisor 0034                             _buttonInterrupt 0ECF  
               __size_ofi1_i2c_restartWrite 0002                             ___awmod@counter 0039  
                    ??i1_i2c_driver_restart 0070         __size_of_IOCCF4_SetInterruptHandler 0006  
                    ??i1_i2c_driver_startRX 0070              __end_of_do_I2C_DO_ADDRESS_NACK 062D  
               ?_i2c_setAddressNACKCallback 0026                                ?_returnReset 002A  
                                 ??_reverse 0021               _do_I2C_DO_NACK_STOP$intlevel0 0E66  
                i1rdBlkRegCompleteHandler@p 0079           __size_ofi1_do_I2C_DO_ADDRESS_NACK 0023  
                              ?_mssp_setIRQ 0070              __end_ofi1_do_I2C_SEND_ADR_READ 0E3A  
                         ??_mssp_disableIRQ 0021  IOCCF4_SetInterruptHandler@InterruptHandler 0021  
                 ?i1_do_I2C_DO_ADDRESS_NACK 0070                            ?_PIN_MANAGER_IOC 0070  
                              ??_IOCCF4_ISR 0071                           i1_do_I2C_TX_EMPTY 062D  
                         _SYSTEM_Initialize 0DEE                     __end_of__initialization 0057  
                           ??_i2c_setBuffer 0023              _do_I2C_SEND_ADR_READ$intlevel0 0EF7  
                          _do_I2C_SEND_STOP 0E52                                i1_returnStop 0D69  
                     i1_do_I2C_DO_NACK_STOP 0DB9                          __size_of_do_I2C_RX 0046  
                        __size_of_do_I2C_TX 0050                          ?i1_do_I2C_TX_EMPTY 0070  
                        ?_SYSTEM_Initialize 0070           _rdBlkRegCompleteHandler$intlevel0 07B4  
                       _i2c_masterOperation 06C7                    __size_of_do_I2C_TX_EMPTY 002E  
                          ?i1_mssp_clearIRQ 0070                             ??i1_do_I2C_IDLE 0070  
                           ??i1_do_I2C_RCEN 0070                     _rdBlkRegCompleteHandler 07B0  
                               ?_i2c_poller 0070                              __pcstackCOMMON 0070  
                ??i1_do_I2C_DO_NACK_RESTART 0070                         _do_I2C_TX$intlevel0 0305  
                       ??i1_do_I2C_TX_EMPTY 007A                                __pidataBANK0 0DD7  
                              __pidataBANK2 0732                         ??_SYSTEM_Initialize 0023  
                           ?i1_do_I2C_RESET 0070                     __end_of_i2c_driver_open 0EA3  
                   __end_of_i2c_driver_stop 0D94                           __end_of_i2c_close 07E8  
                              ?i1_do_I2C_RX 0070                                ?i1_do_I2C_TX 0070  
                            drawPixel@color 0022                         i1i2c_restartWrite@p 0079  
                        __end_of_IOCCF4_ISR 0F0C                          _i2c_driver_sendACK 0DC1  
                 i1_rdBlkRegCompleteHandler 07E8                        ?_i2c_masterOperation 0070  
            i1i2c_setDataCompleteCallback@p 0077                     ?i1_i2c_driver_getRXData 0070  
                            _OPTION_REGbits 0095                ??i1_do_I2C_SEND_RESTART_READ 0070  
                        _i2c_driver_restart 0D8E                                 random@lower 003E  
                    __size_ofi1_setCallBack 0024                          _i2c_driver_startRX 0D94  
                               random@upper 003B                      ??_i2c_driver_getRXData 0021  
                           i1setCallBack@cb 0070                    i1rd1RegCompleteHandler@p 0079  
                           i1_do_I2C_DO_ACK 0DB5                          __size_of_drawPixel 00B6  
                        __size_of_drawWalls 001F                         ?_i2c_driver_sendACK 0070  
                            setCallBack@idx 0025                   __end_ofi1_do_I2C_TX_EMPTY 0656  
                    _do_I2C_DO_NACK_RESTART 0E6A                              _do_I2C_TX$1026 002C  
                 __end_of_SYSTEM_Initialize 0DF4                   ??i1_rd1RegCompleteHandler 007A  
                       ?_i2c_driver_restart 0070                                  __pbssBANK0 0047  
                                __pbssBANK1 00A0                   ??i1_wr1RegCompleteHandler 007A  
                       ?_i2c_driver_startRX 0070              __size_of_rd2RegCompleteHandler 0016  
                                 ?_i2c_open 0070               __end_of_rd2RegCompleteHandler 1000  
            __size_of_wr2RegCompleteHandler 0016            __size_ofi1_rd2RegCompleteHandler 0010  
             __end_of_wr2RegCompleteHandler 0FBE                     __end_of_i2c_masterWrite 0DCD  
                  i1wr1RegCompleteHandler@p 0079                            _i2c_driver_start 0D8B  
                     _rd1RegCompleteHandler 0FD4                     __end_ofi1_i2c_setBuffer 0F41  
          __size_ofi1_wr2RegCompleteHandler 0010                       _do_I2C_IDLE$intlevel0 0E76  
                     _wr1RegCompleteHandler 0FBE                __size_of_i2c_busCollisionISR 0003  
           _wr1RegCompleteHandler$intlevel0 0FC2             _rd1RegCompleteHandler$intlevel0 0FD8  
                   __end_of_buttonInterrupt 0EDB                                  __pmaintext 0192  
                             ??_do_I2C_IDLE 0021                        __size_of_setCallBack 0025  
                             ??_do_I2C_RCEN 0021                        ??_i2c_driver_sendACK 0021  
                    ??_i2c_driver_setI2cISR 0023                                     ?___lmul 0021  
                           __CFG_PPS1WAY$ON 0000                             ??_do_I2C_DO_ACK 0021  
                                __pintentry 0004                        ??_i2c_driver_restart 0021  
              __size_of_i2c_driver_sendNACK 0004                        ??_i2c_driver_startRX 0021  
                            ___lmul@product 0029                                     ?_random 003B  
                       i2c_setBuffer@buffer 0024                           _initializeDisplay 01F7  
              __size_of_i2c_driver_resetBus 0001              __end_ofi1_i2c_driver_getRXData 0D7F  
            ?_i2c_driver_setBusCollisionISR 0021                       ??_i2c_masterOperation 002F  
                         __end_of_do_I2C_RX 04C0                           __end_of_do_I2C_TX 0351  
                                _createWall 005F                          ?_initializeDisplay 0070  
                  ?i1_do_I2C_SEND_ADR_WRITE 0070                             __CFG_WDTCCS$SWC 0000  
                                   _OSCTUNE 0098          __end_of_IOCCF4_SetInterruptHandler 0DEE  
                _IOCCF4_SetInterruptHandler 0DE8                                     _SSP1ADD 0212  
                                   _SSP1BUF 0211                                     _SSP1MSK 0213  
                       __size_of_i2c_poller 000B                     ??_do_I2C_SEND_ADR_WRITE 0022  
       _do_I2C_SEND_RESTART_WRITE$intlevel0 0E46                         ??_initializeDisplay 0036  
               ??_do_I2C_SEND_RESTART_WRITE 0021                      ?i1_do_I2C_DO_NACK_STOP 0070  
                         _mssp_IRQisEnabled 0E8F                                  ??_i2c_open 0023  
                                   _i2c_ISR 067C                   ??_rdBlkRegCompleteHandler 002B  
                         _mssp_waitForEvent 0EB9                          ?_mssp_IRQisEnabled 0070  
                     __end_of_mssp_clearIRQ 0D88                       _returnReset$intlevel0 0E04  
                     _do_I2C_RCEN$intlevel0 0E89                               i1_setCallBack 06EB  
                        ?_mssp_waitForEvent 0070            _do_I2C_DO_ADDRESS_NACK$intlevel0 0607  
               __end_ofi1_i2c_driver_TXData 0DD2                           __end_of_drawPixel 0111  
                         __end_of_drawWalls 07B0         __size_of_i2c_setAddressNACKCallback 000D  
                    __size_ofi1_returnReset 0002                         ??_mssp_IRQisEnabled 0021  
                                   ___awdiv 02AF                             __size_of___lmul 0030  
                                   ___awmod 0434                   __end_of_initializeDisplay 0255  
                    __size_ofi1_mssp_setIRQ 0003                           ??_do_I2C_TX_EMPTY 002B  
                          ?_i2c_driver_open 0070                         ??_mssp_waitForEvent 0021  
                          ?_i2c_driver_stop 0070                                     _endGame 039F  
                    i2c_writeNBytes@address 0035                             __size_of_random 001F  
               __end_ofi1_i2c_driver_isNACK 0EF3                     __end_ofi1_do_I2C_DO_ACK 0DB9  
                                   __ptext1 0111                                     __ptext2 0772  
                                   __ptext3 04FE                                     __ptext4 05A5  
                                   __ptext5 0434                                     __ptext6 01F7  
                                   __ptext7 039F                                     __ptext8 0255  
                                   __ptext9 0656                         __end_of_do_I2C_IDLE 0E7B  
                       __end_of_do_I2C_RCEN 0E8F                                     _hiscore 0051  
                     _OSCILLATOR_Initialize 0E7B                     ??i1_i2c_driver_sendNACK 0070  
               __end_of_do_I2C_SEND_RESTART 0E52                            ___awmod@dividend 0036  
                  ??_PIN_MANAGER_Initialize 0023                                   _IOCCFbits 0399  
                    i2c_masterOperation@ret 0031                     ??i1_i2c_driver_resetBus 0070  
                                   _reverse 053A                                   _IOCCNbits 0398  
                                 _IOCCPbits 0397                                     _topHalf 0059  
                        i1_do_I2C_SEND_STOP 0DB1                  _do_I2C_SEND_STOP$intlevel0 0E56  
                __size_ofi1_do_I2C_TX_EMPTY 0029                    _do_I2C_SEND_RESTART_READ 0E3A  
                __size_of_SYSTEM_Initialize 0006                                     clrloop0 0E19  
                 __end_of_mssp_IRQisEnabled 0E99                        __size_of_returnReset 0006  
                      end_of_initialization 0057                        __size_of_mssp_setIRQ 0003  
                 __end_of_mssp_waitForEvent 0EC4                   __size_of_i2c_restartWrite 0006  
                                   init_ram 0E1E                         ?i1_do_I2C_SEND_STOP 0070  
                    ?_rd1RegCompleteHandler 002A                                     initloop 0E1F  
                           _i2c_writeNBytes 0656                               ??_clearPixels 0021  
                          ?_i2c_masterWrite 0070                      ?_wr1RegCompleteHandler 002A  
                            ?i1_setCallBack 0070                                  _wallHeight 005A  
                                _shiftWalls 0111                            ?i1_i2c_setBuffer 0070  
                          ?_buttonInterrupt 0070                   _do_I2C_SEND_RESTART_WRITE 0E42  
                     i1_do_I2C_SEND_RESTART 0DAD            __end_ofi1_do_I2C_DO_ADDRESS_NACK 0732  
           __end_ofi1_do_I2C_SEND_ADR_WRITE 0E32                             _mssp_disableIRQ 0D88  
                                 i1_i2c_ISR 0752                        ??i1_do_I2C_SEND_STOP 0070  
                                _returnStop 0DFA             __end_of_rdBlkRegCompleteHandler 07CD  
                  __end_of_do_I2C_SEND_STOP 0E5A          __end_ofi1_do_I2C_SEND_RESTART_READ 0DA9  
                i1_do_I2C_SEND_RESTART_READ 0DA5                                   _SSPDATPPS 0E21  
                                 _SSPCLKPPS 0E20                            __CFG_FOSC$INTOSC 0000  
                      __size_ofi1_do_I2C_RX 003E                        __size_ofi1_do_I2C_TX 004A  
                   _IOCCF4_InterruptHandler 0065        __size_of_i2c_setDataCompleteCallback 000D  
                            _gravityCounter 005C                               i1_returnReset 0D6B  
                               returnStop@p 002A                               i1_mssp_setIRQ 0D7F  
        __size_ofi1_rdBlkRegCompleteHandler 0017                i2c_setDataCompleteCallback@p 0028  
                   i1_rd2RegCompleteHandler 0F71                                  drawPixel@x 0029  
                                drawPixel@y 0021                     i1_wr2RegCompleteHandler 0F41  
             __size_of_do_I2C_SEND_ADR_READ 000C                            ??i1_do_I2C_RESET 0070  
                              ??_i2c_poller 002F                                 _do_I2C_IDLE 0E72  
                               _do_I2C_RCEN 0E85                  __end_ofi1_i2c_restartWrite 0004  
                       __end_of_clearPixels 0F93                  __size_of_initializeDisplay 005E  
                            __end_of___lmul 05D5        __end_of_i2c_driver_clearBusCollision 0D70  
     __size_of_i2c_driver_clearBusCollision 0003                _i2c_driver_clearBusCollision 0D6D  
                                ?i1_i2c_ISR 0070                            ?i1_do_I2C_DO_ACK 0070  
                    ?_OSCILLATOR_Initialize 0070               __size_ofi1_i2c_driver_sendACK 0004  
                            __end_of_random 0791                __size_of_do_I2C_DO_NACK_STOP 0008  
                  __end_of_i2c_driver_start 0D8E               __size_ofi1_i2c_driver_restart 0003  
                   ?_do_I2C_DO_NACK_RESTART 0070                         start_initialization 0030  
                                 _i2c_close 07CD               __size_ofi1_i2c_driver_startRX 0003  
                       _i2c_busCollisionISR 0D70             __size_of_PIN_MANAGER_Initialize 0034  
                            ?i1_returnReset 0079                     __end_of_i2c_writeNBytes 067C  
       __end_ofi1_do_I2C_SEND_RESTART_WRITE 0DAD                 i1_do_I2C_SEND_RESTART_WRITE 0DA9  
                            ?i1_mssp_setIRQ 0070                  __size_of_mssp_IRQisEnabled 000A  
                              setCallBack@p 0023                          __end_of_i2c_poller 0ECF  
                       _i2c_driver_sendNACK 0DC5                             i2c_open@address 0024  
                   i2c_setBuffer@bufferSize 0021                  __size_of_mssp_waitForEvent 000B  
                    rd1RegCompleteHandler@p 002A                         _i2c_driver_resetBus 07FF  
                           ??i1_setCallBack 0073                       __end_of_i2c_setBuffer 0FA8  
                         __size_of_i2c_open 004E                    __size_of_PIN_MANAGER_IOC 0006  
     __end_ofi1_i2c_setDataCompleteCallback 0EE7      __size_ofi1_i2c_setDataCompleteCallback 000C  
             i1_i2c_setDataCompleteCallback 0EDB                                 ?_shiftWalls 0070  
                      ?_i2c_busCollisionISR 0070                     __end_of_mssp_disableIRQ 0D8B  
                          i1setCallBack@idx 0074                            i1_do_I2C_TX$1026 007B  
                     __end_ofi1_do_I2C_IDLE 0DD7                                    ??___lmul 0029  
                     __end_ofi1_do_I2C_RCEN 0DE8                   i1i2c_setBuffer@bufferSize 0070  
                    ?i1_do_I2C_SEND_RESTART 0070                      wr1RegCompleteHandler@p 002A  
                      ?_i2c_driver_sendNACK 0070                               ?_do_I2C_RESET 0070  
                               __pdataBANK0 0060                                 __pdataBANK2 0120  
                 _do_I2C_TX_EMPTY$intlevel0 05D9                                    ??_random 003C  
                  __size_ofi1_mssp_clearIRQ 0003                                 ?_returnStop 002A  
                      ?_i2c_driver_resetBus 0070                           _i2c_driver_TXData 0E06  
            __end_of_do_I2C_DO_NACK_RESTART 0E72               ?_i2c_driver_clearBusCollision 0070  
                         _i2c_driver_i2cISR 0055                    i1_do_I2C_DO_ADDRESS_NACK 070F  
                        ?_i2c_driver_TXData 0070                                  ?_i2c_close 0070  
                                 ___latbits 0002                               __pcstackBANK0 0020  
         __size_ofi1_do_I2C_DO_NACK_RESTART 0004                    i1rd2RegCompleteHandler@p 0079  
                                 _do_I2C_RX 047A                   ?i1_do_I2C_DO_NACK_RESTART 0070  
                                 _do_I2C_TX 0301                           _i2c_driver_isNACK 0F19  
                   ??i1_do_I2C_DO_NACK_STOP 0070                 ?_IOCCF4_SetInterruptHandler 0021  
                 ??i1_rd2RegCompleteHandler 007A               __size_of_i2c_driver_getRXData 0003  
                        ?_i2c_driver_isNACK 0070                         ??_i2c_driver_TXData 0021  
            __size_of_do_I2C_SEND_ADR_WRITE 000B                   ??i1_wr2RegCompleteHandler 007A  
             __end_of_do_I2C_SEND_ADR_WRITE 0EB9             ??_i2c_driver_setBusCollisionISR 0023  
                            i1setCallBack@p 0072                            _i2c_restartWrite 0DF4  
                _i2c_restartWrite$intlevel0 0DF8                                    ?_i2c_ISR 0070  
           _do_I2C_SEND_ADR_WRITE$intlevel0 0EB2            __size_ofi1_do_I2C_SEND_ADR_WRITE 0007  
                           _do_I2C_TX_EMPTY 05D5                               ??_setCallBack 0024  
                                 __pnvBANK0 0065                    i1wr2RegCompleteHandler@p 0079  
                     _rd2RegCompleteHandler 0FEA                                 _clearPixels 0F81  
                       ??_i2c_driver_isNACK 0021                       ??_i2c_busCollisionISR 0070  
                    _PIN_MANAGER_Initialize 0571                       _wr2RegCompleteHandler 0FA8  
               __size_of_i2c_driver_sendACK 0004                              ??_do_I2C_RESET 0021  
                                  ?___awdiv 0021                                   __ptext100 07E8  
                                 __ptext101 0F71                                   __ptext110 0D9D  
                                 __ptext102 0F61                                   __ptext111 0D70  
                                 __ptext103 0F51                                   __ptext112 0D6D  
                                 __ptext104 0F41                                   __ptext113 0DDC  
                                 __ptext105 0EDB                                   __ptext114 0EFF  
                                 __ptext106 06EB                                   __ptext115 0D67  
                                 __ptext107 0F33                                   __ptext116 0ECF  
                                 __ptext108 0D76                       ??_i2c_driver_sendNACK 0021  
                                 __ptext109 0D73                                    ?___awmod 0034  
               __end_of_i2c_masterOperation 06EB                    ??_do_I2C_DO_ADDRESS_NACK 002B  
             __size_of_i2c_driver_setI2cISR 0006                 __size_of_i2c_driver_restart 0003  
                 __end_of_i2c_driver_TXData 0E0C                                    ?_endGame 0070  
                     __end_of_do_I2C_DO_ACK 0E62                       ??_i2c_driver_resetBus 0021  
               __size_of_i2c_driver_startRX 0003                                 ??i1_i2c_ISR 007D  
              ??_INTERRUPT_InterruptManager 0020                                   _drawPixel 005B  
                                 _drawWalls 0791                                   _elevation 005E  
                ??_do_I2C_SEND_RESTART_READ 0021                    ??i1_do_I2C_SEND_ADR_READ 0071  
                           ??i1_returnReset 007A                   __end_of_i2c_driver_isNACK 0F26  
                  ?i1_rd1RegCompleteHandler 0079          __size_of_do_I2C_SEND_RESTART_WRITE 0008  
                           ??i1_mssp_setIRQ 0070              __size_ofi1_i2c_driver_sendNACK 0004  
             __end_ofi1_i2c_driver_sendNACK 0DA5                         __size_of_shiftWalls 0081  
                                  ?_reverse 0070                    ?i1_wr1RegCompleteHandler 0079  
                                ?_do_I2C_RX 0070                                  ?_do_I2C_TX 0070  
                             ?_writeDisplay 0070                            ?_i2c_writeNBytes 0032  
            __size_ofi1_i2c_driver_resetBus 0001               __end_ofi1_i2c_driver_resetBus 0D69  
                   ??_rd1RegCompleteHandler 002B                           _i2c_ISR$intlevel0 0680  
          ??_IOCCF4_DefaultInterruptHandler 0070             ?_IOCCF4_DefaultInterruptHandler 0070  
                   ??_wr1RegCompleteHandler 002B                       i2c_driver_setI2cISR@f 0021  
                       __size_of_returnStop 0006                                   clear_ram0 0E18  
                                  _PIE1bits 0090                                    _PIE2bits 0091  
       __size_of_INTERRUPT_InterruptManager 002A                                    _PIR1bits 0010  
                                  _PIR2bits 0011                            ?_mssp_disableIRQ 0070  
                      __CFG_WDTCPS$WDTCPS1F 0000                                    _SSP1CON1 0215  
                                  _SSP1CON2 0216                ?_i2c_setDataCompleteCallback 0026  
            ?i1_i2c_setDataCompleteCallback 0075                                    _SSP1STAT 0214  
                       __end_of_setCallBack 06C7                           ??_PIN_MANAGER_IOC 0071  
                                ?_drawPixel 0021                                  ?_drawWalls 0070  
              __size_ofi1_i2c_driver_TXData 0005                           i1_i2c_driver_stop 0D76  
              i2c_setAddressNACKCallback@cb 0026                           ?_do_I2C_SEND_STOP 0070  
               ?i1_do_I2C_SEND_RESTART_READ 0070                          ?i1_i2c_driver_stop 0070  
                               ??_i2c_close 0021                               ??_returnReset 002B  
                        ??_do_I2C_SEND_STOP 0021                      __size_of_mssp_clearIRQ 0003  
                            ??_writeDisplay 0036                    __size_of_i2c_driver_open 000A  
                         ??i1_mssp_clearIRQ 0070                ??_i2c_setAddressNACKCallback 0029  
                  __size_of_i2c_driver_stop 0003           __end_of_do_I2C_SEND_RESTART_WRITE 0E4A  
              __size_ofi1_i2c_driver_isNACK 000C                               ??_mssp_setIRQ 0021  
            ??_i2c_driver_clearBusCollision 0070                     __end_of_do_I2C_TX_EMPTY 0603  
                         ___lmul@multiplier 0021                    ?_rdBlkRegCompleteHandler 002A  
                       ??i1_i2c_driver_stop 0070                __size_of_do_I2C_SEND_RESTART 0008  
                   _do_I2C_DO_ACK$intlevel0 0E5E                                    _i2c_open 0351  
                             ?i1_returnStop 0079                      ?_rd2RegCompleteHandler 002A  
                       _do_I2C_DO_NACK_STOP 0E62                            __size_of_i2c_ISR 0026  
                    ?_wr2RegCompleteHandler 002A             _wr2RegCompleteHandler$intlevel0 0FAC  
           _rd2RegCompleteHandler$intlevel0 0FEE       __end_of_i2c_driver_setBusCollisionISR 0E12  
    __size_of_i2c_driver_setBusCollisionISR 0006               _i2c_driver_setBusCollisionISR 0E0C  
                       i2c_writeNBytes@data 0032                                ?_do_I2C_IDLE 0070  
                  ??i1_i2c_driver_getRXData 0070                                ?_do_I2C_RCEN 0070  
                   ??_OSCILLATOR_Initialize 0021                            __size_of___awdiv 0052  
                  __size_of_i2c_masterWrite 0004                            __size_of___awmod 0046  
                __size_of_i2c_driver_TXData 0006             __size_of_do_I2C_DO_ADDRESS_NACK 002A  
                 __end_ofi1_i2c_driver_stop 0D79                       i1i2c_setBuffer@buffer 0073  
             ??_i2c_setDataCompleteCallback 0029             __end_ofi1_rd1RegCompleteHandler 0F71  
                  __size_ofi1_i2c_setBuffer 000E                               ??i1_do_I2C_RX 007A  
                             ??i1_do_I2C_TX 007A          _do_I2C_SEND_RESTART_READ$intlevel0 0E3E  
               __size_ofi1_do_I2C_SEND_STOP 0004                            __size_of_endGame 004B  
                  __size_of_buttonInterrupt 000C             __end_ofi1_wr1RegCompleteHandler 0F61  
                      ?_do_I2C_DO_NACK_STOP 0070                __end_of_do_I2C_SEND_ADR_READ 0EFF  
           __size_ofi1_do_I2C_SEND_ADR_READ 0008                  __size_of_i2c_driver_isNACK 000D  
                         ?_i2c_driver_start 0070                          i1_i2c_restartWrite 0002  
                               ??_do_I2C_RX 002B                                 ??_do_I2C_TX 002B  
                        ??_i2c_driver_start 0021                                    __ptext10 0F26  
                                  __ptext11 0351                                    __ptext20 067C  
                                  __ptext12 0E12                                    __ptext21 047A  
                                  __ptext13 0E0C                                    __ptext30 0E52  
                                  __ptext22 0301                                    __ptext14 0E99  
                                  __ptext31 0E4A                                    __ptext23 0603  
                                  __ptext15 0DC9                                    __ptext40 0D97  
                                  __ptext32 0E42                                    __ptext24 0E6A  
                                  __ptext16 06C7                                    __ptext41 0DC5  
                                  __ptext33 0E3A                                    __ptext25 0E62  
                                  __ptext17 0E8F                                    __ptext50 0DF4  
                                  __ptext42 07FF                                    __ptext34 0E72  
                                  __ptext26 0E5A                                    __ptext18 0EC4  
                                  __ptext51 0FA8                                    __ptext43 0D94  
                                  __ptext35 0EA3                                    __ptext27 0E85  
                                  __ptext19 0EB9                                    __ptext60 0D88  
                                  __ptext52 0F0C                                    __ptext44 0E00  
                                  __ptext36 05D5                                    __ptext28 0EAE  
                                  __ptext61 0D85                                    __ptext53 06A2  
                                  __ptext45 0DFA                                    __ptext37 0D9A  
                                  __ptext29 0EF3                                    __ptext70 0E7B  
                                  __ptext62 02AF                                    __ptext54 0F93  
                                  __ptext46 07B0                                    __ptext38 0F19  
                                  __ptext63 0791                                    __ptext55 0D91  
                                  __ptext47 0FEA                                    __ptext39 0E06  
                                  __ptext80 0DE2                                    __ptext72 0752  
                                  __ptext64 053A                                    __ptext56 0D8E  
                                  __ptext48 0FD4                                    __ptext81 0E2B  
                                  __ptext73 0D82                                    __ptext65 005B  
                                  __ptext57 0DC1                                    __ptext49 0FBE  
                                  __ptext90 0D7F                                    __ptext82 0E32  
                                  __ptext74 04C0                                    __ptext66 0F81  
                                  __ptext58 0D8B                                    __ptext91 0EE7  
                                  __ptext83 0DB1                                    __ptext75 03EA  
                                  __ptext67 0DEE                                    __ptext59 07CD  
                                  __ptext92 0DCD                                    __ptext84 0DAD  
                                  __ptext76 070F                                    __ptext68 0571  
                                  __ptext93 0D7C                                    __ptext85 0DA9  
                                  __ptext77 0DBD                                    __ptext69 0DE8  
                                  __ptext94 0DA1                                    __ptext86 0DA5  
                                  __ptext78 0DB9                                    __ptext95 0D68  
                                  __ptext87 0DD2                                    __ptext79 0DB5  
                                  __ptext96 0D79                                    __ptext88 0E24  
                                  __ptext97 0002                                    __ptext89 062D  
                                  __ptext98 0D6B                                    __ptext99 0D69  
                              _SSP1CON1bits 0215                            __size_of_reverse 0037  
                              _SSP1CON2bits 0216                                _shiftCounter 004F  
                      __end_of_do_I2C_RESET 0EAE                                  _IOCCF4_ISR 0EFF  
                            ??i1_returnStop 007A                     i1_do_I2C_SEND_ADR_WRITE 0E2B  
                       ?i1_i2c_restartWrite 0079                __end_ofi1_i2c_driver_sendACK 0DA1  
                       __end_of_returnReset 0E06                               __size_of_main 0065  
                             __size_of_rand 003C                         __end_of_mssp_setIRQ 0D9D  
              __end_ofi1_i2c_driver_restart 0D76                        i1i2c_driver_TXData@d 0070  
              __end_ofi1_i2c_driver_startRX 0D7C                        __CFG_WDTCWS$WDTCWSSW 0000  
                               _setCallBack 06A2                                ??_shiftWalls 003F  
                   ??i1_do_I2C_SEND_RESTART 0070                               _mssp_clearIRQ 0D85  
                   i2c_masterOperation@read 0030        __size_ofi1_do_I2C_SEND_RESTART_WRITE 0004  
                                  int$flags 007E                  ??i1_do_I2C_DO_ADDRESS_NACK 007A  
          __end_ofi1_do_I2C_DO_NACK_RESTART 0DC1          __end_of_INTERRUPT_InterruptManager 002E  
                _INTERRUPT_InterruptManager 0004                                _SSP1STATbits 0214  
                      ??i1_i2c_restartWrite 007A            __end_of_do_I2C_SEND_RESTART_READ 0E42  
                               ??_drawPixel 0023                                 ??_drawWalls 0025  
                              ??_returnStop 002B                    __end_of_i2c_restartWrite 0DFA  
                     ??_do_I2C_DO_NACK_STOP 0021                    mssp_waitForEvent@timeout 0021  
            i2c_driver_setBusCollisionISR@f 0021                                  _INTCONbits 000B  
                        i2c_writeNBytes@len 0033                         __end_ofi1_do_I2C_RX 04FE  
                       __end_ofi1_do_I2C_TX 0434                          __end_of_shiftWalls 0192  
                  __size_ofi1_do_I2C_DO_ACK 0004                            ?_do_I2C_TX_EMPTY 0070  
                    _do_I2C_DO_ADDRESS_NACK 0603              __size_ofi1_do_I2C_DO_NACK_STOP 0004  
                                  intlevel1 0000               __end_ofi1_do_I2C_DO_NACK_STOP 0DBD  
                    _do_I2C_RESET$intlevel0 0EA7                      rd2RegCompleteHandler@p 002A  
                         ??_i2c_driver_open 0021                           ??_i2c_driver_stop 0021  
                   ?_PIN_MANAGER_Initialize 0070                           i2c_restartWrite@p 002A  
                    i1_do_I2C_SEND_ADR_READ 0E32                           __CFG_CLKOUTEN$OFF 0000  
                ?i1_rdBlkRegCompleteHandler 0079                                ?_clearPixels 0070  
                        __end_of_returnStop 0E00                              ?_mssp_clearIRQ 0070  
                     __end_ofi1_setCallBack 070F         __size_ofi1_do_I2C_SEND_RESTART_READ 0004  
                                  reverse@b 0024                        __end_of_writeDisplay 02AF  
              __end_of_i2c_driver_getRXData 0D9A             __size_ofi1_i2c_driver_getRXData 0003  
                    wr2RegCompleteHandler@p 002A                  __size_ofi1_i2c_driver_stop 0003  
                               _pixelbuffer 00BD                     __size_ofi1_do_I2C_RESET 0007  
                         ??_i2c_masterWrite 0032          __end_of_i2c_setAddressNACKCallback 0F33  
                _i2c_setAddressNACKCallback 0F26                      __size_of_i2c_setBuffer 0015  
                         ??i1_i2c_setBuffer 0072                                 _returnReset 0E00  
          _do_I2C_DO_NACK_RESTART$intlevel0 0E6E                           ??_buttonInterrupt 0070  
                               _mssp_setIRQ 0D9A                   ??i1_do_I2C_SEND_ADR_WRITE 0071  
              __end_of_i2c_driver_setI2cISR 0E18                      __size_ofi1_do_I2C_IDLE 0005  
                    __size_ofi1_do_I2C_RCEN 0006                                 ?_IOCCF4_ISR 0070  
            __end_of_PIN_MANAGER_Initialize 05A5                 __end_of_i2c_busCollisionISR 0D73  
            __size_of_rd1RegCompleteHandler 0016               __end_of_rd1RegCompleteHandler 0FEA  
                       i1_i2c_driver_TXData 0DCD                             _PIN_MANAGER_IOC 0DDC  
            __size_of_wr1RegCompleteHandler 0016            __size_ofi1_rd1RegCompleteHandler 0010  
             __end_of_wr1RegCompleteHandler 0FD4                       _do_I2C_SEND_ADR_WRITE 0EAE  
               __end_of_i2c_driver_sendNACK 0DC9                        _do_I2C_SEND_ADR_READ 0EF3  
         __end_ofi1_rdBlkRegCompleteHandler 07FF            __size_ofi1_wr1RegCompleteHandler 0010  
                __end_of_i2c_driver_sendACK 0DC5                 __end_of_i2c_driver_resetBus 0800  
