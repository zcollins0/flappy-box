

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Apr 16 14:10:00 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F1619
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	idataBANK2,global,class=CODE,delta=2
     7                           	psect	idataBANK3,global,class=CODE,delta=2
     8                           	psect	idataBANK4,global,class=CODE,delta=2
     9                           	psect	idataBANK5,global,class=CODE,delta=2
    10                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cinit,global,class=CODE,merge=1,delta=2
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    17                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    18                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    19                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    20                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    21                           	psect	dataBANK5,global,class=BANK5,space=1,delta=1
    22                           	psect	inittext,global,class=CODE,delta=2
    23                           	psect	clrtext,global,class=CODE,delta=2
    24                           	psect	cstackBANK6,global,class=BANK6,space=1,delta=1
    25                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    26                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    27                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    28                           	psect	text1,local,class=CODE,merge=1,delta=2
    29                           	psect	text2,local,class=CODE,merge=1,delta=2
    30                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    31                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    32                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    33                           	psect	text6,local,class=CODE,merge=1,delta=2
    34                           	psect	text7,local,class=CODE,merge=1,delta=2
    35                           	psect	text8,local,class=CODE,merge=1,delta=2
    36                           	psect	text9,local,class=CODE,merge=1,delta=2
    37                           	psect	text10,local,class=CODE,merge=1,delta=2
    38                           	psect	text11,local,class=CODE,merge=1,delta=2
    39                           	psect	text12,local,class=CODE,merge=1,delta=2
    40                           	psect	text13,local,class=CODE,merge=1,delta=2
    41                           	psect	text14,local,class=CODE,merge=1,inline,delta=2
    42                           	psect	text15,local,class=CODE,merge=1,inline,delta=2
    43                           	psect	text16,local,class=CODE,merge=1,delta=2
    44                           	psect	text17,local,class=CODE,merge=1,delta=2
    45                           	psect	text18,local,class=CODE,merge=1,delta=2
    46                           	psect	text19,local,class=CODE,merge=1,inline,delta=2
    47                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    48                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    49                           	psect	text22,local,class=CODE,merge=1,delta=2
    50                           	psect	text23,local,class=CODE,merge=1,delta=2
    51                           	psect	text24,local,class=CODE,merge=1,delta=2
    52                           	psect	text25,local,class=CODE,merge=1,delta=2
    53                           	psect	text26,local,class=CODE,merge=1,delta=2
    54                           	psect	text27,local,class=CODE,merge=1,delta=2
    55                           	psect	text28,local,class=CODE,merge=1,delta=2
    56                           	psect	text29,local,class=CODE,merge=1,delta=2
    57                           	psect	text30,local,class=CODE,merge=1,delta=2
    58                           	psect	text31,local,class=CODE,merge=1,delta=2
    59                           	psect	text32,local,class=CODE,merge=1,delta=2
    60                           	psect	text33,local,class=CODE,merge=1,delta=2
    61                           	psect	text34,local,class=CODE,merge=1,delta=2
    62                           	psect	text35,local,class=CODE,merge=1,delta=2
    63                           	psect	text36,local,class=CODE,merge=1,delta=2
    64                           	psect	text37,local,class=CODE,merge=1,delta=2
    65                           	psect	text38,local,class=CODE,merge=1,delta=2
    66                           	psect	text39,local,class=CODE,merge=1,inline,delta=2
    67                           	psect	text40,local,class=CODE,merge=1,inline,delta=2
    68                           	psect	text41,local,class=CODE,merge=1,inline,delta=2
    69                           	psect	text42,local,class=CODE,merge=1,inline,delta=2
    70                           	psect	text43,local,class=CODE,merge=1,inline,delta=2
    71                           	psect	text44,local,class=CODE,merge=1,inline,delta=2
    72                           	psect	text45,local,class=CODE,merge=1,inline,delta=2
    73                           	psect	text46,local,class=CODE,merge=1,delta=2
    74                           	psect	text47,local,class=CODE,merge=1,delta=2
    75                           	psect	text48,local,class=CODE,merge=1,delta=2
    76                           	psect	text49,local,class=CODE,merge=1,delta=2
    77                           	psect	text50,local,class=CODE,merge=1,delta=2
    78                           	psect	text51,local,class=CODE,merge=1,delta=2
    79                           	psect	text52,local,class=CODE,merge=1,delta=2
    80                           	psect	text53,local,class=CODE,merge=1,delta=2
    81                           	psect	text54,local,class=CODE,merge=1,delta=2
    82                           	psect	text55,local,class=CODE,merge=1,delta=2
    83                           	psect	text56,local,class=CODE,merge=1,delta=2
    84                           	psect	text57,local,class=CODE,merge=1,inline,delta=2
    85                           	psect	text58,local,class=CODE,merge=1,inline,delta=2
    86                           	psect	text59,local,class=CODE,merge=1,inline,delta=2
    87                           	psect	text60,local,class=CODE,merge=1,inline,delta=2
    88                           	psect	text61,local,class=CODE,merge=1,delta=2
    89                           	psect	text62,local,class=CODE,merge=1,inline,delta=2
    90                           	psect	text63,local,class=CODE,merge=1,inline,delta=2
    91                           	psect	text64,local,class=CODE,merge=1,delta=2,group=1
    92                           	psect	text65,local,class=CODE,merge=1,delta=2
    93                           	psect	text66,local,class=CODE,merge=1,delta=2
    94                           	psect	text67,local,class=CODE,merge=1,delta=2
    95                           	psect	text68,local,class=CODE,merge=1,delta=2,group=1
    96                           	psect	text69,local,class=CODE,merge=1,delta=2,group=1
    97                           	psect	text70,local,class=CODE,merge=1,delta=2
    98                           	psect	text71,local,class=CODE,merge=1,delta=2
    99                           	psect	text72,local,class=CODE,merge=1,delta=2
   100                           	psect	text73,local,class=CODE,merge=1,delta=2
   101                           	psect	text74,local,class=CODE,merge=1,delta=2
   102                           	psect	intentry,global,class=CODE,delta=2
   103                           	psect	text76,local,class=CODE,merge=1,delta=2
   104                           	psect	text77,local,class=CODE,merge=1,inline,delta=2
   105                           	psect	text78,local,class=CODE,merge=1,delta=2
   106                           	psect	text79,local,class=CODE,merge=1,delta=2
   107                           	psect	text80,local,class=CODE,merge=1,delta=2
   108                           	psect	text81,local,class=CODE,merge=1,delta=2
   109                           	psect	text82,local,class=CODE,merge=1,delta=2
   110                           	psect	text83,local,class=CODE,merge=1,delta=2
   111                           	psect	text84,local,class=CODE,merge=1,delta=2
   112                           	psect	text85,local,class=CODE,merge=1,delta=2
   113                           	psect	text86,local,class=CODE,merge=1,delta=2
   114                           	psect	text87,local,class=CODE,merge=1,delta=2
   115                           	psect	text88,local,class=CODE,merge=1,delta=2
   116                           	psect	text89,local,class=CODE,merge=1,delta=2
   117                           	psect	text90,local,class=CODE,merge=1,delta=2
   118                           	psect	text91,local,class=CODE,merge=1,delta=2
   119                           	psect	text92,local,class=CODE,merge=1,delta=2
   120                           	psect	text93,local,class=CODE,merge=1,delta=2
   121                           	psect	text94,local,class=CODE,merge=1,inline,delta=2
   122                           	psect	text95,local,class=CODE,merge=1,inline,delta=2
   123                           	psect	text96,local,class=CODE,merge=1,inline,delta=2
   124                           	psect	text97,local,class=CODE,merge=1,inline,delta=2
   125                           	psect	text98,local,class=CODE,merge=1,inline,delta=2
   126                           	psect	text99,local,class=CODE,merge=1,inline,delta=2
   127                           	psect	text100,local,class=CODE,merge=1,inline,delta=2
   128                           	psect	text101,local,class=CODE,merge=1,delta=2
   129                           	psect	text102,local,class=CODE,merge=1,delta=2
   130                           	psect	text103,local,class=CODE,merge=1,delta=2
   131                           	psect	text104,local,class=CODE,merge=1,delta=2
   132                           	psect	text105,local,class=CODE,merge=1,delta=2
   133                           	psect	text106,local,class=CODE,merge=1,delta=2
   134                           	psect	text107,local,class=CODE,merge=1,delta=2
   135                           	psect	text108,local,class=CODE,merge=1,delta=2
   136                           	psect	text109,local,class=CODE,merge=1,delta=2
   137                           	psect	text110,local,class=CODE,merge=1,delta=2
   138                           	psect	text111,local,class=CODE,merge=1,delta=2
   139                           	psect	text112,local,class=CODE,merge=1,inline,delta=2
   140                           	psect	text113,local,class=CODE,merge=1,inline,delta=2
   141                           	psect	text114,local,class=CODE,merge=1,inline,delta=2
   142                           	psect	text115,local,class=CODE,merge=1,delta=2
   143                           	psect	text116,local,class=CODE,merge=1,inline,delta=2
   144                           	psect	text117,local,class=CODE,merge=1,delta=2
   145                           	psect	text118,local,class=CODE,merge=1,delta=2
   146                           	psect	text119,local,class=CODE,merge=1,delta=2
   147                           	psect	text120,local,class=CODE,merge=1,delta=2
   148                           	dabs	1,0x7E,2
   149  0000                     
   150                           ; Version 1.45
   151                           ; Generated 16/11/2017 GMT
   152                           ; 
   153                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   154                           ; All rights reserved.
   155                           ; 
   156                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   157                           ; 
   158                           ; Redistribution and use in source and binary forms, with or without modification, are
   159                           ; permitted provided that the following conditions are met:
   160                           ; 
   161                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   162                           ;        conditions and the following disclaimer.
   163                           ; 
   164                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   165                           ;        of conditions and the following disclaimer in the documentation and/or other
   166                           ;        materials provided with the distribution.
   167                           ; 
   168                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   169                           ;        software without specific prior written permission.
   170                           ; 
   171                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   172                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   173                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   174                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   175                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   176                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   177                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   178                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   179                           ; 
   180                           ; 
   181                           ; Code-generator required, PIC16F1619 Definitions
   182                           ; 
   183                           ; SFR Addresses
   184  0000                     	;# 
   185  0001                     	;# 
   186  0002                     	;# 
   187  0003                     	;# 
   188  0004                     	;# 
   189  0005                     	;# 
   190  0006                     	;# 
   191  0007                     	;# 
   192  0008                     	;# 
   193  0009                     	;# 
   194  000A                     	;# 
   195  000B                     	;# 
   196  000C                     	;# 
   197  000D                     	;# 
   198  000E                     	;# 
   199  0010                     	;# 
   200  0011                     	;# 
   201  0012                     	;# 
   202  0013                     	;# 
   203  0014                     	;# 
   204  0015                     	;# 
   205  0016                     	;# 
   206  0016                     	;# 
   207  0017                     	;# 
   208  0018                     	;# 
   209  0019                     	;# 
   210  001A                     	;# 
   211  001A                     	;# 
   212  001B                     	;# 
   213  001B                     	;# 
   214  001C                     	;# 
   215  001D                     	;# 
   216  001E                     	;# 
   217  001F                     	;# 
   218  008C                     	;# 
   219  008D                     	;# 
   220  008E                     	;# 
   221  0090                     	;# 
   222  0091                     	;# 
   223  0092                     	;# 
   224  0093                     	;# 
   225  0094                     	;# 
   226  0095                     	;# 
   227  0096                     	;# 
   228  0098                     	;# 
   229  0099                     	;# 
   230  009A                     	;# 
   231  009B                     	;# 
   232  009B                     	;# 
   233  009C                     	;# 
   234  009D                     	;# 
   235  009E                     	;# 
   236  009F                     	;# 
   237  010C                     	;# 
   238  010D                     	;# 
   239  010E                     	;# 
   240  0111                     	;# 
   241  0112                     	;# 
   242  0113                     	;# 
   243  0114                     	;# 
   244  0115                     	;# 
   245  0116                     	;# 
   246  0117                     	;# 
   247  0118                     	;# 
   248  0119                     	;# 
   249  011C                     	;# 
   250  018C                     	;# 
   251  018D                     	;# 
   252  018E                     	;# 
   253  0191                     	;# 
   254  0191                     	;# 
   255  0192                     	;# 
   256  0193                     	;# 
   257  0193                     	;# 
   258  0194                     	;# 
   259  0195                     	;# 
   260  0196                     	;# 
   261  0197                     	;# 
   262  0199                     	;# 
   263  0199                     	;# 
   264  0199                     	;# 
   265  019A                     	;# 
   266  019A                     	;# 
   267  019A                     	;# 
   268  019B                     	;# 
   269  019B                     	;# 
   270  019B                     	;# 
   271  019B                     	;# 
   272  019B                     	;# 
   273  019C                     	;# 
   274  019C                     	;# 
   275  019C                     	;# 
   276  019D                     	;# 
   277  019D                     	;# 
   278  019D                     	;# 
   279  019E                     	;# 
   280  019E                     	;# 
   281  019E                     	;# 
   282  019F                     	;# 
   283  019F                     	;# 
   284  019F                     	;# 
   285  019F                     	;# 
   286  019F                     	;# 
   287  020C                     	;# 
   288  020D                     	;# 
   289  020E                     	;# 
   290  0211                     	;# 
   291  0211                     	;# 
   292  0212                     	;# 
   293  0212                     	;# 
   294  0213                     	;# 
   295  0213                     	;# 
   296  0214                     	;# 
   297  0214                     	;# 
   298  0215                     	;# 
   299  0215                     	;# 
   300  0215                     	;# 
   301  0215                     	;# 
   302  0216                     	;# 
   303  0216                     	;# 
   304  0217                     	;# 
   305  0217                     	;# 
   306  028C                     	;# 
   307  028D                     	;# 
   308  028E                     	;# 
   309  0291                     	;# 
   310  0291                     	;# 
   311  0292                     	;# 
   312  0293                     	;# 
   313  0294                     	;# 
   314  0298                     	;# 
   315  0298                     	;# 
   316  0299                     	;# 
   317  029A                     	;# 
   318  029B                     	;# 
   319  029E                     	;# 
   320  030C                     	;# 
   321  030D                     	;# 
   322  030E                     	;# 
   323  038C                     	;# 
   324  038D                     	;# 
   325  038E                     	;# 
   326  0391                     	;# 
   327  0392                     	;# 
   328  0393                     	;# 
   329  0394                     	;# 
   330  0395                     	;# 
   331  0396                     	;# 
   332  0397                     	;# 
   333  0398                     	;# 
   334  0399                     	;# 
   335  040E                     	;# 
   336  0413                     	;# 
   337  0413                     	;# 
   338  0414                     	;# 
   339  0414                     	;# 
   340  0415                     	;# 
   341  0416                     	;# 
   342  0417                     	;# 
   343  0418                     	;# 
   344  041A                     	;# 
   345  041A                     	;# 
   346  041B                     	;# 
   347  041B                     	;# 
   348  041C                     	;# 
   349  041D                     	;# 
   350  041E                     	;# 
   351  041F                     	;# 
   352  0493                     	;# 
   353  0494                     	;# 
   354  0495                     	;# 
   355  0496                     	;# 
   356  049A                     	;# 
   357  049B                     	;# 
   358  049C                     	;# 
   359  049D                     	;# 
   360  058C                     	;# 
   361  058C                     	;# 
   362  058D                     	;# 
   363  058E                     	;# 
   364  058E                     	;# 
   365  058F                     	;# 
   366  0590                     	;# 
   367  0590                     	;# 
   368  0591                     	;# 
   369  0592                     	;# 
   370  0592                     	;# 
   371  0593                     	;# 
   372  0594                     	;# 
   373  0594                     	;# 
   374  0595                     	;# 
   375  0596                     	;# 
   376  0596                     	;# 
   377  0597                     	;# 
   378  0598                     	;# 
   379  0599                     	;# 
   380  059A                     	;# 
   381  059B                     	;# 
   382  059B                     	;# 
   383  059C                     	;# 
   384  059D                     	;# 
   385  060C                     	;# 
   386  060C                     	;# 
   387  060D                     	;# 
   388  060E                     	;# 
   389  060F                     	;# 
   390  060F                     	;# 
   391  0610                     	;# 
   392  0611                     	;# 
   393  0612                     	;# 
   394  0613                     	;# 
   395  0614                     	;# 
   396  0617                     	;# 
   397  0618                     	;# 
   398  0619                     	;# 
   399  061A                     	;# 
   400  061B                     	;# 
   401  061C                     	;# 
   402  0691                     	;# 
   403  0692                     	;# 
   404  0693                     	;# 
   405  0694                     	;# 
   406  0695                     	;# 
   407  0696                     	;# 
   408  0697                     	;# 
   409  0699                     	;# 
   410  069A                     	;# 
   411  0711                     	;# 
   412  0712                     	;# 
   413  0713                     	;# 
   414  0714                     	;# 
   415  0715                     	;# 
   416  0718                     	;# 
   417  0718                     	;# 
   418  0719                     	;# 
   419  071A                     	;# 
   420  071A                     	;# 
   421  071B                     	;# 
   422  071C                     	;# 
   423  071D                     	;# 
   424  0791                     	;# 
   425  0791                     	;# 
   426  0792                     	;# 
   427  0793                     	;# 
   428  0793                     	;# 
   429  0794                     	;# 
   430  0795                     	;# 
   431  0795                     	;# 
   432  0796                     	;# 
   433  0797                     	;# 
   434  0797                     	;# 
   435  0798                     	;# 
   436  0799                     	;# 
   437  079A                     	;# 
   438  080C                     	;# 
   439  080C                     	;# 
   440  080D                     	;# 
   441  080E                     	;# 
   442  080E                     	;# 
   443  080F                     	;# 
   444  0810                     	;# 
   445  0810                     	;# 
   446  0811                     	;# 
   447  0812                     	;# 
   448  0812                     	;# 
   449  0813                     	;# 
   450  0814                     	;# 
   451  0815                     	;# 
   452  0816                     	;# 
   453  0817                     	;# 
   454  0818                     	;# 
   455  0819                     	;# 
   456  081A                     	;# 
   457  081A                     	;# 
   458  081B                     	;# 
   459  081C                     	;# 
   460  081C                     	;# 
   461  081D                     	;# 
   462  088C                     	;# 
   463  088D                     	;# 
   464  088E                     	;# 
   465  088F                     	;# 
   466  088F                     	;# 
   467  0890                     	;# 
   468  0891                     	;# 
   469  0892                     	;# 
   470  0893                     	;# 
   471  0893                     	;# 
   472  0894                     	;# 
   473  0895                     	;# 
   474  0896                     	;# 
   475  0897                     	;# 
   476  0897                     	;# 
   477  0898                     	;# 
   478  0899                     	;# 
   479  0D8C                     	;# 
   480  0D8C                     	;# 
   481  0D8D                     	;# 
   482  0D8E                     	;# 
   483  0D8F                     	;# 
   484  0D8F                     	;# 
   485  0D90                     	;# 
   486  0D91                     	;# 
   487  0D92                     	;# 
   488  0D92                     	;# 
   489  0D93                     	;# 
   490  0D94                     	;# 
   491  0D95                     	;# 
   492  0D95                     	;# 
   493  0D96                     	;# 
   494  0D97                     	;# 
   495  0D98                     	;# 
   496  0D99                     	;# 
   497  0D9A                     	;# 
   498  0D9B                     	;# 
   499  0D9C                     	;# 
   500  0D9D                     	;# 
   501  0D9E                     	;# 
   502  0D9E                     	;# 
   503  0D9F                     	;# 
   504  0DA0                     	;# 
   505  0DA1                     	;# 
   506  0DA1                     	;# 
   507  0DA2                     	;# 
   508  0DA3                     	;# 
   509  0DA4                     	;# 
   510  0DA4                     	;# 
   511  0DA5                     	;# 
   512  0DA6                     	;# 
   513  0DA7                     	;# 
   514  0DA7                     	;# 
   515  0DA8                     	;# 
   516  0DA9                     	;# 
   517  0DAA                     	;# 
   518  0DAB                     	;# 
   519  0DAC                     	;# 
   520  0DAD                     	;# 
   521  0DAE                     	;# 
   522  0DAF                     	;# 
   523  0E0F                     	;# 
   524  0E10                     	;# 
   525  0E11                     	;# 
   526  0E12                     	;# 
   527  0E13                     	;# 
   528  0E14                     	;# 
   529  0E15                     	;# 
   530  0E16                     	;# 
   531  0E17                     	;# 
   532  0E18                     	;# 
   533  0E19                     	;# 
   534  0E1A                     	;# 
   535  0E1B                     	;# 
   536  0E1C                     	;# 
   537  0E1D                     	;# 
   538  0E1E                     	;# 
   539  0E1F                     	;# 
   540  0E20                     	;# 
   541  0E21                     	;# 
   542  0E22                     	;# 
   543  0E23                     	;# 
   544  0E24                     	;# 
   545  0E25                     	;# 
   546  0E26                     	;# 
   547  0E27                     	;# 
   548  0E28                     	;# 
   549  0E29                     	;# 
   550  0E2A                     	;# 
   551  0E2B                     	;# 
   552  0E2C                     	;# 
   553  0E2D                     	;# 
   554  0E2E                     	;# 
   555  0E90                     	;# 
   556  0E91                     	;# 
   557  0E92                     	;# 
   558  0E94                     	;# 
   559  0E95                     	;# 
   560  0E9C                     	;# 
   561  0E9D                     	;# 
   562  0E9E                     	;# 
   563  0E9F                     	;# 
   564  0EA0                     	;# 
   565  0EA1                     	;# 
   566  0EA2                     	;# 
   567  0EA3                     	;# 
   568  0EA4                     	;# 
   569  0EA5                     	;# 
   570  0EA6                     	;# 
   571  0EA7                     	;# 
   572  0F0F                     	;# 
   573  0F10                     	;# 
   574  0F11                     	;# 
   575  0F12                     	;# 
   576  0F13                     	;# 
   577  0F14                     	;# 
   578  0F15                     	;# 
   579  0F16                     	;# 
   580  0F17                     	;# 
   581  0F18                     	;# 
   582  0F19                     	;# 
   583  0F1A                     	;# 
   584  0F1B                     	;# 
   585  0F1C                     	;# 
   586  0F1D                     	;# 
   587  0F1E                     	;# 
   588  0F1F                     	;# 
   589  0F20                     	;# 
   590  0F21                     	;# 
   591  0F22                     	;# 
   592  0F23                     	;# 
   593  0F24                     	;# 
   594  0F25                     	;# 
   595  0F26                     	;# 
   596  0F27                     	;# 
   597  0F28                     	;# 
   598  0F29                     	;# 
   599  0F2A                     	;# 
   600  0F2B                     	;# 
   601  0F2C                     	;# 
   602  0F2D                     	;# 
   603  0F2E                     	;# 
   604  0F2F                     	;# 
   605  0F30                     	;# 
   606  0F31                     	;# 
   607  0F32                     	;# 
   608  0F33                     	;# 
   609  0F34                     	;# 
   610  0F35                     	;# 
   611  0F36                     	;# 
   612  0F37                     	;# 
   613  0FE4                     	;# 
   614  0FE5                     	;# 
   615  0FE6                     	;# 
   616  0FE7                     	;# 
   617  0FE8                     	;# 
   618  0FE9                     	;# 
   619  0FEA                     	;# 
   620  0FEB                     	;# 
   621  0FED                     	;# 
   622  0FEE                     	;# 
   623  0FEF                     	;# 
   624  0000                     	;# 
   625  0001                     	;# 
   626  0002                     	;# 
   627  0003                     	;# 
   628  0004                     	;# 
   629  0005                     	;# 
   630  0006                     	;# 
   631  0007                     	;# 
   632  0008                     	;# 
   633  0009                     	;# 
   634  000A                     	;# 
   635  000B                     	;# 
   636  000C                     	;# 
   637  000D                     	;# 
   638  000E                     	;# 
   639  0010                     	;# 
   640  0011                     	;# 
   641  0012                     	;# 
   642  0013                     	;# 
   643  0014                     	;# 
   644  0015                     	;# 
   645  0016                     	;# 
   646  0016                     	;# 
   647  0017                     	;# 
   648  0018                     	;# 
   649  0019                     	;# 
   650  001A                     	;# 
   651  001A                     	;# 
   652  001B                     	;# 
   653  001B                     	;# 
   654  001C                     	;# 
   655  001D                     	;# 
   656  001E                     	;# 
   657  001F                     	;# 
   658  008C                     	;# 
   659  008D                     	;# 
   660  008E                     	;# 
   661  0090                     	;# 
   662  0091                     	;# 
   663  0092                     	;# 
   664  0093                     	;# 
   665  0094                     	;# 
   666  0095                     	;# 
   667  0096                     	;# 
   668  0098                     	;# 
   669  0099                     	;# 
   670  009A                     	;# 
   671  009B                     	;# 
   672  009B                     	;# 
   673  009C                     	;# 
   674  009D                     	;# 
   675  009E                     	;# 
   676  009F                     	;# 
   677  010C                     	;# 
   678  010D                     	;# 
   679  010E                     	;# 
   680  0111                     	;# 
   681  0112                     	;# 
   682  0113                     	;# 
   683  0114                     	;# 
   684  0115                     	;# 
   685  0116                     	;# 
   686  0117                     	;# 
   687  0118                     	;# 
   688  0119                     	;# 
   689  011C                     	;# 
   690  018C                     	;# 
   691  018D                     	;# 
   692  018E                     	;# 
   693  0191                     	;# 
   694  0191                     	;# 
   695  0192                     	;# 
   696  0193                     	;# 
   697  0193                     	;# 
   698  0194                     	;# 
   699  0195                     	;# 
   700  0196                     	;# 
   701  0197                     	;# 
   702  0199                     	;# 
   703  0199                     	;# 
   704  0199                     	;# 
   705  019A                     	;# 
   706  019A                     	;# 
   707  019A                     	;# 
   708  019B                     	;# 
   709  019B                     	;# 
   710  019B                     	;# 
   711  019B                     	;# 
   712  019B                     	;# 
   713  019C                     	;# 
   714  019C                     	;# 
   715  019C                     	;# 
   716  019D                     	;# 
   717  019D                     	;# 
   718  019D                     	;# 
   719  019E                     	;# 
   720  019E                     	;# 
   721  019E                     	;# 
   722  019F                     	;# 
   723  019F                     	;# 
   724  019F                     	;# 
   725  019F                     	;# 
   726  019F                     	;# 
   727  020C                     	;# 
   728  020D                     	;# 
   729  020E                     	;# 
   730  0211                     	;# 
   731  0211                     	;# 
   732  0212                     	;# 
   733  0212                     	;# 
   734  0213                     	;# 
   735  0213                     	;# 
   736  0214                     	;# 
   737  0214                     	;# 
   738  0215                     	;# 
   739  0215                     	;# 
   740  0215                     	;# 
   741  0215                     	;# 
   742  0216                     	;# 
   743  0216                     	;# 
   744  0217                     	;# 
   745  0217                     	;# 
   746  028C                     	;# 
   747  028D                     	;# 
   748  028E                     	;# 
   749  0291                     	;# 
   750  0291                     	;# 
   751  0292                     	;# 
   752  0293                     	;# 
   753  0294                     	;# 
   754  0298                     	;# 
   755  0298                     	;# 
   756  0299                     	;# 
   757  029A                     	;# 
   758  029B                     	;# 
   759  029E                     	;# 
   760  030C                     	;# 
   761  030D                     	;# 
   762  030E                     	;# 
   763  038C                     	;# 
   764  038D                     	;# 
   765  038E                     	;# 
   766  0391                     	;# 
   767  0392                     	;# 
   768  0393                     	;# 
   769  0394                     	;# 
   770  0395                     	;# 
   771  0396                     	;# 
   772  0397                     	;# 
   773  0398                     	;# 
   774  0399                     	;# 
   775  040E                     	;# 
   776  0413                     	;# 
   777  0413                     	;# 
   778  0414                     	;# 
   779  0414                     	;# 
   780  0415                     	;# 
   781  0416                     	;# 
   782  0417                     	;# 
   783  0418                     	;# 
   784  041A                     	;# 
   785  041A                     	;# 
   786  041B                     	;# 
   787  041B                     	;# 
   788  041C                     	;# 
   789  041D                     	;# 
   790  041E                     	;# 
   791  041F                     	;# 
   792  0493                     	;# 
   793  0494                     	;# 
   794  0495                     	;# 
   795  0496                     	;# 
   796  049A                     	;# 
   797  049B                     	;# 
   798  049C                     	;# 
   799  049D                     	;# 
   800  058C                     	;# 
   801  058C                     	;# 
   802  058D                     	;# 
   803  058E                     	;# 
   804  058E                     	;# 
   805  058F                     	;# 
   806  0590                     	;# 
   807  0590                     	;# 
   808  0591                     	;# 
   809  0592                     	;# 
   810  0592                     	;# 
   811  0593                     	;# 
   812  0594                     	;# 
   813  0594                     	;# 
   814  0595                     	;# 
   815  0596                     	;# 
   816  0596                     	;# 
   817  0597                     	;# 
   818  0598                     	;# 
   819  0599                     	;# 
   820  059A                     	;# 
   821  059B                     	;# 
   822  059B                     	;# 
   823  059C                     	;# 
   824  059D                     	;# 
   825  060C                     	;# 
   826  060C                     	;# 
   827  060D                     	;# 
   828  060E                     	;# 
   829  060F                     	;# 
   830  060F                     	;# 
   831  0610                     	;# 
   832  0611                     	;# 
   833  0612                     	;# 
   834  0613                     	;# 
   835  0614                     	;# 
   836  0617                     	;# 
   837  0618                     	;# 
   838  0619                     	;# 
   839  061A                     	;# 
   840  061B                     	;# 
   841  061C                     	;# 
   842  0691                     	;# 
   843  0692                     	;# 
   844  0693                     	;# 
   845  0694                     	;# 
   846  0695                     	;# 
   847  0696                     	;# 
   848  0697                     	;# 
   849  0699                     	;# 
   850  069A                     	;# 
   851  0711                     	;# 
   852  0712                     	;# 
   853  0713                     	;# 
   854  0714                     	;# 
   855  0715                     	;# 
   856  0718                     	;# 
   857  0718                     	;# 
   858  0719                     	;# 
   859  071A                     	;# 
   860  071A                     	;# 
   861  071B                     	;# 
   862  071C                     	;# 
   863  071D                     	;# 
   864  0791                     	;# 
   865  0791                     	;# 
   866  0792                     	;# 
   867  0793                     	;# 
   868  0793                     	;# 
   869  0794                     	;# 
   870  0795                     	;# 
   871  0795                     	;# 
   872  0796                     	;# 
   873  0797                     	;# 
   874  0797                     	;# 
   875  0798                     	;# 
   876  0799                     	;# 
   877  079A                     	;# 
   878  080C                     	;# 
   879  080C                     	;# 
   880  080D                     	;# 
   881  080E                     	;# 
   882  080E                     	;# 
   883  080F                     	;# 
   884  0810                     	;# 
   885  0810                     	;# 
   886  0811                     	;# 
   887  0812                     	;# 
   888  0812                     	;# 
   889  0813                     	;# 
   890  0814                     	;# 
   891  0815                     	;# 
   892  0816                     	;# 
   893  0817                     	;# 
   894  0818                     	;# 
   895  0819                     	;# 
   896  081A                     	;# 
   897  081A                     	;# 
   898  081B                     	;# 
   899  081C                     	;# 
   900  081C                     	;# 
   901  081D                     	;# 
   902  088C                     	;# 
   903  088D                     	;# 
   904  088E                     	;# 
   905  088F                     	;# 
   906  088F                     	;# 
   907  0890                     	;# 
   908  0891                     	;# 
   909  0892                     	;# 
   910  0893                     	;# 
   911  0893                     	;# 
   912  0894                     	;# 
   913  0895                     	;# 
   914  0896                     	;# 
   915  0897                     	;# 
   916  0897                     	;# 
   917  0898                     	;# 
   918  0899                     	;# 
   919  0D8C                     	;# 
   920  0D8C                     	;# 
   921  0D8D                     	;# 
   922  0D8E                     	;# 
   923  0D8F                     	;# 
   924  0D8F                     	;# 
   925  0D90                     	;# 
   926  0D91                     	;# 
   927  0D92                     	;# 
   928  0D92                     	;# 
   929  0D93                     	;# 
   930  0D94                     	;# 
   931  0D95                     	;# 
   932  0D95                     	;# 
   933  0D96                     	;# 
   934  0D97                     	;# 
   935  0D98                     	;# 
   936  0D99                     	;# 
   937  0D9A                     	;# 
   938  0D9B                     	;# 
   939  0D9C                     	;# 
   940  0D9D                     	;# 
   941  0D9E                     	;# 
   942  0D9E                     	;# 
   943  0D9F                     	;# 
   944  0DA0                     	;# 
   945  0DA1                     	;# 
   946  0DA1                     	;# 
   947  0DA2                     	;# 
   948  0DA3                     	;# 
   949  0DA4                     	;# 
   950  0DA4                     	;# 
   951  0DA5                     	;# 
   952  0DA6                     	;# 
   953  0DA7                     	;# 
   954  0DA7                     	;# 
   955  0DA8                     	;# 
   956  0DA9                     	;# 
   957  0DAA                     	;# 
   958  0DAB                     	;# 
   959  0DAC                     	;# 
   960  0DAD                     	;# 
   961  0DAE                     	;# 
   962  0DAF                     	;# 
   963  0E0F                     	;# 
   964  0E10                     	;# 
   965  0E11                     	;# 
   966  0E12                     	;# 
   967  0E13                     	;# 
   968  0E14                     	;# 
   969  0E15                     	;# 
   970  0E16                     	;# 
   971  0E17                     	;# 
   972  0E18                     	;# 
   973  0E19                     	;# 
   974  0E1A                     	;# 
   975  0E1B                     	;# 
   976  0E1C                     	;# 
   977  0E1D                     	;# 
   978  0E1E                     	;# 
   979  0E1F                     	;# 
   980  0E20                     	;# 
   981  0E21                     	;# 
   982  0E22                     	;# 
   983  0E23                     	;# 
   984  0E24                     	;# 
   985  0E25                     	;# 
   986  0E26                     	;# 
   987  0E27                     	;# 
   988  0E28                     	;# 
   989  0E29                     	;# 
   990  0E2A                     	;# 
   991  0E2B                     	;# 
   992  0E2C                     	;# 
   993  0E2D                     	;# 
   994  0E2E                     	;# 
   995  0E90                     	;# 
   996  0E91                     	;# 
   997  0E92                     	;# 
   998  0E94                     	;# 
   999  0E95                     	;# 
  1000  0E9C                     	;# 
  1001  0E9D                     	;# 
  1002  0E9E                     	;# 
  1003  0E9F                     	;# 
  1004  0EA0                     	;# 
  1005  0EA1                     	;# 
  1006  0EA2                     	;# 
  1007  0EA3                     	;# 
  1008  0EA4                     	;# 
  1009  0EA5                     	;# 
  1010  0EA6                     	;# 
  1011  0EA7                     	;# 
  1012  0F0F                     	;# 
  1013  0F10                     	;# 
  1014  0F11                     	;# 
  1015  0F12                     	;# 
  1016  0F13                     	;# 
  1017  0F14                     	;# 
  1018  0F15                     	;# 
  1019  0F16                     	;# 
  1020  0F17                     	;# 
  1021  0F18                     	;# 
  1022  0F19                     	;# 
  1023  0F1A                     	;# 
  1024  0F1B                     	;# 
  1025  0F1C                     	;# 
  1026  0F1D                     	;# 
  1027  0F1E                     	;# 
  1028  0F1F                     	;# 
  1029  0F20                     	;# 
  1030  0F21                     	;# 
  1031  0F22                     	;# 
  1032  0F23                     	;# 
  1033  0F24                     	;# 
  1034  0F25                     	;# 
  1035  0F26                     	;# 
  1036  0F27                     	;# 
  1037  0F28                     	;# 
  1038  0F29                     	;# 
  1039  0F2A                     	;# 
  1040  0F2B                     	;# 
  1041  0F2C                     	;# 
  1042  0F2D                     	;# 
  1043  0F2E                     	;# 
  1044  0F2F                     	;# 
  1045  0F30                     	;# 
  1046  0F31                     	;# 
  1047  0F32                     	;# 
  1048  0F33                     	;# 
  1049  0F34                     	;# 
  1050  0F35                     	;# 
  1051  0F36                     	;# 
  1052  0F37                     	;# 
  1053  0FE4                     	;# 
  1054  0FE5                     	;# 
  1055  0FE6                     	;# 
  1056  0FE7                     	;# 
  1057  0FE8                     	;# 
  1058  0FE9                     	;# 
  1059  0FEA                     	;# 
  1060  0FEB                     	;# 
  1061  0FED                     	;# 
  1062  0FEE                     	;# 
  1063  0FEF                     	;# 
  1064  0000                     	;# 
  1065  0001                     	;# 
  1066  0002                     	;# 
  1067  0003                     	;# 
  1068  0004                     	;# 
  1069  0005                     	;# 
  1070  0006                     	;# 
  1071  0007                     	;# 
  1072  0008                     	;# 
  1073  0009                     	;# 
  1074  000A                     	;# 
  1075  000B                     	;# 
  1076  000C                     	;# 
  1077  000D                     	;# 
  1078  000E                     	;# 
  1079  0010                     	;# 
  1080  0011                     	;# 
  1081  0012                     	;# 
  1082  0013                     	;# 
  1083  0014                     	;# 
  1084  0015                     	;# 
  1085  0016                     	;# 
  1086  0016                     	;# 
  1087  0017                     	;# 
  1088  0018                     	;# 
  1089  0019                     	;# 
  1090  001A                     	;# 
  1091  001A                     	;# 
  1092  001B                     	;# 
  1093  001B                     	;# 
  1094  001C                     	;# 
  1095  001D                     	;# 
  1096  001E                     	;# 
  1097  001F                     	;# 
  1098  008C                     	;# 
  1099  008D                     	;# 
  1100  008E                     	;# 
  1101  0090                     	;# 
  1102  0091                     	;# 
  1103  0092                     	;# 
  1104  0093                     	;# 
  1105  0094                     	;# 
  1106  0095                     	;# 
  1107  0096                     	;# 
  1108  0098                     	;# 
  1109  0099                     	;# 
  1110  009A                     	;# 
  1111  009B                     	;# 
  1112  009B                     	;# 
  1113  009C                     	;# 
  1114  009D                     	;# 
  1115  009E                     	;# 
  1116  009F                     	;# 
  1117  010C                     	;# 
  1118  010D                     	;# 
  1119  010E                     	;# 
  1120  0111                     	;# 
  1121  0112                     	;# 
  1122  0113                     	;# 
  1123  0114                     	;# 
  1124  0115                     	;# 
  1125  0116                     	;# 
  1126  0117                     	;# 
  1127  0118                     	;# 
  1128  0119                     	;# 
  1129  011C                     	;# 
  1130  018C                     	;# 
  1131  018D                     	;# 
  1132  018E                     	;# 
  1133  0191                     	;# 
  1134  0191                     	;# 
  1135  0192                     	;# 
  1136  0193                     	;# 
  1137  0193                     	;# 
  1138  0194                     	;# 
  1139  0195                     	;# 
  1140  0196                     	;# 
  1141  0197                     	;# 
  1142  0199                     	;# 
  1143  0199                     	;# 
  1144  0199                     	;# 
  1145  019A                     	;# 
  1146  019A                     	;# 
  1147  019A                     	;# 
  1148  019B                     	;# 
  1149  019B                     	;# 
  1150  019B                     	;# 
  1151  019B                     	;# 
  1152  019B                     	;# 
  1153  019C                     	;# 
  1154  019C                     	;# 
  1155  019C                     	;# 
  1156  019D                     	;# 
  1157  019D                     	;# 
  1158  019D                     	;# 
  1159  019E                     	;# 
  1160  019E                     	;# 
  1161  019E                     	;# 
  1162  019F                     	;# 
  1163  019F                     	;# 
  1164  019F                     	;# 
  1165  019F                     	;# 
  1166  019F                     	;# 
  1167  020C                     	;# 
  1168  020D                     	;# 
  1169  020E                     	;# 
  1170  0211                     	;# 
  1171  0211                     	;# 
  1172  0212                     	;# 
  1173  0212                     	;# 
  1174  0213                     	;# 
  1175  0213                     	;# 
  1176  0214                     	;# 
  1177  0214                     	;# 
  1178  0215                     	;# 
  1179  0215                     	;# 
  1180  0215                     	;# 
  1181  0215                     	;# 
  1182  0216                     	;# 
  1183  0216                     	;# 
  1184  0217                     	;# 
  1185  0217                     	;# 
  1186  028C                     	;# 
  1187  028D                     	;# 
  1188  028E                     	;# 
  1189  0291                     	;# 
  1190  0291                     	;# 
  1191  0292                     	;# 
  1192  0293                     	;# 
  1193  0294                     	;# 
  1194  0298                     	;# 
  1195  0298                     	;# 
  1196  0299                     	;# 
  1197  029A                     	;# 
  1198  029B                     	;# 
  1199  029E                     	;# 
  1200  030C                     	;# 
  1201  030D                     	;# 
  1202  030E                     	;# 
  1203  038C                     	;# 
  1204  038D                     	;# 
  1205  038E                     	;# 
  1206  0391                     	;# 
  1207  0392                     	;# 
  1208  0393                     	;# 
  1209  0394                     	;# 
  1210  0395                     	;# 
  1211  0396                     	;# 
  1212  0397                     	;# 
  1213  0398                     	;# 
  1214  0399                     	;# 
  1215  040E                     	;# 
  1216  0413                     	;# 
  1217  0413                     	;# 
  1218  0414                     	;# 
  1219  0414                     	;# 
  1220  0415                     	;# 
  1221  0416                     	;# 
  1222  0417                     	;# 
  1223  0418                     	;# 
  1224  041A                     	;# 
  1225  041A                     	;# 
  1226  041B                     	;# 
  1227  041B                     	;# 
  1228  041C                     	;# 
  1229  041D                     	;# 
  1230  041E                     	;# 
  1231  041F                     	;# 
  1232  0493                     	;# 
  1233  0494                     	;# 
  1234  0495                     	;# 
  1235  0496                     	;# 
  1236  049A                     	;# 
  1237  049B                     	;# 
  1238  049C                     	;# 
  1239  049D                     	;# 
  1240  058C                     	;# 
  1241  058C                     	;# 
  1242  058D                     	;# 
  1243  058E                     	;# 
  1244  058E                     	;# 
  1245  058F                     	;# 
  1246  0590                     	;# 
  1247  0590                     	;# 
  1248  0591                     	;# 
  1249  0592                     	;# 
  1250  0592                     	;# 
  1251  0593                     	;# 
  1252  0594                     	;# 
  1253  0594                     	;# 
  1254  0595                     	;# 
  1255  0596                     	;# 
  1256  0596                     	;# 
  1257  0597                     	;# 
  1258  0598                     	;# 
  1259  0599                     	;# 
  1260  059A                     	;# 
  1261  059B                     	;# 
  1262  059B                     	;# 
  1263  059C                     	;# 
  1264  059D                     	;# 
  1265  060C                     	;# 
  1266  060C                     	;# 
  1267  060D                     	;# 
  1268  060E                     	;# 
  1269  060F                     	;# 
  1270  060F                     	;# 
  1271  0610                     	;# 
  1272  0611                     	;# 
  1273  0612                     	;# 
  1274  0613                     	;# 
  1275  0614                     	;# 
  1276  0617                     	;# 
  1277  0618                     	;# 
  1278  0619                     	;# 
  1279  061A                     	;# 
  1280  061B                     	;# 
  1281  061C                     	;# 
  1282  0691                     	;# 
  1283  0692                     	;# 
  1284  0693                     	;# 
  1285  0694                     	;# 
  1286  0695                     	;# 
  1287  0696                     	;# 
  1288  0697                     	;# 
  1289  0699                     	;# 
  1290  069A                     	;# 
  1291  0711                     	;# 
  1292  0712                     	;# 
  1293  0713                     	;# 
  1294  0714                     	;# 
  1295  0715                     	;# 
  1296  0718                     	;# 
  1297  0718                     	;# 
  1298  0719                     	;# 
  1299  071A                     	;# 
  1300  071A                     	;# 
  1301  071B                     	;# 
  1302  071C                     	;# 
  1303  071D                     	;# 
  1304  0791                     	;# 
  1305  0791                     	;# 
  1306  0792                     	;# 
  1307  0793                     	;# 
  1308  0793                     	;# 
  1309  0794                     	;# 
  1310  0795                     	;# 
  1311  0795                     	;# 
  1312  0796                     	;# 
  1313  0797                     	;# 
  1314  0797                     	;# 
  1315  0798                     	;# 
  1316  0799                     	;# 
  1317  079A                     	;# 
  1318  080C                     	;# 
  1319  080C                     	;# 
  1320  080D                     	;# 
  1321  080E                     	;# 
  1322  080E                     	;# 
  1323  080F                     	;# 
  1324  0810                     	;# 
  1325  0810                     	;# 
  1326  0811                     	;# 
  1327  0812                     	;# 
  1328  0812                     	;# 
  1329  0813                     	;# 
  1330  0814                     	;# 
  1331  0815                     	;# 
  1332  0816                     	;# 
  1333  0817                     	;# 
  1334  0818                     	;# 
  1335  0819                     	;# 
  1336  081A                     	;# 
  1337  081A                     	;# 
  1338  081B                     	;# 
  1339  081C                     	;# 
  1340  081C                     	;# 
  1341  081D                     	;# 
  1342  088C                     	;# 
  1343  088D                     	;# 
  1344  088E                     	;# 
  1345  088F                     	;# 
  1346  088F                     	;# 
  1347  0890                     	;# 
  1348  0891                     	;# 
  1349  0892                     	;# 
  1350  0893                     	;# 
  1351  0893                     	;# 
  1352  0894                     	;# 
  1353  0895                     	;# 
  1354  0896                     	;# 
  1355  0897                     	;# 
  1356  0897                     	;# 
  1357  0898                     	;# 
  1358  0899                     	;# 
  1359  0D8C                     	;# 
  1360  0D8C                     	;# 
  1361  0D8D                     	;# 
  1362  0D8E                     	;# 
  1363  0D8F                     	;# 
  1364  0D8F                     	;# 
  1365  0D90                     	;# 
  1366  0D91                     	;# 
  1367  0D92                     	;# 
  1368  0D92                     	;# 
  1369  0D93                     	;# 
  1370  0D94                     	;# 
  1371  0D95                     	;# 
  1372  0D95                     	;# 
  1373  0D96                     	;# 
  1374  0D97                     	;# 
  1375  0D98                     	;# 
  1376  0D99                     	;# 
  1377  0D9A                     	;# 
  1378  0D9B                     	;# 
  1379  0D9C                     	;# 
  1380  0D9D                     	;# 
  1381  0D9E                     	;# 
  1382  0D9E                     	;# 
  1383  0D9F                     	;# 
  1384  0DA0                     	;# 
  1385  0DA1                     	;# 
  1386  0DA1                     	;# 
  1387  0DA2                     	;# 
  1388  0DA3                     	;# 
  1389  0DA4                     	;# 
  1390  0DA4                     	;# 
  1391  0DA5                     	;# 
  1392  0DA6                     	;# 
  1393  0DA7                     	;# 
  1394  0DA7                     	;# 
  1395  0DA8                     	;# 
  1396  0DA9                     	;# 
  1397  0DAA                     	;# 
  1398  0DAB                     	;# 
  1399  0DAC                     	;# 
  1400  0DAD                     	;# 
  1401  0DAE                     	;# 
  1402  0DAF                     	;# 
  1403  0E0F                     	;# 
  1404  0E10                     	;# 
  1405  0E11                     	;# 
  1406  0E12                     	;# 
  1407  0E13                     	;# 
  1408  0E14                     	;# 
  1409  0E15                     	;# 
  1410  0E16                     	;# 
  1411  0E17                     	;# 
  1412  0E18                     	;# 
  1413  0E19                     	;# 
  1414  0E1A                     	;# 
  1415  0E1B                     	;# 
  1416  0E1C                     	;# 
  1417  0E1D                     	;# 
  1418  0E1E                     	;# 
  1419  0E1F                     	;# 
  1420  0E20                     	;# 
  1421  0E21                     	;# 
  1422  0E22                     	;# 
  1423  0E23                     	;# 
  1424  0E24                     	;# 
  1425  0E25                     	;# 
  1426  0E26                     	;# 
  1427  0E27                     	;# 
  1428  0E28                     	;# 
  1429  0E29                     	;# 
  1430  0E2A                     	;# 
  1431  0E2B                     	;# 
  1432  0E2C                     	;# 
  1433  0E2D                     	;# 
  1434  0E2E                     	;# 
  1435  0E90                     	;# 
  1436  0E91                     	;# 
  1437  0E92                     	;# 
  1438  0E94                     	;# 
  1439  0E95                     	;# 
  1440  0E9C                     	;# 
  1441  0E9D                     	;# 
  1442  0E9E                     	;# 
  1443  0E9F                     	;# 
  1444  0EA0                     	;# 
  1445  0EA1                     	;# 
  1446  0EA2                     	;# 
  1447  0EA3                     	;# 
  1448  0EA4                     	;# 
  1449  0EA5                     	;# 
  1450  0EA6                     	;# 
  1451  0EA7                     	;# 
  1452  0F0F                     	;# 
  1453  0F10                     	;# 
  1454  0F11                     	;# 
  1455  0F12                     	;# 
  1456  0F13                     	;# 
  1457  0F14                     	;# 
  1458  0F15                     	;# 
  1459  0F16                     	;# 
  1460  0F17                     	;# 
  1461  0F18                     	;# 
  1462  0F19                     	;# 
  1463  0F1A                     	;# 
  1464  0F1B                     	;# 
  1465  0F1C                     	;# 
  1466  0F1D                     	;# 
  1467  0F1E                     	;# 
  1468  0F1F                     	;# 
  1469  0F20                     	;# 
  1470  0F21                     	;# 
  1471  0F22                     	;# 
  1472  0F23                     	;# 
  1473  0F24                     	;# 
  1474  0F25                     	;# 
  1475  0F26                     	;# 
  1476  0F27                     	;# 
  1477  0F28                     	;# 
  1478  0F29                     	;# 
  1479  0F2A                     	;# 
  1480  0F2B                     	;# 
  1481  0F2C                     	;# 
  1482  0F2D                     	;# 
  1483  0F2E                     	;# 
  1484  0F2F                     	;# 
  1485  0F30                     	;# 
  1486  0F31                     	;# 
  1487  0F32                     	;# 
  1488  0F33                     	;# 
  1489  0F34                     	;# 
  1490  0F35                     	;# 
  1491  0F36                     	;# 
  1492  0F37                     	;# 
  1493  0FE4                     	;# 
  1494  0FE5                     	;# 
  1495  0FE6                     	;# 
  1496  0FE7                     	;# 
  1497  0FE8                     	;# 
  1498  0FE9                     	;# 
  1499  0FEA                     	;# 
  1500  0FEB                     	;# 
  1501  0FED                     	;# 
  1502  0FEE                     	;# 
  1503  0FEF                     	;# 
  1504  0000                     	;# 
  1505  0001                     	;# 
  1506  0002                     	;# 
  1507  0003                     	;# 
  1508  0004                     	;# 
  1509  0005                     	;# 
  1510  0006                     	;# 
  1511  0007                     	;# 
  1512  0008                     	;# 
  1513  0009                     	;# 
  1514  000A                     	;# 
  1515  000B                     	;# 
  1516  000C                     	;# 
  1517  000D                     	;# 
  1518  000E                     	;# 
  1519  0010                     	;# 
  1520  0011                     	;# 
  1521  0012                     	;# 
  1522  0013                     	;# 
  1523  0014                     	;# 
  1524  0015                     	;# 
  1525  0016                     	;# 
  1526  0016                     	;# 
  1527  0017                     	;# 
  1528  0018                     	;# 
  1529  0019                     	;# 
  1530  001A                     	;# 
  1531  001A                     	;# 
  1532  001B                     	;# 
  1533  001B                     	;# 
  1534  001C                     	;# 
  1535  001D                     	;# 
  1536  001E                     	;# 
  1537  001F                     	;# 
  1538  008C                     	;# 
  1539  008D                     	;# 
  1540  008E                     	;# 
  1541  0090                     	;# 
  1542  0091                     	;# 
  1543  0092                     	;# 
  1544  0093                     	;# 
  1545  0094                     	;# 
  1546  0095                     	;# 
  1547  0096                     	;# 
  1548  0098                     	;# 
  1549  0099                     	;# 
  1550  009A                     	;# 
  1551  009B                     	;# 
  1552  009B                     	;# 
  1553  009C                     	;# 
  1554  009D                     	;# 
  1555  009E                     	;# 
  1556  009F                     	;# 
  1557  010C                     	;# 
  1558  010D                     	;# 
  1559  010E                     	;# 
  1560  0111                     	;# 
  1561  0112                     	;# 
  1562  0113                     	;# 
  1563  0114                     	;# 
  1564  0115                     	;# 
  1565  0116                     	;# 
  1566  0117                     	;# 
  1567  0118                     	;# 
  1568  0119                     	;# 
  1569  011C                     	;# 
  1570  018C                     	;# 
  1571  018D                     	;# 
  1572  018E                     	;# 
  1573  0191                     	;# 
  1574  0191                     	;# 
  1575  0192                     	;# 
  1576  0193                     	;# 
  1577  0193                     	;# 
  1578  0194                     	;# 
  1579  0195                     	;# 
  1580  0196                     	;# 
  1581  0197                     	;# 
  1582  0199                     	;# 
  1583  0199                     	;# 
  1584  0199                     	;# 
  1585  019A                     	;# 
  1586  019A                     	;# 
  1587  019A                     	;# 
  1588  019B                     	;# 
  1589  019B                     	;# 
  1590  019B                     	;# 
  1591  019B                     	;# 
  1592  019B                     	;# 
  1593  019C                     	;# 
  1594  019C                     	;# 
  1595  019C                     	;# 
  1596  019D                     	;# 
  1597  019D                     	;# 
  1598  019D                     	;# 
  1599  019E                     	;# 
  1600  019E                     	;# 
  1601  019E                     	;# 
  1602  019F                     	;# 
  1603  019F                     	;# 
  1604  019F                     	;# 
  1605  019F                     	;# 
  1606  019F                     	;# 
  1607  020C                     	;# 
  1608  020D                     	;# 
  1609  020E                     	;# 
  1610  0211                     	;# 
  1611  0211                     	;# 
  1612  0212                     	;# 
  1613  0212                     	;# 
  1614  0213                     	;# 
  1615  0213                     	;# 
  1616  0214                     	;# 
  1617  0214                     	;# 
  1618  0215                     	;# 
  1619  0215                     	;# 
  1620  0215                     	;# 
  1621  0215                     	;# 
  1622  0216                     	;# 
  1623  0216                     	;# 
  1624  0217                     	;# 
  1625  0217                     	;# 
  1626  028C                     	;# 
  1627  028D                     	;# 
  1628  028E                     	;# 
  1629  0291                     	;# 
  1630  0291                     	;# 
  1631  0292                     	;# 
  1632  0293                     	;# 
  1633  0294                     	;# 
  1634  0298                     	;# 
  1635  0298                     	;# 
  1636  0299                     	;# 
  1637  029A                     	;# 
  1638  029B                     	;# 
  1639  029E                     	;# 
  1640  030C                     	;# 
  1641  030D                     	;# 
  1642  030E                     	;# 
  1643  038C                     	;# 
  1644  038D                     	;# 
  1645  038E                     	;# 
  1646  0391                     	;# 
  1647  0392                     	;# 
  1648  0393                     	;# 
  1649  0394                     	;# 
  1650  0395                     	;# 
  1651  0396                     	;# 
  1652  0397                     	;# 
  1653  0398                     	;# 
  1654  0399                     	;# 
  1655  040E                     	;# 
  1656  0413                     	;# 
  1657  0413                     	;# 
  1658  0414                     	;# 
  1659  0414                     	;# 
  1660  0415                     	;# 
  1661  0416                     	;# 
  1662  0417                     	;# 
  1663  0418                     	;# 
  1664  041A                     	;# 
  1665  041A                     	;# 
  1666  041B                     	;# 
  1667  041B                     	;# 
  1668  041C                     	;# 
  1669  041D                     	;# 
  1670  041E                     	;# 
  1671  041F                     	;# 
  1672  0493                     	;# 
  1673  0494                     	;# 
  1674  0495                     	;# 
  1675  0496                     	;# 
  1676  049A                     	;# 
  1677  049B                     	;# 
  1678  049C                     	;# 
  1679  049D                     	;# 
  1680  058C                     	;# 
  1681  058C                     	;# 
  1682  058D                     	;# 
  1683  058E                     	;# 
  1684  058E                     	;# 
  1685  058F                     	;# 
  1686  0590                     	;# 
  1687  0590                     	;# 
  1688  0591                     	;# 
  1689  0592                     	;# 
  1690  0592                     	;# 
  1691  0593                     	;# 
  1692  0594                     	;# 
  1693  0594                     	;# 
  1694  0595                     	;# 
  1695  0596                     	;# 
  1696  0596                     	;# 
  1697  0597                     	;# 
  1698  0598                     	;# 
  1699  0599                     	;# 
  1700  059A                     	;# 
  1701  059B                     	;# 
  1702  059B                     	;# 
  1703  059C                     	;# 
  1704  059D                     	;# 
  1705  060C                     	;# 
  1706  060C                     	;# 
  1707  060D                     	;# 
  1708  060E                     	;# 
  1709  060F                     	;# 
  1710  060F                     	;# 
  1711  0610                     	;# 
  1712  0611                     	;# 
  1713  0612                     	;# 
  1714  0613                     	;# 
  1715  0614                     	;# 
  1716  0617                     	;# 
  1717  0618                     	;# 
  1718  0619                     	;# 
  1719  061A                     	;# 
  1720  061B                     	;# 
  1721  061C                     	;# 
  1722  0691                     	;# 
  1723  0692                     	;# 
  1724  0693                     	;# 
  1725  0694                     	;# 
  1726  0695                     	;# 
  1727  0696                     	;# 
  1728  0697                     	;# 
  1729  0699                     	;# 
  1730  069A                     	;# 
  1731  0711                     	;# 
  1732  0712                     	;# 
  1733  0713                     	;# 
  1734  0714                     	;# 
  1735  0715                     	;# 
  1736  0718                     	;# 
  1737  0718                     	;# 
  1738  0719                     	;# 
  1739  071A                     	;# 
  1740  071A                     	;# 
  1741  071B                     	;# 
  1742  071C                     	;# 
  1743  071D                     	;# 
  1744  0791                     	;# 
  1745  0791                     	;# 
  1746  0792                     	;# 
  1747  0793                     	;# 
  1748  0793                     	;# 
  1749  0794                     	;# 
  1750  0795                     	;# 
  1751  0795                     	;# 
  1752  0796                     	;# 
  1753  0797                     	;# 
  1754  0797                     	;# 
  1755  0798                     	;# 
  1756  0799                     	;# 
  1757  079A                     	;# 
  1758  080C                     	;# 
  1759  080C                     	;# 
  1760  080D                     	;# 
  1761  080E                     	;# 
  1762  080E                     	;# 
  1763  080F                     	;# 
  1764  0810                     	;# 
  1765  0810                     	;# 
  1766  0811                     	;# 
  1767  0812                     	;# 
  1768  0812                     	;# 
  1769  0813                     	;# 
  1770  0814                     	;# 
  1771  0815                     	;# 
  1772  0816                     	;# 
  1773  0817                     	;# 
  1774  0818                     	;# 
  1775  0819                     	;# 
  1776  081A                     	;# 
  1777  081A                     	;# 
  1778  081B                     	;# 
  1779  081C                     	;# 
  1780  081C                     	;# 
  1781  081D                     	;# 
  1782  088C                     	;# 
  1783  088D                     	;# 
  1784  088E                     	;# 
  1785  088F                     	;# 
  1786  088F                     	;# 
  1787  0890                     	;# 
  1788  0891                     	;# 
  1789  0892                     	;# 
  1790  0893                     	;# 
  1791  0893                     	;# 
  1792  0894                     	;# 
  1793  0895                     	;# 
  1794  0896                     	;# 
  1795  0897                     	;# 
  1796  0897                     	;# 
  1797  0898                     	;# 
  1798  0899                     	;# 
  1799  0D8C                     	;# 
  1800  0D8C                     	;# 
  1801  0D8D                     	;# 
  1802  0D8E                     	;# 
  1803  0D8F                     	;# 
  1804  0D8F                     	;# 
  1805  0D90                     	;# 
  1806  0D91                     	;# 
  1807  0D92                     	;# 
  1808  0D92                     	;# 
  1809  0D93                     	;# 
  1810  0D94                     	;# 
  1811  0D95                     	;# 
  1812  0D95                     	;# 
  1813  0D96                     	;# 
  1814  0D97                     	;# 
  1815  0D98                     	;# 
  1816  0D99                     	;# 
  1817  0D9A                     	;# 
  1818  0D9B                     	;# 
  1819  0D9C                     	;# 
  1820  0D9D                     	;# 
  1821  0D9E                     	;# 
  1822  0D9E                     	;# 
  1823  0D9F                     	;# 
  1824  0DA0                     	;# 
  1825  0DA1                     	;# 
  1826  0DA1                     	;# 
  1827  0DA2                     	;# 
  1828  0DA3                     	;# 
  1829  0DA4                     	;# 
  1830  0DA4                     	;# 
  1831  0DA5                     	;# 
  1832  0DA6                     	;# 
  1833  0DA7                     	;# 
  1834  0DA7                     	;# 
  1835  0DA8                     	;# 
  1836  0DA9                     	;# 
  1837  0DAA                     	;# 
  1838  0DAB                     	;# 
  1839  0DAC                     	;# 
  1840  0DAD                     	;# 
  1841  0DAE                     	;# 
  1842  0DAF                     	;# 
  1843  0E0F                     	;# 
  1844  0E10                     	;# 
  1845  0E11                     	;# 
  1846  0E12                     	;# 
  1847  0E13                     	;# 
  1848  0E14                     	;# 
  1849  0E15                     	;# 
  1850  0E16                     	;# 
  1851  0E17                     	;# 
  1852  0E18                     	;# 
  1853  0E19                     	;# 
  1854  0E1A                     	;# 
  1855  0E1B                     	;# 
  1856  0E1C                     	;# 
  1857  0E1D                     	;# 
  1858  0E1E                     	;# 
  1859  0E1F                     	;# 
  1860  0E20                     	;# 
  1861  0E21                     	;# 
  1862  0E22                     	;# 
  1863  0E23                     	;# 
  1864  0E24                     	;# 
  1865  0E25                     	;# 
  1866  0E26                     	;# 
  1867  0E27                     	;# 
  1868  0E28                     	;# 
  1869  0E29                     	;# 
  1870  0E2A                     	;# 
  1871  0E2B                     	;# 
  1872  0E2C                     	;# 
  1873  0E2D                     	;# 
  1874  0E2E                     	;# 
  1875  0E90                     	;# 
  1876  0E91                     	;# 
  1877  0E92                     	;# 
  1878  0E94                     	;# 
  1879  0E95                     	;# 
  1880  0E9C                     	;# 
  1881  0E9D                     	;# 
  1882  0E9E                     	;# 
  1883  0E9F                     	;# 
  1884  0EA0                     	;# 
  1885  0EA1                     	;# 
  1886  0EA2                     	;# 
  1887  0EA3                     	;# 
  1888  0EA4                     	;# 
  1889  0EA5                     	;# 
  1890  0EA6                     	;# 
  1891  0EA7                     	;# 
  1892  0F0F                     	;# 
  1893  0F10                     	;# 
  1894  0F11                     	;# 
  1895  0F12                     	;# 
  1896  0F13                     	;# 
  1897  0F14                     	;# 
  1898  0F15                     	;# 
  1899  0F16                     	;# 
  1900  0F17                     	;# 
  1901  0F18                     	;# 
  1902  0F19                     	;# 
  1903  0F1A                     	;# 
  1904  0F1B                     	;# 
  1905  0F1C                     	;# 
  1906  0F1D                     	;# 
  1907  0F1E                     	;# 
  1908  0F1F                     	;# 
  1909  0F20                     	;# 
  1910  0F21                     	;# 
  1911  0F22                     	;# 
  1912  0F23                     	;# 
  1913  0F24                     	;# 
  1914  0F25                     	;# 
  1915  0F26                     	;# 
  1916  0F27                     	;# 
  1917  0F28                     	;# 
  1918  0F29                     	;# 
  1919  0F2A                     	;# 
  1920  0F2B                     	;# 
  1921  0F2C                     	;# 
  1922  0F2D                     	;# 
  1923  0F2E                     	;# 
  1924  0F2F                     	;# 
  1925  0F30                     	;# 
  1926  0F31                     	;# 
  1927  0F32                     	;# 
  1928  0F33                     	;# 
  1929  0F34                     	;# 
  1930  0F35                     	;# 
  1931  0F36                     	;# 
  1932  0F37                     	;# 
  1933  0FE4                     	;# 
  1934  0FE5                     	;# 
  1935  0FE6                     	;# 
  1936  0FE7                     	;# 
  1937  0FE8                     	;# 
  1938  0FE9                     	;# 
  1939  0FEA                     	;# 
  1940  0FEB                     	;# 
  1941  0FED                     	;# 
  1942  0FEE                     	;# 
  1943  0FEF                     	;# 
  1944  0000                     	;# 
  1945  0001                     	;# 
  1946  0002                     	;# 
  1947  0003                     	;# 
  1948  0004                     	;# 
  1949  0005                     	;# 
  1950  0006                     	;# 
  1951  0007                     	;# 
  1952  0008                     	;# 
  1953  0009                     	;# 
  1954  000A                     	;# 
  1955  000B                     	;# 
  1956  000C                     	;# 
  1957  000D                     	;# 
  1958  000E                     	;# 
  1959  0010                     	;# 
  1960  0011                     	;# 
  1961  0012                     	;# 
  1962  0013                     	;# 
  1963  0014                     	;# 
  1964  0015                     	;# 
  1965  0016                     	;# 
  1966  0016                     	;# 
  1967  0017                     	;# 
  1968  0018                     	;# 
  1969  0019                     	;# 
  1970  001A                     	;# 
  1971  001A                     	;# 
  1972  001B                     	;# 
  1973  001B                     	;# 
  1974  001C                     	;# 
  1975  001D                     	;# 
  1976  001E                     	;# 
  1977  001F                     	;# 
  1978  008C                     	;# 
  1979  008D                     	;# 
  1980  008E                     	;# 
  1981  0090                     	;# 
  1982  0091                     	;# 
  1983  0092                     	;# 
  1984  0093                     	;# 
  1985  0094                     	;# 
  1986  0095                     	;# 
  1987  0096                     	;# 
  1988  0098                     	;# 
  1989  0099                     	;# 
  1990  009A                     	;# 
  1991  009B                     	;# 
  1992  009B                     	;# 
  1993  009C                     	;# 
  1994  009D                     	;# 
  1995  009E                     	;# 
  1996  009F                     	;# 
  1997  010C                     	;# 
  1998  010D                     	;# 
  1999  010E                     	;# 
  2000  0111                     	;# 
  2001  0112                     	;# 
  2002  0113                     	;# 
  2003  0114                     	;# 
  2004  0115                     	;# 
  2005  0116                     	;# 
  2006  0117                     	;# 
  2007  0118                     	;# 
  2008  0119                     	;# 
  2009  011C                     	;# 
  2010  018C                     	;# 
  2011  018D                     	;# 
  2012  018E                     	;# 
  2013  0191                     	;# 
  2014  0191                     	;# 
  2015  0192                     	;# 
  2016  0193                     	;# 
  2017  0193                     	;# 
  2018  0194                     	;# 
  2019  0195                     	;# 
  2020  0196                     	;# 
  2021  0197                     	;# 
  2022  0199                     	;# 
  2023  0199                     	;# 
  2024  0199                     	;# 
  2025  019A                     	;# 
  2026  019A                     	;# 
  2027  019A                     	;# 
  2028  019B                     	;# 
  2029  019B                     	;# 
  2030  019B                     	;# 
  2031  019B                     	;# 
  2032  019B                     	;# 
  2033  019C                     	;# 
  2034  019C                     	;# 
  2035  019C                     	;# 
  2036  019D                     	;# 
  2037  019D                     	;# 
  2038  019D                     	;# 
  2039  019E                     	;# 
  2040  019E                     	;# 
  2041  019E                     	;# 
  2042  019F                     	;# 
  2043  019F                     	;# 
  2044  019F                     	;# 
  2045  019F                     	;# 
  2046  019F                     	;# 
  2047  020C                     	;# 
  2048  020D                     	;# 
  2049  020E                     	;# 
  2050  0211                     	;# 
  2051  0211                     	;# 
  2052  0212                     	;# 
  2053  0212                     	;# 
  2054  0213                     	;# 
  2055  0213                     	;# 
  2056  0214                     	;# 
  2057  0214                     	;# 
  2058  0215                     	;# 
  2059  0215                     	;# 
  2060  0215                     	;# 
  2061  0215                     	;# 
  2062  0216                     	;# 
  2063  0216                     	;# 
  2064  0217                     	;# 
  2065  0217                     	;# 
  2066  028C                     	;# 
  2067  028D                     	;# 
  2068  028E                     	;# 
  2069  0291                     	;# 
  2070  0291                     	;# 
  2071  0292                     	;# 
  2072  0293                     	;# 
  2073  0294                     	;# 
  2074  0298                     	;# 
  2075  0298                     	;# 
  2076  0299                     	;# 
  2077  029A                     	;# 
  2078  029B                     	;# 
  2079  029E                     	;# 
  2080  030C                     	;# 
  2081  030D                     	;# 
  2082  030E                     	;# 
  2083  038C                     	;# 
  2084  038D                     	;# 
  2085  038E                     	;# 
  2086  0391                     	;# 
  2087  0392                     	;# 
  2088  0393                     	;# 
  2089  0394                     	;# 
  2090  0395                     	;# 
  2091  0396                     	;# 
  2092  0397                     	;# 
  2093  0398                     	;# 
  2094  0399                     	;# 
  2095  040E                     	;# 
  2096  0413                     	;# 
  2097  0413                     	;# 
  2098  0414                     	;# 
  2099  0414                     	;# 
  2100  0415                     	;# 
  2101  0416                     	;# 
  2102  0417                     	;# 
  2103  0418                     	;# 
  2104  041A                     	;# 
  2105  041A                     	;# 
  2106  041B                     	;# 
  2107  041B                     	;# 
  2108  041C                     	;# 
  2109  041D                     	;# 
  2110  041E                     	;# 
  2111  041F                     	;# 
  2112  0493                     	;# 
  2113  0494                     	;# 
  2114  0495                     	;# 
  2115  0496                     	;# 
  2116  049A                     	;# 
  2117  049B                     	;# 
  2118  049C                     	;# 
  2119  049D                     	;# 
  2120  058C                     	;# 
  2121  058C                     	;# 
  2122  058D                     	;# 
  2123  058E                     	;# 
  2124  058E                     	;# 
  2125  058F                     	;# 
  2126  0590                     	;# 
  2127  0590                     	;# 
  2128  0591                     	;# 
  2129  0592                     	;# 
  2130  0592                     	;# 
  2131  0593                     	;# 
  2132  0594                     	;# 
  2133  0594                     	;# 
  2134  0595                     	;# 
  2135  0596                     	;# 
  2136  0596                     	;# 
  2137  0597                     	;# 
  2138  0598                     	;# 
  2139  0599                     	;# 
  2140  059A                     	;# 
  2141  059B                     	;# 
  2142  059B                     	;# 
  2143  059C                     	;# 
  2144  059D                     	;# 
  2145  060C                     	;# 
  2146  060C                     	;# 
  2147  060D                     	;# 
  2148  060E                     	;# 
  2149  060F                     	;# 
  2150  060F                     	;# 
  2151  0610                     	;# 
  2152  0611                     	;# 
  2153  0612                     	;# 
  2154  0613                     	;# 
  2155  0614                     	;# 
  2156  0617                     	;# 
  2157  0618                     	;# 
  2158  0619                     	;# 
  2159  061A                     	;# 
  2160  061B                     	;# 
  2161  061C                     	;# 
  2162  0691                     	;# 
  2163  0692                     	;# 
  2164  0693                     	;# 
  2165  0694                     	;# 
  2166  0695                     	;# 
  2167  0696                     	;# 
  2168  0697                     	;# 
  2169  0699                     	;# 
  2170  069A                     	;# 
  2171  0711                     	;# 
  2172  0712                     	;# 
  2173  0713                     	;# 
  2174  0714                     	;# 
  2175  0715                     	;# 
  2176  0718                     	;# 
  2177  0718                     	;# 
  2178  0719                     	;# 
  2179  071A                     	;# 
  2180  071A                     	;# 
  2181  071B                     	;# 
  2182  071C                     	;# 
  2183  071D                     	;# 
  2184  0791                     	;# 
  2185  0791                     	;# 
  2186  0792                     	;# 
  2187  0793                     	;# 
  2188  0793                     	;# 
  2189  0794                     	;# 
  2190  0795                     	;# 
  2191  0795                     	;# 
  2192  0796                     	;# 
  2193  0797                     	;# 
  2194  0797                     	;# 
  2195  0798                     	;# 
  2196  0799                     	;# 
  2197  079A                     	;# 
  2198  080C                     	;# 
  2199  080C                     	;# 
  2200  080D                     	;# 
  2201  080E                     	;# 
  2202  080E                     	;# 
  2203  080F                     	;# 
  2204  0810                     	;# 
  2205  0810                     	;# 
  2206  0811                     	;# 
  2207  0812                     	;# 
  2208  0812                     	;# 
  2209  0813                     	;# 
  2210  0814                     	;# 
  2211  0815                     	;# 
  2212  0816                     	;# 
  2213  0817                     	;# 
  2214  0818                     	;# 
  2215  0819                     	;# 
  2216  081A                     	;# 
  2217  081A                     	;# 
  2218  081B                     	;# 
  2219  081C                     	;# 
  2220  081C                     	;# 
  2221  081D                     	;# 
  2222  088C                     	;# 
  2223  088D                     	;# 
  2224  088E                     	;# 
  2225  088F                     	;# 
  2226  088F                     	;# 
  2227  0890                     	;# 
  2228  0891                     	;# 
  2229  0892                     	;# 
  2230  0893                     	;# 
  2231  0893                     	;# 
  2232  0894                     	;# 
  2233  0895                     	;# 
  2234  0896                     	;# 
  2235  0897                     	;# 
  2236  0897                     	;# 
  2237  0898                     	;# 
  2238  0899                     	;# 
  2239  0D8C                     	;# 
  2240  0D8C                     	;# 
  2241  0D8D                     	;# 
  2242  0D8E                     	;# 
  2243  0D8F                     	;# 
  2244  0D8F                     	;# 
  2245  0D90                     	;# 
  2246  0D91                     	;# 
  2247  0D92                     	;# 
  2248  0D92                     	;# 
  2249  0D93                     	;# 
  2250  0D94                     	;# 
  2251  0D95                     	;# 
  2252  0D95                     	;# 
  2253  0D96                     	;# 
  2254  0D97                     	;# 
  2255  0D98                     	;# 
  2256  0D99                     	;# 
  2257  0D9A                     	;# 
  2258  0D9B                     	;# 
  2259  0D9C                     	;# 
  2260  0D9D                     	;# 
  2261  0D9E                     	;# 
  2262  0D9E                     	;# 
  2263  0D9F                     	;# 
  2264  0DA0                     	;# 
  2265  0DA1                     	;# 
  2266  0DA1                     	;# 
  2267  0DA2                     	;# 
  2268  0DA3                     	;# 
  2269  0DA4                     	;# 
  2270  0DA4                     	;# 
  2271  0DA5                     	;# 
  2272  0DA6                     	;# 
  2273  0DA7                     	;# 
  2274  0DA7                     	;# 
  2275  0DA8                     	;# 
  2276  0DA9                     	;# 
  2277  0DAA                     	;# 
  2278  0DAB                     	;# 
  2279  0DAC                     	;# 
  2280  0DAD                     	;# 
  2281  0DAE                     	;# 
  2282  0DAF                     	;# 
  2283  0E0F                     	;# 
  2284  0E10                     	;# 
  2285  0E11                     	;# 
  2286  0E12                     	;# 
  2287  0E13                     	;# 
  2288  0E14                     	;# 
  2289  0E15                     	;# 
  2290  0E16                     	;# 
  2291  0E17                     	;# 
  2292  0E18                     	;# 
  2293  0E19                     	;# 
  2294  0E1A                     	;# 
  2295  0E1B                     	;# 
  2296  0E1C                     	;# 
  2297  0E1D                     	;# 
  2298  0E1E                     	;# 
  2299  0E1F                     	;# 
  2300  0E20                     	;# 
  2301  0E21                     	;# 
  2302  0E22                     	;# 
  2303  0E23                     	;# 
  2304  0E24                     	;# 
  2305  0E25                     	;# 
  2306  0E26                     	;# 
  2307  0E27                     	;# 
  2308  0E28                     	;# 
  2309  0E29                     	;# 
  2310  0E2A                     	;# 
  2311  0E2B                     	;# 
  2312  0E2C                     	;# 
  2313  0E2D                     	;# 
  2314  0E2E                     	;# 
  2315  0E90                     	;# 
  2316  0E91                     	;# 
  2317  0E92                     	;# 
  2318  0E94                     	;# 
  2319  0E95                     	;# 
  2320  0E9C                     	;# 
  2321  0E9D                     	;# 
  2322  0E9E                     	;# 
  2323  0E9F                     	;# 
  2324  0EA0                     	;# 
  2325  0EA1                     	;# 
  2326  0EA2                     	;# 
  2327  0EA3                     	;# 
  2328  0EA4                     	;# 
  2329  0EA5                     	;# 
  2330  0EA6                     	;# 
  2331  0EA7                     	;# 
  2332  0F0F                     	;# 
  2333  0F10                     	;# 
  2334  0F11                     	;# 
  2335  0F12                     	;# 
  2336  0F13                     	;# 
  2337  0F14                     	;# 
  2338  0F15                     	;# 
  2339  0F16                     	;# 
  2340  0F17                     	;# 
  2341  0F18                     	;# 
  2342  0F19                     	;# 
  2343  0F1A                     	;# 
  2344  0F1B                     	;# 
  2345  0F1C                     	;# 
  2346  0F1D                     	;# 
  2347  0F1E                     	;# 
  2348  0F1F                     	;# 
  2349  0F20                     	;# 
  2350  0F21                     	;# 
  2351  0F22                     	;# 
  2352  0F23                     	;# 
  2353  0F24                     	;# 
  2354  0F25                     	;# 
  2355  0F26                     	;# 
  2356  0F27                     	;# 
  2357  0F28                     	;# 
  2358  0F29                     	;# 
  2359  0F2A                     	;# 
  2360  0F2B                     	;# 
  2361  0F2C                     	;# 
  2362  0F2D                     	;# 
  2363  0F2E                     	;# 
  2364  0F2F                     	;# 
  2365  0F30                     	;# 
  2366  0F31                     	;# 
  2367  0F32                     	;# 
  2368  0F33                     	;# 
  2369  0F34                     	;# 
  2370  0F35                     	;# 
  2371  0F36                     	;# 
  2372  0F37                     	;# 
  2373  0FE4                     	;# 
  2374  0FE5                     	;# 
  2375  0FE6                     	;# 
  2376  0FE7                     	;# 
  2377  0FE8                     	;# 
  2378  0FE9                     	;# 
  2379  0FEA                     	;# 
  2380  0FEB                     	;# 
  2381  0FED                     	;# 
  2382  0FEE                     	;# 
  2383  0FEF                     	;# 
  2384  0000                     	;# 
  2385  0001                     	;# 
  2386  0002                     	;# 
  2387  0003                     	;# 
  2388  0004                     	;# 
  2389  0005                     	;# 
  2390  0006                     	;# 
  2391  0007                     	;# 
  2392  0008                     	;# 
  2393  0009                     	;# 
  2394  000A                     	;# 
  2395  000B                     	;# 
  2396  000C                     	;# 
  2397  000D                     	;# 
  2398  000E                     	;# 
  2399  0010                     	;# 
  2400  0011                     	;# 
  2401  0012                     	;# 
  2402  0013                     	;# 
  2403  0014                     	;# 
  2404  0015                     	;# 
  2405  0016                     	;# 
  2406  0016                     	;# 
  2407  0017                     	;# 
  2408  0018                     	;# 
  2409  0019                     	;# 
  2410  001A                     	;# 
  2411  001A                     	;# 
  2412  001B                     	;# 
  2413  001B                     	;# 
  2414  001C                     	;# 
  2415  001D                     	;# 
  2416  001E                     	;# 
  2417  001F                     	;# 
  2418  008C                     	;# 
  2419  008D                     	;# 
  2420  008E                     	;# 
  2421  0090                     	;# 
  2422  0091                     	;# 
  2423  0092                     	;# 
  2424  0093                     	;# 
  2425  0094                     	;# 
  2426  0095                     	;# 
  2427  0096                     	;# 
  2428  0098                     	;# 
  2429  0099                     	;# 
  2430  009A                     	;# 
  2431  009B                     	;# 
  2432  009B                     	;# 
  2433  009C                     	;# 
  2434  009D                     	;# 
  2435  009E                     	;# 
  2436  009F                     	;# 
  2437  010C                     	;# 
  2438  010D                     	;# 
  2439  010E                     	;# 
  2440  0111                     	;# 
  2441  0112                     	;# 
  2442  0113                     	;# 
  2443  0114                     	;# 
  2444  0115                     	;# 
  2445  0116                     	;# 
  2446  0117                     	;# 
  2447  0118                     	;# 
  2448  0119                     	;# 
  2449  011C                     	;# 
  2450  018C                     	;# 
  2451  018D                     	;# 
  2452  018E                     	;# 
  2453  0191                     	;# 
  2454  0191                     	;# 
  2455  0192                     	;# 
  2456  0193                     	;# 
  2457  0193                     	;# 
  2458  0194                     	;# 
  2459  0195                     	;# 
  2460  0196                     	;# 
  2461  0197                     	;# 
  2462  0199                     	;# 
  2463  0199                     	;# 
  2464  0199                     	;# 
  2465  019A                     	;# 
  2466  019A                     	;# 
  2467  019A                     	;# 
  2468  019B                     	;# 
  2469  019B                     	;# 
  2470  019B                     	;# 
  2471  019B                     	;# 
  2472  019B                     	;# 
  2473  019C                     	;# 
  2474  019C                     	;# 
  2475  019C                     	;# 
  2476  019D                     	;# 
  2477  019D                     	;# 
  2478  019D                     	;# 
  2479  019E                     	;# 
  2480  019E                     	;# 
  2481  019E                     	;# 
  2482  019F                     	;# 
  2483  019F                     	;# 
  2484  019F                     	;# 
  2485  019F                     	;# 
  2486  019F                     	;# 
  2487  020C                     	;# 
  2488  020D                     	;# 
  2489  020E                     	;# 
  2490  0211                     	;# 
  2491  0211                     	;# 
  2492  0212                     	;# 
  2493  0212                     	;# 
  2494  0213                     	;# 
  2495  0213                     	;# 
  2496  0214                     	;# 
  2497  0214                     	;# 
  2498  0215                     	;# 
  2499  0215                     	;# 
  2500  0215                     	;# 
  2501  0215                     	;# 
  2502  0216                     	;# 
  2503  0216                     	;# 
  2504  0217                     	;# 
  2505  0217                     	;# 
  2506  028C                     	;# 
  2507  028D                     	;# 
  2508  028E                     	;# 
  2509  0291                     	;# 
  2510  0291                     	;# 
  2511  0292                     	;# 
  2512  0293                     	;# 
  2513  0294                     	;# 
  2514  0298                     	;# 
  2515  0298                     	;# 
  2516  0299                     	;# 
  2517  029A                     	;# 
  2518  029B                     	;# 
  2519  029E                     	;# 
  2520  030C                     	;# 
  2521  030D                     	;# 
  2522  030E                     	;# 
  2523  038C                     	;# 
  2524  038D                     	;# 
  2525  038E                     	;# 
  2526  0391                     	;# 
  2527  0392                     	;# 
  2528  0393                     	;# 
  2529  0394                     	;# 
  2530  0395                     	;# 
  2531  0396                     	;# 
  2532  0397                     	;# 
  2533  0398                     	;# 
  2534  0399                     	;# 
  2535  040E                     	;# 
  2536  0413                     	;# 
  2537  0413                     	;# 
  2538  0414                     	;# 
  2539  0414                     	;# 
  2540  0415                     	;# 
  2541  0416                     	;# 
  2542  0417                     	;# 
  2543  0418                     	;# 
  2544  041A                     	;# 
  2545  041A                     	;# 
  2546  041B                     	;# 
  2547  041B                     	;# 
  2548  041C                     	;# 
  2549  041D                     	;# 
  2550  041E                     	;# 
  2551  041F                     	;# 
  2552  0493                     	;# 
  2553  0494                     	;# 
  2554  0495                     	;# 
  2555  0496                     	;# 
  2556  049A                     	;# 
  2557  049B                     	;# 
  2558  049C                     	;# 
  2559  049D                     	;# 
  2560  058C                     	;# 
  2561  058C                     	;# 
  2562  058D                     	;# 
  2563  058E                     	;# 
  2564  058E                     	;# 
  2565  058F                     	;# 
  2566  0590                     	;# 
  2567  0590                     	;# 
  2568  0591                     	;# 
  2569  0592                     	;# 
  2570  0592                     	;# 
  2571  0593                     	;# 
  2572  0594                     	;# 
  2573  0594                     	;# 
  2574  0595                     	;# 
  2575  0596                     	;# 
  2576  0596                     	;# 
  2577  0597                     	;# 
  2578  0598                     	;# 
  2579  0599                     	;# 
  2580  059A                     	;# 
  2581  059B                     	;# 
  2582  059B                     	;# 
  2583  059C                     	;# 
  2584  059D                     	;# 
  2585  060C                     	;# 
  2586  060C                     	;# 
  2587  060D                     	;# 
  2588  060E                     	;# 
  2589  060F                     	;# 
  2590  060F                     	;# 
  2591  0610                     	;# 
  2592  0611                     	;# 
  2593  0612                     	;# 
  2594  0613                     	;# 
  2595  0614                     	;# 
  2596  0617                     	;# 
  2597  0618                     	;# 
  2598  0619                     	;# 
  2599  061A                     	;# 
  2600  061B                     	;# 
  2601  061C                     	;# 
  2602  0691                     	;# 
  2603  0692                     	;# 
  2604  0693                     	;# 
  2605  0694                     	;# 
  2606  0695                     	;# 
  2607  0696                     	;# 
  2608  0697                     	;# 
  2609  0699                     	;# 
  2610  069A                     	;# 
  2611  0711                     	;# 
  2612  0712                     	;# 
  2613  0713                     	;# 
  2614  0714                     	;# 
  2615  0715                     	;# 
  2616  0718                     	;# 
  2617  0718                     	;# 
  2618  0719                     	;# 
  2619  071A                     	;# 
  2620  071A                     	;# 
  2621  071B                     	;# 
  2622  071C                     	;# 
  2623  071D                     	;# 
  2624  0791                     	;# 
  2625  0791                     	;# 
  2626  0792                     	;# 
  2627  0793                     	;# 
  2628  0793                     	;# 
  2629  0794                     	;# 
  2630  0795                     	;# 
  2631  0795                     	;# 
  2632  0796                     	;# 
  2633  0797                     	;# 
  2634  0797                     	;# 
  2635  0798                     	;# 
  2636  0799                     	;# 
  2637  079A                     	;# 
  2638  080C                     	;# 
  2639  080C                     	;# 
  2640  080D                     	;# 
  2641  080E                     	;# 
  2642  080E                     	;# 
  2643  080F                     	;# 
  2644  0810                     	;# 
  2645  0810                     	;# 
  2646  0811                     	;# 
  2647  0812                     	;# 
  2648  0812                     	;# 
  2649  0813                     	;# 
  2650  0814                     	;# 
  2651  0815                     	;# 
  2652  0816                     	;# 
  2653  0817                     	;# 
  2654  0818                     	;# 
  2655  0819                     	;# 
  2656  081A                     	;# 
  2657  081A                     	;# 
  2658  081B                     	;# 
  2659  081C                     	;# 
  2660  081C                     	;# 
  2661  081D                     	;# 
  2662  088C                     	;# 
  2663  088D                     	;# 
  2664  088E                     	;# 
  2665  088F                     	;# 
  2666  088F                     	;# 
  2667  0890                     	;# 
  2668  0891                     	;# 
  2669  0892                     	;# 
  2670  0893                     	;# 
  2671  0893                     	;# 
  2672  0894                     	;# 
  2673  0895                     	;# 
  2674  0896                     	;# 
  2675  0897                     	;# 
  2676  0897                     	;# 
  2677  0898                     	;# 
  2678  0899                     	;# 
  2679  0D8C                     	;# 
  2680  0D8C                     	;# 
  2681  0D8D                     	;# 
  2682  0D8E                     	;# 
  2683  0D8F                     	;# 
  2684  0D8F                     	;# 
  2685  0D90                     	;# 
  2686  0D91                     	;# 
  2687  0D92                     	;# 
  2688  0D92                     	;# 
  2689  0D93                     	;# 
  2690  0D94                     	;# 
  2691  0D95                     	;# 
  2692  0D95                     	;# 
  2693  0D96                     	;# 
  2694  0D97                     	;# 
  2695  0D98                     	;# 
  2696  0D99                     	;# 
  2697  0D9A                     	;# 
  2698  0D9B                     	;# 
  2699  0D9C                     	;# 
  2700  0D9D                     	;# 
  2701  0D9E                     	;# 
  2702  0D9E                     	;# 
  2703  0D9F                     	;# 
  2704  0DA0                     	;# 
  2705  0DA1                     	;# 
  2706  0DA1                     	;# 
  2707  0DA2                     	;# 
  2708  0DA3                     	;# 
  2709  0DA4                     	;# 
  2710  0DA4                     	;# 
  2711  0DA5                     	;# 
  2712  0DA6                     	;# 
  2713  0DA7                     	;# 
  2714  0DA7                     	;# 
  2715  0DA8                     	;# 
  2716  0DA9                     	;# 
  2717  0DAA                     	;# 
  2718  0DAB                     	;# 
  2719  0DAC                     	;# 
  2720  0DAD                     	;# 
  2721  0DAE                     	;# 
  2722  0DAF                     	;# 
  2723  0E0F                     	;# 
  2724  0E10                     	;# 
  2725  0E11                     	;# 
  2726  0E12                     	;# 
  2727  0E13                     	;# 
  2728  0E14                     	;# 
  2729  0E15                     	;# 
  2730  0E16                     	;# 
  2731  0E17                     	;# 
  2732  0E18                     	;# 
  2733  0E19                     	;# 
  2734  0E1A                     	;# 
  2735  0E1B                     	;# 
  2736  0E1C                     	;# 
  2737  0E1D                     	;# 
  2738  0E1E                     	;# 
  2739  0E1F                     	;# 
  2740  0E20                     	;# 
  2741  0E21                     	;# 
  2742  0E22                     	;# 
  2743  0E23                     	;# 
  2744  0E24                     	;# 
  2745  0E25                     	;# 
  2746  0E26                     	;# 
  2747  0E27                     	;# 
  2748  0E28                     	;# 
  2749  0E29                     	;# 
  2750  0E2A                     	;# 
  2751  0E2B                     	;# 
  2752  0E2C                     	;# 
  2753  0E2D                     	;# 
  2754  0E2E                     	;# 
  2755  0E90                     	;# 
  2756  0E91                     	;# 
  2757  0E92                     	;# 
  2758  0E94                     	;# 
  2759  0E95                     	;# 
  2760  0E9C                     	;# 
  2761  0E9D                     	;# 
  2762  0E9E                     	;# 
  2763  0E9F                     	;# 
  2764  0EA0                     	;# 
  2765  0EA1                     	;# 
  2766  0EA2                     	;# 
  2767  0EA3                     	;# 
  2768  0EA4                     	;# 
  2769  0EA5                     	;# 
  2770  0EA6                     	;# 
  2771  0EA7                     	;# 
  2772  0F0F                     	;# 
  2773  0F10                     	;# 
  2774  0F11                     	;# 
  2775  0F12                     	;# 
  2776  0F13                     	;# 
  2777  0F14                     	;# 
  2778  0F15                     	;# 
  2779  0F16                     	;# 
  2780  0F17                     	;# 
  2781  0F18                     	;# 
  2782  0F19                     	;# 
  2783  0F1A                     	;# 
  2784  0F1B                     	;# 
  2785  0F1C                     	;# 
  2786  0F1D                     	;# 
  2787  0F1E                     	;# 
  2788  0F1F                     	;# 
  2789  0F20                     	;# 
  2790  0F21                     	;# 
  2791  0F22                     	;# 
  2792  0F23                     	;# 
  2793  0F24                     	;# 
  2794  0F25                     	;# 
  2795  0F26                     	;# 
  2796  0F27                     	;# 
  2797  0F28                     	;# 
  2798  0F29                     	;# 
  2799  0F2A                     	;# 
  2800  0F2B                     	;# 
  2801  0F2C                     	;# 
  2802  0F2D                     	;# 
  2803  0F2E                     	;# 
  2804  0F2F                     	;# 
  2805  0F30                     	;# 
  2806  0F31                     	;# 
  2807  0F32                     	;# 
  2808  0F33                     	;# 
  2809  0F34                     	;# 
  2810  0F35                     	;# 
  2811  0F36                     	;# 
  2812  0F37                     	;# 
  2813  0FE4                     	;# 
  2814  0FE5                     	;# 
  2815  0FE6                     	;# 
  2816  0FE7                     	;# 
  2817  0FE8                     	;# 
  2818  0FE9                     	;# 
  2819  0FEA                     	;# 
  2820  0FEB                     	;# 
  2821  0FED                     	;# 
  2822  0FEE                     	;# 
  2823  0FEF                     	;# 
  2824                           
  2825                           	psect	idataBANK0
  2826  09BA                     __pidataBANK0:	
  2827                           
  2828                           ;initializer for _randx
  2829  09BA  3401               	retlw	1
  2830  09BB  3400               	retlw	0
  2831  09BC  3400               	retlw	0
  2832  09BD  3400               	retlw	0
  2833                           
  2834                           ;initializer for _fall
  2835  09BE  3401               	retlw	1
  2836                           
  2837                           	psect	idataBANK1
  2838  094D                     __pidataBANK1:	
  2839                           
  2840                           ;initializer for _wallColor
  2841  094D  3401               	retlw	1
  2842                           
  2843                           	psect	idataBANK2
  2844  0CA0                     __pidataBANK2:	
  2845                           
  2846                           ;initializer for _letter_o
  2847  0CA0  3400               	retlw	0
  2848  0CA1  347E               	retlw	126
  2849  0CA2  3442               	retlw	66
  2850  0CA3  3442               	retlw	66
  2851  0CA4  3442               	retlw	66
  2852  0CA5  3442               	retlw	66
  2853  0CA6  347E               	retlw	126
  2854  0CA7  3400               	retlw	0
  2855                           
  2856                           ;initializer for _letter_c
  2857  0CA8  3400               	retlw	0
  2858  0CA9  347E               	retlw	126
  2859  0CAA  3460               	retlw	96
  2860  0CAB  3460               	retlw	96
  2861  0CAC  3460               	retlw	96
  2862  0CAD  3460               	retlw	96
  2863  0CAE  347E               	retlw	126
  2864  0CAF  3400               	retlw	0
  2865                           
  2866                           ;initializer for _letter_s
  2867  0CB0  3400               	retlw	0
  2868  0CB1  347E               	retlw	126
  2869  0CB2  3440               	retlw	64
  2870  0CB3  3440               	retlw	64
  2871  0CB4  347E               	retlw	126
  2872  0CB5  3402               	retlw	2
  2873  0CB6  347E               	retlw	126
  2874  0CB7  3400               	retlw	0
  2875                           
  2876                           ;initializer for _letter_e
  2877  0CB8  3400               	retlw	0
  2878  0CB9  347C               	retlw	124
  2879  0CBA  3440               	retlw	64
  2880  0CBB  3470               	retlw	112
  2881  0CBC  3470               	retlw	112
  2882  0CBD  3440               	retlw	64
  2883  0CBE  347C               	retlw	124
  2884  0CBF  3400               	retlw	0
  2885                           
  2886                           	psect	idataBANK3
  2887  07D4                     __pidataBANK3:	
  2888                           
  2889                           ;initializer for _numberTable
  2890  07D4  3468               	retlw	low (_number_0| (0+512))
  2891  07D5  3460               	retlw	low (_number_1| (0+512))
  2892  07D6  3458               	retlw	low (_number_2| (0+512))
  2893  07D7  3450               	retlw	low (_number_3| (0+512))
  2894  07D8  3448               	retlw	low (_number_4| (0+512))
  2895  07D9  3440               	retlw	low (_number_5| (0+512))
  2896  07DA  3438               	retlw	low (_number_6| (0+512))
  2897  07DB  3430               	retlw	low (_number_7| (0+512))
  2898  07DC  3428               	retlw	low (_number_8| (0+512))
  2899  07DD  3420               	retlw	low (_number_9| (0+512))
  2900                           
  2901                           ;initializer for _letter_r
  2902  07DE  3400               	retlw	0
  2903  07DF  3478               	retlw	120
  2904  07E0  3448               	retlw	72
  2905  07E1  3478               	retlw	120
  2906  07E2  3460               	retlw	96
  2907  07E3  3450               	retlw	80
  2908  07E4  3448               	retlw	72
  2909  07E5  3400               	retlw	0
  2910                           
  2911                           ;initializer for _letter_hi
  2912  07E6  3400               	retlw	0
  2913  07E7  344A               	retlw	74
  2914  07E8  3448               	retlw	72
  2915  07E9  347A               	retlw	122
  2916  07EA  347A               	retlw	122
  2917  07EB  344A               	retlw	74
  2918  07EC  344A               	retlw	74
  2919  07ED  3400               	retlw	0
  2920                           
  2921                           ;initializer for _letter_w
  2922  07EE  3400               	retlw	0
  2923  07EF  3444               	retlw	68
  2924  07F0  3444               	retlw	68
  2925  07F1  3454               	retlw	84
  2926  07F2  3454               	retlw	84
  2927  07F3  3454               	retlw	84
  2928  07F4  347C               	retlw	124
  2929  07F5  3400               	retlw	0
  2930                           
  2931                           ;initializer for _letter_n
  2932  07F6  3400               	retlw	0
  2933  07F7  3442               	retlw	66
  2934  07F8  3462               	retlw	98
  2935  07F9  3452               	retlw	82
  2936  07FA  344A               	retlw	74
  2937  07FB  3446               	retlw	70
  2938  07FC  3442               	retlw	66
  2939  07FD  3400               	retlw	0
  2940                           
  2941                           	psect	idataBANK4
  2942  06A2                     __pidataBANK4:	
  2943                           
  2944                           ;initializer for _number_9
  2945  06A2  3400               	retlw	0
  2946  06A3  347E               	retlw	126
  2947  06A4  3442               	retlw	66
  2948  06A5  347E               	retlw	126
  2949  06A6  3402               	retlw	2
  2950  06A7  3402               	retlw	2
  2951  06A8  3402               	retlw	2
  2952  06A9  3400               	retlw	0
  2953                           
  2954                           ;initializer for _number_8
  2955  06AA  3400               	retlw	0
  2956  06AB  347E               	retlw	126
  2957  06AC  3442               	retlw	66
  2958  06AD  3442               	retlw	66
  2959  06AE  347E               	retlw	126
  2960  06AF  3442               	retlw	66
  2961  06B0  347E               	retlw	126
  2962  06B1  3400               	retlw	0
  2963                           
  2964                           ;initializer for _number_7
  2965  06B2  3400               	retlw	0
  2966  06B3  347E               	retlw	126
  2967  06B4  3402               	retlw	2
  2968  06B5  3402               	retlw	2
  2969  06B6  3402               	retlw	2
  2970  06B7  3402               	retlw	2
  2971  06B8  3402               	retlw	2
  2972  06B9  3400               	retlw	0
  2973                           
  2974                           ;initializer for _number_6
  2975  06BA  3400               	retlw	0
  2976  06BB  347E               	retlw	126
  2977  06BC  3440               	retlw	64
  2978  06BD  347E               	retlw	126
  2979  06BE  3442               	retlw	66
  2980  06BF  3442               	retlw	66
  2981  06C0  347E               	retlw	126
  2982  06C1  3400               	retlw	0
  2983                           
  2984                           ;initializer for _number_5
  2985  06C2  3400               	retlw	0
  2986  06C3  347E               	retlw	126
  2987  06C4  3440               	retlw	64
  2988  06C5  3440               	retlw	64
  2989  06C6  347E               	retlw	126
  2990  06C7  3402               	retlw	2
  2991  06C8  347E               	retlw	126
  2992  06C9  3400               	retlw	0
  2993                           
  2994                           ;initializer for _number_4
  2995  06CA  3400               	retlw	0
  2996  06CB  3444               	retlw	68
  2997  06CC  3444               	retlw	68
  2998  06CD  3444               	retlw	68
  2999  06CE  347E               	retlw	126
  3000  06CF  3404               	retlw	4
  3001  06D0  3404               	retlw	4
  3002  06D1  3400               	retlw	0
  3003                           
  3004                           ;initializer for _number_3
  3005  06D2  3400               	retlw	0
  3006  06D3  347E               	retlw	126
  3007  06D4  3402               	retlw	2
  3008  06D5  3402               	retlw	2
  3009  06D6  347E               	retlw	126
  3010  06D7  3402               	retlw	2
  3011  06D8  347E               	retlw	126
  3012  06D9  3400               	retlw	0
  3013                           
  3014                           ;initializer for _number_2
  3015  06DA  3400               	retlw	0
  3016  06DB  347E               	retlw	126
  3017  06DC  3402               	retlw	2
  3018  06DD  3402               	retlw	2
  3019  06DE  347E               	retlw	126
  3020  06DF  3440               	retlw	64
  3021  06E0  347E               	retlw	126
  3022  06E1  3400               	retlw	0
  3023                           
  3024                           ;initializer for _number_1
  3025  06E2  3400               	retlw	0
  3026  06E3  3478               	retlw	120
  3027  06E4  3418               	retlw	24
  3028  06E5  3418               	retlw	24
  3029  06E6  3418               	retlw	24
  3030  06E7  3418               	retlw	24
  3031  06E8  347E               	retlw	126
  3032  06E9  3400               	retlw	0
  3033                           
  3034                           ;initializer for _number_0
  3035  06EA  3400               	retlw	0
  3036  06EB  347E               	retlw	126
  3037  06EC  3442               	retlw	66
  3038  06ED  3442               	retlw	66
  3039  06EE  3442               	retlw	66
  3040  06EF  3442               	retlw	66
  3041  06F0  347E               	retlw	126
  3042  06F1  3400               	retlw	0
  3043                           
  3044                           	psect	idataBANK5
  3045  0C80                     __pidataBANK5:	
  3046                           
  3047                           ;initializer for _fsmStateTable
  3048  0C80  3455               	retlw	low _do_I2C_IDLE
  3049  0C81  340A               	retlw	high _do_I2C_IDLE
  3050  0C82  34CA               	retlw	low _do_I2C_SEND_ADR_READ
  3051  0C83  340A               	retlw	high _do_I2C_SEND_ADR_READ
  3052  0C84  3491               	retlw	low _do_I2C_SEND_ADR_WRITE
  3053  0C85  340A               	retlw	high _do_I2C_SEND_ADR_WRITE
  3054  0C86  34A4               	retlw	low _do_I2C_TX
  3055  0C87  3405               	retlw	high _do_I2C_TX
  3056  0C88  348D               	retlw	low _do_I2C_RX
  3057  0C89  3407               	retlw	high _do_I2C_RX
  3058  0C8A  3468               	retlw	low _do_I2C_RCEN
  3059  0C8B  340A               	retlw	high _do_I2C_RCEN
  3060  0C8C  3441               	retlw	low _do_I2C_TX_EMPTY
  3061  0C8D  340E               	retlw	high _do_I2C_TX_EMPTY
  3062  0C8E  341D               	retlw	low _do_I2C_SEND_RESTART_READ
  3063  0C8F  340A               	retlw	high _do_I2C_SEND_RESTART_READ
  3064  0C90  3425               	retlw	low _do_I2C_SEND_RESTART_WRITE
  3065  0C91  340A               	retlw	high _do_I2C_SEND_RESTART_WRITE
  3066  0C92  342D               	retlw	low _do_I2C_SEND_RESTART
  3067  0C93  340A               	retlw	high _do_I2C_SEND_RESTART
  3068  0C94  3435               	retlw	low _do_I2C_SEND_STOP
  3069  0C95  340A               	retlw	high _do_I2C_SEND_STOP
  3070  0C96  343D               	retlw	low _do_I2C_DO_ACK
  3071  0C97  340A               	retlw	high _do_I2C_DO_ACK
  3072  0C98  3445               	retlw	low _do_I2C_DO_NACK_STOP
  3073  0C99  340A               	retlw	high _do_I2C_DO_NACK_STOP
  3074  0C9A  344D               	retlw	low _do_I2C_DO_NACK_RESTART
  3075  0C9B  340A               	retlw	high _do_I2C_DO_NACK_RESTART
  3076  0C9C  3486               	retlw	low _do_I2C_RESET
  3077  0C9D  340A               	retlw	high _do_I2C_RESET
  3078  0C9E  34EA               	retlw	low _do_I2C_DO_ADDRESS_NACK
  3079  0C9F  340D               	retlw	high _do_I2C_DO_ADDRESS_NACK
  3080                           
  3081                           	psect	nvBANK0
  3082  006A                     __pnvBANK0:	
  3083  006A                     _IOCCF4_InterruptHandler:	
  3084  006A                     	ds	2
  3085  0011                     _PIR2bits	set	17
  3086  0010                     _PIR1bits	set	16
  3087  000B                     _INTCONbits	set	11
  3088  0091                     _PIE2bits	set	145
  3089  0090                     _PIE1bits	set	144
  3090  0098                     _OSCTUNE	set	152
  3091  0099                     _OSCCON	set	153
  3092  0095                     _OPTION_REGbits	set	149
  3093  008E                     _TRISC	set	142
  3094  008D                     _TRISB	set	141
  3095  008C                     _TRISA	set	140
  3096  04D6                     _PLLR	set	1238
  3097  0116                     _BORCON	set	278
  3098  010E                     _LATC	set	270
  3099  010D                     _LATB	set	269
  3100  010C                     _LATA	set	268
  3101  018C                     _ANSELA	set	396
  3102  018D                     _ANSELB	set	397
  3103  018E                     _ANSELC	set	398
  3104  0214                     _SSP1STATbits	set	532
  3105  0213                     _SSP1MSK	set	531
  3106  0211                     _SSP1BUF	set	529
  3107  0216                     _SSP1CON2bits	set	534
  3108  0212                     _SSP1ADD	set	530
  3109  0216                     _SSP1CON2	set	534
  3110  0215                     _SSP1CON1	set	533
  3111  0214                     _SSP1STAT	set	532
  3112  0215                     _SSP1CON1bits	set	533
  3113  020E                     _WPUC	set	526
  3114  020C                     _WPUA	set	524
  3115  020D                     _WPUB	set	525
  3116  028E                     _ODCONC	set	654
  3117  028D                     _ODCONB	set	653
  3118  028C                     _ODCONA	set	652
  3119  0397                     _IOCCPbits	set	919
  3120  0398                     _IOCCNbits	set	920
  3121  0399                     _IOCCFbits	set	921
  3122  0E21                     _SSPDATPPS	set	3617
  3123  0E20                     _SSPCLKPPS	set	3616
  3124  0E9C                     _RB4PPS	set	3740
  3125  0E9E                     _RB6PPS	set	3742
  3126                           
  3127                           ; #config settings
  3128  0000                     
  3129                           	psect	cinit
  3130  0030                     start_initialization:	
  3131  0030                     __initialization:	
  3132                           
  3133                           ; Initialize objects allocated to BANK0
  3134  0030  30BA               	movlw	low __pidataBANK0
  3135  0031  0084               	movwf	4
  3136  0032  3089               	movlw	(high __pidataBANK0)| (0+128)
  3137  0033  0085               	movwf	5
  3138  0034  3065               	movlw	low __pdataBANK0
  3139  0035  0086               	movwf	6
  3140  0036  3000               	movlw	high __pdataBANK0
  3141  0037  0087               	movwf	7
  3142  0038  3005               	movlw	5
  3143  0039  318A  2201  3180   	fcall	init_ram
  3144                           
  3145                           ; Initialize objects allocated to BANK1
  3146  003C  0021               	movlb	1	; select bank1
  3147  003D  3189  214D  3180   	fcall	__pidataBANK1	;fetch initializer
  3148  0040  00C3               	movwf	__pdataBANK1& (0+127)
  3149                           
  3150                           ; Initialize objects allocated to BANK2
  3151  0041  30A0               	movlw	low __pidataBANK2
  3152  0042  0084               	movwf	4
  3153  0043  308C               	movlw	(high __pidataBANK2)| (0+128)
  3154  0044  0085               	movwf	5
  3155  0045  3040               	movlw	low __pdataBANK2
  3156  0046  0086               	movwf	6
  3157  0047  3001               	movlw	high __pdataBANK2
  3158  0048  0087               	movwf	7
  3159  0049  3020               	movlw	32
  3160  004A  318A  2201  3180   	fcall	init_ram
  3161                           
  3162                           ; Initialize objects allocated to BANK3
  3163  004D  30D4               	movlw	low __pidataBANK3
  3164  004E  0084               	movwf	4
  3165  004F  3087               	movlw	(high __pidataBANK3)| (0+128)
  3166  0050  0085               	movwf	5
  3167  0051  30A0               	movlw	low __pdataBANK3
  3168  0052  0086               	movwf	6
  3169  0053  3001               	movlw	high __pdataBANK3
  3170  0054  0087               	movwf	7
  3171  0055  302A               	movlw	42
  3172  0056  318A  2201  3180   	fcall	init_ram
  3173                           
  3174                           ; Initialize objects allocated to BANK4
  3175  0059  30A2               	movlw	low __pidataBANK4
  3176  005A  0084               	movwf	4
  3177  005B  3086               	movlw	(high __pidataBANK4)| (0+128)
  3178  005C  0085               	movwf	5
  3179  005D  3020               	movlw	low __pdataBANK4
  3180  005E  0086               	movwf	6
  3181  005F  3002               	movlw	high __pdataBANK4
  3182  0060  0087               	movwf	7
  3183  0061  3050               	movlw	80
  3184  0062  318A  2201  3180   	fcall	init_ram
  3185                           
  3186                           ; Initialize objects allocated to BANK5
  3187  0065  3080               	movlw	low __pidataBANK5
  3188  0066  0084               	movwf	4
  3189  0067  308C               	movlw	(high __pidataBANK5)| (0+128)
  3190  0068  0085               	movwf	5
  3191  0069  30A0               	movlw	low __pdataBANK5
  3192  006A  0086               	movwf	6
  3193  006B  3002               	movlw	high __pdataBANK5
  3194  006C  0087               	movwf	7
  3195  006D  3020               	movlw	32
  3196  006E  318A  2201  3180   	fcall	init_ram
  3197                           
  3198                           ; Clear objects allocated to BANK0
  3199  0071  3059               	movlw	low __pbssBANK0
  3200  0072  0084               	movwf	4
  3201  0073  3000               	movlw	high __pbssBANK0
  3202  0074  0085               	movwf	5
  3203  0075  300C               	movlw	12
  3204  0076  3189  21FB  3180   	fcall	clear_ram0
  3205                           
  3206                           ; Clear objects allocated to BANK1
  3207  0079  30A0               	movlw	low __pbssBANK1
  3208  007A  0084               	movwf	4
  3209  007B  3000               	movlw	high __pbssBANK1
  3210  007C  0085               	movwf	5
  3211  007D  3023               	movlw	35
  3212  007E  3189  21FB  3180   	fcall	clear_ram0
  3213                           
  3214                           ; Clear objects allocated to BANK2
  3215  0081  3020               	movlw	low __pbssBANK2
  3216  0082  0084               	movwf	4
  3217  0083  3001               	movlw	high __pbssBANK2
  3218  0084  0085               	movwf	5
  3219  0085  3020               	movlw	32
  3220  0086  3189  21FB  3180   	fcall	clear_ram0
  3221                           
  3222                           ; Clear objects allocated to BANK3
  3223  0089  30CA               	movlw	low __pbssBANK3
  3224  008A  0084               	movwf	4
  3225  008B  3001               	movlw	high __pbssBANK3
  3226  008C  0085               	movwf	5
  3227  008D  3019               	movlw	25
  3228  008E  3189  21FB         	fcall	clear_ram0
  3229  0090                     end_of_initialization:	
  3230                           ;End of C runtime variable initialization code
  3231                           
  3232  0090                     __end_of__initialization:	
  3233  0090  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  3234  0091  0020               	movlb	0
  3235  0092  3184  2C81         	ljmp	_main	;jump to C main() function
  3236                           
  3237                           	psect	bssBANK0
  3238  0059                     __pbssBANK0:	
  3239  0059                     _shiftCounter:	
  3240  0059                     	ds	2
  3241  005B                     _i2c_driver_i2cISR:	
  3242  005B                     	ds	2
  3243  005D                     _i2c_driver_busCollisionISR:	
  3244  005D                     	ds	2
  3245  005F                     _topHalf:	
  3246  005F                     	ds	1
  3247  0060                     _wallHeight:	
  3248  0060                     	ds	1
  3249  0061                     _i:	
  3250  0061                     	ds	1
  3251  0062                     _gravityCounter:	
  3252  0062                     	ds	1
  3253  0063                     _elevation:	
  3254  0063                     	ds	1
  3255  0064                     _createWall:	
  3256  0064                     	ds	1
  3257                           
  3258                           	psect	dataBANK0
  3259  0065                     __pdataBANK0:	
  3260  0065                     _randx:	
  3261  0065                     	ds	4
  3262  0069                     _fall:	
  3263  0069                     	ds	1
  3264                           
  3265                           	psect	bssBANK1
  3266  00A0                     __pbssBANK1:	
  3267  00A0                     _i2c_status:	
  3268  00A0                     	ds	30
  3269  00BE                     _hiscore:	
  3270  00BE                     	ds	2
  3271  00C0                     _score:	
  3272  00C0                     	ds	2
  3273  00C2                     _start:	
  3274  00C2                     	ds	1
  3275                           
  3276                           	psect	dataBANK1
  3277  00C3                     __pdataBANK1:	
  3278  00C3                     _wallColor:	
  3279  00C3                     	ds	1
  3280                           
  3281                           	psect	bssBANK2
  3282  0120                     __pbssBANK2:	
  3283  0120                     _pixelbuffer:	
  3284  0120                     	ds	16
  3285  0130                     _walls:	
  3286  0130                     	ds	8
  3287  0138                     _letter_space:	
  3288  0138                     	ds	8
  3289                           
  3290                           	psect	dataBANK2
  3291  0140                     __pdataBANK2:	
  3292  0140                     _letter_o:	
  3293  0140                     	ds	8
  3294  0148                     _letter_c:	
  3295  0148                     	ds	8
  3296  0150                     _letter_s:	
  3297  0150                     	ds	8
  3298  0158                     _letter_e:	
  3299  0158                     	ds	8
  3300                           
  3301                           	psect	bssBANK3
  3302  01CA                     __pbssBANK3:	
  3303  01CA                     write@F12456:	
  3304  01CA                     	ds	8
  3305  01D2                     _writebuffer:	
  3306  01D2                     	ds	17
  3307                           
  3308                           	psect	dataBANK3
  3309  01A0                     __pdataBANK3:	
  3310  01A0                     _numberTable:	
  3311  01A0                     	ds	10
  3312  01AA                     _letter_r:	
  3313  01AA                     	ds	8
  3314  01B2                     _letter_hi:	
  3315  01B2                     	ds	8
  3316  01BA                     _letter_w:	
  3317  01BA                     	ds	8
  3318  01C2                     _letter_n:	
  3319  01C2                     	ds	8
  3320                           
  3321                           	psect	dataBANK4
  3322  0220                     __pdataBANK4:	
  3323  0220                     _number_9:	
  3324  0220                     	ds	8
  3325  0228                     _number_8:	
  3326  0228                     	ds	8
  3327  0230                     _number_7:	
  3328  0230                     	ds	8
  3329  0238                     _number_6:	
  3330  0238                     	ds	8
  3331  0240                     _number_5:	
  3332  0240                     	ds	8
  3333  0248                     _number_4:	
  3334  0248                     	ds	8
  3335  0250                     _number_3:	
  3336  0250                     	ds	8
  3337  0258                     _number_2:	
  3338  0258                     	ds	8
  3339  0260                     _number_1:	
  3340  0260                     	ds	8
  3341  0268                     _number_0:	
  3342  0268                     	ds	8
  3343                           
  3344                           	psect	dataBANK5
  3345  02A0                     __pdataBANK5:	
  3346  02A0                     _fsmStateTable:	
  3347  02A0                     	ds	32
  3348                           
  3349                           	psect	inittext
  3350  0A01                     init_ram:	
  3351  0A01  00FE               	movwf	126
  3352  0A02                     initloop:	
  3353  0A02  0012               	moviw fsr0++
  3354  0A03  001E               	movwi fsr1++
  3355  0A04  0BFE               	decfsz	126,f
  3356  0A05  2A02               	goto	initloop
  3357  0A06  3400               	retlw	0
  3358                           
  3359                           	psect	clrtext
  3360  09FB                     clear_ram0:	
  3361                           ;	Called with FSR0 containing the base address, and
  3362                           ;	WREG with the size to clear
  3363                           
  3364  09FB  0064               	clrwdt	;clear the watchdog before getting into this loop
  3365  09FC                     clrloop0:	
  3366  09FC  0180               	clrf	0	;clear RAM location pointed to by FSR
  3367  09FD  3101               	addfsr 0,1
  3368  09FE  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  3369  09FF  29FC               	goto	clrloop0	;have we reached the end yet?
  3370  0A00  3400               	retlw	0	;all done for this memory range, return
  3371                           
  3372                           	psect	cstackBANK6
  3373  0320                     __pcstackBANK6:	
  3374  0320                     write@letter_space:	
  3375                           
  3376                           ; 8 bytes @ 0x0
  3377  0320                     	ds	8
  3378  0328                     write@digit1:	
  3379                           
  3380                           ; 1 bytes @ 0x8
  3381  0328                     	ds	1
  3382  0329                     write@digit2:	
  3383                           
  3384                           ; 1 bytes @ 0x9
  3385  0329                     	ds	1
  3386  032A                     write@digit3:	
  3387                           
  3388                           ; 1 bytes @ 0xA
  3389  032A                     	ds	1
  3390  032B                     write@digit4:	
  3391                           
  3392                           ; 1 bytes @ 0xB
  3393  032B                     	ds	1
  3394  032C                     write@digit5:	
  3395                           
  3396                           ; 1 bytes @ 0xC
  3397  032C                     	ds	1
  3398  032D                     write@toWrite_355:	
  3399                           
  3400                           ; 16 bytes @ 0xD
  3401  032D                     	ds	16
  3402  033D                     write@toWrite_356:	
  3403                           
  3404                           ; 14 bytes @ 0x1D
  3405  033D                     	ds	14
  3406  034B                     write@toWrite_362:	
  3407                           
  3408                           ; 14 bytes @ 0x2B
  3409  034B                     	ds	14
  3410  0359                     write@toWrite:	
  3411                           
  3412                           ; 10 bytes @ 0x39
  3413  0359                     	ds	10
  3414  0363                     write@selection:	
  3415                           
  3416                           ; 1 bytes @ 0x43
  3417  0363                     	ds	1
  3418  0364                     write@number:	
  3419                           
  3420                           ; 2 bytes @ 0x44
  3421  0364                     	ds	2
  3422                           
  3423                           	psect	cstackCOMMON
  3424  0070                     __pcstackCOMMON:	
  3425  0070                     ?_mssp_IRQisEnabled:	
  3426  0070                     ?_i2c_driver_open:	
  3427                           ; 1 bit 
  3428                           
  3429  0070                     ?_i2c_driver_isNACK:	
  3430                           ; 1 bit 
  3431                           
  3432  0070                     ?i1_i2c_driver_isNACK:	
  3433                           ; 1 bit 
  3434                           
  3435  0070                     ?_IOCCF4_DefaultInterruptHandler:	
  3436                           ; 1 bit 
  3437                           
  3438  0070                     ??_IOCCF4_DefaultInterruptHandler:	
  3439                           ; 1 bytes @ 0x0
  3440                           
  3441  0070                     ?_IOCCF4_ISR:	
  3442                           ; 1 bytes @ 0x0
  3443                           
  3444  0070                     ?_OSCILLATOR_Initialize:	
  3445                           ; 1 bytes @ 0x0
  3446                           
  3447  0070                     ?_i2c_open:	
  3448                           ; 1 bytes @ 0x0
  3449                           
  3450  0070                     ?_i2c_masterWrite:	
  3451                           ; 1 bytes @ 0x0
  3452                           
  3453  0070                     ?_i2c_close:	
  3454                           ; 1 bytes @ 0x0
  3455                           
  3456  0070                     ?_i2c_busCollisionISR:	
  3457                           ; 1 bytes @ 0x0
  3458                           
  3459  0070                     ??_i2c_busCollisionISR:	
  3460                           ; 1 bytes @ 0x0
  3461                           
  3462  0070                     ?_i2c_ISR:	
  3463                           ; 1 bytes @ 0x0
  3464                           
  3465  0070                     ?_i2c_poller:	
  3466                           ; 1 bytes @ 0x0
  3467                           
  3468  0070                     ?_PIN_MANAGER_Initialize:	
  3469                           ; 1 bytes @ 0x0
  3470                           
  3471  0070                     ?_PIN_MANAGER_IOC:	
  3472                           ; 1 bytes @ 0x0
  3473                           
  3474  0070                     ?_SYSTEM_Initialize:	
  3475                           ; 1 bytes @ 0x0
  3476                           
  3477  0070                     ?_writeDisplay:	
  3478                           ; 1 bytes @ 0x0
  3479                           
  3480  0070                     ?_clearPixels:	
  3481                           ; 1 bytes @ 0x0
  3482                           
  3483  0070                     ?_initializeDisplay:	
  3484                           ; 1 bytes @ 0x0
  3485                           
  3486  0070                     ?_reverse:	
  3487                           ; 1 bytes @ 0x0
  3488                           
  3489  0070                     ?_drawWalls:	
  3490                           ; 1 bytes @ 0x0
  3491                           
  3492  0070                     ?_shiftWalls:	
  3493                           ; 1 bytes @ 0x0
  3494                           
  3495  0070                     ?_buttonInterrupt:	
  3496                           ; 1 bytes @ 0x0
  3497                           
  3498  0070                     ??_buttonInterrupt:	
  3499                           ; 1 bytes @ 0x0
  3500                           
  3501  0070                     ?_write:	
  3502                           ; 1 bytes @ 0x0
  3503                           
  3504  0070                     ?_endGame:	
  3505                           ; 1 bytes @ 0x0
  3506                           
  3507  0070                     ?_main:	
  3508                           ; 1 bytes @ 0x0
  3509                           
  3510  0070                     ?_mssp_disableIRQ:	
  3511                           ; 1 bytes @ 0x0
  3512                           
  3513  0070                     ?_mssp_clearIRQ:	
  3514                           ; 1 bytes @ 0x0
  3515                           
  3516  0070                     ?_mssp_setIRQ:	
  3517                           ; 1 bytes @ 0x0
  3518                           
  3519  0070                     ?_mssp_waitForEvent:	
  3520                           ; 1 bytes @ 0x0
  3521                           
  3522  0070                     ?_i2c_driver_resetBus:	
  3523                           ; 1 bytes @ 0x0
  3524                           
  3525  0070                     ?_i2c_driver_start:	
  3526                           ; 1 bytes @ 0x0
  3527                           
  3528  0070                     ?_i2c_driver_restart:	
  3529                           ; 1 bytes @ 0x0
  3530                           
  3531  0070                     ?_i2c_driver_stop:	
  3532                           ; 1 bytes @ 0x0
  3533                           
  3534  0070                     ?_i2c_driver_startRX:	
  3535                           ; 1 bytes @ 0x0
  3536                           
  3537  0070                     ?_i2c_driver_getRXData:	
  3538                           ; 1 bytes @ 0x0
  3539                           
  3540  0070                     ?_i2c_driver_TXData:	
  3541                           ; 1 bytes @ 0x0
  3542                           
  3543  0070                     ?_i2c_driver_sendACK:	
  3544                           ; 1 bytes @ 0x0
  3545                           
  3546  0070                     ?_i2c_driver_sendNACK:	
  3547                           ; 1 bytes @ 0x0
  3548                           
  3549  0070                     ?_i2c_driver_clearBusCollision:	
  3550                           ; 1 bytes @ 0x0
  3551                           
  3552  0070                     ??_i2c_driver_clearBusCollision:	
  3553                           ; 1 bytes @ 0x0
  3554                           
  3555  0070                     ?_INTERRUPT_InterruptManager:	
  3556                           ; 1 bytes @ 0x0
  3557                           
  3558  0070                     ?_i2c_masterOperation:	
  3559                           ; 1 bytes @ 0x0
  3560                           
  3561  0070                     ?_do_I2C_RESET:	
  3562                           ; 1 bytes @ 0x0
  3563                           
  3564  0070                     ?_do_I2C_IDLE:	
  3565                           ; 1 bytes @ 0x0
  3566                           
  3567  0070                     ?_do_I2C_SEND_RESTART_READ:	
  3568                           ; 1 bytes @ 0x0
  3569                           
  3570  0070                     ?_do_I2C_SEND_RESTART_WRITE:	
  3571                           ; 1 bytes @ 0x0
  3572                           
  3573  0070                     ?_do_I2C_SEND_RESTART:	
  3574                           ; 1 bytes @ 0x0
  3575                           
  3576  0070                     ?_do_I2C_SEND_STOP:	
  3577                           ; 1 bytes @ 0x0
  3578                           
  3579  0070                     ?_do_I2C_SEND_ADR_READ:	
  3580                           ; 1 bytes @ 0x0
  3581                           
  3582  0070                     ?_do_I2C_SEND_ADR_WRITE:	
  3583                           ; 1 bytes @ 0x0
  3584                           
  3585  0070                     ?_do_I2C_RCEN:	
  3586                           ; 1 bytes @ 0x0
  3587                           
  3588  0070                     ?_do_I2C_DO_ACK:	
  3589                           ; 1 bytes @ 0x0
  3590                           
  3591  0070                     ?_do_I2C_DO_NACK_STOP:	
  3592                           ; 1 bytes @ 0x0
  3593                           
  3594  0070                     ?_do_I2C_DO_NACK_RESTART:	
  3595                           ; 1 bytes @ 0x0
  3596                           
  3597  0070                     ?_do_I2C_DO_ADDRESS_NACK:	
  3598                           ; 1 bytes @ 0x0
  3599                           
  3600  0070                     ?_do_I2C_TX:	
  3601                           ; 1 bytes @ 0x0
  3602                           
  3603  0070                     ?_do_I2C_RX:	
  3604                           ; 1 bytes @ 0x0
  3605                           
  3606  0070                     ?_do_I2C_TX_EMPTY:	
  3607                           ; 1 bytes @ 0x0
  3608                           
  3609  0070                     ?i1_mssp_clearIRQ:	
  3610                           ; 1 bytes @ 0x0
  3611                           
  3612  0070                     ??i1_mssp_clearIRQ:	
  3613                           ; 1 bytes @ 0x0
  3614                           
  3615  0070                     ?i1_mssp_setIRQ:	
  3616                           ; 1 bytes @ 0x0
  3617                           
  3618  0070                     ??i1_mssp_setIRQ:	
  3619                           ; 1 bytes @ 0x0
  3620                           
  3621  0070                     ?i1_i2c_driver_resetBus:	
  3622                           ; 1 bytes @ 0x0
  3623                           
  3624  0070                     ??i1_i2c_driver_resetBus:	
  3625                           ; 1 bytes @ 0x0
  3626                           
  3627  0070                     ?i1_i2c_driver_restart:	
  3628                           ; 1 bytes @ 0x0
  3629                           
  3630  0070                     ??i1_i2c_driver_restart:	
  3631                           ; 1 bytes @ 0x0
  3632                           
  3633  0070                     ?i1_i2c_driver_stop:	
  3634                           ; 1 bytes @ 0x0
  3635                           
  3636  0070                     ??i1_i2c_driver_stop:	
  3637                           ; 1 bytes @ 0x0
  3638                           
  3639  0070                     ??i1_i2c_driver_isNACK:	
  3640                           ; 1 bytes @ 0x0
  3641                           
  3642  0070                     ?i1_i2c_driver_startRX:	
  3643                           ; 1 bytes @ 0x0
  3644                           
  3645  0070                     ??i1_i2c_driver_startRX:	
  3646                           ; 1 bytes @ 0x0
  3647                           
  3648  0070                     ?i1_i2c_driver_getRXData:	
  3649                           ; 1 bytes @ 0x0
  3650                           
  3651  0070                     ??i1_i2c_driver_getRXData:	
  3652                           ; 1 bytes @ 0x0
  3653                           
  3654  0070                     ?i1_i2c_driver_TXData:	
  3655                           ; 1 bytes @ 0x0
  3656                           
  3657  0070                     ??i1_i2c_driver_TXData:	
  3658                           ; 1 bytes @ 0x0
  3659                           
  3660  0070                     ?i1_i2c_driver_sendACK:	
  3661                           ; 1 bytes @ 0x0
  3662                           
  3663  0070                     ??i1_i2c_driver_sendACK:	
  3664                           ; 1 bytes @ 0x0
  3665                           
  3666  0070                     ?i1_i2c_driver_sendNACK:	
  3667                           ; 1 bytes @ 0x0
  3668                           
  3669  0070                     ??i1_i2c_driver_sendNACK:	
  3670                           ; 1 bytes @ 0x0
  3671                           
  3672  0070                     ?i1_i2c_setBuffer:	
  3673                           ; 1 bytes @ 0x0
  3674                           
  3675  0070                     ?i1_do_I2C_RESET:	
  3676                           ; 1 bytes @ 0x0
  3677                           
  3678  0070                     ??i1_do_I2C_RESET:	
  3679                           ; 1 bytes @ 0x0
  3680                           
  3681  0070                     ?i1_do_I2C_IDLE:	
  3682                           ; 1 bytes @ 0x0
  3683                           
  3684  0070                     ??i1_do_I2C_IDLE:	
  3685                           ; 1 bytes @ 0x0
  3686                           
  3687  0070                     ?i1_do_I2C_SEND_RESTART_READ:	
  3688                           ; 1 bytes @ 0x0
  3689                           
  3690  0070                     ??i1_do_I2C_SEND_RESTART_READ:	
  3691                           ; 1 bytes @ 0x0
  3692                           
  3693  0070                     ?i1_do_I2C_SEND_RESTART_WRITE:	
  3694                           ; 1 bytes @ 0x0
  3695                           
  3696  0070                     ??i1_do_I2C_SEND_RESTART_WRITE:	
  3697                           ; 1 bytes @ 0x0
  3698                           
  3699  0070                     ?i1_do_I2C_SEND_RESTART:	
  3700                           ; 1 bytes @ 0x0
  3701                           
  3702  0070                     ??i1_do_I2C_SEND_RESTART:	
  3703                           ; 1 bytes @ 0x0
  3704                           
  3705  0070                     ?i1_do_I2C_SEND_STOP:	
  3706                           ; 1 bytes @ 0x0
  3707                           
  3708  0070                     ??i1_do_I2C_SEND_STOP:	
  3709                           ; 1 bytes @ 0x0
  3710                           
  3711  0070                     ?i1_do_I2C_SEND_ADR_READ:	
  3712                           ; 1 bytes @ 0x0
  3713                           
  3714  0070                     ?i1_do_I2C_SEND_ADR_WRITE:	
  3715                           ; 1 bytes @ 0x0
  3716                           
  3717  0070                     ?i1_do_I2C_RCEN:	
  3718                           ; 1 bytes @ 0x0
  3719                           
  3720  0070                     ??i1_do_I2C_RCEN:	
  3721                           ; 1 bytes @ 0x0
  3722                           
  3723  0070                     ?i1_do_I2C_DO_ACK:	
  3724                           ; 1 bytes @ 0x0
  3725                           
  3726  0070                     ??i1_do_I2C_DO_ACK:	
  3727                           ; 1 bytes @ 0x0
  3728                           
  3729  0070                     ?i1_do_I2C_DO_NACK_STOP:	
  3730                           ; 1 bytes @ 0x0
  3731                           
  3732  0070                     ??i1_do_I2C_DO_NACK_STOP:	
  3733                           ; 1 bytes @ 0x0
  3734                           
  3735  0070                     ?i1_do_I2C_DO_NACK_RESTART:	
  3736                           ; 1 bytes @ 0x0
  3737                           
  3738  0070                     ??i1_do_I2C_DO_NACK_RESTART:	
  3739                           ; 1 bytes @ 0x0
  3740                           
  3741  0070                     ?i1_do_I2C_DO_ADDRESS_NACK:	
  3742                           ; 1 bytes @ 0x0
  3743                           
  3744  0070                     ?i1_do_I2C_TX:	
  3745                           ; 1 bytes @ 0x0
  3746                           
  3747  0070                     ?i1_do_I2C_RX:	
  3748                           ; 1 bytes @ 0x0
  3749                           
  3750  0070                     ?i1_do_I2C_TX_EMPTY:	
  3751                           ; 1 bytes @ 0x0
  3752                           
  3753  0070                     ?i1_i2c_ISR:	
  3754                           ; 1 bytes @ 0x0
  3755                           
  3756  0070                     ?i1_setCallBack:	
  3757                           ; 1 bytes @ 0x0
  3758                           
  3759  0070                     i1i2c_driver_TXData@d:	
  3760                           ; 1 bytes @ 0x0
  3761                           
  3762  0070                     i1i2c_setBuffer@buffer:	
  3763                           ; 1 bytes @ 0x0
  3764                           
  3765  0070                     i1setCallBack@cb:	
  3766                           ; 2 bytes @ 0x0
  3767                           
  3768                           
  3769                           ; 2 bytes @ 0x0
  3770  0070                     	ds	1
  3771  0071                     ??_IOCCF4_ISR:	
  3772  0071                     ??_PIN_MANAGER_IOC:	
  3773                           ; 1 bytes @ 0x1
  3774                           
  3775  0071                     ??i1_do_I2C_SEND_ADR_READ:	
  3776                           ; 1 bytes @ 0x1
  3777                           
  3778  0071                     ??i1_do_I2C_SEND_ADR_WRITE:	
  3779                           ; 1 bytes @ 0x1
  3780                           
  3781                           
  3782                           ; 1 bytes @ 0x1
  3783  0071                     	ds	1
  3784  0072                     i1setCallBack@p:	
  3785  0072                     i1i2c_setBuffer@bufferSize:	
  3786                           ; 1 bytes @ 0x2
  3787                           
  3788                           
  3789                           ; 2 bytes @ 0x2
  3790  0072                     	ds	1
  3791  0073                     ??i1_setCallBack:	
  3792                           
  3793                           ; 1 bytes @ 0x3
  3794  0073                     	ds	1
  3795  0074                     ??i1_i2c_setBuffer:	
  3796  0074                     i1setCallBack@idx:	
  3797                           ; 1 bytes @ 0x4
  3798                           
  3799                           
  3800                           ; 1 bytes @ 0x4
  3801  0074                     	ds	1
  3802  0075                     ?i1_i2c_setDataCompleteCallback:	
  3803  0075                     i1i2c_setDataCompleteCallback@cb:	
  3804                           ; 1 bytes @ 0x5
  3805                           
  3806                           
  3807                           ; 2 bytes @ 0x5
  3808  0075                     	ds	2
  3809  0077                     i1i2c_setDataCompleteCallback@p:	
  3810                           
  3811                           ; 1 bytes @ 0x7
  3812  0077                     	ds	1
  3813  0078                     ??i1_i2c_setDataCompleteCallback:	
  3814                           
  3815                           ; 1 bytes @ 0x8
  3816  0078                     	ds	1
  3817  0079                     ?i1_wr1RegCompleteHandler:	
  3818  0079                     ?i1_rd1RegCompleteHandler:	
  3819                           ; 1 bytes @ 0x9
  3820                           
  3821  0079                     ?i1_rd2RegCompleteHandler:	
  3822                           ; 1 bytes @ 0x9
  3823                           
  3824  0079                     ?i1_wr2RegCompleteHandler:	
  3825                           ; 1 bytes @ 0x9
  3826                           
  3827  0079                     ?i1_rdBlkRegCompleteHandler:	
  3828                           ; 1 bytes @ 0x9
  3829                           
  3830  0079                     ?i1_returnStop:	
  3831                           ; 1 bytes @ 0x9
  3832                           
  3833  0079                     ?i1_returnReset:	
  3834                           ; 1 bytes @ 0x9
  3835                           
  3836  0079                     ?i1_i2c_restartWrite:	
  3837                           ; 1 bytes @ 0x9
  3838                           
  3839  0079                     i1wr1RegCompleteHandler@p:	
  3840                           ; 1 bytes @ 0x9
  3841                           
  3842  0079                     i1rd1RegCompleteHandler@p:	
  3843                           ; 1 bytes @ 0x9
  3844                           
  3845  0079                     i1rd2RegCompleteHandler@p:	
  3846                           ; 1 bytes @ 0x9
  3847                           
  3848  0079                     i1wr2RegCompleteHandler@p:	
  3849                           ; 1 bytes @ 0x9
  3850                           
  3851  0079                     i1rdBlkRegCompleteHandler@p:	
  3852                           ; 1 bytes @ 0x9
  3853                           
  3854  0079                     i1returnStop@p:	
  3855                           ; 1 bytes @ 0x9
  3856                           
  3857  0079                     i1returnReset@p:	
  3858                           ; 1 bytes @ 0x9
  3859                           
  3860  0079                     i1i2c_restartWrite@p:	
  3861                           ; 1 bytes @ 0x9
  3862                           
  3863                           
  3864                           ; 1 bytes @ 0x9
  3865  0079                     	ds	1
  3866  007A                     ??i1_wr1RegCompleteHandler:	
  3867  007A                     ??i1_rd1RegCompleteHandler:	
  3868                           ; 1 bytes @ 0xA
  3869                           
  3870  007A                     ??i1_rd2RegCompleteHandler:	
  3871                           ; 1 bytes @ 0xA
  3872                           
  3873  007A                     ??i1_wr2RegCompleteHandler:	
  3874                           ; 1 bytes @ 0xA
  3875                           
  3876  007A                     ??i1_rdBlkRegCompleteHandler:	
  3877                           ; 1 bytes @ 0xA
  3878                           
  3879  007A                     ??i1_do_I2C_DO_ADDRESS_NACK:	
  3880                           ; 1 bytes @ 0xA
  3881                           
  3882  007A                     ??i1_do_I2C_TX:	
  3883                           ; 1 bytes @ 0xA
  3884                           
  3885  007A                     ??i1_do_I2C_RX:	
  3886                           ; 1 bytes @ 0xA
  3887                           
  3888  007A                     ??i1_do_I2C_TX_EMPTY:	
  3889                           ; 1 bytes @ 0xA
  3890                           
  3891  007A                     ??i1_returnStop:	
  3892                           ; 1 bytes @ 0xA
  3893                           
  3894  007A                     ??i1_returnReset:	
  3895                           ; 1 bytes @ 0xA
  3896                           
  3897  007A                     ??i1_i2c_restartWrite:	
  3898                           ; 1 bytes @ 0xA
  3899                           
  3900                           
  3901                           ; 1 bytes @ 0xA
  3902  007A                     	ds	2
  3903  007C                     i1_do_I2C_TX$1070:	
  3904                           
  3905                           ; 2 bytes @ 0xC
  3906  007C                     	ds	2
  3907                           
  3908                           	psect	cstackBANK0
  3909  0020                     __pcstackBANK0:	
  3910  0020                     ??i1_i2c_ISR:	
  3911                           
  3912                           ; 1 bytes @ 0x0
  3913  0020                     	ds	1
  3914  0021                     ??_INTERRUPT_InterruptManager:	
  3915                           
  3916                           ; 1 bytes @ 0x1
  3917  0021                     	ds	1
  3918  0022                     ?_IOCCF4_SetInterruptHandler:	
  3919  0022                     ??_OSCILLATOR_Initialize:	
  3920                           ; 1 bytes @ 0x2
  3921                           
  3922  0022                     ?_i2c_setBuffer:	
  3923                           ; 1 bytes @ 0x2
  3924                           
  3925  0022                     ??_i2c_close:	
  3926                           ; 1 bytes @ 0x2
  3927                           
  3928  0022                     ?_setCallBack:	
  3929                           ; 1 bytes @ 0x2
  3930                           
  3931  0022                     ?_drawPixel:	
  3932                           ; 1 bytes @ 0x2
  3933                           
  3934  0022                     ??_clearPixels:	
  3935                           ; 1 bytes @ 0x2
  3936                           
  3937  0022                     ??_reverse:	
  3938                           ; 1 bytes @ 0x2
  3939                           
  3940  0022                     ??_mssp_IRQisEnabled:	
  3941                           ; 1 bytes @ 0x2
  3942                           
  3943  0022                     ??_mssp_disableIRQ:	
  3944                           ; 1 bytes @ 0x2
  3945                           
  3946  0022                     ??_mssp_clearIRQ:	
  3947                           ; 1 bytes @ 0x2
  3948                           
  3949  0022                     ??_mssp_setIRQ:	
  3950                           ; 1 bytes @ 0x2
  3951                           
  3952  0022                     ??_mssp_waitForEvent:	
  3953                           ; 1 bytes @ 0x2
  3954                           
  3955  0022                     ??_i2c_driver_open:	
  3956                           ; 1 bytes @ 0x2
  3957                           
  3958  0022                     ??_i2c_driver_resetBus:	
  3959                           ; 1 bytes @ 0x2
  3960                           
  3961  0022                     ??_i2c_driver_start:	
  3962                           ; 1 bytes @ 0x2
  3963                           
  3964  0022                     ??_i2c_driver_restart:	
  3965                           ; 1 bytes @ 0x2
  3966                           
  3967  0022                     ??_i2c_driver_stop:	
  3968                           ; 1 bytes @ 0x2
  3969                           
  3970  0022                     ??_i2c_driver_isNACK:	
  3971                           ; 1 bytes @ 0x2
  3972                           
  3973  0022                     ??_i2c_driver_startRX:	
  3974                           ; 1 bytes @ 0x2
  3975                           
  3976  0022                     ??_i2c_driver_getRXData:	
  3977                           ; 1 bytes @ 0x2
  3978                           
  3979  0022                     ??_i2c_driver_TXData:	
  3980                           ; 1 bytes @ 0x2
  3981                           
  3982  0022                     ??_i2c_driver_sendACK:	
  3983                           ; 1 bytes @ 0x2
  3984                           
  3985  0022                     ??_i2c_driver_sendNACK:	
  3986                           ; 1 bytes @ 0x2
  3987                           
  3988  0022                     ?_i2c_driver_setBusCollisionISR:	
  3989                           ; 1 bytes @ 0x2
  3990                           
  3991  0022                     ?_i2c_driver_setI2cISR:	
  3992                           ; 1 bytes @ 0x2
  3993                           
  3994  0022                     ??_do_I2C_RESET:	
  3995                           ; 1 bytes @ 0x2
  3996                           
  3997  0022                     ??_do_I2C_IDLE:	
  3998                           ; 1 bytes @ 0x2
  3999                           
  4000  0022                     ??_do_I2C_SEND_RESTART_READ:	
  4001                           ; 1 bytes @ 0x2
  4002                           
  4003  0022                     ??_do_I2C_SEND_RESTART_WRITE:	
  4004                           ; 1 bytes @ 0x2
  4005                           
  4006  0022                     ??_do_I2C_SEND_RESTART:	
  4007                           ; 1 bytes @ 0x2
  4008                           
  4009  0022                     ??_do_I2C_SEND_STOP:	
  4010                           ; 1 bytes @ 0x2
  4011                           
  4012  0022                     ??_do_I2C_RCEN:	
  4013                           ; 1 bytes @ 0x2
  4014                           
  4015  0022                     ??_do_I2C_DO_ACK:	
  4016                           ; 1 bytes @ 0x2
  4017                           
  4018  0022                     ??_do_I2C_DO_NACK_STOP:	
  4019                           ; 1 bytes @ 0x2
  4020                           
  4021  0022                     ??_do_I2C_DO_NACK_RESTART:	
  4022                           ; 1 bytes @ 0x2
  4023                           
  4024  0022                     ?___awdiv:	
  4025                           ; 1 bytes @ 0x2
  4026                           
  4027  0022                     ?___lwdiv:	
  4028                           ; 2 bytes @ 0x2
  4029                           
  4030  0022                     ?___lmul:	
  4031                           ; 2 bytes @ 0x2
  4032                           
  4033  0022                     drawPixel@y:	
  4034                           ; 4 bytes @ 0x2
  4035                           
  4036  0022                     mssp_waitForEvent@timeout:	
  4037                           ; 1 bytes @ 0x2
  4038                           
  4039  0022                     i2c_driver_TXData@d:	
  4040                           ; 1 bytes @ 0x2
  4041                           
  4042  0022                     IOCCF4_SetInterruptHandler@InterruptHandler:	
  4043                           ; 1 bytes @ 0x2
  4044                           
  4045  0022                     i2c_driver_setBusCollisionISR@f:	
  4046                           ; 2 bytes @ 0x2
  4047                           
  4048  0022                     i2c_driver_setI2cISR@f:	
  4049                           ; 2 bytes @ 0x2
  4050                           
  4051  0022                     i2c_setBuffer@buffer:	
  4052                           ; 2 bytes @ 0x2
  4053                           
  4054  0022                     setCallBack@cb:	
  4055                           ; 2 bytes @ 0x2
  4056                           
  4057  0022                     ___awdiv@divisor:	
  4058                           ; 2 bytes @ 0x2
  4059                           
  4060  0022                     ___lwdiv@divisor:	
  4061                           ; 2 bytes @ 0x2
  4062                           
  4063  0022                     ___lmul@multiplier:	
  4064                           ; 2 bytes @ 0x2
  4065                           
  4066                           
  4067                           ; 4 bytes @ 0x2
  4068  0022                     	ds	1
  4069  0023                     ??_do_I2C_SEND_ADR_READ:	
  4070  0023                     ??_do_I2C_SEND_ADR_WRITE:	
  4071                           ; 1 bytes @ 0x3
  4072                           
  4073  0023                     drawPixel@color:	
  4074                           ; 1 bytes @ 0x3
  4075                           
  4076  0023                     i2c_close@ret:	
  4077                           ; 1 bytes @ 0x3
  4078                           
  4079                           
  4080                           ; 1 bytes @ 0x3
  4081  0023                     	ds	1
  4082  0024                     ??_IOCCF4_SetInterruptHandler:	
  4083  0024                     ??_i2c_open:	
  4084                           ; 1 bytes @ 0x4
  4085                           
  4086  0024                     ??_PIN_MANAGER_Initialize:	
  4087                           ; 1 bytes @ 0x4
  4088                           
  4089  0024                     ??_SYSTEM_Initialize:	
  4090                           ; 1 bytes @ 0x4
  4091                           
  4092  0024                     ??_drawPixel:	
  4093                           ; 1 bytes @ 0x4
  4094                           
  4095  0024                     ??_i2c_driver_setBusCollisionISR:	
  4096                           ; 1 bytes @ 0x4
  4097                           
  4098  0024                     ??_i2c_driver_setI2cISR:	
  4099                           ; 1 bytes @ 0x4
  4100                           
  4101  0024                     setCallBack@p:	
  4102                           ; 1 bytes @ 0x4
  4103                           
  4104  0024                     i2c_setBuffer@bufferSize:	
  4105                           ; 1 bytes @ 0x4
  4106                           
  4107  0024                     ___awdiv@dividend:	
  4108                           ; 2 bytes @ 0x4
  4109                           
  4110  0024                     ___lwdiv@dividend:	
  4111                           ; 2 bytes @ 0x4
  4112                           
  4113                           
  4114                           ; 2 bytes @ 0x4
  4115  0024                     	ds	1
  4116  0025                     ??_setCallBack:	
  4117  0025                     reverse@b:	
  4118                           ; 1 bytes @ 0x5
  4119                           
  4120  0025                     i2c_open@address:	
  4121                           ; 1 bytes @ 0x5
  4122                           
  4123                           
  4124                           ; 1 bytes @ 0x5
  4125  0025                     	ds	1
  4126  0026                     ??_i2c_setBuffer:	
  4127  0026                     ??_drawWalls:	
  4128                           ; 1 bytes @ 0x6
  4129                           
  4130  0026                     ??___awdiv:	
  4131                           ; 1 bytes @ 0x6
  4132                           
  4133  0026                     ??___lwdiv:	
  4134                           ; 1 bytes @ 0x6
  4135                           
  4136  0026                     i2c_open@ret:	
  4137                           ; 1 bytes @ 0x6
  4138                           
  4139  0026                     setCallBack@idx:	
  4140                           ; 1 bytes @ 0x6
  4141                           
  4142  0026                     ___lmul@multiplicand:	
  4143                           ; 1 bytes @ 0x6
  4144                           
  4145                           
  4146                           ; 4 bytes @ 0x6
  4147  0026                     	ds	1
  4148  0027                     ?_i2c_setDataCompleteCallback:	
  4149  0027                     ?_i2c_setAddressNACKCallback:	
  4150                           ; 1 bytes @ 0x7
  4151                           
  4152  0027                     ___awdiv@counter:	
  4153                           ; 1 bytes @ 0x7
  4154                           
  4155  0027                     ___lwdiv@counter:	
  4156                           ; 1 bytes @ 0x7
  4157                           
  4158  0027                     i2c_setDataCompleteCallback@cb:	
  4159                           ; 1 bytes @ 0x7
  4160                           
  4161  0027                     i2c_setAddressNACKCallback@cb:	
  4162                           ; 2 bytes @ 0x7
  4163                           
  4164                           
  4165                           ; 2 bytes @ 0x7
  4166  0027                     	ds	1
  4167  0028                     ___awdiv@sign:	
  4168  0028                     ___lwdiv@quotient:	
  4169                           ; 1 bytes @ 0x8
  4170                           
  4171                           
  4172                           ; 2 bytes @ 0x8
  4173  0028                     	ds	1
  4174  0029                     i2c_setDataCompleteCallback@p:	
  4175  0029                     i2c_setAddressNACKCallback@p:	
  4176                           ; 1 bytes @ 0x9
  4177                           
  4178  0029                     ___awdiv@quotient:	
  4179                           ; 1 bytes @ 0x9
  4180                           
  4181                           
  4182                           ; 2 bytes @ 0x9
  4183  0029                     	ds	1
  4184  002A                     ??_i2c_setDataCompleteCallback:	
  4185  002A                     ??_i2c_setAddressNACKCallback:	
  4186                           ; 1 bytes @ 0xA
  4187                           
  4188  002A                     ??___lmul:	
  4189                           ; 1 bytes @ 0xA
  4190                           
  4191  002A                     ?___lwmod:	
  4192                           ; 1 bytes @ 0xA
  4193                           
  4194  002A                     drawPixel@x:	
  4195                           ; 2 bytes @ 0xA
  4196                           
  4197  002A                     ___lwmod@divisor:	
  4198                           ; 1 bytes @ 0xA
  4199                           
  4200  002A                     ___lmul@product:	
  4201                           ; 2 bytes @ 0xA
  4202                           
  4203                           
  4204                           ; 4 bytes @ 0xA
  4205  002A                     	ds	1
  4206  002B                     ?_i2c_restartWrite:	
  4207  002B                     ?_returnStop:	
  4208                           ; 1 bytes @ 0xB
  4209                           
  4210  002B                     ?_returnReset:	
  4211                           ; 1 bytes @ 0xB
  4212                           
  4213  002B                     ?_wr1RegCompleteHandler:	
  4214                           ; 1 bytes @ 0xB
  4215                           
  4216  002B                     ?_rd1RegCompleteHandler:	
  4217                           ; 1 bytes @ 0xB
  4218                           
  4219  002B                     ?_rd2RegCompleteHandler:	
  4220                           ; 1 bytes @ 0xB
  4221                           
  4222  002B                     ?_wr2RegCompleteHandler:	
  4223                           ; 1 bytes @ 0xB
  4224                           
  4225  002B                     ?_rdBlkRegCompleteHandler:	
  4226                           ; 1 bytes @ 0xB
  4227                           
  4228  002B                     wr1RegCompleteHandler@p:	
  4229                           ; 1 bytes @ 0xB
  4230                           
  4231  002B                     rd1RegCompleteHandler@p:	
  4232                           ; 1 bytes @ 0xB
  4233                           
  4234  002B                     rd2RegCompleteHandler@p:	
  4235                           ; 1 bytes @ 0xB
  4236                           
  4237  002B                     wr2RegCompleteHandler@p:	
  4238                           ; 1 bytes @ 0xB
  4239                           
  4240  002B                     rdBlkRegCompleteHandler@p:	
  4241                           ; 1 bytes @ 0xB
  4242                           
  4243  002B                     returnStop@p:	
  4244                           ; 1 bytes @ 0xB
  4245                           
  4246  002B                     returnReset@p:	
  4247                           ; 1 bytes @ 0xB
  4248                           
  4249  002B                     i2c_restartWrite@p:	
  4250                           ; 1 bytes @ 0xB
  4251                           
  4252                           
  4253                           ; 1 bytes @ 0xB
  4254  002B                     	ds	1
  4255  002C                     ??_i2c_restartWrite:	
  4256  002C                     ??_returnStop:	
  4257                           ; 1 bytes @ 0xC
  4258                           
  4259  002C                     ??_returnReset:	
  4260                           ; 1 bytes @ 0xC
  4261                           
  4262  002C                     ??_wr1RegCompleteHandler:	
  4263                           ; 1 bytes @ 0xC
  4264                           
  4265  002C                     ??_rd1RegCompleteHandler:	
  4266                           ; 1 bytes @ 0xC
  4267                           
  4268  002C                     ??_rd2RegCompleteHandler:	
  4269                           ; 1 bytes @ 0xC
  4270                           
  4271  002C                     ??_wr2RegCompleteHandler:	
  4272                           ; 1 bytes @ 0xC
  4273                           
  4274  002C                     ??_rdBlkRegCompleteHandler:	
  4275                           ; 1 bytes @ 0xC
  4276                           
  4277  002C                     ??_do_I2C_DO_ADDRESS_NACK:	
  4278                           ; 1 bytes @ 0xC
  4279                           
  4280  002C                     ??_do_I2C_TX:	
  4281                           ; 1 bytes @ 0xC
  4282                           
  4283  002C                     ??_do_I2C_RX:	
  4284                           ; 1 bytes @ 0xC
  4285                           
  4286  002C                     ??_do_I2C_TX_EMPTY:	
  4287                           ; 1 bytes @ 0xC
  4288                           
  4289  002C                     ___lwmod@dividend:	
  4290                           ; 1 bytes @ 0xC
  4291                           
  4292                           
  4293                           ; 2 bytes @ 0xC
  4294  002C                     	ds	2
  4295  002E                     ??___lwmod:	
  4296  002E                     ?_rand:	
  4297                           ; 1 bytes @ 0xE
  4298                           
  4299  002E                     _do_I2C_TX$1070:	
  4300                           ; 2 bytes @ 0xE
  4301                           
  4302                           
  4303                           ; 2 bytes @ 0xE
  4304  002E                     	ds	1
  4305  002F                     ___lwmod@counter:	
  4306                           
  4307                           ; 1 bytes @ 0xF
  4308  002F                     	ds	1
  4309  0030                     ??_rand:	
  4310  0030                     ??_i2c_ISR:	
  4311                           ; 1 bytes @ 0x10
  4312                           
  4313                           
  4314                           ; 1 bytes @ 0x10
  4315  0030                     	ds	1
  4316  0031                     ??_i2c_poller:	
  4317  0031                     ??_i2c_masterOperation:	
  4318                           ; 1 bytes @ 0x11
  4319                           
  4320                           
  4321                           ; 1 bytes @ 0x11
  4322  0031                     	ds	1
  4323  0032                     i2c_masterOperation@read:	
  4324                           
  4325                           ; 1 bytes @ 0x12
  4326  0032                     	ds	1
  4327  0033                     i2c_masterOperation@ret:	
  4328                           
  4329                           ; 1 bytes @ 0x13
  4330  0033                     	ds	1
  4331  0034                     ?_i2c_writeNBytes:	
  4332  0034                     ??_i2c_masterWrite:	
  4333                           ; 1 bytes @ 0x14
  4334                           
  4335  0034                     i2c_writeNBytes@data:	
  4336                           ; 1 bytes @ 0x14
  4337                           
  4338                           
  4339                           ; 1 bytes @ 0x14
  4340  0034                     	ds	1
  4341  0035                     ?___awmod:	
  4342  0035                     i2c_writeNBytes@len:	
  4343                           ; 2 bytes @ 0x15
  4344                           
  4345  0035                     ___awmod@divisor:	
  4346                           ; 2 bytes @ 0x15
  4347                           
  4348                           
  4349                           ; 2 bytes @ 0x15
  4350  0035                     	ds	2
  4351  0037                     ??_i2c_writeNBytes:	
  4352  0037                     i2c_writeNBytes@address:	
  4353                           ; 1 bytes @ 0x17
  4354                           
  4355  0037                     ___awmod@dividend:	
  4356                           ; 1 bytes @ 0x17
  4357                           
  4358                           
  4359                           ; 2 bytes @ 0x17
  4360  0037                     	ds	1
  4361  0038                     ??_writeDisplay:	
  4362  0038                     ??_initializeDisplay:	
  4363                           ; 1 bytes @ 0x18
  4364                           
  4365                           
  4366                           ; 1 bytes @ 0x18
  4367  0038                     	ds	1
  4368  0039                     ??___awmod:	
  4369                           
  4370                           ; 1 bytes @ 0x19
  4371  0039                     	ds	1
  4372  003A                     ___awmod@counter:	
  4373                           
  4374                           ; 1 bytes @ 0x1A
  4375  003A                     	ds	1
  4376  003B                     ___awmod@sign:	
  4377                           
  4378                           ; 1 bytes @ 0x1B
  4379  003B                     	ds	1
  4380  003C                     ?_random:	
  4381  003C                     random@upper:	
  4382                           ; 1 bytes @ 0x1C
  4383                           
  4384                           
  4385                           ; 1 bytes @ 0x1C
  4386  003C                     	ds	1
  4387  003D                     ??_random:	
  4388  003D                     ?_writeWord:	
  4389                           ; 1 bytes @ 0x1D
  4390                           
  4391  003D                     writeWord@len:	
  4392                           ; 1 bytes @ 0x1D
  4393                           
  4394                           
  4395                           ; 1 bytes @ 0x1D
  4396  003D                     	ds	1
  4397  003E                     ??_writeWord:	
  4398                           
  4399                           ; 1 bytes @ 0x1E
  4400  003E                     	ds	1
  4401  003F                     random@lower:	
  4402                           
  4403                           ; 1 bytes @ 0x1F
  4404  003F                     	ds	1
  4405  0040                     ??_shiftWalls:	
  4406                           
  4407                           ; 1 bytes @ 0x20
  4408  0040                     	ds	15
  4409  004F                     writeWord@shiftValue:	
  4410                           
  4411                           ; 1 bytes @ 0x2F
  4412  004F                     	ds	1
  4413  0050                     writeWord@text:	
  4414                           
  4415                           ; 1 bytes @ 0x30
  4416  0050                     	ds	1
  4417  0051                     writeWord@idx:	
  4418                           
  4419                           ; 1 bytes @ 0x31
  4420  0051                     	ds	1
  4421  0052                     writeWord@k:	
  4422                           
  4423                           ; 1 bytes @ 0x32
  4424  0052                     	ds	1
  4425  0053                     ??_write:	
  4426                           
  4427                           ; 1 bytes @ 0x33
  4428  0053                     	ds	1
  4429  0054                     ??_endGame:	
  4430                           
  4431                           ; 1 bytes @ 0x34
  4432  0054                     	ds	2
  4433  0056                     endGame@played:	
  4434                           
  4435                           ; 1 bytes @ 0x36
  4436  0056                     	ds	1
  4437  0057                     ??_main:	
  4438                           
  4439                           ; 1 bytes @ 0x37
  4440  0057                     	ds	2
  4441                           
  4442                           	psect	maintext
  4443  0481                     __pmaintext:	
  4444 ;;
  4445 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  4446 ;;
  4447 ;; *************** function _main *****************
  4448 ;; Defined at:
  4449 ;;		line 515 in file "main.c"
  4450 ;; Parameters:    Size  Location     Type
  4451 ;;		None
  4452 ;; Auto vars:     Size  Location     Type
  4453 ;;		None
  4454 ;; Return value:  Size  Location     Type
  4455 ;;                  1    wreg      void 
  4456 ;; Registers used:
  4457 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4458 ;; Tracked objects:
  4459 ;;		On entry : B1F/0
  4460 ;;		On exit  : 0/0
  4461 ;;		Unchanged: 0/0
  4462 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4463 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4464 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4465 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4466 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4467 ;;Total ram usage:        2 bytes
  4468 ;; Hardware stack levels required when called:   19
  4469 ;; This function calls:
  4470 ;;		_IOCCF4_SetInterruptHandler
  4471 ;;		_SYSTEM_Initialize
  4472 ;;		_clearPixels
  4473 ;;		_drawPixel
  4474 ;;		_drawWalls
  4475 ;;		_endGame
  4476 ;;		_initializeDisplay
  4477 ;;		_shiftWalls
  4478 ;;		_writeDisplay
  4479 ;; This function is called by:
  4480 ;;		Startup code after reset
  4481 ;; This function uses a non-reentrant model
  4482 ;;
  4483                           
  4484                           
  4485                           ;psect for function _main
  4486  0481                     _main:	
  4487                           
  4488                           ;main.c: 516: SYSTEM_Initialize();
  4489                           
  4490                           ;incstack = 0
  4491 ;; hardware stack exceeded
  4492                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4493  0481  3189  21D1  3184   	fcall	_SYSTEM_Initialize
  4494                           
  4495                           ;main.c: 517: (INTCONbits.GIE = 1);
  4496  0484  178B               	bsf	11,7	;volatile
  4497                           
  4498                           ;main.c: 518: (INTCONbits.PEIE = 1);
  4499  0485  170B               	bsf	11,6	;volatile
  4500                           
  4501                           ;main.c: 520: initializeDisplay();
  4502  0486  3184  24E5  3184   	fcall	_initializeDisplay
  4503                           
  4504                           ;main.c: 522: IOCCF4_SetInterruptHandler(buttonInterrupt);
  4505  0489  30D6               	movlw	low _buttonInterrupt
  4506  048A  0020               	movlb	0	; select bank0
  4507  048B  00A2               	movwf	IOCCF4_SetInterruptHandler@InterruptHandler
  4508  048C  300A               	movlw	high _buttonInterrupt
  4509  048D  00A3               	movwf	IOCCF4_SetInterruptHandler@InterruptHandler+1
  4510  048E  3189  21CB  3184   	fcall	_IOCCF4_SetInterruptHandler
  4511                           
  4512                           ;main.c: 524: endGame(0);
  4513  0491  3000               	movlw	0
  4514  0492  3184  2410  3184   	fcall	_endGame
  4515  0495                     l7004:	
  4516                           ;main.c: 526: while (1) {
  4517                           
  4518                           
  4519                           ;main.c: 527: drawPixel(1, elevation, 3);
  4520  0495  0020               	movlb	0	; select bank0
  4521  0496  0863               	movf	_elevation,w
  4522  0497  00D7               	movwf	??_main
  4523  0498  0857               	movf	??_main,w
  4524  0499  00A2               	movwf	drawPixel@y
  4525  049A  3003               	movlw	3
  4526  049B  00D8               	movwf	??_main+1
  4527  049C  0858               	movf	??_main+1,w
  4528  049D  00A3               	movwf	drawPixel@color
  4529  049E  3001               	movlw	1
  4530  049F  3182  2221  3184   	fcall	_drawPixel
  4531                           
  4532                           ;main.c: 528: drawWalls();
  4533  04A2  3185  25FC  3184   	fcall	_drawWalls
  4534                           
  4535                           ;main.c: 529: writeDisplay();
  4536  04A5  3185  2546  3184   	fcall	_writeDisplay
  4537                           
  4538                           ;main.c: 530: clearPixels();
  4539  04A8  318B  2324  3184   	fcall	_clearPixels
  4540                           
  4541                           ;main.c: 531: if (elevation < 0 || elevation > 7 || (walls[elevation] & 0b01000000)) {
  4542  04AB  3008               	movlw	8
  4543  04AC  0020               	movlb	0	; select bank0
  4544  04AD  0263               	subwf	_elevation,w
  4545  04AE  1803               	skipnc
  4546  04AF  2CB7               	goto	l7014
  4547  04B0  0863               	movf	_elevation,w
  4548  04B1  3E30               	addlw	(low (_walls| (0+256)))& (0+255)
  4549  04B2  0086               	movwf	6
  4550  04B3  3001               	movlw	1	; select bank2/3
  4551  04B4  0087               	movwf	7
  4552  04B5  1F01               	btfss	1,6
  4553  04B6  2CBB               	goto	l7016
  4554  04B7                     l7014:	
  4555                           
  4556                           ;main.c: 532: endGame(1);
  4557  04B7  3001               	movlw	1
  4558  04B8  3184  2410  3184   	fcall	_endGame
  4559  04BB                     l7016:	
  4560                           
  4561                           ;main.c: 533: }
  4562                           ;main.c: 534: if (gravityCounter >= 80) {
  4563  04BB  3050               	movlw	80
  4564  04BC  0020               	movlb	0	; select bank0
  4565  04BD  0262               	subwf	_gravityCounter,w
  4566  04BE  1C03               	skipc
  4567  04BF  2CCE               	goto	l7028
  4568                           
  4569                           ;main.c: 535: if (fall) {
  4570  04C0  0869               	movf	_fall,w
  4571  04C1  1903               	btfsc	3,2
  4572  04C2  2CC8               	goto	l7022
  4573                           
  4574                           ;main.c: 536: elevation += 1;
  4575  04C3  3001               	movlw	1
  4576  04C4  00D7               	movwf	??_main
  4577  04C5  0857               	movf	??_main,w
  4578  04C6  07E3               	addwf	_elevation,f
  4579                           
  4580                           ;main.c: 537: } else {
  4581  04C7  2CCC               	goto	l7026
  4582  04C8                     l7022:	
  4583                           
  4584                           ;main.c: 538: elevation -= 1;
  4585  04C8  3001               	movlw	1
  4586  04C9  02E3               	subwf	_elevation,f
  4587                           
  4588                           ;main.c: 539: fall = 1;
  4589  04CA  01E9               	clrf	_fall
  4590  04CB  0AE9               	incf	_fall,f
  4591  04CC                     l7026:	
  4592                           
  4593                           ;main.c: 540: }
  4594                           ;main.c: 541: gravityCounter = 0;
  4595  04CC  01E2               	clrf	_gravityCounter
  4596                           
  4597                           ;main.c: 542: } else {
  4598  04CD  2CD2               	goto	l7030
  4599  04CE                     l7028:	
  4600                           
  4601                           ;main.c: 543: gravityCounter++;
  4602  04CE  3001               	movlw	1
  4603  04CF  00D7               	movwf	??_main
  4604  04D0  0857               	movf	??_main,w
  4605  04D1  07E2               	addwf	_gravityCounter,f
  4606  04D2                     l7030:	
  4607                           
  4608                           ;main.c: 544: }
  4609                           ;main.c: 545: if (shiftCounter >= 100) {
  4610  04D2  3000               	movlw	0
  4611  04D3  025A               	subwf	_shiftCounter+1,w
  4612  04D4  3064               	movlw	100
  4613  04D5  1903               	skipnz
  4614  04D6  0259               	subwf	_shiftCounter,w
  4615  04D7  1C03               	skipc
  4616  04D8  2CE0               	goto	l7036
  4617                           
  4618                           ;main.c: 546: shiftWalls();
  4619  04D9  3183  2389  3184   	fcall	_shiftWalls
  4620                           
  4621                           ;main.c: 547: shiftCounter = 0;
  4622  04DC  0020               	movlb	0	; select bank0
  4623  04DD  01D9               	clrf	_shiftCounter
  4624  04DE  01DA               	clrf	_shiftCounter+1
  4625                           
  4626                           ;main.c: 548: } else {
  4627  04DF  2C95               	goto	l7004
  4628  04E0                     l7036:	
  4629                           
  4630                           ;main.c: 549: shiftCounter++;
  4631  04E0  3001               	movlw	1
  4632  04E1  07D9               	addwf	_shiftCounter,f
  4633  04E2  3000               	movlw	0
  4634  04E3  3DDA               	addwfc	_shiftCounter+1,f
  4635  04E4  2C95               	goto	l7004
  4636  04E5                     __end_of_main:	
  4637                           
  4638                           	psect	text1
  4639  0389                     __ptext1:	
  4640 ;; *************** function _shiftWalls *****************
  4641 ;; Defined at:
  4642 ;;		line 372 in file "main.c"
  4643 ;; Parameters:    Size  Location     Type
  4644 ;;		None
  4645 ;; Auto vars:     Size  Location     Type
  4646 ;;		None
  4647 ;; Return value:  Size  Location     Type
  4648 ;;                  1    wreg      void 
  4649 ;; Registers used:
  4650 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4651 ;; Tracked objects:
  4652 ;;		On entry : 0/0
  4653 ;;		On exit  : 0/0
  4654 ;;		Unchanged: 0/0
  4655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4656 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4657 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4658 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4659 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4660 ;;Total ram usage:        6 bytes
  4661 ;; Hardware stack levels used:    1
  4662 ;; Hardware stack levels required when called:    9
  4663 ;; This function calls:
  4664 ;;		_random
  4665 ;; This function is called by:
  4666 ;;		_main
  4667 ;; This function uses a non-reentrant model
  4668 ;;
  4669                           
  4670                           
  4671                           ;psect for function _shiftWalls
  4672  0389                     _shiftWalls:	
  4673                           
  4674                           ;main.c: 373: for (i = 0; i < 8; i++) {
  4675                           
  4676                           ;incstack = 0
  4677                           ; Regs used in _shiftWalls: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4678  0389  0020               	movlb	0	; select bank0
  4679  038A  01E1               	clrf	_i
  4680  038B  3008               	movlw	8
  4681  038C  0261               	subwf	_i,w
  4682  038D  1803               	btfsc	3,0
  4683  038E  2BA5               	goto	l3786
  4684  038F                     l3780:	
  4685                           
  4686                           ;main.c: 374: walls[i] = walls[i] << 1;
  4687  038F  0861               	movf	_i,w
  4688  0390  3E30               	addlw	(low (_walls| (0+256)))& (0+255)
  4689  0391  0086               	movwf	6
  4690  0392  3001               	movlw	1	; select bank2/3
  4691  0393  0087               	movwf	7
  4692  0394  3501               	lslf	1,w
  4693  0395  00C0               	movwf	??_shiftWalls
  4694  0396  0861               	movf	_i,w
  4695  0397  3E30               	addlw	(low (_walls| (0+256)))& (0+255)
  4696  0398  0086               	movwf	6
  4697  0399  3001               	movlw	1	; select bank2/3
  4698  039A  0087               	movwf	7
  4699  039B  0840               	movf	??_shiftWalls,w
  4700  039C  0081               	movwf	1
  4701  039D  3001               	movlw	1
  4702  039E  00C0               	movwf	??_shiftWalls
  4703  039F  0840               	movf	??_shiftWalls,w
  4704  03A0  07E1               	addwf	_i,f
  4705  03A1  3008               	movlw	8
  4706  03A2  0261               	subwf	_i,w
  4707  03A3  1C03               	skipc
  4708  03A4  2B8F               	goto	l3780
  4709  03A5                     l3786:	
  4710                           
  4711                           ;main.c: 375: }
  4712                           ;main.c: 376: if (createWall == 3) {
  4713  03A5  3003               	movlw	3
  4714  03A6  0664               	xorwf	_createWall,w
  4715  03A7  1D03               	btfss	3,2
  4716  03A8  2C0A               	goto	l3810
  4717                           
  4718                           ;main.c: 377: wallHeight = random(4, 7);
  4719  03A9  3007               	movlw	7
  4720  03AA  00C0               	movwf	??_shiftWalls
  4721  03AB  0840               	movf	??_shiftWalls,w
  4722  03AC  00BC               	movwf	random@upper
  4723  03AD  3004               	movlw	4
  4724  03AE  318C  2441  3183   	fcall	_random
  4725  03B1  0020               	movlb	0	; select bank0
  4726  03B2  00C1               	movwf	??_shiftWalls+1
  4727  03B3  0841               	movf	??_shiftWalls+1,w
  4728  03B4  00E0               	movwf	_wallHeight
  4729                           
  4730                           ;main.c: 378: topHalf = random(1, wallHeight);
  4731  03B5  0860               	movf	_wallHeight,w
  4732  03B6  00C0               	movwf	??_shiftWalls
  4733  03B7  0840               	movf	??_shiftWalls,w
  4734  03B8  00BC               	movwf	random@upper
  4735  03B9  3001               	movlw	1
  4736  03BA  318C  2441  3183   	fcall	_random
  4737  03BD  0020               	movlb	0	; select bank0
  4738  03BE  00C1               	movwf	??_shiftWalls+1
  4739  03BF  0841               	movf	??_shiftWalls+1,w
  4740  03C0  00DF               	movwf	_topHalf
  4741                           
  4742                           ;main.c: 379: for (i = 0; i < topHalf; i++) {
  4743  03C1  01E1               	clrf	_i
  4744  03C2                     l3796:	
  4745  03C2  085F               	movf	_topHalf,w
  4746  03C3  0261               	subwf	_i,w
  4747  03C4  1803               	btfsc	3,0
  4748  03C5  2BD1               	goto	l3798
  4749                           
  4750                           ;main.c: 380: walls[i] |= 1;
  4751  03C6  0861               	movf	_i,w
  4752  03C7  3E30               	addlw	(low (_walls| (0+256)))& (0+255)
  4753  03C8  0086               	movwf	6
  4754  03C9  3001               	movlw	1	; select bank2/3
  4755  03CA  0087               	movwf	7
  4756  03CB  1401               	bsf	1,0
  4757  03CC  3001               	movlw	1
  4758  03CD  00C0               	movwf	??_shiftWalls
  4759  03CE  0840               	movf	??_shiftWalls,w
  4760  03CF  07E1               	addwf	_i,f
  4761  03D0  2BC2               	goto	l3796
  4762  03D1                     l3798:	
  4763                           
  4764                           ;main.c: 381: }
  4765                           ;main.c: 382: for (i = 7; i >= 8 - (wallHeight - topHalf); i--) {
  4766  03D1  3007               	movlw	7
  4767  03D2  00C0               	movwf	??_shiftWalls
  4768  03D3  0840               	movf	??_shiftWalls,w
  4769  03D4  00E1               	movwf	_i
  4770  03D5                     l3804:	
  4771  03D5  085F               	movf	_topHalf,w
  4772  03D6  00C0               	movwf	??_shiftWalls
  4773  03D7  01C1               	clrf	??_shiftWalls+1
  4774  03D8  09C0               	comf	??_shiftWalls,f
  4775  03D9  09C1               	comf	??_shiftWalls+1,f
  4776  03DA  0AC0               	incf	??_shiftWalls,f
  4777  03DB  1903               	skipnz
  4778  03DC  0AC1               	incf	??_shiftWalls+1,f
  4779  03DD  0860               	movf	_wallHeight,w
  4780  03DE  0740               	addwf	??_shiftWalls,w
  4781  03DF  00C2               	movwf	??_shiftWalls+2
  4782  03E0  0841               	movf	??_shiftWalls+1,w
  4783  03E1  1803               	skipnc
  4784  03E2  0A41               	incf	??_shiftWalls+1,w
  4785  03E3  00C3               	movwf	??_shiftWalls+3
  4786  03E4  09C2               	comf	??_shiftWalls+2,f
  4787  03E5  09C3               	comf	??_shiftWalls+3,f
  4788  03E6  0AC2               	incf	??_shiftWalls+2,f
  4789  03E7  1903               	skipnz
  4790  03E8  0AC3               	incf	??_shiftWalls+3,f
  4791  03E9  0842               	movf	??_shiftWalls+2,w
  4792  03EA  3E08               	addlw	8
  4793  03EB  00C4               	movwf	??_shiftWalls+4
  4794  03EC  3000               	movlw	0
  4795  03ED  3D43               	addwfc	??_shiftWalls+3,w
  4796  03EE  00C5               	movwf	??_shiftWalls+5
  4797  03EF  0845               	movf	??_shiftWalls+5,w
  4798  03F0  3A80               	xorlw	128
  4799  03F1  3C80               	sublw	128
  4800  03F2  1D03               	skipz
  4801  03F3  2BF6               	goto	u2615
  4802  03F4  0844               	movf	??_shiftWalls+4,w
  4803  03F5  0261               	subwf	_i,w
  4804  03F6                     u2615:	
  4805  03F6  1C03               	btfss	3,0
  4806  03F7  2C02               	goto	l3806
  4807                           
  4808                           ;main.c: 383: walls[i] |= 1;
  4809  03F8  0020               	movlb	0	; select bank0
  4810  03F9  0861               	movf	_i,w
  4811  03FA  3E30               	addlw	(low (_walls| (0+256)))& (0+255)
  4812  03FB  0086               	movwf	6
  4813  03FC  3001               	movlw	1	; select bank2/3
  4814  03FD  0087               	movwf	7
  4815  03FE  1401               	bsf	1,0
  4816  03FF  3001               	movlw	1
  4817  0400  02E1               	subwf	_i,f
  4818  0401  2BD5               	goto	l3804
  4819  0402                     l3806:	
  4820                           
  4821                           ;main.c: 384: }
  4822                           ;main.c: 385: createWall = 0;
  4823  0402  0020               	movlb	0	; select bank0
  4824  0403  01E4               	clrf	_createWall
  4825                           
  4826                           ;main.c: 386: score++;
  4827  0404  3001               	movlw	1
  4828  0405  0021               	movlb	1	; select bank1
  4829  0406  07C0               	addwf	_score^(0+128),f
  4830  0407  3000               	movlw	0
  4831  0408  3DC1               	addwfc	(_score+1)^(0+128),f
  4832                           
  4833                           ;main.c: 387: } else {
  4834  0409  0008               	return
  4835  040A                     l3810:	
  4836                           
  4837                           ;main.c: 388: createWall++;
  4838  040A  3001               	movlw	1
  4839  040B  0020               	movlb	0	; select bank0
  4840  040C  00C0               	movwf	??_shiftWalls
  4841  040D  0840               	movf	??_shiftWalls,w
  4842  040E  07E4               	addwf	_createWall,f
  4843  040F  0008               	return
  4844  0410                     __end_of_shiftWalls:	
  4845                           
  4846                           	psect	text2
  4847  0C41                     __ptext2:	
  4848 ;; *************** function _random *****************
  4849 ;; Defined at:
  4850 ;;		line 346 in file "main.c"
  4851 ;; Parameters:    Size  Location     Type
  4852 ;;  lower           1    wreg     unsigned char 
  4853 ;;  upper           1   28[BANK0 ] unsigned char 
  4854 ;; Auto vars:     Size  Location     Type
  4855 ;;  lower           1   31[BANK0 ] unsigned char 
  4856 ;; Return value:  Size  Location     Type
  4857 ;;                  1    wreg      unsigned char 
  4858 ;; Registers used:
  4859 ;;		wreg, status,2, status,0, pclath, cstack
  4860 ;; Tracked objects:
  4861 ;;		On entry : 0/0
  4862 ;;		On exit  : 0/0
  4863 ;;		Unchanged: 0/0
  4864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4865 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4866 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4867 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4868 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4869 ;;Total ram usage:        4 bytes
  4870 ;; Hardware stack levels used:    1
  4871 ;; Hardware stack levels required when called:    8
  4872 ;; This function calls:
  4873 ;;		___awmod
  4874 ;;		_rand
  4875 ;; This function is called by:
  4876 ;;		_shiftWalls
  4877 ;; This function uses a non-reentrant model
  4878 ;;
  4879                           
  4880                           
  4881                           ;psect for function _random
  4882  0C41                     _random:	
  4883                           
  4884                           ;incstack = 0
  4885                           ; Regs used in _random: [wreg+status,2+status,0+pclath+cstack]
  4886                           ;random@lower stored from wreg
  4887  0C41  0020               	movlb	0	; select bank0
  4888  0C42  00BF               	movwf	random@lower
  4889                           
  4890                           ;main.c: 347: return rand() % (upper - lower) + lower;
  4891  0C43  083F               	movf	random@lower,w
  4892  0C44  00BD               	movwf	??_random
  4893  0C45  01BE               	clrf	??_random+1
  4894  0C46  09BD               	comf	??_random,f
  4895  0C47  09BE               	comf	??_random+1,f
  4896  0C48  0ABD               	incf	??_random,f
  4897  0C49  1903               	skipnz
  4898  0C4A  0ABE               	incf	??_random+1,f
  4899  0C4B  083C               	movf	random@upper,w
  4900  0C4C  073D               	addwf	??_random,w
  4901  0C4D  00B5               	movwf	___awmod@divisor
  4902  0C4E  083E               	movf	??_random+1,w
  4903  0C4F  1803               	skipnc
  4904  0C50  0A3E               	incf	??_random+1,w
  4905  0C51  00B6               	movwf	___awmod@divisor+1
  4906  0C52  318F  273F  318C   	fcall	_rand
  4907  0C55  0020               	movlb	0	; select bank0
  4908  0C56  082F               	movf	?_rand+1,w
  4909  0C57  00B8               	movwf	___awmod@dividend+1
  4910  0C58  082E               	movf	?_rand,w
  4911  0C59  00B7               	movwf	___awmod@dividend
  4912  0C5A  318F  27BA         	fcall	___awmod
  4913  0C5C  0020               	movlb	0	; select bank0
  4914  0C5D  0835               	movf	?___awmod,w
  4915  0C5E  073F               	addwf	random@lower,w
  4916  0C5F  0008               	return
  4917  0C60                     __end_of_random:	
  4918                           
  4919                           	psect	text3
  4920  0F3F                     __ptext3:	
  4921 ;; *************** function _rand *****************
  4922 ;; Defined at:
  4923 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\rand.c"
  4924 ;; Parameters:    Size  Location     Type
  4925 ;;		None
  4926 ;; Auto vars:     Size  Location     Type
  4927 ;;		None
  4928 ;; Return value:  Size  Location     Type
  4929 ;;                  2   14[BANK0 ] int 
  4930 ;; Registers used:
  4931 ;;		wreg, status,2, status,0, pclath, cstack
  4932 ;; Tracked objects:
  4933 ;;		On entry : 0/0
  4934 ;;		On exit  : 0/0
  4935 ;;		Unchanged: 0/0
  4936 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4937 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4938 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4939 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4940 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4941 ;;Total ram usage:        7 bytes
  4942 ;; Hardware stack levels used:    1
  4943 ;; Hardware stack levels required when called:    7
  4944 ;; This function calls:
  4945 ;;		___lmul
  4946 ;; This function is called by:
  4947 ;;		_random
  4948 ;; This function uses a non-reentrant model
  4949 ;;
  4950                           
  4951                           
  4952                           ;psect for function _rand
  4953  0F3F                     _rand:	
  4954                           
  4955                           ;incstack = 0
  4956                           ; Regs used in _rand: [wreg+status,2+status,0+pclath+cstack]
  4957  0F3F  0020               	movlb	0	; select bank0
  4958  0F40  0868               	movf	_randx+3,w
  4959  0F41  00A5               	movwf	___lmul@multiplier+3
  4960  0F42  0867               	movf	_randx+2,w
  4961  0F43  00A4               	movwf	___lmul@multiplier+2
  4962  0F44  0866               	movf	_randx+1,w
  4963  0F45  00A3               	movwf	___lmul@multiplier+1
  4964  0F46  0865               	movf	_randx,w
  4965  0F47  00A2               	movwf	___lmul@multiplier
  4966  0F48  3041               	movlw	65
  4967  0F49  00A9               	movwf	___lmul@multiplicand+3
  4968  0F4A  30C6               	movlw	198
  4969  0F4B  00A8               	movwf	___lmul@multiplicand+2
  4970  0F4C  304E               	movlw	78
  4971  0F4D  00A7               	movwf	___lmul@multiplicand+1
  4972  0F4E  306D               	movlw	109
  4973  0F4F  00A6               	movwf	___lmul@multiplicand
  4974  0F50  318E  266F  318F   	fcall	___lmul
  4975  0F53  0020               	movlb	0	; select bank0
  4976  0F54  0825               	movf	?___lmul+3,w
  4977  0F55  00E8               	movwf	_randx+3
  4978  0F56  0824               	movf	?___lmul+2,w
  4979  0F57  00E7               	movwf	_randx+2
  4980  0F58  0823               	movf	?___lmul+1,w
  4981  0F59  00E6               	movwf	_randx+1
  4982  0F5A  0822               	movf	?___lmul,w
  4983  0F5B  00E5               	movwf	_randx
  4984  0F5C  3039               	movlw	57
  4985  0F5D  07E5               	addwf	_randx,f
  4986  0F5E  3030               	movlw	48
  4987  0F5F  3DE6               	addwfc	_randx+1,f
  4988  0F60  3000               	movlw	0
  4989  0F61  3DE7               	addwfc	_randx+2,f
  4990  0F62  3000               	movlw	0
  4991  0F63  3DE8               	addwfc	_randx+3,f
  4992  0F64  0865               	movf	_randx,w
  4993  0F65  00B0               	movwf	??_rand
  4994  0F66  0866               	movf	_randx+1,w
  4995  0F67  00B1               	movwf	??_rand+1
  4996  0F68  0867               	movf	_randx+2,w
  4997  0F69  00B2               	movwf	??_rand+2
  4998  0F6A  0868               	movf	_randx+3,w
  4999  0F6B  00B3               	movwf	??_rand+3
  5000  0F6C  3010               	movlw	16
  5001  0F6D  00B4               	movwf	??_rand+4
  5002  0F6E                     u1975:	
  5003  0F6E  37B3               	asrf	??_rand+3,f
  5004  0F6F  0CB2               	rrf	??_rand+2,f
  5005  0F70  0CB1               	rrf	??_rand+1,f
  5006  0F71  0CB0               	rrf	??_rand,f
  5007  0F72  0BB4               	decfsz	??_rand+4,f
  5008  0F73  2F6E               	goto	u1975
  5009  0F74  30FF               	movlw	255
  5010  0F75  0530               	andwf	??_rand,w
  5011  0F76  00AE               	movwf	?_rand
  5012  0F77  307F               	movlw	127
  5013  0F78  0531               	andwf	??_rand+1,w
  5014  0F79  00AF               	movwf	?_rand+1
  5015  0F7A  0008               	return
  5016  0F7B                     __end_of_rand:	
  5017                           
  5018                           	psect	text4
  5019  0E6F                     __ptext4:	
  5020 ;; *************** function ___lmul *****************
  5021 ;; Defined at:
  5022 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
  5023 ;; Parameters:    Size  Location     Type
  5024 ;;  multiplier      4    2[BANK0 ] unsigned long 
  5025 ;;  multiplicand    4    6[BANK0 ] unsigned long 
  5026 ;; Auto vars:     Size  Location     Type
  5027 ;;  product         4   10[BANK0 ] unsigned long 
  5028 ;; Return value:  Size  Location     Type
  5029 ;;                  4    2[BANK0 ] unsigned long 
  5030 ;; Registers used:
  5031 ;;		wreg, status,2, status,0
  5032 ;; Tracked objects:
  5033 ;;		On entry : 0/0
  5034 ;;		On exit  : 0/0
  5035 ;;		Unchanged: 0/0
  5036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5037 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5038 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5039 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5040 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5041 ;;Total ram usage:       12 bytes
  5042 ;; Hardware stack levels used:    1
  5043 ;; Hardware stack levels required when called:    6
  5044 ;; This function calls:
  5045 ;;		Nothing
  5046 ;; This function is called by:
  5047 ;;		_rand
  5048 ;; This function uses a non-reentrant model
  5049 ;;
  5050                           
  5051                           
  5052                           ;psect for function ___lmul
  5053  0E6F                     ___lmul:	
  5054                           
  5055                           ;incstack = 0
  5056                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  5057  0E6F  3000               	movlw	0
  5058  0E70  0020               	movlb	0	; select bank0
  5059  0E71  00AD               	movwf	___lmul@product+3
  5060  0E72  3000               	movlw	0
  5061  0E73  00AC               	movwf	___lmul@product+2
  5062  0E74  3000               	movlw	0
  5063  0E75  00AB               	movwf	___lmul@product+1
  5064  0E76  3000               	movlw	0
  5065  0E77  00AA               	movwf	___lmul@product
  5066  0E78                     l3160:	
  5067  0E78  1C22               	btfss	___lmul@multiplier,0
  5068  0E79  2E82               	goto	l3164
  5069  0E7A  0826               	movf	___lmul@multiplicand,w
  5070  0E7B  07AA               	addwf	___lmul@product,f
  5071  0E7C  0827               	movf	___lmul@multiplicand+1,w
  5072  0E7D  3DAB               	addwfc	___lmul@product+1,f
  5073  0E7E  0828               	movf	___lmul@multiplicand+2,w
  5074  0E7F  3DAC               	addwfc	___lmul@product+2,f
  5075  0E80  0829               	movf	___lmul@multiplicand+3,w
  5076  0E81  3DAD               	addwfc	___lmul@product+3,f
  5077  0E82                     l3164:	
  5078  0E82  3001               	movlw	1
  5079  0E83                     u1935:	
  5080  0E83  35A6               	lslf	___lmul@multiplicand,f
  5081  0E84  0DA7               	rlf	___lmul@multiplicand+1,f
  5082  0E85  0DA8               	rlf	___lmul@multiplicand+2,f
  5083  0E86  0DA9               	rlf	___lmul@multiplicand+3,f
  5084  0E87  0B89               	decfsz	9,f
  5085  0E88  2E83               	goto	u1935
  5086  0E89  3001               	movlw	1
  5087  0E8A                     u1945:	
  5088  0E8A  36A5               	lsrf	___lmul@multiplier+3,f
  5089  0E8B  0CA4               	rrf	___lmul@multiplier+2,f
  5090  0E8C  0CA3               	rrf	___lmul@multiplier+1,f
  5091  0E8D  0CA2               	rrf	___lmul@multiplier,f
  5092  0E8E  0B89               	decfsz	9,f
  5093  0E8F  2E8A               	goto	u1945
  5094  0E90  0825               	movf	___lmul@multiplier+3,w
  5095  0E91  0424               	iorwf	___lmul@multiplier+2,w
  5096  0E92  0423               	iorwf	___lmul@multiplier+1,w
  5097  0E93  0422               	iorwf	___lmul@multiplier,w
  5098  0E94  1D03               	skipz
  5099  0E95  2E78               	goto	l3160
  5100  0E96  082D               	movf	___lmul@product+3,w
  5101  0E97  00A5               	movwf	?___lmul+3
  5102  0E98  082C               	movf	___lmul@product+2,w
  5103  0E99  00A4               	movwf	?___lmul+2
  5104  0E9A  082B               	movf	___lmul@product+1,w
  5105  0E9B  00A3               	movwf	?___lmul+1
  5106  0E9C  082A               	movf	___lmul@product,w
  5107  0E9D  00A2               	movwf	?___lmul
  5108  0E9E  0008               	return
  5109  0E9F                     __end_of___lmul:	
  5110                           
  5111                           	psect	text5
  5112  0FBA                     __ptext5:	
  5113 ;; *************** function ___awmod *****************
  5114 ;; Defined at:
  5115 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
  5116 ;; Parameters:    Size  Location     Type
  5117 ;;  divisor         2   21[BANK0 ] int 
  5118 ;;  dividend        2   23[BANK0 ] int 
  5119 ;; Auto vars:     Size  Location     Type
  5120 ;;  sign            1   27[BANK0 ] unsigned char 
  5121 ;;  counter         1   26[BANK0 ] unsigned char 
  5122 ;; Return value:  Size  Location     Type
  5123 ;;                  2   21[BANK0 ] int 
  5124 ;; Registers used:
  5125 ;;		wreg, status,2, status,0
  5126 ;; Tracked objects:
  5127 ;;		On entry : 0/0
  5128 ;;		On exit  : 0/0
  5129 ;;		Unchanged: 0/0
  5130 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5131 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5132 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5133 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5134 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5135 ;;Total ram usage:        7 bytes
  5136 ;; Hardware stack levels used:    1
  5137 ;; Hardware stack levels required when called:    6
  5138 ;; This function calls:
  5139 ;;		Nothing
  5140 ;; This function is called by:
  5141 ;;		_random
  5142 ;; This function uses a non-reentrant model
  5143 ;;
  5144                           
  5145                           
  5146                           ;psect for function ___awmod
  5147  0FBA                     ___awmod:	
  5148                           
  5149                           ;incstack = 0
  5150                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  5151  0FBA  0020               	movlb	0	; select bank0
  5152  0FBB  01BB               	clrf	___awmod@sign
  5153  0FBC  1FB8               	btfss	___awmod@dividend+1,7
  5154  0FBD  2FC5               	goto	l3248
  5155  0FBE  09B7               	comf	___awmod@dividend,f
  5156  0FBF  09B8               	comf	___awmod@dividend+1,f
  5157  0FC0  0AB7               	incf	___awmod@dividend,f
  5158  0FC1  1903               	skipnz
  5159  0FC2  0AB8               	incf	___awmod@dividend+1,f
  5160  0FC3  01BB               	clrf	___awmod@sign
  5161  0FC4  0ABB               	incf	___awmod@sign,f
  5162  0FC5                     l3248:	
  5163  0FC5  1FB6               	btfss	___awmod@divisor+1,7
  5164  0FC6  2FCC               	goto	l3252
  5165  0FC7  09B5               	comf	___awmod@divisor,f
  5166  0FC8  09B6               	comf	___awmod@divisor+1,f
  5167  0FC9  0AB5               	incf	___awmod@divisor,f
  5168  0FCA  1903               	skipnz
  5169  0FCB  0AB6               	incf	___awmod@divisor+1,f
  5170  0FCC                     l3252:	
  5171  0FCC  0835               	movf	___awmod@divisor,w
  5172  0FCD  0436               	iorwf	___awmod@divisor+1,w
  5173  0FCE  1903               	btfsc	3,2
  5174  0FCF  2FF3               	goto	l3270
  5175  0FD0  01BA               	clrf	___awmod@counter
  5176  0FD1  0ABA               	incf	___awmod@counter,f
  5177  0FD2                     l3260:	
  5178  0FD2  1BB6               	btfsc	___awmod@divisor+1,7
  5179  0FD3  2FDE               	goto	l3262
  5180  0FD4  3001               	movlw	1
  5181  0FD5                     u2095:	
  5182  0FD5  35B5               	lslf	___awmod@divisor,f
  5183  0FD6  0DB6               	rlf	___awmod@divisor+1,f
  5184  0FD7  0B89               	decfsz	9,f
  5185  0FD8  2FD5               	goto	u2095
  5186  0FD9  3001               	movlw	1
  5187  0FDA  00B9               	movwf	??___awmod
  5188  0FDB  0839               	movf	??___awmod,w
  5189  0FDC  07BA               	addwf	___awmod@counter,f
  5190  0FDD  2FD2               	goto	l3260
  5191  0FDE                     l3262:	
  5192  0FDE  0836               	movf	___awmod@divisor+1,w
  5193  0FDF  0238               	subwf	___awmod@dividend+1,w
  5194  0FE0  1D03               	skipz
  5195  0FE1  2FE4               	goto	u2115
  5196  0FE2  0835               	movf	___awmod@divisor,w
  5197  0FE3  0237               	subwf	___awmod@dividend,w
  5198  0FE4                     u2115:	
  5199  0FE4  1C03               	skipc
  5200  0FE5  2FEA               	goto	l3266
  5201  0FE6  0835               	movf	___awmod@divisor,w
  5202  0FE7  02B7               	subwf	___awmod@dividend,f
  5203  0FE8  0836               	movf	___awmod@divisor+1,w
  5204  0FE9  3BB8               	subwfb	___awmod@dividend+1,f
  5205  0FEA                     l3266:	
  5206  0FEA  3001               	movlw	1
  5207  0FEB                     u2125:	
  5208  0FEB  36B6               	lsrf	___awmod@divisor+1,f
  5209  0FEC  0CB5               	rrf	___awmod@divisor,f
  5210  0FED  0B89               	decfsz	9,f
  5211  0FEE  2FEB               	goto	u2125
  5212  0FEF  3001               	movlw	1
  5213  0FF0  02BA               	subwf	___awmod@counter,f
  5214  0FF1  1D03               	btfss	3,2
  5215  0FF2  2FDE               	goto	l3262
  5216  0FF3                     l3270:	
  5217  0FF3  083B               	movf	___awmod@sign,w
  5218  0FF4  1903               	btfsc	3,2
  5219  0FF5  2FFB               	goto	l3274
  5220  0FF6  09B7               	comf	___awmod@dividend,f
  5221  0FF7  09B8               	comf	___awmod@dividend+1,f
  5222  0FF8  0AB7               	incf	___awmod@dividend,f
  5223  0FF9  1903               	skipnz
  5224  0FFA  0AB8               	incf	___awmod@dividend+1,f
  5225  0FFB                     l3274:	
  5226  0FFB  0838               	movf	___awmod@dividend+1,w
  5227  0FFC  00B6               	movwf	?___awmod+1
  5228  0FFD  0837               	movf	___awmod@dividend,w
  5229  0FFE  00B5               	movwf	?___awmod
  5230  0FFF  0008               	return
  5231  1000                     __end_of___awmod:	
  5232                           
  5233                           	psect	text6
  5234  04E5                     __ptext6:	
  5235 ;; *************** function _initializeDisplay *****************
  5236 ;; Defined at:
  5237 ;;		line 327 in file "main.c"
  5238 ;; Parameters:    Size  Location     Type
  5239 ;;		None
  5240 ;; Auto vars:     Size  Location     Type
  5241 ;;		None
  5242 ;; Return value:  Size  Location     Type
  5243 ;;                  1    wreg      void 
  5244 ;; Registers used:
  5245 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5246 ;; Tracked objects:
  5247 ;;		On entry : 0/0
  5248 ;;		On exit  : 0/0
  5249 ;;		Unchanged: 0/0
  5250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5251 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5252 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5253 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5254 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5255 ;;Total ram usage:        1 bytes
  5256 ;; Hardware stack levels used:    1
  5257 ;; Hardware stack levels required when called:   15
  5258 ;; This function calls:
  5259 ;;		_i2c_writeNBytes
  5260 ;; This function is called by:
  5261 ;;		_main
  5262 ;; This function uses a non-reentrant model
  5263 ;;
  5264                           
  5265                           
  5266                           ;psect for function _initializeDisplay
  5267  04E5                     _initializeDisplay:	
  5268                           
  5269                           ;main.c: 328: for (i = 0; i < 8; i++) {
  5270                           
  5271                           ;incstack = 0
  5272                           ; Regs used in _initializeDisplay: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5273  04E5  0020               	movlb	0	; select bank0
  5274  04E6  01E1               	clrf	_i
  5275  04E7  3008               	movlw	8
  5276  04E8  0261               	subwf	_i,w
  5277  04E9  1803               	btfsc	3,0
  5278  04EA  2CFB               	goto	l6894
  5279  04EB                     l6888:	
  5280                           
  5281                           ;main.c: 329: pixelbuffer[i] = 0;
  5282  04EB  3561               	lslf	_i,w
  5283  04EC  3E20               	addlw	(low (_pixelbuffer| (0+256)))& (0+255)
  5284  04ED  0086               	movwf	6
  5285  04EE  3001               	movlw	1	; select bank2/3
  5286  04EF  0087               	movwf	7
  5287  04F0  3000               	movlw	0
  5288  04F1  3FC0               	movwi [0]fsr1
  5289  04F2  3FC1               	movwi [1]fsr1
  5290  04F3  3001               	movlw	1
  5291  04F4  00B8               	movwf	??_initializeDisplay
  5292  04F5  0838               	movf	??_initializeDisplay,w
  5293  04F6  07E1               	addwf	_i,f
  5294  04F7  3008               	movlw	8
  5295  04F8  0261               	subwf	_i,w
  5296  04F9  1C03               	skipc
  5297  04FA  2CEB               	goto	l6888
  5298  04FB                     l6894:	
  5299                           
  5300                           ;main.c: 330: }
  5301                           ;main.c: 331: for (i = 0; i < 8; i++) {
  5302  04FB  01E1               	clrf	_i
  5303  04FC  3008               	movlw	8
  5304  04FD  0261               	subwf	_i,w
  5305  04FE  1803               	btfsc	3,0
  5306  04FF  2D0E               	goto	l6906
  5307  0500                     l6900:	
  5308                           
  5309                           ;main.c: 332: writebuffer[i] = 0;
  5310  0500  0861               	movf	_i,w
  5311  0501  3ED2               	addlw	(low (_writebuffer| (0+256)))& (0+255)
  5312  0502  0086               	movwf	6
  5313  0503  3001               	movlw	1	; select bank3/4
  5314  0504  0087               	movwf	7
  5315  0505  0181               	clrf	1
  5316  0506  3001               	movlw	1
  5317  0507  00B8               	movwf	??_initializeDisplay
  5318  0508  0838               	movf	??_initializeDisplay,w
  5319  0509  07E1               	addwf	_i,f
  5320  050A  3008               	movlw	8
  5321  050B  0261               	subwf	_i,w
  5322  050C  1C03               	skipc
  5323  050D  2D00               	goto	l6900
  5324  050E                     l6906:	
  5325                           
  5326                           ;main.c: 333: }
  5327                           ;main.c: 334: for (i = 0; i < 8; i++) {
  5328  050E  01E1               	clrf	_i
  5329  050F  3008               	movlw	8
  5330  0510  0261               	subwf	_i,w
  5331  0511  1803               	btfsc	3,0
  5332  0512  2D21               	goto	l6918
  5333  0513                     l6912:	
  5334                           
  5335                           ;main.c: 335: walls[i] = 0;
  5336  0513  0861               	movf	_i,w
  5337  0514  3E30               	addlw	(low (_walls| (0+256)))& (0+255)
  5338  0515  0086               	movwf	6
  5339  0516  3001               	movlw	1	; select bank2/3
  5340  0517  0087               	movwf	7
  5341  0518  0181               	clrf	1
  5342  0519  3001               	movlw	1
  5343  051A  00B8               	movwf	??_initializeDisplay
  5344  051B  0838               	movf	??_initializeDisplay,w
  5345  051C  07E1               	addwf	_i,f
  5346  051D  3008               	movlw	8
  5347  051E  0261               	subwf	_i,w
  5348  051F  1C03               	skipc
  5349  0520  2D13               	goto	l6912
  5350  0521                     l6918:	
  5351                           
  5352                           ;main.c: 336: }
  5353                           ;main.c: 338: writebuffer[0] = 0x21;
  5354  0521  3021               	movlw	33
  5355  0522  00B8               	movwf	??_initializeDisplay
  5356  0523  0838               	movf	??_initializeDisplay,w
  5357  0524  0023               	movlb	3	; select bank3
  5358  0525  00D2               	movwf	_writebuffer^(0+384)
  5359                           
  5360                           ;main.c: 339: i2c_writeNBytes(0x70, writebuffer, 1);
  5361  0526  30D2               	movlw	(low (_writebuffer| (0+256)))& (0+255)
  5362  0527  0020               	movlb	0	; select bank0
  5363  0528  00B8               	movwf	??_initializeDisplay
  5364  0529  0838               	movf	??_initializeDisplay,w
  5365  052A  00B4               	movwf	i2c_writeNBytes@data
  5366  052B  3001               	movlw	1
  5367  052C  00B5               	movwf	i2c_writeNBytes@len
  5368  052D  3000               	movlw	0
  5369  052E  00B6               	movwf	i2c_writeNBytes@len+1
  5370  052F  3070               	movlw	112
  5371  0530  318D  25C1  3184   	fcall	_i2c_writeNBytes
  5372                           
  5373                           ;main.c: 342: writebuffer[0] = 0x80 | 0x01;
  5374  0533  3081               	movlw	129
  5375  0534  0020               	movlb	0	; select bank0
  5376  0535  00B8               	movwf	??_initializeDisplay
  5377  0536  0838               	movf	??_initializeDisplay,w
  5378  0537  0023               	movlb	3	; select bank3
  5379  0538  00D2               	movwf	_writebuffer^(0+384)
  5380                           
  5381                           ;main.c: 343: i2c_writeNBytes(0x70, writebuffer, 1);
  5382  0539  30D2               	movlw	(low (_writebuffer| (0+256)))& (0+255)
  5383  053A  0020               	movlb	0	; select bank0
  5384  053B  00B8               	movwf	??_initializeDisplay
  5385  053C  0838               	movf	??_initializeDisplay,w
  5386  053D  00B4               	movwf	i2c_writeNBytes@data
  5387  053E  3001               	movlw	1
  5388  053F  00B5               	movwf	i2c_writeNBytes@len
  5389  0540  3000               	movlw	0
  5390  0541  00B6               	movwf	i2c_writeNBytes@len+1
  5391  0542  3070               	movlw	112
  5392  0543  318D  25C1         	fcall	_i2c_writeNBytes
  5393  0545  0008               	return
  5394  0546                     __end_of_initializeDisplay:	
  5395                           
  5396                           	psect	text7
  5397  0410                     __ptext7:	
  5398 ;; *************** function _endGame *****************
  5399 ;; Defined at:
  5400 ;;		line 484 in file "main.c"
  5401 ;; Parameters:    Size  Location     Type
  5402 ;;  played          1    wreg     unsigned char 
  5403 ;; Auto vars:     Size  Location     Type
  5404 ;;  played          1   54[BANK0 ] unsigned char 
  5405 ;; Return value:  Size  Location     Type
  5406 ;;                  1    wreg      void 
  5407 ;; Registers used:
  5408 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5409 ;; Tracked objects:
  5410 ;;		On entry : 0/0
  5411 ;;		On exit  : 0/0
  5412 ;;		Unchanged: 0/0
  5413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5414 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5415 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5416 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5417 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5418 ;;Total ram usage:        3 bytes
  5419 ;; Hardware stack levels used:    1
  5420 ;; Hardware stack levels required when called:   18
  5421 ;; This function calls:
  5422 ;;		_clearPixels
  5423 ;;		_write
  5424 ;;		_writeDisplay
  5425 ;; This function is called by:
  5426 ;;		_main
  5427 ;; This function uses a non-reentrant model
  5428 ;;
  5429                           
  5430                           
  5431                           ;psect for function _endGame
  5432  0410                     _endGame:	
  5433                           
  5434                           ;incstack = 0
  5435 ;; hardware stack exceeded
  5436                           ; Regs used in _endGame: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5437                           ;endGame@played stored from wreg
  5438  0410  0020               	movlb	0	; select bank0
  5439  0411  00D6               	movwf	endGame@played
  5440                           
  5441                           ;main.c: 485: if (played) {
  5442  0412  0856               	movf	endGame@played,w
  5443  0413  1903               	btfsc	3,2
  5444  0414  2C4F               	goto	l6952
  5445                           
  5446                           ;main.c: 486: for (i = 0; i < 8; i++) {
  5447  0415  01E1               	clrf	_i
  5448  0416  3008               	movlw	8
  5449  0417  0261               	subwf	_i,w
  5450  0418  1803               	btfsc	3,0
  5451  0419  2C2B               	goto	l6938
  5452  041A                     l6932:	
  5453                           
  5454                           ;main.c: 487: pixelbuffer[i] = 0xFF00;
  5455  041A  3561               	lslf	_i,w
  5456  041B  3E20               	addlw	(low (_pixelbuffer| (0+256)))& (0+255)
  5457  041C  0086               	movwf	6
  5458  041D  3001               	movlw	1	; select bank2/3
  5459  041E  0087               	movwf	7
  5460  041F  3000               	movlw	0
  5461  0420  3FC0               	movwi [0]fsr1
  5462  0421  30FF               	movlw	255
  5463  0422  3FC1               	movwi [1]fsr1
  5464  0423  3001               	movlw	1
  5465  0424  00D4               	movwf	??_endGame
  5466  0425  0854               	movf	??_endGame,w
  5467  0426  07E1               	addwf	_i,f
  5468  0427  3008               	movlw	8
  5469  0428  0261               	subwf	_i,w
  5470  0429  1C03               	skipc
  5471  042A  2C1A               	goto	l6932
  5472  042B                     l6938:	
  5473                           
  5474                           ;main.c: 488: }
  5475                           ;main.c: 489: writeDisplay();
  5476  042B  3185  2546  3184   	fcall	_writeDisplay
  5477                           
  5478                           ;main.c: 490: _delay((unsigned long)((200)*(32000000/4000.0)));
  5479  042E  3009               	movlw	9
  5480  042F  0020               	movlb	0	; select bank0
  5481  0430  00D5               	movwf	??_endGame+1
  5482  0431  301E               	movlw	30
  5483  0432  00D4               	movwf	??_endGame
  5484  0433  30E4               	movlw	228
  5485  0434                     u6307:	
  5486  0434  0B89               	decfsz	9,f
  5487  0435  2C34               	goto	u6307
  5488  0436  0BD4               	decfsz	??_endGame,f
  5489  0437  2C34               	goto	u6307
  5490  0438  0BD5               	decfsz	??_endGame+1,f
  5491  0439  2C34               	goto	u6307
  5492  043A  0000               	nop
  5493                           
  5494                           ;main.c: 491: clearPixels();
  5495  043B  318B  2324  3184   	fcall	_clearPixels
  5496                           
  5497                           ;main.c: 492: if (score > hiscore) {
  5498  043E  0021               	movlb	1	; select bank1
  5499  043F  0841               	movf	(_score+1)^(0+128),w
  5500  0440  023F               	subwf	(_hiscore+1)^(0+128),w
  5501  0441  1D03               	skipz
  5502  0442  2C45               	goto	u5975
  5503  0443  0840               	movf	_score^(0+128),w
  5504  0444  023E               	subwf	_hiscore^(0+128),w
  5505  0445                     u5975:	
  5506  0445  1803               	skipnc
  5507  0446  2C4D               	goto	l6950
  5508                           
  5509                           ;main.c: 493: hiscore = score;
  5510  0447  0841               	movf	(_score+1)^(0+128),w
  5511  0448  00BF               	movwf	(_hiscore+1)^(0+128)
  5512  0449  0840               	movf	_score^(0+128),w
  5513  044A  00BE               	movwf	_hiscore^(0+128)
  5514                           
  5515                           ;main.c: 494: write(10);
  5516  044B  300A               	movlw	10
  5517  044C  2C50               	goto	L1
  5518  044D                     l6950:	
  5519                           ;main.c: 495: } else {
  5520                           
  5521                           
  5522                           ;main.c: 496: write(12);
  5523  044D  300C               	movlw	12
  5524  044E  2C50               	goto	L1
  5525  044F                     l6952:	
  5526                           ;main.c: 497: }
  5527                           ;main.c: 498: } else {
  5528                           
  5529                           
  5530                           ;main.c: 499: write(11);
  5531  044F  300B               	movlw	11
  5532  0450                     L1:	
  5533  0450  3180  2094  3184   	fcall	_write
  5534                           
  5535                           ;main.c: 500: }
  5536                           ;main.c: 501: clearPixels();
  5537  0453  318B  2324  3184   	fcall	_clearPixels
  5538                           
  5539                           ;main.c: 502: writeDisplay();
  5540  0456  3185  2546  3184   	fcall	_writeDisplay
  5541                           
  5542                           ;main.c: 503: for (i = 0; i < 8; i++) {
  5543  0459  0020               	movlb	0	; select bank0
  5544  045A  01E1               	clrf	_i
  5545  045B  3008               	movlw	8
  5546  045C  0261               	subwf	_i,w
  5547  045D  1803               	btfsc	3,0
  5548  045E  2C6D               	goto	l6970
  5549  045F                     l6964:	
  5550                           
  5551                           ;main.c: 504: walls[i] = 0;
  5552  045F  0861               	movf	_i,w
  5553  0460  3E30               	addlw	(low (_walls| (0+256)))& (0+255)
  5554  0461  0086               	movwf	6
  5555  0462  3001               	movlw	1	; select bank2/3
  5556  0463  0087               	movwf	7
  5557  0464  0181               	clrf	1
  5558  0465  3001               	movlw	1
  5559  0466  00D4               	movwf	??_endGame
  5560  0467  0854               	movf	??_endGame,w
  5561  0468  07E1               	addwf	_i,f
  5562  0469  3008               	movlw	8
  5563  046A  0261               	subwf	_i,w
  5564  046B  1C03               	skipc
  5565  046C  2C5F               	goto	l6964
  5566  046D                     l6970:	
  5567                           
  5568                           ;main.c: 505: }
  5569                           ;main.c: 506: writeDisplay();
  5570  046D  3185  2546  3184   	fcall	_writeDisplay
  5571                           
  5572                           ;main.c: 507: start = 0;
  5573  0470  0021               	movlb	1	; select bank1
  5574  0471  01C2               	clrf	_start^(0+128)
  5575  0472                     l6974:	
  5576                           ;main.c: 508: while (!start);
  5577                           
  5578  0472  0842               	movf	_start^(0+128),w
  5579  0473  1903               	btfsc	3,2
  5580  0474  2C72               	goto	l6974
  5581                           
  5582                           ;main.c: 509: elevation = 3;
  5583  0475  3003               	movlw	3
  5584  0476  0020               	movlb	0	; select bank0
  5585  0477  00D4               	movwf	??_endGame
  5586  0478  0854               	movf	??_endGame,w
  5587  0479  00E3               	movwf	_elevation
  5588                           
  5589                           ;main.c: 510: gravityCounter = 0;
  5590  047A  01E2               	clrf	_gravityCounter
  5591                           
  5592                           ;main.c: 511: shiftCounter = 0;
  5593  047B  01D9               	clrf	_shiftCounter
  5594  047C  01DA               	clrf	_shiftCounter+1
  5595                           
  5596                           ;main.c: 512: score = 0;
  5597  047D  0021               	movlb	1	; select bank1
  5598  047E  01C0               	clrf	_score^(0+128)
  5599  047F  01C1               	clrf	(_score+1)^(0+128)
  5600  0480  0008               	return
  5601  0481                     __end_of_endGame:	
  5602                           
  5603                           	psect	text8
  5604  0094                     __ptext8:	
  5605 ;; *************** function _write *****************
  5606 ;; Defined at:
  5607 ;;		line 417 in file "main.c"
  5608 ;; Parameters:    Size  Location     Type
  5609 ;;  selection       1    wreg     unsigned char 
  5610 ;; Auto vars:     Size  Location     Type
  5611 ;;  selection       1   67[BANK6 ] unsigned char 
  5612 ;;  toWrite        14   29[BANK6 ] PTR unsigned char [7]
  5613 ;;		 -> write@letter_space(8), letter_r(8), letter_o(8), letter_c(8), 
  5614 ;;		 -> letter_s(8), letter_hi(8), letter_w(8), letter_e(8), 
  5615 ;;		 -> letter_n(8), letter_space(8), number_9(8), number_8(8), 
  5616 ;;		 -> number_7(8), number_6(8), number_5(8), number_4(8), 
  5617 ;;		 -> number_3(8), number_2(8), number_1(8), number_0(8), 
  5618 ;;  toWrite        16   13[BANK6 ] PTR unsigned char [8]
  5619 ;;		 -> write@letter_space(8), letter_r(8), letter_o(8), letter_c(8), 
  5620 ;;		 -> letter_s(8), letter_hi(8), letter_w(8), letter_e(8), 
  5621 ;;		 -> letter_n(8), letter_space(8), number_9(8), number_8(8), 
  5622 ;;		 -> number_7(8), number_6(8), number_5(8), number_4(8), 
  5623 ;;		 -> number_3(8), number_2(8), number_1(8), number_0(8), 
  5624 ;;  toWrite        10   57[BANK6 ] PTR unsigned char [5]
  5625 ;;		 -> write@letter_space(8), letter_r(8), letter_o(8), letter_c(8), 
  5626 ;;		 -> letter_s(8), letter_hi(8), letter_w(8), letter_e(8), 
  5627 ;;		 -> letter_n(8), letter_space(8), number_9(8), number_8(8), 
  5628 ;;		 -> number_7(8), number_6(8), number_5(8), number_4(8), 
  5629 ;;		 -> number_3(8), number_2(8), number_1(8), number_0(8), 
  5630 ;;  toWrite        14   43[BANK6 ] PTR unsigned char [7]
  5631 ;;		 -> write@letter_space(8), letter_r(8), letter_o(8), letter_c(8), 
  5632 ;;		 -> letter_s(8), letter_hi(8), letter_w(8), letter_e(8), 
  5633 ;;		 -> letter_n(8), letter_space(8), number_9(8), number_8(8), 
  5634 ;;		 -> number_7(8), number_6(8), number_5(8), number_4(8), 
  5635 ;;		 -> number_3(8), number_2(8), number_1(8), number_0(8), 
  5636 ;;  letter_space    8    0[BANK6 ] unsigned char [8]
  5637 ;;  number          2   68[BANK6 ] unsigned int 
  5638 ;;  digit5          1   12[BANK6 ] unsigned char 
  5639 ;;  digit4          1   11[BANK6 ] unsigned char 
  5640 ;;  digit3          1   10[BANK6 ] unsigned char 
  5641 ;;  digit2          1    9[BANK6 ] unsigned char 
  5642 ;;  digit1          1    8[BANK6 ] unsigned char 
  5643 ;; Return value:  Size  Location     Type
  5644 ;;                  1    wreg      void 
  5645 ;; Registers used:
  5646 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5647 ;; Tracked objects:
  5648 ;;		On entry : 0/0
  5649 ;;		On exit  : 0/0
  5650 ;;		Unchanged: 0/0
  5651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5652 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5653 ;;      Locals:         0       0       0       0       0       0       0      70       0       0       0       0       
      +0       0
  5654 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5655 ;;      Totals:         0       1       0       0       0       0       0      70       0       0       0       0       
      +0       0
  5656 ;;Total ram usage:       71 bytes
  5657 ;; Hardware stack levels used:    1
  5658 ;; Hardware stack levels required when called:   17
  5659 ;; This function calls:
  5660 ;;		___lwdiv
  5661 ;;		___lwmod
  5662 ;;		_writeWord
  5663 ;; This function is called by:
  5664 ;;		_endGame
  5665 ;; This function uses a non-reentrant model
  5666 ;;
  5667                           
  5668                           
  5669                           ;psect for function _write
  5670  0094                     _write:	
  5671                           
  5672                           ;incstack = 0
  5673 ;; hardware stack exceeded
  5674                           ; Regs used in _write: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5675                           ;write@selection stored from wreg
  5676  0094  0026               	movlb	6	; select bank6
  5677  0095  00E3               	movwf	write@selection^(0+768)
  5678                           
  5679                           ;main.c: 418: uint16_t number = 0;
  5680  0096  01E4               	clrf	write@number^(0+768)
  5681  0097  01E5               	clrf	(write@number+1)^(0+768)
  5682                           
  5683                           ;main.c: 419: if (selection == 10) {
  5684  0098  300A               	movlw	10
  5685  0099  0663               	xorwf	write@selection^(0+768),w
  5686  009A  1D03               	btfss	3,2
  5687  009B  28C0               	goto	l6724
  5688                           
  5689                           ;main.c: 420: wallColor = 3;
  5690  009C  3003               	movlw	3
  5691  009D  0020               	movlb	0	; select bank0
  5692  009E  00D3               	movwf	??_write
  5693  009F  0853               	movf	??_write,w
  5694  00A0  0021               	movlb	1	; select bank1
  5695  00A1  00C3               	movwf	_wallColor^(0+128)
  5696                           
  5697                           ;main.c: 421: uint8_t * toWrite[5];
  5698                           ;main.c: 422: toWrite[0] = letter_space;
  5699  00A2  3038               	movlw	low _letter_space
  5700  00A3  0026               	movlb	6	; select bank6
  5701  00A4  00D9               	movwf	write@toWrite^(0+768)
  5702  00A5  3001               	movlw	high _letter_space
  5703  00A6  00DA               	movwf	(write@toWrite+1)^(0+768)
  5704                           
  5705                           ;main.c: 423: toWrite[1] = letter_n;
  5706  00A7  30C2               	movlw	low _letter_n
  5707  00A8  00DB               	movwf	(low ((write@toWrite| (0+768)+2)))^0
  5708  00A9  3001               	movlw	high _letter_n
  5709  00AA  00DC               	movwf	((low ((write@toWrite| (0+768)+2))+1))^0
  5710                           
  5711                           ;main.c: 424: toWrite[2] = letter_e;
  5712  00AB  3058               	movlw	low _letter_e
  5713  00AC  00DD               	movwf	(low ((write@toWrite| (0+768)+4)))^0
  5714  00AD  3001               	movlw	high _letter_e
  5715  00AE  00DE               	movwf	((low ((write@toWrite| (0+768)+4))+1))^0
  5716                           
  5717                           ;main.c: 425: toWrite[3] = letter_w;
  5718  00AF  30BA               	movlw	low _letter_w
  5719  00B0  00DF               	movwf	(low ((write@toWrite| (0+768)+6)))^0
  5720  00B1  3001               	movlw	high _letter_w
  5721  00B2  00E0               	movwf	((low ((write@toWrite| (0+768)+6))+1))^0
  5722                           
  5723                           ;main.c: 426: toWrite[4] = letter_space;
  5724  00B3  3038               	movlw	low _letter_space
  5725  00B4  00E1               	movwf	(low ((write@toWrite| (0+768)+8)))^0
  5726  00B5  3001               	movlw	high _letter_space
  5727  00B6  00E2               	movwf	((low ((write@toWrite| (0+768)+8))+1))^0
  5728                           
  5729                           ;main.c: 427: writeWord(toWrite, 32);
  5730  00B7  3020               	movlw	32
  5731  00B8  0020               	movlb	0	; select bank0
  5732  00B9  00D3               	movwf	??_write
  5733  00BA  0853               	movf	??_write,w
  5734  00BB  00BD               	movwf	writeWord@len
  5735  00BC  3059               	movlw	(low (write@toWrite| (0+768)))& (0+255)
  5736  00BD  3182  22DD  3180   	fcall	_writeWord
  5737  00C0                     l6724:	
  5738                           
  5739                           ;main.c: 428: }
  5740                           ;main.c: 429: if (selection == 11 || selection == 10) {
  5741  00C0  300B               	movlw	11
  5742  00C1  0026               	movlb	6	; select bank6
  5743  00C2  0663               	xorwf	write@selection^(0+768),w
  5744  00C3  1903               	btfsc	3,2
  5745  00C4  28C9               	goto	l6728
  5746  00C5  300A               	movlw	10
  5747  00C6  0663               	xorwf	write@selection^(0+768),w
  5748  00C7  1D03               	btfss	3,2
  5749  00C8  28F2               	goto	l6732
  5750  00C9                     l6728:	
  5751                           
  5752                           ;main.c: 430: uint8_t * toWrite[8];
  5753                           ;main.c: 431: toWrite[0] = letter_space;
  5754  00C9  3038               	movlw	low _letter_space
  5755  00CA  00AD               	movwf	write@toWrite_355^(0+768)
  5756  00CB  3001               	movlw	high _letter_space
  5757  00CC  00AE               	movwf	(write@toWrite_355+1)^(0+768)
  5758                           
  5759                           ;main.c: 432: toWrite[1] = letter_hi;
  5760  00CD  30B2               	movlw	low _letter_hi
  5761  00CE  00AF               	movwf	(low ((write@toWrite_355| (0+768)+2)))^0
  5762  00CF  3001               	movlw	high _letter_hi
  5763  00D0  00B0               	movwf	((low ((write@toWrite_355| (0+768)+2))+1))^0
  5764                           
  5765                           ;main.c: 433: toWrite[2] = letter_s;
  5766  00D1  3050               	movlw	low _letter_s
  5767  00D2  00B1               	movwf	(low ((write@toWrite_355| (0+768)+4)))^0
  5768  00D3  3001               	movlw	high _letter_s
  5769  00D4  00B2               	movwf	((low ((write@toWrite_355| (0+768)+4))+1))^0
  5770                           
  5771                           ;main.c: 434: toWrite[3] = letter_c;
  5772  00D5  3048               	movlw	low _letter_c
  5773  00D6  00B3               	movwf	(low ((write@toWrite_355| (0+768)+6)))^0
  5774  00D7  3001               	movlw	high _letter_c
  5775  00D8  00B4               	movwf	((low ((write@toWrite_355| (0+768)+6))+1))^0
  5776                           
  5777                           ;main.c: 435: toWrite[4] = letter_o;
  5778  00D9  3040               	movlw	low _letter_o
  5779  00DA  00B5               	movwf	(low ((write@toWrite_355| (0+768)+8)))^0
  5780  00DB  3001               	movlw	high _letter_o
  5781  00DC  00B6               	movwf	((low ((write@toWrite_355| (0+768)+8))+1))^0
  5782                           
  5783                           ;main.c: 436: toWrite[5] = letter_r;
  5784  00DD  30AA               	movlw	low _letter_r
  5785  00DE  00B7               	movwf	(low ((write@toWrite_355| (0+768)+10)))^0
  5786  00DF  3001               	movlw	high _letter_r
  5787  00E0  00B8               	movwf	((low ((write@toWrite_355| (0+768)+10))+1))^0
  5788                           
  5789                           ;main.c: 437: toWrite[6] = letter_e;
  5790  00E1  3058               	movlw	low _letter_e
  5791  00E2  00B9               	movwf	(low ((write@toWrite_355| (0+768)+12)))^0
  5792  00E3  3001               	movlw	high _letter_e
  5793  00E4  00BA               	movwf	((low ((write@toWrite_355| (0+768)+12))+1))^0
  5794                           
  5795                           ;main.c: 438: toWrite[7] = letter_space;
  5796  00E5  3038               	movlw	low _letter_space
  5797  00E6  00BB               	movwf	(low ((write@toWrite_355| (0+768)+14)))^0
  5798  00E7  3001               	movlw	high _letter_space
  5799  00E8  00BC               	movwf	((low ((write@toWrite_355| (0+768)+14))+1))^0
  5800                           
  5801                           ;main.c: 439: writeWord(toWrite, 56);
  5802  00E9  3038               	movlw	56
  5803  00EA  0020               	movlb	0	; select bank0
  5804  00EB  00D3               	movwf	??_write
  5805  00EC  0853               	movf	??_write,w
  5806  00ED  00BD               	movwf	writeWord@len
  5807  00EE  302D               	movlw	(low (write@toWrite_355| (0+768)))& (0+255)
  5808  00EF  3182  22DD  3180   	fcall	_writeWord
  5809  00F2                     l6732:	
  5810                           
  5811                           ;main.c: 440: }
  5812                           ;main.c: 441: if (selection == 12) {
  5813  00F2  300C               	movlw	12
  5814  00F3  0026               	movlb	6	; select bank6
  5815  00F4  0663               	xorwf	write@selection^(0+768),w
  5816  00F5  1D03               	btfss	3,2
  5817  00F6  292A               	goto	l6754
  5818                           
  5819                           ;main.c: 442: wallColor = 2;
  5820  00F7  3002               	movlw	2
  5821  00F8  0020               	movlb	0	; select bank0
  5822  00F9  00D3               	movwf	??_write
  5823  00FA  0853               	movf	??_write,w
  5824  00FB  0021               	movlb	1	; select bank1
  5825  00FC  00C3               	movwf	_wallColor^(0+128)
  5826                           
  5827                           ;main.c: 443: uint8_t * toWrite[7];
  5828                           ;main.c: 444: toWrite[0] = letter_space;
  5829  00FD  3038               	movlw	low _letter_space
  5830  00FE  0026               	movlb	6	; select bank6
  5831  00FF  00BD               	movwf	write@toWrite_356^(0+768)
  5832  0100  3001               	movlw	high _letter_space
  5833  0101  00BE               	movwf	(write@toWrite_356+1)^(0+768)
  5834                           
  5835                           ;main.c: 445: toWrite[1] = letter_s;
  5836  0102  3050               	movlw	low _letter_s
  5837  0103  00BF               	movwf	(low ((write@toWrite_356| (0+768)+2)))^0
  5838  0104  3001               	movlw	high _letter_s
  5839  0105  00C0               	movwf	((low ((write@toWrite_356| (0+768)+2))+1))^0
  5840                           
  5841                           ;main.c: 446: toWrite[2] = letter_c;
  5842  0106  3048               	movlw	low _letter_c
  5843  0107  00C1               	movwf	(low ((write@toWrite_356| (0+768)+4)))^0
  5844  0108  3001               	movlw	high _letter_c
  5845  0109  00C2               	movwf	((low ((write@toWrite_356| (0+768)+4))+1))^0
  5846                           
  5847                           ;main.c: 447: toWrite[3] = letter_o;
  5848  010A  3040               	movlw	low _letter_o
  5849  010B  00C3               	movwf	(low ((write@toWrite_356| (0+768)+6)))^0
  5850  010C  3001               	movlw	high _letter_o
  5851  010D  00C4               	movwf	((low ((write@toWrite_356| (0+768)+6))+1))^0
  5852                           
  5853                           ;main.c: 448: toWrite[4] = letter_r;
  5854  010E  30AA               	movlw	low _letter_r
  5855  010F  00C5               	movwf	(low ((write@toWrite_356| (0+768)+8)))^0
  5856  0110  3001               	movlw	high _letter_r
  5857  0111  00C6               	movwf	((low ((write@toWrite_356| (0+768)+8))+1))^0
  5858                           
  5859                           ;main.c: 449: toWrite[5] = letter_e;
  5860  0112  3058               	movlw	low _letter_e
  5861  0113  00C7               	movwf	(low ((write@toWrite_356| (0+768)+10)))^0
  5862  0114  3001               	movlw	high _letter_e
  5863  0115  00C8               	movwf	((low ((write@toWrite_356| (0+768)+10))+1))^0
  5864                           
  5865                           ;main.c: 450: toWrite[6] = letter_space;
  5866  0116  3038               	movlw	low _letter_space
  5867  0117  00C9               	movwf	(low ((write@toWrite_356| (0+768)+12)))^0
  5868  0118  3001               	movlw	high _letter_space
  5869  0119  00CA               	movwf	((low ((write@toWrite_356| (0+768)+12))+1))^0
  5870                           
  5871                           ;main.c: 451: writeWord(toWrite, 48);
  5872  011A  3030               	movlw	48
  5873  011B  0020               	movlb	0	; select bank0
  5874  011C  00D3               	movwf	??_write
  5875  011D  0853               	movf	??_write,w
  5876  011E  00BD               	movwf	writeWord@len
  5877  011F  303D               	movlw	(low (write@toWrite_356| (0+768)))& (0+255)
  5878  0120  3182  22DD  3180   	fcall	_writeWord
  5879                           
  5880                           ;main.c: 452: number = score;
  5881  0123  0021               	movlb	1	; select bank1
  5882  0124  0841               	movf	(_score+1)^(0+128),w
  5883  0125  0026               	movlb	6	; select bank6
  5884  0126  00E5               	movwf	(write@number+1)^(0+768)
  5885  0127  0021               	movlb	1	; select bank1
  5886  0128  0840               	movf	_score^(0+128),w
  5887  0129  2930               	goto	L2
  5888  012A                     l6754:	
  5889                           ;main.c: 453: } else {
  5890                           
  5891                           
  5892                           ;main.c: 454: number = hiscore;
  5893  012A  0021               	movlb	1	; select bank1
  5894  012B  083F               	movf	(_hiscore+1)^(0+128),w
  5895  012C  0026               	movlb	6	; select bank6
  5896  012D  00E5               	movwf	(write@number+1)^(0+768)
  5897  012E  0021               	movlb	1	; select bank1
  5898  012F  083E               	movf	_hiscore^(0+128),w
  5899  0130                     L2:	
  5900  0130  0026               	movlb	6	; select bank6
  5901  0131  00E4               	movwf	write@number^(0+768)
  5902                           
  5903                           ;main.c: 455: }
  5904                           ;main.c: 456: uint8_t digit1,digit2,digit3,digit4,digit5;
  5905                           ;main.c: 457: digit1 = (number/10000)%10;
  5906  0132  300A               	movlw	10
  5907  0133  0020               	movlb	0	; select bank0
  5908  0134  00AA               	movwf	___lwmod@divisor
  5909  0135  3000               	movlw	0
  5910  0136  00AB               	movwf	___lwmod@divisor+1
  5911  0137  3010               	movlw	16
  5912  0138  00A2               	movwf	___lwdiv@divisor
  5913  0139  3027               	movlw	39
  5914  013A  00A3               	movwf	___lwdiv@divisor+1
  5915  013B  0026               	movlb	6	; select bank6
  5916  013C  0865               	movf	(write@number+1)^(0+768),w
  5917  013D  0020               	movlb	0	; select bank0
  5918  013E  00A5               	movwf	___lwdiv@dividend+1
  5919  013F  0026               	movlb	6	; select bank6
  5920  0140  0864               	movf	write@number^(0+768),w
  5921  0141  0020               	movlb	0	; select bank0
  5922  0142  00A4               	movwf	___lwdiv@dividend
  5923  0143  318E  26D3  3180   	fcall	___lwdiv
  5924  0146  0020               	movlb	0	; select bank0
  5925  0147  0823               	movf	?___lwdiv+1,w
  5926  0148  00AD               	movwf	___lwmod@dividend+1
  5927  0149  0822               	movf	?___lwdiv,w
  5928  014A  00AC               	movwf	___lwmod@dividend
  5929  014B  318E  2614  3180   	fcall	___lwmod
  5930  014E  0020               	movlb	0	; select bank0
  5931  014F  082A               	movf	?___lwmod,w
  5932  0150  00D3               	movwf	??_write
  5933  0151  0853               	movf	??_write,w
  5934  0152  0026               	movlb	6	; select bank6
  5935  0153  00A8               	movwf	write@digit1^(0+768)
  5936                           
  5937                           ;main.c: 458: digit2 = (number/1000)%10;
  5938  0154  300A               	movlw	10
  5939  0155  0020               	movlb	0	; select bank0
  5940  0156  00AA               	movwf	___lwmod@divisor
  5941  0157  3000               	movlw	0
  5942  0158  00AB               	movwf	___lwmod@divisor+1
  5943  0159  30E8               	movlw	232
  5944  015A  00A2               	movwf	___lwdiv@divisor
  5945  015B  3003               	movlw	3
  5946  015C  00A3               	movwf	___lwdiv@divisor+1
  5947  015D  0026               	movlb	6	; select bank6
  5948  015E  0865               	movf	(write@number+1)^(0+768),w
  5949  015F  0020               	movlb	0	; select bank0
  5950  0160  00A5               	movwf	___lwdiv@dividend+1
  5951  0161  0026               	movlb	6	; select bank6
  5952  0162  0864               	movf	write@number^(0+768),w
  5953  0163  0020               	movlb	0	; select bank0
  5954  0164  00A4               	movwf	___lwdiv@dividend
  5955  0165  318E  26D3  3180   	fcall	___lwdiv
  5956  0168  0020               	movlb	0	; select bank0
  5957  0169  0823               	movf	?___lwdiv+1,w
  5958  016A  00AD               	movwf	___lwmod@dividend+1
  5959  016B  0822               	movf	?___lwdiv,w
  5960  016C  00AC               	movwf	___lwmod@dividend
  5961  016D  318E  2614  3180   	fcall	___lwmod
  5962  0170  0020               	movlb	0	; select bank0
  5963  0171  082A               	movf	?___lwmod,w
  5964  0172  00D3               	movwf	??_write
  5965  0173  0853               	movf	??_write,w
  5966  0174  0026               	movlb	6	; select bank6
  5967  0175  00A9               	movwf	write@digit2^(0+768)
  5968                           
  5969                           ;main.c: 459: digit3 = (number/100)%10;
  5970  0176  300A               	movlw	10
  5971  0177  0020               	movlb	0	; select bank0
  5972  0178  00AA               	movwf	___lwmod@divisor
  5973  0179  3000               	movlw	0
  5974  017A  00AB               	movwf	___lwmod@divisor+1
  5975  017B  3064               	movlw	100
  5976  017C  00A2               	movwf	___lwdiv@divisor
  5977  017D  3000               	movlw	0
  5978  017E  00A3               	movwf	___lwdiv@divisor+1
  5979  017F  0026               	movlb	6	; select bank6
  5980  0180  0865               	movf	(write@number+1)^(0+768),w
  5981  0181  0020               	movlb	0	; select bank0
  5982  0182  00A5               	movwf	___lwdiv@dividend+1
  5983  0183  0026               	movlb	6	; select bank6
  5984  0184  0864               	movf	write@number^(0+768),w
  5985  0185  0020               	movlb	0	; select bank0
  5986  0186  00A4               	movwf	___lwdiv@dividend
  5987  0187  318E  26D3  3180   	fcall	___lwdiv
  5988  018A  0020               	movlb	0	; select bank0
  5989  018B  0823               	movf	?___lwdiv+1,w
  5990  018C  00AD               	movwf	___lwmod@dividend+1
  5991  018D  0822               	movf	?___lwdiv,w
  5992  018E  00AC               	movwf	___lwmod@dividend
  5993  018F  318E  2614  3180   	fcall	___lwmod
  5994  0192  0020               	movlb	0	; select bank0
  5995  0193  082A               	movf	?___lwmod,w
  5996  0194  00D3               	movwf	??_write
  5997  0195  0853               	movf	??_write,w
  5998  0196  0026               	movlb	6	; select bank6
  5999  0197  00AA               	movwf	write@digit3^(0+768)
  6000                           
  6001                           ;main.c: 460: digit4 = (number/10)%10;
  6002  0198  300A               	movlw	10
  6003  0199  0020               	movlb	0	; select bank0
  6004  019A  00AA               	movwf	___lwmod@divisor
  6005  019B  3000               	movlw	0
  6006  019C  00AB               	movwf	___lwmod@divisor+1
  6007  019D  300A               	movlw	10
  6008  019E  00A2               	movwf	___lwdiv@divisor
  6009  019F  3000               	movlw	0
  6010  01A0  00A3               	movwf	___lwdiv@divisor+1
  6011  01A1  0026               	movlb	6	; select bank6
  6012  01A2  0865               	movf	(write@number+1)^(0+768),w
  6013  01A3  0020               	movlb	0	; select bank0
  6014  01A4  00A5               	movwf	___lwdiv@dividend+1
  6015  01A5  0026               	movlb	6	; select bank6
  6016  01A6  0864               	movf	write@number^(0+768),w
  6017  01A7  0020               	movlb	0	; select bank0
  6018  01A8  00A4               	movwf	___lwdiv@dividend
  6019  01A9  318E  26D3  3180   	fcall	___lwdiv
  6020  01AC  0020               	movlb	0	; select bank0
  6021  01AD  0823               	movf	?___lwdiv+1,w
  6022  01AE  00AD               	movwf	___lwmod@dividend+1
  6023  01AF  0822               	movf	?___lwdiv,w
  6024  01B0  00AC               	movwf	___lwmod@dividend
  6025  01B1  318E  2614  3180   	fcall	___lwmod
  6026  01B4  0020               	movlb	0	; select bank0
  6027  01B5  082A               	movf	?___lwmod,w
  6028  01B6  00D3               	movwf	??_write
  6029  01B7  0853               	movf	??_write,w
  6030  01B8  0026               	movlb	6	; select bank6
  6031  01B9  00AB               	movwf	write@digit4^(0+768)
  6032                           
  6033                           ;main.c: 461: digit5 = number%10;
  6034  01BA  300A               	movlw	10
  6035  01BB  0020               	movlb	0	; select bank0
  6036  01BC  00AA               	movwf	___lwmod@divisor
  6037  01BD  3000               	movlw	0
  6038  01BE  00AB               	movwf	___lwmod@divisor+1
  6039  01BF  0026               	movlb	6	; select bank6
  6040  01C0  0865               	movf	(write@number+1)^(0+768),w
  6041  01C1  0020               	movlb	0	; select bank0
  6042  01C2  00AD               	movwf	___lwmod@dividend+1
  6043  01C3  0026               	movlb	6	; select bank6
  6044  01C4  0864               	movf	write@number^(0+768),w
  6045  01C5  0020               	movlb	0	; select bank0
  6046  01C6  00AC               	movwf	___lwmod@dividend
  6047  01C7  318E  2614  3180   	fcall	___lwmod
  6048  01CA  0020               	movlb	0	; select bank0
  6049  01CB  082A               	movf	?___lwmod,w
  6050  01CC  00D3               	movwf	??_write
  6051  01CD  0853               	movf	??_write,w
  6052  01CE  0026               	movlb	6	; select bank6
  6053  01CF  00AC               	movwf	write@digit5^(0+768)
  6054                           
  6055                           ;main.c: 462: uint8_t * toWrite[7];
  6056                           ;main.c: 463: uint8_t letter_space[8] = {
  6057                           ;main.c: 464: 0b00000000,
  6058                           ;main.c: 465: 0b00000000,
  6059                           ;main.c: 466: 0b00000000,
  6060                           ;main.c: 467: 0b00000000,
  6061                           ;main.c: 468: 0b00000000,
  6062                           ;main.c: 469: 0b00000000,
  6063                           ;main.c: 470: 0b00000000,
  6064                           ;main.c: 471: 0b00000000
  6065                           ;main.c: 472: };
  6066  01D0  30CA               	movlw	low write@F12456
  6067  01D1  0086               	movwf	6
  6068  01D2  3001               	movlw	high write@F12456
  6069  01D3  0087               	movwf	7
  6070  01D4  3020               	movlw	low write@letter_space
  6071  01D5  0084               	movwf	4
  6072  01D6  3003               	movlw	high write@letter_space
  6073  01D7  0085               	movwf	5
  6074  01D8  3008               	movlw	8
  6075  01D9  0020               	movlb	0	; select bank0
  6076  01DA  00D3               	movwf	??_write
  6077  01DB                     u5830:	
  6078  01DB  0016               	moviw fsr1++
  6079  01DC  001A               	movwi fsr0++
  6080  01DD  0BD3               	decfsz	??_write,f
  6081  01DE  29DB               	goto	u5830
  6082                           
  6083                           ;main.c: 473: toWrite[0] = letter_space;
  6084  01DF  3020               	movlw	low write@letter_space
  6085  01E0  0026               	movlb	6	; select bank6
  6086  01E1  00CB               	movwf	write@toWrite_362^(0+768)
  6087  01E2  3003               	movlw	high write@letter_space
  6088  01E3  00CC               	movwf	(write@toWrite_362+1)^(0+768)
  6089                           
  6090                           ;main.c: 474: toWrite[1] = numberTable[digit1];
  6091  01E4  0828               	movf	write@digit1^(0+768),w
  6092  01E5  3EA0               	addlw	(low (_numberTable| (0+256)))& (0+255)
  6093  01E6  0086               	movwf	6
  6094  01E7  3001               	movlw	1	; select bank3/4
  6095  01E8  0087               	movwf	7
  6096  01E9  0801               	movf	1,w
  6097  01EA  00CD               	movwf	(low ((write@toWrite_362| (0+768)+2)))^0
  6098  01EB  3002               	movlw	2
  6099  01EC  00CE               	movwf	((low ((write@toWrite_362| (0+768)+2))+1))^0
  6100                           
  6101                           ;main.c: 475: toWrite[2] = numberTable[digit2];
  6102  01ED  0829               	movf	write@digit2^(0+768),w
  6103  01EE  3EA0               	addlw	(low (_numberTable| (0+256)))& (0+255)
  6104  01EF  0086               	movwf	6
  6105  01F0  3001               	movlw	1	; select bank3/4
  6106  01F1  0087               	movwf	7
  6107  01F2  0801               	movf	1,w
  6108  01F3  00CF               	movwf	(low ((write@toWrite_362| (0+768)+4)))^0
  6109  01F4  3002               	movlw	2
  6110  01F5  00D0               	movwf	((low ((write@toWrite_362| (0+768)+4))+1))^0
  6111                           
  6112                           ;main.c: 476: toWrite[3] = numberTable[digit3];
  6113  01F6  082A               	movf	write@digit3^(0+768),w
  6114  01F7  3EA0               	addlw	(low (_numberTable| (0+256)))& (0+255)
  6115  01F8  0086               	movwf	6
  6116  01F9  3001               	movlw	1	; select bank3/4
  6117  01FA  0087               	movwf	7
  6118  01FB  0801               	movf	1,w
  6119  01FC  00D1               	movwf	(low ((write@toWrite_362| (0+768)+6)))^0
  6120  01FD  3002               	movlw	2
  6121  01FE  00D2               	movwf	((low ((write@toWrite_362| (0+768)+6))+1))^0
  6122                           
  6123                           ;main.c: 477: toWrite[4] = numberTable[digit4];
  6124  01FF  082B               	movf	write@digit4^(0+768),w
  6125  0200  3EA0               	addlw	(low (_numberTable| (0+256)))& (0+255)
  6126  0201  0086               	movwf	6
  6127  0202  3001               	movlw	1	; select bank3/4
  6128  0203  0087               	movwf	7
  6129  0204  0801               	movf	1,w
  6130  0205  00D3               	movwf	(low ((write@toWrite_362| (0+768)+8)))^0
  6131  0206  3002               	movlw	2
  6132  0207  00D4               	movwf	((low ((write@toWrite_362| (0+768)+8))+1))^0
  6133                           
  6134                           ;main.c: 478: toWrite[5] = numberTable[digit5];
  6135  0208  082C               	movf	write@digit5^(0+768),w
  6136  0209  3EA0               	addlw	(low (_numberTable| (0+256)))& (0+255)
  6137  020A  0086               	movwf	6
  6138  020B  3001               	movlw	1	; select bank3/4
  6139  020C  0087               	movwf	7
  6140  020D  0801               	movf	1,w
  6141  020E  00D5               	movwf	(low ((write@toWrite_362| (0+768)+10)))^0
  6142  020F  3002               	movlw	2
  6143  0210  00D6               	movwf	((low ((write@toWrite_362| (0+768)+10))+1))^0
  6144                           
  6145                           ;main.c: 479: toWrite[6] = letter_space;
  6146  0211  3020               	movlw	low write@letter_space
  6147  0212  00D7               	movwf	(low ((write@toWrite_362| (0+768)+12)))^0
  6148  0213  3003               	movlw	high write@letter_space
  6149  0214  00D8               	movwf	((low ((write@toWrite_362| (0+768)+12))+1))^0
  6150                           
  6151                           ;main.c: 480: writeWord(toWrite, 48);
  6152  0215  3030               	movlw	48
  6153  0216  0020               	movlb	0	; select bank0
  6154  0217  00D3               	movwf	??_write
  6155  0218  0853               	movf	??_write,w
  6156  0219  00BD               	movwf	writeWord@len
  6157  021A  304B               	movlw	(low (write@toWrite_362| (0+768)))& (0+255)
  6158  021B  3182  22DD         	fcall	_writeWord
  6159                           
  6160                           ;main.c: 481: wallColor = 1;
  6161  021D  0021               	movlb	1	; select bank1
  6162  021E  01C3               	clrf	_wallColor^(0+128)
  6163  021F  0AC3               	incf	_wallColor^(0+128),f
  6164  0220  0008               	return
  6165  0221                     __end_of_write:	
  6166                           
  6167                           	psect	text9
  6168  02DD                     __ptext9:	
  6169 ;; *************** function _writeWord *****************
  6170 ;; Defined at:
  6171 ;;		line 400 in file "main.c"
  6172 ;; Parameters:    Size  Location     Type
  6173 ;;  text            1    wreg     PTR PTR unsigned char 
  6174 ;;		 -> write@toWrite_362(14), write@toWrite_356(14), write@toWrite_355(16), write@toWrite(10), 
  6175 ;;  len             1   29[BANK0 ] unsigned char 
  6176 ;; Auto vars:     Size  Location     Type
  6177 ;;  text            1   48[BANK0 ] PTR PTR unsigned char 
  6178 ;;		 -> write@toWrite_362(14), write@toWrite_356(14), write@toWrite_355(16), write@toWrite(10), 
  6179 ;;  k               1   50[BANK0 ] unsigned char 
  6180 ;;  shiftValue      1   47[BANK0 ] unsigned char 
  6181 ;;  idx             1   49[BANK0 ] unsigned char 
  6182 ;; Return value:  Size  Location     Type
  6183 ;;                  1    wreg      void 
  6184 ;; Registers used:
  6185 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6186 ;; Tracked objects:
  6187 ;;		On entry : 0/0
  6188 ;;		On exit  : 0/0
  6189 ;;		Unchanged: 0/0
  6190 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6191 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6192 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6193 ;;      Temps:          0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6194 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6195 ;;Total ram usage:       22 bytes
  6196 ;; Hardware stack levels used:    1
  6197 ;; Hardware stack levels required when called:   16
  6198 ;; This function calls:
  6199 ;;		___awdiv
  6200 ;;		_clearPixels
  6201 ;;		_drawWalls
  6202 ;;		_writeDisplay
  6203 ;; This function is called by:
  6204 ;;		_write
  6205 ;; This function uses a non-reentrant model
  6206 ;;
  6207                           
  6208                           
  6209                           ;psect for function _writeWord
  6210  02DD                     _writeWord:	
  6211                           
  6212                           ;incstack = 0
  6213 ;; hardware stack exceeded
  6214                           ; Regs used in _writeWord: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6215                           ;writeWord@text stored from wreg
  6216  02DD  0020               	movlb	0	; select bank0
  6217  02DE  00D0               	movwf	writeWord@text
  6218                           
  6219                           ;main.c: 401: for (i = 0; i < 8; i++) {
  6220  02DF  01E1               	clrf	_i
  6221  02E0  3008               	movlw	8
  6222  02E1  0261               	subwf	_i,w
  6223  02E2  1803               	btfsc	3,0
  6224  02E3  2AF2               	goto	l6676
  6225  02E4                     l6670:	
  6226                           
  6227                           ;main.c: 402: walls[i] = 0;
  6228  02E4  0861               	movf	_i,w
  6229  02E5  3E30               	addlw	(low (_walls| (0+256)))& (0+255)
  6230  02E6  0086               	movwf	6
  6231  02E7  3001               	movlw	1	; select bank2/3
  6232  02E8  0087               	movwf	7
  6233  02E9  0181               	clrf	1
  6234  02EA  3001               	movlw	1
  6235  02EB  00BE               	movwf	??_writeWord
  6236  02EC  083E               	movf	??_writeWord,w
  6237  02ED  07E1               	addwf	_i,f
  6238  02EE  3008               	movlw	8
  6239  02EF  0261               	subwf	_i,w
  6240  02F0  1C03               	skipc
  6241  02F1  2AE4               	goto	l6670
  6242  02F2                     l6676:	
  6243                           
  6244                           ;main.c: 403: }
  6245                           ;main.c: 404: for (uint8_t idx = 0; idx < len; idx++) {
  6246  02F2  01D1               	clrf	writeWord@idx
  6247  02F3                     l6698:	
  6248  02F3  083D               	movf	writeWord@len,w
  6249  02F4  0251               	subwf	writeWord@idx,w
  6250  02F5  1803               	btfsc	3,0
  6251  02F6  0008               	return
  6252                           
  6253                           ;main.c: 405: uint8_t shiftValue = idx % 8;
  6254  02F7  0851               	movf	writeWord@idx,w
  6255  02F8  3907               	andlw	7
  6256  02F9  00BE               	movwf	??_writeWord
  6257  02FA  083E               	movf	??_writeWord,w
  6258  02FB  00CF               	movwf	writeWord@shiftValue
  6259                           
  6260                           ;main.c: 406: for (uint8_t k = 0; k < 8; k++) {
  6261  02FC  01D2               	clrf	writeWord@k
  6262  02FD  3008               	movlw	8
  6263  02FE  0252               	subwf	writeWord@k,w
  6264  02FF  1803               	btfsc	3,0
  6265  0300  2B6D               	goto	l6690
  6266  0301                     l6684:	
  6267                           
  6268                           ;main.c: 407: walls[k] = ((text[idx / 8][k]) << shiftValue) |
  6269                           ;main.c: 408: ((text[idx / 8 + 1][k]) >> 8 - shiftValue);
  6270  0301  0852               	movf	writeWord@k,w
  6271  0302  00BE               	movwf	??_writeWord
  6272  0303  01BF               	clrf	??_writeWord+1
  6273  0304  3008               	movlw	8
  6274  0305  00A2               	movwf	___awdiv@divisor
  6275  0306  3000               	movlw	0
  6276  0307  00A3               	movwf	___awdiv@divisor+1
  6277  0308  0851               	movf	writeWord@idx,w
  6278  0309  00C0               	movwf	??_writeWord+2
  6279  030A  01C1               	clrf	??_writeWord+3
  6280  030B  0840               	movf	??_writeWord+2,w
  6281  030C  00A4               	movwf	___awdiv@dividend
  6282  030D  0841               	movf	??_writeWord+3,w
  6283  030E  00A5               	movwf	___awdiv@dividend+1
  6284  030F  3186  2650  3182   	fcall	___awdiv
  6285  0312  0020               	movlb	0	; select bank0
  6286  0313  0822               	movf	?___awdiv,w
  6287  0314  0709               	addwf	9,w
  6288  0315  3E02               	addlw	2
  6289  0316  0750               	addwf	writeWord@text,w
  6290  0317  00C2               	movwf	??_writeWord+4
  6291  0318  0842               	movf	??_writeWord+4,w
  6292  0319  0086               	movwf	6
  6293  031A  3003               	movlw	3	; select bank6/7
  6294  031B  0087               	movwf	7
  6295  031C  3F40               	moviw [0]fsr1
  6296  031D  00C3               	movwf	??_writeWord+5
  6297  031E  3F41               	moviw [1]fsr1
  6298  031F  00C4               	movwf	??_writeWord+6
  6299  0320  083E               	movf	??_writeWord,w
  6300  0321  0743               	addwf	??_writeWord+5,w
  6301  0322  0086               	movwf	6
  6302  0323  083F               	movf	??_writeWord+1,w
  6303  0324  3D44               	addwfc	??_writeWord+6,w
  6304  0325  0087               	movwf	7
  6305  0326  0801               	movf	1,w
  6306  0327  00C5               	movwf	??_writeWord+7
  6307  0328  034F               	decf	writeWord@shiftValue,w
  6308  0329  3AFF               	xorlw	255
  6309  032A  3E08               	addlw	8
  6310  032B  0A89               	incf	9,f
  6311  032C  2B2E               	goto	u5744
  6312  032D                     u5745:	
  6313  032D  36C5               	lsrf	??_writeWord+7,f
  6314  032E                     u5744:	
  6315  032E  0B89               	decfsz	9,f
  6316  032F  2B2D               	goto	u5745
  6317  0330  0852               	movf	writeWord@k,w
  6318  0331  00C6               	movwf	??_writeWord+8
  6319  0332  01C7               	clrf	??_writeWord+9
  6320  0333  3008               	movlw	8
  6321  0334  00A2               	movwf	___awdiv@divisor
  6322  0335  3000               	movlw	0
  6323  0336  00A3               	movwf	___awdiv@divisor+1
  6324  0337  0851               	movf	writeWord@idx,w
  6325  0338  00C8               	movwf	??_writeWord+10
  6326  0339  01C9               	clrf	??_writeWord+11
  6327  033A  0848               	movf	??_writeWord+10,w
  6328  033B  00A4               	movwf	___awdiv@dividend
  6329  033C  0849               	movf	??_writeWord+11,w
  6330  033D  00A5               	movwf	___awdiv@dividend+1
  6331  033E  3186  2650  3182   	fcall	___awdiv
  6332  0341  0020               	movlb	0	; select bank0
  6333  0342  0822               	movf	?___awdiv,w
  6334  0343  0709               	addwf	9,w
  6335  0344  0750               	addwf	writeWord@text,w
  6336  0345  00CA               	movwf	??_writeWord+12
  6337  0346  084A               	movf	??_writeWord+12,w
  6338  0347  0086               	movwf	6
  6339  0348  3003               	movlw	3	; select bank6/7
  6340  0349  0087               	movwf	7
  6341  034A  3F40               	moviw [0]fsr1
  6342  034B  00CB               	movwf	??_writeWord+13
  6343  034C  3F41               	moviw [1]fsr1
  6344  034D  00CC               	movwf	??_writeWord+14
  6345  034E  0846               	movf	??_writeWord+8,w
  6346  034F  074B               	addwf	??_writeWord+13,w
  6347  0350  0086               	movwf	6
  6348  0351  0847               	movf	??_writeWord+9,w
  6349  0352  3D4C               	addwfc	??_writeWord+14,w
  6350  0353  0087               	movwf	7
  6351  0354  0801               	movf	1,w
  6352  0355  00CD               	movwf	??_writeWord+15
  6353  0356  0A4F               	incf	writeWord@shiftValue,w
  6354  0357  2B59               	goto	u5754
  6355  0358                     u5755:	
  6356  0358  35CD               	lslf	??_writeWord+15,f
  6357  0359                     u5754:	
  6358  0359  0B89               	decfsz	9,f
  6359  035A  2B58               	goto	u5755
  6360  035B  084D               	movf	??_writeWord+15,w
  6361  035C  0445               	iorwf	??_writeWord+7,w
  6362  035D  00CE               	movwf	??_writeWord+16
  6363  035E  0852               	movf	writeWord@k,w
  6364  035F  3E30               	addlw	(low (_walls| (0+256)))& (0+255)
  6365  0360  0086               	movwf	6
  6366  0361  3001               	movlw	1	; select bank2/3
  6367  0362  0087               	movwf	7
  6368  0363  084E               	movf	??_writeWord+16,w
  6369  0364  0081               	movwf	1
  6370  0365  3001               	movlw	1
  6371  0366  00BE               	movwf	??_writeWord
  6372  0367  083E               	movf	??_writeWord,w
  6373  0368  07D2               	addwf	writeWord@k,f
  6374  0369  3008               	movlw	8
  6375  036A  0252               	subwf	writeWord@k,w
  6376  036B  1C03               	skipc
  6377  036C  2B01               	goto	l6684
  6378  036D                     l6690:	
  6379                           
  6380                           ;main.c: 409: }
  6381                           ;main.c: 410: clearPixels();
  6382  036D  318B  2324  3182   	fcall	_clearPixels
  6383                           
  6384                           ;main.c: 411: drawWalls();
  6385  0370  3185  25FC  3182   	fcall	_drawWalls
  6386                           
  6387                           ;main.c: 412: writeDisplay();
  6388  0373  3185  2546  3182   	fcall	_writeDisplay
  6389                           
  6390                           ;main.c: 413: _delay((unsigned long)((70)*(32000000/4000.0)));
  6391  0376  3003               	movlw	3
  6392  0377  0020               	movlb	0	; select bank0
  6393  0378  00BF               	movwf	??_writeWord+1
  6394  0379  30D8               	movlw	216
  6395  037A  00BE               	movwf	??_writeWord
  6396  037B  3041               	movlw	65
  6397  037C                     u6317:	
  6398  037C  0B89               	decfsz	9,f
  6399  037D  2B7C               	goto	u6317
  6400  037E  0BBE               	decfsz	??_writeWord,f
  6401  037F  2B7C               	goto	u6317
  6402  0380  0BBF               	decfsz	??_writeWord+1,f
  6403  0381  2B7C               	goto	u6317
  6404  0382  3200               	nop2
  6405  0383  3001               	movlw	1
  6406  0384  0020               	movlb	0	; select bank0
  6407  0385  00BE               	movwf	??_writeWord
  6408  0386  083E               	movf	??_writeWord,w
  6409  0387  07D1               	addwf	writeWord@idx,f
  6410  0388  2AF3               	goto	l6698
  6411  0389                     __end_of_writeWord:	
  6412                           
  6413                           	psect	text10
  6414  0546                     __ptext10:	
  6415 ;; *************** function _writeDisplay *****************
  6416 ;; Defined at:
  6417 ;;		line 298 in file "main.c"
  6418 ;; Parameters:    Size  Location     Type
  6419 ;;		None
  6420 ;; Auto vars:     Size  Location     Type
  6421 ;;		None
  6422 ;; Return value:  Size  Location     Type
  6423 ;;                  1    wreg      void 
  6424 ;; Registers used:
  6425 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6426 ;; Tracked objects:
  6427 ;;		On entry : 0/0
  6428 ;;		On exit  : 0/0
  6429 ;;		Unchanged: 0/0
  6430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6431 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6432 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6433 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6434 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6435 ;;Total ram usage:        5 bytes
  6436 ;; Hardware stack levels used:    1
  6437 ;; Hardware stack levels required when called:   15
  6438 ;; This function calls:
  6439 ;;		___awdiv
  6440 ;;		_i2c_writeNBytes
  6441 ;; This function is called by:
  6442 ;;		_writeWord
  6443 ;;		_endGame
  6444 ;;		_main
  6445 ;; This function uses a non-reentrant model
  6446 ;;
  6447                           
  6448                           
  6449                           ;psect for function _writeDisplay
  6450  0546                     _writeDisplay:	
  6451                           
  6452                           ;main.c: 299: writebuffer[0] = 0;
  6453                           
  6454                           ;incstack = 0
  6455                           ; Regs used in _writeDisplay: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6456  0546  0023               	movlb	3	; select bank3
  6457  0547  01D2               	clrf	_writebuffer^(0+384)
  6458                           
  6459                           ;main.c: 300: for (i = 1; i < 17; i += 2) {
  6460  0548  0020               	movlb	0	; select bank0
  6461  0549  01E1               	clrf	_i
  6462  054A  0AE1               	incf	_i,f
  6463  054B  3011               	movlw	17
  6464  054C  0261               	subwf	_i,w
  6465  054D  1803               	btfsc	3,0
  6466  054E  2D98               	goto	l6662
  6467  054F                     l6656:	
  6468                           
  6469                           ;main.c: 301: writebuffer[i] = pixelbuffer[i / 2] & 0xFF;
  6470  054F  3002               	movlw	2
  6471  0550  00A2               	movwf	___awdiv@divisor
  6472  0551  3000               	movlw	0
  6473  0552  00A3               	movwf	___awdiv@divisor+1
  6474  0553  0861               	movf	_i,w
  6475  0554  00B8               	movwf	??_writeDisplay
  6476  0555  01B9               	clrf	??_writeDisplay+1
  6477  0556  0838               	movf	??_writeDisplay,w
  6478  0557  00A4               	movwf	___awdiv@dividend
  6479  0558  0839               	movf	??_writeDisplay+1,w
  6480  0559  00A5               	movwf	___awdiv@dividend+1
  6481  055A  3186  2650  3185   	fcall	___awdiv
  6482  055D  0020               	movlb	0	; select bank0
  6483  055E  0822               	movf	?___awdiv,w
  6484  055F  0709               	addwf	9,w
  6485  0560  3E20               	addlw	(low (_pixelbuffer| (0+256)))& (0+255)
  6486  0561  0086               	movwf	6
  6487  0562  3001               	movlw	1	; select bank2/3
  6488  0563  0087               	movwf	7
  6489  0564  0801               	movf	1,w
  6490  0565  00BA               	movwf	??_writeDisplay+2
  6491  0566  0861               	movf	_i,w
  6492  0567  3ED2               	addlw	(low (_writebuffer| (0+256)))& (0+255)
  6493  0568  0086               	movwf	6
  6494  0569  3001               	movlw	1	; select bank3/4
  6495  056A  0087               	movwf	7
  6496  056B  083A               	movf	??_writeDisplay+2,w
  6497  056C  0081               	movwf	1
  6498                           
  6499                           ;main.c: 302: writebuffer[i + 1] = pixelbuffer[i / 2] >> 8;
  6500  056D  3002               	movlw	2
  6501  056E  00A2               	movwf	___awdiv@divisor
  6502  056F  3000               	movlw	0
  6503  0570  00A3               	movwf	___awdiv@divisor+1
  6504  0571  0861               	movf	_i,w
  6505  0572  00B8               	movwf	??_writeDisplay
  6506  0573  01B9               	clrf	??_writeDisplay+1
  6507  0574  0838               	movf	??_writeDisplay,w
  6508  0575  00A4               	movwf	___awdiv@dividend
  6509  0576  0839               	movf	??_writeDisplay+1,w
  6510  0577  00A5               	movwf	___awdiv@dividend+1
  6511  0578  3186  2650  3185   	fcall	___awdiv
  6512  057B  0020               	movlb	0	; select bank0
  6513  057C  0822               	movf	?___awdiv,w
  6514  057D  0709               	addwf	9,w
  6515  057E  3E20               	addlw	(low (_pixelbuffer| (0+256)))& (0+255)
  6516  057F  0086               	movwf	6
  6517  0580  3001               	movlw	1	; select bank2/3
  6518  0581  0087               	movwf	7
  6519  0582  3F40               	moviw [0]fsr1
  6520  0583  00BA               	movwf	??_writeDisplay+2
  6521  0584  3F41               	moviw [1]fsr1
  6522  0585  00BB               	movwf	??_writeDisplay+3
  6523  0586  083B               	movf	??_writeDisplay+3,w
  6524  0587  00BC               	movwf	??_writeDisplay+4
  6525  0588  0861               	movf	_i,w
  6526  0589  3E01               	addlw	1
  6527  058A  3ED2               	addlw	(low (_writebuffer| (0+256)))& (0+255)
  6528  058B  0086               	movwf	6
  6529  058C  3001               	movlw	1	; select bank3/4
  6530  058D  0087               	movwf	7
  6531  058E  083C               	movf	??_writeDisplay+4,w
  6532  058F  0081               	movwf	1
  6533  0590  3002               	movlw	2
  6534  0591  00B8               	movwf	??_writeDisplay
  6535  0592  0838               	movf	??_writeDisplay,w
  6536  0593  07E1               	addwf	_i,f
  6537  0594  3011               	movlw	17
  6538  0595  0261               	subwf	_i,w
  6539  0596  1C03               	skipc
  6540  0597  2D4F               	goto	l6656
  6541  0598                     l6662:	
  6542                           
  6543                           ;main.c: 303: }
  6544                           ;main.c: 304: i2c_writeNBytes(0x70, writebuffer, 17);
  6545  0598  30D2               	movlw	(low (_writebuffer| (0+256)))& (0+255)
  6546  0599  00B8               	movwf	??_writeDisplay
  6547  059A  0838               	movf	??_writeDisplay,w
  6548  059B  00B4               	movwf	i2c_writeNBytes@data
  6549  059C  3011               	movlw	17
  6550  059D  00B5               	movwf	i2c_writeNBytes@len
  6551  059E  3000               	movlw	0
  6552  059F  00B6               	movwf	i2c_writeNBytes@len+1
  6553  05A0  3070               	movlw	112
  6554  05A1  318D  25C1         	fcall	_i2c_writeNBytes
  6555  05A3  0008               	return
  6556  05A4                     __end_of_writeDisplay:	
  6557                           
  6558                           	psect	text11
  6559  0DC1                     __ptext11:	
  6560 ;; *************** function _i2c_writeNBytes *****************
  6561 ;; Defined at:
  6562 ;;		line 48 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  6563 ;; Parameters:    Size  Location     Type
  6564 ;;  address         1    wreg     unsigned char 
  6565 ;;  data            1   20[BANK0 ] PTR void 
  6566 ;;		 -> writebuffer(17), 
  6567 ;;  len             2   21[BANK0 ] unsigned int 
  6568 ;; Auto vars:     Size  Location     Type
  6569 ;;  address         1   23[BANK0 ] unsigned char 
  6570 ;; Return value:  Size  Location     Type
  6571 ;;                  1    wreg      void 
  6572 ;; Registers used:
  6573 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6574 ;; Tracked objects:
  6575 ;;		On entry : 0/0
  6576 ;;		On exit  : 0/0
  6577 ;;		Unchanged: 0/0
  6578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6579 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6580 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6581 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6582 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6583 ;;Total ram usage:        4 bytes
  6584 ;; Hardware stack levels used:    1
  6585 ;; Hardware stack levels required when called:   14
  6586 ;; This function calls:
  6587 ;;		_i2c_close
  6588 ;;		_i2c_masterWrite
  6589 ;;		_i2c_open
  6590 ;;		_i2c_setAddressNACKCallback
  6591 ;;		_i2c_setBuffer
  6592 ;; This function is called by:
  6593 ;;		_writeDisplay
  6594 ;;		_initializeDisplay
  6595 ;; This function uses a non-reentrant model
  6596 ;;
  6597                           
  6598                           
  6599                           ;psect for function _i2c_writeNBytes
  6600  0DC1                     _i2c_writeNBytes:	
  6601                           
  6602                           ;incstack = 0
  6603                           ; Regs used in _i2c_writeNBytes: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6604                           ;i2c_writeNBytes@address stored from wreg
  6605  0DC1  0020               	movlb	0	; select bank0
  6606  0DC2  00B7               	movwf	i2c_writeNBytes@address
  6607  0DC3                     l6638:	
  6608                           ;i2c_simple_master.c: 50: while(!i2c_open(address));
  6609                           
  6610  0DC3  0020               	movlb	0	; select bank0
  6611  0DC4  0837               	movf	i2c_writeNBytes@address,w
  6612  0DC5  3186  26F2  318D   	fcall	_i2c_open
  6613  0DC8  3A00               	xorlw	0
  6614  0DC9  1903               	skipnz
  6615  0DCA  2DC3               	goto	l6638
  6616                           
  6617                           ;i2c_simple_master.c: 51: i2c_setBuffer(data,len);
  6618  0DCB  0020               	movlb	0	; select bank0
  6619  0DCC  0834               	movf	i2c_writeNBytes@data,w
  6620  0DCD  00A2               	movwf	i2c_setBuffer@buffer
  6621  0DCE  3001               	movlw	1
  6622  0DCF  00A3               	movwf	i2c_setBuffer@buffer+1
  6623  0DD0  0836               	movf	i2c_writeNBytes@len+1,w
  6624  0DD1  00A5               	movwf	i2c_setBuffer@bufferSize+1
  6625  0DD2  0835               	movf	i2c_writeNBytes@len,w
  6626  0DD3  00A4               	movwf	i2c_setBuffer@bufferSize
  6627  0DD4  318B  238B  318D   	fcall	_i2c_setBuffer
  6628                           
  6629                           ;i2c_simple_master.c: 52: i2c_setAddressNACKCallback(i2c_restartWrite,(0));
  6630  0DD7  30D7               	movlw	low _i2c_restartWrite
  6631  0DD8  0020               	movlb	0	; select bank0
  6632  0DD9  00A7               	movwf	i2c_setAddressNACKCallback@cb
  6633  0DDA  3009               	movlw	high _i2c_restartWrite
  6634  0DDB  00A8               	movwf	i2c_setAddressNACKCallback@cb+1
  6635  0DDC  01A9               	clrf	i2c_setAddressNACKCallback@p
  6636  0DDD  318B  2317  318D   	fcall	_i2c_setAddressNACKCallback
  6637                           
  6638                           ;i2c_simple_master.c: 53: i2c_masterWrite();
  6639  0DE0  3189  21AC  318D   	fcall	_i2c_masterWrite
  6640  0DE3                     l6646:	
  6641                           ;i2c_simple_master.c: 54: while(I2C_BUSY == i2c_close());
  6642                           
  6643  0DE3  318B  23BA  318D   	fcall	_i2c_close
  6644  0DE6  3A01               	xorlw	1
  6645  0DE7  1D03               	btfss	3,2
  6646  0DE8  0008               	return
  6647  0DE9  2DE3               	goto	l6646
  6648  0DEA                     __end_of_i2c_writeNBytes:	
  6649                           
  6650                           	psect	text12
  6651  0B17                     __ptext12:	
  6652 ;; *************** function _i2c_setAddressNACKCallback *****************
  6653 ;; Defined at:
  6654 ;;		line 99 in file "mcc_generated_files/drivers/i2c_master.c"
  6655 ;; Parameters:    Size  Location     Type
  6656 ;;  cb              2    7[BANK0 ] PTR FTN(PTR void ,)enum 
  6657 ;;		 -> i2c_restartWrite(1), 
  6658 ;;  p               1    9[BANK0 ] PTR void 
  6659 ;;		 -> NULL(0), 
  6660 ;; Auto vars:     Size  Location     Type
  6661 ;;		None
  6662 ;; Return value:  Size  Location     Type
  6663 ;;                  1    wreg      void 
  6664 ;; Registers used:
  6665 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6666 ;; Tracked objects:
  6667 ;;		On entry : 0/0
  6668 ;;		On exit  : 0/0
  6669 ;;		Unchanged: 0/0
  6670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6671 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6672 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6673 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6674 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6675 ;;Total ram usage:        4 bytes
  6676 ;; Hardware stack levels used:    1
  6677 ;; Hardware stack levels required when called:    7
  6678 ;; This function calls:
  6679 ;;		_setCallBack
  6680 ;; This function is called by:
  6681 ;;		_i2c_writeNBytes
  6682 ;;		_i2c_write1ByteRegister
  6683 ;;		_i2c_read1ByteRegister
  6684 ;;		_i2c_read2ByteRegister
  6685 ;;		_i2c_write2ByteRegister
  6686 ;;		_i2c_readDataBlock
  6687 ;; This function uses a non-reentrant model
  6688 ;;
  6689                           
  6690                           
  6691                           ;psect for function _i2c_setAddressNACKCallback
  6692  0B17                     _i2c_setAddressNACKCallback:	
  6693                           
  6694                           ;i2c_master.c: 101: setCallBack(i2c_addressNACK,cb,p);
  6695                           
  6696                           ;incstack = 0
  6697                           ; Regs used in _i2c_setAddressNACKCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  6698  0B17  0020               	movlb	0	; select bank0
  6699  0B18  0828               	movf	i2c_setAddressNACKCallback@cb+1,w
  6700  0B19  00A3               	movwf	setCallBack@cb+1
  6701  0B1A  0827               	movf	i2c_setAddressNACKCallback@cb,w
  6702  0B1B  00A2               	movwf	setCallBack@cb
  6703  0B1C  0829               	movf	i2c_setAddressNACKCallback@p,w
  6704  0B1D  00AA               	movwf	??_i2c_setAddressNACKCallback
  6705  0B1E  082A               	movf	??_i2c_setAddressNACKCallback,w
  6706  0B1F  00A4               	movwf	setCallBack@p
  6707  0B20  3002               	movlw	2
  6708  0B21  318D  254D         	fcall	_setCallBack
  6709  0B23  0008               	return
  6710  0B24                     __end_of_i2c_setAddressNACKCallback:	
  6711                           
  6712                           	psect	text13
  6713  06F2                     __ptext13:	
  6714 ;; *************** function _i2c_open *****************
  6715 ;; Defined at:
  6716 ;;		line 116 in file "mcc_generated_files/drivers/i2c_master.c"
  6717 ;; Parameters:    Size  Location     Type
  6718 ;;  address         1    wreg     unsigned char 
  6719 ;; Auto vars:     Size  Location     Type
  6720 ;;  address         1    5[BANK0 ] unsigned char 
  6721 ;;  ret             1    6[BANK0 ] enum E12166
  6722 ;; Return value:  Size  Location     Type
  6723 ;;                  1    wreg      enum E92
  6724 ;; Registers used:
  6725 ;;		wreg, status,2, status,0, pclath, cstack
  6726 ;; Tracked objects:
  6727 ;;		On entry : 0/0
  6728 ;;		On exit  : 0/0
  6729 ;;		Unchanged: 0/0
  6730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6731 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6732 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6733 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6734 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6735 ;;Total ram usage:        3 bytes
  6736 ;; Hardware stack levels used:    1
  6737 ;; Hardware stack levels required when called:    7
  6738 ;; This function calls:
  6739 ;;		_i2c_driver_open
  6740 ;;		_i2c_driver_setBusCollisionISR
  6741 ;;		_i2c_driver_setI2cISR
  6742 ;;		_mssp_clearIRQ
  6743 ;; This function is called by:
  6744 ;;		_i2c_writeNBytes
  6745 ;;		_i2c_write1ByteRegister
  6746 ;;		_i2c_read1ByteRegister
  6747 ;;		_i2c_read2ByteRegister
  6748 ;;		_i2c_write2ByteRegister
  6749 ;;		_i2c_readDataBlock
  6750 ;;		_i2c_readNBytes
  6751 ;; This function uses a non-reentrant model
  6752 ;;
  6753                           
  6754                           
  6755                           ;psect for function _i2c_open
  6756  06F2                     _i2c_open:	
  6757                           
  6758                           ;incstack = 0
  6759                           ; Regs used in _i2c_open: [wreg+status,2+status,0+pclath+cstack]
  6760                           ;i2c_open@address stored from wreg
  6761  06F2  0020               	movlb	0	; select bank0
  6762  06F3  00A5               	movwf	i2c_open@address
  6763                           
  6764                           ;i2c_master.c: 118: i2c_error_t ret = I2C_BUSY;
  6765  06F4  01A6               	clrf	i2c_open@ret
  6766  06F5  0AA6               	incf	i2c_open@ret,f
  6767                           
  6768                           ;i2c_master.c: 120: if(!i2c_status.inUse)
  6769  06F6  0021               	movlb	1	; select bank1
  6770  06F7  18A0               	btfsc	_i2c_status^(0+128),1
  6771  06F8  2F3D               	goto	l642
  6772                           
  6773                           ;i2c_master.c: 121: {
  6774                           ;i2c_master.c: 122: i2c_status.address = address;
  6775  06F9  0020               	movlb	0	; select bank0
  6776  06FA  0825               	movf	i2c_open@address,w
  6777  06FB  00A4               	movwf	??_i2c_open
  6778  06FC  0824               	movf	??_i2c_open,w
  6779  06FD  0021               	movlb	1	; select bank1
  6780  06FE  00A1               	movwf	(_i2c_status^(0+128)+1)
  6781                           
  6782                           ;i2c_master.c: 123: i2c_status.busy = 0;
  6783  06FF  1020               	bcf	_i2c_status^(0+128),0
  6784                           
  6785                           ;i2c_master.c: 124: i2c_status.inUse = 1;
  6786  0700  14A0               	bsf	_i2c_status^(0+128),1
  6787                           
  6788                           ;i2c_master.c: 125: i2c_status.addressNACKCheck = 0;
  6789  0701  11A0               	bcf	_i2c_status^(0+128),3
  6790                           
  6791                           ;i2c_master.c: 126: i2c_status.state = I2C_RESET;
  6792  0702  300E               	movlw	14
  6793  0703  0020               	movlb	0	; select bank0
  6794  0704  00A4               	movwf	??_i2c_open
  6795  0705  0824               	movf	??_i2c_open,w
  6796  0706  0021               	movlb	1	; select bank1
  6797  0707  00AA               	movwf	(_i2c_status^(0+128)+10)
  6798                           
  6799                           ;i2c_master.c: 127: i2c_status.time_out_value = 500;
  6800  0708  30F4               	movlw	244
  6801  0709  00A8               	movwf	(_i2c_status^(0+128)+8)
  6802  070A  3001               	movlw	1
  6803  070B  00A9               	movwf	(_i2c_status^(0+128)+9)
  6804                           
  6805                           ;i2c_master.c: 128: i2c_status.bufferFree = 1;
  6806  070C  1520               	bsf	_i2c_status^(0+128),2
  6807                           
  6808                           ;i2c_master.c: 131: i2c_status.callbackTable[i2c_dataComplete]=returnStop;
  6809  070D  30DD               	movlw	low _returnStop
  6810  070E  00AC               	movwf	(low ((_i2c_status| 0+12)))^(0+128)
  6811  070F  3009               	movlw	high _returnStop
  6812  0710  00AD               	movwf	((low ((_i2c_status| 0+12)))^(0+128)+1)
  6813                           
  6814                           ;i2c_master.c: 132: i2c_status.callbackPayload[i2c_dataComplete] = (0);
  6815  0711  01B8               	clrf	(low ((_i2c_status| 0+24)))^(0+128)
  6816                           
  6817                           ;i2c_master.c: 133: i2c_status.callbackTable[i2c_writeCollision]=returnStop;
  6818  0712  30DD               	movlw	low _returnStop
  6819  0713  00AE               	movwf	(low ((_i2c_status| 0+14)))^(0+128)
  6820  0714  3009               	movlw	high _returnStop
  6821  0715  00AF               	movwf	((low ((_i2c_status| 0+14)))^(0+128)+1)
  6822                           
  6823                           ;i2c_master.c: 134: i2c_status.callbackPayload[i2c_writeCollision] = (0);
  6824  0716  01B9               	clrf	(low ((_i2c_status| 0+25)))^(0+128)
  6825                           
  6826                           ;i2c_master.c: 135: i2c_status.callbackTable[i2c_addressNACK]=returnStop;
  6827  0717  30DD               	movlw	low _returnStop
  6828  0718  00B0               	movwf	(low ((_i2c_status| 0+16)))^(0+128)
  6829  0719  3009               	movlw	high _returnStop
  6830  071A  00B1               	movwf	((low ((_i2c_status| 0+16)))^(0+128)+1)
  6831                           
  6832                           ;i2c_master.c: 136: i2c_status.callbackPayload[i2c_addressNACK] = (0);
  6833  071B  01BA               	clrf	(low ((_i2c_status| 0+26)))^(0+128)
  6834                           
  6835                           ;i2c_master.c: 137: i2c_status.callbackTable[i2c_dataNACK]=returnStop;
  6836  071C  30DD               	movlw	low _returnStop
  6837  071D  00B2               	movwf	(low ((_i2c_status| 0+18)))^(0+128)
  6838  071E  3009               	movlw	high _returnStop
  6839  071F  00B3               	movwf	((low ((_i2c_status| 0+18)))^(0+128)+1)
  6840                           
  6841                           ;i2c_master.c: 138: i2c_status.callbackPayload[i2c_dataNACK] = (0);
  6842  0720  01BB               	clrf	(low ((_i2c_status| 0+27)))^(0+128)
  6843                           
  6844                           ;i2c_master.c: 139: i2c_status.callbackTable[i2c_timeOut]=returnReset;
  6845  0721  30E3               	movlw	low _returnReset
  6846  0722  00B4               	movwf	(low ((_i2c_status| 0+20)))^(0+128)
  6847  0723  3009               	movlw	high _returnReset
  6848  0724  00B5               	movwf	((low ((_i2c_status| 0+20)))^(0+128)+1)
  6849                           
  6850                           ;i2c_master.c: 140: i2c_status.callbackPayload[i2c_timeOut] = (0);
  6851  0725  01BC               	clrf	(low ((_i2c_status| 0+28)))^(0+128)
  6852                           
  6853                           ;i2c_master.c: 142: i2c_driver_open();
  6854  0726  318A  227C  3186   	fcall	_i2c_driver_open
  6855                           
  6856                           ;i2c_master.c: 143: mssp_clearIRQ();
  6857  0729  3189  2168  3186   	fcall	_mssp_clearIRQ
  6858                           
  6859                           ;i2c_master.c: 145: i2c_driver_setBusCollisionISR(i2c_busCollisionISR);
  6860  072C  3053               	movlw	low _i2c_busCollisionISR
  6861  072D  0020               	movlb	0	; select bank0
  6862  072E  00A2               	movwf	i2c_driver_setBusCollisionISR@f
  6863  072F  3009               	movlw	high _i2c_busCollisionISR
  6864  0730  00A3               	movwf	i2c_driver_setBusCollisionISR@f+1
  6865  0731  3189  21EF  3186   	fcall	_i2c_driver_setBusCollisionISR
  6866                           
  6867                           ;i2c_master.c: 146: i2c_driver_setI2cISR(i2c_ISR);
  6868  0734  3072               	movlw	low _i2c_ISR
  6869  0735  0020               	movlb	0	; select bank0
  6870  0736  00A2               	movwf	i2c_driver_setI2cISR@f
  6871  0737  300D               	movlw	high _i2c_ISR
  6872  0738  00A3               	movwf	i2c_driver_setI2cISR@f+1
  6873  0739  3189  21F5         	fcall	_i2c_driver_setI2cISR
  6874                           
  6875                           ;i2c_master.c: 151: ret = I2C_NOERR;
  6876  073B  0020               	movlb	0	; select bank0
  6877  073C  01A6               	clrf	i2c_open@ret
  6878  073D                     l642:	
  6879                           
  6880                           ;i2c_master.c: 152: }
  6881                           ;i2c_master.c: 153: return ret;
  6882  073D  0020               	movlb	0	; select bank0
  6883  073E  0826               	movf	i2c_open@ret,w
  6884  073F  0008               	return
  6885  0740                     __end_of_i2c_open:	
  6886                           
  6887                           	psect	text14
  6888  09F5                     __ptext14:	
  6889 ;; *************** function _i2c_driver_setI2cISR *****************
  6890 ;; Defined at:
  6891 ;;		line 262 in file "mcc_generated_files/i2c_driver.c"
  6892 ;; Parameters:    Size  Location     Type
  6893 ;;  f               2    2[BANK0 ] PTR void 
  6894 ;;		 -> i2c_ISR(1), 
  6895 ;; Auto vars:     Size  Location     Type
  6896 ;;		None
  6897 ;; Return value:  Size  Location     Type
  6898 ;;                  1    wreg      void 
  6899 ;; Registers used:
  6900 ;;		wreg
  6901 ;; Tracked objects:
  6902 ;;		On entry : 0/0
  6903 ;;		On exit  : 0/0
  6904 ;;		Unchanged: 0/0
  6905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6906 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6907 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6908 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6909 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6910 ;;Total ram usage:        2 bytes
  6911 ;; Hardware stack levels used:    1
  6912 ;; Hardware stack levels required when called:    6
  6913 ;; This function calls:
  6914 ;;		Nothing
  6915 ;; This function is called by:
  6916 ;;		_i2c_open
  6917 ;; This function uses a non-reentrant model
  6918 ;;
  6919                           
  6920                           
  6921                           ;psect for function _i2c_driver_setI2cISR
  6922  09F5                     _i2c_driver_setI2cISR:	
  6923                           
  6924                           ;i2c_driver.c: 263: i2c_driver_i2cISR = f;
  6925                           
  6926                           ;incstack = 0
  6927                           ; Regs used in _i2c_driver_setI2cISR: [wreg]
  6928  09F5  0020               	movlb	0	; select bank0
  6929  09F6  0823               	movf	i2c_driver_setI2cISR@f+1,w
  6930  09F7  00DC               	movwf	_i2c_driver_i2cISR+1
  6931  09F8  0822               	movf	i2c_driver_setI2cISR@f,w
  6932  09F9  00DB               	movwf	_i2c_driver_i2cISR
  6933  09FA  0008               	return
  6934  09FB                     __end_of_i2c_driver_setI2cISR:	
  6935                           
  6936                           	psect	text15
  6937  09EF                     __ptext15:	
  6938 ;; *************** function _i2c_driver_setBusCollisionISR *****************
  6939 ;; Defined at:
  6940 ;;		line 258 in file "mcc_generated_files/i2c_driver.c"
  6941 ;; Parameters:    Size  Location     Type
  6942 ;;  f               2    2[BANK0 ] PTR void 
  6943 ;;		 -> i2c_busCollisionISR(1), 
  6944 ;; Auto vars:     Size  Location     Type
  6945 ;;		None
  6946 ;; Return value:  Size  Location     Type
  6947 ;;                  1    wreg      void 
  6948 ;; Registers used:
  6949 ;;		wreg
  6950 ;; Tracked objects:
  6951 ;;		On entry : 0/0
  6952 ;;		On exit  : 0/0
  6953 ;;		Unchanged: 0/0
  6954 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6955 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6956 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6957 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6958 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6959 ;;Total ram usage:        2 bytes
  6960 ;; Hardware stack levels used:    1
  6961 ;; Hardware stack levels required when called:    6
  6962 ;; This function calls:
  6963 ;;		Nothing
  6964 ;; This function is called by:
  6965 ;;		_i2c_open
  6966 ;; This function uses a non-reentrant model
  6967 ;;
  6968                           
  6969                           
  6970                           ;psect for function _i2c_driver_setBusCollisionISR
  6971  09EF                     _i2c_driver_setBusCollisionISR:	
  6972                           
  6973                           ;i2c_driver.c: 259: i2c_driver_busCollisionISR = f;
  6974                           
  6975                           ;incstack = 0
  6976                           ; Regs used in _i2c_driver_setBusCollisionISR: [wreg]
  6977  09EF  0020               	movlb	0	; select bank0
  6978  09F0  0823               	movf	i2c_driver_setBusCollisionISR@f+1,w
  6979  09F1  00DE               	movwf	_i2c_driver_busCollisionISR+1
  6980  09F2  0822               	movf	i2c_driver_setBusCollisionISR@f,w
  6981  09F3  00DD               	movwf	_i2c_driver_busCollisionISR
  6982  09F4  0008               	return
  6983  09F5                     __end_of_i2c_driver_setBusCollisionISR:	
  6984                           
  6985                           	psect	text16
  6986  0A7C                     __ptext16:	
  6987 ;; *************** function _i2c_driver_open *****************
  6988 ;; Defined at:
  6989 ;;		line 83 in file "mcc_generated_files/i2c_driver.c"
  6990 ;; Parameters:    Size  Location     Type
  6991 ;;		None
  6992 ;; Auto vars:     Size  Location     Type
  6993 ;;		None
  6994 ;; Return value:  Size  Location     Type
  6995 ;;		None               void
  6996 ;; Registers used:
  6997 ;;		wreg, status,2
  6998 ;; Tracked objects:
  6999 ;;		On entry : 0/0
  7000 ;;		On exit  : 0/0
  7001 ;;		Unchanged: 0/0
  7002 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7003 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7004 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7005 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7006 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7007 ;;Total ram usage:        0 bytes
  7008 ;; Hardware stack levels used:    1
  7009 ;; Hardware stack levels required when called:    6
  7010 ;; This function calls:
  7011 ;;		Nothing
  7012 ;; This function is called by:
  7013 ;;		_i2c_open
  7014 ;; This function uses a non-reentrant model
  7015 ;;
  7016                           
  7017                           
  7018                           ;psect for function _i2c_driver_open
  7019  0A7C                     _i2c_driver_open:	
  7020                           
  7021                           ;i2c_driver.c: 85: if(!SSP1CON1bits.SSPEN)
  7022                           
  7023                           ;incstack = 0
  7024                           ; Regs used in _i2c_driver_open: [wreg+status,2]
  7025  0A7C  0024               	movlb	4	; select bank4
  7026  0A7D  1A95               	btfsc	21,5	;volatile
  7027  0A7E  0008               	return
  7028                           
  7029                           ;i2c_driver.c: 86: {
  7030                           ;i2c_driver.c: 87: SSP1STAT = 0x00;
  7031  0A7F  0194               	clrf	20	;volatile
  7032                           
  7033                           ;i2c_driver.c: 88: SSP1CON1 = 0x28;
  7034  0A80  3028               	movlw	40
  7035  0A81  0095               	movwf	21	;volatile
  7036                           
  7037                           ;i2c_driver.c: 89: SSP1CON2 = 0x00;
  7038  0A82  0196               	clrf	22	;volatile
  7039                           
  7040                           ;i2c_driver.c: 90: SSP1ADD = 0x4f;
  7041  0A83  304F               	movlw	79
  7042  0A84  0092               	movwf	18	;volatile
  7043                           
  7044                           ;i2c_driver.c: 93: else
  7045                           ;i2c_driver.c: 94: return 0;
  7046                           ;	Return value of _i2c_driver_open is never used
  7047                           
  7048                           ;i2c_driver.c: 92: }
  7049                           
  7050                           ;i2c_driver.c: 91: return 1;
  7051                           ;	Return value of _i2c_driver_open is never used
  7052  0A85  0008               	return
  7053  0A86                     __end_of_i2c_driver_open:	
  7054                           
  7055                           	psect	text17
  7056  09AC                     __ptext17:	
  7057 ;; *************** function _i2c_masterWrite *****************
  7058 ;; Defined at:
  7059 ;;		line 222 in file "mcc_generated_files/drivers/i2c_master.c"
  7060 ;; Parameters:    Size  Location     Type
  7061 ;;		None
  7062 ;; Auto vars:     Size  Location     Type
  7063 ;;		None
  7064 ;; Return value:  Size  Location     Type
  7065 ;;                  1    wreg      enum E92
  7066 ;; Registers used:
  7067 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7068 ;; Tracked objects:
  7069 ;;		On entry : 0/0
  7070 ;;		On exit  : 0/0
  7071 ;;		Unchanged: 0/0
  7072 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7073 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7074 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7075 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7076 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7077 ;;Total ram usage:        0 bytes
  7078 ;; Hardware stack levels used:    1
  7079 ;; Hardware stack levels required when called:   13
  7080 ;; This function calls:
  7081 ;;		_i2c_masterOperation
  7082 ;; This function is called by:
  7083 ;;		_i2c_writeNBytes
  7084 ;;		_i2c_write1ByteRegister
  7085 ;;		_i2c_read1ByteRegister
  7086 ;;		_i2c_read2ByteRegister
  7087 ;;		_i2c_write2ByteRegister
  7088 ;;		_i2c_readDataBlock
  7089 ;; This function uses a non-reentrant model
  7090 ;;
  7091                           
  7092                           
  7093                           ;psect for function _i2c_masterWrite
  7094  09AC                     _i2c_masterWrite:	
  7095                           
  7096                           ;i2c_master.c: 224: return i2c_masterOperation(0);
  7097                           ;	Return value of _i2c_masterWrite is never used
  7098                           
  7099                           ;incstack = 0
  7100                           ; Regs used in _i2c_masterWrite: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7101  09AC  3000               	movlw	0
  7102  09AD  318D  2529         	fcall	_i2c_masterOperation
  7103  09AF  0008               	return
  7104  09B0                     __end_of_i2c_masterWrite:	
  7105                           
  7106                           	psect	text18
  7107  0D29                     __ptext18:	
  7108 ;; *************** function _i2c_masterOperation *****************
  7109 ;; Defined at:
  7110 ;;		line 193 in file "mcc_generated_files/drivers/i2c_master.c"
  7111 ;; Parameters:    Size  Location     Type
  7112 ;;  read            1    wreg     unsigned char 
  7113 ;; Auto vars:     Size  Location     Type
  7114 ;;  read            1   18[BANK0 ] unsigned char 
  7115 ;;  ret             1   19[BANK0 ] enum E12166
  7116 ;; Return value:  Size  Location     Type
  7117 ;;                  1    wreg      enum E12166
  7118 ;; Registers used:
  7119 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7120 ;; Tracked objects:
  7121 ;;		On entry : 0/0
  7122 ;;		On exit  : 0/0
  7123 ;;		Unchanged: 0/0
  7124 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7125 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7126 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7127 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7128 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7129 ;;Total ram usage:        3 bytes
  7130 ;; Hardware stack levels used:    1
  7131 ;; Hardware stack levels required when called:   12
  7132 ;; This function calls:
  7133 ;;		_i2c_driver_start
  7134 ;;		_i2c_poller
  7135 ;;		_mssp_IRQisEnabled
  7136 ;; This function is called by:
  7137 ;;		_i2c_masterWrite
  7138 ;;		_i2c_masterRead
  7139 ;; This function uses a non-reentrant model
  7140 ;;
  7141                           
  7142                           
  7143                           ;psect for function _i2c_masterOperation
  7144  0D29                     _i2c_masterOperation:	
  7145                           
  7146                           ;incstack = 0
  7147                           ; Regs used in _i2c_masterOperation: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7148                           ;i2c_masterOperation@read stored from wreg
  7149  0D29  0020               	movlb	0	; select bank0
  7150  0D2A  00B2               	movwf	i2c_masterOperation@read
  7151                           
  7152                           ;i2c_master.c: 195: i2c_error_t ret = I2C_BUSY;
  7153  0D2B  01B3               	clrf	i2c_masterOperation@ret
  7154  0D2C  0AB3               	incf	i2c_masterOperation@ret,f
  7155                           
  7156                           ;i2c_master.c: 196: if(!i2c_status.busy)
  7157  0D2D  0021               	movlb	1	; select bank1
  7158  0D2E  1820               	btfsc	_i2c_status^(0+128),0
  7159  0D2F  2D4A               	goto	l6592
  7160                           
  7161                           ;i2c_master.c: 197: {
  7162                           ;i2c_master.c: 198: i2c_status.busy = 1;
  7163  0D30  1420               	bsf	_i2c_status^(0+128),0
  7164                           
  7165                           ;i2c_master.c: 199: ret = I2C_NOERR;
  7166  0D31  0020               	movlb	0	; select bank0
  7167  0D32  01B3               	clrf	i2c_masterOperation@ret
  7168                           
  7169                           ;i2c_master.c: 201: if(read)
  7170  0D33  0832               	movf	i2c_masterOperation@read,w
  7171  0D34  1903               	btfsc	3,2
  7172  0D35  2D3A               	goto	l6586
  7173                           
  7174                           ;i2c_master.c: 202: {
  7175                           ;i2c_master.c: 203: i2c_status.state = I2C_SEND_ADR_READ;
  7176  0D36  0021               	movlb	1	; select bank1
  7177  0D37  01AA               	clrf	(_i2c_status^(0+128)+10)
  7178  0D38  0AAA               	incf	(_i2c_status^(0+128)+10),f
  7179                           
  7180                           ;i2c_master.c: 204: }
  7181  0D39  2D40               	goto	l6588
  7182  0D3A                     l6586:	
  7183                           
  7184                           ;i2c_master.c: 205: else
  7185                           ;i2c_master.c: 206: {
  7186                           ;i2c_master.c: 207: i2c_status.state = I2C_SEND_ADR_WRITE;
  7187  0D3A  3002               	movlw	2
  7188  0D3B  0020               	movlb	0	; select bank0
  7189  0D3C  00B1               	movwf	??_i2c_masterOperation
  7190  0D3D  0831               	movf	??_i2c_masterOperation,w
  7191  0D3E  0021               	movlb	1	; select bank1
  7192  0D3F  00AA               	movwf	(_i2c_status^(0+128)+10)
  7193  0D40                     l6588:	
  7194                           
  7195                           ;i2c_master.c: 208: }
  7196                           ;i2c_master.c: 209: i2c_driver_start();
  7197  0D40  3189  216E  318D   	fcall	_i2c_driver_start
  7198                           
  7199                           ;i2c_master.c: 211: if(! mssp_IRQisEnabled())
  7200  0D43  318A  2272  318D   	fcall	_mssp_IRQisEnabled
  7201  0D46  1803               	btfsc	3,0
  7202  0D47  2D4A               	goto	l6592
  7203                           
  7204                           ;i2c_master.c: 212: i2c_poller();
  7205  0D48  318A  22A7         	fcall	_i2c_poller
  7206  0D4A                     l6592:	
  7207                           
  7208                           ;i2c_master.c: 213: }
  7209                           ;i2c_master.c: 214: return ret;
  7210  0D4A  0020               	movlb	0	; select bank0
  7211  0D4B  0833               	movf	i2c_masterOperation@ret,w
  7212  0D4C  0008               	return
  7213  0D4D                     __end_of_i2c_masterOperation:	
  7214                           
  7215                           	psect	text19
  7216  0A72                     __ptext19:	
  7217 ;; *************** function _mssp_IRQisEnabled *****************
  7218 ;; Defined at:
  7219 ;;		line 43 in file "mcc_generated_files/i2c_driver.c"
  7220 ;; Parameters:    Size  Location     Type
  7221 ;;		None
  7222 ;; Auto vars:     Size  Location     Type
  7223 ;;		None
  7224 ;; Return value:  Size  Location     Type
  7225 ;;		None               void
  7226 ;; Registers used:
  7227 ;;		wreg, status,2, status,0
  7228 ;; Tracked objects:
  7229 ;;		On entry : 0/0
  7230 ;;		On exit  : 0/0
  7231 ;;		Unchanged: 0/0
  7232 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7233 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7234 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7235 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7236 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7237 ;;Total ram usage:        2 bytes
  7238 ;; Hardware stack levels used:    1
  7239 ;; Hardware stack levels required when called:    6
  7240 ;; This function calls:
  7241 ;;		Nothing
  7242 ;; This function is called by:
  7243 ;;		_i2c_masterOperation
  7244 ;; This function uses a non-reentrant model
  7245 ;;
  7246                           
  7247                           
  7248                           ;psect for function _mssp_IRQisEnabled
  7249  0A72                     _mssp_IRQisEnabled:	
  7250                           
  7251                           ;i2c_driver.c: 45: return PIE1bits.SSP1IE;
  7252                           
  7253                           ;incstack = 0
  7254                           ; Regs used in _mssp_IRQisEnabled: [wreg+status,2+status,0]
  7255  0A72  0021               	movlb	1	; select bank1
  7256  0A73  0C10               	rrf	16,w	;volatile
  7257  0A74  0020               	movlb	0	; select bank0
  7258  0A75  00A2               	movwf	??_mssp_IRQisEnabled
  7259  0A76  0CA2               	rrf	??_mssp_IRQisEnabled,f
  7260  0A77  0C22               	rrf	??_mssp_IRQisEnabled,w
  7261  0A78  3901               	andlw	1
  7262  0A79  00A3               	movwf	??_mssp_IRQisEnabled+1
  7263  0A7A  0C23               	rrf	??_mssp_IRQisEnabled+1,w
  7264  0A7B  0008               	return
  7265  0A7C                     __end_of_mssp_IRQisEnabled:	
  7266                           
  7267                           	psect	text20
  7268  0AA7                     __ptext20:	
  7269 ;; *************** function _i2c_poller *****************
  7270 ;; Defined at:
  7271 ;;		line 230 in file "mcc_generated_files/drivers/i2c_master.c"
  7272 ;; Parameters:    Size  Location     Type
  7273 ;;		None
  7274 ;; Auto vars:     Size  Location     Type
  7275 ;;		None
  7276 ;; Return value:  Size  Location     Type
  7277 ;;                  1    wreg      void 
  7278 ;; Registers used:
  7279 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7280 ;; Tracked objects:
  7281 ;;		On entry : 0/0
  7282 ;;		On exit  : 0/0
  7283 ;;		Unchanged: 0/0
  7284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7285 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7286 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7287 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7288 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7289 ;;Total ram usage:        0 bytes
  7290 ;; Hardware stack levels used:    1
  7291 ;; Hardware stack levels required when called:   11
  7292 ;; This function calls:
  7293 ;;		_i2c_ISR
  7294 ;;		_mssp_waitForEvent
  7295 ;; This function is called by:
  7296 ;;		_i2c_masterOperation
  7297 ;; This function uses a non-reentrant model
  7298 ;;
  7299                           
  7300                           
  7301                           ;psect for function _i2c_poller
  7302  0AA7                     _i2c_poller:	
  7303  0AA7                     l6574:	
  7304                           ;i2c_master.c: 232: while(i2c_status.busy)
  7305                           
  7306                           ;incstack = 0
  7307                           ; Regs used in _i2c_poller: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7308                           
  7309  0AA7  0021               	movlb	1	; select bank1
  7310  0AA8  1C20               	btfss	_i2c_status^(0+128),0
  7311  0AA9  0008               	return
  7312                           
  7313                           ;i2c_master.c: 233: {
  7314                           ;i2c_master.c: 234: mssp_waitForEvent((0));
  7315  0AAA  3000               	movlw	0
  7316  0AAB  318A  229C  318A   	fcall	_mssp_waitForEvent
  7317                           
  7318                           ;i2c_master.c: 235: i2c_ISR();
  7319  0AAE  318D  2572  318A   	fcall	_i2c_ISR
  7320  0AB1  2AA7               	goto	l6574
  7321  0AB2                     __end_of_i2c_poller:	
  7322                           
  7323                           	psect	text21
  7324  0A9C                     __ptext21:	
  7325 ;; *************** function _mssp_waitForEvent *****************
  7326 ;; Defined at:
  7327 ;;		line 68 in file "mcc_generated_files/i2c_driver.c"
  7328 ;; Parameters:    Size  Location     Type
  7329 ;;  timeout         1    wreg     PTR unsigned int 
  7330 ;;		 -> NULL(0), 
  7331 ;; Auto vars:     Size  Location     Type
  7332 ;;  timeout         1    2[BANK0 ] PTR unsigned int 
  7333 ;;		 -> NULL(0), 
  7334 ;; Return value:  Size  Location     Type
  7335 ;;                  1    wreg      void 
  7336 ;; Registers used:
  7337 ;;		wreg
  7338 ;; Tracked objects:
  7339 ;;		On entry : 0/0
  7340 ;;		On exit  : 0/0
  7341 ;;		Unchanged: 0/0
  7342 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7343 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7344 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7345 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7346 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7347 ;;Total ram usage:        1 bytes
  7348 ;; Hardware stack levels used:    1
  7349 ;; Hardware stack levels required when called:    6
  7350 ;; This function calls:
  7351 ;;		Nothing
  7352 ;; This function is called by:
  7353 ;;		_i2c_poller
  7354 ;; This function uses a non-reentrant model
  7355 ;;
  7356                           
  7357                           
  7358                           ;psect for function _mssp_waitForEvent
  7359  0A9C                     _mssp_waitForEvent:	
  7360                           
  7361                           ;i2c_driver.c: 73: if(PIR1bits.SSP1IF == 0)
  7362                           
  7363                           ;incstack = 0
  7364                           ; Regs used in _mssp_waitForEvent: [wreg]
  7365  0A9C  0020               	movlb	0	; select bank0
  7366  0A9D  1990               	btfsc	16,3	;volatile
  7367  0A9E  0008               	return
  7368  0A9F                     l352:	
  7369                           ;i2c_driver.c: 74: {
  7370                           ;i2c_driver.c: 75: while(1)
  7371                           
  7372                           
  7373                           ;i2c_driver.c: 76: {
  7374                           ;i2c_driver.c: 77: if(PIR1bits.SSP1IF) break;
  7375  0A9F  0020               	movlb	0	; select bank0
  7376  0AA0  1990               	btfsc	16,3	;volatile
  7377  0AA1  0008               	return
  7378                           
  7379                           ;i2c_driver.c: 78: _delay((unsigned long)((100)*(32000000/4000000.0)));
  7380  0AA2  30A0               	movlw	160
  7381  0AA3                     u6327:	
  7382  0AA3  3200               	nop2
  7383  0AA4  0B89               	decfsz	9,f
  7384  0AA5  2AA3               	goto	u6327
  7385  0AA6  2A9F               	goto	l352
  7386  0AA7                     __end_of_mssp_waitForEvent:	
  7387                           
  7388                           	psect	text22
  7389  0D72                     __ptext22:	
  7390 ;; *************** function _i2c_ISR *****************
  7391 ;; Defined at:
  7392 ;;		line 419 in file "mcc_generated_files/drivers/i2c_master.c"
  7393 ;; Parameters:    Size  Location     Type
  7394 ;;		None
  7395 ;; Auto vars:     Size  Location     Type
  7396 ;;		None
  7397 ;; Return value:  Size  Location     Type
  7398 ;;                  1    wreg      void 
  7399 ;; Registers used:
  7400 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7401 ;; Tracked objects:
  7402 ;;		On entry : 0/0
  7403 ;;		On exit  : 0/0
  7404 ;;		Unchanged: 0/0
  7405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7406 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7407 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7408 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7409 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7410 ;;Total ram usage:        1 bytes
  7411 ;; Hardware stack levels used:    1
  7412 ;; Hardware stack levels required when called:   10
  7413 ;; This function calls:
  7414 ;;		_do_I2C_DO_ACK
  7415 ;;		_do_I2C_DO_ADDRESS_NACK
  7416 ;;		_do_I2C_DO_NACK_RESTART
  7417 ;;		_do_I2C_DO_NACK_STOP
  7418 ;;		_do_I2C_IDLE
  7419 ;;		_do_I2C_RCEN
  7420 ;;		_do_I2C_RESET
  7421 ;;		_do_I2C_RX
  7422 ;;		_do_I2C_SEND_ADR_READ
  7423 ;;		_do_I2C_SEND_ADR_WRITE
  7424 ;;		_do_I2C_SEND_RESTART
  7425 ;;		_do_I2C_SEND_RESTART_READ
  7426 ;;		_do_I2C_SEND_RESTART_WRITE
  7427 ;;		_do_I2C_SEND_STOP
  7428 ;;		_do_I2C_TX
  7429 ;;		_do_I2C_TX_EMPTY
  7430 ;;		_i2c_driver_isNACK
  7431 ;;		_mssp_clearIRQ
  7432 ;; This function is called by:
  7433 ;;		_i2c_open
  7434 ;;		_i2c_poller
  7435 ;;		_INTERRUPT_InterruptManager
  7436 ;; This function uses a non-reentrant model
  7437 ;;
  7438                           
  7439                           
  7440                           ;psect for function _i2c_ISR
  7441  0D72                     _i2c_ISR:	
  7442                           
  7443                           ;Skip over the trampoline to the duplicate function for level 1
  7444  0D72  1C7E               	btfss	126,0
  7445  0D73  2D76               	goto	l6558
  7446  0D74  318C  2CC0         	ljmp	i1l6984
  7447  0D76                     _i2c_ISR$intlevel0:	
  7448  0D76                     l6558:	
  7449                           ;incstack = 0
  7450                           ; Regs used in _i2c_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7451                           
  7452                           
  7453                           ;i2c_master.c: 421: mssp_clearIRQ();
  7454  0D76  3189  2168  318D   	fcall	_mssp_clearIRQ
  7455                           
  7456                           ;i2c_master.c: 427: if(i2c_status.addressNACKCheck && i2c_driver_isNACK())
  7457  0D79  0021               	movlb	1	; select bank1
  7458  0D7A  1DA0               	btfss	_i2c_status^(0+128),3
  7459  0D7B  2D87               	goto	l6566
  7460  0D7C  318B  230A  318D   	fcall	_i2c_driver_isNACK
  7461  0D7F  1C03               	btfss	3,0
  7462  0D80  2D87               	goto	l6566
  7463                           
  7464                           ;i2c_master.c: 428: {
  7465                           ;i2c_master.c: 429: i2c_status.state = I2C_ADDRESS_NACK;
  7466  0D81  300F               	movlw	15
  7467  0D82  0020               	movlb	0	; select bank0
  7468  0D83  00B0               	movwf	??_i2c_ISR
  7469  0D84  0830               	movf	??_i2c_ISR,w
  7470  0D85  0021               	movlb	1	; select bank1
  7471  0D86  00AA               	movwf	(_i2c_status^(0+128)+10)
  7472  0D87                     l6566:	
  7473                           
  7474                           ;i2c_master.c: 430: }
  7475                           ;i2c_master.c: 432: i2c_status.state = fsmStateTable[i2c_status.state]();
  7476  0D87  0021               	movlb	1	; select bank1
  7477  0D88  352A               	lslf	(_i2c_status^(0+128)+10),w
  7478  0D89  3EA0               	addlw	(low (_fsmStateTable| (0+512)))& (0+255)
  7479  0D8A  0086               	movwf	6
  7480  0D8B  3002               	movlw	2	; select bank5/6
  7481  0D8C  0087               	movwf	7
  7482  0D8D  3F41               	moviw [1]fsr1
  7483  0D8E  008A               	movwf	10
  7484  0D8F  3F40               	moviw [0]fsr1
  7485  0D90  000A               	callw
  7486  0D91  318D               	pagesel	$
  7487  0D92  0020               	movlb	0	; select bank0
  7488  0D93  00B0               	movwf	??_i2c_ISR
  7489  0D94  0830               	movf	??_i2c_ISR,w
  7490  0D95  0021               	movlb	1	; select bank1
  7491  0D96  00AA               	movwf	(_i2c_status^(0+128)+10)
  7492  0D97  0008               	return
  7493  0D98                     __end_of_i2c_ISR:	
  7494                           
  7495                           	psect	text23
  7496  078D                     __ptext23:	
  7497 ;; *************** function _do_I2C_RX *****************
  7498 ;; Defined at:
  7499 ;;		line 357 in file "mcc_generated_files/drivers/i2c_master.c"
  7500 ;; Parameters:    Size  Location     Type
  7501 ;;		None
  7502 ;; Auto vars:     Size  Location     Type
  7503 ;;		None
  7504 ;; Return value:  Size  Location     Type
  7505 ;;                  1    wreg      enum E12337
  7506 ;; Registers used:
  7507 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7508 ;; Tracked objects:
  7509 ;;		On entry : 0/0
  7510 ;;		On exit  : 0/0
  7511 ;;		Unchanged: 0/0
  7512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7513 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7514 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7515 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7516 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7517 ;;Total ram usage:        1 bytes
  7518 ;; Hardware stack levels used:    1
  7519 ;; Hardware stack levels required when called:    9
  7520 ;; This function calls:
  7521 ;;		Absolute function
  7522 ;;		_do_I2C_DO_NACK_RESTART
  7523 ;;		_do_I2C_DO_NACK_STOP
  7524 ;;		_i2c_driver_getRXData
  7525 ;;		_i2c_driver_sendACK
  7526 ;;		_i2c_restartWrite
  7527 ;;		_rd1RegCompleteHandler
  7528 ;;		_rd2RegCompleteHandler
  7529 ;;		_rdBlkRegCompleteHandler
  7530 ;;		_returnReset
  7531 ;;		_returnStop
  7532 ;;		_wr1RegCompleteHandler
  7533 ;;		_wr2RegCompleteHandler
  7534 ;; This function is called by:
  7535 ;;		_i2c_ISR
  7536 ;;		i1_i2c_ISR
  7537 ;; This function uses a non-reentrant model
  7538 ;;
  7539                           
  7540                           
  7541                           ;psect for function _do_I2C_RX
  7542  078D                     _do_I2C_RX:	
  7543                           
  7544                           ;Skip over the trampoline to the duplicate function for level 1
  7545  078D  1C7E               	btfss	126,0
  7546  078E  2F91               	goto	l6512
  7547  078F  318F  2F7B         	ljmp	i1l6832
  7548  0791                     _do_I2C_RX$intlevel0:	
  7549  0791                     l6512:	
  7550                           ;incstack = 0
  7551                           ; Regs used in _do_I2C_RX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7552                           
  7553                           
  7554                           ;i2c_master.c: 359: *i2c_status.data_ptr++ = i2c_driver_getRXData();
  7555  0791  3189  217A  3187   	fcall	_i2c_driver_getRXData
  7556  0794  0020               	movlb	0	; select bank0
  7557  0795  00AC               	movwf	??_do_I2C_RX
  7558  0796  0021               	movlb	1	; select bank1
  7559  0797  0822               	movf	(low ((_i2c_status| 0+2)))^(0+128),w
  7560  0798  0086               	movwf	6
  7561  0799  0823               	movf	((low ((_i2c_status| 0+2))+1))^(0+128),w
  7562  079A  0087               	movwf	7
  7563  079B  0020               	movlb	0	; select bank0
  7564  079C  082C               	movf	??_do_I2C_RX,w
  7565  079D  0081               	movwf	1
  7566  079E  3001               	movlw	1
  7567  079F  0021               	movlb	1	; select bank1
  7568  07A0  07A2               	addwf	(low ((_i2c_status| 0+2)))^(0+128),f
  7569  07A1  3000               	movlw	0
  7570  07A2  3DA3               	addwfc	((low ((_i2c_status| 0+2))+1))^(0+128),f
  7571                           
  7572                           ;i2c_master.c: 360: if(--i2c_status.data_length)
  7573  07A3  3001               	movlw	1
  7574  07A4  02A4               	subwf	(_i2c_status^(0+128)+4),f
  7575  07A5  3000               	movlw	0
  7576  07A6  3BA5               	subwfb	((_i2c_status+1)^(0+128)+4),f
  7577  07A7  0824               	movf	(_i2c_status^(0+128)+4),w
  7578  07A8  0425               	iorwf	((_i2c_status+1)^(0+128)+4),w
  7579  07A9  1903               	btfsc	3,2
  7580  07AA  2FAF               	goto	l739
  7581                           
  7582                           ;i2c_master.c: 361: {
  7583                           ;i2c_master.c: 362: i2c_driver_sendACK();
  7584  07AB  3189  21A4         	fcall	_i2c_driver_sendACK
  7585                           
  7586                           ;i2c_master.c: 363: return I2C_RCEN;
  7587  07AD  3005               	movlw	5
  7588                           
  7589                           ;i2c_master.c: 364: }
  7590  07AE  0008               	return
  7591  07AF                     l739:	
  7592                           
  7593                           ;i2c_master.c: 365: else
  7594                           ;i2c_master.c: 366: {
  7595                           ;i2c_master.c: 367: i2c_status.bufferFree = 1;
  7596  07AF  1520               	bsf	_i2c_status^(0+128),2
  7597                           
  7598                           ;i2c_master.c: 368: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
  7599  07B0  2FB7               	goto	l6536
  7600  07B1                     l6526:	
  7601                           ;i2c_master.c: 369: {
  7602                           ;i2c_master.c: 370: case i2c_restart_write:
  7603                           
  7604                           
  7605                           ;i2c_master.c: 371: case i2c_restart_read:
  7606                           ;i2c_master.c: 372: return do_I2C_DO_NACK_RESTART();
  7607  07B1  318A  224D         	fcall	_do_I2C_DO_NACK_RESTART
  7608  07B3  0008               	return
  7609  07B4                     l6530:	
  7610                           ;i2c_master.c: 374: case i2c_continue:
  7611                           
  7612                           ;i2c_master.c: 373: default:
  7613                           
  7614                           
  7615                           ;i2c_master.c: 375: case i2c_stop:
  7616                           ;i2c_master.c: 376: return do_I2C_DO_NACK_STOP();
  7617  07B4  318A  2245         	fcall	_do_I2C_DO_NACK_STOP
  7618                           
  7619                           ;i2c_master.c: 377: }
  7620  07B6  0008               	return
  7621  07B7                     l6536:	
  7622  07B7  0021               	movlb	1	; select bank1
  7623  07B8  0838               	movf	(low ((_i2c_status| 0+24)))^(0+128),w
  7624  07B9  0020               	movlb	0	; select bank0
  7625  07BA  00AC               	movwf	??_do_I2C_RX
  7626  07BB  082C               	movf	??_do_I2C_RX,w
  7627  07BC  00AB               	movwf	returnStop@p
  7628  07BD  300C               	movlw	12
  7629  07BE  3EA0               	addlw	(low (_i2c_status| 0))& (0+255)
  7630  07BF  0086               	movwf	6
  7631  07C0  0187               	clrf	7
  7632  07C1  3F41               	moviw [1]fsr1
  7633  07C2  008A               	movwf	10
  7634  07C3  3F40               	moviw [0]fsr1
  7635  07C4  000A               	callw
  7636  07C5  3187               	pagesel	$
  7637                           
  7638                           ; Switch size 1, requested type "space"
  7639                           ; Number of cases is 4, Range of values is 1 to 4
  7640                           ; switch strategies available:
  7641                           ; Name         Instructions Cycles
  7642                           ; simple_byte           13     7 (average)
  7643                           ; direct_byte           17     9 (fixed)
  7644                           ; jumptable            263     9 (fixed)
  7645                           ;	Chosen strategy is simple_byte
  7646  07C6  3A01               	xorlw	1	; case 1
  7647  07C7  1903               	skipnz
  7648  07C8  2FB4               	goto	l6530
  7649  07C9  3A03               	xorlw	3	; case 2
  7650  07CA  1903               	skipnz
  7651  07CB  2FB1               	goto	l6526
  7652  07CC  3A01               	xorlw	1	; case 3
  7653  07CD  1903               	skipnz
  7654  07CE  2FB1               	goto	l6526
  7655  07CF  3A07               	xorlw	7	; case 4
  7656  07D0  1903               	skipnz
  7657  07D1  2FB4               	goto	l6530
  7658  07D2  2FB4               	goto	l6530
  7659  07D3  0008               	return
  7660  07D4                     __end_of_do_I2C_RX:	
  7661                           
  7662                           	psect	text24
  7663  05A4                     __ptext24:	
  7664 ;; *************** function _do_I2C_TX *****************
  7665 ;; Defined at:
  7666 ;;		line 333 in file "mcc_generated_files/drivers/i2c_master.c"
  7667 ;; Parameters:    Size  Location     Type
  7668 ;;		None
  7669 ;; Auto vars:     Size  Location     Type
  7670 ;;		None
  7671 ;; Return value:  Size  Location     Type
  7672 ;;                  1    wreg      enum E12337
  7673 ;; Registers used:
  7674 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7675 ;; Tracked objects:
  7676 ;;		On entry : 0/0
  7677 ;;		On exit  : 0/0
  7678 ;;		Unchanged: 0/0
  7679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7680 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7681 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7682 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7683 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7684 ;;Total ram usage:        4 bytes
  7685 ;; Hardware stack levels used:    1
  7686 ;; Hardware stack levels required when called:    9
  7687 ;; This function calls:
  7688 ;;		Absolute function
  7689 ;;		_do_I2C_SEND_RESTART_READ
  7690 ;;		_do_I2C_SEND_RESTART_WRITE
  7691 ;;		_do_I2C_SEND_STOP
  7692 ;;		_i2c_driver_TXData
  7693 ;;		_i2c_driver_isNACK
  7694 ;;		_i2c_restartWrite
  7695 ;;		_rd1RegCompleteHandler
  7696 ;;		_rd2RegCompleteHandler
  7697 ;;		_rdBlkRegCompleteHandler
  7698 ;;		_returnReset
  7699 ;;		_returnStop
  7700 ;;		_wr1RegCompleteHandler
  7701 ;;		_wr2RegCompleteHandler
  7702 ;; This function is called by:
  7703 ;;		_i2c_ISR
  7704 ;;		i1_i2c_ISR
  7705 ;; This function uses a non-reentrant model
  7706 ;;
  7707                           
  7708                           
  7709                           ;psect for function _do_I2C_TX
  7710  05A4                     _do_I2C_TX:	
  7711                           
  7712                           ;Skip over the trampoline to the duplicate function for level 1
  7713  05A4  1C7E               	btfss	126,0
  7714  05A5  2DA8               	goto	l6482
  7715  05A6  3187  2F40         	ljmp	i1l6802
  7716  05A8                     _do_I2C_TX$intlevel0:	
  7717  05A8                     l6482:	
  7718                           ;incstack = 0
  7719                           ; Regs used in _do_I2C_TX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7720                           
  7721                           
  7722                           ;i2c_master.c: 335: if(i2c_driver_isNACK())
  7723  05A8  318B  230A  3185   	fcall	_i2c_driver_isNACK
  7724  05AB  1803               	btfsc	3,0
  7725  05AC  2DB7               	goto	l6500
  7726  05AD  2DD4               	goto	l723
  7727  05AE                     l6486:	
  7728                           ;i2c_master.c: 338: {
  7729                           ;i2c_master.c: 339: case i2c_restart_read:
  7730                           
  7731                           ;i2c_master.c: 336: {
  7732                           ;i2c_master.c: 337: switch(i2c_status.callbackTable[i2c_dataNACK](i2c_status.callbackPay
      +                          load[i2c_dataNACK]))
  7733                           
  7734                           
  7735                           ;i2c_master.c: 340: return do_I2C_SEND_RESTART_READ();
  7736  05AE  318A  221D         	fcall	_do_I2C_SEND_RESTART_READ
  7737  05B0  0008               	return
  7738  05B1                     l6490:	
  7739                           ;i2c_master.c: 341: case i2c_restart_write:
  7740                           
  7741                           
  7742                           ;i2c_master.c: 342: return do_I2C_SEND_RESTART_WRITE();
  7743  05B1  318A  2225         	fcall	_do_I2C_SEND_RESTART_WRITE
  7744  05B3  0008               	return
  7745  05B4                     l6494:	
  7746                           ;i2c_master.c: 344: case i2c_continue:
  7747                           
  7748                           ;i2c_master.c: 343: default:
  7749                           
  7750                           
  7751                           ;i2c_master.c: 345: case i2c_stop:
  7752                           ;i2c_master.c: 346: return do_I2C_SEND_STOP();
  7753  05B4  318A  2235         	fcall	_do_I2C_SEND_STOP
  7754                           
  7755                           ;i2c_master.c: 347: }
  7756  05B6  0008               	return
  7757  05B7                     l6500:	
  7758  05B7  0021               	movlb	1	; select bank1
  7759  05B8  083B               	movf	(low ((_i2c_status| 0+27)))^(0+128),w
  7760  05B9  0020               	movlb	0	; select bank0
  7761  05BA  00AC               	movwf	??_do_I2C_TX
  7762  05BB  082C               	movf	??_do_I2C_TX,w
  7763  05BC  00AB               	movwf	returnStop@p
  7764  05BD  3012               	movlw	18
  7765  05BE  3EA0               	addlw	(low (_i2c_status| 0))& (0+255)
  7766  05BF  0086               	movwf	6
  7767  05C0  0187               	clrf	7
  7768  05C1  3F41               	moviw [1]fsr1
  7769  05C2  008A               	movwf	10
  7770  05C3  3F40               	moviw [0]fsr1
  7771  05C4  000A               	callw
  7772  05C5  3185               	pagesel	$
  7773                           
  7774                           ; Switch size 1, requested type "space"
  7775                           ; Number of cases is 4, Range of values is 1 to 4
  7776                           ; switch strategies available:
  7777                           ; Name         Instructions Cycles
  7778                           ; simple_byte           13     7 (average)
  7779                           ; direct_byte           17     9 (fixed)
  7780                           ; jumptable            263     9 (fixed)
  7781                           ;	Chosen strategy is simple_byte
  7782  05C6  3A01               	xorlw	1	; case 1
  7783  05C7  1903               	skipnz
  7784  05C8  2DB4               	goto	l6494
  7785  05C9  3A03               	xorlw	3	; case 2
  7786  05CA  1903               	skipnz
  7787  05CB  2DAE               	goto	l6486
  7788  05CC  3A01               	xorlw	1	; case 3
  7789  05CD  1903               	skipnz
  7790  05CE  2DB1               	goto	l6490
  7791  05CF  3A07               	xorlw	7	; case 4
  7792  05D0  1903               	skipnz
  7793  05D1  2DB4               	goto	l6494
  7794  05D2  2DB4               	goto	l6494
  7795                           
  7796                           ;i2c_master.c: 348: }
  7797  05D3  0008               	return
  7798  05D4                     l723:	
  7799                           
  7800                           ;i2c_master.c: 349: else
  7801                           ;i2c_master.c: 350: {
  7802                           ;i2c_master.c: 351: i2c_status.addressNACKCheck = 0;
  7803  05D4  0021               	movlb	1	; select bank1
  7804  05D5  11A0               	bcf	_i2c_status^(0+128),3
  7805                           
  7806                           ;i2c_master.c: 352: i2c_driver_TXData(*i2c_status.data_ptr++);
  7807  05D6  0823               	movf	((low ((_i2c_status| 0+2))+1))^(0+128),w
  7808  05D7  0020               	movlb	0	; select bank0
  7809  05D8  00AD               	movwf	??_do_I2C_TX+1
  7810  05D9  0021               	movlb	1	; select bank1
  7811  05DA  0822               	movf	(low ((_i2c_status| 0+2)))^(0+128),w
  7812  05DB  0020               	movlb	0	; select bank0
  7813  05DC  00AC               	movwf	??_do_I2C_TX
  7814  05DD  0021               	movlb	1	; select bank1
  7815  05DE  0AA2               	incf	(low ((_i2c_status| 0+2)))^(0+128),f
  7816  05DF  1903               	skipnz
  7817  05E0  0AA3               	incf	((low ((_i2c_status| 0+2))+1))^(0+128),f
  7818  05E1  0020               	movlb	0	; select bank0
  7819  05E2  082C               	movf	??_do_I2C_TX,w
  7820  05E3  0086               	movwf	6
  7821  05E4  082D               	movf	??_do_I2C_TX+1,w
  7822  05E5  0087               	movwf	7
  7823  05E6  0801               	movf	1,w
  7824  05E7  3189  21E9  3185   	fcall	_i2c_driver_TXData
  7825                           
  7826                           ;i2c_master.c: 353: return (--i2c_status.data_length)?I2C_TX:I2C_TX_EMPTY;
  7827  05EA  3001               	movlw	1
  7828  05EB  0021               	movlb	1	; select bank1
  7829  05EC  02A4               	subwf	(_i2c_status^(0+128)+4),f
  7830  05ED  3000               	movlw	0
  7831  05EE  3BA5               	subwfb	((_i2c_status+1)^(0+128)+4),f
  7832  05EF  0824               	movf	(_i2c_status^(0+128)+4),w
  7833  05F0  0425               	iorwf	((_i2c_status+1)^(0+128)+4),w
  7834  05F1  1D03               	btfss	3,2
  7835  05F2  2DF5               	goto	l6508
  7836  05F3  3006               	movlw	6
  7837  05F4  2DF6               	goto	L3
  7838  05F5                     l6508:	
  7839  05F5  3003               	movlw	3
  7840  05F6                     L3:	
  7841  05F6  0020               	movlb	0	; select bank0
  7842  05F7  00AE               	movwf	_do_I2C_TX$1070
  7843  05F8  3000               	movlw	0
  7844  05F9  00AF               	movwf	_do_I2C_TX$1070+1
  7845  05FA  082E               	movf	_do_I2C_TX$1070,w
  7846  05FB  0008               	return
  7847  05FC                     __end_of_do_I2C_TX:	
  7848                           
  7849                           	psect	text25
  7850  0DEA                     __ptext25:	
  7851 ;; *************** function _do_I2C_DO_ADDRESS_NACK *****************
  7852 ;; Defined at:
  7853 ;;		line 319 in file "mcc_generated_files/drivers/i2c_master.c"
  7854 ;; Parameters:    Size  Location     Type
  7855 ;;		None
  7856 ;; Auto vars:     Size  Location     Type
  7857 ;;		None
  7858 ;; Return value:  Size  Location     Type
  7859 ;;                  1    wreg      enum E12337
  7860 ;; Registers used:
  7861 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7862 ;; Tracked objects:
  7863 ;;		On entry : 0/0
  7864 ;;		On exit  : 0/0
  7865 ;;		Unchanged: 0/0
  7866 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7867 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7868 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7869 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7870 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7871 ;;Total ram usage:        1 bytes
  7872 ;; Hardware stack levels used:    1
  7873 ;; Hardware stack levels required when called:    9
  7874 ;; This function calls:
  7875 ;;		Absolute function
  7876 ;;		_do_I2C_SEND_RESTART
  7877 ;;		_do_I2C_SEND_STOP
  7878 ;;		_i2c_restartWrite
  7879 ;;		_rd1RegCompleteHandler
  7880 ;;		_rd2RegCompleteHandler
  7881 ;;		_rdBlkRegCompleteHandler
  7882 ;;		_returnReset
  7883 ;;		_returnStop
  7884 ;;		_wr1RegCompleteHandler
  7885 ;;		_wr2RegCompleteHandler
  7886 ;; This function is called by:
  7887 ;;		_i2c_ISR
  7888 ;;		i1_i2c_ISR
  7889 ;; This function uses a non-reentrant model
  7890 ;;
  7891                           
  7892                           
  7893                           ;psect for function _do_I2C_DO_ADDRESS_NACK
  7894  0DEA                     _do_I2C_DO_ADDRESS_NACK:	
  7895                           
  7896                           ;Skip over the trampoline to the duplicate function for level 1
  7897  0DEA  1C7E               	btfss	126,0
  7898  0DEB  2DEE               	goto	l6466
  7899  0DEC  318C  2CE2         	ljmp	i1l6786
  7900  0DEE                     _do_I2C_DO_ADDRESS_NACK$intlevel0:	
  7901  0DEE                     l6466:	
  7902                           ;incstack = 0
  7903                           ; Regs used in _do_I2C_DO_ADDRESS_NACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7904                           
  7905                           
  7906                           ;i2c_master.c: 321: i2c_status.addressNACKCheck = 0;
  7907  0DEE  0021               	movlb	1	; select bank1
  7908  0DEF  11A0               	bcf	_i2c_status^(0+128),3
  7909                           
  7910                           ;i2c_master.c: 322: i2c_status.error = I2C_FAIL;
  7911  0DF0  3002               	movlw	2
  7912  0DF1  0020               	movlb	0	; select bank0
  7913  0DF2  00AC               	movwf	??_do_I2C_DO_ADDRESS_NACK
  7914  0DF3  082C               	movf	??_do_I2C_DO_ADDRESS_NACK,w
  7915  0DF4  0021               	movlb	1	; select bank1
  7916  0DF5  00AB               	movwf	(_i2c_status^(0+128)+11)
  7917                           
  7918                           ;i2c_master.c: 323: switch(i2c_status.callbackTable[i2c_addressNACK](i2c_status.callback
      +                          Payload[i2c_addressNACK]))
  7919  0DF6  2DFD               	goto	l6480
  7920  0DF7                     l6470:	
  7921                           ;i2c_master.c: 324: {
  7922                           ;i2c_master.c: 325: case i2c_restart_read:
  7923                           
  7924                           
  7925                           ;i2c_master.c: 326: case i2c_restart_write:
  7926                           ;i2c_master.c: 327: return do_I2C_SEND_RESTART();
  7927  0DF7  318A  222D         	fcall	_do_I2C_SEND_RESTART
  7928  0DF9  0008               	return
  7929  0DFA                     l6474:	
  7930                           ;i2c_master.c: 328: default:
  7931                           
  7932                           
  7933                           ;i2c_master.c: 329: return do_I2C_SEND_STOP();
  7934  0DFA  318A  2235         	fcall	_do_I2C_SEND_STOP
  7935                           
  7936                           ;i2c_master.c: 330: }
  7937  0DFC  0008               	return
  7938  0DFD                     l6480:	
  7939  0DFD  0021               	movlb	1	; select bank1
  7940  0DFE  083A               	movf	(low ((_i2c_status| 0+26)))^(0+128),w
  7941  0DFF  0020               	movlb	0	; select bank0
  7942  0E00  00AC               	movwf	??_do_I2C_DO_ADDRESS_NACK
  7943  0E01  082C               	movf	??_do_I2C_DO_ADDRESS_NACK,w
  7944  0E02  00AB               	movwf	returnStop@p
  7945  0E03  3010               	movlw	16
  7946  0E04  3EA0               	addlw	(low (_i2c_status| 0))& (0+255)
  7947  0E05  0086               	movwf	6
  7948  0E06  0187               	clrf	7
  7949  0E07  3F41               	moviw [1]fsr1
  7950  0E08  008A               	movwf	10
  7951  0E09  3F40               	moviw [0]fsr1
  7952  0E0A  000A               	callw
  7953  0E0B  318D               	pagesel	$
  7954                           
  7955                           ; Switch size 1, requested type "space"
  7956                           ; Number of cases is 2, Range of values is 2 to 3
  7957                           ; switch strategies available:
  7958                           ; Name         Instructions Cycles
  7959                           ; simple_byte            7     4 (average)
  7960                           ; direct_byte           13     9 (fixed)
  7961                           ; jumptable            263     9 (fixed)
  7962                           ;	Chosen strategy is simple_byte
  7963  0E0C  3A02               	xorlw	2	; case 2
  7964  0E0D  1903               	skipnz
  7965  0E0E  2DF7               	goto	l6470
  7966  0E0F  3A01               	xorlw	1	; case 3
  7967  0E10  1903               	skipnz
  7968  0E11  2DF7               	goto	l6470
  7969  0E12  2DFA               	goto	l6474
  7970  0E13  0008               	return
  7971  0E14                     __end_of_do_I2C_DO_ADDRESS_NACK:	
  7972                           
  7973                           	psect	text26
  7974  0A4D                     __ptext26:	
  7975 ;; *************** function _do_I2C_DO_NACK_RESTART *****************
  7976 ;; Defined at:
  7977 ;;		line 311 in file "mcc_generated_files/drivers/i2c_master.c"
  7978 ;; Parameters:    Size  Location     Type
  7979 ;;		None
  7980 ;; Auto vars:     Size  Location     Type
  7981 ;;		None
  7982 ;; Return value:  Size  Location     Type
  7983 ;;                  1    wreg      enum E12337
  7984 ;; Registers used:
  7985 ;;		wreg, status,2, status,0, pclath, cstack
  7986 ;; Tracked objects:
  7987 ;;		On entry : 0/0
  7988 ;;		On exit  : 0/0
  7989 ;;		Unchanged: 0/0
  7990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7991 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7992 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7993 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7994 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7995 ;;Total ram usage:        0 bytes
  7996 ;; Hardware stack levels used:    1
  7997 ;; Hardware stack levels required when called:    7
  7998 ;; This function calls:
  7999 ;;		_i2c_driver_sendNACK
  8000 ;; This function is called by:
  8001 ;;		_do_I2C_RX
  8002 ;;		_i2c_ISR
  8003 ;;		i1_i2c_ISR
  8004 ;; This function uses a non-reentrant model
  8005 ;;
  8006                           
  8007                           
  8008                           ;psect for function _do_I2C_DO_NACK_RESTART
  8009  0A4D                     _do_I2C_DO_NACK_RESTART:	
  8010                           
  8011                           ;Skip over the trampoline to the duplicate function for level 1
  8012  0A4D  1C7E               	btfss	126,0
  8013  0A4E  2A51               	goto	l4160
  8014  0A4F  3189  29A0         	ljmp	i1l3410
  8015  0A51                     _do_I2C_DO_NACK_RESTART$intlevel0:	
  8016  0A51                     l4160:	
  8017                           ;incstack = 0
  8018                           ; Regs used in _do_I2C_DO_NACK_RESTART: [wreg+status,2+status,0+pclath+cstack]
  8019                           
  8020                           
  8021                           ;i2c_master.c: 313: i2c_driver_sendNACK();
  8022  0A51  3189  21A8         	fcall	_i2c_driver_sendNACK
  8023                           
  8024                           ;i2c_master.c: 314: return I2C_SEND_RESTART;
  8025  0A53  3009               	movlw	9
  8026  0A54  0008               	return
  8027  0A55                     __end_of_do_I2C_DO_NACK_RESTART:	
  8028                           
  8029                           	psect	text27
  8030  0A45                     __ptext27:	
  8031 ;; *************** function _do_I2C_DO_NACK_STOP *****************
  8032 ;; Defined at:
  8033 ;;		line 305 in file "mcc_generated_files/drivers/i2c_master.c"
  8034 ;; Parameters:    Size  Location     Type
  8035 ;;		None
  8036 ;; Auto vars:     Size  Location     Type
  8037 ;;		None
  8038 ;; Return value:  Size  Location     Type
  8039 ;;                  1    wreg      enum E12337
  8040 ;; Registers used:
  8041 ;;		wreg, status,2, status,0, pclath, cstack
  8042 ;; Tracked objects:
  8043 ;;		On entry : 0/0
  8044 ;;		On exit  : 0/0
  8045 ;;		Unchanged: 0/0
  8046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8047 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8048 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8049 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8050 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8051 ;;Total ram usage:        0 bytes
  8052 ;; Hardware stack levels used:    1
  8053 ;; Hardware stack levels required when called:    7
  8054 ;; This function calls:
  8055 ;;		_i2c_driver_sendNACK
  8056 ;; This function is called by:
  8057 ;;		_do_I2C_RX
  8058 ;;		_i2c_ISR
  8059 ;;		i1_i2c_ISR
  8060 ;; This function uses a non-reentrant model
  8061 ;;
  8062                           
  8063                           
  8064                           ;psect for function _do_I2C_DO_NACK_STOP
  8065  0A45                     _do_I2C_DO_NACK_STOP:	
  8066                           
  8067                           ;Skip over the trampoline to the duplicate function for level 1
  8068  0A45  1C7E               	btfss	126,0
  8069  0A46  2A49               	goto	l4154
  8070  0A47  3189  299C         	ljmp	i1l3404
  8071  0A49                     _do_I2C_DO_NACK_STOP$intlevel0:	
  8072  0A49                     l4154:	
  8073                           ;incstack = 0
  8074                           ; Regs used in _do_I2C_DO_NACK_STOP: [wreg+status,2+status,0+pclath+cstack]
  8075                           
  8076                           
  8077                           ;i2c_master.c: 307: i2c_driver_sendNACK();
  8078  0A49  3189  21A8         	fcall	_i2c_driver_sendNACK
  8079                           
  8080                           ;i2c_master.c: 308: return I2C_SEND_STOP;
  8081  0A4B  300A               	movlw	10
  8082  0A4C  0008               	return
  8083  0A4D                     __end_of_do_I2C_DO_NACK_STOP:	
  8084                           
  8085                           	psect	text28
  8086  0A3D                     __ptext28:	
  8087 ;; *************** function _do_I2C_DO_ACK *****************
  8088 ;; Defined at:
  8089 ;;		line 299 in file "mcc_generated_files/drivers/i2c_master.c"
  8090 ;; Parameters:    Size  Location     Type
  8091 ;;		None
  8092 ;; Auto vars:     Size  Location     Type
  8093 ;;		None
  8094 ;; Return value:  Size  Location     Type
  8095 ;;                  1    wreg      enum E12337
  8096 ;; Registers used:
  8097 ;;		wreg, status,2, status,0, pclath, cstack
  8098 ;; Tracked objects:
  8099 ;;		On entry : 0/0
  8100 ;;		On exit  : 0/0
  8101 ;;		Unchanged: 0/0
  8102 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8103 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8104 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8105 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8106 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8107 ;;Total ram usage:        0 bytes
  8108 ;; Hardware stack levels used:    1
  8109 ;; Hardware stack levels required when called:    7
  8110 ;; This function calls:
  8111 ;;		_i2c_driver_sendACK
  8112 ;; This function is called by:
  8113 ;;		_i2c_ISR
  8114 ;;		i1_i2c_ISR
  8115 ;; This function uses a non-reentrant model
  8116 ;;
  8117                           
  8118                           
  8119                           ;psect for function _do_I2C_DO_ACK
  8120  0A3D                     _do_I2C_DO_ACK:	
  8121                           
  8122                           ;Skip over the trampoline to the duplicate function for level 1
  8123  0A3D  1C7E               	btfss	126,0
  8124  0A3E  2A41               	goto	l4222
  8125  0A3F  3189  2998         	ljmp	i1l3612
  8126  0A41                     _do_I2C_DO_ACK$intlevel0:	
  8127  0A41                     l4222:	
  8128                           ;incstack = 0
  8129                           ; Regs used in _do_I2C_DO_ACK: [wreg+status,2+status,0+pclath+cstack]
  8130                           
  8131                           
  8132                           ;i2c_master.c: 301: i2c_driver_sendACK();
  8133  0A41  3189  21A4         	fcall	_i2c_driver_sendACK
  8134                           
  8135                           ;i2c_master.c: 302: return I2C_RCEN;
  8136  0A43  3005               	movlw	5
  8137  0A44  0008               	return
  8138  0A45                     __end_of_do_I2C_DO_ACK:	
  8139                           
  8140                           	psect	text29
  8141  0A68                     __ptext29:	
  8142 ;; *************** function _do_I2C_RCEN *****************
  8143 ;; Defined at:
  8144 ;;		line 292 in file "mcc_generated_files/drivers/i2c_master.c"
  8145 ;; Parameters:    Size  Location     Type
  8146 ;;		None
  8147 ;; Auto vars:     Size  Location     Type
  8148 ;;		None
  8149 ;; Return value:  Size  Location     Type
  8150 ;;                  1    wreg      enum E12337
  8151 ;; Registers used:
  8152 ;;		wreg, status,2, status,0, pclath, cstack
  8153 ;; Tracked objects:
  8154 ;;		On entry : 0/0
  8155 ;;		On exit  : 0/0
  8156 ;;		Unchanged: 0/0
  8157 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8158 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8159 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8160 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8161 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8162 ;;Total ram usage:        0 bytes
  8163 ;; Hardware stack levels used:    1
  8164 ;; Hardware stack levels required when called:    7
  8165 ;; This function calls:
  8166 ;;		_i2c_driver_startRX
  8167 ;; This function is called by:
  8168 ;;		_i2c_ISR
  8169 ;;		i1_i2c_ISR
  8170 ;; This function uses a non-reentrant model
  8171 ;;
  8172                           
  8173                           
  8174                           ;psect for function _do_I2C_RCEN
  8175  0A68                     _do_I2C_RCEN:	
  8176                           
  8177                           ;Skip over the trampoline to the duplicate function for level 1
  8178  0A68  1C7E               	btfss	126,0
  8179  0A69  2A6C               	goto	l4214
  8180  0A6A  3189  29C5         	ljmp	i1l3604
  8181  0A6C                     _do_I2C_RCEN$intlevel0:	
  8182  0A6C                     l4214:	
  8183                           ;incstack = 0
  8184                           ; Regs used in _do_I2C_RCEN: [wreg+status,2+status,0+pclath+cstack]
  8185                           
  8186                           
  8187                           ;i2c_master.c: 294: i2c_status.addressNACKCheck = 0;
  8188  0A6C  0021               	movlb	1	; select bank1
  8189  0A6D  11A0               	bcf	_i2c_status^(0+128),3
  8190                           
  8191                           ;i2c_master.c: 295: i2c_driver_startRX();
  8192  0A6E  3189  2177         	fcall	_i2c_driver_startRX
  8193                           
  8194                           ;i2c_master.c: 296: return I2C_RX;
  8195  0A70  3004               	movlw	4
  8196  0A71  0008               	return
  8197  0A72                     __end_of_do_I2C_RCEN:	
  8198                           
  8199                           	psect	text30
  8200  0A91                     __ptext30:	
  8201 ;; *************** function _do_I2C_SEND_ADR_WRITE *****************
  8202 ;; Defined at:
  8203 ;;		line 285 in file "mcc_generated_files/drivers/i2c_master.c"
  8204 ;; Parameters:    Size  Location     Type
  8205 ;;		None
  8206 ;; Auto vars:     Size  Location     Type
  8207 ;;		None
  8208 ;; Return value:  Size  Location     Type
  8209 ;;                  1    wreg      enum E12337
  8210 ;; Registers used:
  8211 ;;		wreg, status,2, status,0, pclath, cstack
  8212 ;; Tracked objects:
  8213 ;;		On entry : 0/0
  8214 ;;		On exit  : 0/0
  8215 ;;		Unchanged: 0/0
  8216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8217 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8218 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8219 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8220 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8221 ;;Total ram usage:        0 bytes
  8222 ;; Hardware stack levels used:    1
  8223 ;; Hardware stack levels required when called:    7
  8224 ;; This function calls:
  8225 ;;		_i2c_driver_TXData
  8226 ;; This function is called by:
  8227 ;;		_i2c_ISR
  8228 ;;		i1_i2c_ISR
  8229 ;; This function uses a non-reentrant model
  8230 ;;
  8231                           
  8232                           
  8233                           ;psect for function _do_I2C_SEND_ADR_WRITE
  8234  0A91                     _do_I2C_SEND_ADR_WRITE:	
  8235                           
  8236                           ;Skip over the trampoline to the duplicate function for level 1
  8237  0A91  1C7E               	btfss	126,0
  8238  0A92  2A95               	goto	l4206
  8239  0A93  318A  2A0E         	ljmp	i1l3596
  8240  0A95                     _do_I2C_SEND_ADR_WRITE$intlevel0:	
  8241  0A95                     l4206:	
  8242                           ;incstack = 0
  8243                           ; Regs used in _do_I2C_SEND_ADR_WRITE: [wreg+status,2+status,0+pclath+cstack]
  8244                           
  8245                           
  8246                           ;i2c_master.c: 287: i2c_status.addressNACKCheck = 1;
  8247  0A95  0021               	movlb	1	; select bank1
  8248  0A96  15A0               	bsf	_i2c_status^(0+128),3
  8249                           
  8250                           ;i2c_master.c: 288: i2c_driver_TXData(i2c_status.address << 1);
  8251  0A97  3521               	lslf	(_i2c_status^(0+128)+1),w
  8252  0A98  3189  21E9         	fcall	_i2c_driver_TXData
  8253                           
  8254                           ;i2c_master.c: 289: return I2C_TX;
  8255  0A9A  3003               	movlw	3
  8256  0A9B  0008               	return
  8257  0A9C                     __end_of_do_I2C_SEND_ADR_WRITE:	
  8258                           
  8259                           	psect	text31
  8260  0ACA                     __ptext31:	
  8261 ;; *************** function _do_I2C_SEND_ADR_READ *****************
  8262 ;; Defined at:
  8263 ;;		line 278 in file "mcc_generated_files/drivers/i2c_master.c"
  8264 ;; Parameters:    Size  Location     Type
  8265 ;;		None
  8266 ;; Auto vars:     Size  Location     Type
  8267 ;;		None
  8268 ;; Return value:  Size  Location     Type
  8269 ;;                  1    wreg      enum E12337
  8270 ;; Registers used:
  8271 ;;		wreg, status,2, status,0, pclath, cstack
  8272 ;; Tracked objects:
  8273 ;;		On entry : 0/0
  8274 ;;		On exit  : 0/0
  8275 ;;		Unchanged: 0/0
  8276 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8277 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8278 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8279 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8280 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8281 ;;Total ram usage:        0 bytes
  8282 ;; Hardware stack levels used:    1
  8283 ;; Hardware stack levels required when called:    7
  8284 ;; This function calls:
  8285 ;;		_i2c_driver_TXData
  8286 ;; This function is called by:
  8287 ;;		_i2c_ISR
  8288 ;;		i1_i2c_ISR
  8289 ;; This function uses a non-reentrant model
  8290 ;;
  8291                           
  8292                           
  8293                           ;psect for function _do_I2C_SEND_ADR_READ
  8294  0ACA                     _do_I2C_SEND_ADR_READ:	
  8295                           
  8296                           ;Skip over the trampoline to the duplicate function for level 1
  8297  0ACA  1C7E               	btfss	126,0
  8298  0ACB  2ACE               	goto	l4198
  8299  0ACC  318A  2A15         	ljmp	i1l3588
  8300  0ACE                     _do_I2C_SEND_ADR_READ$intlevel0:	
  8301  0ACE                     l4198:	
  8302                           ;incstack = 0
  8303                           ; Regs used in _do_I2C_SEND_ADR_READ: [wreg+status,2+status,0+pclath+cstack]
  8304                           
  8305                           
  8306                           ;i2c_master.c: 280: i2c_status.addressNACKCheck = 1;
  8307  0ACE  0021               	movlb	1	; select bank1
  8308  0ACF  15A0               	bsf	_i2c_status^(0+128),3
  8309                           
  8310                           ;i2c_master.c: 281: i2c_driver_TXData(i2c_status.address << 1 | 1);
  8311  0AD0  1403               	setc
  8312  0AD1  0D21               	rlf	(_i2c_status^(0+128)+1),w
  8313  0AD2  3189  21E9         	fcall	_i2c_driver_TXData
  8314                           
  8315                           ;i2c_master.c: 282: return I2C_RCEN;
  8316  0AD4  3005               	movlw	5
  8317  0AD5  0008               	return
  8318  0AD6                     __end_of_do_I2C_SEND_ADR_READ:	
  8319                           
  8320                           	psect	text32
  8321  0A35                     __ptext32:	
  8322 ;; *************** function _do_I2C_SEND_STOP *****************
  8323 ;; Defined at:
  8324 ;;		line 272 in file "mcc_generated_files/drivers/i2c_master.c"
  8325 ;; Parameters:    Size  Location     Type
  8326 ;;		None
  8327 ;; Auto vars:     Size  Location     Type
  8328 ;;		None
  8329 ;; Return value:  Size  Location     Type
  8330 ;;                  1    wreg      enum E12337
  8331 ;; Registers used:
  8332 ;;		wreg, status,2, status,0, pclath, cstack
  8333 ;; Tracked objects:
  8334 ;;		On entry : 0/0
  8335 ;;		On exit  : 0/0
  8336 ;;		Unchanged: 0/0
  8337 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8338 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8339 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8340 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8341 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8342 ;;Total ram usage:        0 bytes
  8343 ;; Hardware stack levels used:    1
  8344 ;; Hardware stack levels required when called:    7
  8345 ;; This function calls:
  8346 ;;		_i2c_driver_stop
  8347 ;; This function is called by:
  8348 ;;		_do_I2C_DO_ADDRESS_NACK
  8349 ;;		_do_I2C_TX
  8350 ;;		_do_I2C_TX_EMPTY
  8351 ;;		_i2c_ISR
  8352 ;;		i1_i2c_ISR
  8353 ;; This function uses a non-reentrant model
  8354 ;;
  8355                           
  8356                           
  8357                           ;psect for function _do_I2C_SEND_STOP
  8358  0A35                     _do_I2C_SEND_STOP:	
  8359                           
  8360                           ;Skip over the trampoline to the duplicate function for level 1
  8361  0A35  1C7E               	btfss	126,0
  8362  0A36  2A39               	goto	l4148
  8363  0A37  3189  2994         	ljmp	i1l3398
  8364  0A39                     _do_I2C_SEND_STOP$intlevel0:	
  8365  0A39                     l4148:	
  8366                           ;incstack = 0
  8367                           ; Regs used in _do_I2C_SEND_STOP: [wreg+status,2+status,0+pclath+cstack]
  8368                           
  8369                           
  8370                           ;i2c_master.c: 274: i2c_driver_stop();
  8371  0A39  3189  2174         	fcall	_i2c_driver_stop
  8372                           
  8373                           ;i2c_master.c: 275: return I2C_IDLE;
  8374  0A3B  3000               	movlw	0
  8375  0A3C  0008               	return
  8376  0A3D                     __end_of_do_I2C_SEND_STOP:	
  8377                           
  8378                           	psect	text33
  8379  0A2D                     __ptext33:	
  8380 ;; *************** function _do_I2C_SEND_RESTART *****************
  8381 ;; Defined at:
  8382 ;;		line 266 in file "mcc_generated_files/drivers/i2c_master.c"
  8383 ;; Parameters:    Size  Location     Type
  8384 ;;		None
  8385 ;; Auto vars:     Size  Location     Type
  8386 ;;		None
  8387 ;; Return value:  Size  Location     Type
  8388 ;;                  1    wreg      enum E12337
  8389 ;; Registers used:
  8390 ;;		wreg, status,2, status,0, pclath, cstack
  8391 ;; Tracked objects:
  8392 ;;		On entry : 0/0
  8393 ;;		On exit  : 0/0
  8394 ;;		Unchanged: 0/0
  8395 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8396 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8397 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8398 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8399 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8400 ;;Total ram usage:        0 bytes
  8401 ;; Hardware stack levels used:    1
  8402 ;; Hardware stack levels required when called:    7
  8403 ;; This function calls:
  8404 ;;		_i2c_driver_restart
  8405 ;; This function is called by:
  8406 ;;		_do_I2C_DO_ADDRESS_NACK
  8407 ;;		_do_I2C_TX_EMPTY
  8408 ;;		_i2c_ISR
  8409 ;;		i1_i2c_ISR
  8410 ;; This function uses a non-reentrant model
  8411 ;;
  8412                           
  8413                           
  8414                           ;psect for function _do_I2C_SEND_RESTART
  8415  0A2D                     _do_I2C_SEND_RESTART:	
  8416                           
  8417                           ;Skip over the trampoline to the duplicate function for level 1
  8418  0A2D  1C7E               	btfss	126,0
  8419  0A2E  2A31               	goto	l4142
  8420  0A2F  3189  2990         	ljmp	i1l3392
  8421  0A31                     _do_I2C_SEND_RESTART$intlevel0:	
  8422  0A31                     l4142:	
  8423                           ;incstack = 0
  8424                           ; Regs used in _do_I2C_SEND_RESTART: [wreg+status,2+status,0+pclath+cstack]
  8425                           
  8426                           
  8427                           ;i2c_master.c: 268: i2c_driver_restart();
  8428  0A31  3189  2171         	fcall	_i2c_driver_restart
  8429                           
  8430                           ;i2c_master.c: 269: return I2C_SEND_ADR_READ;
  8431  0A33  3001               	movlw	1
  8432  0A34  0008               	return
  8433  0A35                     __end_of_do_I2C_SEND_RESTART:	
  8434                           
  8435                           	psect	text34
  8436  0A25                     __ptext34:	
  8437 ;; *************** function _do_I2C_SEND_RESTART_WRITE *****************
  8438 ;; Defined at:
  8439 ;;		line 260 in file "mcc_generated_files/drivers/i2c_master.c"
  8440 ;; Parameters:    Size  Location     Type
  8441 ;;		None
  8442 ;; Auto vars:     Size  Location     Type
  8443 ;;		None
  8444 ;; Return value:  Size  Location     Type
  8445 ;;                  1    wreg      enum E12337
  8446 ;; Registers used:
  8447 ;;		wreg, status,2, status,0, pclath, cstack
  8448 ;; Tracked objects:
  8449 ;;		On entry : 0/0
  8450 ;;		On exit  : 0/0
  8451 ;;		Unchanged: 0/0
  8452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8453 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8454 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8455 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8456 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8457 ;;Total ram usage:        0 bytes
  8458 ;; Hardware stack levels used:    1
  8459 ;; Hardware stack levels required when called:    7
  8460 ;; This function calls:
  8461 ;;		_i2c_driver_restart
  8462 ;; This function is called by:
  8463 ;;		_do_I2C_TX
  8464 ;;		_i2c_ISR
  8465 ;;		i1_i2c_ISR
  8466 ;; This function uses a non-reentrant model
  8467 ;;
  8468                           
  8469                           
  8470                           ;psect for function _do_I2C_SEND_RESTART_WRITE
  8471  0A25                     _do_I2C_SEND_RESTART_WRITE:	
  8472                           
  8473                           ;Skip over the trampoline to the duplicate function for level 1
  8474  0A25  1C7E               	btfss	126,0
  8475  0A26  2A29               	goto	l4136
  8476  0A27  3189  298C         	ljmp	i1l3386
  8477  0A29                     _do_I2C_SEND_RESTART_WRITE$intlevel0:	
  8478  0A29                     l4136:	
  8479                           ;incstack = 0
  8480                           ; Regs used in _do_I2C_SEND_RESTART_WRITE: [wreg+status,2+status,0+pclath+cstack]
  8481                           
  8482                           
  8483                           ;i2c_master.c: 262: i2c_driver_restart();
  8484  0A29  3189  2171         	fcall	_i2c_driver_restart
  8485                           
  8486                           ;i2c_master.c: 263: return I2C_SEND_ADR_WRITE;
  8487  0A2B  3002               	movlw	2
  8488  0A2C  0008               	return
  8489  0A2D                     __end_of_do_I2C_SEND_RESTART_WRITE:	
  8490                           
  8491                           	psect	text35
  8492  0A1D                     __ptext35:	
  8493 ;; *************** function _do_I2C_SEND_RESTART_READ *****************
  8494 ;; Defined at:
  8495 ;;		line 254 in file "mcc_generated_files/drivers/i2c_master.c"
  8496 ;; Parameters:    Size  Location     Type
  8497 ;;		None
  8498 ;; Auto vars:     Size  Location     Type
  8499 ;;		None
  8500 ;; Return value:  Size  Location     Type
  8501 ;;                  1    wreg      enum E12337
  8502 ;; Registers used:
  8503 ;;		wreg, status,2, status,0, pclath, cstack
  8504 ;; Tracked objects:
  8505 ;;		On entry : 0/0
  8506 ;;		On exit  : 0/0
  8507 ;;		Unchanged: 0/0
  8508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8509 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8510 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8511 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8512 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8513 ;;Total ram usage:        0 bytes
  8514 ;; Hardware stack levels used:    1
  8515 ;; Hardware stack levels required when called:    7
  8516 ;; This function calls:
  8517 ;;		_i2c_driver_restart
  8518 ;; This function is called by:
  8519 ;;		_do_I2C_TX
  8520 ;;		_i2c_ISR
  8521 ;;		i1_i2c_ISR
  8522 ;; This function uses a non-reentrant model
  8523 ;;
  8524                           
  8525                           
  8526                           ;psect for function _do_I2C_SEND_RESTART_READ
  8527  0A1D                     _do_I2C_SEND_RESTART_READ:	
  8528                           
  8529                           ;Skip over the trampoline to the duplicate function for level 1
  8530  0A1D  1C7E               	btfss	126,0
  8531  0A1E  2A21               	goto	l4130
  8532  0A1F  3189  2988         	ljmp	i1l3380
  8533  0A21                     _do_I2C_SEND_RESTART_READ$intlevel0:	
  8534  0A21                     l4130:	
  8535                           ;incstack = 0
  8536                           ; Regs used in _do_I2C_SEND_RESTART_READ: [wreg+status,2+status,0+pclath+cstack]
  8537                           
  8538                           
  8539                           ;i2c_master.c: 256: i2c_driver_restart();
  8540  0A21  3189  2171         	fcall	_i2c_driver_restart
  8541                           
  8542                           ;i2c_master.c: 257: return I2C_SEND_ADR_READ;
  8543  0A23  3001               	movlw	1
  8544  0A24  0008               	return
  8545  0A25                     __end_of_do_I2C_SEND_RESTART_READ:	
  8546                           
  8547                           	psect	text36
  8548  0A55                     __ptext36:	
  8549 ;; *************** function _do_I2C_IDLE *****************
  8550 ;; Defined at:
  8551 ;;		line 247 in file "mcc_generated_files/drivers/i2c_master.c"
  8552 ;; Parameters:    Size  Location     Type
  8553 ;;		None
  8554 ;; Auto vars:     Size  Location     Type
  8555 ;;		None
  8556 ;; Return value:  Size  Location     Type
  8557 ;;                  1    wreg      enum E12337
  8558 ;; Registers used:
  8559 ;;		wreg, status,2
  8560 ;; Tracked objects:
  8561 ;;		On entry : 0/0
  8562 ;;		On exit  : 0/0
  8563 ;;		Unchanged: 0/0
  8564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8565 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8566 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8567 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8568 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8569 ;;Total ram usage:        0 bytes
  8570 ;; Hardware stack levels used:    1
  8571 ;; Hardware stack levels required when called:    6
  8572 ;; This function calls:
  8573 ;;		Nothing
  8574 ;; This function is called by:
  8575 ;;		_i2c_ISR
  8576 ;;		i1_i2c_ISR
  8577 ;; This function uses a non-reentrant model
  8578 ;;
  8579                           
  8580                           
  8581                           ;psect for function _do_I2C_IDLE
  8582  0A55                     _do_I2C_IDLE:	
  8583                           
  8584                           ;Skip over the trampoline to the duplicate function for level 1
  8585  0A55  1C7E               	btfss	126,0
  8586  0A56  2A59               	goto	l4190
  8587  0A57  3189  29B5         	ljmp	i1l3580
  8588  0A59                     _do_I2C_IDLE$intlevel0:	
  8589  0A59                     l4190:	
  8590                           ;incstack = 0
  8591                           ; Regs used in _do_I2C_IDLE: [wreg+status,2]
  8592                           
  8593                           
  8594                           ;i2c_master.c: 249: i2c_status.busy = 0;
  8595  0A59  0021               	movlb	1	; select bank1
  8596  0A5A  1020               	bcf	_i2c_status^(0+128),0
  8597                           
  8598                           ;i2c_master.c: 250: i2c_status.error = I2C_NOERR;
  8599  0A5B  01AB               	clrf	(_i2c_status^(0+128)+11)
  8600                           
  8601                           ;i2c_master.c: 251: return I2C_RESET;
  8602  0A5C  300E               	movlw	14
  8603  0A5D  0008               	return
  8604  0A5E                     __end_of_do_I2C_IDLE:	
  8605                           
  8606                           	psect	text37
  8607  0A86                     __ptext37:	
  8608 ;; *************** function _do_I2C_RESET *****************
  8609 ;; Defined at:
  8610 ;;		line 239 in file "mcc_generated_files/drivers/i2c_master.c"
  8611 ;; Parameters:    Size  Location     Type
  8612 ;;		None
  8613 ;; Auto vars:     Size  Location     Type
  8614 ;;		None
  8615 ;; Return value:  Size  Location     Type
  8616 ;;                  1    wreg      enum E12337
  8617 ;; Registers used:
  8618 ;;		wreg, status,2, status,0, pclath, cstack
  8619 ;; Tracked objects:
  8620 ;;		On entry : 0/0
  8621 ;;		On exit  : 0/0
  8622 ;;		Unchanged: 0/0
  8623 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8624 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8625 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8626 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8627 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8628 ;;Total ram usage:        0 bytes
  8629 ;; Hardware stack levels used:    1
  8630 ;; Hardware stack levels required when called:    7
  8631 ;; This function calls:
  8632 ;;		_i2c_driver_resetBus
  8633 ;; This function is called by:
  8634 ;;		_i2c_ISR
  8635 ;;		i1_i2c_ISR
  8636 ;; This function uses a non-reentrant model
  8637 ;;
  8638                           
  8639                           
  8640                           ;psect for function _do_I2C_RESET
  8641  0A86                     _do_I2C_RESET:	
  8642                           
  8643                           ;Skip over the trampoline to the duplicate function for level 1
  8644  0A86  1C7E               	btfss	126,0
  8645  0A87  2A8A               	goto	l4180
  8646  0A88  318A  2A07         	ljmp	i1l3570
  8647  0A8A                     _do_I2C_RESET$intlevel0:	
  8648  0A8A                     l4180:	
  8649                           ;incstack = 0
  8650                           ; Regs used in _do_I2C_RESET: [wreg+status,2+status,0+pclath+cstack]
  8651                           
  8652                           
  8653                           ;i2c_master.c: 241: i2c_driver_resetBus();
  8654  0A8A  3189  214C         	fcall	_i2c_driver_resetBus
  8655                           
  8656                           ;i2c_master.c: 242: i2c_status.busy = 0;
  8657  0A8C  0021               	movlb	1	; select bank1
  8658  0A8D  1020               	bcf	_i2c_status^(0+128),0
  8659                           
  8660                           ;i2c_master.c: 243: i2c_status.error = I2C_NOERR;
  8661  0A8E  01AB               	clrf	(_i2c_status^(0+128)+11)
  8662                           
  8663                           ;i2c_master.c: 244: return I2C_RESET;
  8664  0A8F  300E               	movlw	14
  8665  0A90  0008               	return
  8666  0A91                     __end_of_do_I2C_RESET:	
  8667                           
  8668                           	psect	text38
  8669  0E41                     __ptext38:	
  8670 ;; *************** function _do_I2C_TX_EMPTY *****************
  8671 ;; Defined at:
  8672 ;;		line 382 in file "mcc_generated_files/drivers/i2c_master.c"
  8673 ;; Parameters:    Size  Location     Type
  8674 ;;		None
  8675 ;; Auto vars:     Size  Location     Type
  8676 ;;		None
  8677 ;; Return value:  Size  Location     Type
  8678 ;;                  1    wreg      enum E12337
  8679 ;; Registers used:
  8680 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8681 ;; Tracked objects:
  8682 ;;		On entry : 0/0
  8683 ;;		On exit  : 0/0
  8684 ;;		Unchanged: 0/0
  8685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8686 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8687 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8688 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8689 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8690 ;;Total ram usage:        1 bytes
  8691 ;; Hardware stack levels used:    1
  8692 ;; Hardware stack levels required when called:    9
  8693 ;; This function calls:
  8694 ;;		Absolute function
  8695 ;;		_do_I2C_SEND_RESTART
  8696 ;;		_do_I2C_SEND_STOP
  8697 ;;		_i2c_restartWrite
  8698 ;;		_mssp_setIRQ
  8699 ;;		_rd1RegCompleteHandler
  8700 ;;		_rd2RegCompleteHandler
  8701 ;;		_rdBlkRegCompleteHandler
  8702 ;;		_returnReset
  8703 ;;		_returnStop
  8704 ;;		_wr1RegCompleteHandler
  8705 ;;		_wr2RegCompleteHandler
  8706 ;; This function is called by:
  8707 ;;		_i2c_ISR
  8708 ;;		i1_i2c_ISR
  8709 ;; This function uses a non-reentrant model
  8710 ;;
  8711                           
  8712                           
  8713                           ;psect for function _do_I2C_TX_EMPTY
  8714  0E41                     _do_I2C_TX_EMPTY:	
  8715                           
  8716                           ;Skip over the trampoline to the duplicate function for level 1
  8717  0E41  1C7E               	btfss	126,0
  8718  0E42  2E45               	goto	l6538
  8719  0E43  318D  2D98         	ljmp	i1l6858
  8720  0E45                     _do_I2C_TX_EMPTY$intlevel0:	
  8721  0E45                     l6538:	
  8722                           ;incstack = 0
  8723                           ; Regs used in _do_I2C_TX_EMPTY: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8724                           
  8725                           
  8726                           ;i2c_master.c: 384: i2c_status.bufferFree = 1;
  8727  0E45  0021               	movlb	1	; select bank1
  8728  0E46  1520               	bsf	_i2c_status^(0+128),2
  8729                           
  8730                           ;i2c_master.c: 385: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
  8731  0E47  2E52               	goto	l6556
  8732  0E48                     l6540:	
  8733                           ;i2c_master.c: 386: {
  8734                           ;i2c_master.c: 387: case i2c_restart_read:
  8735                           
  8736                           
  8737                           ;i2c_master.c: 388: case i2c_restart_write:
  8738                           ;i2c_master.c: 389: return do_I2C_SEND_RESTART();
  8739  0E48  318A  222D         	fcall	_do_I2C_SEND_RESTART
  8740  0E4A  0008               	return
  8741  0E4B                     l6544:	
  8742                           ;i2c_master.c: 390: case i2c_continue:
  8743                           
  8744                           
  8745                           ;i2c_master.c: 391: mssp_setIRQ();
  8746  0E4B  3189  217D         	fcall	_mssp_setIRQ
  8747                           
  8748                           ;i2c_master.c: 392: return I2C_TX;
  8749  0E4D  3003               	movlw	3
  8750  0E4E  0008               	return
  8751  0E4F                     l6550:	
  8752                           ;i2c_master.c: 394: case i2c_stop:
  8753                           
  8754                           ;i2c_master.c: 393: default:
  8755                           
  8756                           
  8757                           ;i2c_master.c: 395: return do_I2C_SEND_STOP();
  8758  0E4F  318A  2235         	fcall	_do_I2C_SEND_STOP
  8759                           
  8760                           ;i2c_master.c: 396: }
  8761  0E51  0008               	return
  8762  0E52                     l6556:	
  8763  0E52  0021               	movlb	1	; select bank1
  8764  0E53  0838               	movf	(low ((_i2c_status| 0+24)))^(0+128),w
  8765  0E54  0020               	movlb	0	; select bank0
  8766  0E55  00AC               	movwf	??_do_I2C_TX_EMPTY
  8767  0E56  082C               	movf	??_do_I2C_TX_EMPTY,w
  8768  0E57  00AB               	movwf	returnStop@p
  8769  0E58  300C               	movlw	12
  8770  0E59  3EA0               	addlw	(low (_i2c_status| 0))& (0+255)
  8771  0E5A  0086               	movwf	6
  8772  0E5B  0187               	clrf	7
  8773  0E5C  3F41               	moviw [1]fsr1
  8774  0E5D  008A               	movwf	10
  8775  0E5E  3F40               	moviw [0]fsr1
  8776  0E5F  000A               	callw
  8777  0E60  318E               	pagesel	$
  8778                           
  8779                           ; Switch size 1, requested type "space"
  8780                           ; Number of cases is 4, Range of values is 1 to 4
  8781                           ; switch strategies available:
  8782                           ; Name         Instructions Cycles
  8783                           ; simple_byte           13     7 (average)
  8784                           ; direct_byte           17     9 (fixed)
  8785                           ; jumptable            263     9 (fixed)
  8786                           ;	Chosen strategy is simple_byte
  8787  0E61  3A01               	xorlw	1	; case 1
  8788  0E62  1903               	skipnz
  8789  0E63  2E4F               	goto	l6550
  8790  0E64  3A03               	xorlw	3	; case 2
  8791  0E65  1903               	skipnz
  8792  0E66  2E48               	goto	l6540
  8793  0E67  3A01               	xorlw	1	; case 3
  8794  0E68  1903               	skipnz
  8795  0E69  2E48               	goto	l6540
  8796  0E6A  3A07               	xorlw	7	; case 4
  8797  0E6B  1903               	skipnz
  8798  0E6C  2E4B               	goto	l6544
  8799  0E6D  2E4F               	goto	l6550
  8800  0E6E  0008               	return
  8801  0E6F                     __end_of_do_I2C_TX_EMPTY:	
  8802                           
  8803                           	psect	text39
  8804  097D                     __ptext39:	
  8805 ;; *************** function _mssp_setIRQ *****************
  8806 ;; Defined at:
  8807 ;;		line 58 in file "mcc_generated_files/i2c_driver.c"
  8808 ;; Parameters:    Size  Location     Type
  8809 ;;		None
  8810 ;; Auto vars:     Size  Location     Type
  8811 ;;		None
  8812 ;; Return value:  Size  Location     Type
  8813 ;;                  1    wreg      void 
  8814 ;; Registers used:
  8815 ;;		None
  8816 ;; Tracked objects:
  8817 ;;		On entry : 0/0
  8818 ;;		On exit  : 0/0
  8819 ;;		Unchanged: 0/0
  8820 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8821 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8822 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8823 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8824 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8825 ;;Total ram usage:        0 bytes
  8826 ;; Hardware stack levels used:    1
  8827 ;; Hardware stack levels required when called:    6
  8828 ;; This function calls:
  8829 ;;		Nothing
  8830 ;; This function is called by:
  8831 ;;		_do_I2C_TX_EMPTY
  8832 ;; This function uses a non-reentrant model
  8833 ;;
  8834                           
  8835                           
  8836                           ;psect for function _mssp_setIRQ
  8837  097D                     _mssp_setIRQ:	
  8838                           
  8839                           ;i2c_driver.c: 60: PIR1bits.SSP1IF = 1;
  8840                           
  8841                           ;incstack = 0
  8842                           ; Regs used in _mssp_setIRQ: []
  8843  097D  0020               	movlb	0	; select bank0
  8844  097E  1590               	bsf	16,3	;volatile
  8845  097F  0008               	return
  8846  0980                     __end_of_mssp_setIRQ:	
  8847                           
  8848                           	psect	text40
  8849  0B0A                     __ptext40:	
  8850 ;; *************** function _i2c_driver_isNACK *****************
  8851 ;; Defined at:
  8852 ;;		line 161 in file "mcc_generated_files/i2c_driver.c"
  8853 ;; Parameters:    Size  Location     Type
  8854 ;;		None
  8855 ;; Auto vars:     Size  Location     Type
  8856 ;;		None
  8857 ;; Return value:  Size  Location     Type
  8858 ;;		None               void
  8859 ;; Registers used:
  8860 ;;		wreg, status,2, status,0
  8861 ;; Tracked objects:
  8862 ;;		On entry : 0/0
  8863 ;;		On exit  : 0/0
  8864 ;;		Unchanged: 0/0
  8865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8866 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8867 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8868 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8869 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8870 ;;Total ram usage:        1 bytes
  8871 ;; Hardware stack levels used:    1
  8872 ;; Hardware stack levels required when called:    6
  8873 ;; This function calls:
  8874 ;;		Nothing
  8875 ;; This function is called by:
  8876 ;;		_do_I2C_TX
  8877 ;;		_i2c_ISR
  8878 ;; This function uses a non-reentrant model
  8879 ;;
  8880                           
  8881                           
  8882                           ;psect for function _i2c_driver_isNACK
  8883  0B0A                     _i2c_driver_isNACK:	
  8884                           
  8885                           ;i2c_driver.c: 163: return SSP1CON2bits.ACKSTAT = 1;
  8886                           
  8887                           ;incstack = 0
  8888                           ; Regs used in _i2c_driver_isNACK: [wreg+status,2+status,0]
  8889  0B0A  0024               	movlb	4	; select bank4
  8890  0B0B  0816               	movf	22,w	;volatile
  8891  0B0C  39BF               	andlw	-65
  8892  0B0D  3840               	iorlw	64
  8893  0B0E  0096               	movwf	22	;volatile
  8894  0B0F  0E16               	swapf	22,w	;volatile
  8895  0B10  0C89               	rrf	9,f
  8896  0B11  0C89               	rrf	9,f
  8897  0B12  3901               	andlw	1
  8898  0B13  0020               	movlb	0	; select bank0
  8899  0B14  00A2               	movwf	??_i2c_driver_isNACK
  8900  0B15  0C22               	rrf	??_i2c_driver_isNACK,w
  8901  0B16  0008               	return
  8902  0B17                     __end_of_i2c_driver_isNACK:	
  8903                           
  8904                           	psect	text41
  8905  09E9                     __ptext41:	
  8906 ;; *************** function _i2c_driver_TXData *****************
  8907 ;; Defined at:
  8908 ;;		line 186 in file "mcc_generated_files/i2c_driver.c"
  8909 ;; Parameters:    Size  Location     Type
  8910 ;;  d               1    wreg     unsigned char 
  8911 ;; Auto vars:     Size  Location     Type
  8912 ;;  d               1    2[BANK0 ] unsigned char 
  8913 ;; Return value:  Size  Location     Type
  8914 ;;                  1    wreg      void 
  8915 ;; Registers used:
  8916 ;;		wreg
  8917 ;; Tracked objects:
  8918 ;;		On entry : 0/0
  8919 ;;		On exit  : 0/0
  8920 ;;		Unchanged: 0/0
  8921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8922 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8923 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8924 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8925 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8926 ;;Total ram usage:        1 bytes
  8927 ;; Hardware stack levels used:    1
  8928 ;; Hardware stack levels required when called:    6
  8929 ;; This function calls:
  8930 ;;		Nothing
  8931 ;; This function is called by:
  8932 ;;		_do_I2C_SEND_ADR_READ
  8933 ;;		_do_I2C_SEND_ADR_WRITE
  8934 ;;		_do_I2C_TX
  8935 ;; This function uses a non-reentrant model
  8936 ;;
  8937                           
  8938                           
  8939                           ;psect for function _i2c_driver_TXData
  8940  09E9                     _i2c_driver_TXData:	
  8941                           
  8942                           ;incstack = 0
  8943                           ; Regs used in _i2c_driver_TXData: [wreg]
  8944                           ;i2c_driver_TXData@d stored from wreg
  8945  09E9  0020               	movlb	0	; select bank0
  8946  09EA  00A2               	movwf	i2c_driver_TXData@d
  8947                           
  8948                           ;i2c_driver.c: 188: SSP1BUF = d;
  8949  09EB  0822               	movf	i2c_driver_TXData@d,w
  8950  09EC  0024               	movlb	4	; select bank4
  8951  09ED  0091               	movwf	17	;volatile
  8952  09EE  0008               	return
  8953  09EF                     __end_of_i2c_driver_TXData:	
  8954                           
  8955                           	psect	text42
  8956  097A                     __ptext42:	
  8957 ;; *************** function _i2c_driver_getRXData *****************
  8958 ;; Defined at:
  8959 ;;		line 171 in file "mcc_generated_files/i2c_driver.c"
  8960 ;; Parameters:    Size  Location     Type
  8961 ;;		None
  8962 ;; Auto vars:     Size  Location     Type
  8963 ;;		None
  8964 ;; Return value:  Size  Location     Type
  8965 ;;                  1    wreg      unsigned char 
  8966 ;; Registers used:
  8967 ;;		wreg
  8968 ;; Tracked objects:
  8969 ;;		On entry : 0/0
  8970 ;;		On exit  : 0/0
  8971 ;;		Unchanged: 0/0
  8972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8973 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8974 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8975 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8976 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8977 ;;Total ram usage:        0 bytes
  8978 ;; Hardware stack levels used:    1
  8979 ;; Hardware stack levels required when called:    6
  8980 ;; This function calls:
  8981 ;;		Nothing
  8982 ;; This function is called by:
  8983 ;;		_do_I2C_RX
  8984 ;; This function uses a non-reentrant model
  8985 ;;
  8986                           
  8987                           
  8988                           ;psect for function _i2c_driver_getRXData
  8989  097A                     _i2c_driver_getRXData:	
  8990                           
  8991                           ;i2c_driver.c: 173: return SSP1BUF;
  8992                           
  8993                           ;incstack = 0
  8994                           ; Regs used in _i2c_driver_getRXData: [wreg]
  8995  097A  0024               	movlb	4	; select bank4
  8996  097B  0811               	movf	17,w	;volatile
  8997  097C  0008               	return
  8998  097D                     __end_of_i2c_driver_getRXData:	
  8999                           
  9000                           	psect	text43
  9001  09A8                     __ptext43:	
  9002 ;; *************** function _i2c_driver_sendNACK *****************
  9003 ;; Defined at:
  9004 ;;		line 202 in file "mcc_generated_files/i2c_driver.c"
  9005 ;; Parameters:    Size  Location     Type
  9006 ;;		None
  9007 ;; Auto vars:     Size  Location     Type
  9008 ;;		None
  9009 ;; Return value:  Size  Location     Type
  9010 ;;                  1    wreg      void 
  9011 ;; Registers used:
  9012 ;;		None
  9013 ;; Tracked objects:
  9014 ;;		On entry : 0/0
  9015 ;;		On exit  : 0/0
  9016 ;;		Unchanged: 0/0
  9017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9018 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9019 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9020 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9021 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9022 ;;Total ram usage:        0 bytes
  9023 ;; Hardware stack levels used:    1
  9024 ;; Hardware stack levels required when called:    6
  9025 ;; This function calls:
  9026 ;;		Nothing
  9027 ;; This function is called by:
  9028 ;;		_do_I2C_DO_NACK_STOP
  9029 ;;		_do_I2C_DO_NACK_RESTART
  9030 ;; This function uses a non-reentrant model
  9031 ;;
  9032                           
  9033                           
  9034                           ;psect for function _i2c_driver_sendNACK
  9035  09A8                     _i2c_driver_sendNACK:	
  9036                           
  9037                           ;i2c_driver.c: 204: SSP1CON2bits.ACKDT = 1;
  9038                           
  9039                           ;incstack = 0
  9040                           ; Regs used in _i2c_driver_sendNACK: []
  9041  09A8  0024               	movlb	4	; select bank4
  9042  09A9  1696               	bsf	22,5	;volatile
  9043                           
  9044                           ;i2c_driver.c: 205: SSP1CON2bits.ACKEN = 1;
  9045  09AA  1616               	bsf	22,4	;volatile
  9046  09AB  0008               	return
  9047  09AC                     __end_of_i2c_driver_sendNACK:	
  9048                           
  9049                           	psect	text44
  9050  094C                     __ptext44:	
  9051 ;; *************** function _i2c_driver_resetBus *****************
  9052 ;; Defined at:
  9053 ;;		line 141 in file "mcc_generated_files/i2c_driver.c"
  9054 ;; Parameters:    Size  Location     Type
  9055 ;;		None
  9056 ;; Auto vars:     Size  Location     Type
  9057 ;;		None
  9058 ;; Return value:  Size  Location     Type
  9059 ;;                  1    wreg      void 
  9060 ;; Registers used:
  9061 ;;		None
  9062 ;; Tracked objects:
  9063 ;;		On entry : 0/0
  9064 ;;		On exit  : 0/0
  9065 ;;		Unchanged: 0/0
  9066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9067 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9068 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9069 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9070 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9071 ;;Total ram usage:        0 bytes
  9072 ;; Hardware stack levels used:    1
  9073 ;; Hardware stack levels required when called:    6
  9074 ;; This function calls:
  9075 ;;		Nothing
  9076 ;; This function is called by:
  9077 ;;		_do_I2C_RESET
  9078 ;; This function uses a non-reentrant model
  9079 ;;
  9080                           
  9081                           
  9082                           ;psect for function _i2c_driver_resetBus
  9083  094C                     _i2c_driver_resetBus:	
  9084                           
  9085                           ;incstack = 0
  9086                           ; Regs used in _i2c_driver_resetBus: []
  9087  094C  0008               	return
  9088  094D                     __end_of_i2c_driver_resetBus:	
  9089                           
  9090                           	psect	text45
  9091  0977                     __ptext45:	
  9092 ;; *************** function _i2c_driver_startRX *****************
  9093 ;; Defined at:
  9094 ;;		line 166 in file "mcc_generated_files/i2c_driver.c"
  9095 ;; Parameters:    Size  Location     Type
  9096 ;;		None
  9097 ;; Auto vars:     Size  Location     Type
  9098 ;;		None
  9099 ;; Return value:  Size  Location     Type
  9100 ;;                  1    wreg      void 
  9101 ;; Registers used:
  9102 ;;		None
  9103 ;; Tracked objects:
  9104 ;;		On entry : 0/0
  9105 ;;		On exit  : 0/0
  9106 ;;		Unchanged: 0/0
  9107 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9108 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9109 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9110 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9111 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9112 ;;Total ram usage:        0 bytes
  9113 ;; Hardware stack levels used:    1
  9114 ;; Hardware stack levels required when called:    6
  9115 ;; This function calls:
  9116 ;;		Nothing
  9117 ;; This function is called by:
  9118 ;;		_do_I2C_RCEN
  9119 ;; This function uses a non-reentrant model
  9120 ;;
  9121                           
  9122                           
  9123                           ;psect for function _i2c_driver_startRX
  9124  0977                     _i2c_driver_startRX:	
  9125                           
  9126                           ;i2c_driver.c: 168: SSP1CON2bits.RCEN = 1;
  9127                           
  9128                           ;incstack = 0
  9129                           ; Regs used in _i2c_driver_startRX: []
  9130  0977  0024               	movlb	4	; select bank4
  9131  0978  1596               	bsf	22,3	;volatile
  9132  0979  0008               	return
  9133  097A                     __end_of_i2c_driver_startRX:	
  9134                           
  9135                           	psect	text46
  9136  09E3                     __ptext46:	
  9137 ;; *************** function _returnReset *****************
  9138 ;; Defined at:
  9139 ;;		line 448 in file "mcc_generated_files/drivers/i2c_master.c"
  9140 ;; Parameters:    Size  Location     Type
  9141 ;;  p               1   11[BANK0 ] PTR void 
  9142 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  9143 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  9144 ;; Auto vars:     Size  Location     Type
  9145 ;;		None
  9146 ;; Return value:  Size  Location     Type
  9147 ;;                  1    wreg      enum E12171
  9148 ;; Registers used:
  9149 ;;		wreg
  9150 ;; Tracked objects:
  9151 ;;		On entry : 0/0
  9152 ;;		On exit  : 0/0
  9153 ;;		Unchanged: 0/0
  9154 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9155 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9156 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9157 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9158 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9159 ;;Total ram usage:        1 bytes
  9160 ;; Hardware stack levels used:    1
  9161 ;; Hardware stack levels required when called:    6
  9162 ;; This function calls:
  9163 ;;		Nothing
  9164 ;; This function is called by:
  9165 ;;		_i2c_open
  9166 ;;		_do_I2C_DO_ADDRESS_NACK
  9167 ;;		_do_I2C_TX
  9168 ;;		_do_I2C_RX
  9169 ;;		_do_I2C_TX_EMPTY
  9170 ;;		i1_do_I2C_DO_ADDRESS_NACK
  9171 ;;		i1_do_I2C_TX
  9172 ;;		i1_do_I2C_RX
  9173 ;;		i1_do_I2C_TX_EMPTY
  9174 ;; This function uses a non-reentrant model
  9175 ;;
  9176                           
  9177                           
  9178                           ;psect for function _returnReset
  9179  09E3                     _returnReset:	
  9180                           
  9181                           ;Skip over the trampoline to the duplicate function for level 1
  9182  09E3  1C7E               	btfss	126,0
  9183  09E4  29E7               	goto	l4170
  9184  09E5  3180  2802         	ljmp	i1l3420
  9185  09E7                     _returnReset$intlevel0:	
  9186  09E7                     l4170:	
  9187                           ;incstack = 0
  9188                           ; Regs used in _returnReset: [wreg]
  9189                           
  9190                           
  9191                           ;i2c_master.c: 450: return i2c_reset_link;
  9192  09E7  3005               	movlw	5
  9193  09E8  0008               	return
  9194  09E9                     __end_of_returnReset:	
  9195                           
  9196                           	psect	text47
  9197  09DD                     __ptext47:	
  9198 ;; *************** function _returnStop *****************
  9199 ;; Defined at:
  9200 ;;		line 443 in file "mcc_generated_files/drivers/i2c_master.c"
  9201 ;; Parameters:    Size  Location     Type
  9202 ;;  p               1   11[BANK0 ] PTR void 
  9203 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  9204 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  9205 ;; Auto vars:     Size  Location     Type
  9206 ;;		None
  9207 ;; Return value:  Size  Location     Type
  9208 ;;                  1    wreg      enum E12171
  9209 ;; Registers used:
  9210 ;;		wreg
  9211 ;; Tracked objects:
  9212 ;;		On entry : 0/0
  9213 ;;		On exit  : 0/0
  9214 ;;		Unchanged: 0/0
  9215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9216 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9217 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9218 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9219 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9220 ;;Total ram usage:        1 bytes
  9221 ;; Hardware stack levels used:    1
  9222 ;; Hardware stack levels required when called:    6
  9223 ;; This function calls:
  9224 ;;		Nothing
  9225 ;; This function is called by:
  9226 ;;		_i2c_open
  9227 ;;		_setCallBack
  9228 ;;		_do_I2C_DO_ADDRESS_NACK
  9229 ;;		_do_I2C_TX
  9230 ;;		_do_I2C_RX
  9231 ;;		_do_I2C_TX_EMPTY
  9232 ;;		i1_do_I2C_DO_ADDRESS_NACK
  9233 ;;		i1_do_I2C_TX
  9234 ;;		i1_do_I2C_RX
  9235 ;;		i1_do_I2C_TX_EMPTY
  9236 ;; This function uses a non-reentrant model
  9237 ;;
  9238                           
  9239                           
  9240                           ;psect for function _returnStop
  9241  09DD                     _returnStop:	
  9242                           
  9243                           ;Skip over the trampoline to the duplicate function for level 1
  9244  09DD  1C7E               	btfss	126,0
  9245  09DE  29E1               	goto	l4166
  9246  09DF  3189  294E         	ljmp	i1l3416
  9247  09E1                     _returnStop$intlevel0:	
  9248  09E1                     l4166:	
  9249                           ;incstack = 0
  9250                           ; Regs used in _returnStop: [wreg]
  9251                           
  9252                           
  9253                           ;i2c_master.c: 445: return i2c_stop;
  9254  09E1  3001               	movlw	1
  9255  09E2  0008               	return
  9256  09E3                     __end_of_returnStop:	
  9257                           
  9258                           	psect	text48
  9259  0C60                     __ptext48:	
  9260 ;; *************** function _rdBlkRegCompleteHandler *****************
  9261 ;; Defined at:
  9262 ;;		line 134 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  9263 ;; Parameters:    Size  Location     Type
  9264 ;;  p               1   11[BANK0 ] PTR void 
  9265 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  9266 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  9267 ;; Auto vars:     Size  Location     Type
  9268 ;;		None
  9269 ;; Return value:  Size  Location     Type
  9270 ;;                  1    wreg      enum E97
  9271 ;; Registers used:
  9272 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9273 ;; Tracked objects:
  9274 ;;		On entry : 0/0
  9275 ;;		On exit  : 0/0
  9276 ;;		Unchanged: 0/0
  9277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9278 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9279 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9280 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9281 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9282 ;;Total ram usage:        1 bytes
  9283 ;; Hardware stack levels used:    1
  9284 ;; Hardware stack levels required when called:    8
  9285 ;; This function calls:
  9286 ;;		_i2c_setBuffer
  9287 ;;		_i2c_setDataCompleteCallback
  9288 ;; This function is called by:
  9289 ;;		_i2c_readDataBlock
  9290 ;;		_do_I2C_DO_ADDRESS_NACK
  9291 ;;		_do_I2C_TX
  9292 ;;		_do_I2C_RX
  9293 ;;		_do_I2C_TX_EMPTY
  9294 ;;		i1_do_I2C_DO_ADDRESS_NACK
  9295 ;;		i1_do_I2C_TX
  9296 ;;		i1_do_I2C_RX
  9297 ;;		i1_do_I2C_TX_EMPTY
  9298 ;; This function uses a non-reentrant model
  9299 ;;
  9300                           
  9301                           
  9302                           ;psect for function _rdBlkRegCompleteHandler
  9303  0C60                     _rdBlkRegCompleteHandler:	
  9304                           
  9305                           ;Skip over the trampoline to the duplicate function for level 1
  9306  0C60  1C7E               	btfss	126,0
  9307  0C61  2C64               	goto	l4124
  9308  0C62  318B  2BA0         	ljmp	i1l3374
  9309  0C64                     _rdBlkRegCompleteHandler$intlevel0:	
  9310  0C64                     l4124:	
  9311                           ;incstack = 0
  9312                           ; Regs used in _rdBlkRegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  9313                           
  9314                           
  9315                           ;i2c_simple_master.c: 136: i2c_setBuffer(((buf_t *)p)->data,((buf_t*)p)->len);
  9316  0C64  0020               	movlb	0	; select bank0
  9317  0C65  082B               	movf	rdBlkRegCompleteHandler@p,w
  9318  0C66  3E02               	addlw	2
  9319  0C67  0086               	movwf	6
  9320  0C68  0187               	clrf	7
  9321  0C69  0801               	movf	1,w
  9322  0C6A  00A2               	movwf	i2c_setBuffer@buffer
  9323  0C6B  3000               	movlw	0
  9324  0C6C  00A3               	movwf	i2c_setBuffer@buffer+1
  9325  0C6D  082B               	movf	rdBlkRegCompleteHandler@p,w
  9326  0C6E  0086               	movwf	6
  9327  0C6F  0187               	clrf	7
  9328  0C70  3F40               	moviw [0]fsr1
  9329  0C71  00A4               	movwf	i2c_setBuffer@bufferSize
  9330  0C72  3F41               	moviw [1]fsr1
  9331  0C73  00A5               	movwf	i2c_setBuffer@bufferSize+1
  9332  0C74  318B  238B  318C   	fcall	_i2c_setBuffer
  9333                           
  9334                           ;i2c_simple_master.c: 137: i2c_setDataCompleteCallback((0),(0));
  9335  0C77  3000               	movlw	0
  9336  0C78  0020               	movlb	0	; select bank0
  9337  0C79  00A7               	movwf	i2c_setDataCompleteCallback@cb
  9338  0C7A  00A8               	movwf	i2c_setDataCompleteCallback@cb+1
  9339  0C7B  01A9               	clrf	i2c_setDataCompleteCallback@p
  9340  0C7C  318A  22FD         	fcall	_i2c_setDataCompleteCallback
  9341                           
  9342                           ;i2c_simple_master.c: 138: return i2c_restart_read;
  9343  0C7E  3002               	movlw	2
  9344  0C7F  0008               	return
  9345  0C80                     __end_of_rdBlkRegCompleteHandler:	
  9346                           
  9347                           	psect	text49
  9348  0C26                     __ptext49:	
  9349 ;; *************** function _rd2RegCompleteHandler *****************
  9350 ;; Defined at:
  9351 ;;		line 87 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  9352 ;; Parameters:    Size  Location     Type
  9353 ;;  p               1   11[BANK0 ] PTR void 
  9354 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  9355 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  9356 ;; Auto vars:     Size  Location     Type
  9357 ;;		None
  9358 ;; Return value:  Size  Location     Type
  9359 ;;                  1    wreg      enum E97
  9360 ;; Registers used:
  9361 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9362 ;; Tracked objects:
  9363 ;;		On entry : 0/0
  9364 ;;		On exit  : 0/0
  9365 ;;		Unchanged: 0/0
  9366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9367 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9368 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9369 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9370 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9371 ;;Total ram usage:        1 bytes
  9372 ;; Hardware stack levels used:    1
  9373 ;; Hardware stack levels required when called:    8
  9374 ;; This function calls:
  9375 ;;		_i2c_setBuffer
  9376 ;;		_i2c_setDataCompleteCallback
  9377 ;; This function is called by:
  9378 ;;		_i2c_read2ByteRegister
  9379 ;;		_do_I2C_DO_ADDRESS_NACK
  9380 ;;		_do_I2C_TX
  9381 ;;		_do_I2C_RX
  9382 ;;		_do_I2C_TX_EMPTY
  9383 ;;		i1_do_I2C_DO_ADDRESS_NACK
  9384 ;;		i1_do_I2C_TX
  9385 ;;		i1_do_I2C_RX
  9386 ;;		i1_do_I2C_TX_EMPTY
  9387 ;; This function uses a non-reentrant model
  9388 ;;
  9389                           
  9390                           
  9391                           ;psect for function _rd2RegCompleteHandler
  9392  0C26                     _rd2RegCompleteHandler:	
  9393                           
  9394                           ;Skip over the trampoline to the duplicate function for level 1
  9395  0C26  1C7E               	btfss	126,0
  9396  0C27  2C2A               	goto	l4108
  9397  0C28  318B  2B76         	ljmp	i1l3358
  9398  0C2A                     _rd2RegCompleteHandler$intlevel0:	
  9399  0C2A                     l4108:	
  9400                           ;incstack = 0
  9401                           ; Regs used in _rd2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  9402                           
  9403                           
  9404                           ;i2c_simple_master.c: 89: i2c_setBuffer(p,2);
  9405  0C2A  0020               	movlb	0	; select bank0
  9406  0C2B  082B               	movf	rd2RegCompleteHandler@p,w
  9407  0C2C  00A2               	movwf	i2c_setBuffer@buffer
  9408  0C2D  39FF               	andlw	255
  9409  0C2E  1D03               	skipz
  9410  0C2F  3000               	movlw	0
  9411  0C30  00A3               	movwf	i2c_setBuffer@buffer+1
  9412  0C31  3002               	movlw	2
  9413  0C32  00A4               	movwf	i2c_setBuffer@bufferSize
  9414  0C33  3000               	movlw	0
  9415  0C34  00A5               	movwf	i2c_setBuffer@bufferSize+1
  9416  0C35  318B  238B  318C   	fcall	_i2c_setBuffer
  9417                           
  9418                           ;i2c_simple_master.c: 90: i2c_setDataCompleteCallback((0),(0));
  9419  0C38  3000               	movlw	0
  9420  0C39  0020               	movlb	0	; select bank0
  9421  0C3A  00A7               	movwf	i2c_setDataCompleteCallback@cb
  9422  0C3B  00A8               	movwf	i2c_setDataCompleteCallback@cb+1
  9423  0C3C  01A9               	clrf	i2c_setDataCompleteCallback@p
  9424  0C3D  318A  22FD         	fcall	_i2c_setDataCompleteCallback
  9425                           
  9426                           ;i2c_simple_master.c: 91: return i2c_restart_read;
  9427  0C3F  3002               	movlw	2
  9428  0C40  0008               	return
  9429  0C41                     __end_of_rd2RegCompleteHandler:	
  9430                           
  9431                           	psect	text50
  9432  0C0B                     __ptext50:	
  9433 ;; *************** function _rd1RegCompleteHandler *****************
  9434 ;; Defined at:
  9435 ;;		line 58 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  9436 ;; Parameters:    Size  Location     Type
  9437 ;;  p               1   11[BANK0 ] PTR void 
  9438 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  9439 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  9440 ;; Auto vars:     Size  Location     Type
  9441 ;;		None
  9442 ;; Return value:  Size  Location     Type
  9443 ;;                  1    wreg      enum E97
  9444 ;; Registers used:
  9445 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9446 ;; Tracked objects:
  9447 ;;		On entry : 0/0
  9448 ;;		On exit  : 0/0
  9449 ;;		Unchanged: 0/0
  9450 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9451 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9452 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9453 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9454 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9455 ;;Total ram usage:        1 bytes
  9456 ;; Hardware stack levels used:    1
  9457 ;; Hardware stack levels required when called:    8
  9458 ;; This function calls:
  9459 ;;		_i2c_setBuffer
  9460 ;;		_i2c_setDataCompleteCallback
  9461 ;; This function is called by:
  9462 ;;		_i2c_read1ByteRegister
  9463 ;;		_do_I2C_DO_ADDRESS_NACK
  9464 ;;		_do_I2C_TX
  9465 ;;		_do_I2C_RX
  9466 ;;		_do_I2C_TX_EMPTY
  9467 ;;		i1_do_I2C_DO_ADDRESS_NACK
  9468 ;;		i1_do_I2C_TX
  9469 ;;		i1_do_I2C_RX
  9470 ;;		i1_do_I2C_TX_EMPTY
  9471 ;; This function uses a non-reentrant model
  9472 ;;
  9473                           
  9474                           
  9475                           ;psect for function _rd1RegCompleteHandler
  9476  0C0B                     _rd1RegCompleteHandler:	
  9477                           
  9478                           ;Skip over the trampoline to the duplicate function for level 1
  9479  0C0B  1C7E               	btfss	126,0
  9480  0C0C  2C0F               	goto	l4100
  9481  0C0D  318B  2B61         	ljmp	i1l3350
  9482  0C0F                     _rd1RegCompleteHandler$intlevel0:	
  9483  0C0F                     l4100:	
  9484                           ;incstack = 0
  9485                           ; Regs used in _rd1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  9486                           
  9487                           
  9488                           ;i2c_simple_master.c: 60: i2c_setBuffer(p,1);
  9489  0C0F  0020               	movlb	0	; select bank0
  9490  0C10  082B               	movf	rd1RegCompleteHandler@p,w
  9491  0C11  00A2               	movwf	i2c_setBuffer@buffer
  9492  0C12  39FF               	andlw	255
  9493  0C13  1D03               	skipz
  9494  0C14  3000               	movlw	0
  9495  0C15  00A3               	movwf	i2c_setBuffer@buffer+1
  9496  0C16  3001               	movlw	1
  9497  0C17  00A4               	movwf	i2c_setBuffer@bufferSize
  9498  0C18  3000               	movlw	0
  9499  0C19  00A5               	movwf	i2c_setBuffer@bufferSize+1
  9500  0C1A  318B  238B  318C   	fcall	_i2c_setBuffer
  9501                           
  9502                           ;i2c_simple_master.c: 61: i2c_setDataCompleteCallback((0),(0));
  9503  0C1D  3000               	movlw	0
  9504  0C1E  0020               	movlb	0	; select bank0
  9505  0C1F  00A7               	movwf	i2c_setDataCompleteCallback@cb
  9506  0C20  00A8               	movwf	i2c_setDataCompleteCallback@cb+1
  9507  0C21  01A9               	clrf	i2c_setDataCompleteCallback@p
  9508  0C22  318A  22FD         	fcall	_i2c_setDataCompleteCallback
  9509                           
  9510                           ;i2c_simple_master.c: 62: return i2c_restart_read;
  9511  0C24  3002               	movlw	2
  9512  0C25  0008               	return
  9513  0C26                     __end_of_rd1RegCompleteHandler:	
  9514                           
  9515                           	psect	text51
  9516  0BF0                     __ptext51:	
  9517 ;; *************** function _wr1RegCompleteHandler *****************
  9518 ;; Defined at:
  9519 ;;		line 31 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  9520 ;; Parameters:    Size  Location     Type
  9521 ;;  p               1   11[BANK0 ] PTR void 
  9522 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  9523 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  9524 ;; Auto vars:     Size  Location     Type
  9525 ;;		None
  9526 ;; Return value:  Size  Location     Type
  9527 ;;                  1    wreg      enum E97
  9528 ;; Registers used:
  9529 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9530 ;; Tracked objects:
  9531 ;;		On entry : 0/0
  9532 ;;		On exit  : 0/0
  9533 ;;		Unchanged: 0/0
  9534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9535 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9536 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9537 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9538 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9539 ;;Total ram usage:        1 bytes
  9540 ;; Hardware stack levels used:    1
  9541 ;; Hardware stack levels required when called:    8
  9542 ;; This function calls:
  9543 ;;		_i2c_setBuffer
  9544 ;;		_i2c_setDataCompleteCallback
  9545 ;; This function is called by:
  9546 ;;		_i2c_write1ByteRegister
  9547 ;;		_do_I2C_DO_ADDRESS_NACK
  9548 ;;		_do_I2C_TX
  9549 ;;		_do_I2C_RX
  9550 ;;		_do_I2C_TX_EMPTY
  9551 ;;		i1_do_I2C_DO_ADDRESS_NACK
  9552 ;;		i1_do_I2C_TX
  9553 ;;		i1_do_I2C_RX
  9554 ;;		i1_do_I2C_TX_EMPTY
  9555 ;; This function uses a non-reentrant model
  9556 ;;
  9557                           
  9558                           
  9559                           ;psect for function _wr1RegCompleteHandler
  9560  0BF0                     _wr1RegCompleteHandler:	
  9561                           
  9562                           ;Skip over the trampoline to the duplicate function for level 1
  9563  0BF0  1C7E               	btfss	126,0
  9564  0BF1  2BF4               	goto	l4092
  9565  0BF2  318B  2B4C         	ljmp	i1l3342
  9566  0BF4                     _wr1RegCompleteHandler$intlevel0:	
  9567  0BF4                     l4092:	
  9568                           ;incstack = 0
  9569                           ; Regs used in _wr1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  9570                           
  9571                           
  9572                           ;i2c_simple_master.c: 33: i2c_setBuffer(p,1);
  9573  0BF4  0020               	movlb	0	; select bank0
  9574  0BF5  082B               	movf	wr1RegCompleteHandler@p,w
  9575  0BF6  00A2               	movwf	i2c_setBuffer@buffer
  9576  0BF7  39FF               	andlw	255
  9577  0BF8  1D03               	skipz
  9578  0BF9  3000               	movlw	0
  9579  0BFA  00A3               	movwf	i2c_setBuffer@buffer+1
  9580  0BFB  3001               	movlw	1
  9581  0BFC  00A4               	movwf	i2c_setBuffer@bufferSize
  9582  0BFD  3000               	movlw	0
  9583  0BFE  00A5               	movwf	i2c_setBuffer@bufferSize+1
  9584  0BFF  318B  238B  318B   	fcall	_i2c_setBuffer
  9585                           
  9586                           ;i2c_simple_master.c: 34: i2c_setDataCompleteCallback((0),(0));
  9587  0C02  3000               	movlw	0
  9588  0C03  0020               	movlb	0	; select bank0
  9589  0C04  00A7               	movwf	i2c_setDataCompleteCallback@cb
  9590  0C05  00A8               	movwf	i2c_setDataCompleteCallback@cb+1
  9591  0C06  01A9               	clrf	i2c_setDataCompleteCallback@p
  9592  0C07  318A  22FD         	fcall	_i2c_setDataCompleteCallback
  9593                           
  9594                           ;i2c_simple_master.c: 35: return i2c_continue;
  9595  0C09  3004               	movlw	4
  9596  0C0A  0008               	return
  9597  0C0B                     __end_of_wr1RegCompleteHandler:	
  9598                           
  9599                           	psect	text52
  9600  09D7                     __ptext52:	
  9601 ;; *************** function _i2c_restartWrite *****************
  9602 ;; Defined at:
  9603 ;;		line 35 in file "mcc_generated_files/drivers/i2c_types.c"
  9604 ;; Parameters:    Size  Location     Type
  9605 ;;  p               1   11[BANK0 ] PTR void 
  9606 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  9607 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  9608 ;; Auto vars:     Size  Location     Type
  9609 ;;		None
  9610 ;; Return value:  Size  Location     Type
  9611 ;;                  1    wreg      enum E97
  9612 ;; Registers used:
  9613 ;;		wreg
  9614 ;; Tracked objects:
  9615 ;;		On entry : 0/0
  9616 ;;		On exit  : 0/0
  9617 ;;		Unchanged: 0/0
  9618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9619 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9620 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9621 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9622 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9623 ;;Total ram usage:        1 bytes
  9624 ;; Hardware stack levels used:    1
  9625 ;; Hardware stack levels required when called:    6
  9626 ;; This function calls:
  9627 ;;		Nothing
  9628 ;; This function is called by:
  9629 ;;		_i2c_writeNBytes
  9630 ;;		_i2c_write1ByteRegister
  9631 ;;		_i2c_read1ByteRegister
  9632 ;;		_i2c_read2ByteRegister
  9633 ;;		_i2c_write2ByteRegister
  9634 ;;		_i2c_readDataBlock
  9635 ;;		_do_I2C_DO_ADDRESS_NACK
  9636 ;;		_do_I2C_TX
  9637 ;;		_do_I2C_RX
  9638 ;;		_do_I2C_TX_EMPTY
  9639 ;;		i1_do_I2C_DO_ADDRESS_NACK
  9640 ;;		i1_do_I2C_TX
  9641 ;;		i1_do_I2C_RX
  9642 ;;		i1_do_I2C_TX_EMPTY
  9643 ;; This function uses a non-reentrant model
  9644 ;;
  9645                           
  9646                           
  9647                           ;psect for function _i2c_restartWrite
  9648  09D7                     _i2c_restartWrite:	
  9649                           
  9650                           ;Skip over the trampoline to the duplicate function for level 1
  9651  09D7  1C7E               	btfss	126,0
  9652  09D8  29DB               	goto	l4174
  9653  09D9  3187  2FFE         	ljmp	i1l3424
  9654  09DB                     _i2c_restartWrite$intlevel0:	
  9655  09DB                     l4174:	
  9656                           ;incstack = 0
  9657                           ; Regs used in _i2c_restartWrite: [wreg]
  9658                           
  9659                           
  9660                           ;i2c_types.c: 37: return i2c_restart_write;
  9661  09DB  3003               	movlw	3
  9662  09DC  0008               	return
  9663  09DD                     __end_of_i2c_restartWrite:	
  9664                           
  9665                           	psect	text53
  9666  0BD5                     __ptext53:	
  9667 ;; *************** function _wr2RegCompleteHandler *****************
  9668 ;; Defined at:
  9669 ;;		line 110 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  9670 ;; Parameters:    Size  Location     Type
  9671 ;;  p               1   11[BANK0 ] PTR void 
  9672 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  9673 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  9674 ;; Auto vars:     Size  Location     Type
  9675 ;;		None
  9676 ;; Return value:  Size  Location     Type
  9677 ;;                  1    wreg      enum E97
  9678 ;; Registers used:
  9679 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9680 ;; Tracked objects:
  9681 ;;		On entry : 0/0
  9682 ;;		On exit  : 0/0
  9683 ;;		Unchanged: 0/0
  9684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9685 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9686 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9687 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9688 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9689 ;;Total ram usage:        1 bytes
  9690 ;; Hardware stack levels used:    1
  9691 ;; Hardware stack levels required when called:    8
  9692 ;; This function calls:
  9693 ;;		_i2c_setBuffer
  9694 ;;		_i2c_setDataCompleteCallback
  9695 ;; This function is called by:
  9696 ;;		_i2c_write2ByteRegister
  9697 ;;		_do_I2C_DO_ADDRESS_NACK
  9698 ;;		_do_I2C_TX
  9699 ;;		_do_I2C_RX
  9700 ;;		_do_I2C_TX_EMPTY
  9701 ;;		i1_do_I2C_DO_ADDRESS_NACK
  9702 ;;		i1_do_I2C_TX
  9703 ;;		i1_do_I2C_RX
  9704 ;;		i1_do_I2C_TX_EMPTY
  9705 ;; This function uses a non-reentrant model
  9706 ;;
  9707                           
  9708                           
  9709                           ;psect for function _wr2RegCompleteHandler
  9710  0BD5                     _wr2RegCompleteHandler:	
  9711                           
  9712                           ;Skip over the trampoline to the duplicate function for level 1
  9713  0BD5  1C7E               	btfss	126,0
  9714  0BD6  2BD9               	goto	l4116
  9715  0BD7  318B  2B37         	ljmp	i1l3366
  9716  0BD9                     _wr2RegCompleteHandler$intlevel0:	
  9717  0BD9                     l4116:	
  9718                           ;incstack = 0
  9719                           ; Regs used in _wr2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  9720                           
  9721                           
  9722                           ;i2c_simple_master.c: 112: i2c_setBuffer(p,2);
  9723  0BD9  0020               	movlb	0	; select bank0
  9724  0BDA  082B               	movf	wr2RegCompleteHandler@p,w
  9725  0BDB  00A2               	movwf	i2c_setBuffer@buffer
  9726  0BDC  39FF               	andlw	255
  9727  0BDD  1D03               	skipz
  9728  0BDE  3000               	movlw	0
  9729  0BDF  00A3               	movwf	i2c_setBuffer@buffer+1
  9730  0BE0  3002               	movlw	2
  9731  0BE1  00A4               	movwf	i2c_setBuffer@bufferSize
  9732  0BE2  3000               	movlw	0
  9733  0BE3  00A5               	movwf	i2c_setBuffer@bufferSize+1
  9734  0BE4  318B  238B  318B   	fcall	_i2c_setBuffer
  9735                           
  9736                           ;i2c_simple_master.c: 113: i2c_setDataCompleteCallback((0),(0));
  9737  0BE7  3000               	movlw	0
  9738  0BE8  0020               	movlb	0	; select bank0
  9739  0BE9  00A7               	movwf	i2c_setDataCompleteCallback@cb
  9740  0BEA  00A8               	movwf	i2c_setDataCompleteCallback@cb+1
  9741  0BEB  01A9               	clrf	i2c_setDataCompleteCallback@p
  9742  0BEC  318A  22FD         	fcall	_i2c_setDataCompleteCallback
  9743                           
  9744                           ;i2c_simple_master.c: 114: return i2c_continue;
  9745  0BEE  3004               	movlw	4
  9746  0BEF  0008               	return
  9747  0BF0                     __end_of_wr2RegCompleteHandler:	
  9748                           
  9749                           	psect	text54
  9750  0AFD                     __ptext54:	
  9751 ;; *************** function _i2c_setDataCompleteCallback *****************
  9752 ;; Defined at:
  9753 ;;		line 89 in file "mcc_generated_files/drivers/i2c_master.c"
  9754 ;; Parameters:    Size  Location     Type
  9755 ;;  cb              2    7[BANK0 ] PTR FTN(PTR void ,)enum 
  9756 ;;		 -> rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), rd2RegCompleteHandler(1), rd1RegCompleteHandler(1), 
  9757 ;;		 -> wr1RegCompleteHandler(1), Absolute function(1), 
  9758 ;;  p               1    9[BANK0 ] PTR void 
  9759 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  9760 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  9761 ;; Auto vars:     Size  Location     Type
  9762 ;;		None
  9763 ;; Return value:  Size  Location     Type
  9764 ;;                  1    wreg      void 
  9765 ;; Registers used:
  9766 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9767 ;; Tracked objects:
  9768 ;;		On entry : 0/0
  9769 ;;		On exit  : 0/0
  9770 ;;		Unchanged: 0/0
  9771 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9772 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9773 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9774 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9775 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9776 ;;Total ram usage:        4 bytes
  9777 ;; Hardware stack levels used:    1
  9778 ;; Hardware stack levels required when called:    7
  9779 ;; This function calls:
  9780 ;;		_setCallBack
  9781 ;; This function is called by:
  9782 ;;		_wr1RegCompleteHandler
  9783 ;;		_rd1RegCompleteHandler
  9784 ;;		_rd2RegCompleteHandler
  9785 ;;		_wr2RegCompleteHandler
  9786 ;;		_rdBlkRegCompleteHandler
  9787 ;;		_i2c_write1ByteRegister
  9788 ;;		_i2c_read1ByteRegister
  9789 ;;		_i2c_read2ByteRegister
  9790 ;;		_i2c_write2ByteRegister
  9791 ;;		_i2c_readDataBlock
  9792 ;; This function uses a non-reentrant model
  9793 ;;
  9794                           
  9795                           
  9796                           ;psect for function _i2c_setDataCompleteCallback
  9797  0AFD                     _i2c_setDataCompleteCallback:	
  9798                           
  9799                           ;i2c_master.c: 91: setCallBack(i2c_dataComplete,cb,p);
  9800                           
  9801                           ;incstack = 0
  9802                           ; Regs used in _i2c_setDataCompleteCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  9803  0AFD  0020               	movlb	0	; select bank0
  9804  0AFE  0828               	movf	i2c_setDataCompleteCallback@cb+1,w
  9805  0AFF  00A3               	movwf	setCallBack@cb+1
  9806  0B00  0827               	movf	i2c_setDataCompleteCallback@cb,w
  9807  0B01  00A2               	movwf	setCallBack@cb
  9808  0B02  0829               	movf	i2c_setDataCompleteCallback@p,w
  9809  0B03  00AA               	movwf	??_i2c_setDataCompleteCallback
  9810  0B04  082A               	movf	??_i2c_setDataCompleteCallback,w
  9811  0B05  00A4               	movwf	setCallBack@p
  9812  0B06  3000               	movlw	0
  9813  0B07  318D  254D         	fcall	_setCallBack
  9814  0B09  0008               	return
  9815  0B0A                     __end_of_i2c_setDataCompleteCallback:	
  9816                           
  9817                           	psect	text55
  9818  0D4D                     __ptext55:	
  9819 ;; *************** function _setCallBack *****************
  9820 ;; Defined at:
  9821 ;;		line 453 in file "mcc_generated_files/drivers/i2c_master.c"
  9822 ;; Parameters:    Size  Location     Type
  9823 ;;  idx             1    wreg     enum E12355
  9824 ;;  cb              2    2[BANK0 ] PTR FTN(PTR void ,)enum 
  9825 ;;		 -> rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), rd2RegCompleteHandler(1), rd1RegCompleteHandler(1), 
  9826 ;;		 -> i2c_restartWrite(1), wr1RegCompleteHandler(1), Absolute function(1), 
  9827 ;;  p               1    4[BANK0 ] PTR void 
  9828 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  9829 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  9830 ;; Auto vars:     Size  Location     Type
  9831 ;;  idx             1    6[BANK0 ] enum E12355
  9832 ;; Return value:  Size  Location     Type
  9833 ;;                  1    wreg      void 
  9834 ;; Registers used:
  9835 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9836 ;; Tracked objects:
  9837 ;;		On entry : 0/0
  9838 ;;		On exit  : 0/0
  9839 ;;		Unchanged: 0/0
  9840 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9841 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9842 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9843 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9844 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9845 ;;Total ram usage:        5 bytes
  9846 ;; Hardware stack levels used:    1
  9847 ;; Hardware stack levels required when called:    6
  9848 ;; This function calls:
  9849 ;;		Nothing
  9850 ;; This function is called by:
  9851 ;;		_i2c_setDataCompleteCallback
  9852 ;;		_i2c_setAddressNACKCallback
  9853 ;;		_i2c_setWriteCollisionCallback
  9854 ;;		_i2c_setDataNACKCallback
  9855 ;;		_i2c_setTimeOutCallback
  9856 ;; This function uses a non-reentrant model
  9857 ;;
  9858                           
  9859                           
  9860                           ;psect for function _setCallBack
  9861  0D4D                     _setCallBack:	
  9862                           
  9863                           ;incstack = 0
  9864                           ; Regs used in _setCallBack: [wreg+fsr1l+fsr1h+status,2+status,0]
  9865                           ;setCallBack@idx stored from wreg
  9866  0D4D  0020               	movlb	0	; select bank0
  9867  0D4E  00A6               	movwf	setCallBack@idx
  9868                           
  9869                           ;i2c_master.c: 455: if(cb)
  9870  0D4F  0822               	movf	setCallBack@cb,w
  9871  0D50  0423               	iorwf	setCallBack@cb+1,w
  9872  0D51  1903               	btfsc	3,2
  9873  0D52  2D64               	goto	l4060
  9874                           
  9875                           ;i2c_master.c: 456: {
  9876                           ;i2c_master.c: 457: i2c_status.callbackTable[idx] = cb;
  9877  0D53  3526               	lslf	setCallBack@idx,w
  9878  0D54  3EAC               	addlw	(low ((_i2c_status| 0+12)))& (0+255)
  9879  0D55  0086               	movwf	6
  9880  0D56  0187               	clrf	7
  9881  0D57  0822               	movf	setCallBack@cb,w
  9882  0D58  3FC0               	movwi [0]fsr1
  9883  0D59  0823               	movf	setCallBack@cb+1,w
  9884  0D5A  3FC1               	movwi [1]fsr1
  9885                           
  9886                           ;i2c_master.c: 458: i2c_status.callbackPayload[idx] = p;
  9887  0D5B  0824               	movf	setCallBack@p,w
  9888  0D5C  00A5               	movwf	??_setCallBack
  9889  0D5D  0826               	movf	setCallBack@idx,w
  9890  0D5E  3EB8               	addlw	(low ((_i2c_status| 0+24)))& (0+255)
  9891  0D5F  0086               	movwf	6
  9892  0D60  0187               	clrf	7
  9893  0D61  0825               	movf	??_setCallBack,w
  9894  0D62  0081               	movwf	1
  9895                           
  9896                           ;i2c_master.c: 459: }
  9897  0D63  0008               	return
  9898  0D64                     l4060:	
  9899                           
  9900                           ;i2c_master.c: 460: else
  9901                           ;i2c_master.c: 461: {
  9902                           ;i2c_master.c: 462: i2c_status.callbackTable[idx] = returnStop;
  9903  0D64  3526               	lslf	setCallBack@idx,w
  9904  0D65  3EAC               	addlw	(low ((_i2c_status| 0+12)))& (0+255)
  9905  0D66  0086               	movwf	6
  9906  0D67  0187               	clrf	7
  9907  0D68  30DD               	movlw	low _returnStop
  9908  0D69  3FC0               	movwi [0]fsr1
  9909  0D6A  3009               	movlw	high _returnStop
  9910  0D6B  3FC1               	movwi [1]fsr1
  9911                           
  9912                           ;i2c_master.c: 463: i2c_status.callbackPayload[idx] = (0);
  9913  0D6C  0826               	movf	setCallBack@idx,w
  9914  0D6D  3EB8               	addlw	(low ((_i2c_status| 0+24)))& (0+255)
  9915  0D6E  0086               	movwf	6
  9916  0D6F  0187               	clrf	7
  9917  0D70  0181               	clrf	1
  9918  0D71  0008               	return
  9919  0D72                     __end_of_setCallBack:	
  9920                           
  9921                           	psect	text56
  9922  0B8B                     __ptext56:	
  9923 ;; *************** function _i2c_setBuffer *****************
  9924 ;; Defined at:
  9925 ;;		line 184 in file "mcc_generated_files/drivers/i2c_master.c"
  9926 ;; Parameters:    Size  Location     Type
  9927 ;;  buffer          2    2[BANK0 ] PTR void 
  9928 ;;		 -> i2c_readDataBlock@reg(1), i2c_readDataBlock@d(3), i2c_write2ByteRegister@reg(1), i2c_write2ByteRegister@data(2),
      + 
  9929 ;;		 -> i2c_read2ByteRegister@reg(1), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@reg(1), i2c_read1ByteRegist
      +er@d2(1), 
  9930 ;;		 -> i2c_write1ByteRegister@reg(1), i2c_write1ByteRegister@data(1), NULL(0), writebuffer(17), 
  9931 ;;  bufferSize      2    4[BANK0 ] unsigned int 
  9932 ;; Auto vars:     Size  Location     Type
  9933 ;;		None
  9934 ;; Return value:  Size  Location     Type
  9935 ;;                  1    wreg      void 
  9936 ;; Registers used:
  9937 ;;		wreg
  9938 ;; Tracked objects:
  9939 ;;		On entry : 0/0
  9940 ;;		On exit  : 0/0
  9941 ;;		Unchanged: 0/0
  9942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9943 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9944 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9945 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9946 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9947 ;;Total ram usage:        4 bytes
  9948 ;; Hardware stack levels used:    1
  9949 ;; Hardware stack levels required when called:    6
  9950 ;; This function calls:
  9951 ;;		Nothing
  9952 ;; This function is called by:
  9953 ;;		_wr1RegCompleteHandler
  9954 ;;		_i2c_writeNBytes
  9955 ;;		_rd1RegCompleteHandler
  9956 ;;		_rd2RegCompleteHandler
  9957 ;;		_wr2RegCompleteHandler
  9958 ;;		_rdBlkRegCompleteHandler
  9959 ;;		_i2c_write1ByteRegister
  9960 ;;		_i2c_read1ByteRegister
  9961 ;;		_i2c_read2ByteRegister
  9962 ;;		_i2c_write2ByteRegister
  9963 ;;		_i2c_readDataBlock
  9964 ;;		_i2c_readNBytes
  9965 ;; This function uses a non-reentrant model
  9966 ;;
  9967                           
  9968                           
  9969                           ;psect for function _i2c_setBuffer
  9970  0B8B                     _i2c_setBuffer:	
  9971                           
  9972                           ;i2c_master.c: 186: if(i2c_status.bufferFree)
  9973                           
  9974                           ;incstack = 0
  9975                           ; Regs used in _i2c_setBuffer: [wreg]
  9976  0B8B  0021               	movlb	1	; select bank1
  9977  0B8C  1D20               	btfss	_i2c_status^(0+128),2
  9978  0B8D  0008               	return
  9979                           
  9980                           ;i2c_master.c: 187: {
  9981                           ;i2c_master.c: 188: i2c_status.data_ptr = buffer;
  9982  0B8E  0020               	movlb	0	; select bank0
  9983  0B8F  0823               	movf	i2c_setBuffer@buffer+1,w
  9984  0B90  0021               	movlb	1	; select bank1
  9985  0B91  00A3               	movwf	((low ((_i2c_status| 0+2))+1))^(0+128)
  9986  0B92  0020               	movlb	0	; select bank0
  9987  0B93  0822               	movf	i2c_setBuffer@buffer,w
  9988  0B94  0021               	movlb	1	; select bank1
  9989  0B95  00A2               	movwf	(low ((_i2c_status| 0+2)))^(0+128)
  9990                           
  9991                           ;i2c_master.c: 189: i2c_status.data_length = bufferSize;
  9992  0B96  0020               	movlb	0	; select bank0
  9993  0B97  0825               	movf	i2c_setBuffer@bufferSize+1,w
  9994  0B98  0021               	movlb	1	; select bank1
  9995  0B99  00A5               	movwf	((_i2c_status+1)^(0+128)+4)
  9996  0B9A  0020               	movlb	0	; select bank0
  9997  0B9B  0824               	movf	i2c_setBuffer@bufferSize,w
  9998  0B9C  0021               	movlb	1	; select bank1
  9999  0B9D  00A4               	movwf	(_i2c_status^(0+128)+4)
 10000                           
 10001                           ;i2c_master.c: 190: i2c_status.bufferFree = 0;
 10002  0B9E  1120               	bcf	_i2c_status^(0+128),2
 10003  0B9F  0008               	return
 10004  0BA0                     __end_of_i2c_setBuffer:	
 10005                           
 10006                           	psect	text57
 10007  0974                     __ptext57:	
 10008 ;; *************** function _i2c_driver_stop *****************
 10009 ;; Defined at:
 10010 ;;		line 156 in file "mcc_generated_files/i2c_driver.c"
 10011 ;; Parameters:    Size  Location     Type
 10012 ;;		None
 10013 ;; Auto vars:     Size  Location     Type
 10014 ;;		None
 10015 ;; Return value:  Size  Location     Type
 10016 ;;                  1    wreg      void 
 10017 ;; Registers used:
 10018 ;;		None
 10019 ;; Tracked objects:
 10020 ;;		On entry : 0/0
 10021 ;;		On exit  : 0/0
 10022 ;;		Unchanged: 0/0
 10023 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10024 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10025 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10026 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10027 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10028 ;;Total ram usage:        0 bytes
 10029 ;; Hardware stack levels used:    1
 10030 ;; Hardware stack levels required when called:    6
 10031 ;; This function calls:
 10032 ;;		Nothing
 10033 ;; This function is called by:
 10034 ;;		_do_I2C_SEND_STOP
 10035 ;; This function uses a non-reentrant model
 10036 ;;
 10037                           
 10038                           
 10039                           ;psect for function _i2c_driver_stop
 10040  0974                     _i2c_driver_stop:	
 10041                           
 10042                           ;i2c_driver.c: 158: SSP1CON2bits.PEN = 1;
 10043                           
 10044                           ;incstack = 0
 10045                           ; Regs used in _i2c_driver_stop: []
 10046  0974  0024               	movlb	4	; select bank4
 10047  0975  1516               	bsf	22,2	;volatile
 10048  0976  0008               	return
 10049  0977                     __end_of_i2c_driver_stop:	
 10050                           
 10051                           	psect	text58
 10052  0971                     __ptext58:	
 10053 ;; *************** function _i2c_driver_restart *****************
 10054 ;; Defined at:
 10055 ;;		line 151 in file "mcc_generated_files/i2c_driver.c"
 10056 ;; Parameters:    Size  Location     Type
 10057 ;;		None
 10058 ;; Auto vars:     Size  Location     Type
 10059 ;;		None
 10060 ;; Return value:  Size  Location     Type
 10061 ;;                  1    wreg      void 
 10062 ;; Registers used:
 10063 ;;		None
 10064 ;; Tracked objects:
 10065 ;;		On entry : 0/0
 10066 ;;		On exit  : 0/0
 10067 ;;		Unchanged: 0/0
 10068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10069 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10070 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10071 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10072 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10073 ;;Total ram usage:        0 bytes
 10074 ;; Hardware stack levels used:    1
 10075 ;; Hardware stack levels required when called:    6
 10076 ;; This function calls:
 10077 ;;		Nothing
 10078 ;; This function is called by:
 10079 ;;		_do_I2C_SEND_RESTART_READ
 10080 ;;		_do_I2C_SEND_RESTART_WRITE
 10081 ;;		_do_I2C_SEND_RESTART
 10082 ;; This function uses a non-reentrant model
 10083 ;;
 10084                           
 10085                           
 10086                           ;psect for function _i2c_driver_restart
 10087  0971                     _i2c_driver_restart:	
 10088                           
 10089                           ;i2c_driver.c: 153: SSP1CON2bits.RSEN = 1;
 10090                           
 10091                           ;incstack = 0
 10092                           ; Regs used in _i2c_driver_restart: []
 10093  0971  0024               	movlb	4	; select bank4
 10094  0972  1496               	bsf	22,1	;volatile
 10095  0973  0008               	return
 10096  0974                     __end_of_i2c_driver_restart:	
 10097                           
 10098                           	psect	text59
 10099  09A4                     __ptext59:	
 10100 ;; *************** function _i2c_driver_sendACK *****************
 10101 ;; Defined at:
 10102 ;;		line 196 in file "mcc_generated_files/i2c_driver.c"
 10103 ;; Parameters:    Size  Location     Type
 10104 ;;		None
 10105 ;; Auto vars:     Size  Location     Type
 10106 ;;		None
 10107 ;; Return value:  Size  Location     Type
 10108 ;;                  1    wreg      void 
 10109 ;; Registers used:
 10110 ;;		None
 10111 ;; Tracked objects:
 10112 ;;		On entry : 0/0
 10113 ;;		On exit  : 0/0
 10114 ;;		Unchanged: 0/0
 10115 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10116 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10117 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10118 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10119 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10120 ;;Total ram usage:        0 bytes
 10121 ;; Hardware stack levels used:    1
 10122 ;; Hardware stack levels required when called:    6
 10123 ;; This function calls:
 10124 ;;		Nothing
 10125 ;; This function is called by:
 10126 ;;		_do_I2C_DO_ACK
 10127 ;;		_do_I2C_RX
 10128 ;; This function uses a non-reentrant model
 10129 ;;
 10130                           
 10131                           
 10132                           ;psect for function _i2c_driver_sendACK
 10133  09A4                     _i2c_driver_sendACK:	
 10134                           
 10135                           ;i2c_driver.c: 198: SSP1CON2bits.ACKDT = 0;
 10136                           
 10137                           ;incstack = 0
 10138                           ; Regs used in _i2c_driver_sendACK: []
 10139  09A4  0024               	movlb	4	; select bank4
 10140  09A5  1296               	bcf	22,5	;volatile
 10141                           
 10142                           ;i2c_driver.c: 199: SSP1CON2bits.ACKEN = 1;
 10143  09A6  1616               	bsf	22,4	;volatile
 10144  09A7  0008               	return
 10145  09A8                     __end_of_i2c_driver_sendACK:	
 10146                           
 10147                           	psect	text60
 10148  096E                     __ptext60:	
 10149 ;; *************** function _i2c_driver_start *****************
 10150 ;; Defined at:
 10151 ;;		line 146 in file "mcc_generated_files/i2c_driver.c"
 10152 ;; Parameters:    Size  Location     Type
 10153 ;;		None
 10154 ;; Auto vars:     Size  Location     Type
 10155 ;;		None
 10156 ;; Return value:  Size  Location     Type
 10157 ;;                  1    wreg      void 
 10158 ;; Registers used:
 10159 ;;		None
 10160 ;; Tracked objects:
 10161 ;;		On entry : 0/0
 10162 ;;		On exit  : 0/0
 10163 ;;		Unchanged: 0/0
 10164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10165 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10166 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10167 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10168 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10169 ;;Total ram usage:        0 bytes
 10170 ;; Hardware stack levels used:    1
 10171 ;; Hardware stack levels required when called:    6
 10172 ;; This function calls:
 10173 ;;		Nothing
 10174 ;; This function is called by:
 10175 ;;		_i2c_masterOperation
 10176 ;; This function uses a non-reentrant model
 10177 ;;
 10178                           
 10179                           
 10180                           ;psect for function _i2c_driver_start
 10181  096E                     _i2c_driver_start:	
 10182                           
 10183                           ;i2c_driver.c: 148: SSP1CON2bits.SEN = 1;
 10184                           
 10185                           ;incstack = 0
 10186                           ; Regs used in _i2c_driver_start: []
 10187  096E  0024               	movlb	4	; select bank4
 10188  096F  1416               	bsf	22,0	;volatile
 10189  0970  0008               	return
 10190  0971                     __end_of_i2c_driver_start:	
 10191                           
 10192                           	psect	text61
 10193  0BBA                     __ptext61:	
 10194 ;; *************** function _i2c_close *****************
 10195 ;; Defined at:
 10196 ;;		line 162 in file "mcc_generated_files/drivers/i2c_master.c"
 10197 ;; Parameters:    Size  Location     Type
 10198 ;;		None
 10199 ;; Auto vars:     Size  Location     Type
 10200 ;;  ret             1    3[BANK0 ] enum E12166
 10201 ;; Return value:  Size  Location     Type
 10202 ;;                  1    wreg      enum E92
 10203 ;; Registers used:
 10204 ;;		wreg, status,2, status,0, pclath, cstack
 10205 ;; Tracked objects:
 10206 ;;		On entry : 0/0
 10207 ;;		On exit  : 0/0
 10208 ;;		Unchanged: 0/0
 10209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10210 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10211 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10212 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10213 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10214 ;;Total ram usage:        2 bytes
 10215 ;; Hardware stack levels used:    1
 10216 ;; Hardware stack levels required when called:    7
 10217 ;; This function calls:
 10218 ;;		_mssp_clearIRQ
 10219 ;;		_mssp_disableIRQ
 10220 ;; This function is called by:
 10221 ;;		_i2c_writeNBytes
 10222 ;;		_i2c_write1ByteRegister
 10223 ;;		_i2c_read1ByteRegister
 10224 ;;		_i2c_read2ByteRegister
 10225 ;;		_i2c_write2ByteRegister
 10226 ;;		_i2c_readDataBlock
 10227 ;;		_i2c_readNBytes
 10228 ;; This function uses a non-reentrant model
 10229 ;;
 10230                           
 10231                           
 10232                           ;psect for function _i2c_close
 10233  0BBA                     _i2c_close:	
 10234                           
 10235                           ;i2c_master.c: 164: i2c_error_t ret = I2C_BUSY;
 10236                           
 10237                           ;incstack = 0
 10238                           ; Regs used in _i2c_close: [wreg+status,2+status,0+pclath+cstack]
 10239  0BBA  0020               	movlb	0	; select bank0
 10240  0BBB  01A3               	clrf	i2c_close@ret
 10241  0BBC  0AA3               	incf	i2c_close@ret,f
 10242                           
 10243                           ;i2c_master.c: 165: if(!i2c_status.busy)
 10244  0BBD  0021               	movlb	1	; select bank1
 10245  0BBE  1820               	btfsc	_i2c_status^(0+128),0
 10246  0BBF  2BD2               	goto	l649
 10247                           
 10248                           ;i2c_master.c: 166: {
 10249                           ;i2c_master.c: 167: i2c_status.inUse = 0;
 10250  0BC0  10A0               	bcf	_i2c_status^(0+128),1
 10251                           
 10252                           ;i2c_master.c: 169: i2c_status.address = 0xff;
 10253  0BC1  30FF               	movlw	255
 10254  0BC2  0020               	movlb	0	; select bank0
 10255  0BC3  00A2               	movwf	??_i2c_close
 10256  0BC4  0822               	movf	??_i2c_close,w
 10257  0BC5  0021               	movlb	1	; select bank1
 10258  0BC6  00A1               	movwf	(_i2c_status^(0+128)+1)
 10259                           
 10260                           ;i2c_master.c: 170: mssp_clearIRQ();
 10261  0BC7  3189  2168  318B   	fcall	_mssp_clearIRQ
 10262                           
 10263                           ;i2c_master.c: 171: mssp_disableIRQ();
 10264  0BCA  3189  216B         	fcall	_mssp_disableIRQ
 10265                           
 10266                           ;i2c_master.c: 172: ret = i2c_status.error;
 10267  0BCC  0021               	movlb	1	; select bank1
 10268  0BCD  082B               	movf	(_i2c_status^(0+128)+11),w
 10269  0BCE  0020               	movlb	0	; select bank0
 10270  0BCF  00A2               	movwf	??_i2c_close
 10271  0BD0  0822               	movf	??_i2c_close,w
 10272  0BD1  00A3               	movwf	i2c_close@ret
 10273  0BD2                     l649:	
 10274                           
 10275                           ;i2c_master.c: 173: }
 10276                           ;i2c_master.c: 174: return ret;
 10277  0BD2  0020               	movlb	0	; select bank0
 10278  0BD3  0823               	movf	i2c_close@ret,w
 10279  0BD4  0008               	return
 10280  0BD5                     __end_of_i2c_close:	
 10281                           
 10282                           	psect	text62
 10283  096B                     __ptext62:	
 10284 ;; *************** function _mssp_disableIRQ *****************
 10285 ;; Defined at:
 10286 ;;		line 48 in file "mcc_generated_files/i2c_driver.c"
 10287 ;; Parameters:    Size  Location     Type
 10288 ;;		None
 10289 ;; Auto vars:     Size  Location     Type
 10290 ;;		None
 10291 ;; Return value:  Size  Location     Type
 10292 ;;                  1    wreg      void 
 10293 ;; Registers used:
 10294 ;;		None
 10295 ;; Tracked objects:
 10296 ;;		On entry : 0/0
 10297 ;;		On exit  : 0/0
 10298 ;;		Unchanged: 0/0
 10299 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10300 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10301 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10302 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10303 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10304 ;;Total ram usage:        0 bytes
 10305 ;; Hardware stack levels used:    1
 10306 ;; Hardware stack levels required when called:    6
 10307 ;; This function calls:
 10308 ;;		Nothing
 10309 ;; This function is called by:
 10310 ;;		_i2c_close
 10311 ;;		_i2c_setTimeOut
 10312 ;; This function uses a non-reentrant model
 10313 ;;
 10314                           
 10315                           
 10316                           ;psect for function _mssp_disableIRQ
 10317  096B                     _mssp_disableIRQ:	
 10318                           
 10319                           ;i2c_driver.c: 50: PIE1bits.SSP1IE = 0;
 10320                           
 10321                           ;incstack = 0
 10322                           ; Regs used in _mssp_disableIRQ: []
 10323  096B  0021               	movlb	1	; select bank1
 10324  096C  1190               	bcf	16,3	;volatile
 10325  096D  0008               	return
 10326  096E                     __end_of_mssp_disableIRQ:	
 10327                           
 10328                           	psect	text63
 10329  0968                     __ptext63:	
 10330 ;; *************** function _mssp_clearIRQ *****************
 10331 ;; Defined at:
 10332 ;;		line 53 in file "mcc_generated_files/i2c_driver.c"
 10333 ;; Parameters:    Size  Location     Type
 10334 ;;		None
 10335 ;; Auto vars:     Size  Location     Type
 10336 ;;		None
 10337 ;; Return value:  Size  Location     Type
 10338 ;;                  1    wreg      void 
 10339 ;; Registers used:
 10340 ;;		None
 10341 ;; Tracked objects:
 10342 ;;		On entry : 0/0
 10343 ;;		On exit  : 0/0
 10344 ;;		Unchanged: 0/0
 10345 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10346 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10347 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10348 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10349 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10350 ;;Total ram usage:        0 bytes
 10351 ;; Hardware stack levels used:    1
 10352 ;; Hardware stack levels required when called:    6
 10353 ;; This function calls:
 10354 ;;		Nothing
 10355 ;; This function is called by:
 10356 ;;		_i2c_open
 10357 ;;		_i2c_close
 10358 ;;		_i2c_ISR
 10359 ;; This function uses a non-reentrant model
 10360 ;;
 10361                           
 10362                           
 10363                           ;psect for function _mssp_clearIRQ
 10364  0968                     _mssp_clearIRQ:	
 10365                           
 10366                           ;i2c_driver.c: 55: PIR1bits.SSP1IF = 0;
 10367                           
 10368                           ;incstack = 0
 10369                           ; Regs used in _mssp_clearIRQ: []
 10370  0968  0020               	movlb	0	; select bank0
 10371  0969  1190               	bcf	16,3	;volatile
 10372  096A  0008               	return
 10373  096B                     __end_of_mssp_clearIRQ:	
 10374                           
 10375                           	psect	text64
 10376  0650                     __ptext64:	
 10377 ;; *************** function ___awdiv *****************
 10378 ;; Defined at:
 10379 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
 10380 ;; Parameters:    Size  Location     Type
 10381 ;;  divisor         2    2[BANK0 ] int 
 10382 ;;  dividend        2    4[BANK0 ] int 
 10383 ;; Auto vars:     Size  Location     Type
 10384 ;;  quotient        2    9[BANK0 ] int 
 10385 ;;  sign            1    8[BANK0 ] unsigned char 
 10386 ;;  counter         1    7[BANK0 ] unsigned char 
 10387 ;; Return value:  Size  Location     Type
 10388 ;;                  2    2[BANK0 ] int 
 10389 ;; Registers used:
 10390 ;;		wreg, status,2, status,0
 10391 ;; Tracked objects:
 10392 ;;		On entry : 0/0
 10393 ;;		On exit  : 0/0
 10394 ;;		Unchanged: 0/0
 10395 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10396 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10397 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10398 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10399 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10400 ;;Total ram usage:        9 bytes
 10401 ;; Hardware stack levels used:    1
 10402 ;; Hardware stack levels required when called:    6
 10403 ;; This function calls:
 10404 ;;		Nothing
 10405 ;; This function is called by:
 10406 ;;		_writeDisplay
 10407 ;;		_writeWord
 10408 ;; This function uses a non-reentrant model
 10409 ;;
 10410                           
 10411                           
 10412                           ;psect for function ___awdiv
 10413  0650                     ___awdiv:	
 10414                           
 10415                           ;incstack = 0
 10416                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 10417  0650  0020               	movlb	0	; select bank0
 10418  0651  01A8               	clrf	___awdiv@sign
 10419  0652  1FA3               	btfss	___awdiv@divisor+1,7
 10420  0653  2E5B               	goto	l4468
 10421  0654  09A2               	comf	___awdiv@divisor,f
 10422  0655  09A3               	comf	___awdiv@divisor+1,f
 10423  0656  0AA2               	incf	___awdiv@divisor,f
 10424  0657  1903               	skipnz
 10425  0658  0AA3               	incf	___awdiv@divisor+1,f
 10426  0659  01A8               	clrf	___awdiv@sign
 10427  065A  0AA8               	incf	___awdiv@sign,f
 10428  065B                     l4468:	
 10429  065B  1FA5               	btfss	___awdiv@dividend+1,7
 10430  065C  2E66               	goto	l4474
 10431  065D  09A4               	comf	___awdiv@dividend,f
 10432  065E  09A5               	comf	___awdiv@dividend+1,f
 10433  065F  0AA4               	incf	___awdiv@dividend,f
 10434  0660  1903               	skipnz
 10435  0661  0AA5               	incf	___awdiv@dividend+1,f
 10436  0662  3001               	movlw	1
 10437  0663  00A6               	movwf	??___awdiv
 10438  0664  0826               	movf	??___awdiv,w
 10439  0665  06A8               	xorwf	___awdiv@sign,f
 10440  0666                     l4474:	
 10441  0666  01A9               	clrf	___awdiv@quotient
 10442  0667  01AA               	clrf	___awdiv@quotient+1
 10443  0668  0822               	movf	___awdiv@divisor,w
 10444  0669  0423               	iorwf	___awdiv@divisor+1,w
 10445  066A  1903               	btfsc	3,2
 10446  066B  2E95               	goto	l4496
 10447  066C  01A7               	clrf	___awdiv@counter
 10448  066D  0AA7               	incf	___awdiv@counter,f
 10449  066E                     l4484:	
 10450  066E  1BA3               	btfsc	___awdiv@divisor+1,7
 10451  066F  2E7A               	goto	l4486
 10452  0670  3001               	movlw	1
 10453  0671                     u3245:	
 10454  0671  35A2               	lslf	___awdiv@divisor,f
 10455  0672  0DA3               	rlf	___awdiv@divisor+1,f
 10456  0673  0B89               	decfsz	9,f
 10457  0674  2E71               	goto	u3245
 10458  0675  3001               	movlw	1
 10459  0676  00A6               	movwf	??___awdiv
 10460  0677  0826               	movf	??___awdiv,w
 10461  0678  07A7               	addwf	___awdiv@counter,f
 10462  0679  2E6E               	goto	l4484
 10463  067A                     l4486:	
 10464  067A  3001               	movlw	1
 10465  067B                     u3265:	
 10466  067B  35A9               	lslf	___awdiv@quotient,f
 10467  067C  0DAA               	rlf	___awdiv@quotient+1,f
 10468  067D  0B89               	decfsz	9,f
 10469  067E  2E7B               	goto	u3265
 10470  067F  0823               	movf	___awdiv@divisor+1,w
 10471  0680  0225               	subwf	___awdiv@dividend+1,w
 10472  0681  1D03               	skipz
 10473  0682  2E85               	goto	u3275
 10474  0683  0822               	movf	___awdiv@divisor,w
 10475  0684  0224               	subwf	___awdiv@dividend,w
 10476  0685                     u3275:	
 10477  0685  1C03               	skipc
 10478  0686  2E8C               	goto	l4492
 10479  0687  0822               	movf	___awdiv@divisor,w
 10480  0688  02A4               	subwf	___awdiv@dividend,f
 10481  0689  0823               	movf	___awdiv@divisor+1,w
 10482  068A  3BA5               	subwfb	___awdiv@dividend+1,f
 10483  068B  1429               	bsf	___awdiv@quotient,0
 10484  068C                     l4492:	
 10485  068C  3001               	movlw	1
 10486  068D                     u3285:	
 10487  068D  36A3               	lsrf	___awdiv@divisor+1,f
 10488  068E  0CA2               	rrf	___awdiv@divisor,f
 10489  068F  0B89               	decfsz	9,f
 10490  0690  2E8D               	goto	u3285
 10491  0691  3001               	movlw	1
 10492  0692  02A7               	subwf	___awdiv@counter,f
 10493  0693  1D03               	btfss	3,2
 10494  0694  2E7A               	goto	l4486
 10495  0695                     l4496:	
 10496  0695  0828               	movf	___awdiv@sign,w
 10497  0696  1903               	btfsc	3,2
 10498  0697  2E9D               	goto	l4500
 10499  0698  09A9               	comf	___awdiv@quotient,f
 10500  0699  09AA               	comf	___awdiv@quotient+1,f
 10501  069A  0AA9               	incf	___awdiv@quotient,f
 10502  069B  1903               	skipnz
 10503  069C  0AAA               	incf	___awdiv@quotient+1,f
 10504  069D                     l4500:	
 10505  069D  082A               	movf	___awdiv@quotient+1,w
 10506  069E  00A3               	movwf	?___awdiv+1
 10507  069F  0829               	movf	___awdiv@quotient,w
 10508  06A0  00A2               	movwf	?___awdiv
 10509  06A1  0008               	return
 10510  06A2                     __end_of___awdiv:	
 10511                           
 10512                           	psect	text65
 10513  05FC                     __ptext65:	
 10514 ;; *************** function _drawWalls *****************
 10515 ;; Defined at:
 10516 ;;		line 357 in file "main.c"
 10517 ;; Parameters:    Size  Location     Type
 10518 ;;		None
 10519 ;; Auto vars:     Size  Location     Type
 10520 ;;		None
 10521 ;; Return value:  Size  Location     Type
 10522 ;;                  1    wreg      void 
 10523 ;; Registers used:
 10524 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10525 ;; Tracked objects:
 10526 ;;		On entry : 0/0
 10527 ;;		On exit  : 0/0
 10528 ;;		Unchanged: 0/0
 10529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10530 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10531 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10532 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10533 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10534 ;;Total ram usage:        3 bytes
 10535 ;; Hardware stack levels used:    1
 10536 ;; Hardware stack levels required when called:    7
 10537 ;; This function calls:
 10538 ;;		_reverse
 10539 ;; This function is called by:
 10540 ;;		_writeWord
 10541 ;;		_main
 10542 ;; This function uses a non-reentrant model
 10543 ;;
 10544                           
 10545                           
 10546                           ;psect for function _drawWalls
 10547  05FC                     _drawWalls:	
 10548                           
 10549                           ;main.c: 358: for (i = 0; i < 8; i++) {
 10550                           
 10551                           ;incstack = 0
 10552                           ; Regs used in _drawWalls: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10553  05FC  0020               	movlb	0	; select bank0
 10554  05FD  01E1               	clrf	_i
 10555  05FE                     L6:	
 10556  05FE  3008               	movlw	8
 10557  05FF  0261               	subwf	_i,w
 10558  0600  1803               	btfsc	3,0
 10559  0601  0008               	return
 10560                           
 10561                           ;main.c: 359: if (wallColor == 1) {
 10562  0602  0021               	movlb	1	; select bank1
 10563  0603  0343               	decf	_wallColor^(0+128),w
 10564  0604  1D03               	btfss	3,2
 10565  0605  2E14               	goto	l4542
 10566                           
 10567                           ;main.c: 360: pixelbuffer[i] |= reverse(walls[i]);
 10568  0606  0020               	movlb	0	; select bank0
 10569  0607  0861               	movf	_i,w
 10570  0608  3E30               	addlw	(low (_walls| (0+256)))& (0+255)
 10571  0609  0086               	movwf	6
 10572  060A  3001               	movlw	1	; select bank2/3
 10573  060B  0087               	movwf	7
 10574  060C  0801               	movf	1,w
 10575  060D  318F  2708  3185   	fcall	_reverse
 10576  0610  0020               	movlb	0	; select bank0
 10577  0611  00A6               	movwf	??_drawWalls
 10578  0612  01A7               	clrf	??_drawWalls+1
 10579  0613  2E41               	goto	L5
 10580  0614                     l4542:	
 10581                           ;main.c: 361: } else if (wallColor == 2) {
 10582                           
 10583  0614  3002               	movlw	2
 10584  0615  0021               	movlb	1	; select bank1
 10585  0616  0643               	xorwf	_wallColor^(0+128),w
 10586  0617  1D03               	btfss	3,2
 10587  0618  2E2A               	goto	l4546
 10588                           
 10589                           ;main.c: 362: pixelbuffer[i] |= reverse(walls[i]) << 8;
 10590  0619  0020               	movlb	0	; select bank0
 10591  061A  0861               	movf	_i,w
 10592  061B  3E30               	addlw	(low (_walls| (0+256)))& (0+255)
 10593  061C  0086               	movwf	6
 10594  061D  3001               	movlw	1	; select bank2/3
 10595  061E  0087               	movwf	7
 10596  061F  0801               	movf	1,w
 10597  0620  318F  2708  3185   	fcall	_reverse
 10598  0623  0020               	movlb	0	; select bank0
 10599  0624  00A6               	movwf	??_drawWalls
 10600  0625  01A7               	clrf	??_drawWalls+1
 10601  0626  0826               	movf	??_drawWalls,w
 10602  0627  00A7               	movwf	??_drawWalls+1
 10603  0628  01A6               	clrf	??_drawWalls
 10604  0629  2E41               	goto	L5
 10605  062A                     l4546:	
 10606                           ;main.c: 363: } else {
 10607                           
 10608                           
 10609                           ;main.c: 364: pixelbuffer[i] |= reverse(walls[i]) << 8 | reverse(walls[i]);
 10610  062A  0020               	movlb	0	; select bank0
 10611  062B  0861               	movf	_i,w
 10612  062C  3E30               	addlw	(low (_walls| (0+256)))& (0+255)
 10613  062D  0086               	movwf	6
 10614  062E  3001               	movlw	1	; select bank2/3
 10615  062F  0087               	movwf	7
 10616  0630  0801               	movf	1,w
 10617  0631  318F  2708  3185   	fcall	_reverse
 10618  0634  0020               	movlb	0	; select bank0
 10619  0635  00A6               	movwf	??_drawWalls
 10620  0636  0861               	movf	_i,w
 10621  0637  3E30               	addlw	(low (_walls| (0+256)))& (0+255)
 10622  0638  0086               	movwf	6
 10623  0639  3001               	movlw	1	; select bank2/3
 10624  063A  0087               	movwf	7
 10625  063B  0801               	movf	1,w
 10626  063C  318F  2708  3185   	fcall	_reverse
 10627  063F  0020               	movlb	0	; select bank0
 10628  0640  00A7               	movwf	??_drawWalls+1
 10629  0641                     L5:	
 10630  0641  3561               	lslf	_i,w
 10631  0642  3E20               	addlw	(low (_pixelbuffer| (0+256)))& (0+255)
 10632  0643  0086               	movwf	6
 10633  0644  3001               	movlw	1	; select bank2/3
 10634  0645  0087               	movwf	7
 10635  0646  0826               	movf	??_drawWalls,w
 10636  0647  0481               	iorwf	1,f
 10637  0648  3141               	addfsr 1,1
 10638  0649  0827               	movf	??_drawWalls+1,w
 10639  064A  0481               	iorwf	1,f
 10640  064B  3001               	movlw	1
 10641  064C  00A6               	movwf	??_drawWalls
 10642  064D  0826               	movf	??_drawWalls,w
 10643  064E  07E1               	addwf	_i,f
 10644  064F  2DFE               	goto	L6
 10645  0650                     __end_of_drawWalls:	
 10646                           
 10647                           	psect	text66
 10648  0F08                     __ptext66:	
 10649 ;; *************** function _reverse *****************
 10650 ;; Defined at:
 10651 ;;		line 350 in file "main.c"
 10652 ;; Parameters:    Size  Location     Type
 10653 ;;  b               1    wreg     unsigned char 
 10654 ;; Auto vars:     Size  Location     Type
 10655 ;;  b               1    5[BANK0 ] unsigned char 
 10656 ;; Return value:  Size  Location     Type
 10657 ;;                  1    wreg      unsigned char 
 10658 ;; Registers used:
 10659 ;;		wreg, status,2, status,0
 10660 ;; Tracked objects:
 10661 ;;		On entry : 0/0
 10662 ;;		On exit  : 0/0
 10663 ;;		Unchanged: 0/0
 10664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10665 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10666 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10667 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10668 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10669 ;;Total ram usage:        4 bytes
 10670 ;; Hardware stack levels used:    1
 10671 ;; Hardware stack levels required when called:    6
 10672 ;; This function calls:
 10673 ;;		Nothing
 10674 ;; This function is called by:
 10675 ;;		_drawWalls
 10676 ;; This function uses a non-reentrant model
 10677 ;;
 10678                           
 10679                           
 10680                           ;psect for function _reverse
 10681  0F08                     _reverse:	
 10682                           
 10683                           ;incstack = 0
 10684                           ; Regs used in _reverse: [wreg+status,2+status,0]
 10685                           ;reverse@b stored from wreg
 10686  0F08  0020               	movlb	0	; select bank0
 10687  0F09  00A5               	movwf	reverse@b
 10688                           
 10689                           ;main.c: 351: b = (b & 0xF0) >> 4 | (b & 0x0F) << 4;
 10690  0F0A  0825               	movf	reverse@b,w
 10691  0F0B  390F               	andlw	15
 10692  0F0C  00A2               	movwf	??_reverse
 10693  0F0D  3004               	movlw	4
 10694  0F0E                     u3165:	
 10695  0F0E  35A2               	lslf	??_reverse,f
 10696  0F0F  0B89               	decfsz	9,f
 10697  0F10  2F0E               	goto	u3165
 10698  0F11  0825               	movf	reverse@b,w
 10699  0F12  00A3               	movwf	??_reverse+1
 10700  0F13  3004               	movlw	4
 10701  0F14                     u3175:	
 10702  0F14  36A3               	lsrf	??_reverse+1,f
 10703  0F15  0B89               	decfsz	9,f
 10704  0F16  2F14               	goto	u3175
 10705  0F17  0823               	movf	??_reverse+1,w
 10706  0F18  390F               	andlw	15
 10707  0F19  0422               	iorwf	??_reverse,w
 10708  0F1A  00A4               	movwf	??_reverse+2
 10709  0F1B  0824               	movf	??_reverse+2,w
 10710  0F1C  00A5               	movwf	reverse@b
 10711                           
 10712                           ;main.c: 352: b = (b & 0xCC) >> 2 | (b & 0x33) << 2;
 10713  0F1D  0825               	movf	reverse@b,w
 10714  0F1E  3933               	andlw	51
 10715  0F1F  00A2               	movwf	??_reverse
 10716  0F20  3002               	movlw	2
 10717  0F21                     u3185:	
 10718  0F21  35A2               	lslf	??_reverse,f
 10719  0F22  0B89               	decfsz	9,f
 10720  0F23  2F21               	goto	u3185
 10721  0F24  0825               	movf	reverse@b,w
 10722  0F25  00A3               	movwf	??_reverse+1
 10723  0F26  3002               	movlw	2
 10724  0F27                     u3195:	
 10725  0F27  36A3               	lsrf	??_reverse+1,f
 10726  0F28  0B89               	decfsz	9,f
 10727  0F29  2F27               	goto	u3195
 10728  0F2A  0823               	movf	??_reverse+1,w
 10729  0F2B  3933               	andlw	51
 10730  0F2C  0422               	iorwf	??_reverse,w
 10731  0F2D  00A4               	movwf	??_reverse+2
 10732  0F2E  0824               	movf	??_reverse+2,w
 10733  0F2F  00A5               	movwf	reverse@b
 10734                           
 10735                           ;main.c: 353: b = (b & 0xAA) >> 1 | (b & 0x55) << 1;
 10736  0F30  0825               	movf	reverse@b,w
 10737  0F31  3955               	andlw	85
 10738  0F32  00A2               	movwf	??_reverse
 10739  0F33  3001               	movlw	1
 10740  0F34                     u3205:	
 10741  0F34  35A2               	lslf	??_reverse,f
 10742  0F35  0B89               	decfsz	9,f
 10743  0F36  2F34               	goto	u3205
 10744  0F37  3625               	lsrf	reverse@b,w
 10745  0F38  3955               	andlw	85
 10746  0F39  0422               	iorwf	??_reverse,w
 10747  0F3A  00A3               	movwf	??_reverse+1
 10748  0F3B  0823               	movf	??_reverse+1,w
 10749  0F3C  00A5               	movwf	reverse@b
 10750                           
 10751                           ;main.c: 354: return b;
 10752  0F3D  0825               	movf	reverse@b,w
 10753  0F3E  0008               	return
 10754  0F3F                     __end_of_reverse:	
 10755                           
 10756                           	psect	text67
 10757  0B24                     __ptext67:	
 10758 ;; *************** function _clearPixels *****************
 10759 ;; Defined at:
 10760 ;;		line 321 in file "main.c"
 10761 ;; Parameters:    Size  Location     Type
 10762 ;;		None
 10763 ;; Auto vars:     Size  Location     Type
 10764 ;;		None
 10765 ;; Return value:  Size  Location     Type
 10766 ;;                  1    wreg      void 
 10767 ;; Registers used:
 10768 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10769 ;; Tracked objects:
 10770 ;;		On entry : 0/0
 10771 ;;		On exit  : 0/0
 10772 ;;		Unchanged: 0/0
 10773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10774 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10775 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10776 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10777 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10778 ;;Total ram usage:        1 bytes
 10779 ;; Hardware stack levels used:    1
 10780 ;; Hardware stack levels required when called:    6
 10781 ;; This function calls:
 10782 ;;		Nothing
 10783 ;; This function is called by:
 10784 ;;		_writeWord
 10785 ;;		_endGame
 10786 ;;		_main
 10787 ;; This function uses a non-reentrant model
 10788 ;;
 10789                           
 10790                           
 10791                           ;psect for function _clearPixels
 10792  0B24                     _clearPixels:	
 10793                           
 10794                           ;main.c: 322: for (i = 0; i < 8; i++) {
 10795                           
 10796                           ;incstack = 0
 10797                           ; Regs used in _clearPixels: [wreg+fsr1l+fsr1h+status,2+status,0]
 10798  0B24  0020               	movlb	0	; select bank0
 10799  0B25  01E1               	clrf	_i
 10800  0B26                     L7:	
 10801  0B26  3008               	movlw	8
 10802  0B27  0261               	subwf	_i,w
 10803  0B28  1803               	btfsc	3,0
 10804  0B29  0008               	return
 10805                           
 10806                           ;main.c: 323: pixelbuffer[i] = 0;
 10807  0B2A  3561               	lslf	_i,w
 10808  0B2B  3E20               	addlw	(low (_pixelbuffer| (0+256)))& (0+255)
 10809  0B2C  0086               	movwf	6
 10810  0B2D  3001               	movlw	1	; select bank2/3
 10811  0B2E  0087               	movwf	7
 10812  0B2F  3000               	movlw	0
 10813  0B30  3FC0               	movwi [0]fsr1
 10814  0B31  3FC1               	movwi [1]fsr1
 10815  0B32  3001               	movlw	1
 10816  0B33  00A2               	movwf	??_clearPixels
 10817  0B34  0822               	movf	??_clearPixels,w
 10818  0B35  07E1               	addwf	_i,f
 10819  0B36  2B26               	goto	L7
 10820  0B37                     __end_of_clearPixels:	
 10821                           
 10822                           	psect	text68
 10823  0E14                     __ptext68:	
 10824 ;; *************** function ___lwmod *****************
 10825 ;; Defined at:
 10826 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 10827 ;; Parameters:    Size  Location     Type
 10828 ;;  divisor         2   10[BANK0 ] unsigned int 
 10829 ;;  dividend        2   12[BANK0 ] unsigned int 
 10830 ;; Auto vars:     Size  Location     Type
 10831 ;;  counter         1   15[BANK0 ] unsigned char 
 10832 ;; Return value:  Size  Location     Type
 10833 ;;                  2   10[BANK0 ] unsigned int 
 10834 ;; Registers used:
 10835 ;;		wreg, status,2, status,0
 10836 ;; Tracked objects:
 10837 ;;		On entry : 0/0
 10838 ;;		On exit  : 0/0
 10839 ;;		Unchanged: 0/0
 10840 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10841 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10842 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10843 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10844 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10845 ;;Total ram usage:        6 bytes
 10846 ;; Hardware stack levels used:    1
 10847 ;; Hardware stack levels required when called:    6
 10848 ;; This function calls:
 10849 ;;		Nothing
 10850 ;; This function is called by:
 10851 ;;		_write
 10852 ;; This function uses a non-reentrant model
 10853 ;;
 10854                           
 10855                           
 10856                           ;psect for function ___lwmod
 10857  0E14                     ___lwmod:	
 10858                           
 10859                           ;incstack = 0
 10860                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
 10861  0E14  0020               	movlb	0	; select bank0
 10862  0E15  082A               	movf	___lwmod@divisor,w
 10863  0E16  042B               	iorwf	___lwmod@divisor+1,w
 10864  0E17  1903               	btfsc	3,2
 10865  0E18  2E3C               	goto	l4632
 10866  0E19  01AF               	clrf	___lwmod@counter
 10867  0E1A  0AAF               	incf	___lwmod@counter,f
 10868  0E1B                     l4622:	
 10869  0E1B  1BAB               	btfsc	___lwmod@divisor+1,7
 10870  0E1C  2E27               	goto	l4624
 10871  0E1D  3001               	movlw	1
 10872  0E1E                     u3545:	
 10873  0E1E  35AA               	lslf	___lwmod@divisor,f
 10874  0E1F  0DAB               	rlf	___lwmod@divisor+1,f
 10875  0E20  0B89               	decfsz	9,f
 10876  0E21  2E1E               	goto	u3545
 10877  0E22  3001               	movlw	1
 10878  0E23  00AE               	movwf	??___lwmod
 10879  0E24  082E               	movf	??___lwmod,w
 10880  0E25  07AF               	addwf	___lwmod@counter,f
 10881  0E26  2E1B               	goto	l4622
 10882  0E27                     l4624:	
 10883  0E27  082B               	movf	___lwmod@divisor+1,w
 10884  0E28  022D               	subwf	___lwmod@dividend+1,w
 10885  0E29  1D03               	skipz
 10886  0E2A  2E2D               	goto	u3565
 10887  0E2B  082A               	movf	___lwmod@divisor,w
 10888  0E2C  022C               	subwf	___lwmod@dividend,w
 10889  0E2D                     u3565:	
 10890  0E2D  1C03               	skipc
 10891  0E2E  2E33               	goto	l4628
 10892  0E2F  082A               	movf	___lwmod@divisor,w
 10893  0E30  02AC               	subwf	___lwmod@dividend,f
 10894  0E31  082B               	movf	___lwmod@divisor+1,w
 10895  0E32  3BAD               	subwfb	___lwmod@dividend+1,f
 10896  0E33                     l4628:	
 10897  0E33  3001               	movlw	1
 10898  0E34                     u3575:	
 10899  0E34  36AB               	lsrf	___lwmod@divisor+1,f
 10900  0E35  0CAA               	rrf	___lwmod@divisor,f
 10901  0E36  0B89               	decfsz	9,f
 10902  0E37  2E34               	goto	u3575
 10903  0E38  3001               	movlw	1
 10904  0E39  02AF               	subwf	___lwmod@counter,f
 10905  0E3A  1D03               	btfss	3,2
 10906  0E3B  2E27               	goto	l4624
 10907  0E3C                     l4632:	
 10908  0E3C  082D               	movf	___lwmod@dividend+1,w
 10909  0E3D  00AB               	movwf	?___lwmod+1
 10910  0E3E  082C               	movf	___lwmod@dividend,w
 10911  0E3F  00AA               	movwf	?___lwmod
 10912  0E40  0008               	return
 10913  0E41                     __end_of___lwmod:	
 10914                           
 10915                           	psect	text69
 10916  0ED3                     __ptext69:	
 10917 ;; *************** function ___lwdiv *****************
 10918 ;; Defined at:
 10919 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
 10920 ;; Parameters:    Size  Location     Type
 10921 ;;  divisor         2    2[BANK0 ] unsigned int 
 10922 ;;  dividend        2    4[BANK0 ] unsigned int 
 10923 ;; Auto vars:     Size  Location     Type
 10924 ;;  quotient        2    8[BANK0 ] unsigned int 
 10925 ;;  counter         1    7[BANK0 ] unsigned char 
 10926 ;; Return value:  Size  Location     Type
 10927 ;;                  2    2[BANK0 ] unsigned int 
 10928 ;; Registers used:
 10929 ;;		wreg, status,2, status,0
 10930 ;; Tracked objects:
 10931 ;;		On entry : 0/0
 10932 ;;		On exit  : 0/0
 10933 ;;		Unchanged: 0/0
 10934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10935 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10936 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10937 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10938 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10939 ;;Total ram usage:        8 bytes
 10940 ;; Hardware stack levels used:    1
 10941 ;; Hardware stack levels required when called:    6
 10942 ;; This function calls:
 10943 ;;		Nothing
 10944 ;; This function is called by:
 10945 ;;		_write
 10946 ;; This function uses a non-reentrant model
 10947 ;;
 10948                           
 10949                           
 10950                           ;psect for function ___lwdiv
 10951  0ED3                     ___lwdiv:	
 10952                           
 10953                           ;incstack = 0
 10954                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 10955  0ED3  0020               	movlb	0	; select bank0
 10956  0ED4  01A8               	clrf	___lwdiv@quotient
 10957  0ED5  01A9               	clrf	___lwdiv@quotient+1
 10958  0ED6  0822               	movf	___lwdiv@divisor,w
 10959  0ED7  0423               	iorwf	___lwdiv@divisor+1,w
 10960  0ED8  1903               	btfsc	3,2
 10961  0ED9  2F03               	goto	l4610
 10962  0EDA  01A7               	clrf	___lwdiv@counter
 10963  0EDB  0AA7               	incf	___lwdiv@counter,f
 10964  0EDC                     l4598:	
 10965  0EDC  1BA3               	btfsc	___lwdiv@divisor+1,7
 10966  0EDD  2EE8               	goto	l4600
 10967  0EDE  3001               	movlw	1
 10968  0EDF                     u3475:	
 10969  0EDF  35A2               	lslf	___lwdiv@divisor,f
 10970  0EE0  0DA3               	rlf	___lwdiv@divisor+1,f
 10971  0EE1  0B89               	decfsz	9,f
 10972  0EE2  2EDF               	goto	u3475
 10973  0EE3  3001               	movlw	1
 10974  0EE4  00A6               	movwf	??___lwdiv
 10975  0EE5  0826               	movf	??___lwdiv,w
 10976  0EE6  07A7               	addwf	___lwdiv@counter,f
 10977  0EE7  2EDC               	goto	l4598
 10978  0EE8                     l4600:	
 10979  0EE8  3001               	movlw	1
 10980  0EE9                     u3495:	
 10981  0EE9  35A8               	lslf	___lwdiv@quotient,f
 10982  0EEA  0DA9               	rlf	___lwdiv@quotient+1,f
 10983  0EEB  0B89               	decfsz	9,f
 10984  0EEC  2EE9               	goto	u3495
 10985  0EED  0823               	movf	___lwdiv@divisor+1,w
 10986  0EEE  0225               	subwf	___lwdiv@dividend+1,w
 10987  0EEF  1D03               	skipz
 10988  0EF0  2EF3               	goto	u3505
 10989  0EF1  0822               	movf	___lwdiv@divisor,w
 10990  0EF2  0224               	subwf	___lwdiv@dividend,w
 10991  0EF3                     u3505:	
 10992  0EF3  1C03               	skipc
 10993  0EF4  2EFA               	goto	l4606
 10994  0EF5  0822               	movf	___lwdiv@divisor,w
 10995  0EF6  02A4               	subwf	___lwdiv@dividend,f
 10996  0EF7  0823               	movf	___lwdiv@divisor+1,w
 10997  0EF8  3BA5               	subwfb	___lwdiv@dividend+1,f
 10998  0EF9  1428               	bsf	___lwdiv@quotient,0
 10999  0EFA                     l4606:	
 11000  0EFA  3001               	movlw	1
 11001  0EFB                     u3515:	
 11002  0EFB  36A3               	lsrf	___lwdiv@divisor+1,f
 11003  0EFC  0CA2               	rrf	___lwdiv@divisor,f
 11004  0EFD  0B89               	decfsz	9,f
 11005  0EFE  2EFB               	goto	u3515
 11006  0EFF  3001               	movlw	1
 11007  0F00  02A7               	subwf	___lwdiv@counter,f
 11008  0F01  1D03               	btfss	3,2
 11009  0F02  2EE8               	goto	l4600
 11010  0F03                     l4610:	
 11011  0F03  0829               	movf	___lwdiv@quotient+1,w
 11012  0F04  00A3               	movwf	?___lwdiv+1
 11013  0F05  0828               	movf	___lwdiv@quotient,w
 11014  0F06  00A2               	movwf	?___lwdiv
 11015  0F07  0008               	return
 11016  0F08                     __end_of___lwdiv:	
 11017                           
 11018                           	psect	text70
 11019  0221                     __ptext70:	
 11020 ;; *************** function _drawPixel *****************
 11021 ;; Defined at:
 11022 ;;		line 307 in file "main.c"
 11023 ;; Parameters:    Size  Location     Type
 11024 ;;  x               1    wreg     unsigned char 
 11025 ;;  y               1    2[BANK0 ] unsigned char 
 11026 ;;  color           1    3[BANK0 ] unsigned char 
 11027 ;; Auto vars:     Size  Location     Type
 11028 ;;  x               1   10[BANK0 ] unsigned char 
 11029 ;; Return value:  Size  Location     Type
 11030 ;;                  1    wreg      void 
 11031 ;; Registers used:
 11032 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11033 ;; Tracked objects:
 11034 ;;		On entry : 0/0
 11035 ;;		On exit  : 0/0
 11036 ;;		Unchanged: 0/0
 11037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11038 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11039 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11040 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11041 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11042 ;;Total ram usage:        9 bytes
 11043 ;; Hardware stack levels used:    1
 11044 ;; Hardware stack levels required when called:    6
 11045 ;; This function calls:
 11046 ;;		Nothing
 11047 ;; This function is called by:
 11048 ;;		_main
 11049 ;; This function uses a non-reentrant model
 11050 ;;
 11051                           
 11052                           
 11053                           ;psect for function _drawPixel
 11054  0221                     _drawPixel:	
 11055                           
 11056                           ;incstack = 0
 11057                           ; Regs used in _drawPixel: [wreg+fsr1l+fsr1h+status,2+status,0]
 11058                           ;drawPixel@x stored from wreg
 11059  0221  0020               	movlb	0	; select bank0
 11060  0222  00AA               	movwf	drawPixel@x
 11061                           
 11062                           ;main.c: 308: if (color == 1) {
 11063  0223  0323               	decf	drawPixel@color,w
 11064  0224  1D03               	btfss	3,2
 11065  0225  2A53               	goto	l3720
 11066                           
 11067                           ;main.c: 309: pixelbuffer[y] |= 1 << x;
 11068  0226  3001               	movlw	1
 11069  0227  00A4               	movwf	??_drawPixel
 11070  0228  3000               	movlw	0
 11071  0229  00A5               	movwf	??_drawPixel+1
 11072  022A  0A2A               	incf	drawPixel@x,w
 11073  022B  2A2E               	goto	u2404
 11074  022C                     u2405:	
 11075  022C  35A4               	lslf	??_drawPixel,f
 11076  022D  0DA5               	rlf	??_drawPixel+1,f
 11077  022E                     u2404:	
 11078  022E  0B89               	decfsz	9,f
 11079  022F  2A2C               	goto	u2405
 11080  0230  3522               	lslf	drawPixel@y,w
 11081  0231  3E20               	addlw	(low (_pixelbuffer| (0+256)))& (0+255)
 11082  0232  0086               	movwf	6
 11083  0233  3001               	movlw	1	; select bank2/3
 11084  0234  0087               	movwf	7
 11085  0235  0824               	movf	??_drawPixel,w
 11086  0236  0481               	iorwf	1,f
 11087  0237  3141               	addfsr 1,1
 11088  0238  0825               	movf	??_drawPixel+1,w
 11089  0239  0481               	iorwf	1,f
 11090                           
 11091                           ;main.c: 310: pixelbuffer[y] &= ~(1 << (x + 8));
 11092  023A  3001               	movlw	1
 11093  023B  00A4               	movwf	??_drawPixel
 11094  023C  3000               	movlw	0
 11095  023D  00A5               	movwf	??_drawPixel+1
 11096  023E  082A               	movf	drawPixel@x,w
 11097  023F  3E08               	addlw	8
 11098  0240  0A89               	incf	9,f
 11099  0241  2A44               	goto	u2414
 11100  0242                     u2415:	
 11101  0242  35A4               	lslf	??_drawPixel,f
 11102  0243  0DA5               	rlf	??_drawPixel+1,f
 11103  0244                     u2414:	
 11104  0244  0B89               	decfsz	9,f
 11105  0245  2A42               	goto	u2415
 11106  0246  09A4               	comf	??_drawPixel,f
 11107  0247  09A5               	comf	??_drawPixel+1,f
 11108  0248  3522               	lslf	drawPixel@y,w
 11109  0249  3E20               	addlw	(low (_pixelbuffer| (0+256)))& (0+255)
 11110  024A  0086               	movwf	6
 11111  024B  3001               	movlw	1	; select bank2/3
 11112  024C  0087               	movwf	7
 11113  024D  0824               	movf	??_drawPixel,w
 11114  024E  0581               	andwf	1,f
 11115  024F  3141               	addfsr 1,1
 11116  0250  0825               	movf	??_drawPixel+1,w
 11117  0251  0581               	andwf	1,f
 11118                           
 11119                           ;main.c: 311: } else if (color == 2) {
 11120  0252  0008               	return
 11121  0253                     l3720:	
 11122  0253  3002               	movlw	2
 11123  0254  0623               	xorwf	drawPixel@color,w
 11124  0255  1D03               	btfss	3,2
 11125  0256  2A84               	goto	l3724
 11126                           
 11127                           ;main.c: 312: pixelbuffer[y] |= 1 << (x + 8);
 11128  0257  3001               	movlw	1
 11129  0258  00A4               	movwf	??_drawPixel
 11130  0259  3000               	movlw	0
 11131  025A  00A5               	movwf	??_drawPixel+1
 11132  025B  082A               	movf	drawPixel@x,w
 11133  025C  3E08               	addlw	8
 11134  025D  0A89               	incf	9,f
 11135  025E  2A61               	goto	u2434
 11136  025F                     u2435:	
 11137  025F  35A4               	lslf	??_drawPixel,f
 11138  0260  0DA5               	rlf	??_drawPixel+1,f
 11139  0261                     u2434:	
 11140  0261  0B89               	decfsz	9,f
 11141  0262  2A5F               	goto	u2435
 11142  0263  3522               	lslf	drawPixel@y,w
 11143  0264  3E20               	addlw	(low (_pixelbuffer| (0+256)))& (0+255)
 11144  0265  0086               	movwf	6
 11145  0266  3001               	movlw	1	; select bank2/3
 11146  0267  0087               	movwf	7
 11147  0268  0824               	movf	??_drawPixel,w
 11148  0269  0481               	iorwf	1,f
 11149  026A  3141               	addfsr 1,1
 11150  026B  0825               	movf	??_drawPixel+1,w
 11151  026C  0481               	iorwf	1,f
 11152                           
 11153                           ;main.c: 313: pixelbuffer[y] &= ~(1 << x);
 11154  026D  3001               	movlw	1
 11155  026E  00A4               	movwf	??_drawPixel
 11156  026F  3000               	movlw	0
 11157  0270  00A5               	movwf	??_drawPixel+1
 11158  0271  0A2A               	incf	drawPixel@x,w
 11159  0272  2A75               	goto	u2444
 11160  0273                     u2445:	
 11161  0273  35A4               	lslf	??_drawPixel,f
 11162  0274  0DA5               	rlf	??_drawPixel+1,f
 11163  0275                     u2444:	
 11164  0275  0B89               	decfsz	9,f
 11165  0276  2A73               	goto	u2445
 11166  0277  09A4               	comf	??_drawPixel,f
 11167  0278  09A5               	comf	??_drawPixel+1,f
 11168  0279  3522               	lslf	drawPixel@y,w
 11169  027A  3E20               	addlw	(low (_pixelbuffer| (0+256)))& (0+255)
 11170  027B  0086               	movwf	6
 11171  027C  3001               	movlw	1	; select bank2/3
 11172  027D  0087               	movwf	7
 11173  027E  0824               	movf	??_drawPixel,w
 11174  027F  0581               	andwf	1,f
 11175  0280  3141               	addfsr 1,1
 11176  0281  0825               	movf	??_drawPixel+1,w
 11177  0282  0581               	andwf	1,f
 11178                           
 11179                           ;main.c: 314: } else if (color == 3) {
 11180  0283  0008               	return
 11181  0284                     l3724:	
 11182  0284  3003               	movlw	3
 11183  0285  0623               	xorwf	drawPixel@color,w
 11184  0286  1D03               	btfss	3,2
 11185  0287  2AAF               	goto	l3728
 11186                           
 11187                           ;main.c: 315: pixelbuffer[y] |= (1 << (x + 8)) | (1 << x);
 11188  0288  3001               	movlw	1
 11189  0289  00A4               	movwf	??_drawPixel
 11190  028A  3000               	movlw	0
 11191  028B  00A5               	movwf	??_drawPixel+1
 11192  028C  0A2A               	incf	drawPixel@x,w
 11193  028D  2A90               	goto	u2464
 11194  028E                     u2465:	
 11195  028E  35A4               	lslf	??_drawPixel,f
 11196  028F  0DA5               	rlf	??_drawPixel+1,f
 11197  0290                     u2464:	
 11198  0290  0B89               	decfsz	9,f
 11199  0291  2A8E               	goto	u2465
 11200  0292  3001               	movlw	1
 11201  0293  00A6               	movwf	??_drawPixel+2
 11202  0294  3000               	movlw	0
 11203  0295  00A7               	movwf	??_drawPixel+3
 11204  0296  082A               	movf	drawPixel@x,w
 11205  0297  3E08               	addlw	8
 11206  0298  0A89               	incf	9,f
 11207  0299  2A9C               	goto	u2474
 11208  029A                     u2475:	
 11209  029A  35A6               	lslf	??_drawPixel+2,f
 11210  029B  0DA7               	rlf	??_drawPixel+3,f
 11211  029C                     u2474:	
 11212  029C  0B89               	decfsz	9,f
 11213  029D  2A9A               	goto	u2475
 11214  029E  0824               	movf	??_drawPixel,w
 11215  029F  0426               	iorwf	??_drawPixel+2,w
 11216  02A0  00A8               	movwf	??_drawPixel+4
 11217  02A1  0825               	movf	??_drawPixel+1,w
 11218  02A2  0427               	iorwf	??_drawPixel+3,w
 11219  02A3  00A9               	movwf	??_drawPixel+5
 11220  02A4  3522               	lslf	drawPixel@y,w
 11221  02A5  3E20               	addlw	(low (_pixelbuffer| (0+256)))& (0+255)
 11222  02A6  0086               	movwf	6
 11223  02A7  3001               	movlw	1	; select bank2/3
 11224  02A8  0087               	movwf	7
 11225  02A9  0828               	movf	??_drawPixel+4,w
 11226  02AA  0481               	iorwf	1,f
 11227  02AB  3141               	addfsr 1,1
 11228  02AC  0829               	movf	??_drawPixel+5,w
 11229  02AD  0481               	iorwf	1,f
 11230                           
 11231                           ;main.c: 316: } else if (color == 0) {
 11232  02AE  0008               	return
 11233  02AF                     l3728:	
 11234  02AF  0823               	movf	drawPixel@color,w
 11235  02B0  1D03               	btfss	3,2
 11236  02B1  0008               	return
 11237                           
 11238                           ;main.c: 317: pixelbuffer[y] &= ~(1 << x) & ~(1 << (x + 8));
 11239  02B2  3001               	movlw	1
 11240  02B3  00A4               	movwf	??_drawPixel
 11241  02B4  3000               	movlw	0
 11242  02B5  00A5               	movwf	??_drawPixel+1
 11243  02B6  082A               	movf	drawPixel@x,w
 11244  02B7  3E08               	addlw	8
 11245  02B8  0A89               	incf	9,f
 11246  02B9  2ABC               	goto	u2494
 11247  02BA                     u2495:	
 11248  02BA  35A4               	lslf	??_drawPixel,f
 11249  02BB  0DA5               	rlf	??_drawPixel+1,f
 11250  02BC                     u2494:	
 11251  02BC  0B89               	decfsz	9,f
 11252  02BD  2ABA               	goto	u2495
 11253  02BE  09A4               	comf	??_drawPixel,f
 11254  02BF  09A5               	comf	??_drawPixel+1,f
 11255  02C0  3001               	movlw	1
 11256  02C1  00A6               	movwf	??_drawPixel+2
 11257  02C2  3000               	movlw	0
 11258  02C3  00A7               	movwf	??_drawPixel+3
 11259  02C4  0A2A               	incf	drawPixel@x,w
 11260  02C5  2AC8               	goto	u2504
 11261  02C6                     u2505:	
 11262  02C6  35A6               	lslf	??_drawPixel+2,f
 11263  02C7  0DA7               	rlf	??_drawPixel+3,f
 11264  02C8                     u2504:	
 11265  02C8  0B89               	decfsz	9,f
 11266  02C9  2AC6               	goto	u2505
 11267  02CA  09A6               	comf	??_drawPixel+2,f
 11268  02CB  09A7               	comf	??_drawPixel+3,f
 11269  02CC  0824               	movf	??_drawPixel,w
 11270  02CD  0526               	andwf	??_drawPixel+2,w
 11271  02CE  00A8               	movwf	??_drawPixel+4
 11272  02CF  0825               	movf	??_drawPixel+1,w
 11273  02D0  0527               	andwf	??_drawPixel+3,w
 11274  02D1  00A9               	movwf	??_drawPixel+5
 11275  02D2  3522               	lslf	drawPixel@y,w
 11276  02D3  3E20               	addlw	(low (_pixelbuffer| (0+256)))& (0+255)
 11277  02D4  0086               	movwf	6
 11278  02D5  3001               	movlw	1	; select bank2/3
 11279  02D6  0087               	movwf	7
 11280  02D7  0828               	movf	??_drawPixel+4,w
 11281  02D8  0581               	andwf	1,f
 11282  02D9  3141               	addfsr 1,1
 11283  02DA  0829               	movf	??_drawPixel+5,w
 11284  02DB  0581               	andwf	1,f
 11285  02DC  0008               	return
 11286  02DD                     __end_of_drawPixel:	
 11287                           
 11288                           	psect	text71
 11289  09D1                     __ptext71:	
 11290 ;; *************** function _SYSTEM_Initialize *****************
 11291 ;; Defined at:
 11292 ;;		line 77 in file "mcc_generated_files/mcc.c"
 11293 ;; Parameters:    Size  Location     Type
 11294 ;;		None
 11295 ;; Auto vars:     Size  Location     Type
 11296 ;;		None
 11297 ;; Return value:  Size  Location     Type
 11298 ;;                  1    wreg      void 
 11299 ;; Registers used:
 11300 ;;		wreg, status,2, status,0, pclath, cstack
 11301 ;; Tracked objects:
 11302 ;;		On entry : 0/0
 11303 ;;		On exit  : 0/0
 11304 ;;		Unchanged: 0/0
 11305 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11306 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11307 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11308 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11309 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11310 ;;Total ram usage:        0 bytes
 11311 ;; Hardware stack levels used:    1
 11312 ;; Hardware stack levels required when called:    8
 11313 ;; This function calls:
 11314 ;;		_OSCILLATOR_Initialize
 11315 ;;		_PIN_MANAGER_Initialize
 11316 ;; This function is called by:
 11317 ;;		_main
 11318 ;; This function uses a non-reentrant model
 11319 ;;
 11320                           
 11321                           
 11322                           ;psect for function _SYSTEM_Initialize
 11323  09D1                     _SYSTEM_Initialize:	
 11324                           
 11325                           ;mcc.c: 79: PIN_MANAGER_Initialize();
 11326                           
 11327                           ;incstack = 0
 11328                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
 11329  09D1  318E  269F  3189   	fcall	_PIN_MANAGER_Initialize
 11330                           
 11331                           ;mcc.c: 80: OSCILLATOR_Initialize();
 11332  09D4  318A  225E         	fcall	_OSCILLATOR_Initialize
 11333  09D6  0008               	return
 11334  09D7                     __end_of_SYSTEM_Initialize:	
 11335                           
 11336                           	psect	text72
 11337  0E9F                     __ptext72:	
 11338 ;; *************** function _PIN_MANAGER_Initialize *****************
 11339 ;; Defined at:
 11340 ;;		line 54 in file "mcc_generated_files/pin_manager.c"
 11341 ;; Parameters:    Size  Location     Type
 11342 ;;		None
 11343 ;; Auto vars:     Size  Location     Type
 11344 ;;		None
 11345 ;; Return value:  Size  Location     Type
 11346 ;;                  1    wreg      void 
 11347 ;; Registers used:
 11348 ;;		wreg, status,2, status,0, pclath, cstack
 11349 ;; Tracked objects:
 11350 ;;		On entry : 0/0
 11351 ;;		On exit  : 0/0
 11352 ;;		Unchanged: 0/0
 11353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11354 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11355 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11356 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11357 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11358 ;;Total ram usage:        0 bytes
 11359 ;; Hardware stack levels used:    1
 11360 ;; Hardware stack levels required when called:    7
 11361 ;; This function calls:
 11362 ;;		_IOCCF4_SetInterruptHandler
 11363 ;; This function is called by:
 11364 ;;		_SYSTEM_Initialize
 11365 ;; This function uses a non-reentrant model
 11366 ;;
 11367                           
 11368                           
 11369                           ;psect for function _PIN_MANAGER_Initialize
 11370  0E9F                     _PIN_MANAGER_Initialize:	
 11371                           
 11372                           ;pin_manager.c: 59: LATA = 0x00;
 11373                           
 11374                           ;incstack = 0
 11375                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0+pclath+cstack]
 11376  0E9F  0022               	movlb	2	; select bank2
 11377  0EA0  018C               	clrf	12	;volatile
 11378                           
 11379                           ;pin_manager.c: 60: LATB = 0x00;
 11380  0EA1  018D               	clrf	13	;volatile
 11381                           
 11382                           ;pin_manager.c: 61: LATC = 0x00;
 11383  0EA2  018E               	clrf	14	;volatile
 11384                           
 11385                           ;pin_manager.c: 66: TRISA = 0x37;
 11386  0EA3  3037               	movlw	55
 11387  0EA4  0021               	movlb	1	; select bank1
 11388  0EA5  008C               	movwf	12	;volatile
 11389                           
 11390                           ;pin_manager.c: 67: TRISB = 0xF0;
 11391  0EA6  30F0               	movlw	240
 11392  0EA7  008D               	movwf	13	;volatile
 11393                           
 11394                           ;pin_manager.c: 68: TRISC = 0xFF;
 11395  0EA8  30FF               	movlw	255
 11396  0EA9  008E               	movwf	14	;volatile
 11397                           
 11398                           ;pin_manager.c: 73: ANSELC = 0xCF;
 11399  0EAA  30CF               	movlw	207
 11400  0EAB  0023               	movlb	3	; select bank3
 11401  0EAC  008E               	movwf	14	;volatile
 11402                           
 11403                           ;pin_manager.c: 74: ANSELB = 0xA0;
 11404  0EAD  30A0               	movlw	160
 11405  0EAE  008D               	movwf	13	;volatile
 11406                           
 11407                           ;pin_manager.c: 75: ANSELA = 0x17;
 11408  0EAF  3017               	movlw	23
 11409  0EB0  008C               	movwf	12	;volatile
 11410                           
 11411                           ;pin_manager.c: 80: WPUB = 0x00;
 11412  0EB1  0024               	movlb	4	; select bank4
 11413  0EB2  018D               	clrf	13	;volatile
 11414                           
 11415                           ;pin_manager.c: 81: WPUA = 0x00;
 11416  0EB3  018C               	clrf	12	;volatile
 11417                           
 11418                           ;pin_manager.c: 82: WPUC = 0x10;
 11419  0EB4  3010               	movlw	16
 11420  0EB5  008E               	movwf	14	;volatile
 11421                           
 11422                           ;pin_manager.c: 83: OPTION_REGbits.nWPUEN = 0;
 11423  0EB6  0021               	movlb	1	; select bank1
 11424  0EB7  1395               	bcf	21,7	;volatile
 11425                           
 11426                           ;pin_manager.c: 88: ODCONA = 0x00;
 11427  0EB8  0025               	movlb	5	; select bank5
 11428  0EB9  018C               	clrf	12	;volatile
 11429                           
 11430                           ;pin_manager.c: 89: ODCONB = 0x00;
 11431  0EBA  018D               	clrf	13	;volatile
 11432                           
 11433                           ;pin_manager.c: 90: ODCONC = 0x00;
 11434  0EBB  018E               	clrf	14	;volatile
 11435                           
 11436                           ;pin_manager.c: 97: IOCCFbits.IOCCF4 = 0;
 11437  0EBC  0027               	movlb	7	; select bank7
 11438  0EBD  1219               	bcf	25,4	;volatile
 11439                           
 11440                           ;pin_manager.c: 99: IOCCNbits.IOCCN4 = 1;
 11441  0EBE  1618               	bsf	24,4	;volatile
 11442                           
 11443                           ;pin_manager.c: 101: IOCCPbits.IOCCP4 = 1;
 11444  0EBF  1617               	bsf	23,4	;volatile
 11445                           
 11446                           ;pin_manager.c: 104: IOCCF4_SetInterruptHandler(IOCCF4_DefaultInterruptHandler);
 11447  0EC0  304A               	movlw	low _IOCCF4_DefaultInterruptHandler
 11448  0EC1  0020               	movlb	0	; select bank0
 11449  0EC2  00A2               	movwf	IOCCF4_SetInterruptHandler@InterruptHandler
 11450  0EC3  3009               	movlw	high _IOCCF4_DefaultInterruptHandler
 11451  0EC4  00A3               	movwf	IOCCF4_SetInterruptHandler@InterruptHandler+1
 11452  0EC5  3189  21CB         	fcall	_IOCCF4_SetInterruptHandler
 11453                           
 11454                           ;pin_manager.c: 107: INTCONbits.IOCIE = 1;
 11455  0EC7  158B               	bsf	11,3	;volatile
 11456                           
 11457                           ;pin_manager.c: 110: SSPCLKPPS = 0x0E;
 11458  0EC8  300E               	movlw	14
 11459  0EC9  003C               	movlb	28	; select bank28
 11460  0ECA  00A0               	movwf	32	;volatile
 11461                           
 11462                           ;pin_manager.c: 111: SSPDATPPS = 0x0C;
 11463  0ECB  300C               	movlw	12
 11464  0ECC  00A1               	movwf	33	;volatile
 11465                           
 11466                           ;pin_manager.c: 112: RB6PPS = 0x10;
 11467  0ECD  3010               	movlw	16
 11468  0ECE  003D               	movlb	29	; select bank29
 11469  0ECF  009E               	movwf	30	;volatile
 11470                           
 11471                           ;pin_manager.c: 113: RB4PPS = 0x11;
 11472  0ED0  3011               	movlw	17
 11473  0ED1  009C               	movwf	28	;volatile
 11474  0ED2  0008               	return
 11475  0ED3                     __end_of_PIN_MANAGER_Initialize:	
 11476                           
 11477                           	psect	text73
 11478  09CB                     __ptext73:	
 11479 ;; *************** function _IOCCF4_SetInterruptHandler *****************
 11480 ;; Defined at:
 11481 ;;		line 146 in file "mcc_generated_files/pin_manager.c"
 11482 ;; Parameters:    Size  Location     Type
 11483 ;;  InterruptHan    2    2[BANK0 ] PTR FTN()void 
 11484 ;;		 -> buttonInterrupt(1), IOCCF4_DefaultInterruptHandler(1), 
 11485 ;; Auto vars:     Size  Location     Type
 11486 ;;		None
 11487 ;; Return value:  Size  Location     Type
 11488 ;;                  1    wreg      void 
 11489 ;; Registers used:
 11490 ;;		wreg
 11491 ;; Tracked objects:
 11492 ;;		On entry : 0/0
 11493 ;;		On exit  : 0/0
 11494 ;;		Unchanged: 0/0
 11495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11496 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11497 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11498 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11499 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11500 ;;Total ram usage:        2 bytes
 11501 ;; Hardware stack levels used:    1
 11502 ;; Hardware stack levels required when called:    6
 11503 ;; This function calls:
 11504 ;;		Nothing
 11505 ;; This function is called by:
 11506 ;;		_PIN_MANAGER_Initialize
 11507 ;;		_main
 11508 ;; This function uses a non-reentrant model
 11509 ;;
 11510                           
 11511                           
 11512                           ;psect for function _IOCCF4_SetInterruptHandler
 11513  09CB                     _IOCCF4_SetInterruptHandler:	
 11514                           
 11515                           ;pin_manager.c: 147: IOCCF4_InterruptHandler = InterruptHandler;
 11516                           
 11517                           ;incstack = 0
 11518                           ; Regs used in _IOCCF4_SetInterruptHandler: [wreg]
 11519  09CB  0020               	movlb	0	; select bank0
 11520  09CC  0823               	movf	IOCCF4_SetInterruptHandler@InterruptHandler+1,w
 11521  09CD  00EB               	movwf	_IOCCF4_InterruptHandler+1
 11522  09CE  0822               	movf	IOCCF4_SetInterruptHandler@InterruptHandler,w
 11523  09CF  00EA               	movwf	_IOCCF4_InterruptHandler
 11524  09D0  0008               	return
 11525  09D1                     __end_of_IOCCF4_SetInterruptHandler:	
 11526                           
 11527                           	psect	text74
 11528  0A5E                     __ptext74:	
 11529 ;; *************** function _OSCILLATOR_Initialize *****************
 11530 ;; Defined at:
 11531 ;;		line 83 in file "mcc_generated_files/mcc.c"
 11532 ;; Parameters:    Size  Location     Type
 11533 ;;		None
 11534 ;; Auto vars:     Size  Location     Type
 11535 ;;		None
 11536 ;; Return value:  Size  Location     Type
 11537 ;;                  1    wreg      void 
 11538 ;; Registers used:
 11539 ;;		wreg, status,2
 11540 ;; Tracked objects:
 11541 ;;		On entry : 0/0
 11542 ;;		On exit  : 0/0
 11543 ;;		Unchanged: 0/0
 11544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11545 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11546 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11547 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11548 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11549 ;;Total ram usage:        0 bytes
 11550 ;; Hardware stack levels used:    1
 11551 ;; Hardware stack levels required when called:    6
 11552 ;; This function calls:
 11553 ;;		Nothing
 11554 ;; This function is called by:
 11555 ;;		_SYSTEM_Initialize
 11556 ;; This function uses a non-reentrant model
 11557 ;;
 11558                           
 11559                           
 11560                           ;psect for function _OSCILLATOR_Initialize
 11561  0A5E                     _OSCILLATOR_Initialize:	
 11562                           
 11563                           ;mcc.c: 86: OSCCON = 0x78;
 11564                           
 11565                           ;incstack = 0
 11566                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 11567  0A5E  3078               	movlw	120
 11568  0A5F  0021               	movlb	1	; select bank1
 11569  0A60  0099               	movwf	25	;volatile
 11570                           
 11571                           ;mcc.c: 88: OSCTUNE = 0x00;
 11572  0A61  0198               	clrf	24	;volatile
 11573                           
 11574                           ;mcc.c: 90: BORCON = 0x00;
 11575  0A62  0022               	movlb	2	; select bank2
 11576  0A63  0196               	clrf	22	;volatile
 11577  0A64                     l95:	
 11578                           ;mcc.c: 93: {
 11579                           
 11580                           ;mcc.c: 92: while(PLLR == 0)
 11581                           
 11582  0A64  0021               	movlb	1	; select bank1
 11583  0A65  1B1A               	btfsc	26,6	;volatile
 11584  0A66  0008               	return
 11585  0A67  2A64               	goto	l95
 11586  0A68                     __end_of_OSCILLATOR_Initialize:	
 11587                           
 11588                           	psect	intentry
 11589  0004                     __pintentry:	
 11590 ;; *************** function _INTERRUPT_InterruptManager *****************
 11591 ;; Defined at:
 11592 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
 11593 ;; Parameters:    Size  Location     Type
 11594 ;;		None
 11595 ;; Auto vars:     Size  Location     Type
 11596 ;;		None
 11597 ;; Return value:  Size  Location     Type
 11598 ;;                  1    wreg      void 
 11599 ;; Registers used:
 11600 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11601 ;; Tracked objects:
 11602 ;;		On entry : 0/0
 11603 ;;		On exit  : 0/0
 11604 ;;		Unchanged: 0/0
 11605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11606 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11607 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11608 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11609 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11610 ;;Total ram usage:        1 bytes
 11611 ;; Hardware stack levels used:    1
 11612 ;; Hardware stack levels required when called:    5
 11613 ;; This function calls:
 11614 ;;		Absolute function
 11615 ;;		_PIN_MANAGER_IOC
 11616 ;;		_i2c_busCollisionISR
 11617 ;;		i1_i2c_ISR
 11618 ;; This function is called by:
 11619 ;;		Interrupt level 1
 11620 ;; This function uses a non-reentrant model
 11621 ;;
 11622                           
 11623  0004                     _INTERRUPT_InterruptManager:	
 11624                           
 11625                           ;incstack = 0
 11626 ;; hardware stack exceeded
 11627  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 11628                           
 11629                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11630  0005  3180               	pagesel	$
 11631  0006  0020               	movlb	0	; select bank0
 11632  0007  087F               	movf	127,w
 11633  0008  00A1               	movwf	??_INTERRUPT_InterruptManager
 11634                           
 11635                           ;interrupt_manager.c: 54: if(INTCONbits.IOCIE == 1 && INTCONbits.IOCIF == 1)
 11636  0009  198B               	btfsc	11,3	;volatile
 11637  000A  1C0B               	btfss	11,0	;volatile
 11638  000B  2810               	goto	i1l558
 11639                           
 11640                           ;interrupt_manager.c: 55: {
 11641                           ;interrupt_manager.c: 56: PIN_MANAGER_IOC();
 11642  000C  3189  21BF  3180   	fcall	_PIN_MANAGER_IOC
 11643                           
 11644                           ;interrupt_manager.c: 57: }
 11645  000F  2829               	goto	i1l566
 11646  0010                     i1l558:	
 11647                           
 11648                           ;interrupt_manager.c: 58: else if(INTCONbits.PEIE == 1)
 11649  0010  1F0B               	btfss	11,6	;volatile
 11650  0011  2829               	goto	i1l566
 11651                           
 11652                           ;interrupt_manager.c: 59: {
 11653                           ;interrupt_manager.c: 60: if(PIE2bits.BCL1IE == 1 && PIR2bits.BCL1IF == 1)
 11654  0012  0021               	movlb	1	; select bank1
 11655  0013  1D91               	btfss	17,3	;volatile
 11656  0014  281E               	goto	i1l561
 11657  0015  0020               	movlb	0	; select bank0
 11658  0016  1D91               	btfss	17,3	;volatile
 11659  0017  281E               	goto	i1l561
 11660                           
 11661                           ;interrupt_manager.c: 61: {
 11662                           ;interrupt_manager.c: 62: i2c_driver_busCollisionISR();
 11663  0018  085E               	movf	_i2c_driver_busCollisionISR+1,w
 11664  0019  008A               	movwf	10
 11665  001A  085D               	movf	_i2c_driver_busCollisionISR,w
 11666  001B  000A               	callw
 11667  001C  3180               	pagesel	$
 11668                           
 11669                           ;interrupt_manager.c: 63: }
 11670  001D  2829               	goto	i1l566
 11671  001E                     i1l561:	
 11672                           
 11673                           ;interrupt_manager.c: 64: else if(PIE1bits.SSP1IE == 1 && PIR1bits.SSP1IF == 1)
 11674  001E  0021               	movlb	1	; select bank1
 11675  001F  1D90               	btfss	16,3	;volatile
 11676  0020  2829               	goto	i1l566
 11677  0021  0020               	movlb	0	; select bank0
 11678  0022  1D90               	btfss	16,3	;volatile
 11679  0023  2829               	goto	i1l566
 11680                           
 11681                           ;interrupt_manager.c: 65: {
 11682                           ;interrupt_manager.c: 66: i2c_driver_i2cISR();
 11683  0024  085C               	movf	_i2c_driver_i2cISR+1,w
 11684  0025  008A               	movwf	10
 11685  0026  085B               	movf	_i2c_driver_i2cISR,w
 11686  0027  000A               	callw
 11687  0028  3180               	pagesel	$
 11688  0029                     i1l566:	
 11689                           ;interrupt_manager.c: 73: else
 11690                           ;interrupt_manager.c: 74: {
 11691                           
 11692                           ;interrupt_manager.c: 71: }
 11693                           ;interrupt_manager.c: 72: }
 11694                           
 11695                           ;interrupt_manager.c: 68: else
 11696                           ;interrupt_manager.c: 69: {
 11697                           
 11698                           ;interrupt_manager.c: 67: }
 11699                           
 11700  0029  0020               	movlb	0	; select bank0
 11701  002A  0821               	movf	??_INTERRUPT_InterruptManager,w
 11702  002B  00FF               	movwf	127
 11703  002C  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 11704  002D  0009               	retfie
 11705  002E                     __end_of_INTERRUPT_InterruptManager:	
 11706                           
 11707                           	psect	text76
 11708  0CC0                     __ptext76:	
 11709 ;; *************** function i1_i2c_ISR *****************
 11710 ;; Defined at:
 11711 ;;		line 419 in file "mcc_generated_files/drivers/i2c_master.c"
 11712 ;; Parameters:    Size  Location     Type
 11713 ;;		None
 11714 ;; Auto vars:     Size  Location     Type
 11715 ;;		None
 11716 ;; Return value:  Size  Location     Type
 11717 ;;                  1    wreg      void 
 11718 ;; Registers used:
 11719 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11720 ;; Tracked objects:
 11721 ;;		On entry : 0/0
 11722 ;;		On exit  : 0/0
 11723 ;;		Unchanged: 0/0
 11724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11725 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11726 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11727 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11728 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11729 ;;Total ram usage:        1 bytes
 11730 ;; Hardware stack levels used:    1
 11731 ;; Hardware stack levels required when called:    4
 11732 ;; This function calls:
 11733 ;;		i1_do_I2C_DO_ACK
 11734 ;;		i1_do_I2C_DO_ADDRESS_NACK
 11735 ;;		i1_do_I2C_DO_NACK_RESTART
 11736 ;;		i1_do_I2C_DO_NACK_STOP
 11737 ;;		i1_do_I2C_IDLE
 11738 ;;		i1_do_I2C_RCEN
 11739 ;;		i1_do_I2C_RESET
 11740 ;;		i1_do_I2C_RX
 11741 ;;		i1_do_I2C_SEND_ADR_READ
 11742 ;;		i1_do_I2C_SEND_ADR_WRITE
 11743 ;;		i1_do_I2C_SEND_RESTART
 11744 ;;		i1_do_I2C_SEND_RESTART_READ
 11745 ;;		i1_do_I2C_SEND_RESTART_WRITE
 11746 ;;		i1_do_I2C_SEND_STOP
 11747 ;;		i1_do_I2C_TX
 11748 ;;		i1_do_I2C_TX_EMPTY
 11749 ;;		i1_i2c_driver_isNACK
 11750 ;;		i1_mssp_clearIRQ
 11751 ;; This function is called by:
 11752 ;; This function uses a non-reentrant model
 11753 ;;
 11754                           
 11755                           
 11756                           ;psect for function i1_i2c_ISR
 11757  0CC0                     i1_i2c_ISR:	
 11758  0CC0                     i1l6984:	
 11759                           ;incstack = 0
 11760 ;; hardware stack exceeded
 11761                           ; Regs used in i1_i2c_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11762                           
 11763                           
 11764                           ;i2c_master.c: 421: mssp_clearIRQ();
 11765  0CC0  3189  2165  318C   	fcall	i1_mssp_clearIRQ
 11766                           
 11767                           ;i2c_master.c: 427: if(i2c_status.addressNACKCheck && i2c_driver_isNACK())
 11768  0CC3  0021               	movlb	1	; select bank1
 11769  0CC4  1DA0               	btfss	_i2c_status^(0+128),3
 11770  0CC5  2CD1               	goto	i1l6992
 11771  0CC6  318A  22BE  318C   	fcall	i1_i2c_driver_isNACK
 11772  0CC9  1C03               	btfss	3,0
 11773  0CCA  2CD1               	goto	i1l6992
 11774                           
 11775                           ;i2c_master.c: 428: {
 11776                           ;i2c_master.c: 429: i2c_status.state = I2C_ADDRESS_NACK;
 11777  0CCB  300F               	movlw	15
 11778  0CCC  0020               	movlb	0	; select bank0
 11779  0CCD  00A0               	movwf	??i1_i2c_ISR
 11780  0CCE  0820               	movf	??i1_i2c_ISR,w
 11781  0CCF  0021               	movlb	1	; select bank1
 11782  0CD0  00AA               	movwf	(_i2c_status^(0+128)+10)
 11783  0CD1                     i1l6992:	
 11784                           
 11785                           ;i2c_master.c: 430: }
 11786                           ;i2c_master.c: 432: i2c_status.state = fsmStateTable[i2c_status.state]();
 11787  0CD1  0021               	movlb	1	; select bank1
 11788  0CD2  352A               	lslf	(_i2c_status^(0+128)+10),w
 11789  0CD3  3EA0               	addlw	(low (_fsmStateTable| (0+512)))& (0+255)
 11790  0CD4  0086               	movwf	6
 11791  0CD5  3002               	movlw	2	; select bank5/6
 11792  0CD6  0087               	movwf	7
 11793  0CD7  3F41               	moviw [1]fsr1
 11794  0CD8  008A               	movwf	10
 11795  0CD9  3F40               	moviw [0]fsr1
 11796  0CDA  000A               	callw
 11797  0CDB  318C               	pagesel	$
 11798  0CDC  0020               	movlb	0	; select bank0
 11799  0CDD  00A0               	movwf	??i1_i2c_ISR
 11800  0CDE  0820               	movf	??i1_i2c_ISR,w
 11801  0CDF  0021               	movlb	1	; select bank1
 11802  0CE0  00AA               	movwf	(_i2c_status^(0+128)+10)
 11803  0CE1  0008               	return
 11804  0CE2                     __end_ofi1_i2c_ISR:	
 11805                           
 11806                           	psect	text77
 11807  0965                     __ptext77:	
 11808 ;; *************** function i1_mssp_clearIRQ *****************
 11809 ;; Defined at:
 11810 ;;		line 53 in file "mcc_generated_files/i2c_driver.c"
 11811 ;; Parameters:    Size  Location     Type
 11812 ;;		None
 11813 ;; Auto vars:     Size  Location     Type
 11814 ;;		None
 11815 ;; Return value:  Size  Location     Type
 11816 ;;                  1    wreg      void 
 11817 ;; Registers used:
 11818 ;;		None
 11819 ;; Tracked objects:
 11820 ;;		On entry : 0/0
 11821 ;;		On exit  : 0/0
 11822 ;;		Unchanged: 0/0
 11823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11824 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11825 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11826 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11827 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11828 ;;Total ram usage:        0 bytes
 11829 ;; Hardware stack levels used:    1
 11830 ;; This function calls:
 11831 ;;		Nothing
 11832 ;; This function is called by:
 11833 ;;		i1_i2c_ISR
 11834 ;; This function uses a non-reentrant model
 11835 ;;
 11836                           
 11837                           
 11838                           ;psect for function i1_mssp_clearIRQ
 11839  0965                     i1_mssp_clearIRQ:	
 11840                           
 11841                           ;i2c_driver.c: 55: PIR1bits.SSP1IF = 0;
 11842                           
 11843                           ;incstack = 0
 11844                           ; Regs used in i1_mssp_clearIRQ: []
 11845  0965  0020               	movlb	0	; select bank0
 11846  0966  1190               	bcf	16,3	;volatile
 11847  0967  0008               	return
 11848  0968                     __end_ofi1_mssp_clearIRQ:	
 11849                           
 11850                           	psect	text78
 11851  0F7B                     __ptext78:	
 11852 ;; *************** function i1_do_I2C_RX *****************
 11853 ;; Defined at:
 11854 ;;		line 357 in file "mcc_generated_files/drivers/i2c_master.c"
 11855 ;; Parameters:    Size  Location     Type
 11856 ;;		None
 11857 ;; Auto vars:     Size  Location     Type
 11858 ;;		None
 11859 ;; Return value:  Size  Location     Type
 11860 ;;                  1    wreg      enum E12337
 11861 ;; Registers used:
 11862 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11863 ;; Tracked objects:
 11864 ;;		On entry : 0/0
 11865 ;;		On exit  : 0/0
 11866 ;;		Unchanged: 0/0
 11867 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11868 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11869 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11870 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11871 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11872 ;;Total ram usage:        1 bytes
 11873 ;; Hardware stack levels used:    1
 11874 ;; Hardware stack levels required when called:    3
 11875 ;; This function calls:
 11876 ;;		Absolute function
 11877 ;;		i1_do_I2C_DO_NACK_RESTART
 11878 ;;		i1_do_I2C_DO_NACK_STOP
 11879 ;;		i1_i2c_driver_getRXData
 11880 ;;		i1_i2c_driver_sendACK
 11881 ;;		i1_i2c_restartWrite
 11882 ;;		i1_rd1RegCompleteHandler
 11883 ;;		i1_rd2RegCompleteHandler
 11884 ;;		i1_rdBlkRegCompleteHandler
 11885 ;;		i1_returnReset
 11886 ;;		i1_returnStop
 11887 ;;		i1_wr1RegCompleteHandler
 11888 ;;		i1_wr2RegCompleteHandler
 11889 ;; This function is called by:
 11890 ;; This function uses a non-reentrant model
 11891 ;;
 11892                           
 11893                           
 11894                           ;psect for function i1_do_I2C_RX
 11895  0F7B                     i1_do_I2C_RX:	
 11896  0F7B                     i1l6832:	
 11897                           ;incstack = 0
 11898 ;; hardware stack exceeded
 11899                           ; Regs used in i1_do_I2C_RX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11900                           
 11901                           
 11902                           ;i2c_master.c: 359: *i2c_status.data_ptr++ = i2c_driver_getRXData();
 11903  0F7B  3189  215F  318F   	fcall	i1_i2c_driver_getRXData
 11904  0F7E  00FA               	movwf	??i1_do_I2C_RX
 11905  0F7F  0021               	movlb	1	; select bank1
 11906  0F80  0822               	movf	(low ((_i2c_status| 0+2)))^(0+128),w
 11907  0F81  0086               	movwf	6
 11908  0F82  0823               	movf	((low ((_i2c_status| 0+2))+1))^(0+128),w
 11909  0F83  0087               	movwf	7
 11910  0F84  087A               	movf	??i1_do_I2C_RX,w
 11911  0F85  0081               	movwf	1
 11912  0F86  3001               	movlw	1
 11913  0F87  07A2               	addwf	(low ((_i2c_status| 0+2)))^(0+128),f
 11914  0F88  3000               	movlw	0
 11915  0F89  3DA3               	addwfc	((low ((_i2c_status| 0+2))+1))^(0+128),f
 11916                           
 11917                           ;i2c_master.c: 360: if(--i2c_status.data_length)
 11918  0F8A  3001               	movlw	1
 11919  0F8B  02A4               	subwf	(_i2c_status^(0+128)+4),f
 11920  0F8C  3000               	movlw	0
 11921  0F8D  3BA5               	subwfb	((_i2c_status+1)^(0+128)+4),f
 11922  0F8E  0824               	movf	(_i2c_status^(0+128)+4),w
 11923  0F8F  0425               	iorwf	((_i2c_status+1)^(0+128)+4),w
 11924  0F90  1903               	btfsc	3,2
 11925  0F91  2F96               	goto	i1l739
 11926                           
 11927                           ;i2c_master.c: 361: {
 11928                           ;i2c_master.c: 362: i2c_driver_sendACK();
 11929  0F92  3189  2180         	fcall	i1_i2c_driver_sendACK
 11930                           
 11931                           ;i2c_master.c: 363: return I2C_RCEN;
 11932  0F94  3005               	movlw	5
 11933                           
 11934                           ;i2c_master.c: 364: }
 11935  0F95  0008               	return
 11936  0F96                     i1l739:	
 11937                           
 11938                           ;i2c_master.c: 365: else
 11939                           ;i2c_master.c: 366: {
 11940                           ;i2c_master.c: 367: i2c_status.bufferFree = 1;
 11941  0F96  1520               	bsf	_i2c_status^(0+128),2
 11942                           
 11943                           ;i2c_master.c: 368: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
 11944  0F97  2F9E               	goto	i1l6856
 11945  0F98                     i1l6846:	
 11946                           ;i2c_master.c: 369: {
 11947                           ;i2c_master.c: 370: case i2c_restart_write:
 11948                           
 11949                           
 11950                           ;i2c_master.c: 371: case i2c_restart_read:
 11951                           ;i2c_master.c: 372: return do_I2C_DO_NACK_RESTART();
 11952  0F98  3189  21A0         	fcall	i1_do_I2C_DO_NACK_RESTART
 11953  0F9A  0008               	return
 11954  0F9B                     i1l6850:	
 11955                           ;i2c_master.c: 374: case i2c_continue:
 11956                           
 11957                           ;i2c_master.c: 373: default:
 11958                           
 11959                           
 11960                           ;i2c_master.c: 375: case i2c_stop:
 11961                           ;i2c_master.c: 376: return do_I2C_DO_NACK_STOP();
 11962  0F9B  3189  219C         	fcall	i1_do_I2C_DO_NACK_STOP
 11963                           
 11964                           ;i2c_master.c: 377: }
 11965  0F9D  0008               	return
 11966  0F9E                     i1l6856:	
 11967  0F9E  0021               	movlb	1	; select bank1
 11968  0F9F  0838               	movf	(low ((_i2c_status| 0+24)))^(0+128),w
 11969  0FA0  00FA               	movwf	??i1_do_I2C_RX
 11970  0FA1  087A               	movf	??i1_do_I2C_RX,w
 11971  0FA2  00F9               	movwf	i1returnStop@p
 11972  0FA3  300C               	movlw	12
 11973  0FA4  3EA0               	addlw	(low (_i2c_status| 0))& (0+255)
 11974  0FA5  0086               	movwf	6
 11975  0FA6  0187               	clrf	7
 11976  0FA7  3F41               	moviw [1]fsr1
 11977  0FA8  008A               	movwf	10
 11978  0FA9  3F40               	moviw [0]fsr1
 11979  0FAA  000A               	callw
 11980  0FAB  318F               	pagesel	$
 11981                           
 11982                           ; Switch size 1, requested type "space"
 11983                           ; Number of cases is 4, Range of values is 1 to 4
 11984                           ; switch strategies available:
 11985                           ; Name         Instructions Cycles
 11986                           ; simple_byte           13     7 (average)
 11987                           ; direct_byte           17     9 (fixed)
 11988                           ; jumptable            263     9 (fixed)
 11989                           ;	Chosen strategy is simple_byte
 11990  0FAC  3A01               	xorlw	1	; case 1
 11991  0FAD  1903               	skipnz
 11992  0FAE  2F9B               	goto	i1l6850
 11993  0FAF  3A03               	xorlw	3	; case 2
 11994  0FB0  1903               	skipnz
 11995  0FB1  2F98               	goto	i1l6846
 11996  0FB2  3A01               	xorlw	1	; case 3
 11997  0FB3  1903               	skipnz
 11998  0FB4  2F98               	goto	i1l6846
 11999  0FB5  3A07               	xorlw	7	; case 4
 12000  0FB6  1903               	skipnz
 12001  0FB7  2F9B               	goto	i1l6850
 12002  0FB8  2F9B               	goto	i1l6850
 12003  0FB9  0008               	return
 12004  0FBA                     __end_ofi1_do_I2C_RX:	
 12005                           
 12006                           	psect	text79
 12007  0740                     __ptext79:	
 12008 ;; *************** function i1_do_I2C_TX *****************
 12009 ;; Defined at:
 12010 ;;		line 333 in file "mcc_generated_files/drivers/i2c_master.c"
 12011 ;; Parameters:    Size  Location     Type
 12012 ;;		None
 12013 ;; Auto vars:     Size  Location     Type
 12014 ;;		None
 12015 ;; Return value:  Size  Location     Type
 12016 ;;                  1    wreg      enum E12337
 12017 ;; Registers used:
 12018 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12019 ;; Tracked objects:
 12020 ;;		On entry : 0/0
 12021 ;;		On exit  : 0/0
 12022 ;;		Unchanged: 0/0
 12023 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12024 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12025 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12026 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12027 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12028 ;;Total ram usage:        4 bytes
 12029 ;; Hardware stack levels used:    1
 12030 ;; Hardware stack levels required when called:    3
 12031 ;; This function calls:
 12032 ;;		Absolute function
 12033 ;;		i1_do_I2C_SEND_RESTART_READ
 12034 ;;		i1_do_I2C_SEND_RESTART_WRITE
 12035 ;;		i1_do_I2C_SEND_STOP
 12036 ;;		i1_i2c_driver_TXData
 12037 ;;		i1_i2c_driver_isNACK
 12038 ;;		i1_i2c_restartWrite
 12039 ;;		i1_rd1RegCompleteHandler
 12040 ;;		i1_rd2RegCompleteHandler
 12041 ;;		i1_rdBlkRegCompleteHandler
 12042 ;;		i1_returnReset
 12043 ;;		i1_returnStop
 12044 ;;		i1_wr1RegCompleteHandler
 12045 ;;		i1_wr2RegCompleteHandler
 12046 ;; This function is called by:
 12047 ;; This function uses a non-reentrant model
 12048 ;;
 12049                           
 12050                           
 12051                           ;psect for function i1_do_I2C_TX
 12052  0740                     i1_do_I2C_TX:	
 12053  0740                     i1l6802:	
 12054                           ;incstack = 0
 12055 ;; hardware stack exceeded
 12056                           ; Regs used in i1_do_I2C_TX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12057                           
 12058                           
 12059                           ;i2c_master.c: 335: if(i2c_driver_isNACK())
 12060  0740  318A  22BE  3187   	fcall	i1_i2c_driver_isNACK
 12061  0743  1803               	btfsc	3,0
 12062  0744  2F4F               	goto	i1l6820
 12063  0745  2F6B               	goto	i1l723
 12064  0746                     i1l6806:	
 12065                           ;i2c_master.c: 338: {
 12066                           ;i2c_master.c: 339: case i2c_restart_read:
 12067                           
 12068                           ;i2c_master.c: 336: {
 12069                           ;i2c_master.c: 337: switch(i2c_status.callbackTable[i2c_dataNACK](i2c_status.callbackPay
      +                          load[i2c_dataNACK]))
 12070                           
 12071                           
 12072                           ;i2c_master.c: 340: return do_I2C_SEND_RESTART_READ();
 12073  0746  3189  2188         	fcall	i1_do_I2C_SEND_RESTART_READ
 12074  0748  0008               	return
 12075  0749                     i1l6810:	
 12076                           ;i2c_master.c: 341: case i2c_restart_write:
 12077                           
 12078                           
 12079                           ;i2c_master.c: 342: return do_I2C_SEND_RESTART_WRITE();
 12080  0749  3189  218C         	fcall	i1_do_I2C_SEND_RESTART_WRITE
 12081  074B  0008               	return
 12082  074C                     i1l6814:	
 12083                           ;i2c_master.c: 344: case i2c_continue:
 12084                           
 12085                           ;i2c_master.c: 343: default:
 12086                           
 12087                           
 12088                           ;i2c_master.c: 345: case i2c_stop:
 12089                           ;i2c_master.c: 346: return do_I2C_SEND_STOP();
 12090  074C  3189  2194         	fcall	i1_do_I2C_SEND_STOP
 12091                           
 12092                           ;i2c_master.c: 347: }
 12093  074E  0008               	return
 12094  074F                     i1l6820:	
 12095  074F  0021               	movlb	1	; select bank1
 12096  0750  083B               	movf	(low ((_i2c_status| 0+27)))^(0+128),w
 12097  0751  00FA               	movwf	??i1_do_I2C_TX
 12098  0752  087A               	movf	??i1_do_I2C_TX,w
 12099  0753  00F9               	movwf	i1returnStop@p
 12100  0754  3012               	movlw	18
 12101  0755  3EA0               	addlw	(low (_i2c_status| 0))& (0+255)
 12102  0756  0086               	movwf	6
 12103  0757  0187               	clrf	7
 12104  0758  3F41               	moviw [1]fsr1
 12105  0759  008A               	movwf	10
 12106  075A  3F40               	moviw [0]fsr1
 12107  075B  000A               	callw
 12108  075C  3187               	pagesel	$
 12109                           
 12110                           ; Switch size 1, requested type "space"
 12111                           ; Number of cases is 4, Range of values is 1 to 4
 12112                           ; switch strategies available:
 12113                           ; Name         Instructions Cycles
 12114                           ; simple_byte           13     7 (average)
 12115                           ; direct_byte           17     9 (fixed)
 12116                           ; jumptable            263     9 (fixed)
 12117                           ;	Chosen strategy is simple_byte
 12118  075D  3A01               	xorlw	1	; case 1
 12119  075E  1903               	skipnz
 12120  075F  2F4C               	goto	i1l6814
 12121  0760  3A03               	xorlw	3	; case 2
 12122  0761  1903               	skipnz
 12123  0762  2F46               	goto	i1l6806
 12124  0763  3A01               	xorlw	1	; case 3
 12125  0764  1903               	skipnz
 12126  0765  2F49               	goto	i1l6810
 12127  0766  3A07               	xorlw	7	; case 4
 12128  0767  1903               	skipnz
 12129  0768  2F4C               	goto	i1l6814
 12130  0769  2F4C               	goto	i1l6814
 12131                           
 12132                           ;i2c_master.c: 348: }
 12133  076A  0008               	return
 12134  076B                     i1l723:	
 12135                           
 12136                           ;i2c_master.c: 349: else
 12137                           ;i2c_master.c: 350: {
 12138                           ;i2c_master.c: 351: i2c_status.addressNACKCheck = 0;
 12139  076B  0021               	movlb	1	; select bank1
 12140  076C  11A0               	bcf	_i2c_status^(0+128),3
 12141                           
 12142                           ;i2c_master.c: 352: i2c_driver_TXData(*i2c_status.data_ptr++);
 12143  076D  0823               	movf	((low ((_i2c_status| 0+2))+1))^(0+128),w
 12144  076E  00FB               	movwf	??i1_do_I2C_TX+1
 12145  076F  0822               	movf	(low ((_i2c_status| 0+2)))^(0+128),w
 12146  0770  00FA               	movwf	??i1_do_I2C_TX
 12147  0771  0AA2               	incf	(low ((_i2c_status| 0+2)))^(0+128),f
 12148  0772  1903               	skipnz
 12149  0773  0AA3               	incf	((low ((_i2c_status| 0+2))+1))^(0+128),f
 12150  0774  087A               	movf	??i1_do_I2C_TX,w
 12151  0775  0086               	movwf	6
 12152  0776  087B               	movf	??i1_do_I2C_TX+1,w
 12153  0777  0087               	movwf	7
 12154  0778  0801               	movf	1,w
 12155  0779  3189  21B0  3187   	fcall	i1_i2c_driver_TXData
 12156                           
 12157                           ;i2c_master.c: 353: return (--i2c_status.data_length)?I2C_TX:I2C_TX_EMPTY;
 12158  077C  3001               	movlw	1
 12159  077D  0021               	movlb	1	; select bank1
 12160  077E  02A4               	subwf	(_i2c_status^(0+128)+4),f
 12161  077F  3000               	movlw	0
 12162  0780  3BA5               	subwfb	((_i2c_status+1)^(0+128)+4),f
 12163  0781  0824               	movf	(_i2c_status^(0+128)+4),w
 12164  0782  0425               	iorwf	((_i2c_status+1)^(0+128)+4),w
 12165  0783  1D03               	btfss	3,2
 12166  0784  2F87               	goto	i1l6828
 12167  0785  3006               	movlw	6
 12168  0786  2F88               	goto	L8
 12169  0787                     i1l6828:	
 12170  0787  3003               	movlw	3
 12171  0788                     L8:	
 12172  0788  00FC               	movwf	i1_do_I2C_TX$1070
 12173  0789  3000               	movlw	0
 12174  078A  00FD               	movwf	i1_do_I2C_TX$1070+1
 12175  078B  087C               	movf	i1_do_I2C_TX$1070,w
 12176  078C  0008               	return
 12177  078D                     __end_ofi1_do_I2C_TX:	
 12178                           
 12179                           	psect	text80
 12180  0CE2                     __ptext80:	
 12181 ;; *************** function i1_do_I2C_DO_ADDRESS_NACK *****************
 12182 ;; Defined at:
 12183 ;;		line 319 in file "mcc_generated_files/drivers/i2c_master.c"
 12184 ;; Parameters:    Size  Location     Type
 12185 ;;		None
 12186 ;; Auto vars:     Size  Location     Type
 12187 ;;		None
 12188 ;; Return value:  Size  Location     Type
 12189 ;;                  1    wreg      enum E12337
 12190 ;; Registers used:
 12191 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12192 ;; Tracked objects:
 12193 ;;		On entry : 0/0
 12194 ;;		On exit  : 0/0
 12195 ;;		Unchanged: 0/0
 12196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12197 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12198 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12199 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12200 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12201 ;;Total ram usage:        1 bytes
 12202 ;; Hardware stack levels used:    1
 12203 ;; Hardware stack levels required when called:    3
 12204 ;; This function calls:
 12205 ;;		Absolute function
 12206 ;;		i1_do_I2C_SEND_RESTART
 12207 ;;		i1_do_I2C_SEND_STOP
 12208 ;;		i1_i2c_restartWrite
 12209 ;;		i1_rd1RegCompleteHandler
 12210 ;;		i1_rd2RegCompleteHandler
 12211 ;;		i1_rdBlkRegCompleteHandler
 12212 ;;		i1_returnReset
 12213 ;;		i1_returnStop
 12214 ;;		i1_wr1RegCompleteHandler
 12215 ;;		i1_wr2RegCompleteHandler
 12216 ;; This function is called by:
 12217 ;; This function uses a non-reentrant model
 12218 ;;
 12219                           
 12220                           
 12221                           ;psect for function i1_do_I2C_DO_ADDRESS_NACK
 12222  0CE2                     i1_do_I2C_DO_ADDRESS_NACK:	
 12223  0CE2                     i1l6786:	
 12224                           ;incstack = 0
 12225 ;; hardware stack exceeded
 12226                           ; Regs used in i1_do_I2C_DO_ADDRESS_NACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12227                           
 12228                           
 12229                           ;i2c_master.c: 321: i2c_status.addressNACKCheck = 0;
 12230  0CE2  0021               	movlb	1	; select bank1
 12231  0CE3  11A0               	bcf	_i2c_status^(0+128),3
 12232                           
 12233                           ;i2c_master.c: 322: i2c_status.error = I2C_FAIL;
 12234  0CE4  3002               	movlw	2
 12235  0CE5  00FA               	movwf	??i1_do_I2C_DO_ADDRESS_NACK
 12236  0CE6  087A               	movf	??i1_do_I2C_DO_ADDRESS_NACK,w
 12237  0CE7  00AB               	movwf	(_i2c_status^(0+128)+11)
 12238                           
 12239                           ;i2c_master.c: 323: switch(i2c_status.callbackTable[i2c_addressNACK](i2c_status.callback
      +                          Payload[i2c_addressNACK]))
 12240  0CE8  2CEF               	goto	i1l6800
 12241  0CE9                     i1l6790:	
 12242                           ;i2c_master.c: 324: {
 12243                           ;i2c_master.c: 325: case i2c_restart_read:
 12244                           
 12245                           
 12246                           ;i2c_master.c: 326: case i2c_restart_write:
 12247                           ;i2c_master.c: 327: return do_I2C_SEND_RESTART();
 12248  0CE9  3189  2190         	fcall	i1_do_I2C_SEND_RESTART
 12249  0CEB  0008               	return
 12250  0CEC                     i1l6794:	
 12251                           ;i2c_master.c: 328: default:
 12252                           
 12253                           
 12254                           ;i2c_master.c: 329: return do_I2C_SEND_STOP();
 12255  0CEC  3189  2194         	fcall	i1_do_I2C_SEND_STOP
 12256                           
 12257                           ;i2c_master.c: 330: }
 12258  0CEE  0008               	return
 12259  0CEF                     i1l6800:	
 12260  0CEF  0021               	movlb	1	; select bank1
 12261  0CF0  083A               	movf	(low ((_i2c_status| 0+26)))^(0+128),w
 12262  0CF1  00FA               	movwf	??i1_do_I2C_DO_ADDRESS_NACK
 12263  0CF2  087A               	movf	??i1_do_I2C_DO_ADDRESS_NACK,w
 12264  0CF3  00F9               	movwf	i1returnStop@p
 12265  0CF4  3010               	movlw	16
 12266  0CF5  3EA0               	addlw	(low (_i2c_status| 0))& (0+255)
 12267  0CF6  0086               	movwf	6
 12268  0CF7  0187               	clrf	7
 12269  0CF8  3F41               	moviw [1]fsr1
 12270  0CF9  008A               	movwf	10
 12271  0CFA  3F40               	moviw [0]fsr1
 12272  0CFB  000A               	callw
 12273  0CFC  318C               	pagesel	$
 12274                           
 12275                           ; Switch size 1, requested type "space"
 12276                           ; Number of cases is 2, Range of values is 2 to 3
 12277                           ; switch strategies available:
 12278                           ; Name         Instructions Cycles
 12279                           ; simple_byte            7     4 (average)
 12280                           ; direct_byte           13     9 (fixed)
 12281                           ; jumptable            263     9 (fixed)
 12282                           ;	Chosen strategy is simple_byte
 12283  0CFD  3A02               	xorlw	2	; case 2
 12284  0CFE  1903               	skipnz
 12285  0CFF  2CE9               	goto	i1l6790
 12286  0D00  3A01               	xorlw	1	; case 3
 12287  0D01  1903               	skipnz
 12288  0D02  2CE9               	goto	i1l6790
 12289  0D03  2CEC               	goto	i1l6794
 12290  0D04  0008               	return
 12291  0D05                     __end_ofi1_do_I2C_DO_ADDRESS_NACK:	
 12292                           
 12293                           	psect	text81
 12294  09A0                     __ptext81:	
 12295 ;; *************** function i1_do_I2C_DO_NACK_RESTART *****************
 12296 ;; Defined at:
 12297 ;;		line 311 in file "mcc_generated_files/drivers/i2c_master.c"
 12298 ;; Parameters:    Size  Location     Type
 12299 ;;		None
 12300 ;; Auto vars:     Size  Location     Type
 12301 ;;		None
 12302 ;; Return value:  Size  Location     Type
 12303 ;;                  1    wreg      enum E12337
 12304 ;; Registers used:
 12305 ;;		wreg, status,2, status,0, pclath, cstack
 12306 ;; Tracked objects:
 12307 ;;		On entry : 0/0
 12308 ;;		On exit  : 0/0
 12309 ;;		Unchanged: 0/0
 12310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12311 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12312 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12313 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12314 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12315 ;;Total ram usage:        0 bytes
 12316 ;; Hardware stack levels used:    1
 12317 ;; Hardware stack levels required when called:    1
 12318 ;; This function calls:
 12319 ;;		i1_i2c_driver_sendNACK
 12320 ;; This function is called by:
 12321 ;;		i1_do_I2C_RX
 12322 ;; This function uses a non-reentrant model
 12323 ;;
 12324                           
 12325                           
 12326                           ;psect for function i1_do_I2C_DO_NACK_RESTART
 12327  09A0                     i1_do_I2C_DO_NACK_RESTART:	
 12328  09A0                     i1l3410:	
 12329                           ;incstack = 0
 12330 ;; hardware stack exceeded
 12331                           ; Regs used in i1_do_I2C_DO_NACK_RESTART: [wreg+status,2+status,0+pclath+cstack]
 12332                           
 12333                           
 12334                           ;i2c_master.c: 313: i2c_driver_sendNACK();
 12335  09A0  3189  2184         	fcall	i1_i2c_driver_sendNACK
 12336                           
 12337                           ;i2c_master.c: 314: return I2C_SEND_RESTART;
 12338  09A2  3009               	movlw	9
 12339  09A3  0008               	return
 12340  09A4                     __end_ofi1_do_I2C_DO_NACK_RESTART:	
 12341                           
 12342                           	psect	text82
 12343  099C                     __ptext82:	
 12344 ;; *************** function i1_do_I2C_DO_NACK_STOP *****************
 12345 ;; Defined at:
 12346 ;;		line 305 in file "mcc_generated_files/drivers/i2c_master.c"
 12347 ;; Parameters:    Size  Location     Type
 12348 ;;		None
 12349 ;; Auto vars:     Size  Location     Type
 12350 ;;		None
 12351 ;; Return value:  Size  Location     Type
 12352 ;;                  1    wreg      enum E12337
 12353 ;; Registers used:
 12354 ;;		wreg, status,2, status,0, pclath, cstack
 12355 ;; Tracked objects:
 12356 ;;		On entry : 0/0
 12357 ;;		On exit  : 0/0
 12358 ;;		Unchanged: 0/0
 12359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12360 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12361 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12362 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12363 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12364 ;;Total ram usage:        0 bytes
 12365 ;; Hardware stack levels used:    1
 12366 ;; Hardware stack levels required when called:    1
 12367 ;; This function calls:
 12368 ;;		i1_i2c_driver_sendNACK
 12369 ;; This function is called by:
 12370 ;;		i1_do_I2C_RX
 12371 ;; This function uses a non-reentrant model
 12372 ;;
 12373                           
 12374                           
 12375                           ;psect for function i1_do_I2C_DO_NACK_STOP
 12376  099C                     i1_do_I2C_DO_NACK_STOP:	
 12377  099C                     i1l3404:	
 12378                           ;incstack = 0
 12379 ;; hardware stack exceeded
 12380                           ; Regs used in i1_do_I2C_DO_NACK_STOP: [wreg+status,2+status,0+pclath+cstack]
 12381                           
 12382                           
 12383                           ;i2c_master.c: 307: i2c_driver_sendNACK();
 12384  099C  3189  2184         	fcall	i1_i2c_driver_sendNACK
 12385                           
 12386                           ;i2c_master.c: 308: return I2C_SEND_STOP;
 12387  099E  300A               	movlw	10
 12388  099F  0008               	return
 12389  09A0                     __end_ofi1_do_I2C_DO_NACK_STOP:	
 12390                           
 12391                           	psect	text83
 12392  0998                     __ptext83:	
 12393 ;; *************** function i1_do_I2C_DO_ACK *****************
 12394 ;; Defined at:
 12395 ;;		line 299 in file "mcc_generated_files/drivers/i2c_master.c"
 12396 ;; Parameters:    Size  Location     Type
 12397 ;;		None
 12398 ;; Auto vars:     Size  Location     Type
 12399 ;;		None
 12400 ;; Return value:  Size  Location     Type
 12401 ;;                  1    wreg      enum E12337
 12402 ;; Registers used:
 12403 ;;		wreg, status,2, status,0, pclath, cstack
 12404 ;; Tracked objects:
 12405 ;;		On entry : 0/0
 12406 ;;		On exit  : 0/0
 12407 ;;		Unchanged: 0/0
 12408 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12409 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12410 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12411 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12412 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12413 ;;Total ram usage:        0 bytes
 12414 ;; Hardware stack levels used:    1
 12415 ;; Hardware stack levels required when called:    1
 12416 ;; This function calls:
 12417 ;;		i1_i2c_driver_sendACK
 12418 ;; This function is called by:
 12419 ;; This function uses a non-reentrant model
 12420 ;;
 12421                           
 12422                           
 12423                           ;psect for function i1_do_I2C_DO_ACK
 12424  0998                     i1_do_I2C_DO_ACK:	
 12425  0998                     i1l3612:	
 12426                           ;incstack = 0
 12427 ;; hardware stack exceeded
 12428                           ; Regs used in i1_do_I2C_DO_ACK: [wreg+status,2+status,0+pclath+cstack]
 12429                           
 12430                           
 12431                           ;i2c_master.c: 301: i2c_driver_sendACK();
 12432  0998  3189  2180         	fcall	i1_i2c_driver_sendACK
 12433                           
 12434                           ;i2c_master.c: 302: return I2C_RCEN;
 12435  099A  3005               	movlw	5
 12436  099B  0008               	return
 12437  099C                     __end_ofi1_do_I2C_DO_ACK:	
 12438                           
 12439                           	psect	text84
 12440  09C5                     __ptext84:	
 12441 ;; *************** function i1_do_I2C_RCEN *****************
 12442 ;; Defined at:
 12443 ;;		line 292 in file "mcc_generated_files/drivers/i2c_master.c"
 12444 ;; Parameters:    Size  Location     Type
 12445 ;;		None
 12446 ;; Auto vars:     Size  Location     Type
 12447 ;;		None
 12448 ;; Return value:  Size  Location     Type
 12449 ;;                  1    wreg      enum E12337
 12450 ;; Registers used:
 12451 ;;		wreg, status,2, status,0, pclath, cstack
 12452 ;; Tracked objects:
 12453 ;;		On entry : 0/0
 12454 ;;		On exit  : 0/0
 12455 ;;		Unchanged: 0/0
 12456 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12457 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12458 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12459 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12460 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12461 ;;Total ram usage:        0 bytes
 12462 ;; Hardware stack levels used:    1
 12463 ;; Hardware stack levels required when called:    1
 12464 ;; This function calls:
 12465 ;;		i1_i2c_driver_startRX
 12466 ;; This function is called by:
 12467 ;; This function uses a non-reentrant model
 12468 ;;
 12469                           
 12470                           
 12471                           ;psect for function i1_do_I2C_RCEN
 12472  09C5                     i1_do_I2C_RCEN:	
 12473  09C5                     i1l3604:	
 12474                           ;incstack = 0
 12475 ;; hardware stack exceeded
 12476                           ; Regs used in i1_do_I2C_RCEN: [wreg+status,2+status,0+pclath+cstack]
 12477                           
 12478                           
 12479                           ;i2c_master.c: 294: i2c_status.addressNACKCheck = 0;
 12480  09C5  0021               	movlb	1	; select bank1
 12481  09C6  11A0               	bcf	_i2c_status^(0+128),3
 12482                           
 12483                           ;i2c_master.c: 295: i2c_driver_startRX();
 12484  09C7  3189  215C         	fcall	i1_i2c_driver_startRX
 12485                           
 12486                           ;i2c_master.c: 296: return I2C_RX;
 12487  09C9  3004               	movlw	4
 12488  09CA  0008               	return
 12489  09CB                     __end_ofi1_do_I2C_RCEN:	
 12490                           
 12491                           	psect	text85
 12492  0A0E                     __ptext85:	
 12493 ;; *************** function i1_do_I2C_SEND_ADR_WRITE *****************
 12494 ;; Defined at:
 12495 ;;		line 285 in file "mcc_generated_files/drivers/i2c_master.c"
 12496 ;; Parameters:    Size  Location     Type
 12497 ;;		None
 12498 ;; Auto vars:     Size  Location     Type
 12499 ;;		None
 12500 ;; Return value:  Size  Location     Type
 12501 ;;                  1    wreg      enum E12337
 12502 ;; Registers used:
 12503 ;;		wreg, status,2, status,0, pclath, cstack
 12504 ;; Tracked objects:
 12505 ;;		On entry : 0/0
 12506 ;;		On exit  : 0/0
 12507 ;;		Unchanged: 0/0
 12508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12509 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12510 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12511 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12512 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12513 ;;Total ram usage:        0 bytes
 12514 ;; Hardware stack levels used:    1
 12515 ;; Hardware stack levels required when called:    1
 12516 ;; This function calls:
 12517 ;;		i1_i2c_driver_TXData
 12518 ;; This function is called by:
 12519 ;; This function uses a non-reentrant model
 12520 ;;
 12521                           
 12522                           
 12523                           ;psect for function i1_do_I2C_SEND_ADR_WRITE
 12524  0A0E                     i1_do_I2C_SEND_ADR_WRITE:	
 12525  0A0E                     i1l3596:	
 12526                           ;incstack = 0
 12527 ;; hardware stack exceeded
 12528                           ; Regs used in i1_do_I2C_SEND_ADR_WRITE: [wreg+status,2+status,0+pclath+cstack]
 12529                           
 12530                           
 12531                           ;i2c_master.c: 287: i2c_status.addressNACKCheck = 1;
 12532  0A0E  0021               	movlb	1	; select bank1
 12533  0A0F  15A0               	bsf	_i2c_status^(0+128),3
 12534                           
 12535                           ;i2c_master.c: 288: i2c_driver_TXData(i2c_status.address << 1);
 12536  0A10  3521               	lslf	(_i2c_status^(0+128)+1),w
 12537  0A11  3189  21B0         	fcall	i1_i2c_driver_TXData
 12538                           
 12539                           ;i2c_master.c: 289: return I2C_TX;
 12540  0A13  3003               	movlw	3
 12541  0A14  0008               	return
 12542  0A15                     __end_ofi1_do_I2C_SEND_ADR_WRITE:	
 12543                           
 12544                           	psect	text86
 12545  0A15                     __ptext86:	
 12546 ;; *************** function i1_do_I2C_SEND_ADR_READ *****************
 12547 ;; Defined at:
 12548 ;;		line 278 in file "mcc_generated_files/drivers/i2c_master.c"
 12549 ;; Parameters:    Size  Location     Type
 12550 ;;		None
 12551 ;; Auto vars:     Size  Location     Type
 12552 ;;		None
 12553 ;; Return value:  Size  Location     Type
 12554 ;;                  1    wreg      enum E12337
 12555 ;; Registers used:
 12556 ;;		wreg, status,2, status,0, pclath, cstack
 12557 ;; Tracked objects:
 12558 ;;		On entry : 0/0
 12559 ;;		On exit  : 0/0
 12560 ;;		Unchanged: 0/0
 12561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12562 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12563 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12564 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12565 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12566 ;;Total ram usage:        0 bytes
 12567 ;; Hardware stack levels used:    1
 12568 ;; Hardware stack levels required when called:    1
 12569 ;; This function calls:
 12570 ;;		i1_i2c_driver_TXData
 12571 ;; This function is called by:
 12572 ;; This function uses a non-reentrant model
 12573 ;;
 12574                           
 12575                           
 12576                           ;psect for function i1_do_I2C_SEND_ADR_READ
 12577  0A15                     i1_do_I2C_SEND_ADR_READ:	
 12578  0A15                     i1l3588:	
 12579                           ;incstack = 0
 12580 ;; hardware stack exceeded
 12581                           ; Regs used in i1_do_I2C_SEND_ADR_READ: [wreg+status,2+status,0+pclath+cstack]
 12582                           
 12583                           
 12584                           ;i2c_master.c: 280: i2c_status.addressNACKCheck = 1;
 12585  0A15  0021               	movlb	1	; select bank1
 12586  0A16  15A0               	bsf	_i2c_status^(0+128),3
 12587                           
 12588                           ;i2c_master.c: 281: i2c_driver_TXData(i2c_status.address << 1 | 1);
 12589  0A17  1403               	setc
 12590  0A18  0D21               	rlf	(_i2c_status^(0+128)+1),w
 12591  0A19  3189  21B0         	fcall	i1_i2c_driver_TXData
 12592                           
 12593                           ;i2c_master.c: 282: return I2C_RCEN;
 12594  0A1B  3005               	movlw	5
 12595  0A1C  0008               	return
 12596  0A1D                     __end_ofi1_do_I2C_SEND_ADR_READ:	
 12597                           
 12598                           	psect	text87
 12599  0994                     __ptext87:	
 12600 ;; *************** function i1_do_I2C_SEND_STOP *****************
 12601 ;; Defined at:
 12602 ;;		line 272 in file "mcc_generated_files/drivers/i2c_master.c"
 12603 ;; Parameters:    Size  Location     Type
 12604 ;;		None
 12605 ;; Auto vars:     Size  Location     Type
 12606 ;;		None
 12607 ;; Return value:  Size  Location     Type
 12608 ;;                  1    wreg      enum E12337
 12609 ;; Registers used:
 12610 ;;		wreg, status,2, status,0, pclath, cstack
 12611 ;; Tracked objects:
 12612 ;;		On entry : 0/0
 12613 ;;		On exit  : 0/0
 12614 ;;		Unchanged: 0/0
 12615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12616 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12617 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12618 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12619 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12620 ;;Total ram usage:        0 bytes
 12621 ;; Hardware stack levels used:    1
 12622 ;; Hardware stack levels required when called:    1
 12623 ;; This function calls:
 12624 ;;		i1_i2c_driver_stop
 12625 ;; This function is called by:
 12626 ;;		i1_do_I2C_DO_ADDRESS_NACK
 12627 ;;		i1_do_I2C_TX
 12628 ;;		i1_do_I2C_TX_EMPTY
 12629 ;; This function uses a non-reentrant model
 12630 ;;
 12631                           
 12632                           
 12633                           ;psect for function i1_do_I2C_SEND_STOP
 12634  0994                     i1_do_I2C_SEND_STOP:	
 12635  0994                     i1l3398:	
 12636                           ;incstack = 0
 12637 ;; hardware stack exceeded
 12638                           ; Regs used in i1_do_I2C_SEND_STOP: [wreg+status,2+status,0+pclath+cstack]
 12639                           
 12640                           
 12641                           ;i2c_master.c: 274: i2c_driver_stop();
 12642  0994  3189  2159         	fcall	i1_i2c_driver_stop
 12643                           
 12644                           ;i2c_master.c: 275: return I2C_IDLE;
 12645  0996  3000               	movlw	0
 12646  0997  0008               	return
 12647  0998                     __end_ofi1_do_I2C_SEND_STOP:	
 12648                           
 12649                           	psect	text88
 12650  0990                     __ptext88:	
 12651 ;; *************** function i1_do_I2C_SEND_RESTART *****************
 12652 ;; Defined at:
 12653 ;;		line 266 in file "mcc_generated_files/drivers/i2c_master.c"
 12654 ;; Parameters:    Size  Location     Type
 12655 ;;		None
 12656 ;; Auto vars:     Size  Location     Type
 12657 ;;		None
 12658 ;; Return value:  Size  Location     Type
 12659 ;;                  1    wreg      enum E12337
 12660 ;; Registers used:
 12661 ;;		wreg, status,2, status,0, pclath, cstack
 12662 ;; Tracked objects:
 12663 ;;		On entry : 0/0
 12664 ;;		On exit  : 0/0
 12665 ;;		Unchanged: 0/0
 12666 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12667 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12668 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12669 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12670 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12671 ;;Total ram usage:        0 bytes
 12672 ;; Hardware stack levels used:    1
 12673 ;; Hardware stack levels required when called:    1
 12674 ;; This function calls:
 12675 ;;		i1_i2c_driver_restart
 12676 ;; This function is called by:
 12677 ;;		i1_do_I2C_DO_ADDRESS_NACK
 12678 ;;		i1_do_I2C_TX_EMPTY
 12679 ;; This function uses a non-reentrant model
 12680 ;;
 12681                           
 12682                           
 12683                           ;psect for function i1_do_I2C_SEND_RESTART
 12684  0990                     i1_do_I2C_SEND_RESTART:	
 12685  0990                     i1l3392:	
 12686                           ;incstack = 0
 12687 ;; hardware stack exceeded
 12688                           ; Regs used in i1_do_I2C_SEND_RESTART: [wreg+status,2+status,0+pclath+cstack]
 12689                           
 12690                           
 12691                           ;i2c_master.c: 268: i2c_driver_restart();
 12692  0990  3189  2156         	fcall	i1_i2c_driver_restart
 12693                           
 12694                           ;i2c_master.c: 269: return I2C_SEND_ADR_READ;
 12695  0992  3001               	movlw	1
 12696  0993  0008               	return
 12697  0994                     __end_ofi1_do_I2C_SEND_RESTART:	
 12698                           
 12699                           	psect	text89
 12700  098C                     __ptext89:	
 12701 ;; *************** function i1_do_I2C_SEND_RESTART_WRITE *****************
 12702 ;; Defined at:
 12703 ;;		line 260 in file "mcc_generated_files/drivers/i2c_master.c"
 12704 ;; Parameters:    Size  Location     Type
 12705 ;;		None
 12706 ;; Auto vars:     Size  Location     Type
 12707 ;;		None
 12708 ;; Return value:  Size  Location     Type
 12709 ;;                  1    wreg      enum E12337
 12710 ;; Registers used:
 12711 ;;		wreg, status,2, status,0, pclath, cstack
 12712 ;; Tracked objects:
 12713 ;;		On entry : 0/0
 12714 ;;		On exit  : 0/0
 12715 ;;		Unchanged: 0/0
 12716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12717 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12718 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12719 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12720 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12721 ;;Total ram usage:        0 bytes
 12722 ;; Hardware stack levels used:    1
 12723 ;; Hardware stack levels required when called:    1
 12724 ;; This function calls:
 12725 ;;		i1_i2c_driver_restart
 12726 ;; This function is called by:
 12727 ;;		i1_do_I2C_TX
 12728 ;; This function uses a non-reentrant model
 12729 ;;
 12730                           
 12731                           
 12732                           ;psect for function i1_do_I2C_SEND_RESTART_WRITE
 12733  098C                     i1_do_I2C_SEND_RESTART_WRITE:	
 12734  098C                     i1l3386:	
 12735                           ;incstack = 0
 12736 ;; hardware stack exceeded
 12737                           ; Regs used in i1_do_I2C_SEND_RESTART_WRITE: [wreg+status,2+status,0+pclath+cstack]
 12738                           
 12739                           
 12740                           ;i2c_master.c: 262: i2c_driver_restart();
 12741  098C  3189  2156         	fcall	i1_i2c_driver_restart
 12742                           
 12743                           ;i2c_master.c: 263: return I2C_SEND_ADR_WRITE;
 12744  098E  3002               	movlw	2
 12745  098F  0008               	return
 12746  0990                     __end_ofi1_do_I2C_SEND_RESTART_WRITE:	
 12747                           
 12748                           	psect	text90
 12749  0988                     __ptext90:	
 12750 ;; *************** function i1_do_I2C_SEND_RESTART_READ *****************
 12751 ;; Defined at:
 12752 ;;		line 254 in file "mcc_generated_files/drivers/i2c_master.c"
 12753 ;; Parameters:    Size  Location     Type
 12754 ;;		None
 12755 ;; Auto vars:     Size  Location     Type
 12756 ;;		None
 12757 ;; Return value:  Size  Location     Type
 12758 ;;                  1    wreg      enum E12337
 12759 ;; Registers used:
 12760 ;;		wreg, status,2, status,0, pclath, cstack
 12761 ;; Tracked objects:
 12762 ;;		On entry : 0/0
 12763 ;;		On exit  : 0/0
 12764 ;;		Unchanged: 0/0
 12765 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12766 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12767 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12768 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12769 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12770 ;;Total ram usage:        0 bytes
 12771 ;; Hardware stack levels used:    1
 12772 ;; Hardware stack levels required when called:    1
 12773 ;; This function calls:
 12774 ;;		i1_i2c_driver_restart
 12775 ;; This function is called by:
 12776 ;;		i1_do_I2C_TX
 12777 ;; This function uses a non-reentrant model
 12778 ;;
 12779                           
 12780                           
 12781                           ;psect for function i1_do_I2C_SEND_RESTART_READ
 12782  0988                     i1_do_I2C_SEND_RESTART_READ:	
 12783  0988                     i1l3380:	
 12784                           ;incstack = 0
 12785 ;; hardware stack exceeded
 12786                           ; Regs used in i1_do_I2C_SEND_RESTART_READ: [wreg+status,2+status,0+pclath+cstack]
 12787                           
 12788                           
 12789                           ;i2c_master.c: 256: i2c_driver_restart();
 12790  0988  3189  2156         	fcall	i1_i2c_driver_restart
 12791                           
 12792                           ;i2c_master.c: 257: return I2C_SEND_ADR_READ;
 12793  098A  3001               	movlw	1
 12794  098B  0008               	return
 12795  098C                     __end_ofi1_do_I2C_SEND_RESTART_READ:	
 12796                           
 12797                           	psect	text91
 12798  09B5                     __ptext91:	
 12799 ;; *************** function i1_do_I2C_IDLE *****************
 12800 ;; Defined at:
 12801 ;;		line 247 in file "mcc_generated_files/drivers/i2c_master.c"
 12802 ;; Parameters:    Size  Location     Type
 12803 ;;		None
 12804 ;; Auto vars:     Size  Location     Type
 12805 ;;		None
 12806 ;; Return value:  Size  Location     Type
 12807 ;;                  1    wreg      enum E12337
 12808 ;; Registers used:
 12809 ;;		wreg, status,2
 12810 ;; Tracked objects:
 12811 ;;		On entry : 0/0
 12812 ;;		On exit  : 0/0
 12813 ;;		Unchanged: 0/0
 12814 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12815 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12816 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12817 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12818 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12819 ;;Total ram usage:        0 bytes
 12820 ;; Hardware stack levels used:    1
 12821 ;; This function calls:
 12822 ;;		Nothing
 12823 ;; This function is called by:
 12824 ;; This function uses a non-reentrant model
 12825 ;;
 12826                           
 12827                           
 12828                           ;psect for function i1_do_I2C_IDLE
 12829  09B5                     i1_do_I2C_IDLE:	
 12830  09B5                     i1l3580:	
 12831                           ;incstack = 0
 12832                           ; Regs used in i1_do_I2C_IDLE: [wreg+status,2]
 12833                           
 12834                           
 12835                           ;i2c_master.c: 249: i2c_status.busy = 0;
 12836  09B5  0021               	movlb	1	; select bank1
 12837  09B6  1020               	bcf	_i2c_status^(0+128),0
 12838                           
 12839                           ;i2c_master.c: 250: i2c_status.error = I2C_NOERR;
 12840  09B7  01AB               	clrf	(_i2c_status^(0+128)+11)
 12841                           
 12842                           ;i2c_master.c: 251: return I2C_RESET;
 12843  09B8  300E               	movlw	14
 12844  09B9  0008               	return
 12845  09BA                     __end_ofi1_do_I2C_IDLE:	
 12846                           
 12847                           	psect	text92
 12848  0A07                     __ptext92:	
 12849 ;; *************** function i1_do_I2C_RESET *****************
 12850 ;; Defined at:
 12851 ;;		line 239 in file "mcc_generated_files/drivers/i2c_master.c"
 12852 ;; Parameters:    Size  Location     Type
 12853 ;;		None
 12854 ;; Auto vars:     Size  Location     Type
 12855 ;;		None
 12856 ;; Return value:  Size  Location     Type
 12857 ;;                  1    wreg      enum E12337
 12858 ;; Registers used:
 12859 ;;		wreg, status,2, status,0, pclath, cstack
 12860 ;; Tracked objects:
 12861 ;;		On entry : 0/0
 12862 ;;		On exit  : 0/0
 12863 ;;		Unchanged: 0/0
 12864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12865 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12866 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12867 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12868 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12869 ;;Total ram usage:        0 bytes
 12870 ;; Hardware stack levels used:    1
 12871 ;; Hardware stack levels required when called:    1
 12872 ;; This function calls:
 12873 ;;		i1_i2c_driver_resetBus
 12874 ;; This function is called by:
 12875 ;; This function uses a non-reentrant model
 12876 ;;
 12877                           
 12878                           
 12879                           ;psect for function i1_do_I2C_RESET
 12880  0A07                     i1_do_I2C_RESET:	
 12881  0A07                     i1l3570:	
 12882                           ;incstack = 0
 12883 ;; hardware stack exceeded
 12884                           ; Regs used in i1_do_I2C_RESET: [wreg+status,2+status,0+pclath+cstack]
 12885                           
 12886                           
 12887                           ;i2c_master.c: 241: i2c_driver_resetBus();
 12888  0A07  3189  214B         	fcall	i1_i2c_driver_resetBus
 12889                           
 12890                           ;i2c_master.c: 242: i2c_status.busy = 0;
 12891  0A09  0021               	movlb	1	; select bank1
 12892  0A0A  1020               	bcf	_i2c_status^(0+128),0
 12893                           
 12894                           ;i2c_master.c: 243: i2c_status.error = I2C_NOERR;
 12895  0A0B  01AB               	clrf	(_i2c_status^(0+128)+11)
 12896                           
 12897                           ;i2c_master.c: 244: return I2C_RESET;
 12898  0A0C  300E               	movlw	14
 12899  0A0D  0008               	return
 12900  0A0E                     __end_ofi1_do_I2C_RESET:	
 12901                           
 12902                           	psect	text93
 12903  0D98                     __ptext93:	
 12904 ;; *************** function i1_do_I2C_TX_EMPTY *****************
 12905 ;; Defined at:
 12906 ;;		line 382 in file "mcc_generated_files/drivers/i2c_master.c"
 12907 ;; Parameters:    Size  Location     Type
 12908 ;;		None
 12909 ;; Auto vars:     Size  Location     Type
 12910 ;;		None
 12911 ;; Return value:  Size  Location     Type
 12912 ;;                  1    wreg      enum E12337
 12913 ;; Registers used:
 12914 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12915 ;; Tracked objects:
 12916 ;;		On entry : 0/0
 12917 ;;		On exit  : 0/0
 12918 ;;		Unchanged: 0/0
 12919 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12920 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12921 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12922 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12923 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12924 ;;Total ram usage:        1 bytes
 12925 ;; Hardware stack levels used:    1
 12926 ;; Hardware stack levels required when called:    3
 12927 ;; This function calls:
 12928 ;;		Absolute function
 12929 ;;		i1_do_I2C_SEND_RESTART
 12930 ;;		i1_do_I2C_SEND_STOP
 12931 ;;		i1_i2c_restartWrite
 12932 ;;		i1_mssp_setIRQ
 12933 ;;		i1_rd1RegCompleteHandler
 12934 ;;		i1_rd2RegCompleteHandler
 12935 ;;		i1_rdBlkRegCompleteHandler
 12936 ;;		i1_returnReset
 12937 ;;		i1_returnStop
 12938 ;;		i1_wr1RegCompleteHandler
 12939 ;;		i1_wr2RegCompleteHandler
 12940 ;; This function is called by:
 12941 ;; This function uses a non-reentrant model
 12942 ;;
 12943                           
 12944                           
 12945                           ;psect for function i1_do_I2C_TX_EMPTY
 12946  0D98                     i1_do_I2C_TX_EMPTY:	
 12947  0D98                     i1l6858:	
 12948                           ;incstack = 0
 12949 ;; hardware stack exceeded
 12950                           ; Regs used in i1_do_I2C_TX_EMPTY: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12951                           
 12952                           
 12953                           ;i2c_master.c: 384: i2c_status.bufferFree = 1;
 12954  0D98  0021               	movlb	1	; select bank1
 12955  0D99  1520               	bsf	_i2c_status^(0+128),2
 12956                           
 12957                           ;i2c_master.c: 385: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
 12958  0D9A  2DA5               	goto	i1l6876
 12959  0D9B                     i1l6860:	
 12960                           ;i2c_master.c: 386: {
 12961                           ;i2c_master.c: 387: case i2c_restart_read:
 12962                           
 12963                           
 12964                           ;i2c_master.c: 388: case i2c_restart_write:
 12965                           ;i2c_master.c: 389: return do_I2C_SEND_RESTART();
 12966  0D9B  3189  2190         	fcall	i1_do_I2C_SEND_RESTART
 12967  0D9D  0008               	return
 12968  0D9E                     i1l6864:	
 12969                           ;i2c_master.c: 390: case i2c_continue:
 12970                           
 12971                           
 12972                           ;i2c_master.c: 391: mssp_setIRQ();
 12973  0D9E  3189  2162         	fcall	i1_mssp_setIRQ
 12974                           
 12975                           ;i2c_master.c: 392: return I2C_TX;
 12976  0DA0  3003               	movlw	3
 12977  0DA1  0008               	return
 12978  0DA2                     i1l6870:	
 12979                           ;i2c_master.c: 394: case i2c_stop:
 12980                           
 12981                           ;i2c_master.c: 393: default:
 12982                           
 12983                           
 12984                           ;i2c_master.c: 395: return do_I2C_SEND_STOP();
 12985  0DA2  3189  2194         	fcall	i1_do_I2C_SEND_STOP
 12986                           
 12987                           ;i2c_master.c: 396: }
 12988  0DA4  0008               	return
 12989  0DA5                     i1l6876:	
 12990  0DA5  0021               	movlb	1	; select bank1
 12991  0DA6  0838               	movf	(low ((_i2c_status| 0+24)))^(0+128),w
 12992  0DA7  00FA               	movwf	??i1_do_I2C_TX_EMPTY
 12993  0DA8  087A               	movf	??i1_do_I2C_TX_EMPTY,w
 12994  0DA9  00F9               	movwf	i1returnStop@p
 12995  0DAA  300C               	movlw	12
 12996  0DAB  3EA0               	addlw	(low (_i2c_status| 0))& (0+255)
 12997  0DAC  0086               	movwf	6
 12998  0DAD  0187               	clrf	7
 12999  0DAE  3F41               	moviw [1]fsr1
 13000  0DAF  008A               	movwf	10
 13001  0DB0  3F40               	moviw [0]fsr1
 13002  0DB1  000A               	callw
 13003  0DB2  318D               	pagesel	$
 13004                           
 13005                           ; Switch size 1, requested type "space"
 13006                           ; Number of cases is 4, Range of values is 1 to 4
 13007                           ; switch strategies available:
 13008                           ; Name         Instructions Cycles
 13009                           ; simple_byte           13     7 (average)
 13010                           ; direct_byte           17     9 (fixed)
 13011                           ; jumptable            263     9 (fixed)
 13012                           ;	Chosen strategy is simple_byte
 13013  0DB3  3A01               	xorlw	1	; case 1
 13014  0DB4  1903               	skipnz
 13015  0DB5  2DA2               	goto	i1l6870
 13016  0DB6  3A03               	xorlw	3	; case 2
 13017  0DB7  1903               	skipnz
 13018  0DB8  2D9B               	goto	i1l6860
 13019  0DB9  3A01               	xorlw	1	; case 3
 13020  0DBA  1903               	skipnz
 13021  0DBB  2D9B               	goto	i1l6860
 13022  0DBC  3A07               	xorlw	7	; case 4
 13023  0DBD  1903               	skipnz
 13024  0DBE  2D9E               	goto	i1l6864
 13025  0DBF  2DA2               	goto	i1l6870
 13026  0DC0  0008               	return
 13027  0DC1                     __end_ofi1_do_I2C_TX_EMPTY:	
 13028                           
 13029                           	psect	text94
 13030  0962                     __ptext94:	
 13031 ;; *************** function i1_mssp_setIRQ *****************
 13032 ;; Defined at:
 13033 ;;		line 58 in file "mcc_generated_files/i2c_driver.c"
 13034 ;; Parameters:    Size  Location     Type
 13035 ;;		None
 13036 ;; Auto vars:     Size  Location     Type
 13037 ;;		None
 13038 ;; Return value:  Size  Location     Type
 13039 ;;                  1    wreg      void 
 13040 ;; Registers used:
 13041 ;;		None
 13042 ;; Tracked objects:
 13043 ;;		On entry : 0/0
 13044 ;;		On exit  : 0/0
 13045 ;;		Unchanged: 0/0
 13046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13047 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13048 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13049 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13050 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13051 ;;Total ram usage:        0 bytes
 13052 ;; Hardware stack levels used:    1
 13053 ;; This function calls:
 13054 ;;		Nothing
 13055 ;; This function is called by:
 13056 ;;		i1_do_I2C_TX_EMPTY
 13057 ;; This function uses a non-reentrant model
 13058 ;;
 13059                           
 13060                           
 13061                           ;psect for function i1_mssp_setIRQ
 13062  0962                     i1_mssp_setIRQ:	
 13063                           
 13064                           ;i2c_driver.c: 60: PIR1bits.SSP1IF = 1;
 13065                           
 13066                           ;incstack = 0
 13067 ;; hardware stack exceeded
 13068                           ; Regs used in i1_mssp_setIRQ: []
 13069  0962  0020               	movlb	0	; select bank0
 13070  0963  1590               	bsf	16,3	;volatile
 13071  0964  0008               	return
 13072  0965                     __end_ofi1_mssp_setIRQ:	
 13073                           
 13074                           	psect	text95
 13075  0ABE                     __ptext95:	
 13076 ;; *************** function i1_i2c_driver_isNACK *****************
 13077 ;; Defined at:
 13078 ;;		line 161 in file "mcc_generated_files/i2c_driver.c"
 13079 ;; Parameters:    Size  Location     Type
 13080 ;;		None
 13081 ;; Auto vars:     Size  Location     Type
 13082 ;;		None
 13083 ;; Return value:  Size  Location     Type
 13084 ;;		None               void
 13085 ;; Registers used:
 13086 ;;		wreg, status,2, status,0
 13087 ;; Tracked objects:
 13088 ;;		On entry : 0/0
 13089 ;;		On exit  : 0/0
 13090 ;;		Unchanged: 0/0
 13091 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13092 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13093 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13094 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13095 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13096 ;;Total ram usage:        1 bytes
 13097 ;; Hardware stack levels used:    1
 13098 ;; This function calls:
 13099 ;;		Nothing
 13100 ;; This function is called by:
 13101 ;;		i1_do_I2C_TX
 13102 ;;		i1_i2c_ISR
 13103 ;; This function uses a non-reentrant model
 13104 ;;
 13105                           
 13106                           
 13107                           ;psect for function i1_i2c_driver_isNACK
 13108  0ABE                     i1_i2c_driver_isNACK:	
 13109                           
 13110                           ;i2c_driver.c: 163: return SSP1CON2bits.ACKSTAT = 1;
 13111                           
 13112                           ;incstack = 0
 13113                           ; Regs used in i1_i2c_driver_isNACK: [wreg+status,2+status,0]
 13114  0ABE  0024               	movlb	4	; select bank4
 13115  0ABF  0816               	movf	22,w	;volatile
 13116  0AC0  39BF               	andlw	-65
 13117  0AC1  3840               	iorlw	64
 13118  0AC2  0096               	movwf	22	;volatile
 13119  0AC3  0E16               	swapf	22,w	;volatile
 13120  0AC4  0C89               	rrf	9,f
 13121  0AC5  0C89               	rrf	9,f
 13122  0AC6  3901               	andlw	1
 13123  0AC7  00F0               	movwf	??i1_i2c_driver_isNACK
 13124  0AC8  0C70               	rrf	??i1_i2c_driver_isNACK,w
 13125  0AC9  0008               	return
 13126  0ACA                     __end_ofi1_i2c_driver_isNACK:	
 13127                           
 13128                           	psect	text96
 13129  09B0                     __ptext96:	
 13130 ;; *************** function i1_i2c_driver_TXData *****************
 13131 ;; Defined at:
 13132 ;;		line 186 in file "mcc_generated_files/i2c_driver.c"
 13133 ;; Parameters:    Size  Location     Type
 13134 ;;  d               1    wreg     unsigned char 
 13135 ;; Auto vars:     Size  Location     Type
 13136 ;;  d               1    0[COMMON] unsigned char 
 13137 ;; Return value:  Size  Location     Type
 13138 ;;                  1    wreg      void 
 13139 ;; Registers used:
 13140 ;;		wreg
 13141 ;; Tracked objects:
 13142 ;;		On entry : 0/0
 13143 ;;		On exit  : 0/0
 13144 ;;		Unchanged: 0/0
 13145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13146 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13147 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13148 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13149 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13150 ;;Total ram usage:        1 bytes
 13151 ;; Hardware stack levels used:    1
 13152 ;; This function calls:
 13153 ;;		Nothing
 13154 ;; This function is called by:
 13155 ;;		i1_do_I2C_SEND_ADR_READ
 13156 ;;		i1_do_I2C_SEND_ADR_WRITE
 13157 ;;		i1_do_I2C_TX
 13158 ;; This function uses a non-reentrant model
 13159 ;;
 13160                           
 13161                           
 13162                           ;psect for function i1_i2c_driver_TXData
 13163  09B0                     i1_i2c_driver_TXData:	
 13164                           
 13165                           ;incstack = 0
 13166 ;; hardware stack exceeded
 13167                           ; Regs used in i1_i2c_driver_TXData: [wreg]
 13168                           ;i1i2c_driver_TXData@d stored from wreg
 13169  09B0  00F0               	movwf	i1i2c_driver_TXData@d
 13170                           
 13171                           ;i2c_driver.c: 188: SSP1BUF = d;
 13172  09B1  0870               	movf	i1i2c_driver_TXData@d,w
 13173  09B2  0024               	movlb	4	; select bank4
 13174  09B3  0091               	movwf	17	;volatile
 13175  09B4  0008               	return
 13176  09B5                     __end_ofi1_i2c_driver_TXData:	
 13177                           
 13178                           	psect	text97
 13179  095F                     __ptext97:	
 13180 ;; *************** function i1_i2c_driver_getRXData *****************
 13181 ;; Defined at:
 13182 ;;		line 171 in file "mcc_generated_files/i2c_driver.c"
 13183 ;; Parameters:    Size  Location     Type
 13184 ;;		None
 13185 ;; Auto vars:     Size  Location     Type
 13186 ;;		None
 13187 ;; Return value:  Size  Location     Type
 13188 ;;                  1    wreg      unsigned char 
 13189 ;; Registers used:
 13190 ;;		wreg
 13191 ;; Tracked objects:
 13192 ;;		On entry : 0/0
 13193 ;;		On exit  : 0/0
 13194 ;;		Unchanged: 0/0
 13195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13196 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13197 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13198 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13199 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13200 ;;Total ram usage:        0 bytes
 13201 ;; Hardware stack levels used:    1
 13202 ;; This function calls:
 13203 ;;		Nothing
 13204 ;; This function is called by:
 13205 ;;		i1_do_I2C_RX
 13206 ;; This function uses a non-reentrant model
 13207 ;;
 13208                           
 13209                           
 13210                           ;psect for function i1_i2c_driver_getRXData
 13211  095F                     i1_i2c_driver_getRXData:	
 13212                           
 13213                           ;i2c_driver.c: 173: return SSP1BUF;
 13214                           
 13215                           ;incstack = 0
 13216 ;; hardware stack exceeded
 13217                           ; Regs used in i1_i2c_driver_getRXData: [wreg]
 13218  095F  0024               	movlb	4	; select bank4
 13219  0960  0811               	movf	17,w	;volatile
 13220  0961  0008               	return
 13221  0962                     __end_ofi1_i2c_driver_getRXData:	
 13222                           
 13223                           	psect	text98
 13224  0984                     __ptext98:	
 13225 ;; *************** function i1_i2c_driver_sendNACK *****************
 13226 ;; Defined at:
 13227 ;;		line 202 in file "mcc_generated_files/i2c_driver.c"
 13228 ;; Parameters:    Size  Location     Type
 13229 ;;		None
 13230 ;; Auto vars:     Size  Location     Type
 13231 ;;		None
 13232 ;; Return value:  Size  Location     Type
 13233 ;;                  1    wreg      void 
 13234 ;; Registers used:
 13235 ;;		None
 13236 ;; Tracked objects:
 13237 ;;		On entry : 0/0
 13238 ;;		On exit  : 0/0
 13239 ;;		Unchanged: 0/0
 13240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13241 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13242 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13243 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13244 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13245 ;;Total ram usage:        0 bytes
 13246 ;; Hardware stack levels used:    1
 13247 ;; This function calls:
 13248 ;;		Nothing
 13249 ;; This function is called by:
 13250 ;;		i1_do_I2C_DO_NACK_STOP
 13251 ;;		i1_do_I2C_DO_NACK_RESTART
 13252 ;; This function uses a non-reentrant model
 13253 ;;
 13254                           
 13255                           
 13256                           ;psect for function i1_i2c_driver_sendNACK
 13257  0984                     i1_i2c_driver_sendNACK:	
 13258                           
 13259                           ;i2c_driver.c: 204: SSP1CON2bits.ACKDT = 1;
 13260                           
 13261                           ;incstack = 0
 13262 ;; hardware stack exceeded
 13263                           ; Regs used in i1_i2c_driver_sendNACK: []
 13264  0984  0024               	movlb	4	; select bank4
 13265  0985  1696               	bsf	22,5	;volatile
 13266                           
 13267                           ;i2c_driver.c: 205: SSP1CON2bits.ACKEN = 1;
 13268  0986  1616               	bsf	22,4	;volatile
 13269  0987  0008               	return
 13270  0988                     __end_ofi1_i2c_driver_sendNACK:	
 13271                           
 13272                           	psect	text99
 13273  094B                     __ptext99:	
 13274 ;; *************** function i1_i2c_driver_resetBus *****************
 13275 ;; Defined at:
 13276 ;;		line 141 in file "mcc_generated_files/i2c_driver.c"
 13277 ;; Parameters:    Size  Location     Type
 13278 ;;		None
 13279 ;; Auto vars:     Size  Location     Type
 13280 ;;		None
 13281 ;; Return value:  Size  Location     Type
 13282 ;;                  1    wreg      void 
 13283 ;; Registers used:
 13284 ;;		None
 13285 ;; Tracked objects:
 13286 ;;		On entry : 0/0
 13287 ;;		On exit  : 0/0
 13288 ;;		Unchanged: 0/0
 13289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13290 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13291 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13292 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13293 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13294 ;;Total ram usage:        0 bytes
 13295 ;; Hardware stack levels used:    1
 13296 ;; This function calls:
 13297 ;;		Nothing
 13298 ;; This function is called by:
 13299 ;;		i1_do_I2C_RESET
 13300 ;; This function uses a non-reentrant model
 13301 ;;
 13302                           
 13303                           
 13304                           ;psect for function i1_i2c_driver_resetBus
 13305  094B                     i1_i2c_driver_resetBus:	
 13306                           
 13307                           ;incstack = 0
 13308 ;; hardware stack exceeded
 13309                           ; Regs used in i1_i2c_driver_resetBus: []
 13310  094B  0008               	return
 13311  094C                     __end_ofi1_i2c_driver_resetBus:	
 13312                           
 13313                           	psect	text100
 13314  095C                     __ptext100:	
 13315 ;; *************** function i1_i2c_driver_startRX *****************
 13316 ;; Defined at:
 13317 ;;		line 166 in file "mcc_generated_files/i2c_driver.c"
 13318 ;; Parameters:    Size  Location     Type
 13319 ;;		None
 13320 ;; Auto vars:     Size  Location     Type
 13321 ;;		None
 13322 ;; Return value:  Size  Location     Type
 13323 ;;                  1    wreg      void 
 13324 ;; Registers used:
 13325 ;;		None
 13326 ;; Tracked objects:
 13327 ;;		On entry : 0/0
 13328 ;;		On exit  : 0/0
 13329 ;;		Unchanged: 0/0
 13330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13331 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13332 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13333 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13334 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13335 ;;Total ram usage:        0 bytes
 13336 ;; Hardware stack levels used:    1
 13337 ;; This function calls:
 13338 ;;		Nothing
 13339 ;; This function is called by:
 13340 ;;		i1_do_I2C_RCEN
 13341 ;; This function uses a non-reentrant model
 13342 ;;
 13343                           
 13344                           
 13345                           ;psect for function i1_i2c_driver_startRX
 13346  095C                     i1_i2c_driver_startRX:	
 13347                           
 13348                           ;i2c_driver.c: 168: SSP1CON2bits.RCEN = 1;
 13349                           
 13350                           ;incstack = 0
 13351 ;; hardware stack exceeded
 13352                           ; Regs used in i1_i2c_driver_startRX: []
 13353  095C  0024               	movlb	4	; select bank4
 13354  095D  1596               	bsf	22,3	;volatile
 13355  095E  0008               	return
 13356  095F                     __end_ofi1_i2c_driver_startRX:	
 13357                           
 13358                           	psect	text101
 13359  07FE                     __ptext101:	
 13360 ;; *************** function i1_i2c_restartWrite *****************
 13361 ;; Defined at:
 13362 ;;		line 35 in file "mcc_generated_files/drivers/i2c_types.c"
 13363 ;; Parameters:    Size  Location     Type
 13364 ;;  p               1    9[COMMON] PTR void 
 13365 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 13366 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 13367 ;; Auto vars:     Size  Location     Type
 13368 ;;		None
 13369 ;; Return value:  Size  Location     Type
 13370 ;;                  1    wreg      enum E97
 13371 ;; Registers used:
 13372 ;;		wreg
 13373 ;; Tracked objects:
 13374 ;;		On entry : 0/0
 13375 ;;		On exit  : 0/0
 13376 ;;		Unchanged: 0/0
 13377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13378 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13379 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13380 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13381 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13382 ;;Total ram usage:        1 bytes
 13383 ;; Hardware stack levels used:    1
 13384 ;; This function calls:
 13385 ;;		Nothing
 13386 ;; This function is called by:
 13387 ;; This function uses a non-reentrant model
 13388 ;;
 13389                           
 13390                           
 13391                           ;psect for function i1_i2c_restartWrite
 13392  07FE                     i1_i2c_restartWrite:	
 13393  07FE                     i1l3424:	
 13394                           ;incstack = 0
 13395 ;; hardware stack exceeded
 13396                           ; Regs used in i1_i2c_restartWrite: [wreg]
 13397                           
 13398                           
 13399                           ;i2c_types.c: 37: return i2c_restart_write;
 13400  07FE  3003               	movlw	3
 13401  07FF  0008               	return
 13402  0800                     __end_ofi1_i2c_restartWrite:	
 13403                           
 13404                           	psect	text102
 13405  0002                     __ptext102:	
 13406 ;; *************** function i1_returnReset *****************
 13407 ;; Defined at:
 13408 ;;		line 448 in file "mcc_generated_files/drivers/i2c_master.c"
 13409 ;; Parameters:    Size  Location     Type
 13410 ;;  p               1    9[COMMON] PTR void 
 13411 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 13412 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 13413 ;; Auto vars:     Size  Location     Type
 13414 ;;		None
 13415 ;; Return value:  Size  Location     Type
 13416 ;;                  1    wreg      enum E12171
 13417 ;; Registers used:
 13418 ;;		wreg
 13419 ;; Tracked objects:
 13420 ;;		On entry : 0/0
 13421 ;;		On exit  : 0/0
 13422 ;;		Unchanged: 0/0
 13423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13424 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13425 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13426 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13427 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13428 ;;Total ram usage:        1 bytes
 13429 ;; Hardware stack levels used:    1
 13430 ;; This function calls:
 13431 ;;		Nothing
 13432 ;; This function is called by:
 13433 ;; This function uses a non-reentrant model
 13434 ;;
 13435                           
 13436                           
 13437                           ;psect for function i1_returnReset
 13438  0002                     i1_returnReset:	
 13439  0002                     i1l3420:	
 13440                           ;incstack = 0
 13441 ;; hardware stack exceeded
 13442                           ; Regs used in i1_returnReset: [wreg]
 13443                           
 13444                           
 13445                           ;i2c_master.c: 450: return i2c_reset_link;
 13446  0002  3005               	movlw	5
 13447  0003  0008               	return
 13448  0004                     __end_ofi1_returnReset:	
 13449                           
 13450                           	psect	text103
 13451  094E                     __ptext103:	
 13452 ;; *************** function i1_returnStop *****************
 13453 ;; Defined at:
 13454 ;;		line 443 in file "mcc_generated_files/drivers/i2c_master.c"
 13455 ;; Parameters:    Size  Location     Type
 13456 ;;  p               1    9[COMMON] PTR void 
 13457 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 13458 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 13459 ;; Auto vars:     Size  Location     Type
 13460 ;;		None
 13461 ;; Return value:  Size  Location     Type
 13462 ;;                  1    wreg      enum E12171
 13463 ;; Registers used:
 13464 ;;		wreg
 13465 ;; Tracked objects:
 13466 ;;		On entry : 0/0
 13467 ;;		On exit  : 0/0
 13468 ;;		Unchanged: 0/0
 13469 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13470 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13471 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13472 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13473 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13474 ;;Total ram usage:        1 bytes
 13475 ;; Hardware stack levels used:    1
 13476 ;; This function calls:
 13477 ;;		Nothing
 13478 ;; This function is called by:
 13479 ;;		i1_setCallBack
 13480 ;;		_do_I2C_DO_ADDRESS_NACK
 13481 ;;		_do_I2C_TX
 13482 ;;		_do_I2C_RX
 13483 ;;		_do_I2C_TX_EMPTY
 13484 ;;		i1_do_I2C_DO_ADDRESS_NACK
 13485 ;;		i1_do_I2C_TX
 13486 ;;		i1_do_I2C_RX
 13487 ;;		i1_do_I2C_TX_EMPTY
 13488 ;; This function uses a non-reentrant model
 13489 ;;
 13490                           
 13491                           
 13492                           ;psect for function i1_returnStop
 13493  094E                     i1_returnStop:	
 13494  094E                     i1l3416:	
 13495                           ;incstack = 0
 13496 ;; hardware stack exceeded
 13497                           ; Regs used in i1_returnStop: [wreg]
 13498                           
 13499                           
 13500                           ;i2c_master.c: 445: return i2c_stop;
 13501  094E  3001               	movlw	1
 13502  094F  0008               	return
 13503  0950                     __end_ofi1_returnStop:	
 13504                           
 13505                           	psect	text104
 13506  0BA0                     __ptext104:	
 13507 ;; *************** function i1_rdBlkRegCompleteHandler *****************
 13508 ;; Defined at:
 13509 ;;		line 134 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 13510 ;; Parameters:    Size  Location     Type
 13511 ;;  p               1    9[COMMON] PTR void 
 13512 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 13513 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 13514 ;; Auto vars:     Size  Location     Type
 13515 ;;		None
 13516 ;; Return value:  Size  Location     Type
 13517 ;;                  1    wreg      enum E97
 13518 ;; Registers used:
 13519 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13520 ;; Tracked objects:
 13521 ;;		On entry : 0/0
 13522 ;;		On exit  : 0/0
 13523 ;;		Unchanged: 0/0
 13524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13525 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13526 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13527 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13528 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13529 ;;Total ram usage:        1 bytes
 13530 ;; Hardware stack levels used:    1
 13531 ;; Hardware stack levels required when called:    2
 13532 ;; This function calls:
 13533 ;;		i1_i2c_setBuffer
 13534 ;;		i1_i2c_setDataCompleteCallback
 13535 ;; This function is called by:
 13536 ;; This function uses a non-reentrant model
 13537 ;;
 13538                           
 13539                           
 13540                           ;psect for function i1_rdBlkRegCompleteHandler
 13541  0BA0                     i1_rdBlkRegCompleteHandler:	
 13542  0BA0                     i1l3374:	
 13543                           ;incstack = 0
 13544 ;; hardware stack exceeded
 13545                           ; Regs used in i1_rdBlkRegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 13546                           
 13547                           
 13548                           ;i2c_simple_master.c: 136: i2c_setBuffer(((buf_t *)p)->data,((buf_t*)p)->len);
 13549  0BA0  0879               	movf	i1rdBlkRegCompleteHandler@p,w
 13550  0BA1  3E02               	addlw	2
 13551  0BA2  0086               	movwf	6
 13552  0BA3  0187               	clrf	7
 13553  0BA4  0801               	movf	1,w
 13554  0BA5  00F0               	movwf	i1i2c_setBuffer@buffer
 13555  0BA6  3000               	movlw	0
 13556  0BA7  00F1               	movwf	i1i2c_setBuffer@buffer+1
 13557  0BA8  0879               	movf	i1rdBlkRegCompleteHandler@p,w
 13558  0BA9  0086               	movwf	6
 13559  0BAA  0187               	clrf	7
 13560  0BAB  3F40               	moviw [0]fsr1
 13561  0BAC  00F2               	movwf	i1i2c_setBuffer@bufferSize
 13562  0BAD  3F41               	moviw [1]fsr1
 13563  0BAE  00F3               	movwf	i1i2c_setBuffer@bufferSize+1
 13564  0BAF  318A  22F0  318B   	fcall	i1_i2c_setBuffer
 13565                           
 13566                           ;i2c_simple_master.c: 137: i2c_setDataCompleteCallback((0),(0));
 13567  0BB2  3000               	movlw	0
 13568  0BB3  00F5               	movwf	i1i2c_setDataCompleteCallback@cb
 13569  0BB4  00F6               	movwf	i1i2c_setDataCompleteCallback@cb+1
 13570  0BB5  01F7               	clrf	i1i2c_setDataCompleteCallback@p
 13571  0BB6  318A  22B2         	fcall	i1_i2c_setDataCompleteCallback
 13572                           
 13573                           ;i2c_simple_master.c: 138: return i2c_restart_read;
 13574  0BB8  3002               	movlw	2
 13575  0BB9  0008               	return
 13576  0BBA                     __end_ofi1_rdBlkRegCompleteHandler:	
 13577                           
 13578                           	psect	text105
 13579  0B76                     __ptext105:	
 13580 ;; *************** function i1_rd2RegCompleteHandler *****************
 13581 ;; Defined at:
 13582 ;;		line 87 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 13583 ;; Parameters:    Size  Location     Type
 13584 ;;  p               1    9[COMMON] PTR void 
 13585 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 13586 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 13587 ;; Auto vars:     Size  Location     Type
 13588 ;;		None
 13589 ;; Return value:  Size  Location     Type
 13590 ;;                  1    wreg      enum E97
 13591 ;; Registers used:
 13592 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13593 ;; Tracked objects:
 13594 ;;		On entry : 0/0
 13595 ;;		On exit  : 0/0
 13596 ;;		Unchanged: 0/0
 13597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13598 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13599 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13600 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13601 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13602 ;;Total ram usage:        1 bytes
 13603 ;; Hardware stack levels used:    1
 13604 ;; Hardware stack levels required when called:    2
 13605 ;; This function calls:
 13606 ;;		i1_i2c_setBuffer
 13607 ;;		i1_i2c_setDataCompleteCallback
 13608 ;; This function is called by:
 13609 ;; This function uses a non-reentrant model
 13610 ;;
 13611                           
 13612                           
 13613                           ;psect for function i1_rd2RegCompleteHandler
 13614  0B76                     i1_rd2RegCompleteHandler:	
 13615  0B76                     i1l3358:	
 13616                           ;incstack = 0
 13617 ;; hardware stack exceeded
 13618                           ; Regs used in i1_rd2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 13619                           
 13620                           
 13621                           ;i2c_simple_master.c: 89: i2c_setBuffer(p,2);
 13622  0B76  0879               	movf	i1rd2RegCompleteHandler@p,w
 13623  0B77  00F0               	movwf	i1i2c_setBuffer@buffer
 13624  0B78  39FF               	andlw	255
 13625  0B79  1D03               	skipz
 13626  0B7A  3000               	movlw	0
 13627  0B7B  00F1               	movwf	i1i2c_setBuffer@buffer+1
 13628  0B7C  3002               	movlw	2
 13629  0B7D  00F2               	movwf	i1i2c_setBuffer@bufferSize
 13630  0B7E  3000               	movlw	0
 13631  0B7F  00F3               	movwf	i1i2c_setBuffer@bufferSize+1
 13632  0B80  318A  22F0  318B   	fcall	i1_i2c_setBuffer
 13633                           
 13634                           ;i2c_simple_master.c: 90: i2c_setDataCompleteCallback((0),(0));
 13635  0B83  3000               	movlw	0
 13636  0B84  00F5               	movwf	i1i2c_setDataCompleteCallback@cb
 13637  0B85  00F6               	movwf	i1i2c_setDataCompleteCallback@cb+1
 13638  0B86  01F7               	clrf	i1i2c_setDataCompleteCallback@p
 13639  0B87  318A  22B2         	fcall	i1_i2c_setDataCompleteCallback
 13640                           
 13641                           ;i2c_simple_master.c: 91: return i2c_restart_read;
 13642  0B89  3002               	movlw	2
 13643  0B8A  0008               	return
 13644  0B8B                     __end_ofi1_rd2RegCompleteHandler:	
 13645                           
 13646                           	psect	text106
 13647  0B61                     __ptext106:	
 13648 ;; *************** function i1_rd1RegCompleteHandler *****************
 13649 ;; Defined at:
 13650 ;;		line 58 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 13651 ;; Parameters:    Size  Location     Type
 13652 ;;  p               1    9[COMMON] PTR void 
 13653 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 13654 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 13655 ;; Auto vars:     Size  Location     Type
 13656 ;;		None
 13657 ;; Return value:  Size  Location     Type
 13658 ;;                  1    wreg      enum E97
 13659 ;; Registers used:
 13660 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13661 ;; Tracked objects:
 13662 ;;		On entry : 0/0
 13663 ;;		On exit  : 0/0
 13664 ;;		Unchanged: 0/0
 13665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13666 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13667 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13668 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13669 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13670 ;;Total ram usage:        1 bytes
 13671 ;; Hardware stack levels used:    1
 13672 ;; Hardware stack levels required when called:    2
 13673 ;; This function calls:
 13674 ;;		i1_i2c_setBuffer
 13675 ;;		i1_i2c_setDataCompleteCallback
 13676 ;; This function is called by:
 13677 ;; This function uses a non-reentrant model
 13678 ;;
 13679                           
 13680                           
 13681                           ;psect for function i1_rd1RegCompleteHandler
 13682  0B61                     i1_rd1RegCompleteHandler:	
 13683  0B61                     i1l3350:	
 13684                           ;incstack = 0
 13685 ;; hardware stack exceeded
 13686                           ; Regs used in i1_rd1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 13687                           
 13688                           
 13689                           ;i2c_simple_master.c: 60: i2c_setBuffer(p,1);
 13690  0B61  0879               	movf	i1rd1RegCompleteHandler@p,w
 13691  0B62  00F0               	movwf	i1i2c_setBuffer@buffer
 13692  0B63  39FF               	andlw	255
 13693  0B64  1D03               	skipz
 13694  0B65  3000               	movlw	0
 13695  0B66  00F1               	movwf	i1i2c_setBuffer@buffer+1
 13696  0B67  3001               	movlw	1
 13697  0B68  00F2               	movwf	i1i2c_setBuffer@bufferSize
 13698  0B69  3000               	movlw	0
 13699  0B6A  00F3               	movwf	i1i2c_setBuffer@bufferSize+1
 13700  0B6B  318A  22F0  318B   	fcall	i1_i2c_setBuffer
 13701                           
 13702                           ;i2c_simple_master.c: 61: i2c_setDataCompleteCallback((0),(0));
 13703  0B6E  3000               	movlw	0
 13704  0B6F  00F5               	movwf	i1i2c_setDataCompleteCallback@cb
 13705  0B70  00F6               	movwf	i1i2c_setDataCompleteCallback@cb+1
 13706  0B71  01F7               	clrf	i1i2c_setDataCompleteCallback@p
 13707  0B72  318A  22B2         	fcall	i1_i2c_setDataCompleteCallback
 13708                           
 13709                           ;i2c_simple_master.c: 62: return i2c_restart_read;
 13710  0B74  3002               	movlw	2
 13711  0B75  0008               	return
 13712  0B76                     __end_ofi1_rd1RegCompleteHandler:	
 13713                           
 13714                           	psect	text107
 13715  0B4C                     __ptext107:	
 13716 ;; *************** function i1_wr1RegCompleteHandler *****************
 13717 ;; Defined at:
 13718 ;;		line 31 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 13719 ;; Parameters:    Size  Location     Type
 13720 ;;  p               1    9[COMMON] PTR void 
 13721 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 13722 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 13723 ;; Auto vars:     Size  Location     Type
 13724 ;;		None
 13725 ;; Return value:  Size  Location     Type
 13726 ;;                  1    wreg      enum E97
 13727 ;; Registers used:
 13728 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13729 ;; Tracked objects:
 13730 ;;		On entry : 0/0
 13731 ;;		On exit  : 0/0
 13732 ;;		Unchanged: 0/0
 13733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13734 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13735 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13736 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13737 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13738 ;;Total ram usage:        1 bytes
 13739 ;; Hardware stack levels used:    1
 13740 ;; Hardware stack levels required when called:    2
 13741 ;; This function calls:
 13742 ;;		i1_i2c_setBuffer
 13743 ;;		i1_i2c_setDataCompleteCallback
 13744 ;; This function is called by:
 13745 ;; This function uses a non-reentrant model
 13746 ;;
 13747                           
 13748                           
 13749                           ;psect for function i1_wr1RegCompleteHandler
 13750  0B4C                     i1_wr1RegCompleteHandler:	
 13751  0B4C                     i1l3342:	
 13752                           ;incstack = 0
 13753 ;; hardware stack exceeded
 13754                           ; Regs used in i1_wr1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 13755                           
 13756                           
 13757                           ;i2c_simple_master.c: 33: i2c_setBuffer(p,1);
 13758  0B4C  0879               	movf	i1wr1RegCompleteHandler@p,w
 13759  0B4D  00F0               	movwf	i1i2c_setBuffer@buffer
 13760  0B4E  39FF               	andlw	255
 13761  0B4F  1D03               	skipz
 13762  0B50  3000               	movlw	0
 13763  0B51  00F1               	movwf	i1i2c_setBuffer@buffer+1
 13764  0B52  3001               	movlw	1
 13765  0B53  00F2               	movwf	i1i2c_setBuffer@bufferSize
 13766  0B54  3000               	movlw	0
 13767  0B55  00F3               	movwf	i1i2c_setBuffer@bufferSize+1
 13768  0B56  318A  22F0  318B   	fcall	i1_i2c_setBuffer
 13769                           
 13770                           ;i2c_simple_master.c: 34: i2c_setDataCompleteCallback((0),(0));
 13771  0B59  3000               	movlw	0
 13772  0B5A  00F5               	movwf	i1i2c_setDataCompleteCallback@cb
 13773  0B5B  00F6               	movwf	i1i2c_setDataCompleteCallback@cb+1
 13774  0B5C  01F7               	clrf	i1i2c_setDataCompleteCallback@p
 13775  0B5D  318A  22B2         	fcall	i1_i2c_setDataCompleteCallback
 13776                           
 13777                           ;i2c_simple_master.c: 35: return i2c_continue;
 13778  0B5F  3004               	movlw	4
 13779  0B60  0008               	return
 13780  0B61                     __end_ofi1_wr1RegCompleteHandler:	
 13781                           
 13782                           	psect	text108
 13783  0B37                     __ptext108:	
 13784 ;; *************** function i1_wr2RegCompleteHandler *****************
 13785 ;; Defined at:
 13786 ;;		line 110 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 13787 ;; Parameters:    Size  Location     Type
 13788 ;;  p               1    9[COMMON] PTR void 
 13789 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 13790 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 13791 ;; Auto vars:     Size  Location     Type
 13792 ;;		None
 13793 ;; Return value:  Size  Location     Type
 13794 ;;                  1    wreg      enum E97
 13795 ;; Registers used:
 13796 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13797 ;; Tracked objects:
 13798 ;;		On entry : 0/0
 13799 ;;		On exit  : 0/0
 13800 ;;		Unchanged: 0/0
 13801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13802 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13803 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13804 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13805 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13806 ;;Total ram usage:        1 bytes
 13807 ;; Hardware stack levels used:    1
 13808 ;; Hardware stack levels required when called:    2
 13809 ;; This function calls:
 13810 ;;		i1_i2c_setBuffer
 13811 ;;		i1_i2c_setDataCompleteCallback
 13812 ;; This function is called by:
 13813 ;; This function uses a non-reentrant model
 13814 ;;
 13815                           
 13816                           
 13817                           ;psect for function i1_wr2RegCompleteHandler
 13818  0B37                     i1_wr2RegCompleteHandler:	
 13819  0B37                     i1l3366:	
 13820                           ;incstack = 0
 13821 ;; hardware stack exceeded
 13822                           ; Regs used in i1_wr2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 13823                           
 13824                           
 13825                           ;i2c_simple_master.c: 112: i2c_setBuffer(p,2);
 13826  0B37  0879               	movf	i1wr2RegCompleteHandler@p,w
 13827  0B38  00F0               	movwf	i1i2c_setBuffer@buffer
 13828  0B39  39FF               	andlw	255
 13829  0B3A  1D03               	skipz
 13830  0B3B  3000               	movlw	0
 13831  0B3C  00F1               	movwf	i1i2c_setBuffer@buffer+1
 13832  0B3D  3002               	movlw	2
 13833  0B3E  00F2               	movwf	i1i2c_setBuffer@bufferSize
 13834  0B3F  3000               	movlw	0
 13835  0B40  00F3               	movwf	i1i2c_setBuffer@bufferSize+1
 13836  0B41  318A  22F0  318B   	fcall	i1_i2c_setBuffer
 13837                           
 13838                           ;i2c_simple_master.c: 113: i2c_setDataCompleteCallback((0),(0));
 13839  0B44  3000               	movlw	0
 13840  0B45  00F5               	movwf	i1i2c_setDataCompleteCallback@cb
 13841  0B46  00F6               	movwf	i1i2c_setDataCompleteCallback@cb+1
 13842  0B47  01F7               	clrf	i1i2c_setDataCompleteCallback@p
 13843  0B48  318A  22B2         	fcall	i1_i2c_setDataCompleteCallback
 13844                           
 13845                           ;i2c_simple_master.c: 114: return i2c_continue;
 13846  0B4A  3004               	movlw	4
 13847  0B4B  0008               	return
 13848  0B4C                     __end_ofi1_wr2RegCompleteHandler:	
 13849                           
 13850                           	psect	text109
 13851  0AB2                     __ptext109:	
 13852 ;; *************** function i1_i2c_setDataCompleteCallback *****************
 13853 ;; Defined at:
 13854 ;;		line 89 in file "mcc_generated_files/drivers/i2c_master.c"
 13855 ;; Parameters:    Size  Location     Type
 13856 ;;  cb              2    5[COMMON] PTR FTN(PTR void ,)enum 
 13857 ;;		 -> rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), rd2RegCompleteHandler(1), rd1RegCompleteHandler(1), 
 13858 ;;		 -> wr1RegCompleteHandler(1), Absolute function(1), 
 13859 ;;  p               1    7[COMMON] PTR void 
 13860 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 13861 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 13862 ;; Auto vars:     Size  Location     Type
 13863 ;;		None
 13864 ;; Return value:  Size  Location     Type
 13865 ;;                  1    wreg      void 
 13866 ;; Registers used:
 13867 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13868 ;; Tracked objects:
 13869 ;;		On entry : 0/0
 13870 ;;		On exit  : 0/0
 13871 ;;		Unchanged: 0/0
 13872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13873 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13874 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13875 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13876 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13877 ;;Total ram usage:        4 bytes
 13878 ;; Hardware stack levels used:    1
 13879 ;; Hardware stack levels required when called:    1
 13880 ;; This function calls:
 13881 ;;		i1_setCallBack
 13882 ;; This function is called by:
 13883 ;;		i1_wr1RegCompleteHandler
 13884 ;;		i1_rd1RegCompleteHandler
 13885 ;;		i1_rd2RegCompleteHandler
 13886 ;;		i1_wr2RegCompleteHandler
 13887 ;;		i1_rdBlkRegCompleteHandler
 13888 ;; This function uses a non-reentrant model
 13889 ;;
 13890                           
 13891                           
 13892                           ;psect for function i1_i2c_setDataCompleteCallback
 13893  0AB2                     i1_i2c_setDataCompleteCallback:	
 13894                           
 13895                           ;i2c_master.c: 91: setCallBack(i2c_dataComplete,cb,p);
 13896                           
 13897                           ;incstack = 0
 13898 ;; hardware stack exceeded
 13899                           ; Regs used in i1_i2c_setDataCompleteCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclat
      +                          h+cstack]
 13900  0AB2  0876               	movf	i1i2c_setDataCompleteCallback@cb+1,w
 13901  0AB3  00F1               	movwf	i1setCallBack@cb+1
 13902  0AB4  0875               	movf	i1i2c_setDataCompleteCallback@cb,w
 13903  0AB5  00F0               	movwf	i1setCallBack@cb
 13904  0AB6  0877               	movf	i1i2c_setDataCompleteCallback@p,w
 13905  0AB7  00F8               	movwf	??i1_i2c_setDataCompleteCallback
 13906  0AB8  0878               	movf	??i1_i2c_setDataCompleteCallback,w
 13907  0AB9  00F2               	movwf	i1setCallBack@p
 13908  0ABA  3000               	movlw	0
 13909  0ABB  318D  2505         	fcall	i1_setCallBack
 13910  0ABD  0008               	return
 13911  0ABE                     __end_ofi1_i2c_setDataCompleteCallback:	
 13912                           
 13913                           	psect	text110
 13914  0D05                     __ptext110:	
 13915 ;; *************** function i1_setCallBack *****************
 13916 ;; Defined at:
 13917 ;;		line 453 in file "mcc_generated_files/drivers/i2c_master.c"
 13918 ;; Parameters:    Size  Location     Type
 13919 ;;  idx             1    wreg     enum E12355
 13920 ;;  cb              2    0[COMMON] PTR FTN(PTR void ,)enum 
 13921 ;;		 -> rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), rd2RegCompleteHandler(1), rd1RegCompleteHandler(1), 
 13922 ;;		 -> i2c_restartWrite(1), wr1RegCompleteHandler(1), Absolute function(1), 
 13923 ;;  p               1    2[COMMON] PTR void 
 13924 ;;		 -> i2c_readDataBlock@d(3), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 13925 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 13926 ;; Auto vars:     Size  Location     Type
 13927 ;;  idx             1    4[COMMON] enum E12355
 13928 ;; Return value:  Size  Location     Type
 13929 ;;                  1    wreg      void 
 13930 ;; Registers used:
 13931 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13932 ;; Tracked objects:
 13933 ;;		On entry : 0/0
 13934 ;;		On exit  : 0/0
 13935 ;;		Unchanged: 0/0
 13936 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13937 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13938 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13939 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13940 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13941 ;;Total ram usage:        5 bytes
 13942 ;; Hardware stack levels used:    1
 13943 ;; This function calls:
 13944 ;;		Nothing
 13945 ;; This function is called by:
 13946 ;;		i1_i2c_setDataCompleteCallback
 13947 ;; This function uses a non-reentrant model
 13948 ;;
 13949                           
 13950                           
 13951                           ;psect for function i1_setCallBack
 13952  0D05                     i1_setCallBack:	
 13953                           
 13954                           ;incstack = 0
 13955 ;; hardware stack exceeded
 13956                           ; Regs used in i1_setCallBack: [wreg+fsr1l+fsr1h+status,2+status,0]
 13957                           ;i1setCallBack@idx stored from wreg
 13958  0D05  00F4               	movwf	i1setCallBack@idx
 13959                           
 13960                           ;i2c_master.c: 455: if(cb)
 13961  0D06  0870               	movf	i1setCallBack@cb,w
 13962  0D07  0471               	iorwf	i1setCallBack@cb+1,w
 13963  0D08  1903               	btfsc	3,2
 13964  0D09  2D1B               	goto	i1l3108
 13965                           
 13966                           ;i2c_master.c: 456: {
 13967                           ;i2c_master.c: 457: i2c_status.callbackTable[idx] = cb;
 13968  0D0A  3574               	lslf	i1setCallBack@idx,w
 13969  0D0B  3EAC               	addlw	(low ((_i2c_status| 0+12)))& (0+255)
 13970  0D0C  0086               	movwf	6
 13971  0D0D  0187               	clrf	7
 13972  0D0E  0870               	movf	i1setCallBack@cb,w
 13973  0D0F  3FC0               	movwi [0]fsr1
 13974  0D10  0871               	movf	i1setCallBack@cb+1,w
 13975  0D11  3FC1               	movwi [1]fsr1
 13976                           
 13977                           ;i2c_master.c: 458: i2c_status.callbackPayload[idx] = p;
 13978  0D12  0872               	movf	i1setCallBack@p,w
 13979  0D13  00F3               	movwf	??i1_setCallBack
 13980  0D14  0874               	movf	i1setCallBack@idx,w
 13981  0D15  3EB8               	addlw	(low ((_i2c_status| 0+24)))& (0+255)
 13982  0D16  0086               	movwf	6
 13983  0D17  0187               	clrf	7
 13984  0D18  0873               	movf	??i1_setCallBack,w
 13985  0D19  0081               	movwf	1
 13986                           
 13987                           ;i2c_master.c: 459: }
 13988  0D1A  0008               	return
 13989  0D1B                     i1l3108:	
 13990                           
 13991                           ;i2c_master.c: 460: else
 13992                           ;i2c_master.c: 461: {
 13993                           ;i2c_master.c: 462: i2c_status.callbackTable[idx] = returnStop;
 13994  0D1B  3574               	lslf	i1setCallBack@idx,w
 13995  0D1C  3EAC               	addlw	(low ((_i2c_status| 0+12)))& (0+255)
 13996  0D1D  0086               	movwf	6
 13997  0D1E  0187               	clrf	7
 13998  0D1F  30DD               	movlw	low _returnStop
 13999  0D20  3FC0               	movwi [0]fsr1
 14000  0D21  3009               	movlw	high _returnStop
 14001  0D22  3FC1               	movwi [1]fsr1
 14002                           
 14003                           ;i2c_master.c: 463: i2c_status.callbackPayload[idx] = (0);
 14004  0D23  0874               	movf	i1setCallBack@idx,w
 14005  0D24  3EB8               	addlw	(low ((_i2c_status| 0+24)))& (0+255)
 14006  0D25  0086               	movwf	6
 14007  0D26  0187               	clrf	7
 14008  0D27  0181               	clrf	1
 14009  0D28  0008               	return
 14010  0D29                     __end_ofi1_setCallBack:	
 14011                           
 14012                           	psect	text111
 14013  0AF0                     __ptext111:	
 14014 ;; *************** function i1_i2c_setBuffer *****************
 14015 ;; Defined at:
 14016 ;;		line 184 in file "mcc_generated_files/drivers/i2c_master.c"
 14017 ;; Parameters:    Size  Location     Type
 14018 ;;  buffer          2    0[COMMON] PTR void 
 14019 ;;		 -> i2c_readDataBlock@reg(1), i2c_readDataBlock@d(3), i2c_write2ByteRegister@reg(1), i2c_write2ByteRegister@data(2),
      + 
 14020 ;;		 -> i2c_read2ByteRegister@reg(1), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@reg(1), i2c_read1ByteRegist
      +er@d2(1), 
 14021 ;;		 -> i2c_write1ByteRegister@reg(1), i2c_write1ByteRegister@data(1), NULL(0), writebuffer(17), 
 14022 ;;  bufferSize      2    2[COMMON] unsigned int 
 14023 ;; Auto vars:     Size  Location     Type
 14024 ;;		None
 14025 ;; Return value:  Size  Location     Type
 14026 ;;                  1    wreg      void 
 14027 ;; Registers used:
 14028 ;;		wreg
 14029 ;; Tracked objects:
 14030 ;;		On entry : 0/0
 14031 ;;		On exit  : 0/0
 14032 ;;		Unchanged: 0/0
 14033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14034 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14035 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14036 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14037 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14038 ;;Total ram usage:        4 bytes
 14039 ;; Hardware stack levels used:    1
 14040 ;; This function calls:
 14041 ;;		Nothing
 14042 ;; This function is called by:
 14043 ;;		i1_wr1RegCompleteHandler
 14044 ;;		i1_rd1RegCompleteHandler
 14045 ;;		i1_rd2RegCompleteHandler
 14046 ;;		i1_wr2RegCompleteHandler
 14047 ;;		i1_rdBlkRegCompleteHandler
 14048 ;; This function uses a non-reentrant model
 14049 ;;
 14050                           
 14051                           
 14052                           ;psect for function i1_i2c_setBuffer
 14053  0AF0                     i1_i2c_setBuffer:	
 14054                           
 14055                           ;i2c_master.c: 186: if(i2c_status.bufferFree)
 14056                           
 14057                           ;incstack = 0
 14058 ;; hardware stack exceeded
 14059                           ; Regs used in i1_i2c_setBuffer: [wreg]
 14060  0AF0  0021               	movlb	1	; select bank1
 14061  0AF1  1D20               	btfss	_i2c_status^(0+128),2
 14062  0AF2  0008               	return
 14063                           
 14064                           ;i2c_master.c: 187: {
 14065                           ;i2c_master.c: 188: i2c_status.data_ptr = buffer;
 14066  0AF3  0871               	movf	i1i2c_setBuffer@buffer+1,w
 14067  0AF4  00A3               	movwf	((low ((_i2c_status| 0+2))+1))^(0+128)
 14068  0AF5  0870               	movf	i1i2c_setBuffer@buffer,w
 14069  0AF6  00A2               	movwf	(low ((_i2c_status| 0+2)))^(0+128)
 14070                           
 14071                           ;i2c_master.c: 189: i2c_status.data_length = bufferSize;
 14072  0AF7  0873               	movf	i1i2c_setBuffer@bufferSize+1,w
 14073  0AF8  00A5               	movwf	((_i2c_status+1)^(0+128)+4)
 14074  0AF9  0872               	movf	i1i2c_setBuffer@bufferSize,w
 14075  0AFA  00A4               	movwf	(_i2c_status^(0+128)+4)
 14076                           
 14077                           ;i2c_master.c: 190: i2c_status.bufferFree = 0;
 14078  0AFB  1120               	bcf	_i2c_status^(0+128),2
 14079  0AFC  0008               	return
 14080  0AFD                     __end_ofi1_i2c_setBuffer:	
 14081                           
 14082                           	psect	text112
 14083  0959                     __ptext112:	
 14084 ;; *************** function i1_i2c_driver_stop *****************
 14085 ;; Defined at:
 14086 ;;		line 156 in file "mcc_generated_files/i2c_driver.c"
 14087 ;; Parameters:    Size  Location     Type
 14088 ;;		None
 14089 ;; Auto vars:     Size  Location     Type
 14090 ;;		None
 14091 ;; Return value:  Size  Location     Type
 14092 ;;                  1    wreg      void 
 14093 ;; Registers used:
 14094 ;;		None
 14095 ;; Tracked objects:
 14096 ;;		On entry : 0/0
 14097 ;;		On exit  : 0/0
 14098 ;;		Unchanged: 0/0
 14099 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14100 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14101 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14102 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14103 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14104 ;;Total ram usage:        0 bytes
 14105 ;; Hardware stack levels used:    1
 14106 ;; This function calls:
 14107 ;;		Nothing
 14108 ;; This function is called by:
 14109 ;;		i1_do_I2C_SEND_STOP
 14110 ;; This function uses a non-reentrant model
 14111 ;;
 14112                           
 14113                           
 14114                           ;psect for function i1_i2c_driver_stop
 14115  0959                     i1_i2c_driver_stop:	
 14116                           
 14117                           ;i2c_driver.c: 158: SSP1CON2bits.PEN = 1;
 14118                           
 14119                           ;incstack = 0
 14120 ;; hardware stack exceeded
 14121                           ; Regs used in i1_i2c_driver_stop: []
 14122  0959  0024               	movlb	4	; select bank4
 14123  095A  1516               	bsf	22,2	;volatile
 14124  095B  0008               	return
 14125  095C                     __end_ofi1_i2c_driver_stop:	
 14126                           
 14127                           	psect	text113
 14128  0956                     __ptext113:	
 14129 ;; *************** function i1_i2c_driver_restart *****************
 14130 ;; Defined at:
 14131 ;;		line 151 in file "mcc_generated_files/i2c_driver.c"
 14132 ;; Parameters:    Size  Location     Type
 14133 ;;		None
 14134 ;; Auto vars:     Size  Location     Type
 14135 ;;		None
 14136 ;; Return value:  Size  Location     Type
 14137 ;;                  1    wreg      void 
 14138 ;; Registers used:
 14139 ;;		None
 14140 ;; Tracked objects:
 14141 ;;		On entry : 0/0
 14142 ;;		On exit  : 0/0
 14143 ;;		Unchanged: 0/0
 14144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14145 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14146 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14147 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14148 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14149 ;;Total ram usage:        0 bytes
 14150 ;; Hardware stack levels used:    1
 14151 ;; This function calls:
 14152 ;;		Nothing
 14153 ;; This function is called by:
 14154 ;;		i1_do_I2C_SEND_RESTART_READ
 14155 ;;		i1_do_I2C_SEND_RESTART_WRITE
 14156 ;;		i1_do_I2C_SEND_RESTART
 14157 ;; This function uses a non-reentrant model
 14158 ;;
 14159                           
 14160                           
 14161                           ;psect for function i1_i2c_driver_restart
 14162  0956                     i1_i2c_driver_restart:	
 14163                           
 14164                           ;i2c_driver.c: 153: SSP1CON2bits.RSEN = 1;
 14165                           
 14166                           ;incstack = 0
 14167 ;; hardware stack exceeded
 14168                           ; Regs used in i1_i2c_driver_restart: []
 14169  0956  0024               	movlb	4	; select bank4
 14170  0957  1496               	bsf	22,1	;volatile
 14171  0958  0008               	return
 14172  0959                     __end_ofi1_i2c_driver_restart:	
 14173                           
 14174                           	psect	text114
 14175  0980                     __ptext114:	
 14176 ;; *************** function i1_i2c_driver_sendACK *****************
 14177 ;; Defined at:
 14178 ;;		line 196 in file "mcc_generated_files/i2c_driver.c"
 14179 ;; Parameters:    Size  Location     Type
 14180 ;;		None
 14181 ;; Auto vars:     Size  Location     Type
 14182 ;;		None
 14183 ;; Return value:  Size  Location     Type
 14184 ;;                  1    wreg      void 
 14185 ;; Registers used:
 14186 ;;		None
 14187 ;; Tracked objects:
 14188 ;;		On entry : 0/0
 14189 ;;		On exit  : 0/0
 14190 ;;		Unchanged: 0/0
 14191 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14192 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14193 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14194 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14195 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14196 ;;Total ram usage:        0 bytes
 14197 ;; Hardware stack levels used:    1
 14198 ;; This function calls:
 14199 ;;		Nothing
 14200 ;; This function is called by:
 14201 ;;		i1_do_I2C_DO_ACK
 14202 ;;		i1_do_I2C_RX
 14203 ;; This function uses a non-reentrant model
 14204 ;;
 14205                           
 14206                           
 14207                           ;psect for function i1_i2c_driver_sendACK
 14208  0980                     i1_i2c_driver_sendACK:	
 14209                           
 14210                           ;i2c_driver.c: 198: SSP1CON2bits.ACKDT = 0;
 14211                           
 14212                           ;incstack = 0
 14213 ;; hardware stack exceeded
 14214                           ; Regs used in i1_i2c_driver_sendACK: []
 14215  0980  0024               	movlb	4	; select bank4
 14216  0981  1296               	bcf	22,5	;volatile
 14217                           
 14218                           ;i2c_driver.c: 199: SSP1CON2bits.ACKEN = 1;
 14219  0982  1616               	bsf	22,4	;volatile
 14220  0983  0008               	return
 14221  0984                     __end_ofi1_i2c_driver_sendACK:	
 14222                           
 14223                           	psect	text115
 14224  0953                     __ptext115:	
 14225 ;; *************** function _i2c_busCollisionISR *****************
 14226 ;; Defined at:
 14227 ;;		line 435 in file "mcc_generated_files/drivers/i2c_master.c"
 14228 ;; Parameters:    Size  Location     Type
 14229 ;;		None
 14230 ;; Auto vars:     Size  Location     Type
 14231 ;;		None
 14232 ;; Return value:  Size  Location     Type
 14233 ;;                  1    wreg      void 
 14234 ;; Registers used:
 14235 ;;		status,2, status,0, pclath, cstack
 14236 ;; Tracked objects:
 14237 ;;		On entry : 0/0
 14238 ;;		On exit  : 0/0
 14239 ;;		Unchanged: 0/0
 14240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14241 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14242 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14243 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14244 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14245 ;;Total ram usage:        0 bytes
 14246 ;; Hardware stack levels used:    1
 14247 ;; Hardware stack levels required when called:    1
 14248 ;; This function calls:
 14249 ;;		_i2c_driver_clearBusCollision
 14250 ;; This function is called by:
 14251 ;;		_i2c_open
 14252 ;;		_INTERRUPT_InterruptManager
 14253 ;; This function uses a non-reentrant model
 14254 ;;
 14255                           
 14256                           
 14257                           ;psect for function _i2c_busCollisionISR
 14258  0953                     _i2c_busCollisionISR:	
 14259                           
 14260                           ;i2c_master.c: 437: i2c_driver_clearBusCollision();
 14261                           
 14262                           ;incstack = 0
 14263                           ; Regs used in _i2c_busCollisionISR: [status,2+status,0+pclath+cstack]
 14264  0953  3189  2150         	fcall	_i2c_driver_clearBusCollision
 14265  0955  0008               	return
 14266  0956                     __end_of_i2c_busCollisionISR:	
 14267                           
 14268                           	psect	text116
 14269  0950                     __ptext116:	
 14270 ;; *************** function _i2c_driver_clearBusCollision *****************
 14271 ;; Defined at:
 14272 ;;		line 253 in file "mcc_generated_files/i2c_driver.c"
 14273 ;; Parameters:    Size  Location     Type
 14274 ;;		None
 14275 ;; Auto vars:     Size  Location     Type
 14276 ;;		None
 14277 ;; Return value:  Size  Location     Type
 14278 ;;                  1    wreg      void 
 14279 ;; Registers used:
 14280 ;;		None
 14281 ;; Tracked objects:
 14282 ;;		On entry : 0/0
 14283 ;;		On exit  : 0/0
 14284 ;;		Unchanged: 0/0
 14285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14286 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14287 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14288 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14289 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14290 ;;Total ram usage:        0 bytes
 14291 ;; Hardware stack levels used:    1
 14292 ;; This function calls:
 14293 ;;		Nothing
 14294 ;; This function is called by:
 14295 ;;		_i2c_busCollisionISR
 14296 ;; This function uses a non-reentrant model
 14297 ;;
 14298                           
 14299                           
 14300                           ;psect for function _i2c_driver_clearBusCollision
 14301  0950                     _i2c_driver_clearBusCollision:	
 14302                           
 14303                           ;i2c_driver.c: 255: PIR2bits.BCL1IF = 0;
 14304                           
 14305                           ;incstack = 0
 14306                           ; Regs used in _i2c_driver_clearBusCollision: []
 14307  0950  0020               	movlb	0	; select bank0
 14308  0951  1191               	bcf	17,3	;volatile
 14309  0952  0008               	return
 14310  0953                     __end_of_i2c_driver_clearBusCollision:	
 14311                           
 14312                           	psect	text117
 14313  09BF                     __ptext117:	
 14314 ;; *************** function _PIN_MANAGER_IOC *****************
 14315 ;; Defined at:
 14316 ;;		line 117 in file "mcc_generated_files/pin_manager.c"
 14317 ;; Parameters:    Size  Location     Type
 14318 ;;		None
 14319 ;; Auto vars:     Size  Location     Type
 14320 ;;		None
 14321 ;; Return value:  Size  Location     Type
 14322 ;;                  1    wreg      void 
 14323 ;; Registers used:
 14324 ;;		wreg, status,2, status,0, pclath, cstack
 14325 ;; Tracked objects:
 14326 ;;		On entry : 0/0
 14327 ;;		On exit  : 0/0
 14328 ;;		Unchanged: 0/0
 14329 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14330 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14331 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14332 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14333 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14334 ;;Total ram usage:        0 bytes
 14335 ;; Hardware stack levels used:    1
 14336 ;; Hardware stack levels required when called:    2
 14337 ;; This function calls:
 14338 ;;		_IOCCF4_ISR
 14339 ;; This function is called by:
 14340 ;;		_INTERRUPT_InterruptManager
 14341 ;; This function uses a non-reentrant model
 14342 ;;
 14343                           
 14344                           
 14345                           ;psect for function _PIN_MANAGER_IOC
 14346  09BF                     _PIN_MANAGER_IOC:	
 14347                           
 14348                           ;pin_manager.c: 120: if(IOCCFbits.IOCCF4 == 1)
 14349                           
 14350                           ;incstack = 0
 14351 ;; hardware stack exceeded
 14352                           ; Regs used in _PIN_MANAGER_IOC: [wreg+status,2+status,0+pclath+cstack]
 14353  09BF  0027               	movlb	7	; select bank7
 14354  09C0  1E19               	btfss	25,4	;volatile
 14355  09C1  0008               	return
 14356                           
 14357                           ;pin_manager.c: 121: {
 14358                           ;pin_manager.c: 122: IOCCF4_ISR();
 14359  09C2  318A  22E3         	fcall	_IOCCF4_ISR
 14360  09C4  0008               	return
 14361  09C5                     __end_of_PIN_MANAGER_IOC:	
 14362                           
 14363                           	psect	text118
 14364  0AE3                     __ptext118:	
 14365 ;; *************** function _IOCCF4_ISR *****************
 14366 ;; Defined at:
 14367 ;;		line 131 in file "mcc_generated_files/pin_manager.c"
 14368 ;; Parameters:    Size  Location     Type
 14369 ;;		None
 14370 ;; Auto vars:     Size  Location     Type
 14371 ;;		None
 14372 ;; Return value:  Size  Location     Type
 14373 ;;                  1    wreg      void 
 14374 ;; Registers used:
 14375 ;;		wreg, status,2, status,0, pclath, cstack
 14376 ;; Tracked objects:
 14377 ;;		On entry : 0/0
 14378 ;;		On exit  : 0/0
 14379 ;;		Unchanged: 0/0
 14380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14381 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14382 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14383 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14384 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14385 ;;Total ram usage:        0 bytes
 14386 ;; Hardware stack levels used:    1
 14387 ;; Hardware stack levels required when called:    1
 14388 ;; This function calls:
 14389 ;;		Absolute function
 14390 ;;		_IOCCF4_DefaultInterruptHandler
 14391 ;;		_buttonInterrupt
 14392 ;; This function is called by:
 14393 ;;		_PIN_MANAGER_IOC
 14394 ;; This function uses a non-reentrant model
 14395 ;;
 14396                           
 14397                           
 14398                           ;psect for function _IOCCF4_ISR
 14399  0AE3                     _IOCCF4_ISR:	
 14400                           
 14401                           ;pin_manager.c: 136: if(IOCCF4_InterruptHandler)
 14402                           
 14403                           ;incstack = 0
 14404 ;; hardware stack exceeded
 14405                           ; Regs used in _IOCCF4_ISR: [wreg+status,2+status,0+pclath+cstack]
 14406  0AE3  0020               	movlb	0	; select bank0
 14407  0AE4  086A               	movf	_IOCCF4_InterruptHandler,w
 14408  0AE5  046B               	iorwf	_IOCCF4_InterruptHandler+1,w
 14409  0AE6  1903               	btfsc	3,2
 14410  0AE7  2AED               	goto	i1l6704
 14411                           
 14412                           ;pin_manager.c: 137: {
 14413                           ;pin_manager.c: 138: IOCCF4_InterruptHandler();
 14414  0AE8  086B               	movf	_IOCCF4_InterruptHandler+1,w
 14415  0AE9  008A               	movwf	10
 14416  0AEA  086A               	movf	_IOCCF4_InterruptHandler,w
 14417  0AEB  000A               	callw
 14418  0AEC  318A               	pagesel	$
 14419  0AED                     i1l6704:	
 14420                           
 14421                           ;pin_manager.c: 139: }
 14422                           ;pin_manager.c: 140: IOCCFbits.IOCCF4 = 0;
 14423  0AED  0027               	movlb	7	; select bank7
 14424  0AEE  1219               	bcf	25,4	;volatile
 14425  0AEF  0008               	return
 14426  0AF0                     __end_of_IOCCF4_ISR:	
 14427                           
 14428                           	psect	text119
 14429  094A                     __ptext119:	
 14430 ;; *************** function _IOCCF4_DefaultInterruptHandler *****************
 14431 ;; Defined at:
 14432 ;;		line 153 in file "mcc_generated_files/pin_manager.c"
 14433 ;; Parameters:    Size  Location     Type
 14434 ;;		None
 14435 ;; Auto vars:     Size  Location     Type
 14436 ;;		None
 14437 ;; Return value:  Size  Location     Type
 14438 ;;                  1    wreg      void 
 14439 ;; Registers used:
 14440 ;;		None
 14441 ;; Tracked objects:
 14442 ;;		On entry : 0/0
 14443 ;;		On exit  : 0/0
 14444 ;;		Unchanged: 0/0
 14445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14446 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14447 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14448 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14449 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14450 ;;Total ram usage:        0 bytes
 14451 ;; Hardware stack levels used:    1
 14452 ;; This function calls:
 14453 ;;		Nothing
 14454 ;; This function is called by:
 14455 ;;		_PIN_MANAGER_Initialize
 14456 ;;		_IOCCF4_ISR
 14457 ;; This function uses a non-reentrant model
 14458 ;;
 14459                           
 14460                           
 14461                           ;psect for function _IOCCF4_DefaultInterruptHandler
 14462  094A                     _IOCCF4_DefaultInterruptHandler:	
 14463                           
 14464                           ;incstack = 0
 14465 ;; hardware stack exceeded
 14466                           ; Regs used in _IOCCF4_DefaultInterruptHandler: []
 14467  094A  0008               	return
 14468  094B                     __end_of_IOCCF4_DefaultInterruptHandler:	
 14469                           
 14470                           	psect	text120
 14471  0AD6                     __ptext120:	
 14472 ;; *************** function _buttonInterrupt *****************
 14473 ;; Defined at:
 14474 ;;		line 392 in file "main.c"
 14475 ;; Parameters:    Size  Location     Type
 14476 ;;		None
 14477 ;; Auto vars:     Size  Location     Type
 14478 ;;		None
 14479 ;; Return value:  Size  Location     Type
 14480 ;;                  1    wreg      void 
 14481 ;; Registers used:
 14482 ;;		wreg, status,2, status,0
 14483 ;; Tracked objects:
 14484 ;;		On entry : 0/0
 14485 ;;		On exit  : 0/0
 14486 ;;		Unchanged: 0/0
 14487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14488 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14489 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14490 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14491 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14492 ;;Total ram usage:        1 bytes
 14493 ;; Hardware stack levels used:    1
 14494 ;; This function calls:
 14495 ;;		Nothing
 14496 ;; This function is called by:
 14497 ;;		_main
 14498 ;;		_IOCCF4_ISR
 14499 ;; This function uses a non-reentrant model
 14500 ;;
 14501                           
 14502                           
 14503                           ;psect for function _buttonInterrupt
 14504  0AD6                     _buttonInterrupt:	
 14505                           
 14506                           ;main.c: 393: start = 1;
 14507                           
 14508                           ;incstack = 0
 14509 ;; hardware stack exceeded
 14510                           ; Regs used in _buttonInterrupt: [wreg+status,2+status,0]
 14511  0AD6  0021               	movlb	1	; select bank1
 14512  0AD7  01C2               	clrf	_start^(0+128)
 14513  0AD8  0AC2               	incf	_start^(0+128),f
 14514                           
 14515                           ;main.c: 394: fall = 0;
 14516  0AD9  0020               	movlb	0	; select bank0
 14517  0ADA  01E9               	clrf	_fall
 14518                           
 14519                           ;main.c: 395: if (gravityCounter < 255) {
 14520  0ADB  0A62               	incf	_gravityCounter,w
 14521  0ADC  1903               	btfsc	3,2
 14522  0ADD  0008               	return
 14523                           
 14524                           ;main.c: 396: gravityCounter = 255;
 14525  0ADE  30FF               	movlw	255
 14526  0ADF  00F0               	movwf	??_buttonInterrupt
 14527  0AE0  0870               	movf	??_buttonInterrupt,w
 14528  0AE1  00E2               	movwf	_gravityCounter
 14529  0AE2  0008               	return
 14530  0AE3                     __end_of_buttonInterrupt:	
 14531  007E                     btemp	set	126	;btemp
 14532  007E                     int$flags	set	126
 14533  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        192
    BSS         104
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     57      76
    BANK1            80      0      36
    BANK2            80      0      64
    BANK3            80      0      67
    BANK4            80      0      80
    BANK5            80      0      32
    BANK6            80     70      70
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    i2c_write1ByteRegister@data.data	PTR unsigned char  size(1) Largest target is 0

    i2c_read1ByteRegister@d2.data	PTR unsigned char  size(1) Largest target is 0

    i2c_read2ByteRegister@result.data	PTR unsigned char  size(1) Largest target is 0

    i2c_write2ByteRegister@data.data	PTR unsigned char  size(1) Largest target is 0

    do_I2C_TX$1619$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    do_I2C_RX$1625$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    do_I2C_TX_EMPTY$1631$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    i2c_ISR$1637	PTR const FTN()enum E12337 size(2) Largest target is 1
		 -> do_I2C_TX_EMPTY(), do_I2C_RX(), do_I2C_TX(), do_I2C_DO_ADDRESS_NACK(), 
		 -> do_I2C_DO_NACK_RESTART(), do_I2C_DO_NACK_STOP(), do_I2C_DO_ACK(), do_I2C_RCEN(), 
		 -> do_I2C_SEND_ADR_WRITE(), do_I2C_SEND_ADR_READ(), do_I2C_SEND_STOP(), do_I2C_SEND_RESTART(), 
		 -> do_I2C_SEND_RESTART_WRITE(), do_I2C_SEND_RESTART_READ(), do_I2C_IDLE(), do_I2C_RESET(), 

    do_I2C_TX_EMPTY$1636	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    do_I2C_TX_EMPTY$1631	PTR FTN(PTR void ,)enum E12171 size(2) Largest target is 1
		 -> returnReset(), returnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> rd2RegCompleteHandler(), rd1RegCompleteHandler(), i2c_restartWrite(), wr1RegCompleteHandler(), 
		 -> Absolute function(), 

    do_I2C_RX$1630	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    do_I2C_RX$1625	PTR FTN(PTR void ,)enum E12171 size(2) Largest target is 1
		 -> returnReset(), returnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> rd2RegCompleteHandler(), rd1RegCompleteHandler(), i2c_restartWrite(), wr1RegCompleteHandler(), 
		 -> Absolute function(), 

    do_I2C_TX$1624	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    do_I2C_TX$1619	PTR FTN(PTR void ,)enum E12171 size(2) Largest target is 1
		 -> returnReset(), returnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> rd2RegCompleteHandler(), rd1RegCompleteHandler(), i2c_restartWrite(), wr1RegCompleteHandler(), 
		 -> Absolute function(), 

    returnStop@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    returnReset@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    cb$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    cb$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    i2c_restartWrite@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    cb$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    S868$11$0	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    mssp_waitForEvent@timeout	PTR unsigned int  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    setCallBack@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    setCallBack@cb	PTR FTN(PTR void ,)enum E12171 size(2) Largest target is 1
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 
		 -> i2c_restartWrite(), wr1RegCompleteHandler(), Absolute function(), 

    fsmStateTable	PTR const FTN()enum E12337[16] size(2) Largest target is 1
		 -> do_I2C_TX_EMPTY(), do_I2C_RX(), do_I2C_TX(), do_I2C_DO_ADDRESS_NACK(), 
		 -> do_I2C_DO_NACK_RESTART(), do_I2C_DO_NACK_STOP(), do_I2C_DO_ACK(), do_I2C_RCEN(), 
		 -> do_I2C_SEND_ADR_WRITE(), do_I2C_SEND_ADR_READ(), do_I2C_SEND_STOP(), do_I2C_SEND_RESTART(), 
		 -> do_I2C_SEND_RESTART_WRITE(), do_I2C_SEND_RESTART_READ(), do_I2C_IDLE(), do_I2C_RESET(), 

    i2c_setBuffer@buffer	PTR void  size(2) Largest target is 17
		 -> i2c_readDataBlock@reg(COMMON[1]), i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@reg(COMMON[1]), i2c_write2ByteRegister@data(COMMON[2]), 
		 -> i2c_read2ByteRegister@reg(COMMON[1]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@reg(COMMON[1]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@reg(COMMON[1]), i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), writebuffer(BANK3[17]), 

    i2c_setAddressNACKCallback@p	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    i2c_setAddressNACKCallback@cb	PTR FTN(PTR void ,)enum E12171 size(2) Largest target is 1
		 -> i2c_restartWrite(), 

    i2c_setDataCompleteCallback@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    i2c_setDataCompleteCallback@cb	PTR FTN(PTR void ,)enum E12171 size(2) Largest target is 1
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), Absolute function(), 

    S868$callbackPayload	PTR void [6] size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    i2c_status.callbackPayload	PTR void [6] size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    S868$callbackTable	PTR FTN(PTR void ,)enum E12171[6] size(2) Largest target is 1
		 -> returnReset(), returnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> rd2RegCompleteHandler(), rd1RegCompleteHandler(), i2c_restartWrite(), wr1RegCompleteHandler(), 
		 -> Absolute function(), 

    i2c_status.callbackTable	PTR FTN(PTR void ,)enum E12171[6] size(2) Largest target is 1
		 -> i1_returnStop(), returnReset(), returnStop(), rdBlkRegCompleteHandler(), 
		 -> wr2RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), i2c_restartWrite(), 
		 -> wr1RegCompleteHandler(), Absolute function(), 

    S868$data_ptr	PTR unsigned char  size(2) Largest target is 17
		 -> i2c_readDataBlock@reg(COMMON[1]), i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@reg(COMMON[1]), i2c_write2ByteRegister@data(COMMON[2]), 
		 -> i2c_read2ByteRegister@reg(COMMON[1]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@reg(COMMON[1]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@reg(COMMON[1]), i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), writebuffer(BANK3[17]), 

    i2c_status.data_ptr	PTR unsigned char  size(2) Largest target is 17
		 -> i2c_readDataBlock@reg(COMMON[1]), i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@reg(COMMON[1]), i2c_write2ByteRegister@data(COMMON[2]), 
		 -> i2c_read2ByteRegister@reg(COMMON[1]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@reg(COMMON[1]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@reg(COMMON[1]), i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), writebuffer(BANK3[17]), 

    d.data	PTR unsigned char  size(1) Largest target is 0

    S687$data	PTR unsigned char  size(1) Largest target is 0

    rdBlkRegCompleteHandler@p.data	PTR unsigned char  size(1) Largest target is 0

    rdBlkRegCompleteHandler@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    wr2RegCompleteHandler@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    rd2RegCompleteHandler@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    rd1RegCompleteHandler@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    i2c_writeNBytes@data	PTR void  size(1) Largest target is 17
		 -> writebuffer(BANK3[17]), 

    wr1RegCompleteHandler@p	PTR void  size(1) Largest target is 4
		 -> i2c_readDataBlock@d(COMMON[3]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(COMMON[1]), 
		 -> i2c_write1ByteRegister@data(COMMON[1]), NULL(NULL[0]), 

    i2c_driver_setI2cISR@f	PTR void  size(2) Largest target is 1
		 -> i2c_ISR(), 

    i2c_driver_i2cISR	PTR FTN()void  size(2) Largest target is 1
		 -> i2c_ISR(), Absolute function(), 

    i2c_driver_setBusCollisionISR@f	PTR void  size(2) Largest target is 1
		 -> i2c_busCollisionISR(), 

    i2c_driver_busCollisionISR	PTR FTN()void  size(2) Largest target is 1
		 -> i2c_busCollisionISR(), Absolute function(), 

    write@toWrite_362	PTR unsigned char [7] size(2) Largest target is 8
		 -> write@letter_space(BANK6[8]), letter_r(BANK3[8]), letter_o(BANK2[8]), letter_c(BANK2[8]), 
		 -> letter_s(BANK2[8]), letter_hi(BANK3[8]), letter_w(BANK3[8]), letter_e(BANK2[8]), 
		 -> letter_n(BANK3[8]), letter_space(BANK2[8]), number_9(BANK4[8]), number_8(BANK4[8]), 
		 -> number_7(BANK4[8]), number_6(BANK4[8]), number_5(BANK4[8]), number_4(BANK4[8]), 
		 -> number_3(BANK4[8]), number_2(BANK4[8]), number_1(BANK4[8]), number_0(BANK4[8]), 

    write@toWrite_356	PTR unsigned char [7] size(2) Largest target is 8
		 -> write@letter_space(BANK6[8]), letter_r(BANK3[8]), letter_o(BANK2[8]), letter_c(BANK2[8]), 
		 -> letter_s(BANK2[8]), letter_hi(BANK3[8]), letter_w(BANK3[8]), letter_e(BANK2[8]), 
		 -> letter_n(BANK3[8]), letter_space(BANK2[8]), number_9(BANK4[8]), number_8(BANK4[8]), 
		 -> number_7(BANK4[8]), number_6(BANK4[8]), number_5(BANK4[8]), number_4(BANK4[8]), 
		 -> number_3(BANK4[8]), number_2(BANK4[8]), number_1(BANK4[8]), number_0(BANK4[8]), 

    write@toWrite_355	PTR unsigned char [8] size(2) Largest target is 8
		 -> write@letter_space(BANK6[8]), letter_r(BANK3[8]), letter_o(BANK2[8]), letter_c(BANK2[8]), 
		 -> letter_s(BANK2[8]), letter_hi(BANK3[8]), letter_w(BANK3[8]), letter_e(BANK2[8]), 
		 -> letter_n(BANK3[8]), letter_space(BANK2[8]), number_9(BANK4[8]), number_8(BANK4[8]), 
		 -> number_7(BANK4[8]), number_6(BANK4[8]), number_5(BANK4[8]), number_4(BANK4[8]), 
		 -> number_3(BANK4[8]), number_2(BANK4[8]), number_1(BANK4[8]), number_0(BANK4[8]), 

    write@toWrite	PTR unsigned char [5] size(2) Largest target is 8
		 -> write@letter_space(BANK6[8]), letter_r(BANK3[8]), letter_o(BANK2[8]), letter_c(BANK2[8]), 
		 -> letter_s(BANK2[8]), letter_hi(BANK3[8]), letter_w(BANK3[8]), letter_e(BANK2[8]), 
		 -> letter_n(BANK3[8]), letter_space(BANK2[8]), number_9(BANK4[8]), number_8(BANK4[8]), 
		 -> number_7(BANK4[8]), number_6(BANK4[8]), number_5(BANK4[8]), number_4(BANK4[8]), 
		 -> number_3(BANK4[8]), number_2(BANK4[8]), number_1(BANK4[8]), number_0(BANK4[8]), 

    writeWord@text	PTR PTR unsigned char  size(1) Largest target is 16
		 -> write@toWrite_362(BANK6[14]), write@toWrite_356(BANK6[14]), write@toWrite_355(BANK6[16]), write@toWrite(BANK6[10]), 

    numberTable	PTR unsigned char [10] size(1) Largest target is 8
		 -> number_9(BANK4[8]), number_8(BANK4[8]), number_7(BANK4[8]), number_6(BANK4[8]), 
		 -> number_5(BANK4[8]), number_4(BANK4[8]), number_3(BANK4[8]), number_2(BANK4[8]), 
		 -> number_1(BANK4[8]), number_0(BANK4[8]), 

    IOCCF4_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> buttonInterrupt(), IOCCF4_DefaultInterruptHandler(), 

    IOCCF4_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> buttonInterrupt(), Absolute function(), IOCCF4_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    i1_i2c_ISR->i1_do_I2C_TX
    i1_do_I2C_TX_EMPTY->i1_i2c_restartWrite
    i1_do_I2C_TX_EMPTY->i1_rd1RegCompleteHandler
    i1_do_I2C_TX_EMPTY->i1_rd2RegCompleteHandler
    i1_do_I2C_TX_EMPTY->i1_rdBlkRegCompleteHandler
    i1_do_I2C_TX_EMPTY->i1_returnReset
    i1_do_I2C_TX_EMPTY->i1_returnStop
    i1_do_I2C_TX_EMPTY->i1_wr1RegCompleteHandler
    i1_do_I2C_TX_EMPTY->i1_wr2RegCompleteHandler
    i1_do_I2C_TX->i1_i2c_restartWrite
    i1_do_I2C_TX->i1_rd1RegCompleteHandler
    i1_do_I2C_TX->i1_rd2RegCompleteHandler
    i1_do_I2C_TX->i1_rdBlkRegCompleteHandler
    i1_do_I2C_TX->i1_returnReset
    i1_do_I2C_TX->i1_returnStop
    i1_do_I2C_TX->i1_wr1RegCompleteHandler
    i1_do_I2C_TX->i1_wr2RegCompleteHandler
    i1_do_I2C_SEND_ADR_WRITE->i1_i2c_driver_TXData
    i1_do_I2C_SEND_ADR_READ->i1_i2c_driver_TXData
    i1_do_I2C_RX->i1_i2c_restartWrite
    i1_do_I2C_RX->i1_rd1RegCompleteHandler
    i1_do_I2C_RX->i1_rd2RegCompleteHandler
    i1_do_I2C_RX->i1_rdBlkRegCompleteHandler
    i1_do_I2C_RX->i1_returnReset
    i1_do_I2C_RX->i1_returnStop
    i1_do_I2C_RX->i1_wr1RegCompleteHandler
    i1_do_I2C_RX->i1_wr2RegCompleteHandler
    i1_do_I2C_DO_ADDRESS_NACK->i1_i2c_restartWrite
    i1_do_I2C_DO_ADDRESS_NACK->i1_rd1RegCompleteHandler
    i1_do_I2C_DO_ADDRESS_NACK->i1_rd2RegCompleteHandler
    i1_do_I2C_DO_ADDRESS_NACK->i1_rdBlkRegCompleteHandler
    i1_do_I2C_DO_ADDRESS_NACK->i1_returnReset
    i1_do_I2C_DO_ADDRESS_NACK->i1_returnStop
    i1_do_I2C_DO_ADDRESS_NACK->i1_wr1RegCompleteHandler
    i1_do_I2C_DO_ADDRESS_NACK->i1_wr2RegCompleteHandler
    i1_wr2RegCompleteHandler->i1_i2c_setDataCompleteCallback
    i1_wr1RegCompleteHandler->i1_i2c_setDataCompleteCallback
    i1_rdBlkRegCompleteHandler->i1_i2c_setDataCompleteCallback
    i1_rd2RegCompleteHandler->i1_i2c_setDataCompleteCallback
    i1_rd1RegCompleteHandler->i1_i2c_setDataCompleteCallback
    i1_i2c_setDataCompleteCallback->i1_setCallBack
    _IOCCF4_ISR->_buttonInterrupt

Critical Paths under _main in BANK0

    _main->_endGame
    _shiftWalls->_random
    _random->___awmod
    _rand->___lmul
    ___awmod->_rand
    _initializeDisplay->_i2c_writeNBytes
    _endGame->_write
    _write->_writeWord
    _writeWord->_writeDisplay
    _writeDisplay->_i2c_writeNBytes
    _i2c_setAddressNACKCallback->_setCallBack
    _i2c_open->_i2c_driver_setBusCollisionISR
    _i2c_open->_i2c_driver_setI2cISR
    _i2c_masterWrite->_i2c_masterOperation
    _i2c_poller->_i2c_ISR
    _i2c_ISR->_do_I2C_TX
    _do_I2C_TX_EMPTY->_i2c_restartWrite
    _do_I2C_TX_EMPTY->_rd1RegCompleteHandler
    _do_I2C_TX_EMPTY->_rd2RegCompleteHandler
    _do_I2C_TX_EMPTY->_rdBlkRegCompleteHandler
    _do_I2C_TX_EMPTY->_returnReset
    _do_I2C_TX_EMPTY->_returnStop
    _do_I2C_TX_EMPTY->_wr1RegCompleteHandler
    _do_I2C_TX_EMPTY->_wr2RegCompleteHandler
    _do_I2C_TX->_i2c_restartWrite
    _do_I2C_TX->_rd1RegCompleteHandler
    _do_I2C_TX->_rd2RegCompleteHandler
    _do_I2C_TX->_rdBlkRegCompleteHandler
    _do_I2C_TX->_returnReset
    _do_I2C_TX->_returnStop
    _do_I2C_TX->_wr1RegCompleteHandler
    _do_I2C_TX->_wr2RegCompleteHandler
    _do_I2C_SEND_ADR_WRITE->_i2c_driver_TXData
    _do_I2C_SEND_ADR_READ->_i2c_driver_TXData
    _do_I2C_RX->_i2c_restartWrite
    _do_I2C_RX->_rd1RegCompleteHandler
    _do_I2C_RX->_rd2RegCompleteHandler
    _do_I2C_RX->_rdBlkRegCompleteHandler
    _do_I2C_RX->_returnReset
    _do_I2C_RX->_returnStop
    _do_I2C_RX->_wr1RegCompleteHandler
    _do_I2C_RX->_wr2RegCompleteHandler
    _do_I2C_DO_ADDRESS_NACK->_i2c_restartWrite
    _do_I2C_DO_ADDRESS_NACK->_rd1RegCompleteHandler
    _do_I2C_DO_ADDRESS_NACK->_rd2RegCompleteHandler
    _do_I2C_DO_ADDRESS_NACK->_rdBlkRegCompleteHandler
    _do_I2C_DO_ADDRESS_NACK->_returnReset
    _do_I2C_DO_ADDRESS_NACK->_returnStop
    _do_I2C_DO_ADDRESS_NACK->_wr1RegCompleteHandler
    _do_I2C_DO_ADDRESS_NACK->_wr2RegCompleteHandler
    _wr2RegCompleteHandler->_i2c_setDataCompleteCallback
    _wr1RegCompleteHandler->_i2c_setDataCompleteCallback
    _rdBlkRegCompleteHandler->_i2c_setDataCompleteCallback
    _rd2RegCompleteHandler->_i2c_setDataCompleteCallback
    _rd1RegCompleteHandler->_i2c_setDataCompleteCallback
    _i2c_setDataCompleteCallback->_setCallBack
    _drawWalls->_reverse
    ___lwmod->___lwdiv
    _PIN_MANAGER_Initialize->_IOCCF4_SetInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    _INTERRUPT_InterruptManager->i1_i2c_ISR

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    _endGame->_write

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  413441
                                             55 BANK0      2     2      0
         _IOCCF4_SetInterruptHandler
                  _SYSTEM_Initialize
                        _clearPixels
                          _drawPixel
                          _drawWalls
                            _endGame
                  _initializeDisplay
                         _shiftWalls
                       _writeDisplay
 ---------------------------------------------------------------------------------
 (1) _shiftWalls                                           6     6      0     910
                                             32 BANK0      6     6      0
                             _random
 ---------------------------------------------------------------------------------
 (2) _random                                               4     3      1     910
                                             28 BANK0      4     3      1
                            ___awmod
                               _rand
 ---------------------------------------------------------------------------------
 (3) _rand                                                 7     5      2     244
                                             14 BANK0      7     5      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     244
                                              2 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4     448
                                             21 BANK0      7     3      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (1) _initializeDisplay                                    1     1      0   99626
                                             24 BANK0      1     1      0
                    _i2c_writeNBytes
 ---------------------------------------------------------------------------------
 (1) _endGame                                              3     3      0  210992
                                             52 BANK0      3     3      0
                        _clearPixels
                              _write
                       _writeDisplay
 ---------------------------------------------------------------------------------
 (2) _write                                               71    71      0  110131
                                             51 BANK0      1     1      0
                                              0 BANK6     70    70      0
                            ___lwdiv
                            ___lwmod
                          _writeWord
 ---------------------------------------------------------------------------------
 (3) _writeWord                                           22    21      1  103993
                                             29 BANK0     22    21      1
                            ___awdiv
                        _clearPixels
                          _drawWalls
                       _writeDisplay
 ---------------------------------------------------------------------------------
 (1) _writeDisplay                                         5     5      0  100791
                                             24 BANK0      5     5      0
                            ___awdiv
                    _i2c_writeNBytes
 ---------------------------------------------------------------------------------
 (2) _i2c_writeNBytes                                      4     1      3   99626
                                             20 BANK0      4     1      3
                          _i2c_close
                    _i2c_masterWrite
                           _i2c_open
         _i2c_setAddressNACKCallback
                      _i2c_setBuffer
 ---------------------------------------------------------------------------------
 (3) _i2c_setAddressNACKCallback                           4     1      3    2259
                                              7 BANK0      4     1      3
                        _setCallBack
 ---------------------------------------------------------------------------------
 (3) _i2c_open                                             3     3      0     412
                                              4 BANK0      3     3      0
                    _i2c_driver_open
      _i2c_driver_setBusCollisionISR
               _i2c_driver_setI2cISR
                      _mssp_clearIRQ
 ---------------------------------------------------------------------------------
 (4) _i2c_driver_setI2cISR                                 2     0      2     121
                                              2 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _i2c_driver_setBusCollisionISR                        2     0      2     121
                                              2 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _i2c_driver_open                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2c_masterWrite                                      0     0      0   94222
                _i2c_masterOperation
 ---------------------------------------------------------------------------------
 (4) _i2c_masterOperation                                  3     3      0   94222
                                             17 BANK0      3     3      0
                   _i2c_driver_start
                         _i2c_poller
                  _mssp_IRQisEnabled
 ---------------------------------------------------------------------------------
 (5) _mssp_IRQisEnabled                                    2     2      0       0
                                              2 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (5) _i2c_poller                                           0     0      0   94052
                            _i2c_ISR
                  _mssp_waitForEvent
 ---------------------------------------------------------------------------------
 (6) _mssp_waitForEvent                                    1     1      0      55
                                              2 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _i2c_ISR                                              1     1      0   93997
                                             16 BANK0      1     1      0
                      _do_I2C_DO_ACK *
             _do_I2C_DO_ADDRESS_NACK *
             _do_I2C_DO_NACK_RESTART *
                _do_I2C_DO_NACK_STOP *
                        _do_I2C_IDLE *
                        _do_I2C_RCEN *
                       _do_I2C_RESET *
                          _do_I2C_RX *
               _do_I2C_SEND_ADR_READ *
              _do_I2C_SEND_ADR_WRITE *
                _do_I2C_SEND_RESTART *
           _do_I2C_SEND_RESTART_READ *
          _do_I2C_SEND_RESTART_WRITE *
                   _do_I2C_SEND_STOP *
                          _do_I2C_TX *
                    _do_I2C_TX_EMPTY *
                  _i2c_driver_isNACK
                      _mssp_clearIRQ
 ---------------------------------------------------------------------------------
 (7) _do_I2C_TX_EMPTY                                      1     1      0   23451
                                             12 BANK0      1     1      0
                   Absolute function *
                _do_I2C_SEND_RESTART
                   _do_I2C_SEND_STOP
                   _i2c_restartWrite *
                        _mssp_setIRQ
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
                        _returnReset *
                         _returnStop *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (8) _mssp_setIRQ                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_TX                                            4     4      0   23582
                                             12 BANK0      4     4      0
                   Absolute function *
           _do_I2C_SEND_RESTART_READ
          _do_I2C_SEND_RESTART_WRITE
                   _do_I2C_SEND_STOP
                  _i2c_driver_TXData
                  _i2c_driver_isNACK
                   _i2c_restartWrite *
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
                        _returnReset *
                         _returnStop *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (7) _i2c_driver_isNACK                                    1     1      0       0
                                              2 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (8) _do_I2C_SEND_RESTART_WRITE                            0     0      0       0
                 _i2c_driver_restart
 ---------------------------------------------------------------------------------
 (8) _do_I2C_SEND_RESTART_READ                             0     0      0       0
                 _i2c_driver_restart
 ---------------------------------------------------------------------------------
 (7) _do_I2C_SEND_ADR_WRITE                                0     0      0      31
                  _i2c_driver_TXData
 ---------------------------------------------------------------------------------
 (7) _do_I2C_SEND_ADR_READ                                 0     0      0      31
                  _i2c_driver_TXData
 ---------------------------------------------------------------------------------
 (8) _i2c_driver_TXData                                    1     1      0      31
                                              2 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_RX                                            1     1      0   23451
                                             12 BANK0      1     1      0
                   Absolute function *
             _do_I2C_DO_NACK_RESTART
                _do_I2C_DO_NACK_STOP
               _i2c_driver_getRXData
                 _i2c_driver_sendACK
                   _i2c_restartWrite *
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
                        _returnReset *
                         _returnStop *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (8) _i2c_driver_getRXData                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _do_I2C_DO_NACK_STOP                                  0     0      0       0
                _i2c_driver_sendNACK
 ---------------------------------------------------------------------------------
 (8) _do_I2C_DO_NACK_RESTART                               0     0      0       0
                _i2c_driver_sendNACK
 ---------------------------------------------------------------------------------
 (9) _i2c_driver_sendNACK                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_RESET                                         0     0      0       0
                _i2c_driver_resetBus
 ---------------------------------------------------------------------------------
 (8) _i2c_driver_resetBus                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_RCEN                                          0     0      0       0
                 _i2c_driver_startRX
 ---------------------------------------------------------------------------------
 (8) _i2c_driver_startRX                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_IDLE                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_DO_ADDRESS_NACK                               1     1      0   23451
                                             12 BANK0      1     1      0
                   Absolute function *
                _do_I2C_SEND_RESTART
                   _do_I2C_SEND_STOP
                   _i2c_restartWrite *
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
                        _returnReset *
                         _returnStop *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (8) _wr2RegCompleteHandler                                1     0      1    4632
                                             11 BANK0      1     0      1
                      _i2c_setBuffer
        _i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (8) _wr1RegCompleteHandler                                1     0      1    4632
                                             11 BANK0      1     0      1
                      _i2c_setBuffer
        _i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (8) _returnStop                                           1     0      1     108
                                             11 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (8) _returnReset                                          1     0      1     152
                                             11 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (8) _rdBlkRegCompleteHandler                              1     0      1    4663
                                             11 BANK0      1     0      1
                      _i2c_setBuffer
        _i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (8) _rd2RegCompleteHandler                                1     0      1    4632
                                             11 BANK0      1     0      1
                      _i2c_setBuffer
        _i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (8) _rd1RegCompleteHandler                                1     0      1    4632
                                             11 BANK0      1     0      1
                      _i2c_setBuffer
        _i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (9) _i2c_setDataCompleteCallback                          4     1      3    2979
                                              7 BANK0      4     1      3
                        _setCallBack
 ---------------------------------------------------------------------------------
 (4) _setCallBack                                          5     2      3    1117
                                              2 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (3) _i2c_setBuffer                                        4     0      4    1622
                                              2 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (8) _i2c_restartWrite                                     1     0      1       0
                                             11 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (8) _do_I2C_SEND_STOP                                     0     0      0       0
                    _i2c_driver_stop
 ---------------------------------------------------------------------------------
 (9) _i2c_driver_stop                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _do_I2C_SEND_RESTART                                  0     0      0       0
                 _i2c_driver_restart
 ---------------------------------------------------------------------------------
 (9) _i2c_driver_restart                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (17) Absolute function(Fake)                              1     0      1       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_DO_ACK                                        0     0      0       0
                 _i2c_driver_sendACK
 ---------------------------------------------------------------------------------
 (8) _i2c_driver_sendACK                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2c_driver_start                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2c_close                                            2     2      0      37
                                              2 BANK0      2     2      0
                      _mssp_clearIRQ
                    _mssp_disableIRQ
 ---------------------------------------------------------------------------------
 (4) _mssp_disableIRQ                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _mssp_clearIRQ                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4    1165
                                              2 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (4) _drawWalls                                            3     3      0     226
                                              6 BANK0      3     3      0
                            _reverse
 ---------------------------------------------------------------------------------
 (5) _reverse                                              4     4      0     226
                                              2 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _clearPixels                                          1     1      0       0
                                              2 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4    1132
                                             10 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     961
                                              2 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _drawPixel                                            9     7      2     548
                                              2 BANK0      9     7      2
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     174
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0     174
         _IOCCF4_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _IOCCF4_SetInterruptHandler                           2     0      2     174
                                              2 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 17
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (14) _INTERRUPT_InterruptManager                          1     1      0   14890
                                              1 BANK0      1     1      0
                   Absolute function *
                    _PIN_MANAGER_IOC
                _i2c_busCollisionISR *
                          i1_i2c_ISR *
 ---------------------------------------------------------------------------------
 (15) i1_i2c_ISR                                           1     1      0   14890
                                              0 BANK0      1     1      0
                    i1_do_I2C_DO_ACK *
           i1_do_I2C_DO_ADDRESS_NACK *
           i1_do_I2C_DO_NACK_RESTART *
              i1_do_I2C_DO_NACK_STOP *
                      i1_do_I2C_IDLE *
                      i1_do_I2C_RCEN *
                     i1_do_I2C_RESET *
                        i1_do_I2C_RX *
             i1_do_I2C_SEND_ADR_READ *
            i1_do_I2C_SEND_ADR_WRITE *
              i1_do_I2C_SEND_RESTART *
         i1_do_I2C_SEND_RESTART_READ *
        i1_do_I2C_SEND_RESTART_WRITE *
                 i1_do_I2C_SEND_STOP *
                        i1_do_I2C_TX *
                  i1_do_I2C_TX_EMPTY *
                i1_i2c_driver_isNACK
                    i1_mssp_clearIRQ
 ---------------------------------------------------------------------------------
 (16) i1_mssp_clearIRQ                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (16) i1_do_I2C_TX_EMPTY                                   1     1      0    3681
                                             10 COMMON     1     1      0
                   Absolute function *
              i1_do_I2C_SEND_RESTART
                 i1_do_I2C_SEND_STOP
                 i1_i2c_restartWrite *
                      i1_mssp_setIRQ
            i1_rd1RegCompleteHandler *
            i1_rd2RegCompleteHandler *
          i1_rdBlkRegCompleteHandler *
                      i1_returnReset *
                       i1_returnStop *
            i1_wr1RegCompleteHandler *
            i1_wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (17) i1_mssp_setIRQ                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (16) i1_do_I2C_TX                                         4     4      0    3803
                                             10 COMMON     4     4      0
                   Absolute function *
         i1_do_I2C_SEND_RESTART_READ
        i1_do_I2C_SEND_RESTART_WRITE
                 i1_do_I2C_SEND_STOP
                i1_i2c_driver_TXData
                i1_i2c_driver_isNACK
                 i1_i2c_restartWrite *
            i1_rd1RegCompleteHandler *
            i1_rd2RegCompleteHandler *
          i1_rdBlkRegCompleteHandler *
                      i1_returnReset *
                       i1_returnStop *
            i1_wr1RegCompleteHandler *
            i1_wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (16) i1_i2c_driver_isNACK                                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (17) i1_do_I2C_SEND_RESTART_WRITE                         0     0      0       0
               i1_i2c_driver_restart
 ---------------------------------------------------------------------------------
 (17) i1_do_I2C_SEND_RESTART_READ                          0     0      0       0
               i1_i2c_driver_restart
 ---------------------------------------------------------------------------------
 (16) i1_do_I2C_SEND_ADR_WRITE                             0     0      0      22
                i1_i2c_driver_TXData
 ---------------------------------------------------------------------------------
 (16) i1_do_I2C_SEND_ADR_READ                              0     0      0      22
                i1_i2c_driver_TXData
 ---------------------------------------------------------------------------------
 (17) i1_i2c_driver_TXData                                 1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (16) i1_do_I2C_RX                                         1     1      0    3681
                                             10 COMMON     1     1      0
                   Absolute function *
           i1_do_I2C_DO_NACK_RESTART
              i1_do_I2C_DO_NACK_STOP
             i1_i2c_driver_getRXData
               i1_i2c_driver_sendACK
                 i1_i2c_restartWrite *
            i1_rd1RegCompleteHandler *
            i1_rd2RegCompleteHandler *
          i1_rdBlkRegCompleteHandler *
                      i1_returnReset *
                       i1_returnStop *
            i1_wr1RegCompleteHandler *
            i1_wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (17) i1_i2c_driver_getRXData                              0     0      0       0
 ---------------------------------------------------------------------------------
 (17) i1_do_I2C_DO_NACK_STOP                               0     0      0       0
              i1_i2c_driver_sendNACK
 ---------------------------------------------------------------------------------
 (17) i1_do_I2C_DO_NACK_RESTART                            0     0      0       0
              i1_i2c_driver_sendNACK
 ---------------------------------------------------------------------------------
 (18) i1_i2c_driver_sendNACK                               0     0      0       0
 ---------------------------------------------------------------------------------
 (16) i1_do_I2C_RESET                                      0     0      0       0
              i1_i2c_driver_resetBus
 ---------------------------------------------------------------------------------
 (17) i1_i2c_driver_resetBus                               0     0      0       0
 ---------------------------------------------------------------------------------
 (16) i1_do_I2C_RCEN                                       0     0      0       0
               i1_i2c_driver_startRX
 ---------------------------------------------------------------------------------
 (17) i1_i2c_driver_startRX                                0     0      0       0
 ---------------------------------------------------------------------------------
 (16) i1_do_I2C_IDLE                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (16) i1_do_I2C_DO_ADDRESS_NACK                            1     1      0    3681
                                             10 COMMON     1     1      0
                   Absolute function *
              i1_do_I2C_SEND_RESTART
                 i1_do_I2C_SEND_STOP
                 i1_i2c_restartWrite *
            i1_rd1RegCompleteHandler *
            i1_rd2RegCompleteHandler *
          i1_rdBlkRegCompleteHandler *
                      i1_returnReset *
                       i1_returnStop *
            i1_wr1RegCompleteHandler *
            i1_wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (17) i1_wr2RegCompleteHandler                             1     0      1     711
                                              9 COMMON     1     0      1
                    i1_i2c_setBuffer
      i1_i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (17) i1_wr1RegCompleteHandler                             1     0      1     711
                                              9 COMMON     1     0      1
                    i1_i2c_setBuffer
      i1_i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (17) i1_returnStop                                        1     0      1      76
                                              9 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (17) i1_returnReset                                       1     0      1      28
                                              9 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (17) i1_rdBlkRegCompleteHandler                           1     0      1     733
                                              9 COMMON     1     0      1
                    i1_i2c_setBuffer
      i1_i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (17) i1_rd2RegCompleteHandler                             1     0      1     711
                                              9 COMMON     1     0      1
                    i1_i2c_setBuffer
      i1_i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (17) i1_rd1RegCompleteHandler                             1     0      1     711
                                              9 COMMON     1     0      1
                    i1_i2c_setBuffer
      i1_i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (18) i1_i2c_setDataCompleteCallback                       4     1      3     510
                                              5 COMMON     4     1      3
                      i1_setCallBack
 ---------------------------------------------------------------------------------
 (19) i1_setCallBack                                       5     2      3     206
                                              0 COMMON     5     2      3
 ---------------------------------------------------------------------------------
 (18) i1_i2c_setBuffer                                     4     0      4     179
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (17) i1_i2c_restartWrite                                  1     0      1       0
                                              9 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (17) i1_do_I2C_SEND_STOP                                  0     0      0       0
                  i1_i2c_driver_stop
 ---------------------------------------------------------------------------------
 (18) i1_i2c_driver_stop                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (17) i1_do_I2C_SEND_RESTART                               0     0      0       0
               i1_i2c_driver_restart
 ---------------------------------------------------------------------------------
 (18) i1_i2c_driver_restart                                0     0      0       0
 ---------------------------------------------------------------------------------
 (16) i1_do_I2C_DO_ACK                                     0     0      0       0
               i1_i2c_driver_sendACK
 ---------------------------------------------------------------------------------
 (17) i1_i2c_driver_sendACK                                0     0      0       0
 ---------------------------------------------------------------------------------
 (15) _i2c_busCollisionISR                                 0     0      0       0
       _i2c_driver_clearBusCollision
 ---------------------------------------------------------------------------------
 (16) _i2c_driver_clearBusCollision                        0     0      0       0
 ---------------------------------------------------------------------------------
 (15) _PIN_MANAGER_IOC                                     0     0      0       0
                         _IOCCF4_ISR
 ---------------------------------------------------------------------------------
 (16) _IOCCF4_ISR                                          0     0      0       0
                   Absolute function *
     _IOCCF4_DefaultInterruptHandler *
                    _buttonInterrupt *
 ---------------------------------------------------------------------------------
 (17) _buttonInterrupt                                     1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (17) _IOCCF4_DefaultInterruptHandler                      0     0      0       0
 ---------------------------------------------------------------------------------
 (17) Absolute function(Fake)                              1     0      1       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 19
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _IOCCF4_SetInterruptHandler
   _SYSTEM_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
       _IOCCF4_SetInterruptHandler
   _clearPixels
   _drawPixel
   _drawWalls
     _reverse
   _endGame
     _clearPixels
     _write
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _writeWord
         ___awdiv
         _clearPixels
         _drawWalls
           _reverse
         _writeDisplay
           ___awdiv
           _i2c_writeNBytes
             _i2c_close
               _mssp_clearIRQ
               _mssp_disableIRQ
             _i2c_masterWrite
               _i2c_masterOperation
                 _i2c_driver_start
                 _i2c_poller
                   _i2c_ISR
                     _do_I2C_DO_ACK *
                       _i2c_driver_sendACK
                     _do_I2C_DO_ADDRESS_NACK *
                       Absolute function(Fake) *
                       _do_I2C_SEND_RESTART *
                         _i2c_driver_restart
                       _do_I2C_SEND_STOP *
                         _i2c_driver_stop
                       _i2c_restartWrite *
                       _rd1RegCompleteHandler *
                         _i2c_setBuffer
                         _i2c_setDataCompleteCallback
                           _setCallBack
                       _rd2RegCompleteHandler *
                         _i2c_setBuffer
                         _i2c_setDataCompleteCallback
                           _setCallBack
                       _rdBlkRegCompleteHandler *
                         _i2c_setBuffer
                         _i2c_setDataCompleteCallback
                           _setCallBack
                       _returnReset *
                       _returnStop *
                       _wr1RegCompleteHandler *
                         _i2c_setBuffer
                         _i2c_setDataCompleteCallback
                           _setCallBack
                       _wr2RegCompleteHandler *
                         _i2c_setBuffer
                         _i2c_setDataCompleteCallback
                           _setCallBack
                     _do_I2C_DO_NACK_RESTART *
                       _i2c_driver_sendNACK
                     _do_I2C_DO_NACK_STOP *
                       _i2c_driver_sendNACK
                     _do_I2C_IDLE *
                     _do_I2C_RCEN *
                       _i2c_driver_startRX
                     _do_I2C_RESET *
                       _i2c_driver_resetBus
                     _do_I2C_RX *
                       Absolute function(Fake) *
                       _do_I2C_DO_NACK_RESTART *
                         _i2c_driver_sendNACK
                       _do_I2C_DO_NACK_STOP *
                         _i2c_driver_sendNACK
                       _i2c_driver_getRXData *
                       _i2c_driver_sendACK *
                       _i2c_restartWrite *
                       _rd1RegCompleteHandler *
                         _i2c_setBuffer
                         _i2c_setDataCompleteCallback
                           _setCallBack
                       _rd2RegCompleteHandler *
                         _i2c_setBuffer
                         _i2c_setDataCompleteCallback
                           _setCallBack
                       _rdBlkRegCompleteHandler *
                         _i2c_setBuffer
                         _i2c_setDataCompleteCallback
                           _setCallBack
                       _returnReset *
                       _returnStop *
                       _wr1RegCompleteHandler *
                         _i2c_setBuffer
                         _i2c_setDataCompleteCallback
                           _setCallBack
                       _wr2RegCompleteHandler *
                         _i2c_setBuffer
                         _i2c_setDataCompleteCallback
                           _setCallBack
                     _do_I2C_SEND_ADR_READ *
                       _i2c_driver_TXData
                     _do_I2C_SEND_ADR_WRITE *
                       _i2c_driver_TXData
                     _do_I2C_SEND_RESTART *
                       _i2c_driver_restart
                     _do_I2C_SEND_RESTART_READ *
                       _i2c_driver_restart
                     _do_I2C_SEND_RESTART_WRITE *
                       _i2c_driver_restart
                     _do_I2C_SEND_STOP *
                       _i2c_driver_stop
                     _do_I2C_TX *
                       Absolute function(Fake) *
                       _do_I2C_SEND_RESTART_READ *
                         _i2c_driver_restart
                       _do_I2C_SEND_RESTART_WRITE *
                         _i2c_driver_restart
                       _do_I2C_SEND_STOP *
                         _i2c_driver_stop
                       _i2c_driver_TXData *
                       _i2c_driver_isNACK *
                       _i2c_restartWrite *
                       _rd1RegCompleteHandler *
                         _i2c_setBuffer
                         _i2c_setDataCompleteCallback
                           _setCallBack
                       _rd2RegCompleteHandler *
                         _i2c_setBuffer
                         _i2c_setDataCompleteCallback
                           _setCallBack
                       _rdBlkRegCompleteHandler *
                         _i2c_setBuffer
                         _i2c_setDataCompleteCallback
                           _setCallBack
                       _returnReset *
                       _returnStop *
                       _wr1RegCompleteHandler *
                         _i2c_setBuffer
                         _i2c_setDataCompleteCallback
                           _setCallBack
                       _wr2RegCompleteHandler *
                         _i2c_setBuffer
                         _i2c_setDataCompleteCallback
                           _setCallBack
                     _do_I2C_TX_EMPTY *
                       Absolute function(Fake) *
                       _do_I2C_SEND_RESTART *
                         _i2c_driver_restart
                       _do_I2C_SEND_STOP *
                         _i2c_driver_stop
                       _i2c_restartWrite *
                       _mssp_setIRQ *
                       _rd1RegCompleteHandler *
                         _i2c_setBuffer
                         _i2c_setDataCompleteCallback
                           _setCallBack
                       _rd2RegCompleteHandler *
                         _i2c_setBuffer
                         _i2c_setDataCompleteCallback
                           _setCallBack
                       _rdBlkRegCompleteHandler *
                         _i2c_setBuffer
                         _i2c_setDataCompleteCallback
                           _setCallBack
                       _returnReset *
                       _returnStop *
                       _wr1RegCompleteHandler *
                         _i2c_setBuffer
                         _i2c_setDataCompleteCallback
                           _setCallBack
                       _wr2RegCompleteHandler *
                         _i2c_setBuffer
                         _i2c_setDataCompleteCallback
                           _setCallBack
                     _i2c_driver_isNACK *
                     _mssp_clearIRQ *
                   _mssp_waitForEvent
                 _mssp_IRQisEnabled
             _i2c_open
               _i2c_driver_open
               _i2c_driver_setBusCollisionISR
               _i2c_driver_setI2cISR
               _mssp_clearIRQ
             _i2c_setAddressNACKCallback
               _setCallBack
             _i2c_setBuffer
     _writeDisplay
       ___awdiv
       _i2c_writeNBytes
         _i2c_close
           _mssp_clearIRQ
           _mssp_disableIRQ
         _i2c_masterWrite
           _i2c_masterOperation
             _i2c_driver_start
             _i2c_poller
               _i2c_ISR
                 _do_I2C_DO_ACK *
                   _i2c_driver_sendACK
                 _do_I2C_DO_ADDRESS_NACK *
                   Absolute function(Fake) *
                   _do_I2C_SEND_RESTART *
                     _i2c_driver_restart
                   _do_I2C_SEND_STOP *
                     _i2c_driver_stop
                   _i2c_restartWrite *
                   _rd1RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _rd2RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _rdBlkRegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _returnReset *
                   _returnStop *
                   _wr1RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _wr2RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                 _do_I2C_DO_NACK_RESTART *
                   _i2c_driver_sendNACK
                 _do_I2C_DO_NACK_STOP *
                   _i2c_driver_sendNACK
                 _do_I2C_IDLE *
                 _do_I2C_RCEN *
                   _i2c_driver_startRX
                 _do_I2C_RESET *
                   _i2c_driver_resetBus
                 _do_I2C_RX *
                   Absolute function(Fake) *
                   _do_I2C_DO_NACK_RESTART *
                     _i2c_driver_sendNACK
                   _do_I2C_DO_NACK_STOP *
                     _i2c_driver_sendNACK
                   _i2c_driver_getRXData *
                   _i2c_driver_sendACK *
                   _i2c_restartWrite *
                   _rd1RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _rd2RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _rdBlkRegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _returnReset *
                   _returnStop *
                   _wr1RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _wr2RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                 _do_I2C_SEND_ADR_READ *
                   _i2c_driver_TXData
                 _do_I2C_SEND_ADR_WRITE *
                   _i2c_driver_TXData
                 _do_I2C_SEND_RESTART *
                   _i2c_driver_restart
                 _do_I2C_SEND_RESTART_READ *
                   _i2c_driver_restart
                 _do_I2C_SEND_RESTART_WRITE *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _do_I2C_TX *
                   Absolute function(Fake) *
                   _do_I2C_SEND_RESTART_READ *
                     _i2c_driver_restart
                   _do_I2C_SEND_RESTART_WRITE *
                     _i2c_driver_restart
                   _do_I2C_SEND_STOP *
                     _i2c_driver_stop
                   _i2c_driver_TXData *
                   _i2c_driver_isNACK *
                   _i2c_restartWrite *
                   _rd1RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _rd2RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _rdBlkRegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _returnReset *
                   _returnStop *
                   _wr1RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _wr2RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                 _do_I2C_TX_EMPTY *
                   Absolute function(Fake) *
                   _do_I2C_SEND_RESTART *
                     _i2c_driver_restart
                   _do_I2C_SEND_STOP *
                     _i2c_driver_stop
                   _i2c_restartWrite *
                   _mssp_setIRQ *
                   _rd1RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _rd2RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _rdBlkRegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _returnReset *
                   _returnStop *
                   _wr1RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _wr2RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                 _i2c_driver_isNACK *
                 _mssp_clearIRQ *
               _mssp_waitForEvent
             _mssp_IRQisEnabled
         _i2c_open
           _i2c_driver_open
           _i2c_driver_setBusCollisionISR
           _i2c_driver_setI2cISR
           _mssp_clearIRQ
         _i2c_setAddressNACKCallback
           _setCallBack
         _i2c_setBuffer
   _initializeDisplay
     _i2c_writeNBytes
       _i2c_close
         _mssp_clearIRQ
         _mssp_disableIRQ
       _i2c_masterWrite
         _i2c_masterOperation
           _i2c_driver_start
           _i2c_poller
             _i2c_ISR
               _do_I2C_DO_ACK *
                 _i2c_driver_sendACK
               _do_I2C_DO_ADDRESS_NACK *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_DO_NACK_RESTART *
                 _i2c_driver_sendNACK
               _do_I2C_DO_NACK_STOP *
                 _i2c_driver_sendNACK
               _do_I2C_IDLE *
               _do_I2C_RCEN *
                 _i2c_driver_startRX
               _do_I2C_RESET *
                 _i2c_driver_resetBus
               _do_I2C_RX *
                 Absolute function(Fake) *
                 _do_I2C_DO_NACK_RESTART *
                   _i2c_driver_sendNACK
                 _do_I2C_DO_NACK_STOP *
                   _i2c_driver_sendNACK
                 _i2c_driver_getRXData *
                 _i2c_driver_sendACK *
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_SEND_ADR_READ *
                 _i2c_driver_TXData
               _do_I2C_SEND_ADR_WRITE *
                 _i2c_driver_TXData
               _do_I2C_SEND_RESTART *
                 _i2c_driver_restart
               _do_I2C_SEND_RESTART_READ *
                 _i2c_driver_restart
               _do_I2C_SEND_RESTART_WRITE *
                 _i2c_driver_restart
               _do_I2C_SEND_STOP *
                 _i2c_driver_stop
               _do_I2C_TX *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART_READ *
                   _i2c_driver_restart
                 _do_I2C_SEND_RESTART_WRITE *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_driver_TXData *
                 _i2c_driver_isNACK *
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_TX_EMPTY *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_restartWrite *
                 _mssp_setIRQ *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _i2c_driver_isNACK *
               _mssp_clearIRQ *
             _mssp_waitForEvent
           _mssp_IRQisEnabled
       _i2c_open
         _i2c_driver_open
         _i2c_driver_setBusCollisionISR
         _i2c_driver_setI2cISR
         _mssp_clearIRQ
       _i2c_setAddressNACKCallback
         _setCallBack
       _i2c_setBuffer
   _shiftWalls
     _random
       ___awmod
         _rand (ARG)
           ___lmul
       _rand
         ___lmul
   _writeDisplay
     ___awdiv
     _i2c_writeNBytes
       _i2c_close
         _mssp_clearIRQ
         _mssp_disableIRQ
       _i2c_masterWrite
         _i2c_masterOperation
           _i2c_driver_start
           _i2c_poller
             _i2c_ISR
               _do_I2C_DO_ACK *
                 _i2c_driver_sendACK
               _do_I2C_DO_ADDRESS_NACK *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_DO_NACK_RESTART *
                 _i2c_driver_sendNACK
               _do_I2C_DO_NACK_STOP *
                 _i2c_driver_sendNACK
               _do_I2C_IDLE *
               _do_I2C_RCEN *
                 _i2c_driver_startRX
               _do_I2C_RESET *
                 _i2c_driver_resetBus
               _do_I2C_RX *
                 Absolute function(Fake) *
                 _do_I2C_DO_NACK_RESTART *
                   _i2c_driver_sendNACK
                 _do_I2C_DO_NACK_STOP *
                   _i2c_driver_sendNACK
                 _i2c_driver_getRXData *
                 _i2c_driver_sendACK *
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_SEND_ADR_READ *
                 _i2c_driver_TXData
               _do_I2C_SEND_ADR_WRITE *
                 _i2c_driver_TXData
               _do_I2C_SEND_RESTART *
                 _i2c_driver_restart
               _do_I2C_SEND_RESTART_READ *
                 _i2c_driver_restart
               _do_I2C_SEND_RESTART_WRITE *
                 _i2c_driver_restart
               _do_I2C_SEND_STOP *
                 _i2c_driver_stop
               _do_I2C_TX *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART_READ *
                   _i2c_driver_restart
                 _do_I2C_SEND_RESTART_WRITE *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_driver_TXData *
                 _i2c_driver_isNACK *
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_TX_EMPTY *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART *
                   _i2c_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c_driver_stop
                 _i2c_restartWrite *
                 _mssp_setIRQ *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _i2c_driver_isNACK *
               _mssp_clearIRQ *
             _mssp_waitForEvent
           _mssp_IRQisEnabled
       _i2c_open
         _i2c_driver_open
         _i2c_driver_setBusCollisionISR
         _i2c_driver_setI2cISR
         _mssp_clearIRQ
       _i2c_setAddressNACKCallback
         _setCallBack
       _i2c_setBuffer

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _PIN_MANAGER_IOC *
     _IOCCF4_ISR
       Absolute function(Fake) *
       _IOCCF4_DefaultInterruptHandler *
       _buttonInterrupt *
   _i2c_busCollisionISR *
     _i2c_driver_clearBusCollision
   i1_i2c_ISR *
     i1_do_I2C_DO_ACK *
       i1_i2c_driver_sendACK
     i1_do_I2C_DO_ADDRESS_NACK *
       Absolute function(Fake) *
       i1_do_I2C_SEND_RESTART *
         i1_i2c_driver_restart
       i1_do_I2C_SEND_STOP *
         i1_i2c_driver_stop
       i1_i2c_restartWrite *
       i1_rd1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rd2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rdBlkRegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_returnReset *
       i1_returnStop *
       i1_wr1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_wr2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
     i1_do_I2C_DO_NACK_RESTART *
       i1_i2c_driver_sendNACK
     i1_do_I2C_DO_NACK_STOP *
       i1_i2c_driver_sendNACK
     i1_do_I2C_IDLE *
     i1_do_I2C_RCEN *
       i1_i2c_driver_startRX
     i1_do_I2C_RESET *
       i1_i2c_driver_resetBus
     i1_do_I2C_RX *
       Absolute function(Fake) *
       i1_do_I2C_DO_NACK_RESTART *
         i1_i2c_driver_sendNACK
       i1_do_I2C_DO_NACK_STOP *
         i1_i2c_driver_sendNACK
       i1_i2c_driver_getRXData *
       i1_i2c_driver_sendACK *
       i1_i2c_restartWrite *
       i1_rd1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rd2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rdBlkRegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_returnReset *
       i1_returnStop *
       i1_wr1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_wr2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
     i1_do_I2C_SEND_ADR_READ *
       i1_i2c_driver_TXData
     i1_do_I2C_SEND_ADR_WRITE *
       i1_i2c_driver_TXData
     i1_do_I2C_SEND_RESTART *
       i1_i2c_driver_restart
     i1_do_I2C_SEND_RESTART_READ *
       i1_i2c_driver_restart
     i1_do_I2C_SEND_RESTART_WRITE *
       i1_i2c_driver_restart
     i1_do_I2C_SEND_STOP *
       i1_i2c_driver_stop
     i1_do_I2C_TX *
       Absolute function(Fake) *
       i1_do_I2C_SEND_RESTART_READ *
         i1_i2c_driver_restart
       i1_do_I2C_SEND_RESTART_WRITE *
         i1_i2c_driver_restart
       i1_do_I2C_SEND_STOP *
         i1_i2c_driver_stop
       i1_i2c_driver_TXData *
       i1_i2c_driver_isNACK *
       i1_i2c_restartWrite *
       i1_rd1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rd2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rdBlkRegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_returnReset *
       i1_returnStop *
       i1_wr1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_wr2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
     i1_do_I2C_TX_EMPTY *
       Absolute function(Fake) *
       i1_do_I2C_SEND_RESTART *
         i1_i2c_driver_restart
       i1_do_I2C_SEND_STOP *
         i1_i2c_driver_stop
       i1_i2c_restartWrite *
       i1_mssp_setIRQ *
       i1_rd1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rd2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_rdBlkRegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_returnReset *
       i1_returnStop *
       i1_wr1RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
       i1_wr2RegCompleteHandler *
         i1_i2c_setBuffer
         i1_i2c_setDataCompleteCallback
           i1_setCallBack
     i1_i2c_driver_isNACK *
     i1_mssp_clearIRQ *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     39      4C       5       95.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      24       7       45.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      40       9       80.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      43      11       83.8%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      50      13      100.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0      20      15       40.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50     46      46      17       87.5%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     1B7      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     1B7      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Apr 16 14:10:00 2018

                __end_of_i2c_driver_restart 0974                         i1_i2c_driver_isNACK 0ABE  
                              returnReset@p 002B                  __end_of_i2c_driver_startRX 097A  
                                         _i 0061      __end_of_IOCCF4_DefaultInterruptHandler 094B  
   __size_of_IOCCF4_DefaultInterruptHandler 0001              _IOCCF4_DefaultInterruptHandler 094A  
             _do_I2C_SEND_RESTART$intlevel0 0A31                                 __CFG_CP$OFF 0000  
                                        l95 0A64                             i1_mssp_clearIRQ 0965  
                              ___awdiv@sign 0028                        __size_of_do_I2C_IDLE 0009  
                       _do_I2C_SEND_RESTART 0A2D                        __size_of_do_I2C_RCEN 000A  
                      __end_ofi1_returnStop 0950                        ?i1_i2c_driver_TXData 0070  
                               i1_do_I2C_RX 0F7B                                 i1_do_I2C_TX 0740  
                               __CFG_LVP$ON 0000                        i1_i2c_driver_sendACK 0980  
                                       l352 0A9F                                         l642 073D  
                                       l723 05D4                                         l649 0BD2  
                                       l739 07AF                    i1_do_I2C_DO_NACK_RESTART 09A0  
              __size_of_i2c_masterOperation 0024                        _returnStop$intlevel0 09E1  
                      i1_i2c_driver_restart 0956               i2c_setDataCompleteCallback@cb 0027  
                              ___awmod@sign 003B                    ?i1_rd2RegCompleteHandler 0079  
                     __size_of_do_I2C_RESET 000B                                __CFG_BORV$LO 0000  
                                       wreg 0009                               writeWord@text 0050  
                              __CFG_IESO$ON 0000                        i1_i2c_driver_startRX 095C  
                     __end_ofi1_returnReset 0004                        ?i1_i2c_driver_isNACK 0070  
                  ?i1_wr2RegCompleteHandler 0079             ??i1_i2c_setDataCompleteCallback 0078  
                    i1_i2c_driver_getRXData 095F                       __end_ofi1_mssp_setIRQ 0965  
                              __CFG_ZCD$OFF 0000                     ??_rd2RegCompleteHandler 002C  
                     i1_i2c_driver_sendNACK 0984                                        l4100 0C0F  
                                      l3160 0E78                                        l4130 0A21  
                                      l4060 0D64                                        l4116 0BD9  
                                      l4108 0C2A                                        l4124 0C64  
                                      l3260 0FD2                                        l3252 0FCC  
                                      l3164 0E82                                        l4142 0A31  
                                      l4206 0A95                                        l4214 0A6C  
                                      l4222 0A41                                        l3262 0FDE  
                                      l3270 0FF3                                        l4136 0A29  
                                      l4160 0A51                                        l3248 0FC5  
                                      l4170 09E7                                        l4154 0A49  
                                      l3274 0FFB                                        l3266 0FEA  
                             i1returnStop@p 0079                                        l4500 069D  
                                      l4092 0BF4                                        l4180 0A8A  
                                      l4148 0A39                                        l4174 09DB  
                                      l4166 09E1                                        l4190 0A59  
                                      l3720 0253                                        l4600 0EE8  
                                      l4610 0F03                                        l3810 040A  
                                      l3724 0284                                        l3804 03D5  
                                      l7004 0495                                        l4606 0EFA  
                                      l4622 0E1B                                        l4542 0614  
                                      l4198 0ACE                                        l3806 0402  
                                      l7030 04D2                                        l7022 04C8  
                                      l7014 04B7                                        l3728 02AF  
                                      l4624 0E27                                        l4632 0E3C  
                                      l7016 04BB                                        l4546 062A  
                                      l4474 0666                                        l7026 04CC  
                                      l4628 0E33                                        l4492 068C  
                                      l4484 066E                                        l4468 065B  
                                      l6500 05B7                                        l3780 038F  
                                      l7036 04E0                                        l7028 04CE  
                                      l4486 067A                                        l4496 0695  
                                      l6512 0791                                        l6530 07B4  
                                      l3786 03A5                                        l6540 0E48  
                                      l6508 05F5                                        l3796 03C2  
                                      l4598 0EDC                                        l6550 0E4F  
                                      l6470 0DF7                                        l6526 07B1  
                                      l3798 03D1                                        l6544 0E4B  
                                      l6480 0DFD                                        l6536 07B7  
                                      l6538 0E45                                        l6474 0DFA  
                                      l6466 0DEE                                        l6490 05B1  
                                      l6482 05A8                                        l6556 0E52  
                                      l6732 00F2                                        l6724 00C0  
                                      l6900 0500                                        l6494 05B4  
                                      l6486 05AE                                        l6566 0D87  
                                      l6558 0D76                                        l6574 0AA7  
                                      l6646 0DE3                                        l6638 0DC3  
                                      l6662 0598                                        l6670 02E4  
                                      l6592 0D4A                                        l6656 054F  
                                      l6728 00C9                                        l6912 0513  
                                      l6586 0D3A                                        l6690 036D  
                                      l6754 012A                                        l6906 050E  
                                      l6588 0D40                                        l6684 0301  
                                      l6676 02F2                                        l6932 041A  
                                      l6950 044D                                        l6918 0521  
                                      l6952 044F                                        l6698 02F3  
                                      l6970 046D                                        l6938 042B  
                                      l6964 045F                                        l6974 0472  
                                      l6894 04FB                                        l6888 04EB  
                                      u2115 0FE4                                        u2125 0FEB  
                                      _LATA 010C                                        _LATB 010D  
                                      _LATC 010E                                        u2404 022E  
                                      u2405 022C                                        u3205 0F34  
                                      u2414 0244                                        u2415 0242  
                                      u2095 0FD5                                        u2504 02C8  
                                      u2505 02C6                                        u2434 0261  
                                      u2435 025F                                        u2444 0275  
                                      u2445 0273                                        u3165 0F0E  
                                      u3245 0671                                        u3175 0F14  
                                      u2615 03F6                                        u2464 0290  
                                      u2465 028E                                        u3505 0EF3  
                                      u3185 0F21                                        u3265 067B  
                                      u2474 029C                                        u2475 029A  
                                      u3515 0EFB                                        u3195 0F27  
                                      u3275 0685                                        u3285 068D  
                                      u2494 02BC                                        u2495 02BA  
                                      u1935 0E83                                        u3545 0E1E  
                                      u1945 0E8A                                        u3475 0EDF  
                                      u3565 0E2D                                        u3495 0EE9  
                                      u3575 0E34                                        u1975 0F6E  
                                      u6307 0434                                        u6317 037C  
                                      u6327 0AA3                                        u5830 01DB  
                                      u5744 032E                                        u5745 032D  
                                      u5754 0359                                        u5755 0358  
                      ?_do_I2C_SEND_RESTART 0070                                        u5975 0445  
                                      _PLLR 04D6                                        _WPUA 020C  
                                      _WPUB 020D                                        _WPUC 020E  
                   ??_wr2RegCompleteHandler 002C                                __CFG_WRT$OFF 0000  
                             __CFG_FCMEN$ON 0000                       i1_i2c_driver_resetBus 094B  
         __size_of_do_I2C_SEND_RESTART_READ 0008                                        _fall 0069  
                 ?_do_I2C_SEND_RESTART_READ 0070                             ??_mssp_clearIRQ 0022  
                                      _main 0481                                        _rand 0F3F  
                 __size_of_do_I2C_SEND_STOP 0008                      __size_of_do_I2C_DO_ACK 0008  
                                      fsr0h 0005                                        fsr1h 0007  
                                      indf0 0000                                        fsr0l 0004  
                                      indf1 0001                                        fsr1l 0006  
                                      btemp 007E                           ??i1_do_I2C_DO_ACK 0070  
                             __CFG_BOREN$ON 0000                       ?_do_I2C_SEND_ADR_READ 0070  
                  __size_of_i2c_writeNBytes 0029                                        start 002E  
                             _i2c_setBuffer 0B8B                               __CFG_MCLRE$ON 0000  
                           __end_of_i2c_ISR 0D98            __size_of_rdBlkRegCompleteHandler 0020  
                  ??_do_I2C_DO_NACK_RESTART 0022                               i1_do_I2C_IDLE 09B5  
                             i1_do_I2C_RCEN 09C5                                _do_I2C_RESET 0A86  
                            i1returnReset@p 0079                               __CFG_PLLEN$ON 0000  
            __size_of_OSCILLATOR_Initialize 000A                 i2c_setAddressNACKCallback@p 0029  
                     ??i1_i2c_driver_TXData 0070               __end_of_OSCILLATOR_Initialize 0A68  
                       __size_of_IOCCF4_ISR 000D                       ?i1_i2c_driver_sendACK 0070  
                                     ?_main 0070                                       ?_rand 002E  
                           __end_of___awdiv 06A2                               __CFG_WDTE$OFF 0000  
                           __end_of___awmod 1000                    __size_of_mssp_disableIRQ 0003  
                           ___awdiv@divisor 0022                             __end_of___lwdiv 0F08  
                           __end_of___lwmod 0E41                                       i1l561 001E  
                                     i1l723 076B                                       i1l566 0029  
                                     i1l558 0010                                       i1l739 0F96  
                           ___awdiv@counter 0027                       ?i1_i2c_driver_restart 0070  
                                     _TRISA 008C                                       _TRISB 008D  
                                     _TRISC 008E                       ?i1_i2c_driver_startRX 0070  
                           __end_of_endGame 0481                         ___lmul@multiplicand 0026  
                     ??i1_i2c_driver_isNACK 0070                                 i2c_open@ret 0026  
                               _writebuffer 01D2                          __size_ofi1_i2c_ISR 0022  
                   __end_of_PIN_MANAGER_IOC 09C5                                       _randx 0065  
                      _i2c_driver_getRXData 097A                ?i1_do_I2C_SEND_RESTART_WRITE 0070  
                ?_do_I2C_SEND_RESTART_WRITE 0070                                       _score 00C0  
                                     _walls 0130                                       _start 00C2  
                     ??_do_I2C_SEND_RESTART 0022                                       _write 0094  
                                     pclath 000A                             __end_of_reverse 0F3F  
                _i2c_driver_busCollisionISR 005D                      ?_do_I2C_SEND_ADR_WRITE 0070  
                                     status 0003                                       wtemp0 007E  
                     __size_of_writeDisplay 005E                          i2c_driver_TXData@d 0022  
                 __size_of_i2c_driver_start 0003                              ?_i2c_setBuffer 0022  
                              ?_setCallBack 0022                     __end_ofi1_mssp_clearIRQ 0968  
                             _fsmStateTable 02A0                             __initialization 0030  
                      __size_of_clearPixels 0013              __size_ofi1_do_I2C_SEND_RESTART 0004  
                                _i2c_poller 0AA7               __end_ofi1_do_I2C_SEND_RESTART 0994  
                                _i2c_status 00A0                              ?i1_do_I2C_IDLE 0070  
                              __end_of_main 04E5                                __end_of_rand 0F7B  
                            ?i1_do_I2C_RCEN 0070                  __end_ofi1_do_I2C_SEND_STOP 0998  
                          __end_of_i2c_open 0740                        _i2c_driver_setI2cISR 09F5  
                            __CFG_LPBOR$OFF 0000                 ?_INTERRUPT_InterruptManager 0070  
           __end_ofi1_rd2RegCompleteHandler 0B8B                               setCallBack@cb 0022  
                            i1_do_I2C_RESET 0A07                               _do_I2C_DO_ACK 0A3D  
                                    ??_main 0057                                      ??_rand 0030  
                         ?_i2c_restartWrite 002B             __end_ofi1_wr2RegCompleteHandler 0B4C  
                              i2c_close@ret 0023                             _i2c_driver_open 0A7C  
                        ??_i2c_restartWrite 002C                             _i2c_driver_stop 0974  
                   ?_do_I2C_DO_ADDRESS_NACK 0070                      ?i1_i2c_driver_sendNACK 0070  
                              _writeDisplay 0546                       ?_i2c_driver_getRXData 0070  
              ??_IOCCF4_SetInterruptHandler 0024                            ___awdiv@dividend 0024  
           i1i2c_setDataCompleteCallback@cb 0075                                      _ANSELA 018C  
                                    _ANSELB 018D                                      _ANSELC 018E  
                                    _BORCON 0116                                      ?_write 0070  
                   ?i1_do_I2C_SEND_ADR_READ 0070                      ?i1_i2c_driver_resetBus 0070  
                                    _RB4PPS 0E9C                                      _RB6PPS 0E9E  
                                    _ODCONA 028C                                      _ODCONB 028D  
                                    _ODCONC 028E                                      i1l3108 0D1B  
                                    i1l3410 09A0                                      i1l3420 0002  
                                    i1l3404 099C                                      i1l3342 0B4C  
                                    i1l3350 0B61                                      i1l3416 094E  
                                    i1l3424 07FE                                      i1l3380 0988  
                                    i1l3604 09C5                                      i1l3612 0998  
                                    i1l3366 0B37                                      i1l3358 0B76  
                                    i1l3374 0BA0                                      i1l3392 0990  
                                    i1l3570 0A07                                      i1l3386 098C  
                                    i1l3580 09B5                                      i1l3398 0994  
                                    i1l3588 0A15                                      i1l3596 0A0E  
                                    i1l6704 0AED                                      i1l6800 0CEF  
                                    i1l6810 0749                                      i1l6802 0740  
                                    i1l6820 074F                                      i1l6814 074C  
                                    i1l6806 0746                                      i1l6832 0F7B  
                                    i1l6850 0F9B                                      i1l6860 0D9B  
                                    i1l6828 0787                                      i1l6870 0DA2  
                                    i1l6790 0CE9                                      i1l6846 0F98  
                                    i1l6864 0D9E                                      i1l6856 0F9E  
                                    i1l6858 0D98                                      i1l6794 0CEC  
                                    i1l6786 0CE2                                      i1l6876 0DA5  
                                    i1l6992 0CD1                                      i1l6984 0CC0  
             ??i1_do_I2C_SEND_RESTART_WRITE 0070                          __size_of_i2c_close 001B  
                                    _OSCCON 0099                     i1_rd1RegCompleteHandler 0B61  
                    ??_do_I2C_SEND_ADR_READ 0023                    rdBlkRegCompleteHandler@p 002B  
                                 ??_i2c_ISR 0030                     i1_wr1RegCompleteHandler 0B4C  
               ??i1_rdBlkRegCompleteHandler 007A                              __CFG_PWRTE$OFF 0000  
                       _do_I2C_RX$intlevel0 0791                       __size_ofi1_returnStop 0002  
               __end_of_do_I2C_DO_NACK_STOP 0A4D                           __end_ofi1_i2c_ISR 0CE2  
       __end_of_i2c_setDataCompleteCallback 0B0A                 _i2c_setDataCompleteCallback 0AFD  
                                    ___lmul 0E6F                             _i2c_masterWrite 09AC  
                                 ??___awdiv 0026                              __CFG_STVREN$ON 0000  
                                 ??___awmod 0039             __size_of_do_I2C_DO_NACK_RESTART 0008  
                     ?_i2c_driver_setI2cISR 0022                                   ??___lwdiv 0026  
                         ??_i2c_writeNBytes 0037                                   ??___lwmod 002E  
                    __end_ofi1_do_I2C_RESET 0A0E                             i1_i2c_setBuffer 0AF0  
                    ??i1_i2c_driver_sendACK 0070                                      _random 0C41  
                                 ??_endGame 0054                            ___awdiv@quotient 0029  
                            ?_do_I2C_DO_ACK 0070                             ___awmod@divisor 0035  
                           _buttonInterrupt 0AD6                 __size_ofi1_i2c_restartWrite 0002  
                           ___awmod@counter 003A                      ??i1_i2c_driver_restart 0070  
       __size_of_IOCCF4_SetInterruptHandler 0006                      ??i1_i2c_driver_startRX 0070  
            __end_of_do_I2C_DO_ADDRESS_NACK 0E14                 ?_i2c_setAddressNACKCallback 0027  
                              ?_returnReset 002B                                   ??_reverse 0022  
             _do_I2C_DO_NACK_STOP$intlevel0 0A49                  i1rdBlkRegCompleteHandler@p 0079  
         __size_ofi1_do_I2C_DO_ADDRESS_NACK 0023                                ?_mssp_setIRQ 0070  
            __end_ofi1_do_I2C_SEND_ADR_READ 0A1D                           ??_mssp_disableIRQ 0022  
IOCCF4_SetInterruptHandler@InterruptHandler 0022                   ?i1_do_I2C_DO_ADDRESS_NACK 0070  
                          ?_PIN_MANAGER_IOC 0070                                ??_IOCCF4_ISR 0071  
                         i1_do_I2C_TX_EMPTY 0D98                           _SYSTEM_Initialize 09D1  
                   __end_of__initialization 0090                             ??_i2c_setBuffer 0026  
            _do_I2C_SEND_ADR_READ$intlevel0 0ACE                            _do_I2C_SEND_STOP 0A35  
                              i1_returnStop 094E                       i1_do_I2C_DO_NACK_STOP 099C  
                        __size_of_do_I2C_RX 0047                          __size_of_do_I2C_TX 0058  
                        ?i1_do_I2C_TX_EMPTY 0070                          ?_SYSTEM_Initialize 0070  
         _rdBlkRegCompleteHandler$intlevel0 0C64                         _i2c_masterOperation 0D29  
                  __size_of_do_I2C_TX_EMPTY 002E                            ?i1_mssp_clearIRQ 0070  
                           ??i1_do_I2C_IDLE 0070                             ??i1_do_I2C_RCEN 0070  
                   _rdBlkRegCompleteHandler 0C60                                 ?_i2c_poller 0070  
                            __pcstackCOMMON 0070                  ??i1_do_I2C_DO_NACK_RESTART 0070  
                       _do_I2C_TX$intlevel0 05A8                         ??i1_do_I2C_TX_EMPTY 007A  
                              __pidataBANK0 09BA                                __pidataBANK1 094D  
                              __pidataBANK2 0CA0                                __pidataBANK3 07D4  
                              __pidataBANK4 06A2                                __pidataBANK5 0C80  
                       ??_SYSTEM_Initialize 0024                             ?i1_do_I2C_RESET 0070  
                   __end_of_i2c_driver_open 0A86                     __end_of_i2c_driver_stop 0977  
                             __end_of_write 0221                           __end_of_i2c_close 0BD5  
                              ?i1_do_I2C_RX 0070                                ?i1_do_I2C_TX 0070  
                            drawPixel@color 0023                         i1i2c_restartWrite@p 0079  
                        __end_of_IOCCF4_ISR 0AF0                          _i2c_driver_sendACK 09A4  
                 i1_rdBlkRegCompleteHandler 0BA0                        ?_i2c_masterOperation 0070  
            i1i2c_setDataCompleteCallback@p 0077                     ?i1_i2c_driver_getRXData 0070  
                            _OPTION_REGbits 0095                ??i1_do_I2C_SEND_RESTART_READ 0070  
                        _i2c_driver_restart 0971                                 random@lower 003F  
                    __size_ofi1_setCallBack 0024                          _i2c_driver_startRX 0977  
                               random@upper 003C                      ??_i2c_driver_getRXData 0022  
                           i1setCallBack@cb 0070                    i1rd1RegCompleteHandler@p 0079  
                           i1_do_I2C_DO_ACK 0998                          __size_of_drawPixel 00BC  
                        __size_of_drawWalls 0054                         ?_i2c_driver_sendACK 0070  
                            setCallBack@idx 0026                   __end_ofi1_do_I2C_TX_EMPTY 0DC1  
                    _do_I2C_DO_NACK_RESTART 0A4D                              _do_I2C_TX$1070 002E  
                 __end_of_SYSTEM_Initialize 09D7                   ??i1_rd1RegCompleteHandler 007A  
                                   ??_write 0053                         ?_i2c_driver_restart 0070  
                                __pbssBANK0 0059                                  __pbssBANK1 00A0  
                                __pbssBANK2 0120                                  __pbssBANK3 01CA  
                 ??i1_wr1RegCompleteHandler 007A                         ?_i2c_driver_startRX 0070  
            __size_of_rd2RegCompleteHandler 001B                                   ?_i2c_open 0070  
             __end_of_rd2RegCompleteHandler 0C41              __size_of_wr2RegCompleteHandler 001B  
          __size_ofi1_rd2RegCompleteHandler 0015               __end_of_wr2RegCompleteHandler 0BF0  
                   __end_of_i2c_masterWrite 09B0                    i1wr1RegCompleteHandler@p 0079  
                          _i2c_driver_start 096E                       _rd1RegCompleteHandler 0C0B  
                   __end_ofi1_i2c_setBuffer 0AFD            __size_ofi1_wr2RegCompleteHandler 0015  
                     _do_I2C_IDLE$intlevel0 0A59                       _wr1RegCompleteHandler 0BF0  
              __size_of_i2c_busCollisionISR 0003             _wr1RegCompleteHandler$intlevel0 0BF4  
           _rd1RegCompleteHandler$intlevel0 0C0F                     __end_of_buttonInterrupt 0AE3  
                                __pmaintext 0481                               ??_do_I2C_IDLE 0022  
                      __size_of_setCallBack 0025                               ??_do_I2C_RCEN 0022  
                      ??_i2c_driver_sendACK 0022                      ??_i2c_driver_setI2cISR 0024  
                                   ?___lmul 0022                             __CFG_PPS1WAY$ON 0000  
                           ??_do_I2C_DO_ACK 0022                                  __pintentry 0004  
                      ??_i2c_driver_restart 0022                __size_of_i2c_driver_sendNACK 0004  
                      ??_i2c_driver_startRX 0022                              ___lmul@product 002A  
                                   ?_random 003C                         i2c_setBuffer@buffer 0022  
                         _initializeDisplay 04E5                __size_of_i2c_driver_resetBus 0001  
            __end_ofi1_i2c_driver_getRXData 0962              ?_i2c_driver_setBusCollisionISR 0022  
                     ??_i2c_masterOperation 0031                           __end_of_do_I2C_RX 07D4  
                         __end_of_do_I2C_TX 05FC                                  _createWall 0064  
                        ?_initializeDisplay 0070                    ?i1_do_I2C_SEND_ADR_WRITE 0070  
                           __CFG_WDTCCS$SWC 0000                                     _OSCTUNE 0098  
        __end_of_IOCCF4_SetInterruptHandler 09D1                  _IOCCF4_SetInterruptHandler 09CB  
                                   _SSP1ADD 0212                                     _SSP1BUF 0211  
                                   _SSP1MSK 0213                         __size_of_i2c_poller 000B  
                   ??_do_I2C_SEND_ADR_WRITE 0023         _do_I2C_SEND_RESTART_WRITE$intlevel0 0A29  
                       ??_initializeDisplay 0038                 ??_do_I2C_SEND_RESTART_WRITE 0022  
                    ?i1_do_I2C_DO_NACK_STOP 0070                           _mssp_IRQisEnabled 0A72  
                                ??_i2c_open 0024                                     _i2c_ISR 0D72  
                 ??_rdBlkRegCompleteHandler 002C                           _mssp_waitForEvent 0A9C  
                        ?_mssp_IRQisEnabled 0070                               endGame@played 0056  
                        __size_of_writeWord 00AC                       __end_of_mssp_clearIRQ 096B  
                     _returnReset$intlevel0 09E7                       _do_I2C_RCEN$intlevel0 0A6C  
                             i1_setCallBack 0D05                          ?_mssp_waitForEvent 0070  
          _do_I2C_DO_ADDRESS_NACK$intlevel0 0DEE                 __end_ofi1_i2c_driver_TXData 09B5  
                         __end_of_drawPixel 02DD                           __end_of_drawWalls 0650  
       __size_of_i2c_setAddressNACKCallback 000D                      __size_ofi1_returnReset 0002  
                       ??_mssp_IRQisEnabled 0022                                     ___awdiv 0650  
                           __size_of___lmul 0030                                     ___awmod 0FBA  
                                   ___lwdiv 0ED3                                     ___lwmod 0E14  
                 __end_of_initializeDisplay 0546                      __size_ofi1_mssp_setIRQ 0003  
                         ??_do_I2C_TX_EMPTY 002C                            ?_i2c_driver_open 0070  
                       ??_mssp_waitForEvent 0022                            ?_i2c_driver_stop 0070  
                                   _endGame 0410                      i2c_writeNBytes@address 0037  
                           __size_of_random 001F                 __end_ofi1_i2c_driver_isNACK 0ACA  
                   __end_ofi1_do_I2C_DO_ACK 099C                                     __ptext1 0389  
                                   __ptext2 0C41                                     __ptext3 0F3F  
                                   __ptext4 0E6F                                     __ptext5 0FBA  
                                   __ptext6 04E5                                     __ptext7 0410  
                                   __ptext8 0094                                     __ptext9 02DD  
                       __end_of_do_I2C_IDLE 0A5E                         __end_of_do_I2C_RCEN 0A72  
                                   _hiscore 00BE                       _OSCILLATOR_Initialize 0A5E  
                   ??i1_i2c_driver_sendNACK 0070                 __end_of_do_I2C_SEND_RESTART 0A35  
                          ___awmod@dividend 0037                    ??_PIN_MANAGER_Initialize 0024  
                                 _IOCCFbits 0399                      i2c_masterOperation@ret 0033  
                   ??i1_i2c_driver_resetBus 0070                                     _reverse 0F08  
                                 _IOCCNbits 0398                                   _IOCCPbits 0397  
                                   _topHalf 005F                          i1_do_I2C_SEND_STOP 0994  
                _do_I2C_SEND_STOP$intlevel0 0A39                  __size_ofi1_do_I2C_TX_EMPTY 0029  
                  _do_I2C_SEND_RESTART_READ 0A1D                  __size_of_SYSTEM_Initialize 0006  
                                   clrloop0 09FC                   __end_of_mssp_IRQisEnabled 0A7C  
                      __size_of_returnReset 0006                        end_of_initialization 0090  
                      __size_of_mssp_setIRQ 0003                   __end_of_mssp_waitForEvent 0AA7  
                 __size_of_i2c_restartWrite 0006                                     init_ram 0A01  
                       ?i1_do_I2C_SEND_STOP 0070                      ?_rd1RegCompleteHandler 002B  
                                   initloop 0A02                             _i2c_writeNBytes 0DC1  
                             ??_clearPixels 0022                            ?_i2c_masterWrite 0070  
                    ?_wr1RegCompleteHandler 002B                              ?i1_setCallBack 0070  
                                _wallHeight 0060                                  _shiftWalls 0389  
                          ?i1_i2c_setBuffer 0070                            ?_buttonInterrupt 0070  
                              write@toWrite 0359                   _do_I2C_SEND_RESTART_WRITE 0A25  
                     i1_do_I2C_SEND_RESTART 0990            __end_ofi1_do_I2C_DO_ADDRESS_NACK 0D05  
           __end_ofi1_do_I2C_SEND_ADR_WRITE 0A15                             _mssp_disableIRQ 096B  
                                 i1_i2c_ISR 0CC0                        ??i1_do_I2C_SEND_STOP 0070  
                                _returnStop 09DD             __end_of_rdBlkRegCompleteHandler 0C80  
                  __end_of_do_I2C_SEND_STOP 0A3D          __end_ofi1_do_I2C_SEND_RESTART_READ 098C  
                i1_do_I2C_SEND_RESTART_READ 0988                                   _SSPDATPPS 0E21  
                                 _SSPCLKPPS 0E20                           __end_of_writeWord 0389  
                          __CFG_FOSC$INTOSC 0000                        __size_ofi1_do_I2C_RX 003F  
                      __size_ofi1_do_I2C_TX 004D                     _IOCCF4_InterruptHandler 006A  
      __size_of_i2c_setDataCompleteCallback 000D                              _gravityCounter 0062  
                             i1_returnReset 0002                                 returnStop@p 002B  
                             i1_mssp_setIRQ 0962          __size_ofi1_rdBlkRegCompleteHandler 001A  
              i2c_setDataCompleteCallback@p 0029                                writeWord@idx 0051  
                              writeWord@len 003D                     i1_rd2RegCompleteHandler 0B76  
                                drawPixel@x 002A                                  drawPixel@y 0022  
                   i1_wr2RegCompleteHandler 0B37               __size_of_do_I2C_SEND_ADR_READ 000C  
                          ??i1_do_I2C_RESET 0070                                ??_i2c_poller 0031  
                               _do_I2C_IDLE 0A55                                 _do_I2C_RCEN 0A68  
                __end_ofi1_i2c_restartWrite 0800                         __end_of_clearPixels 0B37  
                __size_of_initializeDisplay 0061                              __end_of___lmul 0E9F  
      __end_of_i2c_driver_clearBusCollision 0953       __size_of_i2c_driver_clearBusCollision 0003  
              _i2c_driver_clearBusCollision 0950                                  ?i1_i2c_ISR 0070  
                          ?i1_do_I2C_DO_ACK 0070                      ?_OSCILLATOR_Initialize 0070  
             __size_ofi1_i2c_driver_sendACK 0004                              __end_of_random 0C60  
              __size_of_do_I2C_DO_NACK_STOP 0008                            write@toWrite_362 034B  
                          write@toWrite_355 032D                            write@toWrite_356 033D  
                  __end_of_i2c_driver_start 0971               __size_ofi1_i2c_driver_restart 0003  
                   ?_do_I2C_DO_NACK_RESTART 0070                         start_initialization 0030  
                                 _i2c_close 0BBA               __size_ofi1_i2c_driver_startRX 0003  
                       _i2c_busCollisionISR 0953             __size_of_PIN_MANAGER_Initialize 0034  
                            ?i1_returnReset 0079                     __end_of_i2c_writeNBytes 0DEA  
       __end_ofi1_do_I2C_SEND_RESTART_WRITE 0990                 i1_do_I2C_SEND_RESTART_WRITE 098C  
                            ?i1_mssp_setIRQ 0070                  __size_of_mssp_IRQisEnabled 000A  
                              setCallBack@p 0024                          __end_of_i2c_poller 0AB2  
                       _i2c_driver_sendNACK 09A8                             i2c_open@address 0025  
                   i2c_setBuffer@bufferSize 0024                  __size_of_mssp_waitForEvent 000B  
                    rd1RegCompleteHandler@p 002B                         _i2c_driver_resetBus 094C  
                           ??i1_setCallBack 0073                       __end_of_i2c_setBuffer 0BA0  
                         __size_of_i2c_open 004E                    __size_of_PIN_MANAGER_IOC 0006  
     __end_ofi1_i2c_setDataCompleteCallback 0ABE      __size_ofi1_i2c_setDataCompleteCallback 000C  
             i1_i2c_setDataCompleteCallback 0AB2                                 ?_shiftWalls 0070  
                      ?_i2c_busCollisionISR 0070                     __end_of_mssp_disableIRQ 096E  
                          i1setCallBack@idx 0074                            i1_do_I2C_TX$1070 007C  
                     __end_ofi1_do_I2C_IDLE 09BA                                    ??___lmul 002A  
                     __end_ofi1_do_I2C_RCEN 09CB                   i1i2c_setBuffer@bufferSize 0072  
                    ?i1_do_I2C_SEND_RESTART 0070                      wr1RegCompleteHandler@p 002B  
                      ?_i2c_driver_sendNACK 0070                               ?_do_I2C_RESET 0070  
                               __pdataBANK0 0065                                 __pdataBANK1 00C3  
                               __pdataBANK2 0140                                 __pdataBANK3 01A0  
                               __pdataBANK4 0220                                 __pdataBANK5 02A0  
                 _do_I2C_TX_EMPTY$intlevel0 0E45                                    ??_random 003D  
                  __size_ofi1_mssp_clearIRQ 0003                                 ?_returnStop 002B  
                      ?_i2c_driver_resetBus 0070                           _i2c_driver_TXData 09E9  
            __end_of_do_I2C_DO_NACK_RESTART 0A55               ?_i2c_driver_clearBusCollision 0070  
                         _i2c_driver_i2cISR 005B                    i1_do_I2C_DO_ADDRESS_NACK 0CE2  
                        ?_i2c_driver_TXData 0070                                  ?_i2c_close 0070  
                                 ___latbits 0002                               __pcstackBANK0 0020  
                             __pcstackBANK6 0320           __size_ofi1_do_I2C_DO_NACK_RESTART 0004  
                  i1rd2RegCompleteHandler@p 0079                                   _do_I2C_RX 078D  
                 ?i1_do_I2C_DO_NACK_RESTART 0070                                   _do_I2C_TX 05A4  
                         _i2c_driver_isNACK 0B0A                     ??i1_do_I2C_DO_NACK_STOP 0070  
               ?_IOCCF4_SetInterruptHandler 0022                   ??i1_rd2RegCompleteHandler 007A  
             __size_of_i2c_driver_getRXData 0003                          ?_i2c_driver_isNACK 0070  
                       ??_i2c_driver_TXData 0022              __size_of_do_I2C_SEND_ADR_WRITE 000B  
                 ??i1_wr2RegCompleteHandler 007A               __end_of_do_I2C_SEND_ADR_WRITE 0A9C  
           ??_i2c_driver_setBusCollisionISR 0024                              i1setCallBack@p 0072  
                          _i2c_restartWrite 09D7                  _i2c_restartWrite$intlevel0 09DB  
                                  ?_i2c_ISR 0070             _do_I2C_SEND_ADR_WRITE$intlevel0 0A95  
          __size_ofi1_do_I2C_SEND_ADR_WRITE 0007                             _do_I2C_TX_EMPTY 0E41  
                             ??_setCallBack 0025                                   __pnvBANK0 006A  
                  i1wr2RegCompleteHandler@p 0079                       _rd2RegCompleteHandler 0C26  
                               _clearPixels 0B24                         ??_i2c_driver_isNACK 0022  
                     ??_i2c_busCollisionISR 0070                            ___lwdiv@dividend 0024  
                    _PIN_MANAGER_Initialize 0E9F                       _wr2RegCompleteHandler 0BD5  
               __size_of_i2c_driver_sendACK 0004                              ??_do_I2C_RESET 0022  
                                  ?___awdiv 0022                                   __ptext100 095C  
                                 __ptext101 07FE                                   __ptext110 0D05  
                                 __ptext102 0002                                   __ptext111 0AF0  
                                 __ptext103 094E                                   __ptext120 0AD6  
                                 __ptext112 0959                                   __ptext104 0BA0  
                                 __ptext113 0956                                   __ptext105 0B76  
                                 __ptext114 0980                                   __ptext106 0B61  
                                 __ptext115 0953                                   __ptext107 0B4C  
                                 __ptext116 0950                                   __ptext108 0B37  
                     ??_i2c_driver_sendNACK 0022                                   __ptext117 09BF  
                                 __ptext109 0AB2                                   __ptext118 0AE3  
                                 __ptext119 094A                                    ?___awmod 0035  
               __end_of_i2c_masterOperation 0D4D                                    ?___lwdiv 0022  
                  ??_do_I2C_DO_ADDRESS_NACK 002C                                    ?___lwmod 002A  
             __size_of_i2c_driver_setI2cISR 0006                 __size_of_i2c_driver_restart 0003  
                 __end_of_i2c_driver_TXData 09EF                                    ?_endGame 0070  
                     __end_of_do_I2C_DO_ACK 0A45                       ??_i2c_driver_resetBus 0022  
               __size_of_i2c_driver_startRX 0003                                 ??i1_i2c_ISR 0020  
              ??_INTERRUPT_InterruptManager 0021                                   _drawPixel 0221  
                               write@F12456 01CA                                   _drawWalls 05FC  
                                 _elevation 0063                  ??_do_I2C_SEND_RESTART_READ 0022  
                  ??i1_do_I2C_SEND_ADR_READ 0071                             ??i1_returnReset 007A  
                 __end_of_i2c_driver_isNACK 0B17                    ?i1_rd1RegCompleteHandler 0079  
        __size_of_do_I2C_SEND_RESTART_WRITE 0008                             ??i1_mssp_setIRQ 0070  
            __size_ofi1_i2c_driver_sendNACK 0004               __end_ofi1_i2c_driver_sendNACK 0988  
                       __size_of_shiftWalls 0087                                    ?_reverse 0070  
                  ?i1_wr1RegCompleteHandler 0079                                  ?_do_I2C_RX 0070  
                                ?_do_I2C_TX 0070                               ?_writeDisplay 0070  
                          ___lwdiv@quotient 0028                            ?_i2c_writeNBytes 0034  
            __size_ofi1_i2c_driver_resetBus 0001               __end_ofi1_i2c_driver_resetBus 094C  
                   ??_rd1RegCompleteHandler 002C                              __size_of_write 018D  
                         _i2c_ISR$intlevel0 0D76                                   _letter_hi 01B2  
                              _letter_space 0138            ??_IOCCF4_DefaultInterruptHandler 0070  
           ?_IOCCF4_DefaultInterruptHandler 0070                     ??_wr1RegCompleteHandler 002C  
                     i2c_driver_setI2cISR@f 0022                         __size_of_returnStop 0006  
                                 clear_ram0 09FB                                    _PIE1bits 0090  
                                  _PIE2bits 0091                                 write@digit1 0328  
                               write@digit2 0329                                 write@digit3 032A  
                               write@digit4 032B                                 write@digit5 032C  
       __size_of_INTERRUPT_InterruptManager 002A                                   _wallColor 00C3  
                                  _PIR1bits 0010                                    _PIR2bits 0011  
                          ?_mssp_disableIRQ 0070                                 write@number 0364  
                      __CFG_WDTCPS$WDTCPS1F 0000                                    _SSP1CON1 0215  
                                  _SSP1CON2 0216                ?_i2c_setDataCompleteCallback 0027  
            ?i1_i2c_setDataCompleteCallback 0075                                    _SSP1STAT 0214  
                       __end_of_setCallBack 0D72                           ??_PIN_MANAGER_IOC 0071  
                                ?_drawPixel 0022                                  ?_drawWalls 0070  
              __size_ofi1_i2c_driver_TXData 0005                           i1_i2c_driver_stop 0959  
              i2c_setAddressNACKCallback@cb 0027                           ?_do_I2C_SEND_STOP 0070  
               ?i1_do_I2C_SEND_RESTART_READ 0070                          ?i1_i2c_driver_stop 0070  
                               ??_i2c_close 0022                               ??_returnReset 002C  
                        ??_do_I2C_SEND_STOP 0022                      __size_of_mssp_clearIRQ 0003  
                            ??_writeDisplay 0038                    __size_of_i2c_driver_open 000A  
                         ??i1_mssp_clearIRQ 0070                ??_i2c_setAddressNACKCallback 002A  
                  __size_of_i2c_driver_stop 0003           __end_of_do_I2C_SEND_RESTART_WRITE 0A2D  
              __size_ofi1_i2c_driver_isNACK 000C                               ??_mssp_setIRQ 0022  
            ??_i2c_driver_clearBusCollision 0070                     __end_of_do_I2C_TX_EMPTY 0E6F  
                                 _writeWord 02DD                           ___lmul@multiplier 0022  
                  ?_rdBlkRegCompleteHandler 002B                         ??i1_i2c_driver_stop 0070  
              __size_of_do_I2C_SEND_RESTART 0008                     _do_I2C_DO_ACK$intlevel0 0A41  
                                  _i2c_open 06F2                               ?i1_returnStop 0079  
                    ?_rd2RegCompleteHandler 002B                         _do_I2C_DO_NACK_STOP 0A45  
                          __size_of_i2c_ISR 0026                      ?_wr2RegCompleteHandler 002B  
           _wr2RegCompleteHandler$intlevel0 0BD9             _rd2RegCompleteHandler$intlevel0 0C2A  
     __end_of_i2c_driver_setBusCollisionISR 09F5      __size_of_i2c_driver_setBusCollisionISR 0006  
             _i2c_driver_setBusCollisionISR 09EF                         i2c_writeNBytes@data 0034  
                              ?_do_I2C_IDLE 0070                    ??i1_i2c_driver_getRXData 0070  
                              ?_do_I2C_RCEN 0070                     ??_OSCILLATOR_Initialize 0022  
                          __size_of___awdiv 0052                    __size_of_i2c_masterWrite 0004  
                          __size_of___awmod 0046                  __size_of_i2c_driver_TXData 0006  
           __size_of_do_I2C_DO_ADDRESS_NACK 002A                   __end_ofi1_i2c_driver_stop 095C  
                     i1i2c_setBuffer@buffer 0070                            __size_of___lwdiv 0035  
                          __size_of___lwmod 002D               ??_i2c_setDataCompleteCallback 002A  
           __end_ofi1_rd1RegCompleteHandler 0B76                    __size_ofi1_i2c_setBuffer 000D  
                             ??i1_do_I2C_RX 007A                               ??i1_do_I2C_TX 007A  
        _do_I2C_SEND_RESTART_READ$intlevel0 0A21                 __size_ofi1_do_I2C_SEND_STOP 0004  
                          __size_of_endGame 0071                    __size_of_buttonInterrupt 000D  
           __end_ofi1_wr1RegCompleteHandler 0B61                        ?_do_I2C_DO_NACK_STOP 0070  
              __end_of_do_I2C_SEND_ADR_READ 0AD6             __size_ofi1_do_I2C_SEND_ADR_READ 0008  
                __size_of_i2c_driver_isNACK 000D                           ?_i2c_driver_start 0070  
                        i1_i2c_restartWrite 07FE                             ___lwdiv@divisor 0022  
                               ??_do_I2C_RX 002C                                 ??_do_I2C_TX 002C  
                           ___lwdiv@counter 0027                          ??_i2c_driver_start 0022  
                                  __ptext10 0546                                    __ptext11 0DC1  
                                  __ptext20 0AA7                                    __ptext12 0B17  
                                  __ptext21 0A9C                                    __ptext13 06F2  
                                  __ptext30 0A91                                    __ptext22 0D72  
                                  __ptext14 09F5                                    __ptext31 0ACA  
                                  __ptext23 078D                                    __ptext15 09EF  
                                  __ptext40 0B0A                                    __ptext32 0A35  
                                  __ptext24 05A4                                    __ptext16 0A7C  
                                  __ptext41 09E9                                    __ptext33 0A2D  
                                  __ptext25 0DEA                                    __ptext17 09AC  
                                  __ptext50 0C0B                                    __ptext42 097A  
                                  __ptext34 0A25                                    __ptext26 0A4D  
                                  __ptext18 0D29                                    __ptext51 0BF0  
                                  __ptext43 09A8                                    __ptext35 0A1D  
                                  __ptext27 0A45                                    __ptext19 0A72  
                                  __ptext60 096E                                    __ptext52 09D7  
                                  __ptext44 094C                                    __ptext36 0A55  
                                  __ptext28 0A3D                                    __ptext61 0BBA  
                                  __ptext53 0BD5                                    __ptext45 0977  
                                  __ptext37 0A86                                    __ptext29 0A68  
                                  __ptext70 0221                                    __ptext62 096B  
                                  __ptext54 0AFD                                    __ptext46 09E3  
                                  __ptext38 0E41                                    __ptext71 09D1  
                                  __ptext63 0968                                    __ptext55 0D4D  
                                  __ptext47 09DD                                    __ptext39 097D  
                                  __ptext80 0CE2                                    __ptext72 0E9F  
                                  __ptext64 0650                                    __ptext56 0B8B  
                                  __ptext48 0C60                                    __ptext81 09A0  
                                  __ptext73 09CB                                    __ptext65 05FC  
                                  __ptext57 0974                                    __ptext49 0C26  
                                  __ptext90 0988                                    __ptext82 099C  
                                  __ptext74 0A5E                                    __ptext66 0F08  
                                  __ptext58 0971                                    __ptext91 09B5  
                                  __ptext83 0998                                    __ptext67 0B24  
                                  __ptext59 09A4                                    __ptext92 0A07  
                                  __ptext84 09C5                                    __ptext76 0CC0  
                                  __ptext68 0E14                                    __ptext93 0D98  
                                  __ptext85 0A0E                                    __ptext77 0965  
                                  __ptext69 0ED3                                    __ptext94 0962  
                                  __ptext86 0A15                                    __ptext78 0F7B  
                                  __ptext95 0ABE                                    __ptext87 0994  
                                  __ptext79 0740                                    __ptext96 09B0  
                                  __ptext88 0990                                    __ptext97 095F  
                                  __ptext89 098C                                    __ptext98 0984  
                                  __ptext99 094B                                _SSP1CON1bits 0215  
                          __size_of_reverse 0037                                _SSP1CON2bits 0216  
                                ?_writeWord 003D                                _shiftCounter 0059  
                      __end_of_do_I2C_RESET 0A91                                  _IOCCF4_ISR 0AE3  
                            ??i1_returnStop 007A                     i1_do_I2C_SEND_ADR_WRITE 0A0E  
                       ?i1_i2c_restartWrite 0079                __end_ofi1_i2c_driver_sendACK 0984  
                       __end_of_returnReset 09E9                               __size_of_main 0064  
                             __size_of_rand 003C                         __end_of_mssp_setIRQ 0980  
              __end_ofi1_i2c_driver_restart 0959                                    _letter_c 0148  
                                  _letter_e 0158                                    _letter_n 01C2  
                                  _letter_o 0140                                    _letter_r 01AA  
                                  _letter_s 0150                                    _letter_w 01BA  
                      i1i2c_driver_TXData@d 0070                __end_ofi1_i2c_driver_startRX 095F  
                      __CFG_WDTCWS$WDTCWSSW 0000                                 _setCallBack 0D4D  
                              ??_shiftWalls 0040                     ??i1_do_I2C_SEND_RESTART 0070  
                             _mssp_clearIRQ 0968                     i2c_masterOperation@read 0032  
      __size_ofi1_do_I2C_SEND_RESTART_WRITE 0004                                    _number_0 0268  
                                  _number_1 0260                                    _number_2 0258  
                                  _number_3 0250                                    _number_4 0248  
                                  _number_5 0240                                    _number_6 0238  
                                  _number_7 0230                                    _number_8 0228  
                                  _number_9 0220                                    int$flags 007E  
                ??i1_do_I2C_DO_ADDRESS_NACK 007A            __end_ofi1_do_I2C_DO_NACK_RESTART 09A4  
        __end_of_INTERRUPT_InterruptManager 002E                  _INTERRUPT_InterruptManager 0004  
                                writeWord@k 0052                              write@selection 0363  
                              _SSP1STATbits 0214                        ??i1_i2c_restartWrite 007A  
          __end_of_do_I2C_SEND_RESTART_READ 0A25                                 ??_drawPixel 0024  
                               ??_drawWalls 0026                                ??_returnStop 002C  
                  __end_of_i2c_restartWrite 09DD                       ??_do_I2C_DO_NACK_STOP 0022  
                  mssp_waitForEvent@timeout 0022              i2c_driver_setBusCollisionISR@f 0022  
                                _INTCONbits 000B                          i2c_writeNBytes@len 0035  
                       __end_ofi1_do_I2C_RX 0FBA                         __end_ofi1_do_I2C_TX 078D  
                       writeWord@shiftValue 004F                          __end_of_shiftWalls 0410  
                  __size_ofi1_do_I2C_DO_ACK 0004                            ?_do_I2C_TX_EMPTY 0070  
                    _do_I2C_DO_ADDRESS_NACK 0DEA              __size_ofi1_do_I2C_DO_NACK_STOP 0004  
                                  intlevel1 0000               __end_ofi1_do_I2C_DO_NACK_STOP 09A0  
                    _do_I2C_RESET$intlevel0 0A8A                      rd2RegCompleteHandler@p 002B  
                         ??_i2c_driver_open 0022                            ___lwmod@dividend 002C  
                         ??_i2c_driver_stop 0022                     ?_PIN_MANAGER_Initialize 0070  
                         i2c_restartWrite@p 002B                      i1_do_I2C_SEND_ADR_READ 0A15  
                         __CFG_CLKOUTEN$OFF 0000                  ?i1_rdBlkRegCompleteHandler 0079  
                              ?_clearPixels 0070                          __end_of_returnStop 09E3  
                            ?_mssp_clearIRQ 0070                       __end_ofi1_setCallBack 0D29  
                         write@letter_space 0320         __size_ofi1_do_I2C_SEND_RESTART_READ 0004  
                                  reverse@b 0025                        __end_of_writeDisplay 05A4  
              __end_of_i2c_driver_getRXData 097D             __size_ofi1_i2c_driver_getRXData 0003  
                    wr2RegCompleteHandler@p 002B                  __size_ofi1_i2c_driver_stop 0003  
                               _pixelbuffer 0120                                 _numberTable 01A0  
                   __size_ofi1_do_I2C_RESET 0007                             ___lwmod@divisor 002A  
                         ??_i2c_masterWrite 0034          __end_of_i2c_setAddressNACKCallback 0B24  
                _i2c_setAddressNACKCallback 0B17                             ___lwmod@counter 002F  
                    __size_of_i2c_setBuffer 0015                           ??i1_i2c_setBuffer 0074  
                               _returnReset 09E3            _do_I2C_DO_NACK_RESTART$intlevel0 0A51  
                         ??_buttonInterrupt 0070                                 _mssp_setIRQ 097D  
                 ??i1_do_I2C_SEND_ADR_WRITE 0071                                 ??_writeWord 003E  
              __end_of_i2c_driver_setI2cISR 09FB                      __size_ofi1_do_I2C_IDLE 0005  
                    __size_ofi1_do_I2C_RCEN 0006                                 ?_IOCCF4_ISR 0070  
            __end_of_PIN_MANAGER_Initialize 0ED3                 __end_of_i2c_busCollisionISR 0956  
            __size_of_rd1RegCompleteHandler 001B               __end_of_rd1RegCompleteHandler 0C26  
                       i1_i2c_driver_TXData 09B0                             _PIN_MANAGER_IOC 09BF  
            __size_of_wr1RegCompleteHandler 001B            __size_ofi1_rd1RegCompleteHandler 0015  
             __end_of_wr1RegCompleteHandler 0C0B                       _do_I2C_SEND_ADR_WRITE 0A91  
               __end_of_i2c_driver_sendNACK 09AC                        _do_I2C_SEND_ADR_READ 0ACA  
         __end_ofi1_rdBlkRegCompleteHandler 0BBA            __size_ofi1_wr1RegCompleteHandler 0015  
                __end_of_i2c_driver_sendACK 09A8                 __end_of_i2c_driver_resetBus 094D  
